
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002450  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08002600  08002600  00012600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002710  08002710  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08002710  08002710  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002710  08002710  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002710  08002710  00012710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002714  08002714  00012714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08002718  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          00000460  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004e8  200004e8  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003b9f  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000aa5  00000000  00000000  00023c57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000278  00000000  00000000  00024700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000210  00000000  00000000  00024978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003b56  00000000  00000000  00024b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000030ac  00000000  00000000  000286de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000d39d  00000000  00000000  0002b78a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00038b27  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000010e8  00000000  00000000  00038b7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000088 	.word	0x20000088
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080025e8 	.word	0x080025e8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	080025e8 	.word	0x080025e8

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <USART2_Init>:

uint8_t g_data = 0;


void USART2_Init(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
	usart2_handle.pUSARTx = USART2;
 80002a4:	4b0d      	ldr	r3, [pc, #52]	; (80002dc <USART2_Init+0x3c>)
 80002a6:	4a0e      	ldr	r2, [pc, #56]	; (80002e0 <USART2_Init+0x40>)
 80002a8:	601a      	str	r2, [r3, #0]
	usart2_handle.USART_Config.USART_Baud = USART_STD_BAUD_115200;
 80002aa:	4b0c      	ldr	r3, [pc, #48]	; (80002dc <USART2_Init+0x3c>)
 80002ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002b0:	609a      	str	r2, [r3, #8]
	usart2_handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 80002b2:	4b0a      	ldr	r3, [pc, #40]	; (80002dc <USART2_Init+0x3c>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	73da      	strb	r2, [r3, #15]
	usart2_handle.USART_Config.USART_Mode = USART_MODE_TXRX;
 80002b8:	4b08      	ldr	r3, [pc, #32]	; (80002dc <USART2_Init+0x3c>)
 80002ba:	2202      	movs	r2, #2
 80002bc:	711a      	strb	r2, [r3, #4]
	usart2_handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 80002be:	4b07      	ldr	r3, [pc, #28]	; (80002dc <USART2_Init+0x3c>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	731a      	strb	r2, [r3, #12]
	usart2_handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 80002c4:	4b05      	ldr	r3, [pc, #20]	; (80002dc <USART2_Init+0x3c>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	735a      	strb	r2, [r3, #13]
	usart2_handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 80002ca:	4b04      	ldr	r3, [pc, #16]	; (80002dc <USART2_Init+0x3c>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	739a      	strb	r2, [r3, #14]
	USART_Init(&usart2_handle);
 80002d0:	4802      	ldr	r0, [pc, #8]	; (80002dc <USART2_Init+0x3c>)
 80002d2:	f000 fa75 	bl	80007c0 <USART_Init>
}
 80002d6:	bf00      	nop
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	200000b4 	.word	0x200000b4
 80002e0:	40004400 	.word	0x40004400

080002e4 <USART2_GPIOInit>:

void USART2_GPIOInit(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b084      	sub	sp, #16
 80002e8:	af00      	add	r7, sp, #0
	GPIO_Handle_t usart_gpios;

	usart_gpios.pGPIOx = GPIOA;
 80002ea:	4b0e      	ldr	r3, [pc, #56]	; (8000324 <USART2_GPIOInit+0x40>)
 80002ec:	607b      	str	r3, [r7, #4]
	usart_gpios.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80002ee:	2302      	movs	r3, #2
 80002f0:	727b      	strb	r3, [r7, #9]
	usart_gpios.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80002f2:	2300      	movs	r3, #0
 80002f4:	733b      	strb	r3, [r7, #12]
	usart_gpios.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 80002f6:	2301      	movs	r3, #1
 80002f8:	72fb      	strb	r3, [r7, #11]
	usart_gpios.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002fa:	2302      	movs	r3, #2
 80002fc:	72bb      	strb	r3, [r7, #10]
	usart_gpios.GPIO_PinConfig.GPIO_PinAltFunMode =7;
 80002fe:	2307      	movs	r3, #7
 8000300:	737b      	strb	r3, [r7, #13]

	// TX
	usart_gpios.GPIO_PinConfig.GPIO_PinNumber  = GPIO_PIN_NO_2;
 8000302:	2302      	movs	r3, #2
 8000304:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 8000306:	1d3b      	adds	r3, r7, #4
 8000308:	4618      	mov	r0, r3
 800030a:	f000 ff03 	bl	8001114 <GPIO_Init>

	//RX
	usart_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 800030e:	2303      	movs	r3, #3
 8000310:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	4618      	mov	r0, r3
 8000316:	f000 fefd 	bl	8001114 <GPIO_Init>

}
 800031a:	bf00      	nop
 800031c:	3710      	adds	r7, #16
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	40020000 	.word	0x40020000

08000328 <delay>:
	GPIO_Init(&GpioLed);

}

void delay(void)
{
 8000328:	b480      	push	{r7}
 800032a:	b083      	sub	sp, #12
 800032c:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 800032e:	2300      	movs	r3, #0
 8000330:	607b      	str	r3, [r7, #4]
 8000332:	e002      	b.n	800033a <delay+0x12>
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	3301      	adds	r3, #1
 8000338:	607b      	str	r3, [r7, #4]
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	4a04      	ldr	r2, [pc, #16]	; (8000350 <delay+0x28>)
 800033e:	4293      	cmp	r3, r2
 8000340:	d9f8      	bls.n	8000334 <delay+0xc>
}
 8000342:	bf00      	nop
 8000344:	bf00      	nop
 8000346:	370c      	adds	r7, #12
 8000348:	46bd      	mov	sp, r7
 800034a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034e:	4770      	bx	lr
 8000350:	0003d08f 	.word	0x0003d08f

08000354 <main>:
int main(void)
{
 8000354:	b590      	push	{r4, r7, lr}
 8000356:	b083      	sub	sp, #12
 8000358:	af00      	add	r7, sp, #0
	uint32_t cnt = 0;
 800035a:	2300      	movs	r3, #0
 800035c:	607b      	str	r3, [r7, #4]


	USART2_GPIOInit();
 800035e:	f7ff ffc1 	bl	80002e4 <USART2_GPIOInit>
    USART2_Init();
 8000362:	f7ff ff9d 	bl	80002a0 <USART2_Init>

    USART_IRQInterruptConfig(IRQ_NO_USART2,ENABLE);
 8000366:	2101      	movs	r1, #1
 8000368:	2026      	movs	r0, #38	; 0x26
 800036a:	f000 fb21 	bl	80009b0 <USART_IRQInterruptConfig>

    USART_PeripheralControl(USART2,ENABLE);
 800036e:	2101      	movs	r1, #1
 8000370:	482f      	ldr	r0, [pc, #188]	; (8000430 <main+0xdc>)
 8000372:	f000 fd45 	bl	8000e00 <USART_PeripheralControl>

    printf("Application is running\n");
 8000376:	482f      	ldr	r0, [pc, #188]	; (8000434 <main+0xe0>)
 8000378:	f001 f9f0 	bl	800175c <puts>

    //do forever
    while(1)
    {
		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 800037c:	bf00      	nop
 800037e:	2100      	movs	r1, #0
 8000380:	482d      	ldr	r0, [pc, #180]	; (8000438 <main+0xe4>)
 8000382:	f001 f85f 	bl	8001444 <GPIO_ReadFromInputPin>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0f8      	beq.n	800037e <main+0x2a>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 800038c:	f7ff ffcc 	bl	8000328 <delay>

		// Next message index ; make sure that cnt value doesn't cross 2
		cnt = cnt % 3;
 8000390:	687a      	ldr	r2, [r7, #4]
 8000392:	4b2a      	ldr	r3, [pc, #168]	; (800043c <main+0xe8>)
 8000394:	fba3 1302 	umull	r1, r3, r3, r2
 8000398:	0859      	lsrs	r1, r3, #1
 800039a:	460b      	mov	r3, r1
 800039c:	005b      	lsls	r3, r3, #1
 800039e:	440b      	add	r3, r1
 80003a0:	1ad3      	subs	r3, r2, r3
 80003a2:	607b      	str	r3, [r7, #4]

		//First lets enable the reception in interrupt mode
		//this code enables the receive interrupt
		while ( USART_ReceiveDataIT(&usart2_handle,(uint8_t*)rx_buf,strlen(msg[cnt])) != USART_READY );
 80003a4:	bf00      	nop
 80003a6:	4a26      	ldr	r2, [pc, #152]	; (8000440 <main+0xec>)
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003ae:	4618      	mov	r0, r3
 80003b0:	f7ff ff1e 	bl	80001f0 <strlen>
 80003b4:	4603      	mov	r3, r0
 80003b6:	461a      	mov	r2, r3
 80003b8:	4922      	ldr	r1, [pc, #136]	; (8000444 <main+0xf0>)
 80003ba:	4823      	ldr	r0, [pc, #140]	; (8000448 <main+0xf4>)
 80003bc:	f000 fad1 	bl	8000962 <USART_ReceiveDataIT>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d1ef      	bne.n	80003a6 <main+0x52>

		//Send the msg indexed by cnt in blocking mode
    	USART_SendData(&usart2_handle,(uint8_t*)msg[cnt],strlen(msg[cnt]));
 80003c6:	4a1e      	ldr	r2, [pc, #120]	; (8000440 <main+0xec>)
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80003ce:	4a1c      	ldr	r2, [pc, #112]	; (8000440 <main+0xec>)
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003d6:	4618      	mov	r0, r3
 80003d8:	f7ff ff0a 	bl	80001f0 <strlen>
 80003dc:	4603      	mov	r3, r0
 80003de:	461a      	mov	r2, r3
 80003e0:	4621      	mov	r1, r4
 80003e2:	4819      	ldr	r0, [pc, #100]	; (8000448 <main+0xf4>)
 80003e4:	f000 fa6f 	bl	80008c6 <USART_SendData>

    	printf("Transmitted : %s\n",msg[cnt]);
 80003e8:	4a15      	ldr	r2, [pc, #84]	; (8000440 <main+0xec>)
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003f0:	4619      	mov	r1, r3
 80003f2:	4816      	ldr	r0, [pc, #88]	; (800044c <main+0xf8>)
 80003f4:	f001 f92c 	bl	8001650 <iprintf>


    	//Now lets wait until all the bytes are received from the arduino .
    	//When all the bytes are received rxCmplt will be SET in application callback
    	while(rxCmplt != SET);
 80003f8:	bf00      	nop
 80003fa:	4b15      	ldr	r3, [pc, #84]	; (8000450 <main+0xfc>)
 80003fc:	781b      	ldrb	r3, [r3, #0]
 80003fe:	2b01      	cmp	r3, #1
 8000400:	d1fb      	bne.n	80003fa <main+0xa6>

    	//just make sure that last byte should be null otherwise %s fails while printing
    	rx_buf[strlen(msg[cnt])+ 1] = '\0';
 8000402:	4a0f      	ldr	r2, [pc, #60]	; (8000440 <main+0xec>)
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800040a:	4618      	mov	r0, r3
 800040c:	f7ff fef0 	bl	80001f0 <strlen>
 8000410:	4603      	mov	r3, r0
 8000412:	3301      	adds	r3, #1
 8000414:	4a0b      	ldr	r2, [pc, #44]	; (8000444 <main+0xf0>)
 8000416:	2100      	movs	r1, #0
 8000418:	54d1      	strb	r1, [r2, r3]

    	//Print what we received from the arduino
    	printf("Received    : %s\n",rx_buf);
 800041a:	490a      	ldr	r1, [pc, #40]	; (8000444 <main+0xf0>)
 800041c:	480d      	ldr	r0, [pc, #52]	; (8000454 <main+0x100>)
 800041e:	f001 f917 	bl	8001650 <iprintf>

    	//invalidate the flag
    	rxCmplt = RESET;
 8000422:	4b0b      	ldr	r3, [pc, #44]	; (8000450 <main+0xfc>)
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]

    	//move on to next message indexed in msg[]
    	cnt ++;
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	3301      	adds	r3, #1
 800042c:	607b      	str	r3, [r7, #4]
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 800042e:	e7a5      	b.n	800037c <main+0x28>
 8000430:	40004400 	.word	0x40004400
 8000434:	08002638 	.word	0x08002638
 8000438:	40020000 	.word	0x40020000
 800043c:	aaaaaaab 	.word	0xaaaaaaab
 8000440:	20000000 	.word	0x20000000
 8000444:	200000d8 	.word	0x200000d8
 8000448:	200000b4 	.word	0x200000b4
 800044c:	08002650 	.word	0x08002650
 8000450:	200000a4 	.word	0x200000a4
 8000454:	08002664 	.word	0x08002664

08000458 <USART2_IRQHandler>:
	return 0;
}


void USART2_IRQHandler(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
	USART_IRQHandling(&usart2_handle);
 800045c:	4802      	ldr	r0, [pc, #8]	; (8000468 <USART2_IRQHandler+0x10>)
 800045e:	f000 fb2b 	bl	8000ab8 <USART_IRQHandling>
}
 8000462:	bf00      	nop
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	200000b4 	.word	0x200000b4

0800046c <USART_ApplicationEventCallback>:




void USART_ApplicationEventCallback( USART_Handle_t *pUSARTHandle,uint8_t ApEv)
{
 800046c:	b480      	push	{r7}
 800046e:	b083      	sub	sp, #12
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
 8000474:	460b      	mov	r3, r1
 8000476:	70fb      	strb	r3, [r7, #3]
   if(ApEv == USART_EVENT_RX_CMPLT)
 8000478:	78fb      	ldrb	r3, [r7, #3]
 800047a:	2b01      	cmp	r3, #1
 800047c:	d102      	bne.n	8000484 <USART_ApplicationEventCallback+0x18>
   {
			rxCmplt = SET;
 800047e:	4b04      	ldr	r3, [pc, #16]	; (8000490 <USART_ApplicationEventCallback+0x24>)
 8000480:	2201      	movs	r2, #1
 8000482:	701a      	strb	r2, [r3, #0]

   }else if (ApEv == USART_EVENT_TX_CMPLT)
   {
	   ;
   }
}
 8000484:	bf00      	nop
 8000486:	370c      	adds	r7, #12
 8000488:	46bd      	mov	sp, r7
 800048a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048e:	4770      	bx	lr
 8000490:	200000a4 	.word	0x200000a4

08000494 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000494:	b480      	push	{r7}
 8000496:	b083      	sub	sp, #12
 8000498:	af00      	add	r7, sp, #0
 800049a:	4603      	mov	r3, r0
 800049c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800049e:	4b0f      	ldr	r3, [pc, #60]	; (80004dc <ITM_SendChar+0x48>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	4a0e      	ldr	r2, [pc, #56]	; (80004dc <ITM_SendChar+0x48>)
 80004a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004a8:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80004aa:	4b0d      	ldr	r3, [pc, #52]	; (80004e0 <ITM_SendChar+0x4c>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	4a0c      	ldr	r2, [pc, #48]	; (80004e0 <ITM_SendChar+0x4c>)
 80004b0:	f043 0301 	orr.w	r3, r3, #1
 80004b4:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80004b6:	bf00      	nop
 80004b8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	f003 0301 	and.w	r3, r3, #1
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d0f8      	beq.n	80004b8 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80004c6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80004ca:	79fb      	ldrb	r3, [r7, #7]
 80004cc:	6013      	str	r3, [r2, #0]
}
 80004ce:	bf00      	nop
 80004d0:	370c      	adds	r7, #12
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	e000edfc 	.word	0xe000edfc
 80004e0:	e0000e00 	.word	0xe0000e00

080004e4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b086      	sub	sp, #24
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	60f8      	str	r0, [r7, #12]
 80004ec:	60b9      	str	r1, [r7, #8]
 80004ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004f0:	2300      	movs	r3, #0
 80004f2:	617b      	str	r3, [r7, #20]
 80004f4:	e00a      	b.n	800050c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80004f6:	f3af 8000 	nop.w
 80004fa:	4601      	mov	r1, r0
 80004fc:	68bb      	ldr	r3, [r7, #8]
 80004fe:	1c5a      	adds	r2, r3, #1
 8000500:	60ba      	str	r2, [r7, #8]
 8000502:	b2ca      	uxtb	r2, r1
 8000504:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000506:	697b      	ldr	r3, [r7, #20]
 8000508:	3301      	adds	r3, #1
 800050a:	617b      	str	r3, [r7, #20]
 800050c:	697a      	ldr	r2, [r7, #20]
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	429a      	cmp	r2, r3
 8000512:	dbf0      	blt.n	80004f6 <_read+0x12>
	}

return len;
 8000514:	687b      	ldr	r3, [r7, #4]
}
 8000516:	4618      	mov	r0, r3
 8000518:	3718      	adds	r7, #24
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}

0800051e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800051e:	b580      	push	{r7, lr}
 8000520:	b086      	sub	sp, #24
 8000522:	af00      	add	r7, sp, #0
 8000524:	60f8      	str	r0, [r7, #12]
 8000526:	60b9      	str	r1, [r7, #8]
 8000528:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800052a:	2300      	movs	r3, #0
 800052c:	617b      	str	r3, [r7, #20]
 800052e:	e009      	b.n	8000544 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000530:	68bb      	ldr	r3, [r7, #8]
 8000532:	1c5a      	adds	r2, r3, #1
 8000534:	60ba      	str	r2, [r7, #8]
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	4618      	mov	r0, r3
 800053a:	f7ff ffab 	bl	8000494 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800053e:	697b      	ldr	r3, [r7, #20]
 8000540:	3301      	adds	r3, #1
 8000542:	617b      	str	r3, [r7, #20]
 8000544:	697a      	ldr	r2, [r7, #20]
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	429a      	cmp	r2, r3
 800054a:	dbf1      	blt.n	8000530 <_write+0x12>
	}
	return len;
 800054c:	687b      	ldr	r3, [r7, #4]
}
 800054e:	4618      	mov	r0, r3
 8000550:	3718      	adds	r7, #24
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}

08000556 <_close>:

int _close(int file)
{
 8000556:	b480      	push	{r7}
 8000558:	b083      	sub	sp, #12
 800055a:	af00      	add	r7, sp, #0
 800055c:	6078      	str	r0, [r7, #4]
	return -1;
 800055e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000562:	4618      	mov	r0, r3
 8000564:	370c      	adds	r7, #12
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr

0800056e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800056e:	b480      	push	{r7}
 8000570:	b083      	sub	sp, #12
 8000572:	af00      	add	r7, sp, #0
 8000574:	6078      	str	r0, [r7, #4]
 8000576:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800057e:	605a      	str	r2, [r3, #4]
	return 0;
 8000580:	2300      	movs	r3, #0
}
 8000582:	4618      	mov	r0, r3
 8000584:	370c      	adds	r7, #12
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr

0800058e <_isatty>:

int _isatty(int file)
{
 800058e:	b480      	push	{r7}
 8000590:	b083      	sub	sp, #12
 8000592:	af00      	add	r7, sp, #0
 8000594:	6078      	str	r0, [r7, #4]
	return 1;
 8000596:	2301      	movs	r3, #1
}
 8000598:	4618      	mov	r0, r3
 800059a:	370c      	adds	r7, #12
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr

080005a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	60f8      	str	r0, [r7, #12]
 80005ac:	60b9      	str	r1, [r7, #8]
 80005ae:	607a      	str	r2, [r7, #4]
	return 0;
 80005b0:	2300      	movs	r3, #0
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	3714      	adds	r7, #20
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
	...

080005c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005c8:	4a14      	ldr	r2, [pc, #80]	; (800061c <_sbrk+0x5c>)
 80005ca:	4b15      	ldr	r3, [pc, #84]	; (8000620 <_sbrk+0x60>)
 80005cc:	1ad3      	subs	r3, r2, r3
 80005ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005d0:	697b      	ldr	r3, [r7, #20]
 80005d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005d4:	4b13      	ldr	r3, [pc, #76]	; (8000624 <_sbrk+0x64>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d102      	bne.n	80005e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005dc:	4b11      	ldr	r3, [pc, #68]	; (8000624 <_sbrk+0x64>)
 80005de:	4a12      	ldr	r2, [pc, #72]	; (8000628 <_sbrk+0x68>)
 80005e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005e2:	4b10      	ldr	r3, [pc, #64]	; (8000624 <_sbrk+0x64>)
 80005e4:	681a      	ldr	r2, [r3, #0]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4413      	add	r3, r2
 80005ea:	693a      	ldr	r2, [r7, #16]
 80005ec:	429a      	cmp	r2, r3
 80005ee:	d207      	bcs.n	8000600 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005f0:	f000 fffc 	bl	80015ec <__errno>
 80005f4:	4603      	mov	r3, r0
 80005f6:	220c      	movs	r2, #12
 80005f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005fa:	f04f 33ff 	mov.w	r3, #4294967295
 80005fe:	e009      	b.n	8000614 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000600:	4b08      	ldr	r3, [pc, #32]	; (8000624 <_sbrk+0x64>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000606:	4b07      	ldr	r3, [pc, #28]	; (8000624 <_sbrk+0x64>)
 8000608:	681a      	ldr	r2, [r3, #0]
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	4413      	add	r3, r2
 800060e:	4a05      	ldr	r2, [pc, #20]	; (8000624 <_sbrk+0x64>)
 8000610:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000612:	68fb      	ldr	r3, [r7, #12]
}
 8000614:	4618      	mov	r0, r3
 8000616:	3718      	adds	r7, #24
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20020000 	.word	0x20020000
 8000620:	00000400 	.word	0x00000400
 8000624:	200000a8 	.word	0x200000a8
 8000628:	200004e8 	.word	0x200004e8

0800062c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800062c:	480d      	ldr	r0, [pc, #52]	; (8000664 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800062e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000630:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000634:	480c      	ldr	r0, [pc, #48]	; (8000668 <LoopForever+0x6>)
  ldr r1, =_edata
 8000636:	490d      	ldr	r1, [pc, #52]	; (800066c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000638:	4a0d      	ldr	r2, [pc, #52]	; (8000670 <LoopForever+0xe>)
  movs r3, #0
 800063a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800063c:	e002      	b.n	8000644 <LoopCopyDataInit>

0800063e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800063e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000640:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000642:	3304      	adds	r3, #4

08000644 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000644:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000646:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000648:	d3f9      	bcc.n	800063e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800064a:	4a0a      	ldr	r2, [pc, #40]	; (8000674 <LoopForever+0x12>)
  ldr r4, =_ebss
 800064c:	4c0a      	ldr	r4, [pc, #40]	; (8000678 <LoopForever+0x16>)
  movs r3, #0
 800064e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000650:	e001      	b.n	8000656 <LoopFillZerobss>

08000652 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000652:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000654:	3204      	adds	r2, #4

08000656 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000656:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000658:	d3fb      	bcc.n	8000652 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800065a:	f000 ffcd 	bl	80015f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800065e:	f7ff fe79 	bl	8000354 <main>

08000662 <LoopForever>:

LoopForever:
    b LoopForever
 8000662:	e7fe      	b.n	8000662 <LoopForever>
  ldr   r0, =_estack
 8000664:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000668:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800066c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000670:	08002718 	.word	0x08002718
  ldr r2, =_sbss
 8000674:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000678:	200004e8 	.word	0x200004e8

0800067c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800067c:	e7fe      	b.n	800067c <ADC_IRQHandler>
	...

08000680 <USART_PeriClockControl>:
 *
 *@Note					-
 *
 */
void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	460b      	mov	r3, r1
 800068a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800068c:	78fb      	ldrb	r3, [r7, #3]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d141      	bne.n	8000716 <USART_PeriClockControl+0x96>
	{
		if(pUSARTx == USART1)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	4a43      	ldr	r2, [pc, #268]	; (80007a4 <USART_PeriClockControl+0x124>)
 8000696:	4293      	cmp	r3, r2
 8000698:	d106      	bne.n	80006a8 <USART_PeriClockControl+0x28>
		{
			USART1_PCLK_EN();
 800069a:	4b43      	ldr	r3, [pc, #268]	; (80007a8 <USART_PeriClockControl+0x128>)
 800069c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800069e:	4a42      	ldr	r2, [pc, #264]	; (80007a8 <USART_PeriClockControl+0x128>)
 80006a0:	f043 0310 	orr.w	r3, r3, #16
 80006a4:	6453      	str	r3, [r2, #68]	; 0x44
		else if(pUSARTx == USART6)
		{
			USART6_PCLK_DI();
		}
	}
}
 80006a6:	e077      	b.n	8000798 <USART_PeriClockControl+0x118>
		else if(pUSARTx == USART2)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	4a40      	ldr	r2, [pc, #256]	; (80007ac <USART_PeriClockControl+0x12c>)
 80006ac:	4293      	cmp	r3, r2
 80006ae:	d106      	bne.n	80006be <USART_PeriClockControl+0x3e>
			USART2_PCLK_EN();
 80006b0:	4b3d      	ldr	r3, [pc, #244]	; (80007a8 <USART_PeriClockControl+0x128>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b4:	4a3c      	ldr	r2, [pc, #240]	; (80007a8 <USART_PeriClockControl+0x128>)
 80006b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006ba:	6413      	str	r3, [r2, #64]	; 0x40
}
 80006bc:	e06c      	b.n	8000798 <USART_PeriClockControl+0x118>
		else if(pUSARTx == USART3)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	4a3b      	ldr	r2, [pc, #236]	; (80007b0 <USART_PeriClockControl+0x130>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d106      	bne.n	80006d4 <USART_PeriClockControl+0x54>
			USART3_PCLK_EN();
 80006c6:	4b38      	ldr	r3, [pc, #224]	; (80007a8 <USART_PeriClockControl+0x128>)
 80006c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ca:	4a37      	ldr	r2, [pc, #220]	; (80007a8 <USART_PeriClockControl+0x128>)
 80006cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006d0:	6413      	str	r3, [r2, #64]	; 0x40
}
 80006d2:	e061      	b.n	8000798 <USART_PeriClockControl+0x118>
		else if(pUSARTx == UART4)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	4a37      	ldr	r2, [pc, #220]	; (80007b4 <USART_PeriClockControl+0x134>)
 80006d8:	4293      	cmp	r3, r2
 80006da:	d106      	bne.n	80006ea <USART_PeriClockControl+0x6a>
			UART4_PCLK_EN();
 80006dc:	4b32      	ldr	r3, [pc, #200]	; (80007a8 <USART_PeriClockControl+0x128>)
 80006de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e0:	4a31      	ldr	r2, [pc, #196]	; (80007a8 <USART_PeriClockControl+0x128>)
 80006e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80006e6:	6413      	str	r3, [r2, #64]	; 0x40
}
 80006e8:	e056      	b.n	8000798 <USART_PeriClockControl+0x118>
		else if(pUSARTx == UART5)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	4a32      	ldr	r2, [pc, #200]	; (80007b8 <USART_PeriClockControl+0x138>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d106      	bne.n	8000700 <USART_PeriClockControl+0x80>
			UART5_PCLK_EN();
 80006f2:	4b2d      	ldr	r3, [pc, #180]	; (80007a8 <USART_PeriClockControl+0x128>)
 80006f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f6:	4a2c      	ldr	r2, [pc, #176]	; (80007a8 <USART_PeriClockControl+0x128>)
 80006f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006fc:	6413      	str	r3, [r2, #64]	; 0x40
}
 80006fe:	e04b      	b.n	8000798 <USART_PeriClockControl+0x118>
		else if(pUSARTx == USART6)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	4a2e      	ldr	r2, [pc, #184]	; (80007bc <USART_PeriClockControl+0x13c>)
 8000704:	4293      	cmp	r3, r2
 8000706:	d147      	bne.n	8000798 <USART_PeriClockControl+0x118>
			USART6_PCLK_EN();
 8000708:	4b27      	ldr	r3, [pc, #156]	; (80007a8 <USART_PeriClockControl+0x128>)
 800070a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800070c:	4a26      	ldr	r2, [pc, #152]	; (80007a8 <USART_PeriClockControl+0x128>)
 800070e:	f043 0320 	orr.w	r3, r3, #32
 8000712:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000714:	e040      	b.n	8000798 <USART_PeriClockControl+0x118>
		if(pUSARTx == USART1)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	4a22      	ldr	r2, [pc, #136]	; (80007a4 <USART_PeriClockControl+0x124>)
 800071a:	4293      	cmp	r3, r2
 800071c:	d106      	bne.n	800072c <USART_PeriClockControl+0xac>
			USART1_PCLK_DI();
 800071e:	4b22      	ldr	r3, [pc, #136]	; (80007a8 <USART_PeriClockControl+0x128>)
 8000720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000722:	4a21      	ldr	r2, [pc, #132]	; (80007a8 <USART_PeriClockControl+0x128>)
 8000724:	f023 0310 	bic.w	r3, r3, #16
 8000728:	6453      	str	r3, [r2, #68]	; 0x44
}
 800072a:	e035      	b.n	8000798 <USART_PeriClockControl+0x118>
		else if(pUSARTx == USART2)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	4a1f      	ldr	r2, [pc, #124]	; (80007ac <USART_PeriClockControl+0x12c>)
 8000730:	4293      	cmp	r3, r2
 8000732:	d106      	bne.n	8000742 <USART_PeriClockControl+0xc2>
			USART2_PCLK_DI();
 8000734:	4b1c      	ldr	r3, [pc, #112]	; (80007a8 <USART_PeriClockControl+0x128>)
 8000736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000738:	4a1b      	ldr	r2, [pc, #108]	; (80007a8 <USART_PeriClockControl+0x128>)
 800073a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800073e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000740:	e02a      	b.n	8000798 <USART_PeriClockControl+0x118>
		else if(pUSARTx == USART3)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	4a1a      	ldr	r2, [pc, #104]	; (80007b0 <USART_PeriClockControl+0x130>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d106      	bne.n	8000758 <USART_PeriClockControl+0xd8>
			USART3_PCLK_DI();
 800074a:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <USART_PeriClockControl+0x128>)
 800074c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074e:	4a16      	ldr	r2, [pc, #88]	; (80007a8 <USART_PeriClockControl+0x128>)
 8000750:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000754:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000756:	e01f      	b.n	8000798 <USART_PeriClockControl+0x118>
		else if(pUSARTx == UART4)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	4a16      	ldr	r2, [pc, #88]	; (80007b4 <USART_PeriClockControl+0x134>)
 800075c:	4293      	cmp	r3, r2
 800075e:	d106      	bne.n	800076e <USART_PeriClockControl+0xee>
			UART4_PCLK_DI();
 8000760:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <USART_PeriClockControl+0x128>)
 8000762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000764:	4a10      	ldr	r2, [pc, #64]	; (80007a8 <USART_PeriClockControl+0x128>)
 8000766:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800076a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800076c:	e014      	b.n	8000798 <USART_PeriClockControl+0x118>
		else if(pUSARTx == UART5)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	4a11      	ldr	r2, [pc, #68]	; (80007b8 <USART_PeriClockControl+0x138>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d106      	bne.n	8000784 <USART_PeriClockControl+0x104>
			UART5_PCLK_DI();
 8000776:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <USART_PeriClockControl+0x128>)
 8000778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077a:	4a0b      	ldr	r2, [pc, #44]	; (80007a8 <USART_PeriClockControl+0x128>)
 800077c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000780:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000782:	e009      	b.n	8000798 <USART_PeriClockControl+0x118>
		else if(pUSARTx == USART6)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	4a0d      	ldr	r2, [pc, #52]	; (80007bc <USART_PeriClockControl+0x13c>)
 8000788:	4293      	cmp	r3, r2
 800078a:	d105      	bne.n	8000798 <USART_PeriClockControl+0x118>
			USART6_PCLK_DI();
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <USART_PeriClockControl+0x128>)
 800078e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000790:	4a05      	ldr	r2, [pc, #20]	; (80007a8 <USART_PeriClockControl+0x128>)
 8000792:	f023 0320 	bic.w	r3, r3, #32
 8000796:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000798:	bf00      	nop
 800079a:	370c      	adds	r7, #12
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr
 80007a4:	40011000 	.word	0x40011000
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40004400 	.word	0x40004400
 80007b0:	40004800 	.word	0x40004800
 80007b4:	40004c00 	.word	0x40004c00
 80007b8:	40005000 	.word	0x40005000
 80007bc:	40011400 	.word	0x40011400

080007c0 <USART_Init>:
 *
 *@Note					-
 *
 */
void USART_Init(USART_Handle_t *pUSARTHandle)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	//Temporary variable
	uint32_t tempreg=0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	60fb      	str	r3, [r7, #12]

/******************************** Configuration of CR1******************************************/

	//Implement the code to enable the Clock for given USART peripheral
	 USART_PeriClockControl(pUSARTHandle->pUSARTx, ENABLE);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	2101      	movs	r1, #1
 80007d2:	4618      	mov	r0, r3
 80007d4:	f7ff ff54 	bl	8000680 <USART_PeriClockControl>

	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	if ( pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	791b      	ldrb	r3, [r3, #4]
 80007dc:	2b01      	cmp	r3, #1
 80007de:	d104      	bne.n	80007ea <USART_Init+0x2a>
	{
		//Implement the code to enable the Receiver bit field
		tempreg|= (1 << USART_CR1_RE);
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	f043 0304 	orr.w	r3, r3, #4
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	e010      	b.n	800080c <USART_Init+0x4c>
	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	791b      	ldrb	r3, [r3, #4]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d104      	bne.n	80007fc <USART_Init+0x3c>
	{
		//Implement the code to enable the Transmitter bit field
		tempreg |= ( 1 << USART_CR1_TE );
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	f043 0308 	orr.w	r3, r3, #8
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	e007      	b.n	800080c <USART_Init+0x4c>

	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	791b      	ldrb	r3, [r3, #4]
 8000800:	2b02      	cmp	r3, #2
 8000802:	d103      	bne.n	800080c <USART_Init+0x4c>
	{
		//Implement the code to enable the both Transmitter and Receiver bit fields
		tempreg |= ( ( 1 << USART_CR1_RE) | ( 1 << USART_CR1_TE) );
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	f043 030c 	orr.w	r3, r3, #12
 800080a:	60fb      	str	r3, [r7, #12]
	}

    //Implement the code to configure the Word length configuration item
	tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M ;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	7b5b      	ldrb	r3, [r3, #13]
 8000810:	031b      	lsls	r3, r3, #12
 8000812:	461a      	mov	r2, r3
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	4313      	orrs	r3, r2
 8000818:	60fb      	str	r3, [r7, #12]


    //Configuration of parity control bit fields
	if ( pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	7b9b      	ldrb	r3, [r3, #14]
 800081e:	2b01      	cmp	r3, #1
 8000820:	d104      	bne.n	800082c <USART_Init+0x6c>
	{
		//Implement the code to enale the parity control
		tempreg |= ( 1 << USART_CR1_PCE);
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	e00b      	b.n	8000844 <USART_Init+0x84>

		//Implement the code to enable EVEN parity
		//Not required because by default EVEN parity will be selected once you enable the parity control

	}else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD )
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	7b9b      	ldrb	r3, [r3, #14]
 8000830:	2b02      	cmp	r3, #2
 8000832:	d107      	bne.n	8000844 <USART_Init+0x84>
	{
		//Implement the code to enable the parity control
	    tempreg |= ( 1 << USART_CR1_PCE);
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800083a:	60fb      	str	r3, [r7, #12]

	    //Implement the code to enable ODD parity
	    tempreg |= ( 1 << USART_CR1_PS);
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000842:	60fb      	str	r3, [r7, #12]

	}

   //Program the CR1 register
	pUSARTHandle->pUSARTx->CR1 = tempreg;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	68fa      	ldr	r2, [r7, #12]
 800084a:	60da      	str	r2, [r3, #12]

/******************************** Configuration of CR2******************************************/

	tempreg=0;
 800084c:	2300      	movs	r3, #0
 800084e:	60fb      	str	r3, [r7, #12]

	//Implement the code to configure the number of stop bits inserted during USART frame transmission
	tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	7b1b      	ldrb	r3, [r3, #12]
 8000854:	031b      	lsls	r3, r3, #12
 8000856:	461a      	mov	r2, r3
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	4313      	orrs	r3, r2
 800085c:	60fb      	str	r3, [r7, #12]

	//Program the CR2 register
	pUSARTHandle->pUSARTx->CR2 = tempreg;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	68fa      	ldr	r2, [r7, #12]
 8000864:	611a      	str	r2, [r3, #16]

/******************************** Configuration of CR3******************************************/

	tempreg=0;
 8000866:	2300      	movs	r3, #0
 8000868:	60fb      	str	r3, [r7, #12]

	//Configuration of USART hardware flow control
	if ( pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	7bdb      	ldrb	r3, [r3, #15]
 800086e:	2b01      	cmp	r3, #1
 8000870:	d104      	bne.n	800087c <USART_Init+0xbc>
	{
		//Implement the code to enable CTS flow control
		tempreg |= ( 1 << USART_CR3_CTSE);
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	e014      	b.n	80008a6 <USART_Init+0xe6>


	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	7bdb      	ldrb	r3, [r3, #15]
 8000880:	2b02      	cmp	r3, #2
 8000882:	d104      	bne.n	800088e <USART_Init+0xce>
	{
		//Implement the code to enable RTS flow control
		tempreg |= ( 1 << USART_CR3_RTSE);
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	e00b      	b.n	80008a6 <USART_Init+0xe6>

	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	7bdb      	ldrb	r3, [r3, #15]
 8000892:	2b03      	cmp	r3, #3
 8000894:	d107      	bne.n	80008a6 <USART_Init+0xe6>
	{
		//Implement the code to enable both CTS and RTS Flow control
		tempreg |= ( 1 << USART_CR3_CTSE);
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800089c:	60fb      	str	r3, [r7, #12]
		tempreg |= ( 1 << USART_CR3_RTSE);
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008a4:	60fb      	str	r3, [r7, #12]
	}


	pUSARTHandle->pUSARTx->CR3 = tempreg;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	68fa      	ldr	r2, [r7, #12]
 80008ac:	615a      	str	r2, [r3, #20]

/******************************** Configuration of BRR(Baudrate register)******************************************/

	//Implement the code to configure the baud rate
	//We will cover this in the lecture. No action required here
	USART_SetBaudRate(pUSARTHandle->pUSARTx, pUSARTHandle->USART_Config.USART_Baud);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681a      	ldr	r2, [r3, #0]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	689b      	ldr	r3, [r3, #8]
 80008b6:	4619      	mov	r1, r3
 80008b8:	4610      	mov	r0, r2
 80008ba:	f000 fad1 	bl	8000e60 <USART_SetBaudRate>

}
 80008be:	bf00      	nop
 80008c0:	3710      	adds	r7, #16
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <USART_SendData>:
 *
 *@Note					-
 *
 */
void USART_SendData(USART_Handle_t *pUSARTHandle,uint8_t *pTxBuffer, uint32_t Len)
{
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b086      	sub	sp, #24
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	60f8      	str	r0, [r7, #12]
 80008ce:	60b9      	str	r1, [r7, #8]
 80008d0:	607a      	str	r2, [r7, #4]
	uint16_t *pdata;
   //Loop over until "Len" number of bytes are transferred
	for(uint32_t i = 0 ; i < Len; i++)
 80008d2:	2300      	movs	r3, #0
 80008d4:	617b      	str	r3, [r7, #20]
 80008d6:	e031      	b.n	800093c <USART_SendData+0x76>
	{
		//Implement the code to wait until TXE flag is set in the SR
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TXE));
 80008d8:	bf00      	nop
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	2180      	movs	r1, #128	; 0x80
 80008e0:	4618      	mov	r0, r3
 80008e2:	f000 faa9 	bl	8000e38 <USART_GetFlagStatus>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d0f6      	beq.n	80008da <USART_SendData+0x14>

         //Check the USART_WordLength item for 9BIT or 8BIT in a frame
		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	7b5b      	ldrb	r3, [r3, #13]
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d118      	bne.n	8000926 <USART_SendData+0x60>
		{
			//if 9BIT, load the DR with 2bytes masking the bits other than first 9 bits
			pdata = (uint16_t*) pTxBuffer;
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 80008f8:	693b      	ldr	r3, [r7, #16]
 80008fa:	881b      	ldrh	r3, [r3, #0]
 80008fc:	461a      	mov	r2, r3
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000906:	605a      	str	r2, [r3, #4]

			//check for USART_ParityControl
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	7b9b      	ldrb	r3, [r3, #14]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d106      	bne.n	800091e <USART_SendData+0x58>
			{
				//No parity is used in this transfer. so, 9bits of user data will be sent
				//Implement the code to increment pTxBuffer twice
				pTxBuffer++;
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	3301      	adds	r3, #1
 8000914:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 8000916:	68bb      	ldr	r3, [r7, #8]
 8000918:	3301      	adds	r3, #1
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	e00b      	b.n	8000936 <USART_SendData+0x70>
			}
			else
			{
				//Parity bit is used in this transfer . so , 8bits of user data will be sent
				//The 9th bit will be replaced by parity bit by the hardware
				pTxBuffer++;
 800091e:	68bb      	ldr	r3, [r7, #8]
 8000920:	3301      	adds	r3, #1
 8000922:	60bb      	str	r3, [r7, #8]
 8000924:	e007      	b.n	8000936 <USART_SendData+0x70>
			}
		}
		else
		{
			//This is 8bit data transfer
			pUSARTHandle->pUSARTx->DR = (*pTxBuffer  & (uint8_t)0xFF);
 8000926:	68bb      	ldr	r3, [r7, #8]
 8000928:	781a      	ldrb	r2, [r3, #0]
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]

			//Implement the code to increment the buffer address
			pTxBuffer++;
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	3301      	adds	r3, #1
 8000934:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	3301      	adds	r3, #1
 800093a:	617b      	str	r3, [r7, #20]
 800093c:	697a      	ldr	r2, [r7, #20]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	429a      	cmp	r2, r3
 8000942:	d3c9      	bcc.n	80008d8 <USART_SendData+0x12>
		}
	}

	//Implement the code to wait till TC flag is set in the SR
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TC));
 8000944:	bf00      	nop
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	2140      	movs	r1, #64	; 0x40
 800094c:	4618      	mov	r0, r3
 800094e:	f000 fa73 	bl	8000e38 <USART_GetFlagStatus>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d0f6      	beq.n	8000946 <USART_SendData+0x80>
}
 8000958:	bf00      	nop
 800095a:	bf00      	nop
 800095c:	3718      	adds	r7, #24
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}

08000962 <USART_ReceiveDataIT>:
 *
 *@Note					-
 *
 */
uint8_t USART_ReceiveDataIT(USART_Handle_t *pUSARTHandle, uint8_t *pRxBuffer, uint32_t Len)
{
 8000962:	b480      	push	{r7}
 8000964:	b087      	sub	sp, #28
 8000966:	af00      	add	r7, sp, #0
 8000968:	60f8      	str	r0, [r7, #12]
 800096a:	60b9      	str	r1, [r7, #8]
 800096c:	607a      	str	r2, [r7, #4]
	uint8_t rxstate = pUSARTHandle->RxBusyState;
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000974:	75fb      	strb	r3, [r7, #23]

	if(rxstate != USART_BUSY_IN_RX)
 8000976:	7dfb      	ldrb	r3, [r7, #23]
 8000978:	2b01      	cmp	r3, #1
 800097a:	d011      	beq.n	80009a0 <USART_ReceiveDataIT+0x3e>
	{
		pUSARTHandle->RxLen = Len;
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	687a      	ldr	r2, [r7, #4]
 8000980:	61da      	str	r2, [r3, #28]
		pUSARTHandle->pRxBuffer = pRxBuffer;
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	68ba      	ldr	r2, [r7, #8]
 8000986:	615a      	str	r2, [r3, #20]
		pUSARTHandle->RxBusyState = USART_BUSY_IN_RX;
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	2201      	movs	r2, #1
 800098c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		//Implement the code to enable interrupt for RXNE
		pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR1_RXNEIE);
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	68da      	ldr	r2, [r3, #12]
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	f042 0220 	orr.w	r2, r2, #32
 800099e:	60da      	str	r2, [r3, #12]

	}

	return rxstate;
 80009a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	371c      	adds	r7, #28
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
	...

080009b0 <USART_IRQInterruptConfig>:
 *
 *@Note					-
 *
 */
void USART_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	460a      	mov	r2, r1
 80009ba:	71fb      	strb	r3, [r7, #7]
 80009bc:	4613      	mov	r3, r2
 80009be:	71bb      	strb	r3, [r7, #6]
	if(EnorDi == ENABLE)
 80009c0:	79bb      	ldrb	r3, [r7, #6]
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d133      	bne.n	8000a2e <USART_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31)
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	2b1f      	cmp	r3, #31
 80009ca:	d80a      	bhi.n	80009e2 <USART_IRQInterruptConfig+0x32>
		{
			// program ISER0 register
			*NVIC_ISER0 |= (1 << IRQNumber);
 80009cc:	4b35      	ldr	r3, [pc, #212]	; (8000aa4 <USART_IRQInterruptConfig+0xf4>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	79fa      	ldrb	r2, [r7, #7]
 80009d2:	2101      	movs	r1, #1
 80009d4:	fa01 f202 	lsl.w	r2, r1, r2
 80009d8:	4611      	mov	r1, r2
 80009da:	4a32      	ldr	r2, [pc, #200]	; (8000aa4 <USART_IRQInterruptConfig+0xf4>)
 80009dc:	430b      	orrs	r3, r1
 80009de:	6013      	str	r3, [r2, #0]
		{
			// program ISER2 register
			*NVIC_ICER1 |= (1 << (IRQNumber % 64));
		}
	}
}
 80009e0:	e059      	b.n	8000a96 <USART_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 31 && IRQNumber < 64)
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	2b1f      	cmp	r3, #31
 80009e6:	d90f      	bls.n	8000a08 <USART_IRQInterruptConfig+0x58>
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	2b3f      	cmp	r3, #63	; 0x3f
 80009ec:	d80c      	bhi.n	8000a08 <USART_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 80009ee:	4b2e      	ldr	r3, [pc, #184]	; (8000aa8 <USART_IRQInterruptConfig+0xf8>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	79fa      	ldrb	r2, [r7, #7]
 80009f4:	f002 021f 	and.w	r2, r2, #31
 80009f8:	2101      	movs	r1, #1
 80009fa:	fa01 f202 	lsl.w	r2, r1, r2
 80009fe:	4611      	mov	r1, r2
 8000a00:	4a29      	ldr	r2, [pc, #164]	; (8000aa8 <USART_IRQInterruptConfig+0xf8>)
 8000a02:	430b      	orrs	r3, r1
 8000a04:	6013      	str	r3, [r2, #0]
 8000a06:	e046      	b.n	8000a96 <USART_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96)
 8000a08:	79fb      	ldrb	r3, [r7, #7]
 8000a0a:	2b3f      	cmp	r3, #63	; 0x3f
 8000a0c:	d943      	bls.n	8000a96 <USART_IRQInterruptConfig+0xe6>
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	2b5f      	cmp	r3, #95	; 0x5f
 8000a12:	d840      	bhi.n	8000a96 <USART_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= (1 << (IRQNumber % 32));
 8000a14:	4b25      	ldr	r3, [pc, #148]	; (8000aac <USART_IRQInterruptConfig+0xfc>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	79fa      	ldrb	r2, [r7, #7]
 8000a1a:	f002 021f 	and.w	r2, r2, #31
 8000a1e:	2101      	movs	r1, #1
 8000a20:	fa01 f202 	lsl.w	r2, r1, r2
 8000a24:	4611      	mov	r1, r2
 8000a26:	4a21      	ldr	r2, [pc, #132]	; (8000aac <USART_IRQInterruptConfig+0xfc>)
 8000a28:	430b      	orrs	r3, r1
 8000a2a:	6013      	str	r3, [r2, #0]
}
 8000a2c:	e033      	b.n	8000a96 <USART_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 8000a2e:	79fb      	ldrb	r3, [r7, #7]
 8000a30:	2b1f      	cmp	r3, #31
 8000a32:	d80a      	bhi.n	8000a4a <USART_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 8000a34:	4b1e      	ldr	r3, [pc, #120]	; (8000ab0 <USART_IRQInterruptConfig+0x100>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	79fa      	ldrb	r2, [r7, #7]
 8000a3a:	2101      	movs	r1, #1
 8000a3c:	fa01 f202 	lsl.w	r2, r1, r2
 8000a40:	4611      	mov	r1, r2
 8000a42:	4a1b      	ldr	r2, [pc, #108]	; (8000ab0 <USART_IRQInterruptConfig+0x100>)
 8000a44:	430b      	orrs	r3, r1
 8000a46:	6013      	str	r3, [r2, #0]
}
 8000a48:	e025      	b.n	8000a96 <USART_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 31 && IRQNumber < 64)
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
 8000a4c:	2b1f      	cmp	r3, #31
 8000a4e:	d90f      	bls.n	8000a70 <USART_IRQInterruptConfig+0xc0>
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	2b3f      	cmp	r3, #63	; 0x3f
 8000a54:	d80c      	bhi.n	8000a70 <USART_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 8000a56:	4b17      	ldr	r3, [pc, #92]	; (8000ab4 <USART_IRQInterruptConfig+0x104>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	79fa      	ldrb	r2, [r7, #7]
 8000a5c:	f002 021f 	and.w	r2, r2, #31
 8000a60:	2101      	movs	r1, #1
 8000a62:	fa01 f202 	lsl.w	r2, r1, r2
 8000a66:	4611      	mov	r1, r2
 8000a68:	4a12      	ldr	r2, [pc, #72]	; (8000ab4 <USART_IRQInterruptConfig+0x104>)
 8000a6a:	430b      	orrs	r3, r1
 8000a6c:	6013      	str	r3, [r2, #0]
 8000a6e:	e012      	b.n	8000a96 <USART_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96)
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	2b3f      	cmp	r3, #63	; 0x3f
 8000a74:	d90f      	bls.n	8000a96 <USART_IRQInterruptConfig+0xe6>
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	2b5f      	cmp	r3, #95	; 0x5f
 8000a7a:	d80c      	bhi.n	8000a96 <USART_IRQInterruptConfig+0xe6>
			*NVIC_ICER1 |= (1 << (IRQNumber % 64));
 8000a7c:	4b0d      	ldr	r3, [pc, #52]	; (8000ab4 <USART_IRQInterruptConfig+0x104>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	79fa      	ldrb	r2, [r7, #7]
 8000a82:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000a86:	2101      	movs	r1, #1
 8000a88:	fa01 f202 	lsl.w	r2, r1, r2
 8000a8c:	4611      	mov	r1, r2
 8000a8e:	4a09      	ldr	r2, [pc, #36]	; (8000ab4 <USART_IRQInterruptConfig+0x104>)
 8000a90:	430b      	orrs	r3, r1
 8000a92:	6013      	str	r3, [r2, #0]
}
 8000a94:	e7ff      	b.n	8000a96 <USART_IRQInterruptConfig+0xe6>
 8000a96:	bf00      	nop
 8000a98:	370c      	adds	r7, #12
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	e000e100 	.word	0xe000e100
 8000aa8:	e000e104 	.word	0xe000e104
 8000aac:	e000e108 	.word	0xe000e108
 8000ab0:	e000e180 	.word	0xe000e180
 8000ab4:	e000e184 	.word	0xe000e184

08000ab8 <USART_IRQHandling>:
 *
 *@Note					-
 *
 */
void USART_IRQHandling(USART_Handle_t *pUSARTHandle)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b086      	sub	sp, #24
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
	uint16_t *pdata;

/*************************Check for TC flag ********************************************/

    //Implement the code to check the state of TC bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_TC);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aca:	617b      	str	r3, [r7, #20]

	 //Implement the code to check the state of TCEIE bit
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_TCIE);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	68db      	ldr	r3, [r3, #12]
 8000ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ad6:	613b      	str	r3, [r7, #16]

	if(temp1 && temp2 )
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d021      	beq.n	8000b22 <USART_IRQHandling+0x6a>
 8000ade:	693b      	ldr	r3, [r7, #16]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d01e      	beq.n	8000b22 <USART_IRQHandling+0x6a>
	{
		//this interrupt is because of TC

		//close transmission and call application callback if TxLen is zero
		if ( pUSARTHandle->TxBusyState == USART_BUSY_IN_TX)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000aea:	2b02      	cmp	r3, #2
 8000aec:	d119      	bne.n	8000b22 <USART_IRQHandling+0x6a>
		{
			//Check the TxLen . If it is zero then close the data transmission
			if(! pUSARTHandle->TxLen )
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	699b      	ldr	r3, [r3, #24]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d115      	bne.n	8000b22 <USART_IRQHandling+0x6a>
			{
				//Implement the code to clear the TC flag
				pUSARTHandle->pUSARTx->SR &= ~( 1 << USART_SR_TC);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000b04:	601a      	str	r2, [r3, #0]

				//Implement the code to clear the TCIE control bit

				//Reset the application state
				pUSARTHandle->TxBusyState = USART_READY;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2200      	movs	r2, #0
 8000b0a:	f883 2020 	strb.w	r2, [r3, #32]

				//Reset Buffer address to NULL
				pUSARTHandle->pTxBuffer = NULL;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]

				//Reset the length to zero
				pUSARTHandle->TxLen = 0;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2200      	movs	r2, #0
 8000b18:	619a      	str	r2, [r3, #24]

				//Call the applicaton call back with event USART_EVENT_TX_CMPLT
				USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_TX_CMPLT);
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f7ff fca5 	bl	800046c <USART_ApplicationEventCallback>
	}

/*************************Check for TXE flag ********************************************/

	//Implement the code to check the state of TXE bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_TXE);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b2c:	617b      	str	r3, [r7, #20]

	//Implement the code to check the state of TXEIE bit in CR1
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_TXEIE);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b38:	613b      	str	r3, [r7, #16]


	if(temp1 && temp2 )
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d055      	beq.n	8000bec <USART_IRQHandling+0x134>
 8000b40:	693b      	ldr	r3, [r7, #16]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d052      	beq.n	8000bec <USART_IRQHandling+0x134>
	{
		//this interrupt is because of TXE

		if(pUSARTHandle->TxBusyState == USART_BUSY_IN_TX)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b4c:	2b02      	cmp	r3, #2
 8000b4e:	d14d      	bne.n	8000bec <USART_IRQHandling+0x134>
		{
			//Keep sending data until Txlen reaches to zero
			if(pUSARTHandle->TxLen > 0)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d03d      	beq.n	8000bd4 <USART_IRQHandling+0x11c>
			{
				//Check the USART_WordLength item for 9BIT or 8BIT in a frame
				if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	7b5b      	ldrb	r3, [r3, #13]
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d129      	bne.n	8000bb4 <USART_IRQHandling+0xfc>
				{
					//if 9BIT , load the DR with 2bytes masking the bits other than first 9 bits
					pdata = (uint16_t*) pUSARTHandle->pTxBuffer;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	691b      	ldr	r3, [r3, #16]
 8000b64:	60fb      	str	r3, [r7, #12]

					//loading only first 9 bits , so we have to mask with the value 0x01FF
					pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	881b      	ldrh	r3, [r3, #0]
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000b74:	605a      	str	r2, [r3, #4]

					//check for USART_ParityControl
					if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	7b9b      	ldrb	r3, [r3, #14]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d10f      	bne.n	8000b9e <USART_IRQHandling+0xe6>
					{
						//No parity is used in this transfer , so, 9bits of user data will be sent
						//Implement the code to increment pTxBuffer twice
						pUSARTHandle->pTxBuffer++;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	691b      	ldr	r3, [r3, #16]
 8000b82:	1c5a      	adds	r2, r3, #1
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	611a      	str	r2, [r3, #16]
						pUSARTHandle->pTxBuffer++;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	691b      	ldr	r3, [r3, #16]
 8000b8c:	1c5a      	adds	r2, r3, #1
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	611a      	str	r2, [r3, #16]

						//Implement the code to decrement the length
						pUSARTHandle->TxLen -= 2;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	699b      	ldr	r3, [r3, #24]
 8000b96:	1e9a      	subs	r2, r3, #2
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	619a      	str	r2, [r3, #24]
 8000b9c:	e01a      	b.n	8000bd4 <USART_IRQHandling+0x11c>
					}
					else
					{
						//Parity bit is used in this transfer . so , 8bits of user data will be sent
						//The 9th bit will be replaced by parity bit by the hardware
						pUSARTHandle->pTxBuffer++;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	691b      	ldr	r3, [r3, #16]
 8000ba2:	1c5a      	adds	r2, r3, #1
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	611a      	str	r2, [r3, #16]

						//Implement the code to decrement the length
						pUSARTHandle->TxLen--;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	699b      	ldr	r3, [r3, #24]
 8000bac:	1e5a      	subs	r2, r3, #1
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	619a      	str	r2, [r3, #24]
 8000bb2:	e00f      	b.n	8000bd4 <USART_IRQHandling+0x11c>
					}
				}
				else
				{
					//This is 8bit data transfer
					pUSARTHandle->pUSARTx->DR = (*pUSARTHandle->pTxBuffer  & (uint8_t)0xFF);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	691b      	ldr	r3, [r3, #16]
 8000bb8:	781a      	ldrb	r2, [r3, #0]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]

					//Implement the code to increment the buffer address
					pUSARTHandle->pTxBuffer++;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	691b      	ldr	r3, [r3, #16]
 8000bc4:	1c5a      	adds	r2, r3, #1
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	611a      	str	r2, [r3, #16]

					//Implement the code to decrement the length
					pUSARTHandle->TxLen--;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	699b      	ldr	r3, [r3, #24]
 8000bce:	1e5a      	subs	r2, r3, #1
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	619a      	str	r2, [r3, #24]
				}

			}
			if (pUSARTHandle->TxLen == 0 )
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	699b      	ldr	r3, [r3, #24]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d107      	bne.n	8000bec <USART_IRQHandling+0x134>
			{
				//TxLen is zero
				//Implement the code to clear the TXEIE bit (disable interrupt for TXE flag )
				pUSARTHandle->pUSARTx->CR1 &= ~(1 << USART_CR1_TXEIE);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	68da      	ldr	r2, [r3, #12]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000bea:	60da      	str	r2, [r3, #12]
		}
	}

/*************************Check for RXNE flag ********************************************/

	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_RXNE);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f003 0320 	and.w	r3, r3, #32
 8000bf6:	617b      	str	r3, [r7, #20]
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_RXNEIE);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	68db      	ldr	r3, [r3, #12]
 8000bfe:	f003 0320 	and.w	r3, r3, #32
 8000c02:	613b      	str	r3, [r7, #16]


	if(temp1 && temp2 )
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d073      	beq.n	8000cf2 <USART_IRQHandling+0x23a>
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d070      	beq.n	8000cf2 <USART_IRQHandling+0x23a>
	{
		//this interrupt is because of rxne
		//this interrupt is because of txe
		if(pUSARTHandle->RxBusyState == USART_BUSY_IN_RX)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d16b      	bne.n	8000cf2 <USART_IRQHandling+0x23a>
		{
			//TXE is set so send data
			if(pUSARTHandle->RxLen > 0)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	69db      	ldr	r3, [r3, #28]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d053      	beq.n	8000cca <USART_IRQHandling+0x212>
			{
				//Check the USART_WordLength to decide whether we are going to receive 9bit of data in a frame or 8 bit
				if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	7b5b      	ldrb	r3, [r3, #13]
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d12f      	bne.n	8000c8a <USART_IRQHandling+0x1d2>
				{
					//We are going to receive 9bit data in a frame

					//Now, check are we using USART_ParityControl control or not
					if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	7b9b      	ldrb	r3, [r3, #14]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d119      	bne.n	8000c66 <USART_IRQHandling+0x1ae>
					{
						//No parity is used. so, all 9bits will be of user data

						//read only first 9 bits so mask the DR with 0x01FF
						*((uint16_t*) pUSARTHandle->pRxBuffer) = (pUSARTHandle->pUSARTx->DR  & (uint16_t)0x01FF);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	b29a      	uxth	r2, r3
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	695b      	ldr	r3, [r3, #20]
 8000c3e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000c42:	b292      	uxth	r2, r2
 8000c44:	801a      	strh	r2, [r3, #0]

						//Now increment the pRxBuffer two times
						pUSARTHandle->pRxBuffer++;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	695b      	ldr	r3, [r3, #20]
 8000c4a:	1c5a      	adds	r2, r3, #1
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	615a      	str	r2, [r3, #20]
						pUSARTHandle->pRxBuffer++;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	695b      	ldr	r3, [r3, #20]
 8000c54:	1c5a      	adds	r2, r3, #1
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	615a      	str	r2, [r3, #20]

						//Implement the code to decrement the length
						pUSARTHandle->RxLen -= 2;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	69db      	ldr	r3, [r3, #28]
 8000c5e:	1e9a      	subs	r2, r3, #2
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	61da      	str	r2, [r3, #28]
 8000c64:	e031      	b.n	8000cca <USART_IRQHandling+0x212>
					}
					else
					{
						//Parity is used. so, 8bits will be of user data and 1 bit is parity
						 *pUSARTHandle->pRxBuffer = (pUSARTHandle->pUSARTx->DR  & (uint8_t)0xFF);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	685a      	ldr	r2, [r3, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	695b      	ldr	r3, [r3, #20]
 8000c70:	b2d2      	uxtb	r2, r2
 8000c72:	701a      	strb	r2, [r3, #0]

						 //Now increment the pRxBuffer
						 pUSARTHandle->pRxBuffer++;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	695b      	ldr	r3, [r3, #20]
 8000c78:	1c5a      	adds	r2, r3, #1
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	615a      	str	r2, [r3, #20]

						 //Implement the code to decrement the length
						 pUSARTHandle->RxLen--;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	69db      	ldr	r3, [r3, #28]
 8000c82:	1e5a      	subs	r2, r3, #1
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	61da      	str	r2, [r3, #28]
 8000c88:	e01f      	b.n	8000cca <USART_IRQHandling+0x212>
				else
				{
					//We are going to receive 8bit data in a frame

					//Now, check are we using USART_ParityControl control or not
					if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	7b9b      	ldrb	r3, [r3, #14]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d107      	bne.n	8000ca2 <USART_IRQHandling+0x1ea>
					{
						//No parity is used , so all 8bits will be of user data

						//read 8 bits from DR
						*pUSARTHandle->pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->DR  & (uint8_t)0xFF);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	685a      	ldr	r2, [r3, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	695b      	ldr	r3, [r3, #20]
 8000c9c:	b2d2      	uxtb	r2, r2
 8000c9e:	701a      	strb	r2, [r3, #0]
 8000ca0:	e009      	b.n	8000cb6 <USART_IRQHandling+0x1fe>
					else
					{
						//Parity is used, so , 7 bits will be of user data and 1 bit is parity

						//read only 7 bits , hence mask the DR with 0X7F
						 *pUSARTHandle->pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->DR  & (uint8_t)0x7F);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	b2da      	uxtb	r2, r3
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	695b      	ldr	r3, [r3, #20]
 8000cae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000cb2:	b2d2      	uxtb	r2, r2
 8000cb4:	701a      	strb	r2, [r3, #0]

					}

					//Now , increment the pRxBuffer
					pUSARTHandle->pRxBuffer++;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	695b      	ldr	r3, [r3, #20]
 8000cba:	1c5a      	adds	r2, r3, #1
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	615a      	str	r2, [r3, #20]

					//Implement the code to decrement the length
					pUSARTHandle->RxLen--;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	69db      	ldr	r3, [r3, #28]
 8000cc4:	1e5a      	subs	r2, r3, #1
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	61da      	str	r2, [r3, #28]
				}


			}//if of >0

			if(! pUSARTHandle->RxLen)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	69db      	ldr	r3, [r3, #28]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d10f      	bne.n	8000cf2 <USART_IRQHandling+0x23a>
			{
				//disable the rxne
				pUSARTHandle->pUSARTx->CR1 &= ~( 1 << USART_CR1_RXNEIE );
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	68da      	ldr	r2, [r3, #12]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f022 0220 	bic.w	r2, r2, #32
 8000ce0:	60da      	str	r2, [r3, #12]
				pUSARTHandle->RxBusyState = USART_READY;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_RX_CMPLT);
 8000cea:	2101      	movs	r1, #1
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f7ff fbbd 	bl	800046c <USART_ApplicationEventCallback>

/*************************Check for CTS flag ********************************************/
//Note : CTS feature is not applicable for UART4 and UART5

	//Implement the code to check the status of CTS bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_CTS);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000cfc:	617b      	str	r3, [r7, #20]

	//Implement the code to check the state of CTSE bit in CR1
	temp2 = pUSARTHandle->pUSARTx->CR3 & ( 1 << USART_CR3_CTSE);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	695b      	ldr	r3, [r3, #20]
 8000d04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d08:	613b      	str	r3, [r7, #16]

	//Implement the code to check the state of CTSIE bit in CR3 (This bit is not available for UART4 & UART5.)
	temp3 = pUSARTHandle->pUSARTx->CR3 & ( 1 << USART_CR3_CTSIE);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	695b      	ldr	r3, [r3, #20]
 8000d10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d14:	60bb      	str	r3, [r7, #8]


	if(temp1  && temp2 && temp3)
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d011      	beq.n	8000d40 <USART_IRQHandling+0x288>
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d00e      	beq.n	8000d40 <USART_IRQHandling+0x288>
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d00b      	beq.n	8000d40 <USART_IRQHandling+0x288>
	{
		//Implement the code to clear the CTS flag in SR
		pUSARTHandle->pUSARTx->SR &= ~( 1 << USART_SR_CTS);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000d36:	601a      	str	r2, [r3, #0]

		//this interrupt is because of cts
		USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_CTS);
 8000d38:	2103      	movs	r1, #3
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f7ff fb96 	bl	800046c <USART_ApplicationEventCallback>
	}

/*************************Check for IDLE detection flag ********************************************/

	//Implement the code to check the status of IDLE flag bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_IDLE);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f003 0310 	and.w	r3, r3, #16
 8000d4a:	617b      	str	r3, [r7, #20]

	//Implement the code to check the state of IDLEIE bit in CR1
	temp2 = pUSARTHandle->pUSARTx->CR3 & ( 1 << USART_CR3_CTSE);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	695b      	ldr	r3, [r3, #20]
 8000d52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d56:	613b      	str	r3, [r7, #16]


	if(temp1 && temp2)
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d00e      	beq.n	8000d7c <USART_IRQHandling+0x2c4>
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d00b      	beq.n	8000d7c <USART_IRQHandling+0x2c4>
	{
		//Implement the code to clear the IDLE flag. Refer to the RM to understand the clear sequence
		pUSARTHandle->pUSARTx->SR &= ~( 1 << USART_SR_IDLE);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f022 0210 	bic.w	r2, r2, #16
 8000d72:	601a      	str	r2, [r3, #0]

		//this interrupt is because of idle
		USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_IDLE);
 8000d74:	2102      	movs	r1, #2
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f7ff fb78 	bl	800046c <USART_ApplicationEventCallback>
	}

/*************************Check for Overrun detection flag ********************************************/

	//Implement the code to check the status of ORE flag  in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & USART_SR_ORE;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f003 0303 	and.w	r3, r3, #3
 8000d86:	617b      	str	r3, [r7, #20]

	//Implement the code to check the status of RXNEIE  bit in the CR1
	temp2 = pUSARTHandle->pUSARTx->CR1 & USART_CR1_RXNEIE;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	68db      	ldr	r3, [r3, #12]
 8000d8e:	f003 0305 	and.w	r3, r3, #5
 8000d92:	613b      	str	r3, [r7, #16]


	if(temp1  && temp2 )
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d006      	beq.n	8000da8 <USART_IRQHandling+0x2f0>
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d003      	beq.n	8000da8 <USART_IRQHandling+0x2f0>
	{
		//Need not to clear the ORE flag here, instead give an api for the application to clear the ORE flag .

		//this interrupt is because of Overrun error
		USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_ORE);
 8000da0:	2108      	movs	r1, #8
 8000da2:	6878      	ldr	r0, [r7, #4]
 8000da4:	f7ff fb62 	bl	800046c <USART_ApplicationEventCallback>

//Noise Flag, Overrun error and Framing Error in multibuffer communication
//We dont discuss multibuffer communication in this course. please refer to the RM
//The blow code will get executed in only if multibuffer mode is used.

	temp2 =  pUSARTHandle->pUSARTx->CR3 & ( 1 << USART_CR3_EIE) ;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	695b      	ldr	r3, [r3, #20]
 8000dae:	f003 0301 	and.w	r3, r3, #1
 8000db2:	613b      	str	r3, [r7, #16]

	if(temp2 )
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d01e      	beq.n	8000df8 <USART_IRQHandling+0x340>
	{
		temp1 = pUSARTHandle->pUSARTx->SR;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	617b      	str	r3, [r7, #20]
		if(temp1 & ( 1 << USART_SR_FE))
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	f003 0302 	and.w	r3, r3, #2
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d003      	beq.n	8000dd4 <USART_IRQHandling+0x31c>
			/*
				This bit is set by hardware when a de-synchronization, excessive noise or a break character
				is detected. It is cleared by a software sequence (an read to the USART_SR register
				followed by a read to the USART_DR register).
			*/
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERREVENT_FE);
 8000dcc:	210a      	movs	r1, #10
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f7ff fb4c 	bl	800046c <USART_ApplicationEventCallback>
		}

		if(temp1 & ( 1 << USART_SR_NF) )
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	f003 0304 	and.w	r3, r3, #4
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d003      	beq.n	8000de6 <USART_IRQHandling+0x32e>
			/*
				This bit is set by hardware when noise is detected on a received frame. It is cleared by a
				software sequence (an read to the USART_SR register followed by a read to the
				USART_DR register).
			*/
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERREVENT_NE);
 8000dde:	2109      	movs	r1, #9
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f7ff fb43 	bl	800046c <USART_ApplicationEventCallback>
		}

		if(temp1 & ( 1 << USART_SR_ORE) )
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	f003 0308 	and.w	r3, r3, #8
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d003      	beq.n	8000df8 <USART_IRQHandling+0x340>
		{
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERREVENT_ORE);
 8000df0:	210b      	movs	r1, #11
 8000df2:	6878      	ldr	r0, [r7, #4]
 8000df4:	f7ff fb3a 	bl	800046c <USART_ApplicationEventCallback>
		}
	}


}
 8000df8:	bf00      	nop
 8000dfa:	3718      	adds	r7, #24
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <USART_PeripheralControl>:
 *
 *@Note					-
 *
 */
void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnOrDi)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	460b      	mov	r3, r1
 8000e0a:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000e0c:	78fb      	ldrb	r3, [r7, #3]
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d106      	bne.n	8000e20 <USART_PeripheralControl+0x20>
	{
		pUSARTx->CR1 |= (1 << USART_CR1_UE);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	68db      	ldr	r3, [r3, #12]
 8000e16:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	60da      	str	r2, [r3, #12]
	}
	else
	{
		pUSARTx->CR1 &= ~(1 << USART_CR1_UE);
	}
}
 8000e1e:	e005      	b.n	8000e2c <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &= ~(1 << USART_CR1_UE);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	60da      	str	r2, [r3, #12]
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <USART_GetFlagStatus>:
 *
 *@Note					-
 *
 */
uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx , uint32_t FlagName)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
	if(pUSARTx->SR & FlagName)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <USART_GetFlagStatus+0x1a>
		return FLAG_SET;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e000      	b.n	8000e54 <USART_GetFlagStatus+0x1c>
	else
		return FLAG_RESET;
 8000e52:	2300      	movs	r3, #0
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <USART_SetBaudRate>:
 *
 * @Note              -  Resolve all the TODOs

 */
void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b088      	sub	sp, #32
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	6039      	str	r1, [r7, #0]
	uint32_t usartdiv;

	//variables to hold Mantissa and Fraction values
	uint32_t M_part,F_part;

  uint32_t tempreg=0;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	613b      	str	r3, [r7, #16]

  //Get the value of APB bus clock in to the variable PCLKx
  if(pUSARTx == USART1 || pUSARTx == USART6)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a31      	ldr	r2, [pc, #196]	; (8000f38 <USART_SetBaudRate+0xd8>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d003      	beq.n	8000e7e <USART_SetBaudRate+0x1e>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a30      	ldr	r2, [pc, #192]	; (8000f3c <USART_SetBaudRate+0xdc>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d103      	bne.n	8000e86 <USART_SetBaudRate+0x26>
  {
	   //USART1 and USART6 are hanging on APB2 bus
	   PCLKx = RCC_GetPCLK2Value();
 8000e7e:	f000 fb5b 	bl	8001538 <RCC_GetPCLK2Value>
 8000e82:	61f8      	str	r0, [r7, #28]
 8000e84:	e002      	b.n	8000e8c <USART_SetBaudRate+0x2c>
  }else
  {
	   PCLKx = RCC_GetPCLK1Value();
 8000e86:	f000 fafd 	bl	8001484 <RCC_GetPCLK1Value>
 8000e8a:	61f8      	str	r0, [r7, #28]
  }

  //Check for OVER8 configuration bit
  if(pUSARTx->CR1 & (1 << USART_CR1_OVER8))
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d00b      	beq.n	8000eb0 <USART_SetBaudRate+0x50>
  {
	   //OVER8 = 1 , over sampling by 8
	   usartdiv = ((25 * PCLKx) / (2 *BaudRate));
 8000e98:	69fa      	ldr	r2, [r7, #28]
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	4413      	add	r3, r2
 8000ea0:	009a      	lsls	r2, r3, #2
 8000ea2:	441a      	add	r2, r3
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eac:	61bb      	str	r3, [r7, #24]
 8000eae:	e00a      	b.n	8000ec6 <USART_SetBaudRate+0x66>
  }else
  {
	   //over sampling by 16
	  usartdiv = ((25 * PCLKx) / (4 *BaudRate));
 8000eb0:	69fa      	ldr	r2, [r7, #28]
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	4413      	add	r3, r2
 8000eb8:	009a      	lsls	r2, r3, #2
 8000eba:	441a      	add	r2, r3
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ec4:	61bb      	str	r3, [r7, #24]
  }

  //Calculate the Mantissa part
  M_part = usartdiv/100;
 8000ec6:	69bb      	ldr	r3, [r7, #24]
 8000ec8:	4a1d      	ldr	r2, [pc, #116]	; (8000f40 <USART_SetBaudRate+0xe0>)
 8000eca:	fba2 2303 	umull	r2, r3, r2, r3
 8000ece:	095b      	lsrs	r3, r3, #5
 8000ed0:	60fb      	str	r3, [r7, #12]

  //Place the Mantissa part in appropriate bit position . refer USART_BRR
  tempreg |= M_part << 4;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	011b      	lsls	r3, r3, #4
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]

  //Extract the fraction part
  F_part = (usartdiv - (M_part * 100));
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	2264      	movs	r2, #100	; 0x64
 8000ee0:	fb02 f303 	mul.w	r3, r2, r3
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	1ad3      	subs	r3, r2, r3
 8000ee8:	617b      	str	r3, [r7, #20]

  //Calculate the final fractional
  if(pUSARTx->CR1 & ( 1 << USART_CR1_OVER8))
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	68db      	ldr	r3, [r3, #12]
 8000eee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d00a      	beq.n	8000f0c <USART_SetBaudRate+0xac>
   {
	  //OVER8 = 1 , over sampling by 8
	  F_part = ((( F_part * 8)+ 50) / 100)& ((uint8_t)0x07);
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	00db      	lsls	r3, r3, #3
 8000efa:	3332      	adds	r3, #50	; 0x32
 8000efc:	4a10      	ldr	r2, [pc, #64]	; (8000f40 <USART_SetBaudRate+0xe0>)
 8000efe:	fba2 2303 	umull	r2, r3, r2, r3
 8000f02:	095b      	lsrs	r3, r3, #5
 8000f04:	f003 0307 	and.w	r3, r3, #7
 8000f08:	617b      	str	r3, [r7, #20]
 8000f0a:	e009      	b.n	8000f20 <USART_SetBaudRate+0xc0>

   }else
   {
	   //over sampling by 16
	   F_part = ((( F_part * 16)+ 50) / 100) & ((uint8_t)0x0F);
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	011b      	lsls	r3, r3, #4
 8000f10:	3332      	adds	r3, #50	; 0x32
 8000f12:	4a0b      	ldr	r2, [pc, #44]	; (8000f40 <USART_SetBaudRate+0xe0>)
 8000f14:	fba2 2303 	umull	r2, r3, r2, r3
 8000f18:	095b      	lsrs	r3, r3, #5
 8000f1a:	f003 030f 	and.w	r3, r3, #15
 8000f1e:	617b      	str	r3, [r7, #20]

   }

  //Place the fractional part in appropriate bit position . refer USART_BRR
  tempreg |= F_part;
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]

  //copy the value of tempreg in to BRR register
  pUSARTx->BRR = tempreg;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	609a      	str	r2, [r3, #8]
}
 8000f2e:	bf00      	nop
 8000f30:	3720      	adds	r7, #32
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40011000 	.word	0x40011000
 8000f3c:	40011400 	.word	0x40011400
 8000f40:	51eb851f 	.word	0x51eb851f

08000f44 <GPIO_PeripheralClockControl>:
 *
 *@Note					- none
 *
 */
void GPIO_PeripheralClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000f50:	78fb      	ldrb	r3, [r7, #3]
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d162      	bne.n	800101c <GPIO_PeripheralClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a64      	ldr	r2, [pc, #400]	; (80010ec <GPIO_PeripheralClockControl+0x1a8>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d106      	bne.n	8000f6c <GPIO_PeripheralClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000f5e:	4b64      	ldr	r3, [pc, #400]	; (80010f0 <GPIO_PeripheralClockControl+0x1ac>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	4a63      	ldr	r2, [pc, #396]	; (80010f0 <GPIO_PeripheralClockControl+0x1ac>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	6313      	str	r3, [r2, #48]	; 0x30
		else if(pGPIOx == GPIOI)
		{
			GPIOI_PCLK_DI();
		}
	}
}
 8000f6a:	e0b9      	b.n	80010e0 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	4a61      	ldr	r2, [pc, #388]	; (80010f4 <GPIO_PeripheralClockControl+0x1b0>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d106      	bne.n	8000f82 <GPIO_PeripheralClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000f74:	4b5e      	ldr	r3, [pc, #376]	; (80010f0 <GPIO_PeripheralClockControl+0x1ac>)
 8000f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f78:	4a5d      	ldr	r2, [pc, #372]	; (80010f0 <GPIO_PeripheralClockControl+0x1ac>)
 8000f7a:	f043 0302 	orr.w	r3, r3, #2
 8000f7e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f80:	e0ae      	b.n	80010e0 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a5c      	ldr	r2, [pc, #368]	; (80010f8 <GPIO_PeripheralClockControl+0x1b4>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d106      	bne.n	8000f98 <GPIO_PeripheralClockControl+0x54>
			GPIOC_PCLK_EN();
 8000f8a:	4b59      	ldr	r3, [pc, #356]	; (80010f0 <GPIO_PeripheralClockControl+0x1ac>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	4a58      	ldr	r2, [pc, #352]	; (80010f0 <GPIO_PeripheralClockControl+0x1ac>)
 8000f90:	f043 0304 	orr.w	r3, r3, #4
 8000f94:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f96:	e0a3      	b.n	80010e0 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4a58      	ldr	r2, [pc, #352]	; (80010fc <GPIO_PeripheralClockControl+0x1b8>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d106      	bne.n	8000fae <GPIO_PeripheralClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000fa0:	4b53      	ldr	r3, [pc, #332]	; (80010f0 <GPIO_PeripheralClockControl+0x1ac>)
 8000fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa4:	4a52      	ldr	r2, [pc, #328]	; (80010f0 <GPIO_PeripheralClockControl+0x1ac>)
 8000fa6:	f043 0308 	orr.w	r3, r3, #8
 8000faa:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000fac:	e098      	b.n	80010e0 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a53      	ldr	r2, [pc, #332]	; (8001100 <GPIO_PeripheralClockControl+0x1bc>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d106      	bne.n	8000fc4 <GPIO_PeripheralClockControl+0x80>
			GPIOE_PCLK_EN();
 8000fb6:	4b4e      	ldr	r3, [pc, #312]	; (80010f0 <GPIO_PeripheralClockControl+0x1ac>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4a4d      	ldr	r2, [pc, #308]	; (80010f0 <GPIO_PeripheralClockControl+0x1ac>)
 8000fbc:	f043 0310 	orr.w	r3, r3, #16
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000fc2:	e08d      	b.n	80010e0 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4a4f      	ldr	r2, [pc, #316]	; (8001104 <GPIO_PeripheralClockControl+0x1c0>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d106      	bne.n	8000fda <GPIO_PeripheralClockControl+0x96>
			GPIOF_PCLK_EN();
 8000fcc:	4b48      	ldr	r3, [pc, #288]	; (80010f0 <GPIO_PeripheralClockControl+0x1ac>)
 8000fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd0:	4a47      	ldr	r2, [pc, #284]	; (80010f0 <GPIO_PeripheralClockControl+0x1ac>)
 8000fd2:	f043 0320 	orr.w	r3, r3, #32
 8000fd6:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000fd8:	e082      	b.n	80010e0 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a4a      	ldr	r2, [pc, #296]	; (8001108 <GPIO_PeripheralClockControl+0x1c4>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d106      	bne.n	8000ff0 <GPIO_PeripheralClockControl+0xac>
			GPIOG_PCLK_EN();
 8000fe2:	4b43      	ldr	r3, [pc, #268]	; (80010f0 <GPIO_PeripheralClockControl+0x1ac>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	4a42      	ldr	r2, [pc, #264]	; (80010f0 <GPIO_PeripheralClockControl+0x1ac>)
 8000fe8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fec:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000fee:	e077      	b.n	80010e0 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4a46      	ldr	r2, [pc, #280]	; (800110c <GPIO_PeripheralClockControl+0x1c8>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d106      	bne.n	8001006 <GPIO_PeripheralClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000ff8:	4b3d      	ldr	r3, [pc, #244]	; (80010f0 <GPIO_PeripheralClockControl+0x1ac>)
 8000ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffc:	4a3c      	ldr	r2, [pc, #240]	; (80010f0 <GPIO_PeripheralClockControl+0x1ac>)
 8000ffe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001002:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001004:	e06c      	b.n	80010e0 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a41      	ldr	r2, [pc, #260]	; (8001110 <GPIO_PeripheralClockControl+0x1cc>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d168      	bne.n	80010e0 <GPIO_PeripheralClockControl+0x19c>
			GPIOI_PCLK_EN();
 800100e:	4b38      	ldr	r3, [pc, #224]	; (80010f0 <GPIO_PeripheralClockControl+0x1ac>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	4a37      	ldr	r2, [pc, #220]	; (80010f0 <GPIO_PeripheralClockControl+0x1ac>)
 8001014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001018:	6313      	str	r3, [r2, #48]	; 0x30
}
 800101a:	e061      	b.n	80010e0 <GPIO_PeripheralClockControl+0x19c>
		if(pGPIOx == GPIOA)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4a33      	ldr	r2, [pc, #204]	; (80010ec <GPIO_PeripheralClockControl+0x1a8>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d106      	bne.n	8001032 <GPIO_PeripheralClockControl+0xee>
			GPIOA_PCLK_DI();
 8001024:	4b32      	ldr	r3, [pc, #200]	; (80010f0 <GPIO_PeripheralClockControl+0x1ac>)
 8001026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001028:	4a31      	ldr	r2, [pc, #196]	; (80010f0 <GPIO_PeripheralClockControl+0x1ac>)
 800102a:	f023 0301 	bic.w	r3, r3, #1
 800102e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001030:	e056      	b.n	80010e0 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a2f      	ldr	r2, [pc, #188]	; (80010f4 <GPIO_PeripheralClockControl+0x1b0>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d106      	bne.n	8001048 <GPIO_PeripheralClockControl+0x104>
			GPIOB_PCLK_DI();
 800103a:	4b2d      	ldr	r3, [pc, #180]	; (80010f0 <GPIO_PeripheralClockControl+0x1ac>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	4a2c      	ldr	r2, [pc, #176]	; (80010f0 <GPIO_PeripheralClockControl+0x1ac>)
 8001040:	f023 0302 	bic.w	r3, r3, #2
 8001044:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001046:	e04b      	b.n	80010e0 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4a2b      	ldr	r2, [pc, #172]	; (80010f8 <GPIO_PeripheralClockControl+0x1b4>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d106      	bne.n	800105e <GPIO_PeripheralClockControl+0x11a>
			GPIOC_PCLK_DI();
 8001050:	4b27      	ldr	r3, [pc, #156]	; (80010f0 <GPIO_PeripheralClockControl+0x1ac>)
 8001052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001054:	4a26      	ldr	r2, [pc, #152]	; (80010f0 <GPIO_PeripheralClockControl+0x1ac>)
 8001056:	f023 0304 	bic.w	r3, r3, #4
 800105a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800105c:	e040      	b.n	80010e0 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a26      	ldr	r2, [pc, #152]	; (80010fc <GPIO_PeripheralClockControl+0x1b8>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d106      	bne.n	8001074 <GPIO_PeripheralClockControl+0x130>
			GPIOD_PCLK_DI();
 8001066:	4b22      	ldr	r3, [pc, #136]	; (80010f0 <GPIO_PeripheralClockControl+0x1ac>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a21      	ldr	r2, [pc, #132]	; (80010f0 <GPIO_PeripheralClockControl+0x1ac>)
 800106c:	f023 0308 	bic.w	r3, r3, #8
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001072:	e035      	b.n	80010e0 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4a22      	ldr	r2, [pc, #136]	; (8001100 <GPIO_PeripheralClockControl+0x1bc>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d106      	bne.n	800108a <GPIO_PeripheralClockControl+0x146>
			GPIOE_PCLK_DI();
 800107c:	4b1c      	ldr	r3, [pc, #112]	; (80010f0 <GPIO_PeripheralClockControl+0x1ac>)
 800107e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001080:	4a1b      	ldr	r2, [pc, #108]	; (80010f0 <GPIO_PeripheralClockControl+0x1ac>)
 8001082:	f023 0310 	bic.w	r3, r3, #16
 8001086:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001088:	e02a      	b.n	80010e0 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a1d      	ldr	r2, [pc, #116]	; (8001104 <GPIO_PeripheralClockControl+0x1c0>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d106      	bne.n	80010a0 <GPIO_PeripheralClockControl+0x15c>
			GPIOF_PCLK_DI();
 8001092:	4b17      	ldr	r3, [pc, #92]	; (80010f0 <GPIO_PeripheralClockControl+0x1ac>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	4a16      	ldr	r2, [pc, #88]	; (80010f0 <GPIO_PeripheralClockControl+0x1ac>)
 8001098:	f023 0320 	bic.w	r3, r3, #32
 800109c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800109e:	e01f      	b.n	80010e0 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	4a19      	ldr	r2, [pc, #100]	; (8001108 <GPIO_PeripheralClockControl+0x1c4>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d106      	bne.n	80010b6 <GPIO_PeripheralClockControl+0x172>
			GPIOG_PCLK_DI();
 80010a8:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <GPIO_PeripheralClockControl+0x1ac>)
 80010aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ac:	4a10      	ldr	r2, [pc, #64]	; (80010f0 <GPIO_PeripheralClockControl+0x1ac>)
 80010ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80010b2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80010b4:	e014      	b.n	80010e0 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a14      	ldr	r2, [pc, #80]	; (800110c <GPIO_PeripheralClockControl+0x1c8>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d106      	bne.n	80010cc <GPIO_PeripheralClockControl+0x188>
			GPIOH_PCLK_DI();
 80010be:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <GPIO_PeripheralClockControl+0x1ac>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	4a0b      	ldr	r2, [pc, #44]	; (80010f0 <GPIO_PeripheralClockControl+0x1ac>)
 80010c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80010c8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80010ca:	e009      	b.n	80010e0 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4a10      	ldr	r2, [pc, #64]	; (8001110 <GPIO_PeripheralClockControl+0x1cc>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d105      	bne.n	80010e0 <GPIO_PeripheralClockControl+0x19c>
			GPIOI_PCLK_DI();
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <GPIO_PeripheralClockControl+0x1ac>)
 80010d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d8:	4a05      	ldr	r2, [pc, #20]	; (80010f0 <GPIO_PeripheralClockControl+0x1ac>)
 80010da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010de:	6313      	str	r3, [r2, #48]	; 0x30
}
 80010e0:	bf00      	nop
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	40020000 	.word	0x40020000
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40020400 	.word	0x40020400
 80010f8:	40020800 	.word	0x40020800
 80010fc:	40020c00 	.word	0x40020c00
 8001100:	40021000 	.word	0x40021000
 8001104:	40021400 	.word	0x40021400
 8001108:	40021800 	.word	0x40021800
 800110c:	40021c00 	.word	0x40021c00
 8001110:	40022000 	.word	0x40022000

08001114 <GPIO_Init>:

/*
 * Init and De-init
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0; // temp register
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]

	// enable the peripheral clock
	GPIO_PeripheralClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2101      	movs	r1, #1
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff ff0c 	bl	8000f44 <GPIO_PeripheralClockControl>

	// 1. configure the mode of gpio pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	795b      	ldrb	r3, [r3, #5]
 8001130:	2b03      	cmp	r3, #3
 8001132:	d820      	bhi.n	8001176 <GPIO_Init+0x62>
	{
		// the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	795b      	ldrb	r3, [r3, #5]
 8001138:	461a      	mov	r2, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	791b      	ldrb	r3, [r3, #4]
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clear
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	791b      	ldrb	r3, [r3, #4]
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	2103      	movs	r1, #3
 8001154:	fa01 f303 	lsl.w	r3, r1, r3
 8001158:	43db      	mvns	r3, r3
 800115a:	4619      	mov	r1, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	400a      	ands	r2, r1
 8001162:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;	// setting
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	6819      	ldr	r1, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	697a      	ldr	r2, [r7, #20]
 8001170:	430a      	orrs	r2, r1
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	e0c1      	b.n	80012fa <GPIO_Init+0x1e6>

	}
	else
	{
		// this part will code later (interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	795b      	ldrb	r3, [r3, #5]
 800117a:	2b04      	cmp	r3, #4
 800117c:	d117      	bne.n	80011ae <GPIO_Init+0x9a>
		{
			// 1. configure the FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800117e:	4b47      	ldr	r3, [pc, #284]	; (800129c <GPIO_Init+0x188>)
 8001180:	68db      	ldr	r3, [r3, #12]
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	7912      	ldrb	r2, [r2, #4]
 8001186:	4611      	mov	r1, r2
 8001188:	2201      	movs	r2, #1
 800118a:	408a      	lsls	r2, r1
 800118c:	4611      	mov	r1, r2
 800118e:	4a43      	ldr	r2, [pc, #268]	; (800129c <GPIO_Init+0x188>)
 8001190:	430b      	orrs	r3, r1
 8001192:	60d3      	str	r3, [r2, #12]
			// Clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001194:	4b41      	ldr	r3, [pc, #260]	; (800129c <GPIO_Init+0x188>)
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	7912      	ldrb	r2, [r2, #4]
 800119c:	4611      	mov	r1, r2
 800119e:	2201      	movs	r2, #1
 80011a0:	408a      	lsls	r2, r1
 80011a2:	43d2      	mvns	r2, r2
 80011a4:	4611      	mov	r1, r2
 80011a6:	4a3d      	ldr	r2, [pc, #244]	; (800129c <GPIO_Init+0x188>)
 80011a8:	400b      	ands	r3, r1
 80011aa:	6093      	str	r3, [r2, #8]
 80011ac:	e035      	b.n	800121a <GPIO_Init+0x106>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	795b      	ldrb	r3, [r3, #5]
 80011b2:	2b05      	cmp	r3, #5
 80011b4:	d117      	bne.n	80011e6 <GPIO_Init+0xd2>
		{
			// 1. configure the RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80011b6:	4b39      	ldr	r3, [pc, #228]	; (800129c <GPIO_Init+0x188>)
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	7912      	ldrb	r2, [r2, #4]
 80011be:	4611      	mov	r1, r2
 80011c0:	2201      	movs	r2, #1
 80011c2:	408a      	lsls	r2, r1
 80011c4:	4611      	mov	r1, r2
 80011c6:	4a35      	ldr	r2, [pc, #212]	; (800129c <GPIO_Init+0x188>)
 80011c8:	430b      	orrs	r3, r1
 80011ca:	6093      	str	r3, [r2, #8]
			// Clear the corresponding FTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80011cc:	4b33      	ldr	r3, [pc, #204]	; (800129c <GPIO_Init+0x188>)
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	7912      	ldrb	r2, [r2, #4]
 80011d4:	4611      	mov	r1, r2
 80011d6:	2201      	movs	r2, #1
 80011d8:	408a      	lsls	r2, r1
 80011da:	43d2      	mvns	r2, r2
 80011dc:	4611      	mov	r1, r2
 80011de:	4a2f      	ldr	r2, [pc, #188]	; (800129c <GPIO_Init+0x188>)
 80011e0:	400b      	ands	r3, r1
 80011e2:	60d3      	str	r3, [r2, #12]
 80011e4:	e019      	b.n	800121a <GPIO_Init+0x106>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	795b      	ldrb	r3, [r3, #5]
 80011ea:	2b06      	cmp	r3, #6
 80011ec:	d115      	bne.n	800121a <GPIO_Init+0x106>
		{
			// 1. configure both FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80011ee:	4b2b      	ldr	r3, [pc, #172]	; (800129c <GPIO_Init+0x188>)
 80011f0:	68db      	ldr	r3, [r3, #12]
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	7912      	ldrb	r2, [r2, #4]
 80011f6:	4611      	mov	r1, r2
 80011f8:	2201      	movs	r2, #1
 80011fa:	408a      	lsls	r2, r1
 80011fc:	4611      	mov	r1, r2
 80011fe:	4a27      	ldr	r2, [pc, #156]	; (800129c <GPIO_Init+0x188>)
 8001200:	430b      	orrs	r3, r1
 8001202:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001204:	4b25      	ldr	r3, [pc, #148]	; (800129c <GPIO_Init+0x188>)
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	687a      	ldr	r2, [r7, #4]
 800120a:	7912      	ldrb	r2, [r2, #4]
 800120c:	4611      	mov	r1, r2
 800120e:	2201      	movs	r2, #1
 8001210:	408a      	lsls	r2, r1
 8001212:	4611      	mov	r1, r2
 8001214:	4a21      	ldr	r2, [pc, #132]	; (800129c <GPIO_Init+0x188>)
 8001216:	430b      	orrs	r3, r1
 8001218:	6093      	str	r3, [r2, #8]
		}

		// 2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	791b      	ldrb	r3, [r3, #4]
 800121e:	089b      	lsrs	r3, r3, #2
 8001220:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	791b      	ldrb	r3, [r3, #4]
 8001226:	f003 0303 	and.w	r3, r3, #3
 800122a:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a1b      	ldr	r2, [pc, #108]	; (80012a0 <GPIO_Init+0x18c>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d044      	beq.n	80012c0 <GPIO_Init+0x1ac>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a1a      	ldr	r2, [pc, #104]	; (80012a4 <GPIO_Init+0x190>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d02b      	beq.n	8001298 <GPIO_Init+0x184>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a18      	ldr	r2, [pc, #96]	; (80012a8 <GPIO_Init+0x194>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d024      	beq.n	8001294 <GPIO_Init+0x180>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a17      	ldr	r2, [pc, #92]	; (80012ac <GPIO_Init+0x198>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d01d      	beq.n	8001290 <GPIO_Init+0x17c>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a15      	ldr	r2, [pc, #84]	; (80012b0 <GPIO_Init+0x19c>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d016      	beq.n	800128c <GPIO_Init+0x178>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a14      	ldr	r2, [pc, #80]	; (80012b4 <GPIO_Init+0x1a0>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d00f      	beq.n	8001288 <GPIO_Init+0x174>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a12      	ldr	r2, [pc, #72]	; (80012b8 <GPIO_Init+0x1a4>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d008      	beq.n	8001284 <GPIO_Init+0x170>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a11      	ldr	r2, [pc, #68]	; (80012bc <GPIO_Init+0x1a8>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d101      	bne.n	8001280 <GPIO_Init+0x16c>
 800127c:	2307      	movs	r3, #7
 800127e:	e020      	b.n	80012c2 <GPIO_Init+0x1ae>
 8001280:	2308      	movs	r3, #8
 8001282:	e01e      	b.n	80012c2 <GPIO_Init+0x1ae>
 8001284:	2306      	movs	r3, #6
 8001286:	e01c      	b.n	80012c2 <GPIO_Init+0x1ae>
 8001288:	2305      	movs	r3, #5
 800128a:	e01a      	b.n	80012c2 <GPIO_Init+0x1ae>
 800128c:	2304      	movs	r3, #4
 800128e:	e018      	b.n	80012c2 <GPIO_Init+0x1ae>
 8001290:	2303      	movs	r3, #3
 8001292:	e016      	b.n	80012c2 <GPIO_Init+0x1ae>
 8001294:	2302      	movs	r3, #2
 8001296:	e014      	b.n	80012c2 <GPIO_Init+0x1ae>
 8001298:	2301      	movs	r3, #1
 800129a:	e012      	b.n	80012c2 <GPIO_Init+0x1ae>
 800129c:	40013c00 	.word	0x40013c00
 80012a0:	40020000 	.word	0x40020000
 80012a4:	40020400 	.word	0x40020400
 80012a8:	40020800 	.word	0x40020800
 80012ac:	40020c00 	.word	0x40020c00
 80012b0:	40021000 	.word	0x40021000
 80012b4:	40021400 	.word	0x40021400
 80012b8:	40021800 	.word	0x40021800
 80012bc:	40021c00 	.word	0x40021c00
 80012c0:	2300      	movs	r3, #0
 80012c2:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80012c4:	4b5c      	ldr	r3, [pc, #368]	; (8001438 <GPIO_Init+0x324>)
 80012c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c8:	4a5b      	ldr	r2, [pc, #364]	; (8001438 <GPIO_Init+0x324>)
 80012ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ce:	6453      	str	r3, [r2, #68]	; 0x44
		SYS_CFG->EXTICR[temp1] = portcode << (temp2 * 4);
 80012d0:	7c7a      	ldrb	r2, [r7, #17]
 80012d2:	7cbb      	ldrb	r3, [r7, #18]
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	fa02 f103 	lsl.w	r1, r2, r3
 80012da:	4a58      	ldr	r2, [pc, #352]	; (800143c <GPIO_Init+0x328>)
 80012dc:	7cfb      	ldrb	r3, [r7, #19]
 80012de:	3302      	adds	r3, #2
 80012e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]


		// 3. enable the exti interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80012e4:	4b56      	ldr	r3, [pc, #344]	; (8001440 <GPIO_Init+0x32c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	7912      	ldrb	r2, [r2, #4]
 80012ec:	4611      	mov	r1, r2
 80012ee:	2201      	movs	r2, #1
 80012f0:	408a      	lsls	r2, r1
 80012f2:	4611      	mov	r1, r2
 80012f4:	4a52      	ldr	r2, [pc, #328]	; (8001440 <GPIO_Init+0x32c>)
 80012f6:	430b      	orrs	r3, r1
 80012f8:	6013      	str	r3, [r2, #0]
	}

	// 2. configure the speed
	temp = 0;
 80012fa:	2300      	movs	r3, #0
 80012fc:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	799b      	ldrb	r3, [r3, #6]
 8001302:	461a      	mov	r2, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	791b      	ldrb	r3, [r3, #4]
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clear
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	689a      	ldr	r2, [r3, #8]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	791b      	ldrb	r3, [r3, #4]
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	2103      	movs	r1, #3
 800131e:	fa01 f303 	lsl.w	r3, r1, r3
 8001322:	43db      	mvns	r3, r3
 8001324:	4619      	mov	r1, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	400a      	ands	r2, r1
 800132c:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;	// setting
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	6899      	ldr	r1, [r3, #8]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	697a      	ldr	r2, [r7, #20]
 800133a:	430a      	orrs	r2, r1
 800133c:	609a      	str	r2, [r3, #8]

	// 3. configure the pupd settings
	temp = 0;
 800133e:	2300      	movs	r3, #0
 8001340:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	79db      	ldrb	r3, [r3, #7]
 8001346:	461a      	mov	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	791b      	ldrb	r3, [r3, #4]
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clear
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	68da      	ldr	r2, [r3, #12]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	791b      	ldrb	r3, [r3, #4]
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	2103      	movs	r1, #3
 8001362:	fa01 f303 	lsl.w	r3, r1, r3
 8001366:	43db      	mvns	r3, r3
 8001368:	4619      	mov	r1, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	400a      	ands	r2, r1
 8001370:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;	// setting
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	68d9      	ldr	r1, [r3, #12]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	697a      	ldr	r2, [r7, #20]
 800137e:	430a      	orrs	r2, r1
 8001380:	60da      	str	r2, [r3, #12]


	// 4. configure the optype
	temp = 0;
 8001382:	2300      	movs	r3, #0
 8001384:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	7a1b      	ldrb	r3, [r3, #8]
 800138a:	461a      	mov	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	791b      	ldrb	r3, [r3, #4]
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x01 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clear
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	685a      	ldr	r2, [r3, #4]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	791b      	ldrb	r3, [r3, #4]
 80013a0:	4619      	mov	r1, r3
 80013a2:	2301      	movs	r3, #1
 80013a4:	408b      	lsls	r3, r1
 80013a6:	43db      	mvns	r3, r3
 80013a8:	4619      	mov	r1, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	400a      	ands	r2, r1
 80013b0:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;	// setting
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	6859      	ldr	r1, [r3, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	697a      	ldr	r2, [r7, #20]
 80013be:	430a      	orrs	r2, r1
 80013c0:	605a      	str	r2, [r3, #4]

	// 5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	795b      	ldrb	r3, [r3, #5]
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d131      	bne.n	800142e <GPIO_Init+0x31a>
	{
		// configure the alt function register
		uint8_t temp1,temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	791b      	ldrb	r3, [r3, #4]
 80013ce:	08db      	lsrs	r3, r3, #3
 80013d0:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	791b      	ldrb	r3, [r3, #4]
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2)); // clearing
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	7c3a      	ldrb	r2, [r7, #16]
 80013e2:	3208      	adds	r2, #8
 80013e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80013e8:	7bfb      	ldrb	r3, [r7, #15]
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	220f      	movs	r2, #15
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	43db      	mvns	r3, r3
 80013f4:	4618      	mov	r0, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	7c3a      	ldrb	r2, [r7, #16]
 80013fc:	4001      	ands	r1, r0
 80013fe:	3208      	adds	r2, #8
 8001400:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2); // setting
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	7c3a      	ldrb	r2, [r7, #16]
 800140a:	3208      	adds	r2, #8
 800140c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	7a5b      	ldrb	r3, [r3, #9]
 8001414:	461a      	mov	r2, r3
 8001416:	7bfb      	ldrb	r3, [r7, #15]
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	4618      	mov	r0, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	7c3a      	ldrb	r2, [r7, #16]
 8001426:	4301      	orrs	r1, r0
 8001428:	3208      	adds	r2, #8
 800142a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 800142e:	bf00      	nop
 8001430:	3718      	adds	r7, #24
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40023800 	.word	0x40023800
 800143c:	40013800 	.word	0x40013800
 8001440:	40013c00 	.word	0x40013c00

08001444 <GPIO_ReadFromInputPin>:

/*
 * Data read and write
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	460b      	mov	r3, r1
 800144e:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	691a      	ldr	r2, [r3, #16]
 8001454:	78fb      	ldrb	r3, [r7, #3]
 8001456:	fa22 f303 	lsr.w	r3, r2, r3
 800145a:	b2db      	uxtb	r3, r3
 800145c:	f003 0301 	and.w	r3, r3, #1
 8001460:	73fb      	strb	r3, [r7, #15]
	return value;
 8001462:	7bfb      	ldrb	r3, [r7, #15]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3714      	adds	r7, #20
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <RCC_GETPLLOutputClock>:

uint16_t AHB_PreScalar[8] = {2, 4, 8, 16, 64, 128, 256, 512};
uint16_t APB1_PreScalar[4] = {2, 4, 8, 16};

uint32_t RCC_GETPLLOutputClock(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
	return 160000000; // dummy value to be implemented
 8001474:	4b02      	ldr	r3, [pc, #8]	; (8001480 <RCC_GETPLLOutputClock+0x10>)
}
 8001476:	4618      	mov	r0, r3
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	09896800 	.word	0x09896800

08001484 <RCC_GetPCLK1Value>:


uint32_t RCC_GetPCLK1Value(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
	uint32_t pclk1, SystemClk;

	uint8_t clkSrc, temp, ahbp, apb1;
	clkSrc = ((RCC->CFGR >> 2) & 0x03);
 800148a:	4b26      	ldr	r3, [pc, #152]	; (8001524 <RCC_GetPCLK1Value+0xa0>)
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	089b      	lsrs	r3, r3, #2
 8001490:	b2db      	uxtb	r3, r3
 8001492:	f003 0303 	and.w	r3, r3, #3
 8001496:	727b      	strb	r3, [r7, #9]

	if(clkSrc == 0)
 8001498:	7a7b      	ldrb	r3, [r7, #9]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d102      	bne.n	80014a4 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 800149e:	4b22      	ldr	r3, [pc, #136]	; (8001528 <RCC_GetPCLK1Value+0xa4>)
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	e00b      	b.n	80014bc <RCC_GetPCLK1Value+0x38>
	}
	else if(clkSrc == 1)
 80014a4:	7a7b      	ldrb	r3, [r7, #9]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d102      	bne.n	80014b0 <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 80014aa:	4b20      	ldr	r3, [pc, #128]	; (800152c <RCC_GetPCLK1Value+0xa8>)
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	e005      	b.n	80014bc <RCC_GetPCLK1Value+0x38>
	}
	else if(clkSrc == 2)
 80014b0:	7a7b      	ldrb	r3, [r7, #9]
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d102      	bne.n	80014bc <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GETPLLOutputClock();
 80014b6:	f7ff ffdb 	bl	8001470 <RCC_GETPLLOutputClock>
 80014ba:	60f8      	str	r0, [r7, #12]
	}

	// ahbp
	temp = ((RCC->CFGR >> 4) & 0xF);
 80014bc:	4b19      	ldr	r3, [pc, #100]	; (8001524 <RCC_GetPCLK1Value+0xa0>)
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	091b      	lsrs	r3, r3, #4
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	f003 030f 	and.w	r3, r3, #15
 80014c8:	723b      	strb	r3, [r7, #8]
	if(temp < 8)
 80014ca:	7a3b      	ldrb	r3, [r7, #8]
 80014cc:	2b07      	cmp	r3, #7
 80014ce:	d802      	bhi.n	80014d6 <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 80014d0:	2301      	movs	r3, #1
 80014d2:	72fb      	strb	r3, [r7, #11]
 80014d4:	e005      	b.n	80014e2 <RCC_GetPCLK1Value+0x5e>
	}
	else
	{
		ahbp = AHB_PreScalar[temp - 8];
 80014d6:	7a3b      	ldrb	r3, [r7, #8]
 80014d8:	3b08      	subs	r3, #8
 80014da:	4a15      	ldr	r2, [pc, #84]	; (8001530 <RCC_GetPCLK1Value+0xac>)
 80014dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014e0:	72fb      	strb	r3, [r7, #11]
	}

	// apb1
	temp = ((RCC->CFGR >> 10) & 0x7);
 80014e2:	4b10      	ldr	r3, [pc, #64]	; (8001524 <RCC_GetPCLK1Value+0xa0>)
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	0a9b      	lsrs	r3, r3, #10
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	f003 0307 	and.w	r3, r3, #7
 80014ee:	723b      	strb	r3, [r7, #8]
	if(temp < 4)
 80014f0:	7a3b      	ldrb	r3, [r7, #8]
 80014f2:	2b03      	cmp	r3, #3
 80014f4:	d802      	bhi.n	80014fc <RCC_GetPCLK1Value+0x78>
	{
		apb1 = 1;
 80014f6:	2301      	movs	r3, #1
 80014f8:	72bb      	strb	r3, [r7, #10]
 80014fa:	e005      	b.n	8001508 <RCC_GetPCLK1Value+0x84>
	}
	else
	{
		apb1 = APB1_PreScalar[temp - 4];
 80014fc:	7a3b      	ldrb	r3, [r7, #8]
 80014fe:	3b04      	subs	r3, #4
 8001500:	4a0c      	ldr	r2, [pc, #48]	; (8001534 <RCC_GetPCLK1Value+0xb0>)
 8001502:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001506:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = (SystemClk / ahbp) / apb1;
 8001508:	7afb      	ldrb	r3, [r7, #11]
 800150a:	68fa      	ldr	r2, [r7, #12]
 800150c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001510:	7abb      	ldrb	r3, [r7, #10]
 8001512:	fbb2 f3f3 	udiv	r3, r2, r3
 8001516:	607b      	str	r3, [r7, #4]

	return pclk1;
 8001518:	687b      	ldr	r3, [r7, #4]
}
 800151a:	4618      	mov	r0, r3
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40023800 	.word	0x40023800
 8001528:	00f42400 	.word	0x00f42400
 800152c:	007a1200 	.word	0x007a1200
 8001530:	2000000c 	.word	0x2000000c
 8001534:	2000001c 	.word	0x2000001c

08001538 <RCC_GetPCLK2Value>:

uint32_t RCC_GetPCLK2Value(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
	uint32_t pclk2, SystemClk;

	uint8_t clkSrc, temp, ahbp, apb2;
	clkSrc = ((RCC->CFGR >> 2) & 0x03);
 800153e:	4b26      	ldr	r3, [pc, #152]	; (80015d8 <RCC_GetPCLK2Value+0xa0>)
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	089b      	lsrs	r3, r3, #2
 8001544:	b2db      	uxtb	r3, r3
 8001546:	f003 0303 	and.w	r3, r3, #3
 800154a:	727b      	strb	r3, [r7, #9]

	if(clkSrc == 0)
 800154c:	7a7b      	ldrb	r3, [r7, #9]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d102      	bne.n	8001558 <RCC_GetPCLK2Value+0x20>
	{
		SystemClk = 16000000;
 8001552:	4b22      	ldr	r3, [pc, #136]	; (80015dc <RCC_GetPCLK2Value+0xa4>)
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	e00b      	b.n	8001570 <RCC_GetPCLK2Value+0x38>
	}
	else if(clkSrc == 1)
 8001558:	7a7b      	ldrb	r3, [r7, #9]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d102      	bne.n	8001564 <RCC_GetPCLK2Value+0x2c>
	{
		SystemClk = 8000000;
 800155e:	4b20      	ldr	r3, [pc, #128]	; (80015e0 <RCC_GetPCLK2Value+0xa8>)
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	e005      	b.n	8001570 <RCC_GetPCLK2Value+0x38>
	}
	else if(clkSrc == 2)
 8001564:	7a7b      	ldrb	r3, [r7, #9]
 8001566:	2b02      	cmp	r3, #2
 8001568:	d102      	bne.n	8001570 <RCC_GetPCLK2Value+0x38>
	{
		SystemClk = RCC_GETPLLOutputClock();
 800156a:	f7ff ff81 	bl	8001470 <RCC_GETPLLOutputClock>
 800156e:	60f8      	str	r0, [r7, #12]
	}

	// ahbp
	temp = ((RCC->CFGR >> 4) & 0xF);
 8001570:	4b19      	ldr	r3, [pc, #100]	; (80015d8 <RCC_GetPCLK2Value+0xa0>)
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	091b      	lsrs	r3, r3, #4
 8001576:	b2db      	uxtb	r3, r3
 8001578:	f003 030f 	and.w	r3, r3, #15
 800157c:	723b      	strb	r3, [r7, #8]
	if(temp < 8)
 800157e:	7a3b      	ldrb	r3, [r7, #8]
 8001580:	2b07      	cmp	r3, #7
 8001582:	d802      	bhi.n	800158a <RCC_GetPCLK2Value+0x52>
	{
		ahbp = 1;
 8001584:	2301      	movs	r3, #1
 8001586:	72fb      	strb	r3, [r7, #11]
 8001588:	e005      	b.n	8001596 <RCC_GetPCLK2Value+0x5e>
	}
	else
	{
		ahbp = AHB_PreScalar[temp - 8];
 800158a:	7a3b      	ldrb	r3, [r7, #8]
 800158c:	3b08      	subs	r3, #8
 800158e:	4a15      	ldr	r2, [pc, #84]	; (80015e4 <RCC_GetPCLK2Value+0xac>)
 8001590:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001594:	72fb      	strb	r3, [r7, #11]
	}

	// apb2
	temp = ((RCC->CFGR >> 13) & 0x7);
 8001596:	4b10      	ldr	r3, [pc, #64]	; (80015d8 <RCC_GetPCLK2Value+0xa0>)
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	0b5b      	lsrs	r3, r3, #13
 800159c:	b2db      	uxtb	r3, r3
 800159e:	f003 0307 	and.w	r3, r3, #7
 80015a2:	723b      	strb	r3, [r7, #8]
	if(temp < 4)
 80015a4:	7a3b      	ldrb	r3, [r7, #8]
 80015a6:	2b03      	cmp	r3, #3
 80015a8:	d802      	bhi.n	80015b0 <RCC_GetPCLK2Value+0x78>
	{
		apb2 = 1;
 80015aa:	2301      	movs	r3, #1
 80015ac:	72bb      	strb	r3, [r7, #10]
 80015ae:	e005      	b.n	80015bc <RCC_GetPCLK2Value+0x84>
	}
	else
	{
		apb2 = APB1_PreScalar[temp - 4];
 80015b0:	7a3b      	ldrb	r3, [r7, #8]
 80015b2:	3b04      	subs	r3, #4
 80015b4:	4a0c      	ldr	r2, [pc, #48]	; (80015e8 <RCC_GetPCLK2Value+0xb0>)
 80015b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015ba:	72bb      	strb	r3, [r7, #10]
	}

	pclk2 = (SystemClk / ahbp) / apb2;
 80015bc:	7afb      	ldrb	r3, [r7, #11]
 80015be:	68fa      	ldr	r2, [r7, #12]
 80015c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80015c4:	7abb      	ldrb	r3, [r7, #10]
 80015c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ca:	607b      	str	r3, [r7, #4]

	return pclk2;
 80015cc:	687b      	ldr	r3, [r7, #4]
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40023800 	.word	0x40023800
 80015dc:	00f42400 	.word	0x00f42400
 80015e0:	007a1200 	.word	0x007a1200
 80015e4:	2000000c 	.word	0x2000000c
 80015e8:	2000001c 	.word	0x2000001c

080015ec <__errno>:
 80015ec:	4b01      	ldr	r3, [pc, #4]	; (80015f4 <__errno+0x8>)
 80015ee:	6818      	ldr	r0, [r3, #0]
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	20000024 	.word	0x20000024

080015f8 <__libc_init_array>:
 80015f8:	b570      	push	{r4, r5, r6, lr}
 80015fa:	4d0d      	ldr	r5, [pc, #52]	; (8001630 <__libc_init_array+0x38>)
 80015fc:	4c0d      	ldr	r4, [pc, #52]	; (8001634 <__libc_init_array+0x3c>)
 80015fe:	1b64      	subs	r4, r4, r5
 8001600:	10a4      	asrs	r4, r4, #2
 8001602:	2600      	movs	r6, #0
 8001604:	42a6      	cmp	r6, r4
 8001606:	d109      	bne.n	800161c <__libc_init_array+0x24>
 8001608:	4d0b      	ldr	r5, [pc, #44]	; (8001638 <__libc_init_array+0x40>)
 800160a:	4c0c      	ldr	r4, [pc, #48]	; (800163c <__libc_init_array+0x44>)
 800160c:	f000 ffec 	bl	80025e8 <_init>
 8001610:	1b64      	subs	r4, r4, r5
 8001612:	10a4      	asrs	r4, r4, #2
 8001614:	2600      	movs	r6, #0
 8001616:	42a6      	cmp	r6, r4
 8001618:	d105      	bne.n	8001626 <__libc_init_array+0x2e>
 800161a:	bd70      	pop	{r4, r5, r6, pc}
 800161c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001620:	4798      	blx	r3
 8001622:	3601      	adds	r6, #1
 8001624:	e7ee      	b.n	8001604 <__libc_init_array+0xc>
 8001626:	f855 3b04 	ldr.w	r3, [r5], #4
 800162a:	4798      	blx	r3
 800162c:	3601      	adds	r6, #1
 800162e:	e7f2      	b.n	8001616 <__libc_init_array+0x1e>
 8001630:	08002710 	.word	0x08002710
 8001634:	08002710 	.word	0x08002710
 8001638:	08002710 	.word	0x08002710
 800163c:	08002714 	.word	0x08002714

08001640 <memset>:
 8001640:	4402      	add	r2, r0
 8001642:	4603      	mov	r3, r0
 8001644:	4293      	cmp	r3, r2
 8001646:	d100      	bne.n	800164a <memset+0xa>
 8001648:	4770      	bx	lr
 800164a:	f803 1b01 	strb.w	r1, [r3], #1
 800164e:	e7f9      	b.n	8001644 <memset+0x4>

08001650 <iprintf>:
 8001650:	b40f      	push	{r0, r1, r2, r3}
 8001652:	4b0a      	ldr	r3, [pc, #40]	; (800167c <iprintf+0x2c>)
 8001654:	b513      	push	{r0, r1, r4, lr}
 8001656:	681c      	ldr	r4, [r3, #0]
 8001658:	b124      	cbz	r4, 8001664 <iprintf+0x14>
 800165a:	69a3      	ldr	r3, [r4, #24]
 800165c:	b913      	cbnz	r3, 8001664 <iprintf+0x14>
 800165e:	4620      	mov	r0, r4
 8001660:	f000 fa5e 	bl	8001b20 <__sinit>
 8001664:	ab05      	add	r3, sp, #20
 8001666:	9a04      	ldr	r2, [sp, #16]
 8001668:	68a1      	ldr	r1, [r4, #8]
 800166a:	9301      	str	r3, [sp, #4]
 800166c:	4620      	mov	r0, r4
 800166e:	f000 fc2f 	bl	8001ed0 <_vfiprintf_r>
 8001672:	b002      	add	sp, #8
 8001674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001678:	b004      	add	sp, #16
 800167a:	4770      	bx	lr
 800167c:	20000024 	.word	0x20000024

08001680 <_puts_r>:
 8001680:	b570      	push	{r4, r5, r6, lr}
 8001682:	460e      	mov	r6, r1
 8001684:	4605      	mov	r5, r0
 8001686:	b118      	cbz	r0, 8001690 <_puts_r+0x10>
 8001688:	6983      	ldr	r3, [r0, #24]
 800168a:	b90b      	cbnz	r3, 8001690 <_puts_r+0x10>
 800168c:	f000 fa48 	bl	8001b20 <__sinit>
 8001690:	69ab      	ldr	r3, [r5, #24]
 8001692:	68ac      	ldr	r4, [r5, #8]
 8001694:	b913      	cbnz	r3, 800169c <_puts_r+0x1c>
 8001696:	4628      	mov	r0, r5
 8001698:	f000 fa42 	bl	8001b20 <__sinit>
 800169c:	4b2c      	ldr	r3, [pc, #176]	; (8001750 <_puts_r+0xd0>)
 800169e:	429c      	cmp	r4, r3
 80016a0:	d120      	bne.n	80016e4 <_puts_r+0x64>
 80016a2:	686c      	ldr	r4, [r5, #4]
 80016a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80016a6:	07db      	lsls	r3, r3, #31
 80016a8:	d405      	bmi.n	80016b6 <_puts_r+0x36>
 80016aa:	89a3      	ldrh	r3, [r4, #12]
 80016ac:	0598      	lsls	r0, r3, #22
 80016ae:	d402      	bmi.n	80016b6 <_puts_r+0x36>
 80016b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80016b2:	f000 fad3 	bl	8001c5c <__retarget_lock_acquire_recursive>
 80016b6:	89a3      	ldrh	r3, [r4, #12]
 80016b8:	0719      	lsls	r1, r3, #28
 80016ba:	d51d      	bpl.n	80016f8 <_puts_r+0x78>
 80016bc:	6923      	ldr	r3, [r4, #16]
 80016be:	b1db      	cbz	r3, 80016f8 <_puts_r+0x78>
 80016c0:	3e01      	subs	r6, #1
 80016c2:	68a3      	ldr	r3, [r4, #8]
 80016c4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80016c8:	3b01      	subs	r3, #1
 80016ca:	60a3      	str	r3, [r4, #8]
 80016cc:	bb39      	cbnz	r1, 800171e <_puts_r+0x9e>
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	da38      	bge.n	8001744 <_puts_r+0xc4>
 80016d2:	4622      	mov	r2, r4
 80016d4:	210a      	movs	r1, #10
 80016d6:	4628      	mov	r0, r5
 80016d8:	f000 f848 	bl	800176c <__swbuf_r>
 80016dc:	3001      	adds	r0, #1
 80016de:	d011      	beq.n	8001704 <_puts_r+0x84>
 80016e0:	250a      	movs	r5, #10
 80016e2:	e011      	b.n	8001708 <_puts_r+0x88>
 80016e4:	4b1b      	ldr	r3, [pc, #108]	; (8001754 <_puts_r+0xd4>)
 80016e6:	429c      	cmp	r4, r3
 80016e8:	d101      	bne.n	80016ee <_puts_r+0x6e>
 80016ea:	68ac      	ldr	r4, [r5, #8]
 80016ec:	e7da      	b.n	80016a4 <_puts_r+0x24>
 80016ee:	4b1a      	ldr	r3, [pc, #104]	; (8001758 <_puts_r+0xd8>)
 80016f0:	429c      	cmp	r4, r3
 80016f2:	bf08      	it	eq
 80016f4:	68ec      	ldreq	r4, [r5, #12]
 80016f6:	e7d5      	b.n	80016a4 <_puts_r+0x24>
 80016f8:	4621      	mov	r1, r4
 80016fa:	4628      	mov	r0, r5
 80016fc:	f000 f888 	bl	8001810 <__swsetup_r>
 8001700:	2800      	cmp	r0, #0
 8001702:	d0dd      	beq.n	80016c0 <_puts_r+0x40>
 8001704:	f04f 35ff 	mov.w	r5, #4294967295
 8001708:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800170a:	07da      	lsls	r2, r3, #31
 800170c:	d405      	bmi.n	800171a <_puts_r+0x9a>
 800170e:	89a3      	ldrh	r3, [r4, #12]
 8001710:	059b      	lsls	r3, r3, #22
 8001712:	d402      	bmi.n	800171a <_puts_r+0x9a>
 8001714:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001716:	f000 faa2 	bl	8001c5e <__retarget_lock_release_recursive>
 800171a:	4628      	mov	r0, r5
 800171c:	bd70      	pop	{r4, r5, r6, pc}
 800171e:	2b00      	cmp	r3, #0
 8001720:	da04      	bge.n	800172c <_puts_r+0xac>
 8001722:	69a2      	ldr	r2, [r4, #24]
 8001724:	429a      	cmp	r2, r3
 8001726:	dc06      	bgt.n	8001736 <_puts_r+0xb6>
 8001728:	290a      	cmp	r1, #10
 800172a:	d004      	beq.n	8001736 <_puts_r+0xb6>
 800172c:	6823      	ldr	r3, [r4, #0]
 800172e:	1c5a      	adds	r2, r3, #1
 8001730:	6022      	str	r2, [r4, #0]
 8001732:	7019      	strb	r1, [r3, #0]
 8001734:	e7c5      	b.n	80016c2 <_puts_r+0x42>
 8001736:	4622      	mov	r2, r4
 8001738:	4628      	mov	r0, r5
 800173a:	f000 f817 	bl	800176c <__swbuf_r>
 800173e:	3001      	adds	r0, #1
 8001740:	d1bf      	bne.n	80016c2 <_puts_r+0x42>
 8001742:	e7df      	b.n	8001704 <_puts_r+0x84>
 8001744:	6823      	ldr	r3, [r4, #0]
 8001746:	250a      	movs	r5, #10
 8001748:	1c5a      	adds	r2, r3, #1
 800174a:	6022      	str	r2, [r4, #0]
 800174c:	701d      	strb	r5, [r3, #0]
 800174e:	e7db      	b.n	8001708 <_puts_r+0x88>
 8001750:	0800269c 	.word	0x0800269c
 8001754:	080026bc 	.word	0x080026bc
 8001758:	0800267c 	.word	0x0800267c

0800175c <puts>:
 800175c:	4b02      	ldr	r3, [pc, #8]	; (8001768 <puts+0xc>)
 800175e:	4601      	mov	r1, r0
 8001760:	6818      	ldr	r0, [r3, #0]
 8001762:	f7ff bf8d 	b.w	8001680 <_puts_r>
 8001766:	bf00      	nop
 8001768:	20000024 	.word	0x20000024

0800176c <__swbuf_r>:
 800176c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800176e:	460e      	mov	r6, r1
 8001770:	4614      	mov	r4, r2
 8001772:	4605      	mov	r5, r0
 8001774:	b118      	cbz	r0, 800177e <__swbuf_r+0x12>
 8001776:	6983      	ldr	r3, [r0, #24]
 8001778:	b90b      	cbnz	r3, 800177e <__swbuf_r+0x12>
 800177a:	f000 f9d1 	bl	8001b20 <__sinit>
 800177e:	4b21      	ldr	r3, [pc, #132]	; (8001804 <__swbuf_r+0x98>)
 8001780:	429c      	cmp	r4, r3
 8001782:	d12b      	bne.n	80017dc <__swbuf_r+0x70>
 8001784:	686c      	ldr	r4, [r5, #4]
 8001786:	69a3      	ldr	r3, [r4, #24]
 8001788:	60a3      	str	r3, [r4, #8]
 800178a:	89a3      	ldrh	r3, [r4, #12]
 800178c:	071a      	lsls	r2, r3, #28
 800178e:	d52f      	bpl.n	80017f0 <__swbuf_r+0x84>
 8001790:	6923      	ldr	r3, [r4, #16]
 8001792:	b36b      	cbz	r3, 80017f0 <__swbuf_r+0x84>
 8001794:	6923      	ldr	r3, [r4, #16]
 8001796:	6820      	ldr	r0, [r4, #0]
 8001798:	1ac0      	subs	r0, r0, r3
 800179a:	6963      	ldr	r3, [r4, #20]
 800179c:	b2f6      	uxtb	r6, r6
 800179e:	4283      	cmp	r3, r0
 80017a0:	4637      	mov	r7, r6
 80017a2:	dc04      	bgt.n	80017ae <__swbuf_r+0x42>
 80017a4:	4621      	mov	r1, r4
 80017a6:	4628      	mov	r0, r5
 80017a8:	f000 f926 	bl	80019f8 <_fflush_r>
 80017ac:	bb30      	cbnz	r0, 80017fc <__swbuf_r+0x90>
 80017ae:	68a3      	ldr	r3, [r4, #8]
 80017b0:	3b01      	subs	r3, #1
 80017b2:	60a3      	str	r3, [r4, #8]
 80017b4:	6823      	ldr	r3, [r4, #0]
 80017b6:	1c5a      	adds	r2, r3, #1
 80017b8:	6022      	str	r2, [r4, #0]
 80017ba:	701e      	strb	r6, [r3, #0]
 80017bc:	6963      	ldr	r3, [r4, #20]
 80017be:	3001      	adds	r0, #1
 80017c0:	4283      	cmp	r3, r0
 80017c2:	d004      	beq.n	80017ce <__swbuf_r+0x62>
 80017c4:	89a3      	ldrh	r3, [r4, #12]
 80017c6:	07db      	lsls	r3, r3, #31
 80017c8:	d506      	bpl.n	80017d8 <__swbuf_r+0x6c>
 80017ca:	2e0a      	cmp	r6, #10
 80017cc:	d104      	bne.n	80017d8 <__swbuf_r+0x6c>
 80017ce:	4621      	mov	r1, r4
 80017d0:	4628      	mov	r0, r5
 80017d2:	f000 f911 	bl	80019f8 <_fflush_r>
 80017d6:	b988      	cbnz	r0, 80017fc <__swbuf_r+0x90>
 80017d8:	4638      	mov	r0, r7
 80017da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80017dc:	4b0a      	ldr	r3, [pc, #40]	; (8001808 <__swbuf_r+0x9c>)
 80017de:	429c      	cmp	r4, r3
 80017e0:	d101      	bne.n	80017e6 <__swbuf_r+0x7a>
 80017e2:	68ac      	ldr	r4, [r5, #8]
 80017e4:	e7cf      	b.n	8001786 <__swbuf_r+0x1a>
 80017e6:	4b09      	ldr	r3, [pc, #36]	; (800180c <__swbuf_r+0xa0>)
 80017e8:	429c      	cmp	r4, r3
 80017ea:	bf08      	it	eq
 80017ec:	68ec      	ldreq	r4, [r5, #12]
 80017ee:	e7ca      	b.n	8001786 <__swbuf_r+0x1a>
 80017f0:	4621      	mov	r1, r4
 80017f2:	4628      	mov	r0, r5
 80017f4:	f000 f80c 	bl	8001810 <__swsetup_r>
 80017f8:	2800      	cmp	r0, #0
 80017fa:	d0cb      	beq.n	8001794 <__swbuf_r+0x28>
 80017fc:	f04f 37ff 	mov.w	r7, #4294967295
 8001800:	e7ea      	b.n	80017d8 <__swbuf_r+0x6c>
 8001802:	bf00      	nop
 8001804:	0800269c 	.word	0x0800269c
 8001808:	080026bc 	.word	0x080026bc
 800180c:	0800267c 	.word	0x0800267c

08001810 <__swsetup_r>:
 8001810:	4b32      	ldr	r3, [pc, #200]	; (80018dc <__swsetup_r+0xcc>)
 8001812:	b570      	push	{r4, r5, r6, lr}
 8001814:	681d      	ldr	r5, [r3, #0]
 8001816:	4606      	mov	r6, r0
 8001818:	460c      	mov	r4, r1
 800181a:	b125      	cbz	r5, 8001826 <__swsetup_r+0x16>
 800181c:	69ab      	ldr	r3, [r5, #24]
 800181e:	b913      	cbnz	r3, 8001826 <__swsetup_r+0x16>
 8001820:	4628      	mov	r0, r5
 8001822:	f000 f97d 	bl	8001b20 <__sinit>
 8001826:	4b2e      	ldr	r3, [pc, #184]	; (80018e0 <__swsetup_r+0xd0>)
 8001828:	429c      	cmp	r4, r3
 800182a:	d10f      	bne.n	800184c <__swsetup_r+0x3c>
 800182c:	686c      	ldr	r4, [r5, #4]
 800182e:	89a3      	ldrh	r3, [r4, #12]
 8001830:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001834:	0719      	lsls	r1, r3, #28
 8001836:	d42c      	bmi.n	8001892 <__swsetup_r+0x82>
 8001838:	06dd      	lsls	r5, r3, #27
 800183a:	d411      	bmi.n	8001860 <__swsetup_r+0x50>
 800183c:	2309      	movs	r3, #9
 800183e:	6033      	str	r3, [r6, #0]
 8001840:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001844:	81a3      	strh	r3, [r4, #12]
 8001846:	f04f 30ff 	mov.w	r0, #4294967295
 800184a:	e03e      	b.n	80018ca <__swsetup_r+0xba>
 800184c:	4b25      	ldr	r3, [pc, #148]	; (80018e4 <__swsetup_r+0xd4>)
 800184e:	429c      	cmp	r4, r3
 8001850:	d101      	bne.n	8001856 <__swsetup_r+0x46>
 8001852:	68ac      	ldr	r4, [r5, #8]
 8001854:	e7eb      	b.n	800182e <__swsetup_r+0x1e>
 8001856:	4b24      	ldr	r3, [pc, #144]	; (80018e8 <__swsetup_r+0xd8>)
 8001858:	429c      	cmp	r4, r3
 800185a:	bf08      	it	eq
 800185c:	68ec      	ldreq	r4, [r5, #12]
 800185e:	e7e6      	b.n	800182e <__swsetup_r+0x1e>
 8001860:	0758      	lsls	r0, r3, #29
 8001862:	d512      	bpl.n	800188a <__swsetup_r+0x7a>
 8001864:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001866:	b141      	cbz	r1, 800187a <__swsetup_r+0x6a>
 8001868:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800186c:	4299      	cmp	r1, r3
 800186e:	d002      	beq.n	8001876 <__swsetup_r+0x66>
 8001870:	4630      	mov	r0, r6
 8001872:	f000 fa59 	bl	8001d28 <_free_r>
 8001876:	2300      	movs	r3, #0
 8001878:	6363      	str	r3, [r4, #52]	; 0x34
 800187a:	89a3      	ldrh	r3, [r4, #12]
 800187c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001880:	81a3      	strh	r3, [r4, #12]
 8001882:	2300      	movs	r3, #0
 8001884:	6063      	str	r3, [r4, #4]
 8001886:	6923      	ldr	r3, [r4, #16]
 8001888:	6023      	str	r3, [r4, #0]
 800188a:	89a3      	ldrh	r3, [r4, #12]
 800188c:	f043 0308 	orr.w	r3, r3, #8
 8001890:	81a3      	strh	r3, [r4, #12]
 8001892:	6923      	ldr	r3, [r4, #16]
 8001894:	b94b      	cbnz	r3, 80018aa <__swsetup_r+0x9a>
 8001896:	89a3      	ldrh	r3, [r4, #12]
 8001898:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800189c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018a0:	d003      	beq.n	80018aa <__swsetup_r+0x9a>
 80018a2:	4621      	mov	r1, r4
 80018a4:	4630      	mov	r0, r6
 80018a6:	f000 f9ff 	bl	8001ca8 <__smakebuf_r>
 80018aa:	89a0      	ldrh	r0, [r4, #12]
 80018ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80018b0:	f010 0301 	ands.w	r3, r0, #1
 80018b4:	d00a      	beq.n	80018cc <__swsetup_r+0xbc>
 80018b6:	2300      	movs	r3, #0
 80018b8:	60a3      	str	r3, [r4, #8]
 80018ba:	6963      	ldr	r3, [r4, #20]
 80018bc:	425b      	negs	r3, r3
 80018be:	61a3      	str	r3, [r4, #24]
 80018c0:	6923      	ldr	r3, [r4, #16]
 80018c2:	b943      	cbnz	r3, 80018d6 <__swsetup_r+0xc6>
 80018c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80018c8:	d1ba      	bne.n	8001840 <__swsetup_r+0x30>
 80018ca:	bd70      	pop	{r4, r5, r6, pc}
 80018cc:	0781      	lsls	r1, r0, #30
 80018ce:	bf58      	it	pl
 80018d0:	6963      	ldrpl	r3, [r4, #20]
 80018d2:	60a3      	str	r3, [r4, #8]
 80018d4:	e7f4      	b.n	80018c0 <__swsetup_r+0xb0>
 80018d6:	2000      	movs	r0, #0
 80018d8:	e7f7      	b.n	80018ca <__swsetup_r+0xba>
 80018da:	bf00      	nop
 80018dc:	20000024 	.word	0x20000024
 80018e0:	0800269c 	.word	0x0800269c
 80018e4:	080026bc 	.word	0x080026bc
 80018e8:	0800267c 	.word	0x0800267c

080018ec <__sflush_r>:
 80018ec:	898a      	ldrh	r2, [r1, #12]
 80018ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018f2:	4605      	mov	r5, r0
 80018f4:	0710      	lsls	r0, r2, #28
 80018f6:	460c      	mov	r4, r1
 80018f8:	d458      	bmi.n	80019ac <__sflush_r+0xc0>
 80018fa:	684b      	ldr	r3, [r1, #4]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	dc05      	bgt.n	800190c <__sflush_r+0x20>
 8001900:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001902:	2b00      	cmp	r3, #0
 8001904:	dc02      	bgt.n	800190c <__sflush_r+0x20>
 8001906:	2000      	movs	r0, #0
 8001908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800190c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800190e:	2e00      	cmp	r6, #0
 8001910:	d0f9      	beq.n	8001906 <__sflush_r+0x1a>
 8001912:	2300      	movs	r3, #0
 8001914:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001918:	682f      	ldr	r7, [r5, #0]
 800191a:	602b      	str	r3, [r5, #0]
 800191c:	d032      	beq.n	8001984 <__sflush_r+0x98>
 800191e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001920:	89a3      	ldrh	r3, [r4, #12]
 8001922:	075a      	lsls	r2, r3, #29
 8001924:	d505      	bpl.n	8001932 <__sflush_r+0x46>
 8001926:	6863      	ldr	r3, [r4, #4]
 8001928:	1ac0      	subs	r0, r0, r3
 800192a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800192c:	b10b      	cbz	r3, 8001932 <__sflush_r+0x46>
 800192e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001930:	1ac0      	subs	r0, r0, r3
 8001932:	2300      	movs	r3, #0
 8001934:	4602      	mov	r2, r0
 8001936:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001938:	6a21      	ldr	r1, [r4, #32]
 800193a:	4628      	mov	r0, r5
 800193c:	47b0      	blx	r6
 800193e:	1c43      	adds	r3, r0, #1
 8001940:	89a3      	ldrh	r3, [r4, #12]
 8001942:	d106      	bne.n	8001952 <__sflush_r+0x66>
 8001944:	6829      	ldr	r1, [r5, #0]
 8001946:	291d      	cmp	r1, #29
 8001948:	d82c      	bhi.n	80019a4 <__sflush_r+0xb8>
 800194a:	4a2a      	ldr	r2, [pc, #168]	; (80019f4 <__sflush_r+0x108>)
 800194c:	40ca      	lsrs	r2, r1
 800194e:	07d6      	lsls	r6, r2, #31
 8001950:	d528      	bpl.n	80019a4 <__sflush_r+0xb8>
 8001952:	2200      	movs	r2, #0
 8001954:	6062      	str	r2, [r4, #4]
 8001956:	04d9      	lsls	r1, r3, #19
 8001958:	6922      	ldr	r2, [r4, #16]
 800195a:	6022      	str	r2, [r4, #0]
 800195c:	d504      	bpl.n	8001968 <__sflush_r+0x7c>
 800195e:	1c42      	adds	r2, r0, #1
 8001960:	d101      	bne.n	8001966 <__sflush_r+0x7a>
 8001962:	682b      	ldr	r3, [r5, #0]
 8001964:	b903      	cbnz	r3, 8001968 <__sflush_r+0x7c>
 8001966:	6560      	str	r0, [r4, #84]	; 0x54
 8001968:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800196a:	602f      	str	r7, [r5, #0]
 800196c:	2900      	cmp	r1, #0
 800196e:	d0ca      	beq.n	8001906 <__sflush_r+0x1a>
 8001970:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001974:	4299      	cmp	r1, r3
 8001976:	d002      	beq.n	800197e <__sflush_r+0x92>
 8001978:	4628      	mov	r0, r5
 800197a:	f000 f9d5 	bl	8001d28 <_free_r>
 800197e:	2000      	movs	r0, #0
 8001980:	6360      	str	r0, [r4, #52]	; 0x34
 8001982:	e7c1      	b.n	8001908 <__sflush_r+0x1c>
 8001984:	6a21      	ldr	r1, [r4, #32]
 8001986:	2301      	movs	r3, #1
 8001988:	4628      	mov	r0, r5
 800198a:	47b0      	blx	r6
 800198c:	1c41      	adds	r1, r0, #1
 800198e:	d1c7      	bne.n	8001920 <__sflush_r+0x34>
 8001990:	682b      	ldr	r3, [r5, #0]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d0c4      	beq.n	8001920 <__sflush_r+0x34>
 8001996:	2b1d      	cmp	r3, #29
 8001998:	d001      	beq.n	800199e <__sflush_r+0xb2>
 800199a:	2b16      	cmp	r3, #22
 800199c:	d101      	bne.n	80019a2 <__sflush_r+0xb6>
 800199e:	602f      	str	r7, [r5, #0]
 80019a0:	e7b1      	b.n	8001906 <__sflush_r+0x1a>
 80019a2:	89a3      	ldrh	r3, [r4, #12]
 80019a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019a8:	81a3      	strh	r3, [r4, #12]
 80019aa:	e7ad      	b.n	8001908 <__sflush_r+0x1c>
 80019ac:	690f      	ldr	r7, [r1, #16]
 80019ae:	2f00      	cmp	r7, #0
 80019b0:	d0a9      	beq.n	8001906 <__sflush_r+0x1a>
 80019b2:	0793      	lsls	r3, r2, #30
 80019b4:	680e      	ldr	r6, [r1, #0]
 80019b6:	bf08      	it	eq
 80019b8:	694b      	ldreq	r3, [r1, #20]
 80019ba:	600f      	str	r7, [r1, #0]
 80019bc:	bf18      	it	ne
 80019be:	2300      	movne	r3, #0
 80019c0:	eba6 0807 	sub.w	r8, r6, r7
 80019c4:	608b      	str	r3, [r1, #8]
 80019c6:	f1b8 0f00 	cmp.w	r8, #0
 80019ca:	dd9c      	ble.n	8001906 <__sflush_r+0x1a>
 80019cc:	6a21      	ldr	r1, [r4, #32]
 80019ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80019d0:	4643      	mov	r3, r8
 80019d2:	463a      	mov	r2, r7
 80019d4:	4628      	mov	r0, r5
 80019d6:	47b0      	blx	r6
 80019d8:	2800      	cmp	r0, #0
 80019da:	dc06      	bgt.n	80019ea <__sflush_r+0xfe>
 80019dc:	89a3      	ldrh	r3, [r4, #12]
 80019de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019e2:	81a3      	strh	r3, [r4, #12]
 80019e4:	f04f 30ff 	mov.w	r0, #4294967295
 80019e8:	e78e      	b.n	8001908 <__sflush_r+0x1c>
 80019ea:	4407      	add	r7, r0
 80019ec:	eba8 0800 	sub.w	r8, r8, r0
 80019f0:	e7e9      	b.n	80019c6 <__sflush_r+0xda>
 80019f2:	bf00      	nop
 80019f4:	20400001 	.word	0x20400001

080019f8 <_fflush_r>:
 80019f8:	b538      	push	{r3, r4, r5, lr}
 80019fa:	690b      	ldr	r3, [r1, #16]
 80019fc:	4605      	mov	r5, r0
 80019fe:	460c      	mov	r4, r1
 8001a00:	b913      	cbnz	r3, 8001a08 <_fflush_r+0x10>
 8001a02:	2500      	movs	r5, #0
 8001a04:	4628      	mov	r0, r5
 8001a06:	bd38      	pop	{r3, r4, r5, pc}
 8001a08:	b118      	cbz	r0, 8001a12 <_fflush_r+0x1a>
 8001a0a:	6983      	ldr	r3, [r0, #24]
 8001a0c:	b90b      	cbnz	r3, 8001a12 <_fflush_r+0x1a>
 8001a0e:	f000 f887 	bl	8001b20 <__sinit>
 8001a12:	4b14      	ldr	r3, [pc, #80]	; (8001a64 <_fflush_r+0x6c>)
 8001a14:	429c      	cmp	r4, r3
 8001a16:	d11b      	bne.n	8001a50 <_fflush_r+0x58>
 8001a18:	686c      	ldr	r4, [r5, #4]
 8001a1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d0ef      	beq.n	8001a02 <_fflush_r+0xa>
 8001a22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001a24:	07d0      	lsls	r0, r2, #31
 8001a26:	d404      	bmi.n	8001a32 <_fflush_r+0x3a>
 8001a28:	0599      	lsls	r1, r3, #22
 8001a2a:	d402      	bmi.n	8001a32 <_fflush_r+0x3a>
 8001a2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001a2e:	f000 f915 	bl	8001c5c <__retarget_lock_acquire_recursive>
 8001a32:	4628      	mov	r0, r5
 8001a34:	4621      	mov	r1, r4
 8001a36:	f7ff ff59 	bl	80018ec <__sflush_r>
 8001a3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001a3c:	07da      	lsls	r2, r3, #31
 8001a3e:	4605      	mov	r5, r0
 8001a40:	d4e0      	bmi.n	8001a04 <_fflush_r+0xc>
 8001a42:	89a3      	ldrh	r3, [r4, #12]
 8001a44:	059b      	lsls	r3, r3, #22
 8001a46:	d4dd      	bmi.n	8001a04 <_fflush_r+0xc>
 8001a48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001a4a:	f000 f908 	bl	8001c5e <__retarget_lock_release_recursive>
 8001a4e:	e7d9      	b.n	8001a04 <_fflush_r+0xc>
 8001a50:	4b05      	ldr	r3, [pc, #20]	; (8001a68 <_fflush_r+0x70>)
 8001a52:	429c      	cmp	r4, r3
 8001a54:	d101      	bne.n	8001a5a <_fflush_r+0x62>
 8001a56:	68ac      	ldr	r4, [r5, #8]
 8001a58:	e7df      	b.n	8001a1a <_fflush_r+0x22>
 8001a5a:	4b04      	ldr	r3, [pc, #16]	; (8001a6c <_fflush_r+0x74>)
 8001a5c:	429c      	cmp	r4, r3
 8001a5e:	bf08      	it	eq
 8001a60:	68ec      	ldreq	r4, [r5, #12]
 8001a62:	e7da      	b.n	8001a1a <_fflush_r+0x22>
 8001a64:	0800269c 	.word	0x0800269c
 8001a68:	080026bc 	.word	0x080026bc
 8001a6c:	0800267c 	.word	0x0800267c

08001a70 <std>:
 8001a70:	2300      	movs	r3, #0
 8001a72:	b510      	push	{r4, lr}
 8001a74:	4604      	mov	r4, r0
 8001a76:	e9c0 3300 	strd	r3, r3, [r0]
 8001a7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001a7e:	6083      	str	r3, [r0, #8]
 8001a80:	8181      	strh	r1, [r0, #12]
 8001a82:	6643      	str	r3, [r0, #100]	; 0x64
 8001a84:	81c2      	strh	r2, [r0, #14]
 8001a86:	6183      	str	r3, [r0, #24]
 8001a88:	4619      	mov	r1, r3
 8001a8a:	2208      	movs	r2, #8
 8001a8c:	305c      	adds	r0, #92	; 0x5c
 8001a8e:	f7ff fdd7 	bl	8001640 <memset>
 8001a92:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <std+0x38>)
 8001a94:	6263      	str	r3, [r4, #36]	; 0x24
 8001a96:	4b05      	ldr	r3, [pc, #20]	; (8001aac <std+0x3c>)
 8001a98:	62a3      	str	r3, [r4, #40]	; 0x28
 8001a9a:	4b05      	ldr	r3, [pc, #20]	; (8001ab0 <std+0x40>)
 8001a9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001a9e:	4b05      	ldr	r3, [pc, #20]	; (8001ab4 <std+0x44>)
 8001aa0:	6224      	str	r4, [r4, #32]
 8001aa2:	6323      	str	r3, [r4, #48]	; 0x30
 8001aa4:	bd10      	pop	{r4, pc}
 8001aa6:	bf00      	nop
 8001aa8:	08002479 	.word	0x08002479
 8001aac:	0800249b 	.word	0x0800249b
 8001ab0:	080024d3 	.word	0x080024d3
 8001ab4:	080024f7 	.word	0x080024f7

08001ab8 <_cleanup_r>:
 8001ab8:	4901      	ldr	r1, [pc, #4]	; (8001ac0 <_cleanup_r+0x8>)
 8001aba:	f000 b8af 	b.w	8001c1c <_fwalk_reent>
 8001abe:	bf00      	nop
 8001ac0:	080019f9 	.word	0x080019f9

08001ac4 <__sfmoreglue>:
 8001ac4:	b570      	push	{r4, r5, r6, lr}
 8001ac6:	1e4a      	subs	r2, r1, #1
 8001ac8:	2568      	movs	r5, #104	; 0x68
 8001aca:	4355      	muls	r5, r2
 8001acc:	460e      	mov	r6, r1
 8001ace:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001ad2:	f000 f979 	bl	8001dc8 <_malloc_r>
 8001ad6:	4604      	mov	r4, r0
 8001ad8:	b140      	cbz	r0, 8001aec <__sfmoreglue+0x28>
 8001ada:	2100      	movs	r1, #0
 8001adc:	e9c0 1600 	strd	r1, r6, [r0]
 8001ae0:	300c      	adds	r0, #12
 8001ae2:	60a0      	str	r0, [r4, #8]
 8001ae4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001ae8:	f7ff fdaa 	bl	8001640 <memset>
 8001aec:	4620      	mov	r0, r4
 8001aee:	bd70      	pop	{r4, r5, r6, pc}

08001af0 <__sfp_lock_acquire>:
 8001af0:	4801      	ldr	r0, [pc, #4]	; (8001af8 <__sfp_lock_acquire+0x8>)
 8001af2:	f000 b8b3 	b.w	8001c5c <__retarget_lock_acquire_recursive>
 8001af6:	bf00      	nop
 8001af8:	200004e0 	.word	0x200004e0

08001afc <__sfp_lock_release>:
 8001afc:	4801      	ldr	r0, [pc, #4]	; (8001b04 <__sfp_lock_release+0x8>)
 8001afe:	f000 b8ae 	b.w	8001c5e <__retarget_lock_release_recursive>
 8001b02:	bf00      	nop
 8001b04:	200004e0 	.word	0x200004e0

08001b08 <__sinit_lock_acquire>:
 8001b08:	4801      	ldr	r0, [pc, #4]	; (8001b10 <__sinit_lock_acquire+0x8>)
 8001b0a:	f000 b8a7 	b.w	8001c5c <__retarget_lock_acquire_recursive>
 8001b0e:	bf00      	nop
 8001b10:	200004db 	.word	0x200004db

08001b14 <__sinit_lock_release>:
 8001b14:	4801      	ldr	r0, [pc, #4]	; (8001b1c <__sinit_lock_release+0x8>)
 8001b16:	f000 b8a2 	b.w	8001c5e <__retarget_lock_release_recursive>
 8001b1a:	bf00      	nop
 8001b1c:	200004db 	.word	0x200004db

08001b20 <__sinit>:
 8001b20:	b510      	push	{r4, lr}
 8001b22:	4604      	mov	r4, r0
 8001b24:	f7ff fff0 	bl	8001b08 <__sinit_lock_acquire>
 8001b28:	69a3      	ldr	r3, [r4, #24]
 8001b2a:	b11b      	cbz	r3, 8001b34 <__sinit+0x14>
 8001b2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001b30:	f7ff bff0 	b.w	8001b14 <__sinit_lock_release>
 8001b34:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001b38:	6523      	str	r3, [r4, #80]	; 0x50
 8001b3a:	4b13      	ldr	r3, [pc, #76]	; (8001b88 <__sinit+0x68>)
 8001b3c:	4a13      	ldr	r2, [pc, #76]	; (8001b8c <__sinit+0x6c>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	62a2      	str	r2, [r4, #40]	; 0x28
 8001b42:	42a3      	cmp	r3, r4
 8001b44:	bf04      	itt	eq
 8001b46:	2301      	moveq	r3, #1
 8001b48:	61a3      	streq	r3, [r4, #24]
 8001b4a:	4620      	mov	r0, r4
 8001b4c:	f000 f820 	bl	8001b90 <__sfp>
 8001b50:	6060      	str	r0, [r4, #4]
 8001b52:	4620      	mov	r0, r4
 8001b54:	f000 f81c 	bl	8001b90 <__sfp>
 8001b58:	60a0      	str	r0, [r4, #8]
 8001b5a:	4620      	mov	r0, r4
 8001b5c:	f000 f818 	bl	8001b90 <__sfp>
 8001b60:	2200      	movs	r2, #0
 8001b62:	60e0      	str	r0, [r4, #12]
 8001b64:	2104      	movs	r1, #4
 8001b66:	6860      	ldr	r0, [r4, #4]
 8001b68:	f7ff ff82 	bl	8001a70 <std>
 8001b6c:	68a0      	ldr	r0, [r4, #8]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	2109      	movs	r1, #9
 8001b72:	f7ff ff7d 	bl	8001a70 <std>
 8001b76:	68e0      	ldr	r0, [r4, #12]
 8001b78:	2202      	movs	r2, #2
 8001b7a:	2112      	movs	r1, #18
 8001b7c:	f7ff ff78 	bl	8001a70 <std>
 8001b80:	2301      	movs	r3, #1
 8001b82:	61a3      	str	r3, [r4, #24]
 8001b84:	e7d2      	b.n	8001b2c <__sinit+0xc>
 8001b86:	bf00      	nop
 8001b88:	08002678 	.word	0x08002678
 8001b8c:	08001ab9 	.word	0x08001ab9

08001b90 <__sfp>:
 8001b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b92:	4607      	mov	r7, r0
 8001b94:	f7ff ffac 	bl	8001af0 <__sfp_lock_acquire>
 8001b98:	4b1e      	ldr	r3, [pc, #120]	; (8001c14 <__sfp+0x84>)
 8001b9a:	681e      	ldr	r6, [r3, #0]
 8001b9c:	69b3      	ldr	r3, [r6, #24]
 8001b9e:	b913      	cbnz	r3, 8001ba6 <__sfp+0x16>
 8001ba0:	4630      	mov	r0, r6
 8001ba2:	f7ff ffbd 	bl	8001b20 <__sinit>
 8001ba6:	3648      	adds	r6, #72	; 0x48
 8001ba8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001bac:	3b01      	subs	r3, #1
 8001bae:	d503      	bpl.n	8001bb8 <__sfp+0x28>
 8001bb0:	6833      	ldr	r3, [r6, #0]
 8001bb2:	b30b      	cbz	r3, 8001bf8 <__sfp+0x68>
 8001bb4:	6836      	ldr	r6, [r6, #0]
 8001bb6:	e7f7      	b.n	8001ba8 <__sfp+0x18>
 8001bb8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001bbc:	b9d5      	cbnz	r5, 8001bf4 <__sfp+0x64>
 8001bbe:	4b16      	ldr	r3, [pc, #88]	; (8001c18 <__sfp+0x88>)
 8001bc0:	60e3      	str	r3, [r4, #12]
 8001bc2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001bc6:	6665      	str	r5, [r4, #100]	; 0x64
 8001bc8:	f000 f847 	bl	8001c5a <__retarget_lock_init_recursive>
 8001bcc:	f7ff ff96 	bl	8001afc <__sfp_lock_release>
 8001bd0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001bd4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001bd8:	6025      	str	r5, [r4, #0]
 8001bda:	61a5      	str	r5, [r4, #24]
 8001bdc:	2208      	movs	r2, #8
 8001bde:	4629      	mov	r1, r5
 8001be0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001be4:	f7ff fd2c 	bl	8001640 <memset>
 8001be8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001bec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001bf0:	4620      	mov	r0, r4
 8001bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001bf4:	3468      	adds	r4, #104	; 0x68
 8001bf6:	e7d9      	b.n	8001bac <__sfp+0x1c>
 8001bf8:	2104      	movs	r1, #4
 8001bfa:	4638      	mov	r0, r7
 8001bfc:	f7ff ff62 	bl	8001ac4 <__sfmoreglue>
 8001c00:	4604      	mov	r4, r0
 8001c02:	6030      	str	r0, [r6, #0]
 8001c04:	2800      	cmp	r0, #0
 8001c06:	d1d5      	bne.n	8001bb4 <__sfp+0x24>
 8001c08:	f7ff ff78 	bl	8001afc <__sfp_lock_release>
 8001c0c:	230c      	movs	r3, #12
 8001c0e:	603b      	str	r3, [r7, #0]
 8001c10:	e7ee      	b.n	8001bf0 <__sfp+0x60>
 8001c12:	bf00      	nop
 8001c14:	08002678 	.word	0x08002678
 8001c18:	ffff0001 	.word	0xffff0001

08001c1c <_fwalk_reent>:
 8001c1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001c20:	4606      	mov	r6, r0
 8001c22:	4688      	mov	r8, r1
 8001c24:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001c28:	2700      	movs	r7, #0
 8001c2a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001c2e:	f1b9 0901 	subs.w	r9, r9, #1
 8001c32:	d505      	bpl.n	8001c40 <_fwalk_reent+0x24>
 8001c34:	6824      	ldr	r4, [r4, #0]
 8001c36:	2c00      	cmp	r4, #0
 8001c38:	d1f7      	bne.n	8001c2a <_fwalk_reent+0xe>
 8001c3a:	4638      	mov	r0, r7
 8001c3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001c40:	89ab      	ldrh	r3, [r5, #12]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d907      	bls.n	8001c56 <_fwalk_reent+0x3a>
 8001c46:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	d003      	beq.n	8001c56 <_fwalk_reent+0x3a>
 8001c4e:	4629      	mov	r1, r5
 8001c50:	4630      	mov	r0, r6
 8001c52:	47c0      	blx	r8
 8001c54:	4307      	orrs	r7, r0
 8001c56:	3568      	adds	r5, #104	; 0x68
 8001c58:	e7e9      	b.n	8001c2e <_fwalk_reent+0x12>

08001c5a <__retarget_lock_init_recursive>:
 8001c5a:	4770      	bx	lr

08001c5c <__retarget_lock_acquire_recursive>:
 8001c5c:	4770      	bx	lr

08001c5e <__retarget_lock_release_recursive>:
 8001c5e:	4770      	bx	lr

08001c60 <__swhatbuf_r>:
 8001c60:	b570      	push	{r4, r5, r6, lr}
 8001c62:	460e      	mov	r6, r1
 8001c64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c68:	2900      	cmp	r1, #0
 8001c6a:	b096      	sub	sp, #88	; 0x58
 8001c6c:	4614      	mov	r4, r2
 8001c6e:	461d      	mov	r5, r3
 8001c70:	da07      	bge.n	8001c82 <__swhatbuf_r+0x22>
 8001c72:	2300      	movs	r3, #0
 8001c74:	602b      	str	r3, [r5, #0]
 8001c76:	89b3      	ldrh	r3, [r6, #12]
 8001c78:	061a      	lsls	r2, r3, #24
 8001c7a:	d410      	bmi.n	8001c9e <__swhatbuf_r+0x3e>
 8001c7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c80:	e00e      	b.n	8001ca0 <__swhatbuf_r+0x40>
 8001c82:	466a      	mov	r2, sp
 8001c84:	f000 fc5e 	bl	8002544 <_fstat_r>
 8001c88:	2800      	cmp	r0, #0
 8001c8a:	dbf2      	blt.n	8001c72 <__swhatbuf_r+0x12>
 8001c8c:	9a01      	ldr	r2, [sp, #4]
 8001c8e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001c92:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001c96:	425a      	negs	r2, r3
 8001c98:	415a      	adcs	r2, r3
 8001c9a:	602a      	str	r2, [r5, #0]
 8001c9c:	e7ee      	b.n	8001c7c <__swhatbuf_r+0x1c>
 8001c9e:	2340      	movs	r3, #64	; 0x40
 8001ca0:	2000      	movs	r0, #0
 8001ca2:	6023      	str	r3, [r4, #0]
 8001ca4:	b016      	add	sp, #88	; 0x58
 8001ca6:	bd70      	pop	{r4, r5, r6, pc}

08001ca8 <__smakebuf_r>:
 8001ca8:	898b      	ldrh	r3, [r1, #12]
 8001caa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001cac:	079d      	lsls	r5, r3, #30
 8001cae:	4606      	mov	r6, r0
 8001cb0:	460c      	mov	r4, r1
 8001cb2:	d507      	bpl.n	8001cc4 <__smakebuf_r+0x1c>
 8001cb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001cb8:	6023      	str	r3, [r4, #0]
 8001cba:	6123      	str	r3, [r4, #16]
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	6163      	str	r3, [r4, #20]
 8001cc0:	b002      	add	sp, #8
 8001cc2:	bd70      	pop	{r4, r5, r6, pc}
 8001cc4:	ab01      	add	r3, sp, #4
 8001cc6:	466a      	mov	r2, sp
 8001cc8:	f7ff ffca 	bl	8001c60 <__swhatbuf_r>
 8001ccc:	9900      	ldr	r1, [sp, #0]
 8001cce:	4605      	mov	r5, r0
 8001cd0:	4630      	mov	r0, r6
 8001cd2:	f000 f879 	bl	8001dc8 <_malloc_r>
 8001cd6:	b948      	cbnz	r0, 8001cec <__smakebuf_r+0x44>
 8001cd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001cdc:	059a      	lsls	r2, r3, #22
 8001cde:	d4ef      	bmi.n	8001cc0 <__smakebuf_r+0x18>
 8001ce0:	f023 0303 	bic.w	r3, r3, #3
 8001ce4:	f043 0302 	orr.w	r3, r3, #2
 8001ce8:	81a3      	strh	r3, [r4, #12]
 8001cea:	e7e3      	b.n	8001cb4 <__smakebuf_r+0xc>
 8001cec:	4b0d      	ldr	r3, [pc, #52]	; (8001d24 <__smakebuf_r+0x7c>)
 8001cee:	62b3      	str	r3, [r6, #40]	; 0x28
 8001cf0:	89a3      	ldrh	r3, [r4, #12]
 8001cf2:	6020      	str	r0, [r4, #0]
 8001cf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cf8:	81a3      	strh	r3, [r4, #12]
 8001cfa:	9b00      	ldr	r3, [sp, #0]
 8001cfc:	6163      	str	r3, [r4, #20]
 8001cfe:	9b01      	ldr	r3, [sp, #4]
 8001d00:	6120      	str	r0, [r4, #16]
 8001d02:	b15b      	cbz	r3, 8001d1c <__smakebuf_r+0x74>
 8001d04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001d08:	4630      	mov	r0, r6
 8001d0a:	f000 fc2d 	bl	8002568 <_isatty_r>
 8001d0e:	b128      	cbz	r0, 8001d1c <__smakebuf_r+0x74>
 8001d10:	89a3      	ldrh	r3, [r4, #12]
 8001d12:	f023 0303 	bic.w	r3, r3, #3
 8001d16:	f043 0301 	orr.w	r3, r3, #1
 8001d1a:	81a3      	strh	r3, [r4, #12]
 8001d1c:	89a0      	ldrh	r0, [r4, #12]
 8001d1e:	4305      	orrs	r5, r0
 8001d20:	81a5      	strh	r5, [r4, #12]
 8001d22:	e7cd      	b.n	8001cc0 <__smakebuf_r+0x18>
 8001d24:	08001ab9 	.word	0x08001ab9

08001d28 <_free_r>:
 8001d28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001d2a:	2900      	cmp	r1, #0
 8001d2c:	d048      	beq.n	8001dc0 <_free_r+0x98>
 8001d2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001d32:	9001      	str	r0, [sp, #4]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	f1a1 0404 	sub.w	r4, r1, #4
 8001d3a:	bfb8      	it	lt
 8001d3c:	18e4      	addlt	r4, r4, r3
 8001d3e:	f000 fc35 	bl	80025ac <__malloc_lock>
 8001d42:	4a20      	ldr	r2, [pc, #128]	; (8001dc4 <_free_r+0x9c>)
 8001d44:	9801      	ldr	r0, [sp, #4]
 8001d46:	6813      	ldr	r3, [r2, #0]
 8001d48:	4615      	mov	r5, r2
 8001d4a:	b933      	cbnz	r3, 8001d5a <_free_r+0x32>
 8001d4c:	6063      	str	r3, [r4, #4]
 8001d4e:	6014      	str	r4, [r2, #0]
 8001d50:	b003      	add	sp, #12
 8001d52:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001d56:	f000 bc2f 	b.w	80025b8 <__malloc_unlock>
 8001d5a:	42a3      	cmp	r3, r4
 8001d5c:	d90b      	bls.n	8001d76 <_free_r+0x4e>
 8001d5e:	6821      	ldr	r1, [r4, #0]
 8001d60:	1862      	adds	r2, r4, r1
 8001d62:	4293      	cmp	r3, r2
 8001d64:	bf04      	itt	eq
 8001d66:	681a      	ldreq	r2, [r3, #0]
 8001d68:	685b      	ldreq	r3, [r3, #4]
 8001d6a:	6063      	str	r3, [r4, #4]
 8001d6c:	bf04      	itt	eq
 8001d6e:	1852      	addeq	r2, r2, r1
 8001d70:	6022      	streq	r2, [r4, #0]
 8001d72:	602c      	str	r4, [r5, #0]
 8001d74:	e7ec      	b.n	8001d50 <_free_r+0x28>
 8001d76:	461a      	mov	r2, r3
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	b10b      	cbz	r3, 8001d80 <_free_r+0x58>
 8001d7c:	42a3      	cmp	r3, r4
 8001d7e:	d9fa      	bls.n	8001d76 <_free_r+0x4e>
 8001d80:	6811      	ldr	r1, [r2, #0]
 8001d82:	1855      	adds	r5, r2, r1
 8001d84:	42a5      	cmp	r5, r4
 8001d86:	d10b      	bne.n	8001da0 <_free_r+0x78>
 8001d88:	6824      	ldr	r4, [r4, #0]
 8001d8a:	4421      	add	r1, r4
 8001d8c:	1854      	adds	r4, r2, r1
 8001d8e:	42a3      	cmp	r3, r4
 8001d90:	6011      	str	r1, [r2, #0]
 8001d92:	d1dd      	bne.n	8001d50 <_free_r+0x28>
 8001d94:	681c      	ldr	r4, [r3, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	6053      	str	r3, [r2, #4]
 8001d9a:	4421      	add	r1, r4
 8001d9c:	6011      	str	r1, [r2, #0]
 8001d9e:	e7d7      	b.n	8001d50 <_free_r+0x28>
 8001da0:	d902      	bls.n	8001da8 <_free_r+0x80>
 8001da2:	230c      	movs	r3, #12
 8001da4:	6003      	str	r3, [r0, #0]
 8001da6:	e7d3      	b.n	8001d50 <_free_r+0x28>
 8001da8:	6825      	ldr	r5, [r4, #0]
 8001daa:	1961      	adds	r1, r4, r5
 8001dac:	428b      	cmp	r3, r1
 8001dae:	bf04      	itt	eq
 8001db0:	6819      	ldreq	r1, [r3, #0]
 8001db2:	685b      	ldreq	r3, [r3, #4]
 8001db4:	6063      	str	r3, [r4, #4]
 8001db6:	bf04      	itt	eq
 8001db8:	1949      	addeq	r1, r1, r5
 8001dba:	6021      	streq	r1, [r4, #0]
 8001dbc:	6054      	str	r4, [r2, #4]
 8001dbe:	e7c7      	b.n	8001d50 <_free_r+0x28>
 8001dc0:	b003      	add	sp, #12
 8001dc2:	bd30      	pop	{r4, r5, pc}
 8001dc4:	200000ac 	.word	0x200000ac

08001dc8 <_malloc_r>:
 8001dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dca:	1ccd      	adds	r5, r1, #3
 8001dcc:	f025 0503 	bic.w	r5, r5, #3
 8001dd0:	3508      	adds	r5, #8
 8001dd2:	2d0c      	cmp	r5, #12
 8001dd4:	bf38      	it	cc
 8001dd6:	250c      	movcc	r5, #12
 8001dd8:	2d00      	cmp	r5, #0
 8001dda:	4606      	mov	r6, r0
 8001ddc:	db01      	blt.n	8001de2 <_malloc_r+0x1a>
 8001dde:	42a9      	cmp	r1, r5
 8001de0:	d903      	bls.n	8001dea <_malloc_r+0x22>
 8001de2:	230c      	movs	r3, #12
 8001de4:	6033      	str	r3, [r6, #0]
 8001de6:	2000      	movs	r0, #0
 8001de8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001dea:	f000 fbdf 	bl	80025ac <__malloc_lock>
 8001dee:	4921      	ldr	r1, [pc, #132]	; (8001e74 <_malloc_r+0xac>)
 8001df0:	680a      	ldr	r2, [r1, #0]
 8001df2:	4614      	mov	r4, r2
 8001df4:	b99c      	cbnz	r4, 8001e1e <_malloc_r+0x56>
 8001df6:	4f20      	ldr	r7, [pc, #128]	; (8001e78 <_malloc_r+0xb0>)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	b923      	cbnz	r3, 8001e06 <_malloc_r+0x3e>
 8001dfc:	4621      	mov	r1, r4
 8001dfe:	4630      	mov	r0, r6
 8001e00:	f000 fb2a 	bl	8002458 <_sbrk_r>
 8001e04:	6038      	str	r0, [r7, #0]
 8001e06:	4629      	mov	r1, r5
 8001e08:	4630      	mov	r0, r6
 8001e0a:	f000 fb25 	bl	8002458 <_sbrk_r>
 8001e0e:	1c43      	adds	r3, r0, #1
 8001e10:	d123      	bne.n	8001e5a <_malloc_r+0x92>
 8001e12:	230c      	movs	r3, #12
 8001e14:	6033      	str	r3, [r6, #0]
 8001e16:	4630      	mov	r0, r6
 8001e18:	f000 fbce 	bl	80025b8 <__malloc_unlock>
 8001e1c:	e7e3      	b.n	8001de6 <_malloc_r+0x1e>
 8001e1e:	6823      	ldr	r3, [r4, #0]
 8001e20:	1b5b      	subs	r3, r3, r5
 8001e22:	d417      	bmi.n	8001e54 <_malloc_r+0x8c>
 8001e24:	2b0b      	cmp	r3, #11
 8001e26:	d903      	bls.n	8001e30 <_malloc_r+0x68>
 8001e28:	6023      	str	r3, [r4, #0]
 8001e2a:	441c      	add	r4, r3
 8001e2c:	6025      	str	r5, [r4, #0]
 8001e2e:	e004      	b.n	8001e3a <_malloc_r+0x72>
 8001e30:	6863      	ldr	r3, [r4, #4]
 8001e32:	42a2      	cmp	r2, r4
 8001e34:	bf0c      	ite	eq
 8001e36:	600b      	streq	r3, [r1, #0]
 8001e38:	6053      	strne	r3, [r2, #4]
 8001e3a:	4630      	mov	r0, r6
 8001e3c:	f000 fbbc 	bl	80025b8 <__malloc_unlock>
 8001e40:	f104 000b 	add.w	r0, r4, #11
 8001e44:	1d23      	adds	r3, r4, #4
 8001e46:	f020 0007 	bic.w	r0, r0, #7
 8001e4a:	1ac2      	subs	r2, r0, r3
 8001e4c:	d0cc      	beq.n	8001de8 <_malloc_r+0x20>
 8001e4e:	1a1b      	subs	r3, r3, r0
 8001e50:	50a3      	str	r3, [r4, r2]
 8001e52:	e7c9      	b.n	8001de8 <_malloc_r+0x20>
 8001e54:	4622      	mov	r2, r4
 8001e56:	6864      	ldr	r4, [r4, #4]
 8001e58:	e7cc      	b.n	8001df4 <_malloc_r+0x2c>
 8001e5a:	1cc4      	adds	r4, r0, #3
 8001e5c:	f024 0403 	bic.w	r4, r4, #3
 8001e60:	42a0      	cmp	r0, r4
 8001e62:	d0e3      	beq.n	8001e2c <_malloc_r+0x64>
 8001e64:	1a21      	subs	r1, r4, r0
 8001e66:	4630      	mov	r0, r6
 8001e68:	f000 faf6 	bl	8002458 <_sbrk_r>
 8001e6c:	3001      	adds	r0, #1
 8001e6e:	d1dd      	bne.n	8001e2c <_malloc_r+0x64>
 8001e70:	e7cf      	b.n	8001e12 <_malloc_r+0x4a>
 8001e72:	bf00      	nop
 8001e74:	200000ac 	.word	0x200000ac
 8001e78:	200000b0 	.word	0x200000b0

08001e7c <__sfputc_r>:
 8001e7c:	6893      	ldr	r3, [r2, #8]
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	b410      	push	{r4}
 8001e84:	6093      	str	r3, [r2, #8]
 8001e86:	da08      	bge.n	8001e9a <__sfputc_r+0x1e>
 8001e88:	6994      	ldr	r4, [r2, #24]
 8001e8a:	42a3      	cmp	r3, r4
 8001e8c:	db01      	blt.n	8001e92 <__sfputc_r+0x16>
 8001e8e:	290a      	cmp	r1, #10
 8001e90:	d103      	bne.n	8001e9a <__sfputc_r+0x1e>
 8001e92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001e96:	f7ff bc69 	b.w	800176c <__swbuf_r>
 8001e9a:	6813      	ldr	r3, [r2, #0]
 8001e9c:	1c58      	adds	r0, r3, #1
 8001e9e:	6010      	str	r0, [r2, #0]
 8001ea0:	7019      	strb	r1, [r3, #0]
 8001ea2:	4608      	mov	r0, r1
 8001ea4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001ea8:	4770      	bx	lr

08001eaa <__sfputs_r>:
 8001eaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eac:	4606      	mov	r6, r0
 8001eae:	460f      	mov	r7, r1
 8001eb0:	4614      	mov	r4, r2
 8001eb2:	18d5      	adds	r5, r2, r3
 8001eb4:	42ac      	cmp	r4, r5
 8001eb6:	d101      	bne.n	8001ebc <__sfputs_r+0x12>
 8001eb8:	2000      	movs	r0, #0
 8001eba:	e007      	b.n	8001ecc <__sfputs_r+0x22>
 8001ebc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ec0:	463a      	mov	r2, r7
 8001ec2:	4630      	mov	r0, r6
 8001ec4:	f7ff ffda 	bl	8001e7c <__sfputc_r>
 8001ec8:	1c43      	adds	r3, r0, #1
 8001eca:	d1f3      	bne.n	8001eb4 <__sfputs_r+0xa>
 8001ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001ed0 <_vfiprintf_r>:
 8001ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ed4:	460d      	mov	r5, r1
 8001ed6:	b09d      	sub	sp, #116	; 0x74
 8001ed8:	4614      	mov	r4, r2
 8001eda:	4698      	mov	r8, r3
 8001edc:	4606      	mov	r6, r0
 8001ede:	b118      	cbz	r0, 8001ee8 <_vfiprintf_r+0x18>
 8001ee0:	6983      	ldr	r3, [r0, #24]
 8001ee2:	b90b      	cbnz	r3, 8001ee8 <_vfiprintf_r+0x18>
 8001ee4:	f7ff fe1c 	bl	8001b20 <__sinit>
 8001ee8:	4b89      	ldr	r3, [pc, #548]	; (8002110 <_vfiprintf_r+0x240>)
 8001eea:	429d      	cmp	r5, r3
 8001eec:	d11b      	bne.n	8001f26 <_vfiprintf_r+0x56>
 8001eee:	6875      	ldr	r5, [r6, #4]
 8001ef0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001ef2:	07d9      	lsls	r1, r3, #31
 8001ef4:	d405      	bmi.n	8001f02 <_vfiprintf_r+0x32>
 8001ef6:	89ab      	ldrh	r3, [r5, #12]
 8001ef8:	059a      	lsls	r2, r3, #22
 8001efa:	d402      	bmi.n	8001f02 <_vfiprintf_r+0x32>
 8001efc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001efe:	f7ff fead 	bl	8001c5c <__retarget_lock_acquire_recursive>
 8001f02:	89ab      	ldrh	r3, [r5, #12]
 8001f04:	071b      	lsls	r3, r3, #28
 8001f06:	d501      	bpl.n	8001f0c <_vfiprintf_r+0x3c>
 8001f08:	692b      	ldr	r3, [r5, #16]
 8001f0a:	b9eb      	cbnz	r3, 8001f48 <_vfiprintf_r+0x78>
 8001f0c:	4629      	mov	r1, r5
 8001f0e:	4630      	mov	r0, r6
 8001f10:	f7ff fc7e 	bl	8001810 <__swsetup_r>
 8001f14:	b1c0      	cbz	r0, 8001f48 <_vfiprintf_r+0x78>
 8001f16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001f18:	07dc      	lsls	r4, r3, #31
 8001f1a:	d50e      	bpl.n	8001f3a <_vfiprintf_r+0x6a>
 8001f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f20:	b01d      	add	sp, #116	; 0x74
 8001f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f26:	4b7b      	ldr	r3, [pc, #492]	; (8002114 <_vfiprintf_r+0x244>)
 8001f28:	429d      	cmp	r5, r3
 8001f2a:	d101      	bne.n	8001f30 <_vfiprintf_r+0x60>
 8001f2c:	68b5      	ldr	r5, [r6, #8]
 8001f2e:	e7df      	b.n	8001ef0 <_vfiprintf_r+0x20>
 8001f30:	4b79      	ldr	r3, [pc, #484]	; (8002118 <_vfiprintf_r+0x248>)
 8001f32:	429d      	cmp	r5, r3
 8001f34:	bf08      	it	eq
 8001f36:	68f5      	ldreq	r5, [r6, #12]
 8001f38:	e7da      	b.n	8001ef0 <_vfiprintf_r+0x20>
 8001f3a:	89ab      	ldrh	r3, [r5, #12]
 8001f3c:	0598      	lsls	r0, r3, #22
 8001f3e:	d4ed      	bmi.n	8001f1c <_vfiprintf_r+0x4c>
 8001f40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001f42:	f7ff fe8c 	bl	8001c5e <__retarget_lock_release_recursive>
 8001f46:	e7e9      	b.n	8001f1c <_vfiprintf_r+0x4c>
 8001f48:	2300      	movs	r3, #0
 8001f4a:	9309      	str	r3, [sp, #36]	; 0x24
 8001f4c:	2320      	movs	r3, #32
 8001f4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001f52:	f8cd 800c 	str.w	r8, [sp, #12]
 8001f56:	2330      	movs	r3, #48	; 0x30
 8001f58:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800211c <_vfiprintf_r+0x24c>
 8001f5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001f60:	f04f 0901 	mov.w	r9, #1
 8001f64:	4623      	mov	r3, r4
 8001f66:	469a      	mov	sl, r3
 8001f68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001f6c:	b10a      	cbz	r2, 8001f72 <_vfiprintf_r+0xa2>
 8001f6e:	2a25      	cmp	r2, #37	; 0x25
 8001f70:	d1f9      	bne.n	8001f66 <_vfiprintf_r+0x96>
 8001f72:	ebba 0b04 	subs.w	fp, sl, r4
 8001f76:	d00b      	beq.n	8001f90 <_vfiprintf_r+0xc0>
 8001f78:	465b      	mov	r3, fp
 8001f7a:	4622      	mov	r2, r4
 8001f7c:	4629      	mov	r1, r5
 8001f7e:	4630      	mov	r0, r6
 8001f80:	f7ff ff93 	bl	8001eaa <__sfputs_r>
 8001f84:	3001      	adds	r0, #1
 8001f86:	f000 80aa 	beq.w	80020de <_vfiprintf_r+0x20e>
 8001f8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001f8c:	445a      	add	r2, fp
 8001f8e:	9209      	str	r2, [sp, #36]	; 0x24
 8001f90:	f89a 3000 	ldrb.w	r3, [sl]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	f000 80a2 	beq.w	80020de <_vfiprintf_r+0x20e>
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001fa0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001fa4:	f10a 0a01 	add.w	sl, sl, #1
 8001fa8:	9304      	str	r3, [sp, #16]
 8001faa:	9307      	str	r3, [sp, #28]
 8001fac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001fb0:	931a      	str	r3, [sp, #104]	; 0x68
 8001fb2:	4654      	mov	r4, sl
 8001fb4:	2205      	movs	r2, #5
 8001fb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001fba:	4858      	ldr	r0, [pc, #352]	; (800211c <_vfiprintf_r+0x24c>)
 8001fbc:	f7fe f920 	bl	8000200 <memchr>
 8001fc0:	9a04      	ldr	r2, [sp, #16]
 8001fc2:	b9d8      	cbnz	r0, 8001ffc <_vfiprintf_r+0x12c>
 8001fc4:	06d1      	lsls	r1, r2, #27
 8001fc6:	bf44      	itt	mi
 8001fc8:	2320      	movmi	r3, #32
 8001fca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001fce:	0713      	lsls	r3, r2, #28
 8001fd0:	bf44      	itt	mi
 8001fd2:	232b      	movmi	r3, #43	; 0x2b
 8001fd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001fd8:	f89a 3000 	ldrb.w	r3, [sl]
 8001fdc:	2b2a      	cmp	r3, #42	; 0x2a
 8001fde:	d015      	beq.n	800200c <_vfiprintf_r+0x13c>
 8001fe0:	9a07      	ldr	r2, [sp, #28]
 8001fe2:	4654      	mov	r4, sl
 8001fe4:	2000      	movs	r0, #0
 8001fe6:	f04f 0c0a 	mov.w	ip, #10
 8001fea:	4621      	mov	r1, r4
 8001fec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001ff0:	3b30      	subs	r3, #48	; 0x30
 8001ff2:	2b09      	cmp	r3, #9
 8001ff4:	d94e      	bls.n	8002094 <_vfiprintf_r+0x1c4>
 8001ff6:	b1b0      	cbz	r0, 8002026 <_vfiprintf_r+0x156>
 8001ff8:	9207      	str	r2, [sp, #28]
 8001ffa:	e014      	b.n	8002026 <_vfiprintf_r+0x156>
 8001ffc:	eba0 0308 	sub.w	r3, r0, r8
 8002000:	fa09 f303 	lsl.w	r3, r9, r3
 8002004:	4313      	orrs	r3, r2
 8002006:	9304      	str	r3, [sp, #16]
 8002008:	46a2      	mov	sl, r4
 800200a:	e7d2      	b.n	8001fb2 <_vfiprintf_r+0xe2>
 800200c:	9b03      	ldr	r3, [sp, #12]
 800200e:	1d19      	adds	r1, r3, #4
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	9103      	str	r1, [sp, #12]
 8002014:	2b00      	cmp	r3, #0
 8002016:	bfbb      	ittet	lt
 8002018:	425b      	neglt	r3, r3
 800201a:	f042 0202 	orrlt.w	r2, r2, #2
 800201e:	9307      	strge	r3, [sp, #28]
 8002020:	9307      	strlt	r3, [sp, #28]
 8002022:	bfb8      	it	lt
 8002024:	9204      	strlt	r2, [sp, #16]
 8002026:	7823      	ldrb	r3, [r4, #0]
 8002028:	2b2e      	cmp	r3, #46	; 0x2e
 800202a:	d10c      	bne.n	8002046 <_vfiprintf_r+0x176>
 800202c:	7863      	ldrb	r3, [r4, #1]
 800202e:	2b2a      	cmp	r3, #42	; 0x2a
 8002030:	d135      	bne.n	800209e <_vfiprintf_r+0x1ce>
 8002032:	9b03      	ldr	r3, [sp, #12]
 8002034:	1d1a      	adds	r2, r3, #4
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	9203      	str	r2, [sp, #12]
 800203a:	2b00      	cmp	r3, #0
 800203c:	bfb8      	it	lt
 800203e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002042:	3402      	adds	r4, #2
 8002044:	9305      	str	r3, [sp, #20]
 8002046:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800212c <_vfiprintf_r+0x25c>
 800204a:	7821      	ldrb	r1, [r4, #0]
 800204c:	2203      	movs	r2, #3
 800204e:	4650      	mov	r0, sl
 8002050:	f7fe f8d6 	bl	8000200 <memchr>
 8002054:	b140      	cbz	r0, 8002068 <_vfiprintf_r+0x198>
 8002056:	2340      	movs	r3, #64	; 0x40
 8002058:	eba0 000a 	sub.w	r0, r0, sl
 800205c:	fa03 f000 	lsl.w	r0, r3, r0
 8002060:	9b04      	ldr	r3, [sp, #16]
 8002062:	4303      	orrs	r3, r0
 8002064:	3401      	adds	r4, #1
 8002066:	9304      	str	r3, [sp, #16]
 8002068:	f814 1b01 	ldrb.w	r1, [r4], #1
 800206c:	482c      	ldr	r0, [pc, #176]	; (8002120 <_vfiprintf_r+0x250>)
 800206e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002072:	2206      	movs	r2, #6
 8002074:	f7fe f8c4 	bl	8000200 <memchr>
 8002078:	2800      	cmp	r0, #0
 800207a:	d03f      	beq.n	80020fc <_vfiprintf_r+0x22c>
 800207c:	4b29      	ldr	r3, [pc, #164]	; (8002124 <_vfiprintf_r+0x254>)
 800207e:	bb1b      	cbnz	r3, 80020c8 <_vfiprintf_r+0x1f8>
 8002080:	9b03      	ldr	r3, [sp, #12]
 8002082:	3307      	adds	r3, #7
 8002084:	f023 0307 	bic.w	r3, r3, #7
 8002088:	3308      	adds	r3, #8
 800208a:	9303      	str	r3, [sp, #12]
 800208c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800208e:	443b      	add	r3, r7
 8002090:	9309      	str	r3, [sp, #36]	; 0x24
 8002092:	e767      	b.n	8001f64 <_vfiprintf_r+0x94>
 8002094:	fb0c 3202 	mla	r2, ip, r2, r3
 8002098:	460c      	mov	r4, r1
 800209a:	2001      	movs	r0, #1
 800209c:	e7a5      	b.n	8001fea <_vfiprintf_r+0x11a>
 800209e:	2300      	movs	r3, #0
 80020a0:	3401      	adds	r4, #1
 80020a2:	9305      	str	r3, [sp, #20]
 80020a4:	4619      	mov	r1, r3
 80020a6:	f04f 0c0a 	mov.w	ip, #10
 80020aa:	4620      	mov	r0, r4
 80020ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80020b0:	3a30      	subs	r2, #48	; 0x30
 80020b2:	2a09      	cmp	r2, #9
 80020b4:	d903      	bls.n	80020be <_vfiprintf_r+0x1ee>
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d0c5      	beq.n	8002046 <_vfiprintf_r+0x176>
 80020ba:	9105      	str	r1, [sp, #20]
 80020bc:	e7c3      	b.n	8002046 <_vfiprintf_r+0x176>
 80020be:	fb0c 2101 	mla	r1, ip, r1, r2
 80020c2:	4604      	mov	r4, r0
 80020c4:	2301      	movs	r3, #1
 80020c6:	e7f0      	b.n	80020aa <_vfiprintf_r+0x1da>
 80020c8:	ab03      	add	r3, sp, #12
 80020ca:	9300      	str	r3, [sp, #0]
 80020cc:	462a      	mov	r2, r5
 80020ce:	4b16      	ldr	r3, [pc, #88]	; (8002128 <_vfiprintf_r+0x258>)
 80020d0:	a904      	add	r1, sp, #16
 80020d2:	4630      	mov	r0, r6
 80020d4:	f3af 8000 	nop.w
 80020d8:	4607      	mov	r7, r0
 80020da:	1c78      	adds	r0, r7, #1
 80020dc:	d1d6      	bne.n	800208c <_vfiprintf_r+0x1bc>
 80020de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80020e0:	07d9      	lsls	r1, r3, #31
 80020e2:	d405      	bmi.n	80020f0 <_vfiprintf_r+0x220>
 80020e4:	89ab      	ldrh	r3, [r5, #12]
 80020e6:	059a      	lsls	r2, r3, #22
 80020e8:	d402      	bmi.n	80020f0 <_vfiprintf_r+0x220>
 80020ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80020ec:	f7ff fdb7 	bl	8001c5e <__retarget_lock_release_recursive>
 80020f0:	89ab      	ldrh	r3, [r5, #12]
 80020f2:	065b      	lsls	r3, r3, #25
 80020f4:	f53f af12 	bmi.w	8001f1c <_vfiprintf_r+0x4c>
 80020f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80020fa:	e711      	b.n	8001f20 <_vfiprintf_r+0x50>
 80020fc:	ab03      	add	r3, sp, #12
 80020fe:	9300      	str	r3, [sp, #0]
 8002100:	462a      	mov	r2, r5
 8002102:	4b09      	ldr	r3, [pc, #36]	; (8002128 <_vfiprintf_r+0x258>)
 8002104:	a904      	add	r1, sp, #16
 8002106:	4630      	mov	r0, r6
 8002108:	f000 f880 	bl	800220c <_printf_i>
 800210c:	e7e4      	b.n	80020d8 <_vfiprintf_r+0x208>
 800210e:	bf00      	nop
 8002110:	0800269c 	.word	0x0800269c
 8002114:	080026bc 	.word	0x080026bc
 8002118:	0800267c 	.word	0x0800267c
 800211c:	080026dc 	.word	0x080026dc
 8002120:	080026e6 	.word	0x080026e6
 8002124:	00000000 	.word	0x00000000
 8002128:	08001eab 	.word	0x08001eab
 800212c:	080026e2 	.word	0x080026e2

08002130 <_printf_common>:
 8002130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002134:	4616      	mov	r6, r2
 8002136:	4699      	mov	r9, r3
 8002138:	688a      	ldr	r2, [r1, #8]
 800213a:	690b      	ldr	r3, [r1, #16]
 800213c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002140:	4293      	cmp	r3, r2
 8002142:	bfb8      	it	lt
 8002144:	4613      	movlt	r3, r2
 8002146:	6033      	str	r3, [r6, #0]
 8002148:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800214c:	4607      	mov	r7, r0
 800214e:	460c      	mov	r4, r1
 8002150:	b10a      	cbz	r2, 8002156 <_printf_common+0x26>
 8002152:	3301      	adds	r3, #1
 8002154:	6033      	str	r3, [r6, #0]
 8002156:	6823      	ldr	r3, [r4, #0]
 8002158:	0699      	lsls	r1, r3, #26
 800215a:	bf42      	ittt	mi
 800215c:	6833      	ldrmi	r3, [r6, #0]
 800215e:	3302      	addmi	r3, #2
 8002160:	6033      	strmi	r3, [r6, #0]
 8002162:	6825      	ldr	r5, [r4, #0]
 8002164:	f015 0506 	ands.w	r5, r5, #6
 8002168:	d106      	bne.n	8002178 <_printf_common+0x48>
 800216a:	f104 0a19 	add.w	sl, r4, #25
 800216e:	68e3      	ldr	r3, [r4, #12]
 8002170:	6832      	ldr	r2, [r6, #0]
 8002172:	1a9b      	subs	r3, r3, r2
 8002174:	42ab      	cmp	r3, r5
 8002176:	dc26      	bgt.n	80021c6 <_printf_common+0x96>
 8002178:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800217c:	1e13      	subs	r3, r2, #0
 800217e:	6822      	ldr	r2, [r4, #0]
 8002180:	bf18      	it	ne
 8002182:	2301      	movne	r3, #1
 8002184:	0692      	lsls	r2, r2, #26
 8002186:	d42b      	bmi.n	80021e0 <_printf_common+0xb0>
 8002188:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800218c:	4649      	mov	r1, r9
 800218e:	4638      	mov	r0, r7
 8002190:	47c0      	blx	r8
 8002192:	3001      	adds	r0, #1
 8002194:	d01e      	beq.n	80021d4 <_printf_common+0xa4>
 8002196:	6823      	ldr	r3, [r4, #0]
 8002198:	68e5      	ldr	r5, [r4, #12]
 800219a:	6832      	ldr	r2, [r6, #0]
 800219c:	f003 0306 	and.w	r3, r3, #6
 80021a0:	2b04      	cmp	r3, #4
 80021a2:	bf08      	it	eq
 80021a4:	1aad      	subeq	r5, r5, r2
 80021a6:	68a3      	ldr	r3, [r4, #8]
 80021a8:	6922      	ldr	r2, [r4, #16]
 80021aa:	bf0c      	ite	eq
 80021ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80021b0:	2500      	movne	r5, #0
 80021b2:	4293      	cmp	r3, r2
 80021b4:	bfc4      	itt	gt
 80021b6:	1a9b      	subgt	r3, r3, r2
 80021b8:	18ed      	addgt	r5, r5, r3
 80021ba:	2600      	movs	r6, #0
 80021bc:	341a      	adds	r4, #26
 80021be:	42b5      	cmp	r5, r6
 80021c0:	d11a      	bne.n	80021f8 <_printf_common+0xc8>
 80021c2:	2000      	movs	r0, #0
 80021c4:	e008      	b.n	80021d8 <_printf_common+0xa8>
 80021c6:	2301      	movs	r3, #1
 80021c8:	4652      	mov	r2, sl
 80021ca:	4649      	mov	r1, r9
 80021cc:	4638      	mov	r0, r7
 80021ce:	47c0      	blx	r8
 80021d0:	3001      	adds	r0, #1
 80021d2:	d103      	bne.n	80021dc <_printf_common+0xac>
 80021d4:	f04f 30ff 	mov.w	r0, #4294967295
 80021d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021dc:	3501      	adds	r5, #1
 80021de:	e7c6      	b.n	800216e <_printf_common+0x3e>
 80021e0:	18e1      	adds	r1, r4, r3
 80021e2:	1c5a      	adds	r2, r3, #1
 80021e4:	2030      	movs	r0, #48	; 0x30
 80021e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80021ea:	4422      	add	r2, r4
 80021ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80021f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80021f4:	3302      	adds	r3, #2
 80021f6:	e7c7      	b.n	8002188 <_printf_common+0x58>
 80021f8:	2301      	movs	r3, #1
 80021fa:	4622      	mov	r2, r4
 80021fc:	4649      	mov	r1, r9
 80021fe:	4638      	mov	r0, r7
 8002200:	47c0      	blx	r8
 8002202:	3001      	adds	r0, #1
 8002204:	d0e6      	beq.n	80021d4 <_printf_common+0xa4>
 8002206:	3601      	adds	r6, #1
 8002208:	e7d9      	b.n	80021be <_printf_common+0x8e>
	...

0800220c <_printf_i>:
 800220c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002210:	460c      	mov	r4, r1
 8002212:	4691      	mov	r9, r2
 8002214:	7e27      	ldrb	r7, [r4, #24]
 8002216:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002218:	2f78      	cmp	r7, #120	; 0x78
 800221a:	4680      	mov	r8, r0
 800221c:	469a      	mov	sl, r3
 800221e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002222:	d807      	bhi.n	8002234 <_printf_i+0x28>
 8002224:	2f62      	cmp	r7, #98	; 0x62
 8002226:	d80a      	bhi.n	800223e <_printf_i+0x32>
 8002228:	2f00      	cmp	r7, #0
 800222a:	f000 80d8 	beq.w	80023de <_printf_i+0x1d2>
 800222e:	2f58      	cmp	r7, #88	; 0x58
 8002230:	f000 80a3 	beq.w	800237a <_printf_i+0x16e>
 8002234:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002238:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800223c:	e03a      	b.n	80022b4 <_printf_i+0xa8>
 800223e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002242:	2b15      	cmp	r3, #21
 8002244:	d8f6      	bhi.n	8002234 <_printf_i+0x28>
 8002246:	a001      	add	r0, pc, #4	; (adr r0, 800224c <_printf_i+0x40>)
 8002248:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800224c:	080022a5 	.word	0x080022a5
 8002250:	080022b9 	.word	0x080022b9
 8002254:	08002235 	.word	0x08002235
 8002258:	08002235 	.word	0x08002235
 800225c:	08002235 	.word	0x08002235
 8002260:	08002235 	.word	0x08002235
 8002264:	080022b9 	.word	0x080022b9
 8002268:	08002235 	.word	0x08002235
 800226c:	08002235 	.word	0x08002235
 8002270:	08002235 	.word	0x08002235
 8002274:	08002235 	.word	0x08002235
 8002278:	080023c5 	.word	0x080023c5
 800227c:	080022e9 	.word	0x080022e9
 8002280:	080023a7 	.word	0x080023a7
 8002284:	08002235 	.word	0x08002235
 8002288:	08002235 	.word	0x08002235
 800228c:	080023e7 	.word	0x080023e7
 8002290:	08002235 	.word	0x08002235
 8002294:	080022e9 	.word	0x080022e9
 8002298:	08002235 	.word	0x08002235
 800229c:	08002235 	.word	0x08002235
 80022a0:	080023af 	.word	0x080023af
 80022a4:	680b      	ldr	r3, [r1, #0]
 80022a6:	1d1a      	adds	r2, r3, #4
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	600a      	str	r2, [r1, #0]
 80022ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80022b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80022b4:	2301      	movs	r3, #1
 80022b6:	e0a3      	b.n	8002400 <_printf_i+0x1f4>
 80022b8:	6825      	ldr	r5, [r4, #0]
 80022ba:	6808      	ldr	r0, [r1, #0]
 80022bc:	062e      	lsls	r6, r5, #24
 80022be:	f100 0304 	add.w	r3, r0, #4
 80022c2:	d50a      	bpl.n	80022da <_printf_i+0xce>
 80022c4:	6805      	ldr	r5, [r0, #0]
 80022c6:	600b      	str	r3, [r1, #0]
 80022c8:	2d00      	cmp	r5, #0
 80022ca:	da03      	bge.n	80022d4 <_printf_i+0xc8>
 80022cc:	232d      	movs	r3, #45	; 0x2d
 80022ce:	426d      	negs	r5, r5
 80022d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80022d4:	485e      	ldr	r0, [pc, #376]	; (8002450 <_printf_i+0x244>)
 80022d6:	230a      	movs	r3, #10
 80022d8:	e019      	b.n	800230e <_printf_i+0x102>
 80022da:	f015 0f40 	tst.w	r5, #64	; 0x40
 80022de:	6805      	ldr	r5, [r0, #0]
 80022e0:	600b      	str	r3, [r1, #0]
 80022e2:	bf18      	it	ne
 80022e4:	b22d      	sxthne	r5, r5
 80022e6:	e7ef      	b.n	80022c8 <_printf_i+0xbc>
 80022e8:	680b      	ldr	r3, [r1, #0]
 80022ea:	6825      	ldr	r5, [r4, #0]
 80022ec:	1d18      	adds	r0, r3, #4
 80022ee:	6008      	str	r0, [r1, #0]
 80022f0:	0628      	lsls	r0, r5, #24
 80022f2:	d501      	bpl.n	80022f8 <_printf_i+0xec>
 80022f4:	681d      	ldr	r5, [r3, #0]
 80022f6:	e002      	b.n	80022fe <_printf_i+0xf2>
 80022f8:	0669      	lsls	r1, r5, #25
 80022fa:	d5fb      	bpl.n	80022f4 <_printf_i+0xe8>
 80022fc:	881d      	ldrh	r5, [r3, #0]
 80022fe:	4854      	ldr	r0, [pc, #336]	; (8002450 <_printf_i+0x244>)
 8002300:	2f6f      	cmp	r7, #111	; 0x6f
 8002302:	bf0c      	ite	eq
 8002304:	2308      	moveq	r3, #8
 8002306:	230a      	movne	r3, #10
 8002308:	2100      	movs	r1, #0
 800230a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800230e:	6866      	ldr	r6, [r4, #4]
 8002310:	60a6      	str	r6, [r4, #8]
 8002312:	2e00      	cmp	r6, #0
 8002314:	bfa2      	ittt	ge
 8002316:	6821      	ldrge	r1, [r4, #0]
 8002318:	f021 0104 	bicge.w	r1, r1, #4
 800231c:	6021      	strge	r1, [r4, #0]
 800231e:	b90d      	cbnz	r5, 8002324 <_printf_i+0x118>
 8002320:	2e00      	cmp	r6, #0
 8002322:	d04d      	beq.n	80023c0 <_printf_i+0x1b4>
 8002324:	4616      	mov	r6, r2
 8002326:	fbb5 f1f3 	udiv	r1, r5, r3
 800232a:	fb03 5711 	mls	r7, r3, r1, r5
 800232e:	5dc7      	ldrb	r7, [r0, r7]
 8002330:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002334:	462f      	mov	r7, r5
 8002336:	42bb      	cmp	r3, r7
 8002338:	460d      	mov	r5, r1
 800233a:	d9f4      	bls.n	8002326 <_printf_i+0x11a>
 800233c:	2b08      	cmp	r3, #8
 800233e:	d10b      	bne.n	8002358 <_printf_i+0x14c>
 8002340:	6823      	ldr	r3, [r4, #0]
 8002342:	07df      	lsls	r7, r3, #31
 8002344:	d508      	bpl.n	8002358 <_printf_i+0x14c>
 8002346:	6923      	ldr	r3, [r4, #16]
 8002348:	6861      	ldr	r1, [r4, #4]
 800234a:	4299      	cmp	r1, r3
 800234c:	bfde      	ittt	le
 800234e:	2330      	movle	r3, #48	; 0x30
 8002350:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002354:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002358:	1b92      	subs	r2, r2, r6
 800235a:	6122      	str	r2, [r4, #16]
 800235c:	f8cd a000 	str.w	sl, [sp]
 8002360:	464b      	mov	r3, r9
 8002362:	aa03      	add	r2, sp, #12
 8002364:	4621      	mov	r1, r4
 8002366:	4640      	mov	r0, r8
 8002368:	f7ff fee2 	bl	8002130 <_printf_common>
 800236c:	3001      	adds	r0, #1
 800236e:	d14c      	bne.n	800240a <_printf_i+0x1fe>
 8002370:	f04f 30ff 	mov.w	r0, #4294967295
 8002374:	b004      	add	sp, #16
 8002376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800237a:	4835      	ldr	r0, [pc, #212]	; (8002450 <_printf_i+0x244>)
 800237c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002380:	6823      	ldr	r3, [r4, #0]
 8002382:	680e      	ldr	r6, [r1, #0]
 8002384:	061f      	lsls	r7, r3, #24
 8002386:	f856 5b04 	ldr.w	r5, [r6], #4
 800238a:	600e      	str	r6, [r1, #0]
 800238c:	d514      	bpl.n	80023b8 <_printf_i+0x1ac>
 800238e:	07d9      	lsls	r1, r3, #31
 8002390:	bf44      	itt	mi
 8002392:	f043 0320 	orrmi.w	r3, r3, #32
 8002396:	6023      	strmi	r3, [r4, #0]
 8002398:	b91d      	cbnz	r5, 80023a2 <_printf_i+0x196>
 800239a:	6823      	ldr	r3, [r4, #0]
 800239c:	f023 0320 	bic.w	r3, r3, #32
 80023a0:	6023      	str	r3, [r4, #0]
 80023a2:	2310      	movs	r3, #16
 80023a4:	e7b0      	b.n	8002308 <_printf_i+0xfc>
 80023a6:	6823      	ldr	r3, [r4, #0]
 80023a8:	f043 0320 	orr.w	r3, r3, #32
 80023ac:	6023      	str	r3, [r4, #0]
 80023ae:	2378      	movs	r3, #120	; 0x78
 80023b0:	4828      	ldr	r0, [pc, #160]	; (8002454 <_printf_i+0x248>)
 80023b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80023b6:	e7e3      	b.n	8002380 <_printf_i+0x174>
 80023b8:	065e      	lsls	r6, r3, #25
 80023ba:	bf48      	it	mi
 80023bc:	b2ad      	uxthmi	r5, r5
 80023be:	e7e6      	b.n	800238e <_printf_i+0x182>
 80023c0:	4616      	mov	r6, r2
 80023c2:	e7bb      	b.n	800233c <_printf_i+0x130>
 80023c4:	680b      	ldr	r3, [r1, #0]
 80023c6:	6826      	ldr	r6, [r4, #0]
 80023c8:	6960      	ldr	r0, [r4, #20]
 80023ca:	1d1d      	adds	r5, r3, #4
 80023cc:	600d      	str	r5, [r1, #0]
 80023ce:	0635      	lsls	r5, r6, #24
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	d501      	bpl.n	80023d8 <_printf_i+0x1cc>
 80023d4:	6018      	str	r0, [r3, #0]
 80023d6:	e002      	b.n	80023de <_printf_i+0x1d2>
 80023d8:	0671      	lsls	r1, r6, #25
 80023da:	d5fb      	bpl.n	80023d4 <_printf_i+0x1c8>
 80023dc:	8018      	strh	r0, [r3, #0]
 80023de:	2300      	movs	r3, #0
 80023e0:	6123      	str	r3, [r4, #16]
 80023e2:	4616      	mov	r6, r2
 80023e4:	e7ba      	b.n	800235c <_printf_i+0x150>
 80023e6:	680b      	ldr	r3, [r1, #0]
 80023e8:	1d1a      	adds	r2, r3, #4
 80023ea:	600a      	str	r2, [r1, #0]
 80023ec:	681e      	ldr	r6, [r3, #0]
 80023ee:	6862      	ldr	r2, [r4, #4]
 80023f0:	2100      	movs	r1, #0
 80023f2:	4630      	mov	r0, r6
 80023f4:	f7fd ff04 	bl	8000200 <memchr>
 80023f8:	b108      	cbz	r0, 80023fe <_printf_i+0x1f2>
 80023fa:	1b80      	subs	r0, r0, r6
 80023fc:	6060      	str	r0, [r4, #4]
 80023fe:	6863      	ldr	r3, [r4, #4]
 8002400:	6123      	str	r3, [r4, #16]
 8002402:	2300      	movs	r3, #0
 8002404:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002408:	e7a8      	b.n	800235c <_printf_i+0x150>
 800240a:	6923      	ldr	r3, [r4, #16]
 800240c:	4632      	mov	r2, r6
 800240e:	4649      	mov	r1, r9
 8002410:	4640      	mov	r0, r8
 8002412:	47d0      	blx	sl
 8002414:	3001      	adds	r0, #1
 8002416:	d0ab      	beq.n	8002370 <_printf_i+0x164>
 8002418:	6823      	ldr	r3, [r4, #0]
 800241a:	079b      	lsls	r3, r3, #30
 800241c:	d413      	bmi.n	8002446 <_printf_i+0x23a>
 800241e:	68e0      	ldr	r0, [r4, #12]
 8002420:	9b03      	ldr	r3, [sp, #12]
 8002422:	4298      	cmp	r0, r3
 8002424:	bfb8      	it	lt
 8002426:	4618      	movlt	r0, r3
 8002428:	e7a4      	b.n	8002374 <_printf_i+0x168>
 800242a:	2301      	movs	r3, #1
 800242c:	4632      	mov	r2, r6
 800242e:	4649      	mov	r1, r9
 8002430:	4640      	mov	r0, r8
 8002432:	47d0      	blx	sl
 8002434:	3001      	adds	r0, #1
 8002436:	d09b      	beq.n	8002370 <_printf_i+0x164>
 8002438:	3501      	adds	r5, #1
 800243a:	68e3      	ldr	r3, [r4, #12]
 800243c:	9903      	ldr	r1, [sp, #12]
 800243e:	1a5b      	subs	r3, r3, r1
 8002440:	42ab      	cmp	r3, r5
 8002442:	dcf2      	bgt.n	800242a <_printf_i+0x21e>
 8002444:	e7eb      	b.n	800241e <_printf_i+0x212>
 8002446:	2500      	movs	r5, #0
 8002448:	f104 0619 	add.w	r6, r4, #25
 800244c:	e7f5      	b.n	800243a <_printf_i+0x22e>
 800244e:	bf00      	nop
 8002450:	080026ed 	.word	0x080026ed
 8002454:	080026fe 	.word	0x080026fe

08002458 <_sbrk_r>:
 8002458:	b538      	push	{r3, r4, r5, lr}
 800245a:	4d06      	ldr	r5, [pc, #24]	; (8002474 <_sbrk_r+0x1c>)
 800245c:	2300      	movs	r3, #0
 800245e:	4604      	mov	r4, r0
 8002460:	4608      	mov	r0, r1
 8002462:	602b      	str	r3, [r5, #0]
 8002464:	f7fe f8ac 	bl	80005c0 <_sbrk>
 8002468:	1c43      	adds	r3, r0, #1
 800246a:	d102      	bne.n	8002472 <_sbrk_r+0x1a>
 800246c:	682b      	ldr	r3, [r5, #0]
 800246e:	b103      	cbz	r3, 8002472 <_sbrk_r+0x1a>
 8002470:	6023      	str	r3, [r4, #0]
 8002472:	bd38      	pop	{r3, r4, r5, pc}
 8002474:	200004e4 	.word	0x200004e4

08002478 <__sread>:
 8002478:	b510      	push	{r4, lr}
 800247a:	460c      	mov	r4, r1
 800247c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002480:	f000 f8a0 	bl	80025c4 <_read_r>
 8002484:	2800      	cmp	r0, #0
 8002486:	bfab      	itete	ge
 8002488:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800248a:	89a3      	ldrhlt	r3, [r4, #12]
 800248c:	181b      	addge	r3, r3, r0
 800248e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002492:	bfac      	ite	ge
 8002494:	6563      	strge	r3, [r4, #84]	; 0x54
 8002496:	81a3      	strhlt	r3, [r4, #12]
 8002498:	bd10      	pop	{r4, pc}

0800249a <__swrite>:
 800249a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800249e:	461f      	mov	r7, r3
 80024a0:	898b      	ldrh	r3, [r1, #12]
 80024a2:	05db      	lsls	r3, r3, #23
 80024a4:	4605      	mov	r5, r0
 80024a6:	460c      	mov	r4, r1
 80024a8:	4616      	mov	r6, r2
 80024aa:	d505      	bpl.n	80024b8 <__swrite+0x1e>
 80024ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024b0:	2302      	movs	r3, #2
 80024b2:	2200      	movs	r2, #0
 80024b4:	f000 f868 	bl	8002588 <_lseek_r>
 80024b8:	89a3      	ldrh	r3, [r4, #12]
 80024ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80024be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80024c2:	81a3      	strh	r3, [r4, #12]
 80024c4:	4632      	mov	r2, r6
 80024c6:	463b      	mov	r3, r7
 80024c8:	4628      	mov	r0, r5
 80024ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80024ce:	f000 b817 	b.w	8002500 <_write_r>

080024d2 <__sseek>:
 80024d2:	b510      	push	{r4, lr}
 80024d4:	460c      	mov	r4, r1
 80024d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024da:	f000 f855 	bl	8002588 <_lseek_r>
 80024de:	1c43      	adds	r3, r0, #1
 80024e0:	89a3      	ldrh	r3, [r4, #12]
 80024e2:	bf15      	itete	ne
 80024e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80024e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80024ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80024ee:	81a3      	strheq	r3, [r4, #12]
 80024f0:	bf18      	it	ne
 80024f2:	81a3      	strhne	r3, [r4, #12]
 80024f4:	bd10      	pop	{r4, pc}

080024f6 <__sclose>:
 80024f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024fa:	f000 b813 	b.w	8002524 <_close_r>
	...

08002500 <_write_r>:
 8002500:	b538      	push	{r3, r4, r5, lr}
 8002502:	4d07      	ldr	r5, [pc, #28]	; (8002520 <_write_r+0x20>)
 8002504:	4604      	mov	r4, r0
 8002506:	4608      	mov	r0, r1
 8002508:	4611      	mov	r1, r2
 800250a:	2200      	movs	r2, #0
 800250c:	602a      	str	r2, [r5, #0]
 800250e:	461a      	mov	r2, r3
 8002510:	f7fe f805 	bl	800051e <_write>
 8002514:	1c43      	adds	r3, r0, #1
 8002516:	d102      	bne.n	800251e <_write_r+0x1e>
 8002518:	682b      	ldr	r3, [r5, #0]
 800251a:	b103      	cbz	r3, 800251e <_write_r+0x1e>
 800251c:	6023      	str	r3, [r4, #0]
 800251e:	bd38      	pop	{r3, r4, r5, pc}
 8002520:	200004e4 	.word	0x200004e4

08002524 <_close_r>:
 8002524:	b538      	push	{r3, r4, r5, lr}
 8002526:	4d06      	ldr	r5, [pc, #24]	; (8002540 <_close_r+0x1c>)
 8002528:	2300      	movs	r3, #0
 800252a:	4604      	mov	r4, r0
 800252c:	4608      	mov	r0, r1
 800252e:	602b      	str	r3, [r5, #0]
 8002530:	f7fe f811 	bl	8000556 <_close>
 8002534:	1c43      	adds	r3, r0, #1
 8002536:	d102      	bne.n	800253e <_close_r+0x1a>
 8002538:	682b      	ldr	r3, [r5, #0]
 800253a:	b103      	cbz	r3, 800253e <_close_r+0x1a>
 800253c:	6023      	str	r3, [r4, #0]
 800253e:	bd38      	pop	{r3, r4, r5, pc}
 8002540:	200004e4 	.word	0x200004e4

08002544 <_fstat_r>:
 8002544:	b538      	push	{r3, r4, r5, lr}
 8002546:	4d07      	ldr	r5, [pc, #28]	; (8002564 <_fstat_r+0x20>)
 8002548:	2300      	movs	r3, #0
 800254a:	4604      	mov	r4, r0
 800254c:	4608      	mov	r0, r1
 800254e:	4611      	mov	r1, r2
 8002550:	602b      	str	r3, [r5, #0]
 8002552:	f7fe f80c 	bl	800056e <_fstat>
 8002556:	1c43      	adds	r3, r0, #1
 8002558:	d102      	bne.n	8002560 <_fstat_r+0x1c>
 800255a:	682b      	ldr	r3, [r5, #0]
 800255c:	b103      	cbz	r3, 8002560 <_fstat_r+0x1c>
 800255e:	6023      	str	r3, [r4, #0]
 8002560:	bd38      	pop	{r3, r4, r5, pc}
 8002562:	bf00      	nop
 8002564:	200004e4 	.word	0x200004e4

08002568 <_isatty_r>:
 8002568:	b538      	push	{r3, r4, r5, lr}
 800256a:	4d06      	ldr	r5, [pc, #24]	; (8002584 <_isatty_r+0x1c>)
 800256c:	2300      	movs	r3, #0
 800256e:	4604      	mov	r4, r0
 8002570:	4608      	mov	r0, r1
 8002572:	602b      	str	r3, [r5, #0]
 8002574:	f7fe f80b 	bl	800058e <_isatty>
 8002578:	1c43      	adds	r3, r0, #1
 800257a:	d102      	bne.n	8002582 <_isatty_r+0x1a>
 800257c:	682b      	ldr	r3, [r5, #0]
 800257e:	b103      	cbz	r3, 8002582 <_isatty_r+0x1a>
 8002580:	6023      	str	r3, [r4, #0]
 8002582:	bd38      	pop	{r3, r4, r5, pc}
 8002584:	200004e4 	.word	0x200004e4

08002588 <_lseek_r>:
 8002588:	b538      	push	{r3, r4, r5, lr}
 800258a:	4d07      	ldr	r5, [pc, #28]	; (80025a8 <_lseek_r+0x20>)
 800258c:	4604      	mov	r4, r0
 800258e:	4608      	mov	r0, r1
 8002590:	4611      	mov	r1, r2
 8002592:	2200      	movs	r2, #0
 8002594:	602a      	str	r2, [r5, #0]
 8002596:	461a      	mov	r2, r3
 8002598:	f7fe f804 	bl	80005a4 <_lseek>
 800259c:	1c43      	adds	r3, r0, #1
 800259e:	d102      	bne.n	80025a6 <_lseek_r+0x1e>
 80025a0:	682b      	ldr	r3, [r5, #0]
 80025a2:	b103      	cbz	r3, 80025a6 <_lseek_r+0x1e>
 80025a4:	6023      	str	r3, [r4, #0]
 80025a6:	bd38      	pop	{r3, r4, r5, pc}
 80025a8:	200004e4 	.word	0x200004e4

080025ac <__malloc_lock>:
 80025ac:	4801      	ldr	r0, [pc, #4]	; (80025b4 <__malloc_lock+0x8>)
 80025ae:	f7ff bb55 	b.w	8001c5c <__retarget_lock_acquire_recursive>
 80025b2:	bf00      	nop
 80025b4:	200004dc 	.word	0x200004dc

080025b8 <__malloc_unlock>:
 80025b8:	4801      	ldr	r0, [pc, #4]	; (80025c0 <__malloc_unlock+0x8>)
 80025ba:	f7ff bb50 	b.w	8001c5e <__retarget_lock_release_recursive>
 80025be:	bf00      	nop
 80025c0:	200004dc 	.word	0x200004dc

080025c4 <_read_r>:
 80025c4:	b538      	push	{r3, r4, r5, lr}
 80025c6:	4d07      	ldr	r5, [pc, #28]	; (80025e4 <_read_r+0x20>)
 80025c8:	4604      	mov	r4, r0
 80025ca:	4608      	mov	r0, r1
 80025cc:	4611      	mov	r1, r2
 80025ce:	2200      	movs	r2, #0
 80025d0:	602a      	str	r2, [r5, #0]
 80025d2:	461a      	mov	r2, r3
 80025d4:	f7fd ff86 	bl	80004e4 <_read>
 80025d8:	1c43      	adds	r3, r0, #1
 80025da:	d102      	bne.n	80025e2 <_read_r+0x1e>
 80025dc:	682b      	ldr	r3, [r5, #0]
 80025de:	b103      	cbz	r3, 80025e2 <_read_r+0x1e>
 80025e0:	6023      	str	r3, [r4, #0]
 80025e2:	bd38      	pop	{r3, r4, r5, pc}
 80025e4:	200004e4 	.word	0x200004e4

080025e8 <_init>:
 80025e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ea:	bf00      	nop
 80025ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025ee:	bc08      	pop	{r3}
 80025f0:	469e      	mov	lr, r3
 80025f2:	4770      	bx	lr

080025f4 <_fini>:
 80025f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025f6:	bf00      	nop
 80025f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025fa:	bc08      	pop	{r3}
 80025fc:	469e      	mov	lr, r3
 80025fe:	4770      	bx	lr
