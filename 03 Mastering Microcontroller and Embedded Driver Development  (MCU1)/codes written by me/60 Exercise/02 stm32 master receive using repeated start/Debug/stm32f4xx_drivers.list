
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ed0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08002080  08002080  00012080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002128  08002128  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08002128  08002128  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002128  08002128  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002128  08002128  00012128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800212c  0800212c  0001212c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08002130  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00000064  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000e0  200000e0  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003709  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000a1c  00000000  00000000  000237b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000250  00000000  00000000  000241d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000001f8  00000000  00000000  00024428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000376c  00000000  00000000  00024620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000027ef  00000000  00000000  00027d8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000c5c1  00000000  00000000  0002a57b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00036b3c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001060  00000000  00000000  00036b90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002068 	.word	0x08002068

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000080 	.word	0x20000080
 80001ec:	08002068 	.word	0x08002068

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <delay>:

#define MY_ADDR			0x61
#define SLAVE_ADDR		0x68

void delay(void)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i++);
 8000296:	2300      	movs	r3, #0
 8000298:	607b      	str	r3, [r7, #4]
 800029a:	e002      	b.n	80002a2 <delay+0x12>
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	3301      	adds	r3, #1
 80002a0:	607b      	str	r3, [r7, #4]
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	4a04      	ldr	r2, [pc, #16]	; (80002b8 <delay+0x28>)
 80002a6:	4293      	cmp	r3, r2
 80002a8:	d9f8      	bls.n	800029c <delay+0xc>
}
 80002aa:	bf00      	nop
 80002ac:	bf00      	nop
 80002ae:	370c      	adds	r7, #12
 80002b0:	46bd      	mov	sp, r7
 80002b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b6:	4770      	bx	lr
 80002b8:	0003d08f 	.word	0x0003d08f

080002bc <I2C1_GPIOInits>:
 * PB7 --> SDA
 * ALT function mode : 4
 */

void I2C1_GPIOInits(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CPins;

	I2CPins.pGPIOx = GPIOB;
 80002c2:	4b0e      	ldr	r3, [pc, #56]	; (80002fc <I2C1_GPIOInits+0x40>)
 80002c4:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80002c6:	2302      	movs	r3, #2
 80002c8:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OP;
 80002ca:	2301      	movs	r3, #1
 80002cc:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 80002ce:	2301      	movs	r3, #1
 80002d0:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 80002d2:	2304      	movs	r3, #4
 80002d4:	737b      	strb	r3, [r7, #13]
	I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002d6:	2302      	movs	r3, #2
 80002d8:	72bb      	strb	r3, [r7, #10]

	// scl
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 80002da:	2306      	movs	r3, #6
 80002dc:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	4618      	mov	r0, r3
 80002e2:	f000 fd8b 	bl	8000dfc <GPIO_Init>

	// sda
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 80002e6:	2307      	movs	r3, #7
 80002e8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	4618      	mov	r0, r3
 80002ee:	f000 fd85 	bl	8000dfc <GPIO_Init>


}
 80002f2:	bf00      	nop
 80002f4:	3710      	adds	r7, #16
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	40020400 	.word	0x40020400

08000300 <I2C1_Inits>:

void I2C1_Inits(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	I2C1Handle.pI2Cx = I2C1;
 8000304:	4b09      	ldr	r3, [pc, #36]	; (800032c <I2C1_Inits+0x2c>)
 8000306:	4a0a      	ldr	r2, [pc, #40]	; (8000330 <I2C1_Inits+0x30>)
 8000308:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 800030a:	4b08      	ldr	r3, [pc, #32]	; (800032c <I2C1_Inits+0x2c>)
 800030c:	2201      	movs	r2, #1
 800030e:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
 8000310:	4b06      	ldr	r3, [pc, #24]	; (800032c <I2C1_Inits+0x2c>)
 8000312:	2261      	movs	r2, #97	; 0x61
 8000314:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 8000316:	4b05      	ldr	r3, [pc, #20]	; (800032c <I2C1_Inits+0x2c>)
 8000318:	2200      	movs	r2, #0
 800031a:	815a      	strh	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 800031c:	4b03      	ldr	r3, [pc, #12]	; (800032c <I2C1_Inits+0x2c>)
 800031e:	4a05      	ldr	r2, [pc, #20]	; (8000334 <I2C1_Inits+0x34>)
 8000320:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 8000322:	4802      	ldr	r0, [pc, #8]	; (800032c <I2C1_Inits+0x2c>)
 8000324:	f000 fa38 	bl	8000798 <I2C_Init>
}
 8000328:	bf00      	nop
 800032a:	bd80      	pop	{r7, pc}
 800032c:	200000a4 	.word	0x200000a4
 8000330:	40005400 	.word	0x40005400
 8000334:	000186a0 	.word	0x000186a0

08000338 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b086      	sub	sp, #24
 800033c:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn, GpioLed;

	// this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOA;
 800033e:	4b14      	ldr	r3, [pc, #80]	; (8000390 <GPIO_ButtonInit+0x58>)
 8000340:	60fb      	str	r3, [r7, #12]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8000342:	2300      	movs	r3, #0
 8000344:	743b      	strb	r3, [r7, #16]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000346:	2300      	movs	r3, #0
 8000348:	747b      	strb	r3, [r7, #17]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800034a:	2302      	movs	r3, #2
 800034c:	74bb      	strb	r3, [r7, #18]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800034e:	2300      	movs	r3, #0
 8000350:	74fb      	strb	r3, [r7, #19]

	GPIO_PeripheralClockControl(GPIOA, ENABLE);
 8000352:	2101      	movs	r1, #1
 8000354:	480e      	ldr	r0, [pc, #56]	; (8000390 <GPIO_ButtonInit+0x58>)
 8000356:	f000 fc69 	bl	8000c2c <GPIO_PeripheralClockControl>
	GPIO_Init(&GPIOBtn);
 800035a:	f107 030c 	add.w	r3, r7, #12
 800035e:	4618      	mov	r0, r3
 8000360:	f000 fd4c 	bl	8000dfc <GPIO_Init>

	// this is led gpio configuration
	GpioLed.pGPIOx = GPIOD;
 8000364:	4b0b      	ldr	r3, [pc, #44]	; (8000394 <GPIO_ButtonInit+0x5c>)
 8000366:	603b      	str	r3, [r7, #0]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000368:	230c      	movs	r3, #12
 800036a:	713b      	strb	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 800036c:	2301      	movs	r3, #1
 800036e:	717b      	strb	r3, [r7, #5]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000370:	2302      	movs	r3, #2
 8000372:	71bb      	strb	r3, [r7, #6]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000374:	2300      	movs	r3, #0
 8000376:	71fb      	strb	r3, [r7, #7]

	GPIO_PeripheralClockControl(GPIOD, ENABLE);
 8000378:	2101      	movs	r1, #1
 800037a:	4806      	ldr	r0, [pc, #24]	; (8000394 <GPIO_ButtonInit+0x5c>)
 800037c:	f000 fc56 	bl	8000c2c <GPIO_PeripheralClockControl>
	GPIO_Init(&GpioLed);
 8000380:	463b      	mov	r3, r7
 8000382:	4618      	mov	r0, r3
 8000384:	f000 fd3a 	bl	8000dfc <GPIO_Init>
}
 8000388:	bf00      	nop
 800038a:	3718      	adds	r7, #24
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	40020000 	.word	0x40020000
 8000394:	40020c00 	.word	0x40020c00

08000398 <main>:

int main(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b084      	sub	sp, #16
 800039c:	af02      	add	r7, sp, #8
	uint8_t commandcode;
	uint8_t len;

	//initiate button
	GPIO_ButtonInit();
 800039e:	f7ff ffcb 	bl	8000338 <GPIO_ButtonInit>

	// i2c pin inits
	I2C1_GPIOInits();
 80003a2:	f7ff ff8b 	bl	80002bc <I2C1_GPIOInits>

	//i2c peripheral configuration
	I2C1_Inits();
 80003a6:	f7ff ffab 	bl	8000300 <I2C1_Inits>

	//enable the peripheral
	I2C_PeripheralControl(I2C1, ENABLE);
 80003aa:	2101      	movs	r1, #1
 80003ac:	481c      	ldr	r0, [pc, #112]	; (8000420 <main+0x88>)
 80003ae:	f000 fbf0 	bl	8000b92 <I2C_PeripheralControl>

	//ack bit is made 1 after PE=1
	I2C_ManageAcking(I2C1, I2C_ACK_ENABLE);
 80003b2:	2101      	movs	r1, #1
 80003b4:	481a      	ldr	r0, [pc, #104]	; (8000420 <main+0x88>)
 80003b6:	f000 fc1c 	bl	8000bf2 <I2C_ManageAcking>

	while(1)
	{

		// wait for button pressed
		while(! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 80003ba:	bf00      	nop
 80003bc:	2100      	movs	r1, #0
 80003be:	4819      	ldr	r0, [pc, #100]	; (8000424 <main+0x8c>)
 80003c0:	f000 feb4 	bl	800112c <GPIO_ReadFromInputPin>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d0f8      	beq.n	80003bc <main+0x24>

		// to avoid button de-bouncing related issues 200ms of delay
		delay();
 80003ca:	f7ff ff61 	bl	8000290 <delay>

		commandcode = 0x51;
 80003ce:	2351      	movs	r3, #81	; 0x51
 80003d0:	71fb      	strb	r3, [r7, #7]

		I2C_MAsterSendData(&I2C1Handle, &commandcode, 1, SLAVE_ADDR, I2C_ENABLE_SR);
 80003d2:	1df9      	adds	r1, r7, #7
 80003d4:	2301      	movs	r3, #1
 80003d6:	9300      	str	r3, [sp, #0]
 80003d8:	2368      	movs	r3, #104	; 0x68
 80003da:	2201      	movs	r2, #1
 80003dc:	4812      	ldr	r0, [pc, #72]	; (8000428 <main+0x90>)
 80003de:	f000 fa7d 	bl	80008dc <I2C_MAsterSendData>

		I2C_MasterReceiveData(&I2C1Handle, &len, 1, SLAVE_ADDR, I2C_ENABLE_SR);
 80003e2:	1db9      	adds	r1, r7, #6
 80003e4:	2301      	movs	r3, #1
 80003e6:	9300      	str	r3, [sp, #0]
 80003e8:	2368      	movs	r3, #104	; 0x68
 80003ea:	2201      	movs	r2, #1
 80003ec:	480e      	ldr	r0, [pc, #56]	; (8000428 <main+0x90>)
 80003ee:	f000 fb3a 	bl	8000a66 <I2C_MasterReceiveData>


		commandcode = 0x52;
 80003f2:	2352      	movs	r3, #82	; 0x52
 80003f4:	71fb      	strb	r3, [r7, #7]

		I2C_MAsterSendData(&I2C1Handle, &commandcode, 1, SLAVE_ADDR, I2C_ENABLE_SR);
 80003f6:	1df9      	adds	r1, r7, #7
 80003f8:	2301      	movs	r3, #1
 80003fa:	9300      	str	r3, [sp, #0]
 80003fc:	2368      	movs	r3, #104	; 0x68
 80003fe:	2201      	movs	r2, #1
 8000400:	4809      	ldr	r0, [pc, #36]	; (8000428 <main+0x90>)
 8000402:	f000 fa6b 	bl	80008dc <I2C_MAsterSendData>

		I2C_MasterReceiveData(&I2C1Handle, rcv_buf, len, SLAVE_ADDR, I2C_DISABLE_SR);
 8000406:	79ba      	ldrb	r2, [r7, #6]
 8000408:	2300      	movs	r3, #0
 800040a:	9300      	str	r3, [sp, #0]
 800040c:	2368      	movs	r3, #104	; 0x68
 800040e:	4907      	ldr	r1, [pc, #28]	; (800042c <main+0x94>)
 8000410:	4805      	ldr	r0, [pc, #20]	; (8000428 <main+0x90>)
 8000412:	f000 fb28 	bl	8000a66 <I2C_MasterReceiveData>

		printf("received : %s",rcv_buf);
 8000416:	4905      	ldr	r1, [pc, #20]	; (800042c <main+0x94>)
 8000418:	4805      	ldr	r0, [pc, #20]	; (8000430 <main+0x98>)
 800041a:	f000 fecf 	bl	80011bc <iprintf>
		while(! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 800041e:	e7cc      	b.n	80003ba <main+0x22>
 8000420:	40005400 	.word	0x40005400
 8000424:	40020000 	.word	0x40020000
 8000428:	200000a4 	.word	0x200000a4
 800042c:	200000b0 	.word	0x200000b0
 8000430:	08002080 	.word	0x08002080

08000434 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000434:	b480      	push	{r7}
 8000436:	b083      	sub	sp, #12
 8000438:	af00      	add	r7, sp, #0
 800043a:	4603      	mov	r3, r0
 800043c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800043e:	4b0f      	ldr	r3, [pc, #60]	; (800047c <ITM_SendChar+0x48>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	4a0e      	ldr	r2, [pc, #56]	; (800047c <ITM_SendChar+0x48>)
 8000444:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000448:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800044a:	4b0d      	ldr	r3, [pc, #52]	; (8000480 <ITM_SendChar+0x4c>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	4a0c      	ldr	r2, [pc, #48]	; (8000480 <ITM_SendChar+0x4c>)
 8000450:	f043 0301 	orr.w	r3, r3, #1
 8000454:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000456:	bf00      	nop
 8000458:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	f003 0301 	and.w	r3, r3, #1
 8000462:	2b00      	cmp	r3, #0
 8000464:	d0f8      	beq.n	8000458 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000466:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800046a:	79fb      	ldrb	r3, [r7, #7]
 800046c:	6013      	str	r3, [r2, #0]
}
 800046e:	bf00      	nop
 8000470:	370c      	adds	r7, #12
 8000472:	46bd      	mov	sp, r7
 8000474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop
 800047c:	e000edfc 	.word	0xe000edfc
 8000480:	e0000e00 	.word	0xe0000e00

08000484 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b086      	sub	sp, #24
 8000488:	af00      	add	r7, sp, #0
 800048a:	60f8      	str	r0, [r7, #12]
 800048c:	60b9      	str	r1, [r7, #8]
 800048e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000490:	2300      	movs	r3, #0
 8000492:	617b      	str	r3, [r7, #20]
 8000494:	e00a      	b.n	80004ac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000496:	f3af 8000 	nop.w
 800049a:	4601      	mov	r1, r0
 800049c:	68bb      	ldr	r3, [r7, #8]
 800049e:	1c5a      	adds	r2, r3, #1
 80004a0:	60ba      	str	r2, [r7, #8]
 80004a2:	b2ca      	uxtb	r2, r1
 80004a4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004a6:	697b      	ldr	r3, [r7, #20]
 80004a8:	3301      	adds	r3, #1
 80004aa:	617b      	str	r3, [r7, #20]
 80004ac:	697a      	ldr	r2, [r7, #20]
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	429a      	cmp	r2, r3
 80004b2:	dbf0      	blt.n	8000496 <_read+0x12>
	}

return len;
 80004b4:	687b      	ldr	r3, [r7, #4]
}
 80004b6:	4618      	mov	r0, r3
 80004b8:	3718      	adds	r7, #24
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}

080004be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80004be:	b580      	push	{r7, lr}
 80004c0:	b086      	sub	sp, #24
 80004c2:	af00      	add	r7, sp, #0
 80004c4:	60f8      	str	r0, [r7, #12]
 80004c6:	60b9      	str	r1, [r7, #8]
 80004c8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004ca:	2300      	movs	r3, #0
 80004cc:	617b      	str	r3, [r7, #20]
 80004ce:	e009      	b.n	80004e4 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80004d0:	68bb      	ldr	r3, [r7, #8]
 80004d2:	1c5a      	adds	r2, r3, #1
 80004d4:	60ba      	str	r2, [r7, #8]
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	4618      	mov	r0, r3
 80004da:	f7ff ffab 	bl	8000434 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004de:	697b      	ldr	r3, [r7, #20]
 80004e0:	3301      	adds	r3, #1
 80004e2:	617b      	str	r3, [r7, #20]
 80004e4:	697a      	ldr	r2, [r7, #20]
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	429a      	cmp	r2, r3
 80004ea:	dbf1      	blt.n	80004d0 <_write+0x12>
	}
	return len;
 80004ec:	687b      	ldr	r3, [r7, #4]
}
 80004ee:	4618      	mov	r0, r3
 80004f0:	3718      	adds	r7, #24
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}

080004f6 <_close>:

int _close(int file)
{
 80004f6:	b480      	push	{r7}
 80004f8:	b083      	sub	sp, #12
 80004fa:	af00      	add	r7, sp, #0
 80004fc:	6078      	str	r0, [r7, #4]
	return -1;
 80004fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000502:	4618      	mov	r0, r3
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr

0800050e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800050e:	b480      	push	{r7}
 8000510:	b083      	sub	sp, #12
 8000512:	af00      	add	r7, sp, #0
 8000514:	6078      	str	r0, [r7, #4]
 8000516:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000518:	683b      	ldr	r3, [r7, #0]
 800051a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800051e:	605a      	str	r2, [r3, #4]
	return 0;
 8000520:	2300      	movs	r3, #0
}
 8000522:	4618      	mov	r0, r3
 8000524:	370c      	adds	r7, #12
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr

0800052e <_isatty>:

int _isatty(int file)
{
 800052e:	b480      	push	{r7}
 8000530:	b083      	sub	sp, #12
 8000532:	af00      	add	r7, sp, #0
 8000534:	6078      	str	r0, [r7, #4]
	return 1;
 8000536:	2301      	movs	r3, #1
}
 8000538:	4618      	mov	r0, r3
 800053a:	370c      	adds	r7, #12
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr

08000544 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000544:	b480      	push	{r7}
 8000546:	b085      	sub	sp, #20
 8000548:	af00      	add	r7, sp, #0
 800054a:	60f8      	str	r0, [r7, #12]
 800054c:	60b9      	str	r1, [r7, #8]
 800054e:	607a      	str	r2, [r7, #4]
	return 0;
 8000550:	2300      	movs	r3, #0
}
 8000552:	4618      	mov	r0, r3
 8000554:	3714      	adds	r7, #20
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
	...

08000560 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b086      	sub	sp, #24
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000568:	4a14      	ldr	r2, [pc, #80]	; (80005bc <_sbrk+0x5c>)
 800056a:	4b15      	ldr	r3, [pc, #84]	; (80005c0 <_sbrk+0x60>)
 800056c:	1ad3      	subs	r3, r2, r3
 800056e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000570:	697b      	ldr	r3, [r7, #20]
 8000572:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000574:	4b13      	ldr	r3, [pc, #76]	; (80005c4 <_sbrk+0x64>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d102      	bne.n	8000582 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800057c:	4b11      	ldr	r3, [pc, #68]	; (80005c4 <_sbrk+0x64>)
 800057e:	4a12      	ldr	r2, [pc, #72]	; (80005c8 <_sbrk+0x68>)
 8000580:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000582:	4b10      	ldr	r3, [pc, #64]	; (80005c4 <_sbrk+0x64>)
 8000584:	681a      	ldr	r2, [r3, #0]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	4413      	add	r3, r2
 800058a:	693a      	ldr	r2, [r7, #16]
 800058c:	429a      	cmp	r2, r3
 800058e:	d207      	bcs.n	80005a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000590:	f000 fde2 	bl	8001158 <__errno>
 8000594:	4603      	mov	r3, r0
 8000596:	220c      	movs	r2, #12
 8000598:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800059a:	f04f 33ff 	mov.w	r3, #4294967295
 800059e:	e009      	b.n	80005b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005a0:	4b08      	ldr	r3, [pc, #32]	; (80005c4 <_sbrk+0x64>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005a6:	4b07      	ldr	r3, [pc, #28]	; (80005c4 <_sbrk+0x64>)
 80005a8:	681a      	ldr	r2, [r3, #0]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4413      	add	r3, r2
 80005ae:	4a05      	ldr	r2, [pc, #20]	; (80005c4 <_sbrk+0x64>)
 80005b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005b2:	68fb      	ldr	r3, [r7, #12]
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3718      	adds	r7, #24
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	20020000 	.word	0x20020000
 80005c0:	00000400 	.word	0x00000400
 80005c4:	20000098 	.word	0x20000098
 80005c8:	200000e0 	.word	0x200000e0

080005cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005cc:	480d      	ldr	r0, [pc, #52]	; (8000604 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005ce:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80005d0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005d4:	480c      	ldr	r0, [pc, #48]	; (8000608 <LoopForever+0x6>)
  ldr r1, =_edata
 80005d6:	490d      	ldr	r1, [pc, #52]	; (800060c <LoopForever+0xa>)
  ldr r2, =_sidata
 80005d8:	4a0d      	ldr	r2, [pc, #52]	; (8000610 <LoopForever+0xe>)
  movs r3, #0
 80005da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005dc:	e002      	b.n	80005e4 <LoopCopyDataInit>

080005de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005e2:	3304      	adds	r3, #4

080005e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005e8:	d3f9      	bcc.n	80005de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ea:	4a0a      	ldr	r2, [pc, #40]	; (8000614 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005ec:	4c0a      	ldr	r4, [pc, #40]	; (8000618 <LoopForever+0x16>)
  movs r3, #0
 80005ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005f0:	e001      	b.n	80005f6 <LoopFillZerobss>

080005f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005f4:	3204      	adds	r2, #4

080005f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005f8:	d3fb      	bcc.n	80005f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005fa:	f000 fdb3 	bl	8001164 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005fe:	f7ff fecb 	bl	8000398 <main>

08000602 <LoopForever>:

LoopForever:
    b LoopForever
 8000602:	e7fe      	b.n	8000602 <LoopForever>
  ldr   r0, =_estack
 8000604:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000608:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800060c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000610:	08002130 	.word	0x08002130
  ldr r2, =_sbss
 8000614:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000618:	200000e0 	.word	0x200000e0

0800061c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800061c:	e7fe      	b.n	800061c <ADC_IRQHandler>
	...

08000620 <I2C_PeripheralClockControl>:
 *
 *@Note					-
 *
 */
void I2C_PeripheralClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	460b      	mov	r3, r1
 800062a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800062c:	78fb      	ldrb	r3, [r7, #3]
 800062e:	2b01      	cmp	r3, #1
 8000630:	d120      	bne.n	8000674 <I2C_PeripheralClockControl+0x54>
	{
		if(pI2Cx == I2C1)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4a22      	ldr	r2, [pc, #136]	; (80006c0 <I2C_PeripheralClockControl+0xa0>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d106      	bne.n	8000648 <I2C_PeripheralClockControl+0x28>
		{
			I2C1_PCLK_EN();
 800063a:	4b22      	ldr	r3, [pc, #136]	; (80006c4 <I2C_PeripheralClockControl+0xa4>)
 800063c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063e:	4a21      	ldr	r2, [pc, #132]	; (80006c4 <I2C_PeripheralClockControl+0xa4>)
 8000640:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000644:	6413      	str	r3, [r2, #64]	; 0x40
		else if(pI2Cx == I2C3)
		{
			I2C3_PCLK_DI();
		}
	}
}
 8000646:	e035      	b.n	80006b4 <I2C_PeripheralClockControl+0x94>
		else if(pI2Cx == I2C2)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	4a1f      	ldr	r2, [pc, #124]	; (80006c8 <I2C_PeripheralClockControl+0xa8>)
 800064c:	4293      	cmp	r3, r2
 800064e:	d106      	bne.n	800065e <I2C_PeripheralClockControl+0x3e>
			I2C2_PCLK_EN();
 8000650:	4b1c      	ldr	r3, [pc, #112]	; (80006c4 <I2C_PeripheralClockControl+0xa4>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	4a1b      	ldr	r2, [pc, #108]	; (80006c4 <I2C_PeripheralClockControl+0xa4>)
 8000656:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800065a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800065c:	e02a      	b.n	80006b4 <I2C_PeripheralClockControl+0x94>
		else if(pI2Cx == I2C3)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	4a1a      	ldr	r2, [pc, #104]	; (80006cc <I2C_PeripheralClockControl+0xac>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d126      	bne.n	80006b4 <I2C_PeripheralClockControl+0x94>
			I2C3_PCLK_EN();
 8000666:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <I2C_PeripheralClockControl+0xa4>)
 8000668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066a:	4a16      	ldr	r2, [pc, #88]	; (80006c4 <I2C_PeripheralClockControl+0xa4>)
 800066c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000670:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000672:	e01f      	b.n	80006b4 <I2C_PeripheralClockControl+0x94>
		if(pI2Cx == I2C1)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	4a12      	ldr	r2, [pc, #72]	; (80006c0 <I2C_PeripheralClockControl+0xa0>)
 8000678:	4293      	cmp	r3, r2
 800067a:	d106      	bne.n	800068a <I2C_PeripheralClockControl+0x6a>
			I2C1_PCLK_DI();
 800067c:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <I2C_PeripheralClockControl+0xa4>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000680:	4a10      	ldr	r2, [pc, #64]	; (80006c4 <I2C_PeripheralClockControl+0xa4>)
 8000682:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000686:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000688:	e014      	b.n	80006b4 <I2C_PeripheralClockControl+0x94>
		else if(pI2Cx == I2C2)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	4a0e      	ldr	r2, [pc, #56]	; (80006c8 <I2C_PeripheralClockControl+0xa8>)
 800068e:	4293      	cmp	r3, r2
 8000690:	d106      	bne.n	80006a0 <I2C_PeripheralClockControl+0x80>
			I2C2_PCLK_DI();
 8000692:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <I2C_PeripheralClockControl+0xa4>)
 8000694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000696:	4a0b      	ldr	r2, [pc, #44]	; (80006c4 <I2C_PeripheralClockControl+0xa4>)
 8000698:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800069c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800069e:	e009      	b.n	80006b4 <I2C_PeripheralClockControl+0x94>
		else if(pI2Cx == I2C3)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	4a0a      	ldr	r2, [pc, #40]	; (80006cc <I2C_PeripheralClockControl+0xac>)
 80006a4:	4293      	cmp	r3, r2
 80006a6:	d105      	bne.n	80006b4 <I2C_PeripheralClockControl+0x94>
			I2C3_PCLK_DI();
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <I2C_PeripheralClockControl+0xa4>)
 80006aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ac:	4a05      	ldr	r2, [pc, #20]	; (80006c4 <I2C_PeripheralClockControl+0xa4>)
 80006ae:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80006b2:	6413      	str	r3, [r2, #64]	; 0x40
}
 80006b4:	bf00      	nop
 80006b6:	370c      	adds	r7, #12
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr
 80006c0:	40005400 	.word	0x40005400
 80006c4:	40023800 	.word	0x40023800
 80006c8:	40005800 	.word	0x40005800
 80006cc:	40005c00 	.word	0x40005c00

080006d0 <RCC_GETPLLOutputClock>:

uint32_t RCC_GETPLLOutputClock(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
	return 160000000; // dummy value to be implemented
 80006d4:	4b02      	ldr	r3, [pc, #8]	; (80006e0 <RCC_GETPLLOutputClock+0x10>)
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr
 80006e0:	09896800 	.word	0x09896800

080006e4 <RCC_GetPCLK1Value>:


uint32_t RCC_GetPCLK1Value(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
	uint32_t pclk1, SystemClk;

	uint8_t clkSrc, temp, ahbp, apb1;
	clkSrc = ((RCC->CFGR >> 2) & 0x03);
 80006ea:	4b26      	ldr	r3, [pc, #152]	; (8000784 <RCC_GetPCLK1Value+0xa0>)
 80006ec:	689b      	ldr	r3, [r3, #8]
 80006ee:	089b      	lsrs	r3, r3, #2
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	f003 0303 	and.w	r3, r3, #3
 80006f6:	727b      	strb	r3, [r7, #9]

	if(clkSrc == 0)
 80006f8:	7a7b      	ldrb	r3, [r7, #9]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d102      	bne.n	8000704 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 80006fe:	4b22      	ldr	r3, [pc, #136]	; (8000788 <RCC_GetPCLK1Value+0xa4>)
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	e00b      	b.n	800071c <RCC_GetPCLK1Value+0x38>
	}
	else if(clkSrc == 1)
 8000704:	7a7b      	ldrb	r3, [r7, #9]
 8000706:	2b01      	cmp	r3, #1
 8000708:	d102      	bne.n	8000710 <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 800070a:	4b20      	ldr	r3, [pc, #128]	; (800078c <RCC_GetPCLK1Value+0xa8>)
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	e005      	b.n	800071c <RCC_GetPCLK1Value+0x38>
	}
	else if(clkSrc == 2)
 8000710:	7a7b      	ldrb	r3, [r7, #9]
 8000712:	2b02      	cmp	r3, #2
 8000714:	d102      	bne.n	800071c <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GETPLLOutputClock();
 8000716:	f7ff ffdb 	bl	80006d0 <RCC_GETPLLOutputClock>
 800071a:	60f8      	str	r0, [r7, #12]
	}

	// ahbp
	temp = ((RCC->CFGR >> 4) & 0xF);
 800071c:	4b19      	ldr	r3, [pc, #100]	; (8000784 <RCC_GetPCLK1Value+0xa0>)
 800071e:	689b      	ldr	r3, [r3, #8]
 8000720:	091b      	lsrs	r3, r3, #4
 8000722:	b2db      	uxtb	r3, r3
 8000724:	f003 030f 	and.w	r3, r3, #15
 8000728:	723b      	strb	r3, [r7, #8]
	if(temp < 8)
 800072a:	7a3b      	ldrb	r3, [r7, #8]
 800072c:	2b07      	cmp	r3, #7
 800072e:	d802      	bhi.n	8000736 <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 8000730:	2301      	movs	r3, #1
 8000732:	72fb      	strb	r3, [r7, #11]
 8000734:	e005      	b.n	8000742 <RCC_GetPCLK1Value+0x5e>
	}
	else
	{
		ahbp = AHB_PreScalar[temp - 8];
 8000736:	7a3b      	ldrb	r3, [r7, #8]
 8000738:	3b08      	subs	r3, #8
 800073a:	4a15      	ldr	r2, [pc, #84]	; (8000790 <RCC_GetPCLK1Value+0xac>)
 800073c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000740:	72fb      	strb	r3, [r7, #11]
	}

	// apb1
	temp = ((RCC->CFGR >> 10) & 0x7);
 8000742:	4b10      	ldr	r3, [pc, #64]	; (8000784 <RCC_GetPCLK1Value+0xa0>)
 8000744:	689b      	ldr	r3, [r3, #8]
 8000746:	0a9b      	lsrs	r3, r3, #10
 8000748:	b2db      	uxtb	r3, r3
 800074a:	f003 0307 	and.w	r3, r3, #7
 800074e:	723b      	strb	r3, [r7, #8]
	if(temp < 4)
 8000750:	7a3b      	ldrb	r3, [r7, #8]
 8000752:	2b03      	cmp	r3, #3
 8000754:	d802      	bhi.n	800075c <RCC_GetPCLK1Value+0x78>
	{
		apb1 = 1;
 8000756:	2301      	movs	r3, #1
 8000758:	72bb      	strb	r3, [r7, #10]
 800075a:	e005      	b.n	8000768 <RCC_GetPCLK1Value+0x84>
	}
	else
	{
		apb1 = APB1_PreScalar[temp - 4];
 800075c:	7a3b      	ldrb	r3, [r7, #8]
 800075e:	3b04      	subs	r3, #4
 8000760:	4a0c      	ldr	r2, [pc, #48]	; (8000794 <RCC_GetPCLK1Value+0xb0>)
 8000762:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000766:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = (SystemClk / ahbp) / apb1;
 8000768:	7afb      	ldrb	r3, [r7, #11]
 800076a:	68fa      	ldr	r2, [r7, #12]
 800076c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000770:	7abb      	ldrb	r3, [r7, #10]
 8000772:	fbb2 f3f3 	udiv	r3, r2, r3
 8000776:	607b      	str	r3, [r7, #4]

	return pclk1;
 8000778:	687b      	ldr	r3, [r7, #4]
}
 800077a:	4618      	mov	r0, r3
 800077c:	3710      	adds	r7, #16
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40023800 	.word	0x40023800
 8000788:	00f42400 	.word	0x00f42400
 800078c:	007a1200 	.word	0x007a1200
 8000790:	20000000 	.word	0x20000000
 8000794:	20000010 	.word	0x20000010

08000798 <I2C_Init>:
 *
 *@Note					-
 *
 */
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
	// enable the clock for the i2cx peripheral
	I2C_PeripheralClockControl(pI2CHandle->pI2Cx, ENABLE);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	2101      	movs	r1, #1
 80007a6:	4618      	mov	r0, r3
 80007a8:	f7ff ff3a 	bl	8000620 <I2C_PeripheralClockControl>

	uint32_t tempreg = 0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	60fb      	str	r3, [r7, #12]


	// configure the FREQ field of CR2
	tempreg |= RCC_GetPCLK1Value() / 1000000U;
 80007b0:	f7ff ff98 	bl	80006e4 <RCC_GetPCLK1Value>
 80007b4:	4603      	mov	r3, r0
 80007b6:	4a46      	ldr	r2, [pc, #280]	; (80008d0 <I2C_Init+0x138>)
 80007b8:	fba2 2303 	umull	r2, r3, r2, r3
 80007bc:	0c9b      	lsrs	r3, r3, #18
 80007be:	68fa      	ldr	r2, [r7, #12]
 80007c0:	4313      	orrs	r3, r2
 80007c2:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 = (tempreg & 0x3F);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	68fa      	ldr	r2, [r7, #12]
 80007ca:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80007ce:	605a      	str	r2, [r3, #4]

	// program the device own address
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	7a1b      	ldrb	r3, [r3, #8]
 80007d4:	005b      	lsls	r3, r3, #1
 80007d6:	461a      	mov	r2, r3
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	4313      	orrs	r3, r2
 80007dc:	60fb      	str	r3, [r7, #12]
	tempreg |= (1 << 14);
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007e4:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	68fa      	ldr	r2, [r7, #12]
 80007ec:	609a      	str	r2, [r3, #8]

	// CCR calculation
	uint16_t ccr_value = 0;
 80007ee:	2300      	movs	r3, #0
 80007f0:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	60fb      	str	r3, [r7, #12]

	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	685b      	ldr	r3, [r3, #4]
 80007fa:	4a36      	ldr	r2, [pc, #216]	; (80008d4 <I2C_Init+0x13c>)
 80007fc:	4293      	cmp	r3, r2
 80007fe:	d80f      	bhi.n	8000820 <I2C_Init+0x88>
	{
		// mode is standard mode
		ccr_value = RCC_GetPCLK1Value() / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000800:	f7ff ff70 	bl	80006e4 <RCC_GetPCLK1Value>
 8000804:	4602      	mov	r2, r0
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	685b      	ldr	r3, [r3, #4]
 800080a:	005b      	lsls	r3, r3, #1
 800080c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000810:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8000812:	897b      	ldrh	r3, [r7, #10]
 8000814:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000818:	68fa      	ldr	r2, [r7, #12]
 800081a:	4313      	orrs	r3, r2
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	e02b      	b.n	8000878 <I2C_Init+0xe0>
	}
	else
	{
		// mode is fast mode
		tempreg |= (1 << 15);
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000826:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	895b      	ldrh	r3, [r3, #10]
 800082c:	039b      	lsls	r3, r3, #14
 800082e:	461a      	mov	r2, r3
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	4313      	orrs	r3, r2
 8000834:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	895b      	ldrh	r3, [r3, #10]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d10b      	bne.n	8000856 <I2C_Init+0xbe>
		{
			ccr_value = RCC_GetPCLK1Value() / (3 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 800083e:	f7ff ff51 	bl	80006e4 <RCC_GetPCLK1Value>
 8000842:	4601      	mov	r1, r0
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	685a      	ldr	r2, [r3, #4]
 8000848:	4613      	mov	r3, r2
 800084a:	005b      	lsls	r3, r3, #1
 800084c:	4413      	add	r3, r2
 800084e:	fbb1 f3f3 	udiv	r3, r1, r3
 8000852:	817b      	strh	r3, [r7, #10]
 8000854:	e00c      	b.n	8000870 <I2C_Init+0xd8>
		}
		else
		{
			ccr_value = RCC_GetPCLK1Value() / (25 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000856:	f7ff ff45 	bl	80006e4 <RCC_GetPCLK1Value>
 800085a:	4601      	mov	r1, r0
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	685a      	ldr	r2, [r3, #4]
 8000860:	4613      	mov	r3, r2
 8000862:	009b      	lsls	r3, r3, #2
 8000864:	4413      	add	r3, r2
 8000866:	009a      	lsls	r2, r3, #2
 8000868:	4413      	add	r3, r2
 800086a:	fbb1 f3f3 	udiv	r3, r1, r3
 800086e:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= ccr_value;
 8000870:	897b      	ldrh	r3, [r7, #10]
 8000872:	68fa      	ldr	r2, [r7, #12]
 8000874:	4313      	orrs	r3, r2
 8000876:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	68fa      	ldr	r2, [r7, #12]
 800087e:	61da      	str	r2, [r3, #28]

	// TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	685b      	ldr	r3, [r3, #4]
 8000884:	4a13      	ldr	r2, [pc, #76]	; (80008d4 <I2C_Init+0x13c>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d809      	bhi.n	800089e <I2C_Init+0x106>
	{
		// mode is standard mode
		tempreg = (RCC_GetPCLK1Value() / 1000000U) + 1;
 800088a:	f7ff ff2b 	bl	80006e4 <RCC_GetPCLK1Value>
 800088e:	4603      	mov	r3, r0
 8000890:	4a0f      	ldr	r2, [pc, #60]	; (80008d0 <I2C_Init+0x138>)
 8000892:	fba2 2303 	umull	r2, r3, r2, r3
 8000896:	0c9b      	lsrs	r3, r3, #18
 8000898:	3301      	adds	r3, #1
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	e00d      	b.n	80008ba <I2C_Init+0x122>
	}
	else
	{
		// mode is fast mode
		tempreg = ((RCC_GetPCLK1Value() * 300) / 1000000000U) + 1;
 800089e:	f7ff ff21 	bl	80006e4 <RCC_GetPCLK1Value>
 80008a2:	4603      	mov	r3, r0
 80008a4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80008a8:	fb02 f303 	mul.w	r3, r2, r3
 80008ac:	0a5b      	lsrs	r3, r3, #9
 80008ae:	4a0a      	ldr	r2, [pc, #40]	; (80008d8 <I2C_Init+0x140>)
 80008b0:	fba2 2303 	umull	r2, r3, r2, r3
 80008b4:	09db      	lsrs	r3, r3, #7
 80008b6:	3301      	adds	r3, #1
 80008b8:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	68fa      	ldr	r2, [r7, #12]
 80008c0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80008c4:	621a      	str	r2, [r3, #32]


}
 80008c6:	bf00      	nop
 80008c8:	3710      	adds	r7, #16
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	431bde83 	.word	0x431bde83
 80008d4:	000186a0 	.word	0x000186a0
 80008d8:	00044b83 	.word	0x00044b83

080008dc <I2C_MAsterSendData>:
 *
 *@Note					-
 *
 */
void I2C_MAsterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxBuffer, uint8_t len, uint8_t slaveAddr, uint8_t Sr)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	60f8      	str	r0, [r7, #12]
 80008e4:	60b9      	str	r1, [r7, #8]
 80008e6:	4611      	mov	r1, r2
 80008e8:	461a      	mov	r2, r3
 80008ea:	460b      	mov	r3, r1
 80008ec:	71fb      	strb	r3, [r7, #7]
 80008ee:	4613      	mov	r3, r2
 80008f0:	71bb      	strb	r3, [r7, #6]
	// 1. Generate the START condition
	I2C_generateStartCondition(pI2CHandle->pI2Cx);
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4618      	mov	r0, r3
 80008f8:	f000 f859 	bl	80009ae <I2C_generateStartCondition>

	// 2. Confirm that start generation is completed by checking the SB flag in the SR1
	// note: until SB is cleared SCL will be stretched (pulled to LOW)
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_SB_FLAG));
 80008fc:	bf00      	nop
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	2101      	movs	r1, #1
 8000904:	4618      	mov	r0, r3
 8000906:	f000 f960 	bl	8000bca <I2C_GetFlagStatus>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d0f6      	beq.n	80008fe <I2C_MAsterSendData+0x22>

	// 3. Send the address of the slave with r/nw bit set to w(0) (total 8 bits)
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx, slaveAddr);
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	79ba      	ldrb	r2, [r7, #6]
 8000916:	4611      	mov	r1, r2
 8000918:	4618      	mov	r0, r3
 800091a:	f000 f858 	bl	80009ce <I2C_ExecuteAddressPhaseWrite>

	// 4. confirm that the address phase is completed by checking the ADDR flag in the SR1
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_ADDR_FLAG));
 800091e:	bf00      	nop
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2102      	movs	r1, #2
 8000926:	4618      	mov	r0, r3
 8000928:	f000 f94f 	bl	8000bca <I2C_GetFlagStatus>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d0f6      	beq.n	8000920 <I2C_MAsterSendData+0x44>

	// 5. clear the ADDR flag according to its software sequence
	// Note : Until ADDR is cleared SCL will be stretched (pulled to LOW)
	I2C_ClearADDRFlag(pI2CHandle->pI2Cx);
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4618      	mov	r0, r3
 8000938:	f000 f875 	bl	8000a26 <I2C_ClearADDRFlag>

	// 6. Send the data until Len becomes 0
	while(len > 0)
 800093c:	e014      	b.n	8000968 <I2C_MAsterSendData+0x8c>
	{
		while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_TxE_FLAG)); // wait till TXE is set
 800093e:	bf00      	nop
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2180      	movs	r1, #128	; 0x80
 8000946:	4618      	mov	r0, r3
 8000948:	f000 f93f 	bl	8000bca <I2C_GetFlagStatus>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d0f6      	beq.n	8000940 <I2C_MAsterSendData+0x64>
		pI2CHandle->pI2Cx->DR = *pTxBuffer;
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	781a      	ldrb	r2, [r3, #0]
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	611a      	str	r2, [r3, #16]
		pTxBuffer++;
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	3301      	adds	r3, #1
 8000960:	60bb      	str	r3, [r7, #8]
		len--;
 8000962:	79fb      	ldrb	r3, [r7, #7]
 8000964:	3b01      	subs	r3, #1
 8000966:	71fb      	strb	r3, [r7, #7]
	while(len > 0)
 8000968:	79fb      	ldrb	r3, [r7, #7]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d1e7      	bne.n	800093e <I2C_MAsterSendData+0x62>
	}

	// 7. When Len becomes zero , wait for TXE = 1 and BTF = 1 before generating the STOP condition
	// NOTE: TXE = 1 , BTF = 1, means that both SR and DR are empty and next transition should begin
	// when BTF = 1 , SCL will be stretched (pulled to LOW)
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_TxE_FLAG));
 800096e:	bf00      	nop
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	2180      	movs	r1, #128	; 0x80
 8000976:	4618      	mov	r0, r3
 8000978:	f000 f927 	bl	8000bca <I2C_GetFlagStatus>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d0f6      	beq.n	8000970 <I2C_MAsterSendData+0x94>
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_BTF_FLAG));
 8000982:	bf00      	nop
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	2104      	movs	r1, #4
 800098a:	4618      	mov	r0, r3
 800098c:	f000 f91d 	bl	8000bca <I2C_GetFlagStatus>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d0f6      	beq.n	8000984 <I2C_MAsterSendData+0xa8>


	// 8. generate STOP condition and master need no to wait for the completion of STOP condition.
	// Note : generating STOP, automatically clears the BTF
	if(Sr == I2C_DISABLE_SR)
 8000996:	7e3b      	ldrb	r3, [r7, #24]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d104      	bne.n	80009a6 <I2C_MAsterSendData+0xca>
		I2C_generateStopCondition(pI2CHandle->pI2Cx);
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4618      	mov	r0, r3
 80009a2:	f000 f850 	bl	8000a46 <I2C_generateStopCondition>


}
 80009a6:	bf00      	nop
 80009a8:	3710      	adds	r7, #16
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}

080009ae <I2C_generateStartCondition>:
static void I2C_generateStartCondition(I2C_RegDef_t *pI2Cx)
{
 80009ae:	b480      	push	{r7}
 80009b0:	b083      	sub	sp, #12
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_START);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	601a      	str	r2, [r3, #0]
}
 80009c2:	bf00      	nop
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr

080009ce <I2C_ExecuteAddressPhaseWrite>:
static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t slaveAddr)
{
 80009ce:	b480      	push	{r7}
 80009d0:	b083      	sub	sp, #12
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	6078      	str	r0, [r7, #4]
 80009d6:	460b      	mov	r3, r1
 80009d8:	70fb      	strb	r3, [r7, #3]
	slaveAddr = slaveAddr << 1;
 80009da:	78fb      	ldrb	r3, [r7, #3]
 80009dc:	005b      	lsls	r3, r3, #1
 80009de:	70fb      	strb	r3, [r7, #3]
	slaveAddr &= ~(1 << 0);
 80009e0:	78fb      	ldrb	r3, [r7, #3]
 80009e2:	f023 0301 	bic.w	r3, r3, #1
 80009e6:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = slaveAddr;
 80009e8:	78fa      	ldrb	r2, [r7, #3]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	611a      	str	r2, [r3, #16]
}
 80009ee:	bf00      	nop
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr

080009fa <I2C_ExecuteAddressPhaseRead>:
static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t slaveAddr)
{
 80009fa:	b480      	push	{r7}
 80009fc:	b083      	sub	sp, #12
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	6078      	str	r0, [r7, #4]
 8000a02:	460b      	mov	r3, r1
 8000a04:	70fb      	strb	r3, [r7, #3]
	slaveAddr = slaveAddr << 1;
 8000a06:	78fb      	ldrb	r3, [r7, #3]
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	70fb      	strb	r3, [r7, #3]
	slaveAddr |= (1 << 0);
 8000a0c:	78fb      	ldrb	r3, [r7, #3]
 8000a0e:	f043 0301 	orr.w	r3, r3, #1
 8000a12:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = slaveAddr;
 8000a14:	78fa      	ldrb	r2, [r7, #3]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	611a      	str	r2, [r3, #16]
}
 8000a1a:	bf00      	nop
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr

08000a26 <I2C_ClearADDRFlag>:
static void I2C_ClearADDRFlag(I2C_RegDef_t *pI2Cx)
{
 8000a26:	b480      	push	{r7}
 8000a28:	b085      	sub	sp, #20
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
	uint32_t dummyRead = pI2Cx->SR1;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	695b      	ldr	r3, [r3, #20]
 8000a32:	60fb      	str	r3, [r7, #12]
	dummyRead = pI2Cx->SR2;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	699b      	ldr	r3, [r3, #24]
 8000a38:	60fb      	str	r3, [r7, #12]
	(void)dummyRead;
}
 8000a3a:	bf00      	nop
 8000a3c:	3714      	adds	r7, #20
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr

08000a46 <I2C_generateStopCondition>:
static void I2C_generateStopCondition(I2C_RegDef_t *pI2Cx)
{
 8000a46:	b480      	push	{r7}
 8000a48:	b083      	sub	sp, #12
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	601a      	str	r2, [r3, #0]
}
 8000a5a:	bf00      	nop
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr

08000a66 <I2C_MasterReceiveData>:
 *
 *@Note					-
 *
 */
void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle, uint8_t *pRxBuffer, uint8_t len, uint8_t slaveAddr, uint8_t Sr)
{
 8000a66:	b580      	push	{r7, lr}
 8000a68:	b086      	sub	sp, #24
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	60f8      	str	r0, [r7, #12]
 8000a6e:	60b9      	str	r1, [r7, #8]
 8000a70:	4611      	mov	r1, r2
 8000a72:	461a      	mov	r2, r3
 8000a74:	460b      	mov	r3, r1
 8000a76:	71fb      	strb	r3, [r7, #7]
 8000a78:	4613      	mov	r3, r2
 8000a7a:	71bb      	strb	r3, [r7, #6]
	// 1. Generate the START condition
	I2C_generateStartCondition(pI2CHandle->pI2Cx);
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4618      	mov	r0, r3
 8000a82:	f7ff ff94 	bl	80009ae <I2C_generateStartCondition>

	// 2. confirm that start generation is completed by checking the SB flag in the SR1
	// 	Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_SB_FLAG));
 8000a86:	bf00      	nop
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f000 f89b 	bl	8000bca <I2C_GetFlagStatus>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d0f6      	beq.n	8000a88 <I2C_MasterReceiveData+0x22>

	// 3. Send the address of the slave with r/nw bit set to R(1) (total 8 bits)
	I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx, slaveAddr);
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	79ba      	ldrb	r2, [r7, #6]
 8000aa0:	4611      	mov	r1, r2
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f7ff ffa9 	bl	80009fa <I2C_ExecuteAddressPhaseRead>

	// 4. wait until address phase is completed by checking the ADDR flag in the SR1
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_ADDR_FLAG));
 8000aa8:	bf00      	nop
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	2102      	movs	r1, #2
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f000 f88a 	bl	8000bca <I2C_GetFlagStatus>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d0f6      	beq.n	8000aaa <I2C_MasterReceiveData+0x44>

	// procedure to read only 1 byte from slave
	if(len == 1)
 8000abc:	79fb      	ldrb	r3, [r7, #7]
 8000abe:	2b01      	cmp	r3, #1
 8000ac0:	d123      	bne.n	8000b0a <I2C_MasterReceiveData+0xa4>
	{
		// Disable Acking
		I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_DISABLE);
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f000 f892 	bl	8000bf2 <I2C_ManageAcking>

		// clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle->pI2Cx);
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff ffa7 	bl	8000a26 <I2C_ClearADDRFlag>

		// wait until RXNE becomes 1
		while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_RxNE_FLAG));
 8000ad8:	bf00      	nop
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	2140      	movs	r1, #64	; 0x40
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f000 f872 	bl	8000bca <I2C_GetFlagStatus>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d0f6      	beq.n	8000ada <I2C_MasterReceiveData+0x74>

		// generate STOP condition
		if(Sr == I2C_DISABLE_SR)
 8000aec:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d104      	bne.n	8000afe <I2C_MasterReceiveData+0x98>
			I2C_generateStopCondition(pI2CHandle->pI2Cx);
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4618      	mov	r0, r3
 8000afa:	f7ff ffa4 	bl	8000a46 <I2C_generateStopCondition>

		// read data in to buffer
		*pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	691b      	ldr	r3, [r3, #16]
 8000b04:	b2da      	uxtb	r2, r3
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	701a      	strb	r2, [r3, #0]

	}

	// procedure to read data from slave when len > 1
	if(len > 1)
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d932      	bls.n	8000b76 <I2C_MasterReceiveData+0x110>
	{
		// clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle->pI2Cx);
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff ff86 	bl	8000a26 <I2C_ClearADDRFlag>

		// read the data until len becomes zero
		for(uint32_t i = len; i > 0; i--)
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	617b      	str	r3, [r7, #20]
 8000b1e:	e027      	b.n	8000b70 <I2C_MasterReceiveData+0x10a>
		{
			// wait until RXNE becomes 1
			while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_RxNE_FLAG));
 8000b20:	bf00      	nop
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	2140      	movs	r1, #64	; 0x40
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f000 f84e 	bl	8000bca <I2C_GetFlagStatus>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d0f6      	beq.n	8000b22 <I2C_MasterReceiveData+0xbc>

			if(i == 2) // if last 2 bytes are remaining
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	2b02      	cmp	r3, #2
 8000b38:	d10e      	bne.n	8000b58 <I2C_MasterReceiveData+0xf2>
			{
				// clear the ack bit
				I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_DISABLE);
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	2100      	movs	r1, #0
 8000b40:	4618      	mov	r0, r3
 8000b42:	f000 f856 	bl	8000bf2 <I2C_ManageAcking>

				// generate STOP condition
				if(Sr == I2C_DISABLE_SR)
 8000b46:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d104      	bne.n	8000b58 <I2C_MasterReceiveData+0xf2>
					I2C_generateStopCondition(pI2CHandle->pI2Cx);
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4618      	mov	r0, r3
 8000b54:	f7ff ff77 	bl	8000a46 <I2C_generateStopCondition>
			}

			// read the data from data register in to buffer
			*pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	691b      	ldr	r3, [r3, #16]
 8000b5e:	b2da      	uxtb	r2, r3
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	701a      	strb	r2, [r3, #0]

			// increment the buffer address
			pRxBuffer++;
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	3301      	adds	r3, #1
 8000b68:	60bb      	str	r3, [r7, #8]
		for(uint32_t i = len; i > 0; i--)
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	3b01      	subs	r3, #1
 8000b6e:	617b      	str	r3, [r7, #20]
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d1d4      	bne.n	8000b20 <I2C_MasterReceiveData+0xba>
		}
	}

	// re-enable ACKings
	if(pI2CHandle->I2C_Config.I2C_ACKControl == I2C_ACK_ENABLE)
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	7a5b      	ldrb	r3, [r3, #9]
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d105      	bne.n	8000b8a <I2C_MasterReceiveData+0x124>
		I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_ENABLE);
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2101      	movs	r1, #1
 8000b84:	4618      	mov	r0, r3
 8000b86:	f000 f834 	bl	8000bf2 <I2C_ManageAcking>
}
 8000b8a:	bf00      	nop
 8000b8c:	3718      	adds	r7, #24
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <I2C_PeripheralControl>:
  *
  *@Note					-
  *
  */
 void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
 {
 8000b92:	b480      	push	{r7}
 8000b94:	b083      	sub	sp, #12
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
 8000b9a:	460b      	mov	r3, r1
 8000b9c:	70fb      	strb	r3, [r7, #3]
		if(EnorDi == ENABLE)
 8000b9e:	78fb      	ldrb	r3, [r7, #3]
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d106      	bne.n	8000bb2 <I2C_PeripheralControl+0x20>
		{
			pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f043 0201 	orr.w	r2, r3, #1
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	601a      	str	r2, [r3, #0]
		}
		else
		{
			pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
		}
 }
 8000bb0:	e005      	b.n	8000bbe <I2C_PeripheralControl+0x2c>
			pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f023 0201 	bic.w	r2, r3, #1
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	601a      	str	r2, [r3, #0]
 }
 8000bbe:	bf00      	nop
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr

08000bca <I2C_GetFlagStatus>:
  *
  *@Note					-
  *
  */
 uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint32_t FlagName)
 {
 8000bca:	b480      	push	{r7}
 8000bcc:	b083      	sub	sp, #12
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
 8000bd2:	6039      	str	r1, [r7, #0]
		if(pI2Cx->SR1 & FlagName)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	695a      	ldr	r2, [r3, #20]
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	4013      	ands	r3, r2
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <I2C_GetFlagStatus+0x1a>
			return FLAG_SET;
 8000be0:	2301      	movs	r3, #1
 8000be2:	e000      	b.n	8000be6 <I2C_GetFlagStatus+0x1c>
		else
			return FLAG_RESET;
 8000be4:	2300      	movs	r3, #0
 }
 8000be6:	4618      	mov	r0, r3
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr

08000bf2 <I2C_ManageAcking>:
  *
  *@Note					-
  *
  */
 void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
 {
 8000bf2:	b480      	push	{r7}
 8000bf4:	b083      	sub	sp, #12
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
 8000bfa:	460b      	mov	r3, r1
 8000bfc:	70fb      	strb	r3, [r7, #3]
	 if(EnorDi == I2C_ACK_ENABLE)
 8000bfe:	78fb      	ldrb	r3, [r7, #3]
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d106      	bne.n	8000c12 <I2C_ManageAcking+0x20>
	 {
		 // enable the ack
		 pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	601a      	str	r2, [r3, #0]
	 {
		 // disable the ack
		 pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
	 }

 }
 8000c10:	e005      	b.n	8000c1e <I2C_ManageAcking+0x2c>
		 pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	601a      	str	r2, [r3, #0]
 }
 8000c1e:	bf00      	nop
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
	...

08000c2c <GPIO_PeripheralClockControl>:
 *
 *@Note					- none
 *
 */
void GPIO_PeripheralClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	460b      	mov	r3, r1
 8000c36:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000c38:	78fb      	ldrb	r3, [r7, #3]
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d162      	bne.n	8000d04 <GPIO_PeripheralClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4a64      	ldr	r2, [pc, #400]	; (8000dd4 <GPIO_PeripheralClockControl+0x1a8>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d106      	bne.n	8000c54 <GPIO_PeripheralClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000c46:	4b64      	ldr	r3, [pc, #400]	; (8000dd8 <GPIO_PeripheralClockControl+0x1ac>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a63      	ldr	r2, [pc, #396]	; (8000dd8 <GPIO_PeripheralClockControl+0x1ac>)
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
		else if(pGPIOx == GPIOI)
		{
			GPIOI_PCLK_DI();
		}
	}
}
 8000c52:	e0b9      	b.n	8000dc8 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	4a61      	ldr	r2, [pc, #388]	; (8000ddc <GPIO_PeripheralClockControl+0x1b0>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d106      	bne.n	8000c6a <GPIO_PeripheralClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000c5c:	4b5e      	ldr	r3, [pc, #376]	; (8000dd8 <GPIO_PeripheralClockControl+0x1ac>)
 8000c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c60:	4a5d      	ldr	r2, [pc, #372]	; (8000dd8 <GPIO_PeripheralClockControl+0x1ac>)
 8000c62:	f043 0302 	orr.w	r3, r3, #2
 8000c66:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c68:	e0ae      	b.n	8000dc8 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4a5c      	ldr	r2, [pc, #368]	; (8000de0 <GPIO_PeripheralClockControl+0x1b4>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d106      	bne.n	8000c80 <GPIO_PeripheralClockControl+0x54>
			GPIOC_PCLK_EN();
 8000c72:	4b59      	ldr	r3, [pc, #356]	; (8000dd8 <GPIO_PeripheralClockControl+0x1ac>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4a58      	ldr	r2, [pc, #352]	; (8000dd8 <GPIO_PeripheralClockControl+0x1ac>)
 8000c78:	f043 0304 	orr.w	r3, r3, #4
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c7e:	e0a3      	b.n	8000dc8 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4a58      	ldr	r2, [pc, #352]	; (8000de4 <GPIO_PeripheralClockControl+0x1b8>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d106      	bne.n	8000c96 <GPIO_PeripheralClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000c88:	4b53      	ldr	r3, [pc, #332]	; (8000dd8 <GPIO_PeripheralClockControl+0x1ac>)
 8000c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8c:	4a52      	ldr	r2, [pc, #328]	; (8000dd8 <GPIO_PeripheralClockControl+0x1ac>)
 8000c8e:	f043 0308 	orr.w	r3, r3, #8
 8000c92:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c94:	e098      	b.n	8000dc8 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4a53      	ldr	r2, [pc, #332]	; (8000de8 <GPIO_PeripheralClockControl+0x1bc>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d106      	bne.n	8000cac <GPIO_PeripheralClockControl+0x80>
			GPIOE_PCLK_EN();
 8000c9e:	4b4e      	ldr	r3, [pc, #312]	; (8000dd8 <GPIO_PeripheralClockControl+0x1ac>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	4a4d      	ldr	r2, [pc, #308]	; (8000dd8 <GPIO_PeripheralClockControl+0x1ac>)
 8000ca4:	f043 0310 	orr.w	r3, r3, #16
 8000ca8:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000caa:	e08d      	b.n	8000dc8 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	4a4f      	ldr	r2, [pc, #316]	; (8000dec <GPIO_PeripheralClockControl+0x1c0>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d106      	bne.n	8000cc2 <GPIO_PeripheralClockControl+0x96>
			GPIOF_PCLK_EN();
 8000cb4:	4b48      	ldr	r3, [pc, #288]	; (8000dd8 <GPIO_PeripheralClockControl+0x1ac>)
 8000cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb8:	4a47      	ldr	r2, [pc, #284]	; (8000dd8 <GPIO_PeripheralClockControl+0x1ac>)
 8000cba:	f043 0320 	orr.w	r3, r3, #32
 8000cbe:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000cc0:	e082      	b.n	8000dc8 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4a4a      	ldr	r2, [pc, #296]	; (8000df0 <GPIO_PeripheralClockControl+0x1c4>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d106      	bne.n	8000cd8 <GPIO_PeripheralClockControl+0xac>
			GPIOG_PCLK_EN();
 8000cca:	4b43      	ldr	r3, [pc, #268]	; (8000dd8 <GPIO_PeripheralClockControl+0x1ac>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	4a42      	ldr	r2, [pc, #264]	; (8000dd8 <GPIO_PeripheralClockControl+0x1ac>)
 8000cd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cd4:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000cd6:	e077      	b.n	8000dc8 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4a46      	ldr	r2, [pc, #280]	; (8000df4 <GPIO_PeripheralClockControl+0x1c8>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d106      	bne.n	8000cee <GPIO_PeripheralClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000ce0:	4b3d      	ldr	r3, [pc, #244]	; (8000dd8 <GPIO_PeripheralClockControl+0x1ac>)
 8000ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce4:	4a3c      	ldr	r2, [pc, #240]	; (8000dd8 <GPIO_PeripheralClockControl+0x1ac>)
 8000ce6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cea:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000cec:	e06c      	b.n	8000dc8 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4a41      	ldr	r2, [pc, #260]	; (8000df8 <GPIO_PeripheralClockControl+0x1cc>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d168      	bne.n	8000dc8 <GPIO_PeripheralClockControl+0x19c>
			GPIOI_PCLK_EN();
 8000cf6:	4b38      	ldr	r3, [pc, #224]	; (8000dd8 <GPIO_PeripheralClockControl+0x1ac>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a37      	ldr	r2, [pc, #220]	; (8000dd8 <GPIO_PeripheralClockControl+0x1ac>)
 8000cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d02:	e061      	b.n	8000dc8 <GPIO_PeripheralClockControl+0x19c>
		if(pGPIOx == GPIOA)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	4a33      	ldr	r2, [pc, #204]	; (8000dd4 <GPIO_PeripheralClockControl+0x1a8>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d106      	bne.n	8000d1a <GPIO_PeripheralClockControl+0xee>
			GPIOA_PCLK_DI();
 8000d0c:	4b32      	ldr	r3, [pc, #200]	; (8000dd8 <GPIO_PeripheralClockControl+0x1ac>)
 8000d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d10:	4a31      	ldr	r2, [pc, #196]	; (8000dd8 <GPIO_PeripheralClockControl+0x1ac>)
 8000d12:	f023 0301 	bic.w	r3, r3, #1
 8000d16:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d18:	e056      	b.n	8000dc8 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4a2f      	ldr	r2, [pc, #188]	; (8000ddc <GPIO_PeripheralClockControl+0x1b0>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d106      	bne.n	8000d30 <GPIO_PeripheralClockControl+0x104>
			GPIOB_PCLK_DI();
 8000d22:	4b2d      	ldr	r3, [pc, #180]	; (8000dd8 <GPIO_PeripheralClockControl+0x1ac>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	4a2c      	ldr	r2, [pc, #176]	; (8000dd8 <GPIO_PeripheralClockControl+0x1ac>)
 8000d28:	f023 0302 	bic.w	r3, r3, #2
 8000d2c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d2e:	e04b      	b.n	8000dc8 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4a2b      	ldr	r2, [pc, #172]	; (8000de0 <GPIO_PeripheralClockControl+0x1b4>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d106      	bne.n	8000d46 <GPIO_PeripheralClockControl+0x11a>
			GPIOC_PCLK_DI();
 8000d38:	4b27      	ldr	r3, [pc, #156]	; (8000dd8 <GPIO_PeripheralClockControl+0x1ac>)
 8000d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3c:	4a26      	ldr	r2, [pc, #152]	; (8000dd8 <GPIO_PeripheralClockControl+0x1ac>)
 8000d3e:	f023 0304 	bic.w	r3, r3, #4
 8000d42:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d44:	e040      	b.n	8000dc8 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4a26      	ldr	r2, [pc, #152]	; (8000de4 <GPIO_PeripheralClockControl+0x1b8>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d106      	bne.n	8000d5c <GPIO_PeripheralClockControl+0x130>
			GPIOD_PCLK_DI();
 8000d4e:	4b22      	ldr	r3, [pc, #136]	; (8000dd8 <GPIO_PeripheralClockControl+0x1ac>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	4a21      	ldr	r2, [pc, #132]	; (8000dd8 <GPIO_PeripheralClockControl+0x1ac>)
 8000d54:	f023 0308 	bic.w	r3, r3, #8
 8000d58:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d5a:	e035      	b.n	8000dc8 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4a22      	ldr	r2, [pc, #136]	; (8000de8 <GPIO_PeripheralClockControl+0x1bc>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d106      	bne.n	8000d72 <GPIO_PeripheralClockControl+0x146>
			GPIOE_PCLK_DI();
 8000d64:	4b1c      	ldr	r3, [pc, #112]	; (8000dd8 <GPIO_PeripheralClockControl+0x1ac>)
 8000d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d68:	4a1b      	ldr	r2, [pc, #108]	; (8000dd8 <GPIO_PeripheralClockControl+0x1ac>)
 8000d6a:	f023 0310 	bic.w	r3, r3, #16
 8000d6e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d70:	e02a      	b.n	8000dc8 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4a1d      	ldr	r2, [pc, #116]	; (8000dec <GPIO_PeripheralClockControl+0x1c0>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d106      	bne.n	8000d88 <GPIO_PeripheralClockControl+0x15c>
			GPIOF_PCLK_DI();
 8000d7a:	4b17      	ldr	r3, [pc, #92]	; (8000dd8 <GPIO_PeripheralClockControl+0x1ac>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	4a16      	ldr	r2, [pc, #88]	; (8000dd8 <GPIO_PeripheralClockControl+0x1ac>)
 8000d80:	f023 0320 	bic.w	r3, r3, #32
 8000d84:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d86:	e01f      	b.n	8000dc8 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	4a19      	ldr	r2, [pc, #100]	; (8000df0 <GPIO_PeripheralClockControl+0x1c4>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d106      	bne.n	8000d9e <GPIO_PeripheralClockControl+0x172>
			GPIOG_PCLK_DI();
 8000d90:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <GPIO_PeripheralClockControl+0x1ac>)
 8000d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d94:	4a10      	ldr	r2, [pc, #64]	; (8000dd8 <GPIO_PeripheralClockControl+0x1ac>)
 8000d96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000d9a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d9c:	e014      	b.n	8000dc8 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a14      	ldr	r2, [pc, #80]	; (8000df4 <GPIO_PeripheralClockControl+0x1c8>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d106      	bne.n	8000db4 <GPIO_PeripheralClockControl+0x188>
			GPIOH_PCLK_DI();
 8000da6:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <GPIO_PeripheralClockControl+0x1ac>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	4a0b      	ldr	r2, [pc, #44]	; (8000dd8 <GPIO_PeripheralClockControl+0x1ac>)
 8000dac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000db0:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000db2:	e009      	b.n	8000dc8 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	4a10      	ldr	r2, [pc, #64]	; (8000df8 <GPIO_PeripheralClockControl+0x1cc>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d105      	bne.n	8000dc8 <GPIO_PeripheralClockControl+0x19c>
			GPIOI_PCLK_DI();
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <GPIO_PeripheralClockControl+0x1ac>)
 8000dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc0:	4a05      	ldr	r2, [pc, #20]	; (8000dd8 <GPIO_PeripheralClockControl+0x1ac>)
 8000dc2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000dc6:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000dc8:	bf00      	nop
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	40020000 	.word	0x40020000
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	40020400 	.word	0x40020400
 8000de0:	40020800 	.word	0x40020800
 8000de4:	40020c00 	.word	0x40020c00
 8000de8:	40021000 	.word	0x40021000
 8000dec:	40021400 	.word	0x40021400
 8000df0:	40021800 	.word	0x40021800
 8000df4:	40021c00 	.word	0x40021c00
 8000df8:	40022000 	.word	0x40022000

08000dfc <GPIO_Init>:

/*
 * Init and De-init
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b086      	sub	sp, #24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0; // temp register
 8000e04:	2300      	movs	r3, #0
 8000e06:	617b      	str	r3, [r7, #20]

	// enable the peripheral clock
	GPIO_PeripheralClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff ff0c 	bl	8000c2c <GPIO_PeripheralClockControl>

	// 1. configure the mode of gpio pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	795b      	ldrb	r3, [r3, #5]
 8000e18:	2b03      	cmp	r3, #3
 8000e1a:	d820      	bhi.n	8000e5e <GPIO_Init+0x62>
	{
		// the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	795b      	ldrb	r3, [r3, #5]
 8000e20:	461a      	mov	r2, r3
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	791b      	ldrb	r3, [r3, #4]
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clear
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	791b      	ldrb	r3, [r3, #4]
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	2103      	movs	r1, #3
 8000e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e40:	43db      	mvns	r3, r3
 8000e42:	4619      	mov	r1, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	400a      	ands	r2, r1
 8000e4a:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;	// setting
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	6819      	ldr	r1, [r3, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	697a      	ldr	r2, [r7, #20]
 8000e58:	430a      	orrs	r2, r1
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	e0c1      	b.n	8000fe2 <GPIO_Init+0x1e6>

	}
	else
	{
		// this part will code later (interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	795b      	ldrb	r3, [r3, #5]
 8000e62:	2b04      	cmp	r3, #4
 8000e64:	d117      	bne.n	8000e96 <GPIO_Init+0x9a>
		{
			// 1. configure the FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000e66:	4b47      	ldr	r3, [pc, #284]	; (8000f84 <GPIO_Init+0x188>)
 8000e68:	68db      	ldr	r3, [r3, #12]
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	7912      	ldrb	r2, [r2, #4]
 8000e6e:	4611      	mov	r1, r2
 8000e70:	2201      	movs	r2, #1
 8000e72:	408a      	lsls	r2, r1
 8000e74:	4611      	mov	r1, r2
 8000e76:	4a43      	ldr	r2, [pc, #268]	; (8000f84 <GPIO_Init+0x188>)
 8000e78:	430b      	orrs	r3, r1
 8000e7a:	60d3      	str	r3, [r2, #12]
			// Clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000e7c:	4b41      	ldr	r3, [pc, #260]	; (8000f84 <GPIO_Init+0x188>)
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	687a      	ldr	r2, [r7, #4]
 8000e82:	7912      	ldrb	r2, [r2, #4]
 8000e84:	4611      	mov	r1, r2
 8000e86:	2201      	movs	r2, #1
 8000e88:	408a      	lsls	r2, r1
 8000e8a:	43d2      	mvns	r2, r2
 8000e8c:	4611      	mov	r1, r2
 8000e8e:	4a3d      	ldr	r2, [pc, #244]	; (8000f84 <GPIO_Init+0x188>)
 8000e90:	400b      	ands	r3, r1
 8000e92:	6093      	str	r3, [r2, #8]
 8000e94:	e035      	b.n	8000f02 <GPIO_Init+0x106>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	795b      	ldrb	r3, [r3, #5]
 8000e9a:	2b05      	cmp	r3, #5
 8000e9c:	d117      	bne.n	8000ece <GPIO_Init+0xd2>
		{
			// 1. configure the RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000e9e:	4b39      	ldr	r3, [pc, #228]	; (8000f84 <GPIO_Init+0x188>)
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	7912      	ldrb	r2, [r2, #4]
 8000ea6:	4611      	mov	r1, r2
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	408a      	lsls	r2, r1
 8000eac:	4611      	mov	r1, r2
 8000eae:	4a35      	ldr	r2, [pc, #212]	; (8000f84 <GPIO_Init+0x188>)
 8000eb0:	430b      	orrs	r3, r1
 8000eb2:	6093      	str	r3, [r2, #8]
			// Clear the corresponding FTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000eb4:	4b33      	ldr	r3, [pc, #204]	; (8000f84 <GPIO_Init+0x188>)
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	7912      	ldrb	r2, [r2, #4]
 8000ebc:	4611      	mov	r1, r2
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	408a      	lsls	r2, r1
 8000ec2:	43d2      	mvns	r2, r2
 8000ec4:	4611      	mov	r1, r2
 8000ec6:	4a2f      	ldr	r2, [pc, #188]	; (8000f84 <GPIO_Init+0x188>)
 8000ec8:	400b      	ands	r3, r1
 8000eca:	60d3      	str	r3, [r2, #12]
 8000ecc:	e019      	b.n	8000f02 <GPIO_Init+0x106>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	795b      	ldrb	r3, [r3, #5]
 8000ed2:	2b06      	cmp	r3, #6
 8000ed4:	d115      	bne.n	8000f02 <GPIO_Init+0x106>
		{
			// 1. configure both FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000ed6:	4b2b      	ldr	r3, [pc, #172]	; (8000f84 <GPIO_Init+0x188>)
 8000ed8:	68db      	ldr	r3, [r3, #12]
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	7912      	ldrb	r2, [r2, #4]
 8000ede:	4611      	mov	r1, r2
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	408a      	lsls	r2, r1
 8000ee4:	4611      	mov	r1, r2
 8000ee6:	4a27      	ldr	r2, [pc, #156]	; (8000f84 <GPIO_Init+0x188>)
 8000ee8:	430b      	orrs	r3, r1
 8000eea:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000eec:	4b25      	ldr	r3, [pc, #148]	; (8000f84 <GPIO_Init+0x188>)
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	7912      	ldrb	r2, [r2, #4]
 8000ef4:	4611      	mov	r1, r2
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	408a      	lsls	r2, r1
 8000efa:	4611      	mov	r1, r2
 8000efc:	4a21      	ldr	r2, [pc, #132]	; (8000f84 <GPIO_Init+0x188>)
 8000efe:	430b      	orrs	r3, r1
 8000f00:	6093      	str	r3, [r2, #8]
		}

		// 2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	791b      	ldrb	r3, [r3, #4]
 8000f06:	089b      	lsrs	r3, r3, #2
 8000f08:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	791b      	ldrb	r3, [r3, #4]
 8000f0e:	f003 0303 	and.w	r3, r3, #3
 8000f12:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a1b      	ldr	r2, [pc, #108]	; (8000f88 <GPIO_Init+0x18c>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d044      	beq.n	8000fa8 <GPIO_Init+0x1ac>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a1a      	ldr	r2, [pc, #104]	; (8000f8c <GPIO_Init+0x190>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d02b      	beq.n	8000f80 <GPIO_Init+0x184>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a18      	ldr	r2, [pc, #96]	; (8000f90 <GPIO_Init+0x194>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d024      	beq.n	8000f7c <GPIO_Init+0x180>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a17      	ldr	r2, [pc, #92]	; (8000f94 <GPIO_Init+0x198>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d01d      	beq.n	8000f78 <GPIO_Init+0x17c>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a15      	ldr	r2, [pc, #84]	; (8000f98 <GPIO_Init+0x19c>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d016      	beq.n	8000f74 <GPIO_Init+0x178>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a14      	ldr	r2, [pc, #80]	; (8000f9c <GPIO_Init+0x1a0>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d00f      	beq.n	8000f70 <GPIO_Init+0x174>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a12      	ldr	r2, [pc, #72]	; (8000fa0 <GPIO_Init+0x1a4>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d008      	beq.n	8000f6c <GPIO_Init+0x170>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a11      	ldr	r2, [pc, #68]	; (8000fa4 <GPIO_Init+0x1a8>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d101      	bne.n	8000f68 <GPIO_Init+0x16c>
 8000f64:	2307      	movs	r3, #7
 8000f66:	e020      	b.n	8000faa <GPIO_Init+0x1ae>
 8000f68:	2308      	movs	r3, #8
 8000f6a:	e01e      	b.n	8000faa <GPIO_Init+0x1ae>
 8000f6c:	2306      	movs	r3, #6
 8000f6e:	e01c      	b.n	8000faa <GPIO_Init+0x1ae>
 8000f70:	2305      	movs	r3, #5
 8000f72:	e01a      	b.n	8000faa <GPIO_Init+0x1ae>
 8000f74:	2304      	movs	r3, #4
 8000f76:	e018      	b.n	8000faa <GPIO_Init+0x1ae>
 8000f78:	2303      	movs	r3, #3
 8000f7a:	e016      	b.n	8000faa <GPIO_Init+0x1ae>
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	e014      	b.n	8000faa <GPIO_Init+0x1ae>
 8000f80:	2301      	movs	r3, #1
 8000f82:	e012      	b.n	8000faa <GPIO_Init+0x1ae>
 8000f84:	40013c00 	.word	0x40013c00
 8000f88:	40020000 	.word	0x40020000
 8000f8c:	40020400 	.word	0x40020400
 8000f90:	40020800 	.word	0x40020800
 8000f94:	40020c00 	.word	0x40020c00
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	40021400 	.word	0x40021400
 8000fa0:	40021800 	.word	0x40021800
 8000fa4:	40021c00 	.word	0x40021c00
 8000fa8:	2300      	movs	r3, #0
 8000faa:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000fac:	4b5c      	ldr	r3, [pc, #368]	; (8001120 <GPIO_Init+0x324>)
 8000fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb0:	4a5b      	ldr	r2, [pc, #364]	; (8001120 <GPIO_Init+0x324>)
 8000fb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fb6:	6453      	str	r3, [r2, #68]	; 0x44
		SYS_CFG->EXTICR[temp1] = portcode << (temp2 * 4);
 8000fb8:	7c7a      	ldrb	r2, [r7, #17]
 8000fba:	7cbb      	ldrb	r3, [r7, #18]
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	fa02 f103 	lsl.w	r1, r2, r3
 8000fc2:	4a58      	ldr	r2, [pc, #352]	; (8001124 <GPIO_Init+0x328>)
 8000fc4:	7cfb      	ldrb	r3, [r7, #19]
 8000fc6:	3302      	adds	r3, #2
 8000fc8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]


		// 3. enable the exti interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000fcc:	4b56      	ldr	r3, [pc, #344]	; (8001128 <GPIO_Init+0x32c>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	687a      	ldr	r2, [r7, #4]
 8000fd2:	7912      	ldrb	r2, [r2, #4]
 8000fd4:	4611      	mov	r1, r2
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	408a      	lsls	r2, r1
 8000fda:	4611      	mov	r1, r2
 8000fdc:	4a52      	ldr	r2, [pc, #328]	; (8001128 <GPIO_Init+0x32c>)
 8000fde:	430b      	orrs	r3, r1
 8000fe0:	6013      	str	r3, [r2, #0]
	}

	// 2. configure the speed
	temp = 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	799b      	ldrb	r3, [r3, #6]
 8000fea:	461a      	mov	r2, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	791b      	ldrb	r3, [r3, #4]
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clear
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	689a      	ldr	r2, [r3, #8]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	791b      	ldrb	r3, [r3, #4]
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	2103      	movs	r1, #3
 8001006:	fa01 f303 	lsl.w	r3, r1, r3
 800100a:	43db      	mvns	r3, r3
 800100c:	4619      	mov	r1, r3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	400a      	ands	r2, r1
 8001014:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;	// setting
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	6899      	ldr	r1, [r3, #8]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	697a      	ldr	r2, [r7, #20]
 8001022:	430a      	orrs	r2, r1
 8001024:	609a      	str	r2, [r3, #8]

	// 3. configure the pupd settings
	temp = 0;
 8001026:	2300      	movs	r3, #0
 8001028:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	79db      	ldrb	r3, [r3, #7]
 800102e:	461a      	mov	r2, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	791b      	ldrb	r3, [r3, #4]
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clear
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	68da      	ldr	r2, [r3, #12]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	791b      	ldrb	r3, [r3, #4]
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	2103      	movs	r1, #3
 800104a:	fa01 f303 	lsl.w	r3, r1, r3
 800104e:	43db      	mvns	r3, r3
 8001050:	4619      	mov	r1, r3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	400a      	ands	r2, r1
 8001058:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;	// setting
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	68d9      	ldr	r1, [r3, #12]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	697a      	ldr	r2, [r7, #20]
 8001066:	430a      	orrs	r2, r1
 8001068:	60da      	str	r2, [r3, #12]


	// 4. configure the optype
	temp = 0;
 800106a:	2300      	movs	r3, #0
 800106c:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	7a1b      	ldrb	r3, [r3, #8]
 8001072:	461a      	mov	r2, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	791b      	ldrb	r3, [r3, #4]
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x01 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clear
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	685a      	ldr	r2, [r3, #4]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	791b      	ldrb	r3, [r3, #4]
 8001088:	4619      	mov	r1, r3
 800108a:	2301      	movs	r3, #1
 800108c:	408b      	lsls	r3, r1
 800108e:	43db      	mvns	r3, r3
 8001090:	4619      	mov	r1, r3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	400a      	ands	r2, r1
 8001098:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;	// setting
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	6859      	ldr	r1, [r3, #4]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	697a      	ldr	r2, [r7, #20]
 80010a6:	430a      	orrs	r2, r1
 80010a8:	605a      	str	r2, [r3, #4]

	// 5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	795b      	ldrb	r3, [r3, #5]
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d131      	bne.n	8001116 <GPIO_Init+0x31a>
	{
		// configure the alt function register
		uint8_t temp1,temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	791b      	ldrb	r3, [r3, #4]
 80010b6:	08db      	lsrs	r3, r3, #3
 80010b8:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	791b      	ldrb	r3, [r3, #4]
 80010be:	f003 0307 	and.w	r3, r3, #7
 80010c2:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2)); // clearing
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	7c3a      	ldrb	r2, [r7, #16]
 80010ca:	3208      	adds	r2, #8
 80010cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80010d0:	7bfb      	ldrb	r3, [r7, #15]
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	220f      	movs	r2, #15
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	43db      	mvns	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	7c3a      	ldrb	r2, [r7, #16]
 80010e4:	4001      	ands	r1, r0
 80010e6:	3208      	adds	r2, #8
 80010e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2); // setting
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	7c3a      	ldrb	r2, [r7, #16]
 80010f2:	3208      	adds	r2, #8
 80010f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	7a5b      	ldrb	r3, [r3, #9]
 80010fc:	461a      	mov	r2, r3
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	4618      	mov	r0, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	7c3a      	ldrb	r2, [r7, #16]
 800110e:	4301      	orrs	r1, r0
 8001110:	3208      	adds	r2, #8
 8001112:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8001116:	bf00      	nop
 8001118:	3718      	adds	r7, #24
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40023800 	.word	0x40023800
 8001124:	40013800 	.word	0x40013800
 8001128:	40013c00 	.word	0x40013c00

0800112c <GPIO_ReadFromInputPin>:

/*
 * Data read and write
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	460b      	mov	r3, r1
 8001136:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	691a      	ldr	r2, [r3, #16]
 800113c:	78fb      	ldrb	r3, [r7, #3]
 800113e:	fa22 f303 	lsr.w	r3, r2, r3
 8001142:	b2db      	uxtb	r3, r3
 8001144:	f003 0301 	and.w	r3, r3, #1
 8001148:	73fb      	strb	r3, [r7, #15]
	return value;
 800114a:	7bfb      	ldrb	r3, [r7, #15]
}
 800114c:	4618      	mov	r0, r3
 800114e:	3714      	adds	r7, #20
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <__errno>:
 8001158:	4b01      	ldr	r3, [pc, #4]	; (8001160 <__errno+0x8>)
 800115a:	6818      	ldr	r0, [r3, #0]
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	20000018 	.word	0x20000018

08001164 <__libc_init_array>:
 8001164:	b570      	push	{r4, r5, r6, lr}
 8001166:	4d0d      	ldr	r5, [pc, #52]	; (800119c <__libc_init_array+0x38>)
 8001168:	4c0d      	ldr	r4, [pc, #52]	; (80011a0 <__libc_init_array+0x3c>)
 800116a:	1b64      	subs	r4, r4, r5
 800116c:	10a4      	asrs	r4, r4, #2
 800116e:	2600      	movs	r6, #0
 8001170:	42a6      	cmp	r6, r4
 8001172:	d109      	bne.n	8001188 <__libc_init_array+0x24>
 8001174:	4d0b      	ldr	r5, [pc, #44]	; (80011a4 <__libc_init_array+0x40>)
 8001176:	4c0c      	ldr	r4, [pc, #48]	; (80011a8 <__libc_init_array+0x44>)
 8001178:	f000 ff76 	bl	8002068 <_init>
 800117c:	1b64      	subs	r4, r4, r5
 800117e:	10a4      	asrs	r4, r4, #2
 8001180:	2600      	movs	r6, #0
 8001182:	42a6      	cmp	r6, r4
 8001184:	d105      	bne.n	8001192 <__libc_init_array+0x2e>
 8001186:	bd70      	pop	{r4, r5, r6, pc}
 8001188:	f855 3b04 	ldr.w	r3, [r5], #4
 800118c:	4798      	blx	r3
 800118e:	3601      	adds	r6, #1
 8001190:	e7ee      	b.n	8001170 <__libc_init_array+0xc>
 8001192:	f855 3b04 	ldr.w	r3, [r5], #4
 8001196:	4798      	blx	r3
 8001198:	3601      	adds	r6, #1
 800119a:	e7f2      	b.n	8001182 <__libc_init_array+0x1e>
 800119c:	08002128 	.word	0x08002128
 80011a0:	08002128 	.word	0x08002128
 80011a4:	08002128 	.word	0x08002128
 80011a8:	0800212c 	.word	0x0800212c

080011ac <memset>:
 80011ac:	4402      	add	r2, r0
 80011ae:	4603      	mov	r3, r0
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d100      	bne.n	80011b6 <memset+0xa>
 80011b4:	4770      	bx	lr
 80011b6:	f803 1b01 	strb.w	r1, [r3], #1
 80011ba:	e7f9      	b.n	80011b0 <memset+0x4>

080011bc <iprintf>:
 80011bc:	b40f      	push	{r0, r1, r2, r3}
 80011be:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <iprintf+0x2c>)
 80011c0:	b513      	push	{r0, r1, r4, lr}
 80011c2:	681c      	ldr	r4, [r3, #0]
 80011c4:	b124      	cbz	r4, 80011d0 <iprintf+0x14>
 80011c6:	69a3      	ldr	r3, [r4, #24]
 80011c8:	b913      	cbnz	r3, 80011d0 <iprintf+0x14>
 80011ca:	4620      	mov	r0, r4
 80011cc:	f000 f866 	bl	800129c <__sinit>
 80011d0:	ab05      	add	r3, sp, #20
 80011d2:	9a04      	ldr	r2, [sp, #16]
 80011d4:	68a1      	ldr	r1, [r4, #8]
 80011d6:	9301      	str	r3, [sp, #4]
 80011d8:	4620      	mov	r0, r4
 80011da:	f000 f983 	bl	80014e4 <_vfiprintf_r>
 80011de:	b002      	add	sp, #8
 80011e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80011e4:	b004      	add	sp, #16
 80011e6:	4770      	bx	lr
 80011e8:	20000018 	.word	0x20000018

080011ec <std>:
 80011ec:	2300      	movs	r3, #0
 80011ee:	b510      	push	{r4, lr}
 80011f0:	4604      	mov	r4, r0
 80011f2:	e9c0 3300 	strd	r3, r3, [r0]
 80011f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80011fa:	6083      	str	r3, [r0, #8]
 80011fc:	8181      	strh	r1, [r0, #12]
 80011fe:	6643      	str	r3, [r0, #100]	; 0x64
 8001200:	81c2      	strh	r2, [r0, #14]
 8001202:	6183      	str	r3, [r0, #24]
 8001204:	4619      	mov	r1, r3
 8001206:	2208      	movs	r2, #8
 8001208:	305c      	adds	r0, #92	; 0x5c
 800120a:	f7ff ffcf 	bl	80011ac <memset>
 800120e:	4b05      	ldr	r3, [pc, #20]	; (8001224 <std+0x38>)
 8001210:	6263      	str	r3, [r4, #36]	; 0x24
 8001212:	4b05      	ldr	r3, [pc, #20]	; (8001228 <std+0x3c>)
 8001214:	62a3      	str	r3, [r4, #40]	; 0x28
 8001216:	4b05      	ldr	r3, [pc, #20]	; (800122c <std+0x40>)
 8001218:	62e3      	str	r3, [r4, #44]	; 0x2c
 800121a:	4b05      	ldr	r3, [pc, #20]	; (8001230 <std+0x44>)
 800121c:	6224      	str	r4, [r4, #32]
 800121e:	6323      	str	r3, [r4, #48]	; 0x30
 8001220:	bd10      	pop	{r4, pc}
 8001222:	bf00      	nop
 8001224:	08001a8d 	.word	0x08001a8d
 8001228:	08001aaf 	.word	0x08001aaf
 800122c:	08001ae7 	.word	0x08001ae7
 8001230:	08001b0b 	.word	0x08001b0b

08001234 <_cleanup_r>:
 8001234:	4901      	ldr	r1, [pc, #4]	; (800123c <_cleanup_r+0x8>)
 8001236:	f000 b8af 	b.w	8001398 <_fwalk_reent>
 800123a:	bf00      	nop
 800123c:	08001de5 	.word	0x08001de5

08001240 <__sfmoreglue>:
 8001240:	b570      	push	{r4, r5, r6, lr}
 8001242:	1e4a      	subs	r2, r1, #1
 8001244:	2568      	movs	r5, #104	; 0x68
 8001246:	4355      	muls	r5, r2
 8001248:	460e      	mov	r6, r1
 800124a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800124e:	f000 f8c5 	bl	80013dc <_malloc_r>
 8001252:	4604      	mov	r4, r0
 8001254:	b140      	cbz	r0, 8001268 <__sfmoreglue+0x28>
 8001256:	2100      	movs	r1, #0
 8001258:	e9c0 1600 	strd	r1, r6, [r0]
 800125c:	300c      	adds	r0, #12
 800125e:	60a0      	str	r0, [r4, #8]
 8001260:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001264:	f7ff ffa2 	bl	80011ac <memset>
 8001268:	4620      	mov	r0, r4
 800126a:	bd70      	pop	{r4, r5, r6, pc}

0800126c <__sfp_lock_acquire>:
 800126c:	4801      	ldr	r0, [pc, #4]	; (8001274 <__sfp_lock_acquire+0x8>)
 800126e:	f000 b8b3 	b.w	80013d8 <__retarget_lock_acquire_recursive>
 8001272:	bf00      	nop
 8001274:	200000d8 	.word	0x200000d8

08001278 <__sfp_lock_release>:
 8001278:	4801      	ldr	r0, [pc, #4]	; (8001280 <__sfp_lock_release+0x8>)
 800127a:	f000 b8ae 	b.w	80013da <__retarget_lock_release_recursive>
 800127e:	bf00      	nop
 8001280:	200000d8 	.word	0x200000d8

08001284 <__sinit_lock_acquire>:
 8001284:	4801      	ldr	r0, [pc, #4]	; (800128c <__sinit_lock_acquire+0x8>)
 8001286:	f000 b8a7 	b.w	80013d8 <__retarget_lock_acquire_recursive>
 800128a:	bf00      	nop
 800128c:	200000d3 	.word	0x200000d3

08001290 <__sinit_lock_release>:
 8001290:	4801      	ldr	r0, [pc, #4]	; (8001298 <__sinit_lock_release+0x8>)
 8001292:	f000 b8a2 	b.w	80013da <__retarget_lock_release_recursive>
 8001296:	bf00      	nop
 8001298:	200000d3 	.word	0x200000d3

0800129c <__sinit>:
 800129c:	b510      	push	{r4, lr}
 800129e:	4604      	mov	r4, r0
 80012a0:	f7ff fff0 	bl	8001284 <__sinit_lock_acquire>
 80012a4:	69a3      	ldr	r3, [r4, #24]
 80012a6:	b11b      	cbz	r3, 80012b0 <__sinit+0x14>
 80012a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80012ac:	f7ff bff0 	b.w	8001290 <__sinit_lock_release>
 80012b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80012b4:	6523      	str	r3, [r4, #80]	; 0x50
 80012b6:	4b13      	ldr	r3, [pc, #76]	; (8001304 <__sinit+0x68>)
 80012b8:	4a13      	ldr	r2, [pc, #76]	; (8001308 <__sinit+0x6c>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80012be:	42a3      	cmp	r3, r4
 80012c0:	bf04      	itt	eq
 80012c2:	2301      	moveq	r3, #1
 80012c4:	61a3      	streq	r3, [r4, #24]
 80012c6:	4620      	mov	r0, r4
 80012c8:	f000 f820 	bl	800130c <__sfp>
 80012cc:	6060      	str	r0, [r4, #4]
 80012ce:	4620      	mov	r0, r4
 80012d0:	f000 f81c 	bl	800130c <__sfp>
 80012d4:	60a0      	str	r0, [r4, #8]
 80012d6:	4620      	mov	r0, r4
 80012d8:	f000 f818 	bl	800130c <__sfp>
 80012dc:	2200      	movs	r2, #0
 80012de:	60e0      	str	r0, [r4, #12]
 80012e0:	2104      	movs	r1, #4
 80012e2:	6860      	ldr	r0, [r4, #4]
 80012e4:	f7ff ff82 	bl	80011ec <std>
 80012e8:	68a0      	ldr	r0, [r4, #8]
 80012ea:	2201      	movs	r2, #1
 80012ec:	2109      	movs	r1, #9
 80012ee:	f7ff ff7d 	bl	80011ec <std>
 80012f2:	68e0      	ldr	r0, [r4, #12]
 80012f4:	2202      	movs	r2, #2
 80012f6:	2112      	movs	r1, #18
 80012f8:	f7ff ff78 	bl	80011ec <std>
 80012fc:	2301      	movs	r3, #1
 80012fe:	61a3      	str	r3, [r4, #24]
 8001300:	e7d2      	b.n	80012a8 <__sinit+0xc>
 8001302:	bf00      	nop
 8001304:	08002090 	.word	0x08002090
 8001308:	08001235 	.word	0x08001235

0800130c <__sfp>:
 800130c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800130e:	4607      	mov	r7, r0
 8001310:	f7ff ffac 	bl	800126c <__sfp_lock_acquire>
 8001314:	4b1e      	ldr	r3, [pc, #120]	; (8001390 <__sfp+0x84>)
 8001316:	681e      	ldr	r6, [r3, #0]
 8001318:	69b3      	ldr	r3, [r6, #24]
 800131a:	b913      	cbnz	r3, 8001322 <__sfp+0x16>
 800131c:	4630      	mov	r0, r6
 800131e:	f7ff ffbd 	bl	800129c <__sinit>
 8001322:	3648      	adds	r6, #72	; 0x48
 8001324:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001328:	3b01      	subs	r3, #1
 800132a:	d503      	bpl.n	8001334 <__sfp+0x28>
 800132c:	6833      	ldr	r3, [r6, #0]
 800132e:	b30b      	cbz	r3, 8001374 <__sfp+0x68>
 8001330:	6836      	ldr	r6, [r6, #0]
 8001332:	e7f7      	b.n	8001324 <__sfp+0x18>
 8001334:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001338:	b9d5      	cbnz	r5, 8001370 <__sfp+0x64>
 800133a:	4b16      	ldr	r3, [pc, #88]	; (8001394 <__sfp+0x88>)
 800133c:	60e3      	str	r3, [r4, #12]
 800133e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001342:	6665      	str	r5, [r4, #100]	; 0x64
 8001344:	f000 f847 	bl	80013d6 <__retarget_lock_init_recursive>
 8001348:	f7ff ff96 	bl	8001278 <__sfp_lock_release>
 800134c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001350:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001354:	6025      	str	r5, [r4, #0]
 8001356:	61a5      	str	r5, [r4, #24]
 8001358:	2208      	movs	r2, #8
 800135a:	4629      	mov	r1, r5
 800135c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001360:	f7ff ff24 	bl	80011ac <memset>
 8001364:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001368:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800136c:	4620      	mov	r0, r4
 800136e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001370:	3468      	adds	r4, #104	; 0x68
 8001372:	e7d9      	b.n	8001328 <__sfp+0x1c>
 8001374:	2104      	movs	r1, #4
 8001376:	4638      	mov	r0, r7
 8001378:	f7ff ff62 	bl	8001240 <__sfmoreglue>
 800137c:	4604      	mov	r4, r0
 800137e:	6030      	str	r0, [r6, #0]
 8001380:	2800      	cmp	r0, #0
 8001382:	d1d5      	bne.n	8001330 <__sfp+0x24>
 8001384:	f7ff ff78 	bl	8001278 <__sfp_lock_release>
 8001388:	230c      	movs	r3, #12
 800138a:	603b      	str	r3, [r7, #0]
 800138c:	e7ee      	b.n	800136c <__sfp+0x60>
 800138e:	bf00      	nop
 8001390:	08002090 	.word	0x08002090
 8001394:	ffff0001 	.word	0xffff0001

08001398 <_fwalk_reent>:
 8001398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800139c:	4606      	mov	r6, r0
 800139e:	4688      	mov	r8, r1
 80013a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80013a4:	2700      	movs	r7, #0
 80013a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80013aa:	f1b9 0901 	subs.w	r9, r9, #1
 80013ae:	d505      	bpl.n	80013bc <_fwalk_reent+0x24>
 80013b0:	6824      	ldr	r4, [r4, #0]
 80013b2:	2c00      	cmp	r4, #0
 80013b4:	d1f7      	bne.n	80013a6 <_fwalk_reent+0xe>
 80013b6:	4638      	mov	r0, r7
 80013b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80013bc:	89ab      	ldrh	r3, [r5, #12]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d907      	bls.n	80013d2 <_fwalk_reent+0x3a>
 80013c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80013c6:	3301      	adds	r3, #1
 80013c8:	d003      	beq.n	80013d2 <_fwalk_reent+0x3a>
 80013ca:	4629      	mov	r1, r5
 80013cc:	4630      	mov	r0, r6
 80013ce:	47c0      	blx	r8
 80013d0:	4307      	orrs	r7, r0
 80013d2:	3568      	adds	r5, #104	; 0x68
 80013d4:	e7e9      	b.n	80013aa <_fwalk_reent+0x12>

080013d6 <__retarget_lock_init_recursive>:
 80013d6:	4770      	bx	lr

080013d8 <__retarget_lock_acquire_recursive>:
 80013d8:	4770      	bx	lr

080013da <__retarget_lock_release_recursive>:
 80013da:	4770      	bx	lr

080013dc <_malloc_r>:
 80013dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013de:	1ccd      	adds	r5, r1, #3
 80013e0:	f025 0503 	bic.w	r5, r5, #3
 80013e4:	3508      	adds	r5, #8
 80013e6:	2d0c      	cmp	r5, #12
 80013e8:	bf38      	it	cc
 80013ea:	250c      	movcc	r5, #12
 80013ec:	2d00      	cmp	r5, #0
 80013ee:	4606      	mov	r6, r0
 80013f0:	db01      	blt.n	80013f6 <_malloc_r+0x1a>
 80013f2:	42a9      	cmp	r1, r5
 80013f4:	d903      	bls.n	80013fe <_malloc_r+0x22>
 80013f6:	230c      	movs	r3, #12
 80013f8:	6033      	str	r3, [r6, #0]
 80013fa:	2000      	movs	r0, #0
 80013fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013fe:	f000 fda3 	bl	8001f48 <__malloc_lock>
 8001402:	4921      	ldr	r1, [pc, #132]	; (8001488 <_malloc_r+0xac>)
 8001404:	680a      	ldr	r2, [r1, #0]
 8001406:	4614      	mov	r4, r2
 8001408:	b99c      	cbnz	r4, 8001432 <_malloc_r+0x56>
 800140a:	4f20      	ldr	r7, [pc, #128]	; (800148c <_malloc_r+0xb0>)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	b923      	cbnz	r3, 800141a <_malloc_r+0x3e>
 8001410:	4621      	mov	r1, r4
 8001412:	4630      	mov	r0, r6
 8001414:	f000 fb2a 	bl	8001a6c <_sbrk_r>
 8001418:	6038      	str	r0, [r7, #0]
 800141a:	4629      	mov	r1, r5
 800141c:	4630      	mov	r0, r6
 800141e:	f000 fb25 	bl	8001a6c <_sbrk_r>
 8001422:	1c43      	adds	r3, r0, #1
 8001424:	d123      	bne.n	800146e <_malloc_r+0x92>
 8001426:	230c      	movs	r3, #12
 8001428:	6033      	str	r3, [r6, #0]
 800142a:	4630      	mov	r0, r6
 800142c:	f000 fd92 	bl	8001f54 <__malloc_unlock>
 8001430:	e7e3      	b.n	80013fa <_malloc_r+0x1e>
 8001432:	6823      	ldr	r3, [r4, #0]
 8001434:	1b5b      	subs	r3, r3, r5
 8001436:	d417      	bmi.n	8001468 <_malloc_r+0x8c>
 8001438:	2b0b      	cmp	r3, #11
 800143a:	d903      	bls.n	8001444 <_malloc_r+0x68>
 800143c:	6023      	str	r3, [r4, #0]
 800143e:	441c      	add	r4, r3
 8001440:	6025      	str	r5, [r4, #0]
 8001442:	e004      	b.n	800144e <_malloc_r+0x72>
 8001444:	6863      	ldr	r3, [r4, #4]
 8001446:	42a2      	cmp	r2, r4
 8001448:	bf0c      	ite	eq
 800144a:	600b      	streq	r3, [r1, #0]
 800144c:	6053      	strne	r3, [r2, #4]
 800144e:	4630      	mov	r0, r6
 8001450:	f000 fd80 	bl	8001f54 <__malloc_unlock>
 8001454:	f104 000b 	add.w	r0, r4, #11
 8001458:	1d23      	adds	r3, r4, #4
 800145a:	f020 0007 	bic.w	r0, r0, #7
 800145e:	1ac2      	subs	r2, r0, r3
 8001460:	d0cc      	beq.n	80013fc <_malloc_r+0x20>
 8001462:	1a1b      	subs	r3, r3, r0
 8001464:	50a3      	str	r3, [r4, r2]
 8001466:	e7c9      	b.n	80013fc <_malloc_r+0x20>
 8001468:	4622      	mov	r2, r4
 800146a:	6864      	ldr	r4, [r4, #4]
 800146c:	e7cc      	b.n	8001408 <_malloc_r+0x2c>
 800146e:	1cc4      	adds	r4, r0, #3
 8001470:	f024 0403 	bic.w	r4, r4, #3
 8001474:	42a0      	cmp	r0, r4
 8001476:	d0e3      	beq.n	8001440 <_malloc_r+0x64>
 8001478:	1a21      	subs	r1, r4, r0
 800147a:	4630      	mov	r0, r6
 800147c:	f000 faf6 	bl	8001a6c <_sbrk_r>
 8001480:	3001      	adds	r0, #1
 8001482:	d1dd      	bne.n	8001440 <_malloc_r+0x64>
 8001484:	e7cf      	b.n	8001426 <_malloc_r+0x4a>
 8001486:	bf00      	nop
 8001488:	2000009c 	.word	0x2000009c
 800148c:	200000a0 	.word	0x200000a0

08001490 <__sfputc_r>:
 8001490:	6893      	ldr	r3, [r2, #8]
 8001492:	3b01      	subs	r3, #1
 8001494:	2b00      	cmp	r3, #0
 8001496:	b410      	push	{r4}
 8001498:	6093      	str	r3, [r2, #8]
 800149a:	da08      	bge.n	80014ae <__sfputc_r+0x1e>
 800149c:	6994      	ldr	r4, [r2, #24]
 800149e:	42a3      	cmp	r3, r4
 80014a0:	db01      	blt.n	80014a6 <__sfputc_r+0x16>
 80014a2:	290a      	cmp	r1, #10
 80014a4:	d103      	bne.n	80014ae <__sfputc_r+0x1e>
 80014a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80014aa:	f000 bb33 	b.w	8001b14 <__swbuf_r>
 80014ae:	6813      	ldr	r3, [r2, #0]
 80014b0:	1c58      	adds	r0, r3, #1
 80014b2:	6010      	str	r0, [r2, #0]
 80014b4:	7019      	strb	r1, [r3, #0]
 80014b6:	4608      	mov	r0, r1
 80014b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80014bc:	4770      	bx	lr

080014be <__sfputs_r>:
 80014be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014c0:	4606      	mov	r6, r0
 80014c2:	460f      	mov	r7, r1
 80014c4:	4614      	mov	r4, r2
 80014c6:	18d5      	adds	r5, r2, r3
 80014c8:	42ac      	cmp	r4, r5
 80014ca:	d101      	bne.n	80014d0 <__sfputs_r+0x12>
 80014cc:	2000      	movs	r0, #0
 80014ce:	e007      	b.n	80014e0 <__sfputs_r+0x22>
 80014d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80014d4:	463a      	mov	r2, r7
 80014d6:	4630      	mov	r0, r6
 80014d8:	f7ff ffda 	bl	8001490 <__sfputc_r>
 80014dc:	1c43      	adds	r3, r0, #1
 80014de:	d1f3      	bne.n	80014c8 <__sfputs_r+0xa>
 80014e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080014e4 <_vfiprintf_r>:
 80014e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014e8:	460d      	mov	r5, r1
 80014ea:	b09d      	sub	sp, #116	; 0x74
 80014ec:	4614      	mov	r4, r2
 80014ee:	4698      	mov	r8, r3
 80014f0:	4606      	mov	r6, r0
 80014f2:	b118      	cbz	r0, 80014fc <_vfiprintf_r+0x18>
 80014f4:	6983      	ldr	r3, [r0, #24]
 80014f6:	b90b      	cbnz	r3, 80014fc <_vfiprintf_r+0x18>
 80014f8:	f7ff fed0 	bl	800129c <__sinit>
 80014fc:	4b89      	ldr	r3, [pc, #548]	; (8001724 <_vfiprintf_r+0x240>)
 80014fe:	429d      	cmp	r5, r3
 8001500:	d11b      	bne.n	800153a <_vfiprintf_r+0x56>
 8001502:	6875      	ldr	r5, [r6, #4]
 8001504:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001506:	07d9      	lsls	r1, r3, #31
 8001508:	d405      	bmi.n	8001516 <_vfiprintf_r+0x32>
 800150a:	89ab      	ldrh	r3, [r5, #12]
 800150c:	059a      	lsls	r2, r3, #22
 800150e:	d402      	bmi.n	8001516 <_vfiprintf_r+0x32>
 8001510:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001512:	f7ff ff61 	bl	80013d8 <__retarget_lock_acquire_recursive>
 8001516:	89ab      	ldrh	r3, [r5, #12]
 8001518:	071b      	lsls	r3, r3, #28
 800151a:	d501      	bpl.n	8001520 <_vfiprintf_r+0x3c>
 800151c:	692b      	ldr	r3, [r5, #16]
 800151e:	b9eb      	cbnz	r3, 800155c <_vfiprintf_r+0x78>
 8001520:	4629      	mov	r1, r5
 8001522:	4630      	mov	r0, r6
 8001524:	f000 fb5a 	bl	8001bdc <__swsetup_r>
 8001528:	b1c0      	cbz	r0, 800155c <_vfiprintf_r+0x78>
 800152a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800152c:	07dc      	lsls	r4, r3, #31
 800152e:	d50e      	bpl.n	800154e <_vfiprintf_r+0x6a>
 8001530:	f04f 30ff 	mov.w	r0, #4294967295
 8001534:	b01d      	add	sp, #116	; 0x74
 8001536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800153a:	4b7b      	ldr	r3, [pc, #492]	; (8001728 <_vfiprintf_r+0x244>)
 800153c:	429d      	cmp	r5, r3
 800153e:	d101      	bne.n	8001544 <_vfiprintf_r+0x60>
 8001540:	68b5      	ldr	r5, [r6, #8]
 8001542:	e7df      	b.n	8001504 <_vfiprintf_r+0x20>
 8001544:	4b79      	ldr	r3, [pc, #484]	; (800172c <_vfiprintf_r+0x248>)
 8001546:	429d      	cmp	r5, r3
 8001548:	bf08      	it	eq
 800154a:	68f5      	ldreq	r5, [r6, #12]
 800154c:	e7da      	b.n	8001504 <_vfiprintf_r+0x20>
 800154e:	89ab      	ldrh	r3, [r5, #12]
 8001550:	0598      	lsls	r0, r3, #22
 8001552:	d4ed      	bmi.n	8001530 <_vfiprintf_r+0x4c>
 8001554:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001556:	f7ff ff40 	bl	80013da <__retarget_lock_release_recursive>
 800155a:	e7e9      	b.n	8001530 <_vfiprintf_r+0x4c>
 800155c:	2300      	movs	r3, #0
 800155e:	9309      	str	r3, [sp, #36]	; 0x24
 8001560:	2320      	movs	r3, #32
 8001562:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001566:	f8cd 800c 	str.w	r8, [sp, #12]
 800156a:	2330      	movs	r3, #48	; 0x30
 800156c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001730 <_vfiprintf_r+0x24c>
 8001570:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001574:	f04f 0901 	mov.w	r9, #1
 8001578:	4623      	mov	r3, r4
 800157a:	469a      	mov	sl, r3
 800157c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001580:	b10a      	cbz	r2, 8001586 <_vfiprintf_r+0xa2>
 8001582:	2a25      	cmp	r2, #37	; 0x25
 8001584:	d1f9      	bne.n	800157a <_vfiprintf_r+0x96>
 8001586:	ebba 0b04 	subs.w	fp, sl, r4
 800158a:	d00b      	beq.n	80015a4 <_vfiprintf_r+0xc0>
 800158c:	465b      	mov	r3, fp
 800158e:	4622      	mov	r2, r4
 8001590:	4629      	mov	r1, r5
 8001592:	4630      	mov	r0, r6
 8001594:	f7ff ff93 	bl	80014be <__sfputs_r>
 8001598:	3001      	adds	r0, #1
 800159a:	f000 80aa 	beq.w	80016f2 <_vfiprintf_r+0x20e>
 800159e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80015a0:	445a      	add	r2, fp
 80015a2:	9209      	str	r2, [sp, #36]	; 0x24
 80015a4:	f89a 3000 	ldrb.w	r3, [sl]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	f000 80a2 	beq.w	80016f2 <_vfiprintf_r+0x20e>
 80015ae:	2300      	movs	r3, #0
 80015b0:	f04f 32ff 	mov.w	r2, #4294967295
 80015b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80015b8:	f10a 0a01 	add.w	sl, sl, #1
 80015bc:	9304      	str	r3, [sp, #16]
 80015be:	9307      	str	r3, [sp, #28]
 80015c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80015c4:	931a      	str	r3, [sp, #104]	; 0x68
 80015c6:	4654      	mov	r4, sl
 80015c8:	2205      	movs	r2, #5
 80015ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80015ce:	4858      	ldr	r0, [pc, #352]	; (8001730 <_vfiprintf_r+0x24c>)
 80015d0:	f7fe fe0e 	bl	80001f0 <memchr>
 80015d4:	9a04      	ldr	r2, [sp, #16]
 80015d6:	b9d8      	cbnz	r0, 8001610 <_vfiprintf_r+0x12c>
 80015d8:	06d1      	lsls	r1, r2, #27
 80015da:	bf44      	itt	mi
 80015dc:	2320      	movmi	r3, #32
 80015de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80015e2:	0713      	lsls	r3, r2, #28
 80015e4:	bf44      	itt	mi
 80015e6:	232b      	movmi	r3, #43	; 0x2b
 80015e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80015ec:	f89a 3000 	ldrb.w	r3, [sl]
 80015f0:	2b2a      	cmp	r3, #42	; 0x2a
 80015f2:	d015      	beq.n	8001620 <_vfiprintf_r+0x13c>
 80015f4:	9a07      	ldr	r2, [sp, #28]
 80015f6:	4654      	mov	r4, sl
 80015f8:	2000      	movs	r0, #0
 80015fa:	f04f 0c0a 	mov.w	ip, #10
 80015fe:	4621      	mov	r1, r4
 8001600:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001604:	3b30      	subs	r3, #48	; 0x30
 8001606:	2b09      	cmp	r3, #9
 8001608:	d94e      	bls.n	80016a8 <_vfiprintf_r+0x1c4>
 800160a:	b1b0      	cbz	r0, 800163a <_vfiprintf_r+0x156>
 800160c:	9207      	str	r2, [sp, #28]
 800160e:	e014      	b.n	800163a <_vfiprintf_r+0x156>
 8001610:	eba0 0308 	sub.w	r3, r0, r8
 8001614:	fa09 f303 	lsl.w	r3, r9, r3
 8001618:	4313      	orrs	r3, r2
 800161a:	9304      	str	r3, [sp, #16]
 800161c:	46a2      	mov	sl, r4
 800161e:	e7d2      	b.n	80015c6 <_vfiprintf_r+0xe2>
 8001620:	9b03      	ldr	r3, [sp, #12]
 8001622:	1d19      	adds	r1, r3, #4
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	9103      	str	r1, [sp, #12]
 8001628:	2b00      	cmp	r3, #0
 800162a:	bfbb      	ittet	lt
 800162c:	425b      	neglt	r3, r3
 800162e:	f042 0202 	orrlt.w	r2, r2, #2
 8001632:	9307      	strge	r3, [sp, #28]
 8001634:	9307      	strlt	r3, [sp, #28]
 8001636:	bfb8      	it	lt
 8001638:	9204      	strlt	r2, [sp, #16]
 800163a:	7823      	ldrb	r3, [r4, #0]
 800163c:	2b2e      	cmp	r3, #46	; 0x2e
 800163e:	d10c      	bne.n	800165a <_vfiprintf_r+0x176>
 8001640:	7863      	ldrb	r3, [r4, #1]
 8001642:	2b2a      	cmp	r3, #42	; 0x2a
 8001644:	d135      	bne.n	80016b2 <_vfiprintf_r+0x1ce>
 8001646:	9b03      	ldr	r3, [sp, #12]
 8001648:	1d1a      	adds	r2, r3, #4
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	9203      	str	r2, [sp, #12]
 800164e:	2b00      	cmp	r3, #0
 8001650:	bfb8      	it	lt
 8001652:	f04f 33ff 	movlt.w	r3, #4294967295
 8001656:	3402      	adds	r4, #2
 8001658:	9305      	str	r3, [sp, #20]
 800165a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001740 <_vfiprintf_r+0x25c>
 800165e:	7821      	ldrb	r1, [r4, #0]
 8001660:	2203      	movs	r2, #3
 8001662:	4650      	mov	r0, sl
 8001664:	f7fe fdc4 	bl	80001f0 <memchr>
 8001668:	b140      	cbz	r0, 800167c <_vfiprintf_r+0x198>
 800166a:	2340      	movs	r3, #64	; 0x40
 800166c:	eba0 000a 	sub.w	r0, r0, sl
 8001670:	fa03 f000 	lsl.w	r0, r3, r0
 8001674:	9b04      	ldr	r3, [sp, #16]
 8001676:	4303      	orrs	r3, r0
 8001678:	3401      	adds	r4, #1
 800167a:	9304      	str	r3, [sp, #16]
 800167c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001680:	482c      	ldr	r0, [pc, #176]	; (8001734 <_vfiprintf_r+0x250>)
 8001682:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001686:	2206      	movs	r2, #6
 8001688:	f7fe fdb2 	bl	80001f0 <memchr>
 800168c:	2800      	cmp	r0, #0
 800168e:	d03f      	beq.n	8001710 <_vfiprintf_r+0x22c>
 8001690:	4b29      	ldr	r3, [pc, #164]	; (8001738 <_vfiprintf_r+0x254>)
 8001692:	bb1b      	cbnz	r3, 80016dc <_vfiprintf_r+0x1f8>
 8001694:	9b03      	ldr	r3, [sp, #12]
 8001696:	3307      	adds	r3, #7
 8001698:	f023 0307 	bic.w	r3, r3, #7
 800169c:	3308      	adds	r3, #8
 800169e:	9303      	str	r3, [sp, #12]
 80016a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80016a2:	443b      	add	r3, r7
 80016a4:	9309      	str	r3, [sp, #36]	; 0x24
 80016a6:	e767      	b.n	8001578 <_vfiprintf_r+0x94>
 80016a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80016ac:	460c      	mov	r4, r1
 80016ae:	2001      	movs	r0, #1
 80016b0:	e7a5      	b.n	80015fe <_vfiprintf_r+0x11a>
 80016b2:	2300      	movs	r3, #0
 80016b4:	3401      	adds	r4, #1
 80016b6:	9305      	str	r3, [sp, #20]
 80016b8:	4619      	mov	r1, r3
 80016ba:	f04f 0c0a 	mov.w	ip, #10
 80016be:	4620      	mov	r0, r4
 80016c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80016c4:	3a30      	subs	r2, #48	; 0x30
 80016c6:	2a09      	cmp	r2, #9
 80016c8:	d903      	bls.n	80016d2 <_vfiprintf_r+0x1ee>
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d0c5      	beq.n	800165a <_vfiprintf_r+0x176>
 80016ce:	9105      	str	r1, [sp, #20]
 80016d0:	e7c3      	b.n	800165a <_vfiprintf_r+0x176>
 80016d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80016d6:	4604      	mov	r4, r0
 80016d8:	2301      	movs	r3, #1
 80016da:	e7f0      	b.n	80016be <_vfiprintf_r+0x1da>
 80016dc:	ab03      	add	r3, sp, #12
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	462a      	mov	r2, r5
 80016e2:	4b16      	ldr	r3, [pc, #88]	; (800173c <_vfiprintf_r+0x258>)
 80016e4:	a904      	add	r1, sp, #16
 80016e6:	4630      	mov	r0, r6
 80016e8:	f3af 8000 	nop.w
 80016ec:	4607      	mov	r7, r0
 80016ee:	1c78      	adds	r0, r7, #1
 80016f0:	d1d6      	bne.n	80016a0 <_vfiprintf_r+0x1bc>
 80016f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80016f4:	07d9      	lsls	r1, r3, #31
 80016f6:	d405      	bmi.n	8001704 <_vfiprintf_r+0x220>
 80016f8:	89ab      	ldrh	r3, [r5, #12]
 80016fa:	059a      	lsls	r2, r3, #22
 80016fc:	d402      	bmi.n	8001704 <_vfiprintf_r+0x220>
 80016fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001700:	f7ff fe6b 	bl	80013da <__retarget_lock_release_recursive>
 8001704:	89ab      	ldrh	r3, [r5, #12]
 8001706:	065b      	lsls	r3, r3, #25
 8001708:	f53f af12 	bmi.w	8001530 <_vfiprintf_r+0x4c>
 800170c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800170e:	e711      	b.n	8001534 <_vfiprintf_r+0x50>
 8001710:	ab03      	add	r3, sp, #12
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	462a      	mov	r2, r5
 8001716:	4b09      	ldr	r3, [pc, #36]	; (800173c <_vfiprintf_r+0x258>)
 8001718:	a904      	add	r1, sp, #16
 800171a:	4630      	mov	r0, r6
 800171c:	f000 f880 	bl	8001820 <_printf_i>
 8001720:	e7e4      	b.n	80016ec <_vfiprintf_r+0x208>
 8001722:	bf00      	nop
 8001724:	080020b4 	.word	0x080020b4
 8001728:	080020d4 	.word	0x080020d4
 800172c:	08002094 	.word	0x08002094
 8001730:	080020f4 	.word	0x080020f4
 8001734:	080020fe 	.word	0x080020fe
 8001738:	00000000 	.word	0x00000000
 800173c:	080014bf 	.word	0x080014bf
 8001740:	080020fa 	.word	0x080020fa

08001744 <_printf_common>:
 8001744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001748:	4616      	mov	r6, r2
 800174a:	4699      	mov	r9, r3
 800174c:	688a      	ldr	r2, [r1, #8]
 800174e:	690b      	ldr	r3, [r1, #16]
 8001750:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001754:	4293      	cmp	r3, r2
 8001756:	bfb8      	it	lt
 8001758:	4613      	movlt	r3, r2
 800175a:	6033      	str	r3, [r6, #0]
 800175c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001760:	4607      	mov	r7, r0
 8001762:	460c      	mov	r4, r1
 8001764:	b10a      	cbz	r2, 800176a <_printf_common+0x26>
 8001766:	3301      	adds	r3, #1
 8001768:	6033      	str	r3, [r6, #0]
 800176a:	6823      	ldr	r3, [r4, #0]
 800176c:	0699      	lsls	r1, r3, #26
 800176e:	bf42      	ittt	mi
 8001770:	6833      	ldrmi	r3, [r6, #0]
 8001772:	3302      	addmi	r3, #2
 8001774:	6033      	strmi	r3, [r6, #0]
 8001776:	6825      	ldr	r5, [r4, #0]
 8001778:	f015 0506 	ands.w	r5, r5, #6
 800177c:	d106      	bne.n	800178c <_printf_common+0x48>
 800177e:	f104 0a19 	add.w	sl, r4, #25
 8001782:	68e3      	ldr	r3, [r4, #12]
 8001784:	6832      	ldr	r2, [r6, #0]
 8001786:	1a9b      	subs	r3, r3, r2
 8001788:	42ab      	cmp	r3, r5
 800178a:	dc26      	bgt.n	80017da <_printf_common+0x96>
 800178c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001790:	1e13      	subs	r3, r2, #0
 8001792:	6822      	ldr	r2, [r4, #0]
 8001794:	bf18      	it	ne
 8001796:	2301      	movne	r3, #1
 8001798:	0692      	lsls	r2, r2, #26
 800179a:	d42b      	bmi.n	80017f4 <_printf_common+0xb0>
 800179c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80017a0:	4649      	mov	r1, r9
 80017a2:	4638      	mov	r0, r7
 80017a4:	47c0      	blx	r8
 80017a6:	3001      	adds	r0, #1
 80017a8:	d01e      	beq.n	80017e8 <_printf_common+0xa4>
 80017aa:	6823      	ldr	r3, [r4, #0]
 80017ac:	68e5      	ldr	r5, [r4, #12]
 80017ae:	6832      	ldr	r2, [r6, #0]
 80017b0:	f003 0306 	and.w	r3, r3, #6
 80017b4:	2b04      	cmp	r3, #4
 80017b6:	bf08      	it	eq
 80017b8:	1aad      	subeq	r5, r5, r2
 80017ba:	68a3      	ldr	r3, [r4, #8]
 80017bc:	6922      	ldr	r2, [r4, #16]
 80017be:	bf0c      	ite	eq
 80017c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80017c4:	2500      	movne	r5, #0
 80017c6:	4293      	cmp	r3, r2
 80017c8:	bfc4      	itt	gt
 80017ca:	1a9b      	subgt	r3, r3, r2
 80017cc:	18ed      	addgt	r5, r5, r3
 80017ce:	2600      	movs	r6, #0
 80017d0:	341a      	adds	r4, #26
 80017d2:	42b5      	cmp	r5, r6
 80017d4:	d11a      	bne.n	800180c <_printf_common+0xc8>
 80017d6:	2000      	movs	r0, #0
 80017d8:	e008      	b.n	80017ec <_printf_common+0xa8>
 80017da:	2301      	movs	r3, #1
 80017dc:	4652      	mov	r2, sl
 80017de:	4649      	mov	r1, r9
 80017e0:	4638      	mov	r0, r7
 80017e2:	47c0      	blx	r8
 80017e4:	3001      	adds	r0, #1
 80017e6:	d103      	bne.n	80017f0 <_printf_common+0xac>
 80017e8:	f04f 30ff 	mov.w	r0, #4294967295
 80017ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80017f0:	3501      	adds	r5, #1
 80017f2:	e7c6      	b.n	8001782 <_printf_common+0x3e>
 80017f4:	18e1      	adds	r1, r4, r3
 80017f6:	1c5a      	adds	r2, r3, #1
 80017f8:	2030      	movs	r0, #48	; 0x30
 80017fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80017fe:	4422      	add	r2, r4
 8001800:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001804:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001808:	3302      	adds	r3, #2
 800180a:	e7c7      	b.n	800179c <_printf_common+0x58>
 800180c:	2301      	movs	r3, #1
 800180e:	4622      	mov	r2, r4
 8001810:	4649      	mov	r1, r9
 8001812:	4638      	mov	r0, r7
 8001814:	47c0      	blx	r8
 8001816:	3001      	adds	r0, #1
 8001818:	d0e6      	beq.n	80017e8 <_printf_common+0xa4>
 800181a:	3601      	adds	r6, #1
 800181c:	e7d9      	b.n	80017d2 <_printf_common+0x8e>
	...

08001820 <_printf_i>:
 8001820:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001824:	460c      	mov	r4, r1
 8001826:	4691      	mov	r9, r2
 8001828:	7e27      	ldrb	r7, [r4, #24]
 800182a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800182c:	2f78      	cmp	r7, #120	; 0x78
 800182e:	4680      	mov	r8, r0
 8001830:	469a      	mov	sl, r3
 8001832:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001836:	d807      	bhi.n	8001848 <_printf_i+0x28>
 8001838:	2f62      	cmp	r7, #98	; 0x62
 800183a:	d80a      	bhi.n	8001852 <_printf_i+0x32>
 800183c:	2f00      	cmp	r7, #0
 800183e:	f000 80d8 	beq.w	80019f2 <_printf_i+0x1d2>
 8001842:	2f58      	cmp	r7, #88	; 0x58
 8001844:	f000 80a3 	beq.w	800198e <_printf_i+0x16e>
 8001848:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800184c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001850:	e03a      	b.n	80018c8 <_printf_i+0xa8>
 8001852:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001856:	2b15      	cmp	r3, #21
 8001858:	d8f6      	bhi.n	8001848 <_printf_i+0x28>
 800185a:	a001      	add	r0, pc, #4	; (adr r0, 8001860 <_printf_i+0x40>)
 800185c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001860:	080018b9 	.word	0x080018b9
 8001864:	080018cd 	.word	0x080018cd
 8001868:	08001849 	.word	0x08001849
 800186c:	08001849 	.word	0x08001849
 8001870:	08001849 	.word	0x08001849
 8001874:	08001849 	.word	0x08001849
 8001878:	080018cd 	.word	0x080018cd
 800187c:	08001849 	.word	0x08001849
 8001880:	08001849 	.word	0x08001849
 8001884:	08001849 	.word	0x08001849
 8001888:	08001849 	.word	0x08001849
 800188c:	080019d9 	.word	0x080019d9
 8001890:	080018fd 	.word	0x080018fd
 8001894:	080019bb 	.word	0x080019bb
 8001898:	08001849 	.word	0x08001849
 800189c:	08001849 	.word	0x08001849
 80018a0:	080019fb 	.word	0x080019fb
 80018a4:	08001849 	.word	0x08001849
 80018a8:	080018fd 	.word	0x080018fd
 80018ac:	08001849 	.word	0x08001849
 80018b0:	08001849 	.word	0x08001849
 80018b4:	080019c3 	.word	0x080019c3
 80018b8:	680b      	ldr	r3, [r1, #0]
 80018ba:	1d1a      	adds	r2, r3, #4
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	600a      	str	r2, [r1, #0]
 80018c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80018c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80018c8:	2301      	movs	r3, #1
 80018ca:	e0a3      	b.n	8001a14 <_printf_i+0x1f4>
 80018cc:	6825      	ldr	r5, [r4, #0]
 80018ce:	6808      	ldr	r0, [r1, #0]
 80018d0:	062e      	lsls	r6, r5, #24
 80018d2:	f100 0304 	add.w	r3, r0, #4
 80018d6:	d50a      	bpl.n	80018ee <_printf_i+0xce>
 80018d8:	6805      	ldr	r5, [r0, #0]
 80018da:	600b      	str	r3, [r1, #0]
 80018dc:	2d00      	cmp	r5, #0
 80018de:	da03      	bge.n	80018e8 <_printf_i+0xc8>
 80018e0:	232d      	movs	r3, #45	; 0x2d
 80018e2:	426d      	negs	r5, r5
 80018e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80018e8:	485e      	ldr	r0, [pc, #376]	; (8001a64 <_printf_i+0x244>)
 80018ea:	230a      	movs	r3, #10
 80018ec:	e019      	b.n	8001922 <_printf_i+0x102>
 80018ee:	f015 0f40 	tst.w	r5, #64	; 0x40
 80018f2:	6805      	ldr	r5, [r0, #0]
 80018f4:	600b      	str	r3, [r1, #0]
 80018f6:	bf18      	it	ne
 80018f8:	b22d      	sxthne	r5, r5
 80018fa:	e7ef      	b.n	80018dc <_printf_i+0xbc>
 80018fc:	680b      	ldr	r3, [r1, #0]
 80018fe:	6825      	ldr	r5, [r4, #0]
 8001900:	1d18      	adds	r0, r3, #4
 8001902:	6008      	str	r0, [r1, #0]
 8001904:	0628      	lsls	r0, r5, #24
 8001906:	d501      	bpl.n	800190c <_printf_i+0xec>
 8001908:	681d      	ldr	r5, [r3, #0]
 800190a:	e002      	b.n	8001912 <_printf_i+0xf2>
 800190c:	0669      	lsls	r1, r5, #25
 800190e:	d5fb      	bpl.n	8001908 <_printf_i+0xe8>
 8001910:	881d      	ldrh	r5, [r3, #0]
 8001912:	4854      	ldr	r0, [pc, #336]	; (8001a64 <_printf_i+0x244>)
 8001914:	2f6f      	cmp	r7, #111	; 0x6f
 8001916:	bf0c      	ite	eq
 8001918:	2308      	moveq	r3, #8
 800191a:	230a      	movne	r3, #10
 800191c:	2100      	movs	r1, #0
 800191e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001922:	6866      	ldr	r6, [r4, #4]
 8001924:	60a6      	str	r6, [r4, #8]
 8001926:	2e00      	cmp	r6, #0
 8001928:	bfa2      	ittt	ge
 800192a:	6821      	ldrge	r1, [r4, #0]
 800192c:	f021 0104 	bicge.w	r1, r1, #4
 8001930:	6021      	strge	r1, [r4, #0]
 8001932:	b90d      	cbnz	r5, 8001938 <_printf_i+0x118>
 8001934:	2e00      	cmp	r6, #0
 8001936:	d04d      	beq.n	80019d4 <_printf_i+0x1b4>
 8001938:	4616      	mov	r6, r2
 800193a:	fbb5 f1f3 	udiv	r1, r5, r3
 800193e:	fb03 5711 	mls	r7, r3, r1, r5
 8001942:	5dc7      	ldrb	r7, [r0, r7]
 8001944:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001948:	462f      	mov	r7, r5
 800194a:	42bb      	cmp	r3, r7
 800194c:	460d      	mov	r5, r1
 800194e:	d9f4      	bls.n	800193a <_printf_i+0x11a>
 8001950:	2b08      	cmp	r3, #8
 8001952:	d10b      	bne.n	800196c <_printf_i+0x14c>
 8001954:	6823      	ldr	r3, [r4, #0]
 8001956:	07df      	lsls	r7, r3, #31
 8001958:	d508      	bpl.n	800196c <_printf_i+0x14c>
 800195a:	6923      	ldr	r3, [r4, #16]
 800195c:	6861      	ldr	r1, [r4, #4]
 800195e:	4299      	cmp	r1, r3
 8001960:	bfde      	ittt	le
 8001962:	2330      	movle	r3, #48	; 0x30
 8001964:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001968:	f106 36ff 	addle.w	r6, r6, #4294967295
 800196c:	1b92      	subs	r2, r2, r6
 800196e:	6122      	str	r2, [r4, #16]
 8001970:	f8cd a000 	str.w	sl, [sp]
 8001974:	464b      	mov	r3, r9
 8001976:	aa03      	add	r2, sp, #12
 8001978:	4621      	mov	r1, r4
 800197a:	4640      	mov	r0, r8
 800197c:	f7ff fee2 	bl	8001744 <_printf_common>
 8001980:	3001      	adds	r0, #1
 8001982:	d14c      	bne.n	8001a1e <_printf_i+0x1fe>
 8001984:	f04f 30ff 	mov.w	r0, #4294967295
 8001988:	b004      	add	sp, #16
 800198a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800198e:	4835      	ldr	r0, [pc, #212]	; (8001a64 <_printf_i+0x244>)
 8001990:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001994:	6823      	ldr	r3, [r4, #0]
 8001996:	680e      	ldr	r6, [r1, #0]
 8001998:	061f      	lsls	r7, r3, #24
 800199a:	f856 5b04 	ldr.w	r5, [r6], #4
 800199e:	600e      	str	r6, [r1, #0]
 80019a0:	d514      	bpl.n	80019cc <_printf_i+0x1ac>
 80019a2:	07d9      	lsls	r1, r3, #31
 80019a4:	bf44      	itt	mi
 80019a6:	f043 0320 	orrmi.w	r3, r3, #32
 80019aa:	6023      	strmi	r3, [r4, #0]
 80019ac:	b91d      	cbnz	r5, 80019b6 <_printf_i+0x196>
 80019ae:	6823      	ldr	r3, [r4, #0]
 80019b0:	f023 0320 	bic.w	r3, r3, #32
 80019b4:	6023      	str	r3, [r4, #0]
 80019b6:	2310      	movs	r3, #16
 80019b8:	e7b0      	b.n	800191c <_printf_i+0xfc>
 80019ba:	6823      	ldr	r3, [r4, #0]
 80019bc:	f043 0320 	orr.w	r3, r3, #32
 80019c0:	6023      	str	r3, [r4, #0]
 80019c2:	2378      	movs	r3, #120	; 0x78
 80019c4:	4828      	ldr	r0, [pc, #160]	; (8001a68 <_printf_i+0x248>)
 80019c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80019ca:	e7e3      	b.n	8001994 <_printf_i+0x174>
 80019cc:	065e      	lsls	r6, r3, #25
 80019ce:	bf48      	it	mi
 80019d0:	b2ad      	uxthmi	r5, r5
 80019d2:	e7e6      	b.n	80019a2 <_printf_i+0x182>
 80019d4:	4616      	mov	r6, r2
 80019d6:	e7bb      	b.n	8001950 <_printf_i+0x130>
 80019d8:	680b      	ldr	r3, [r1, #0]
 80019da:	6826      	ldr	r6, [r4, #0]
 80019dc:	6960      	ldr	r0, [r4, #20]
 80019de:	1d1d      	adds	r5, r3, #4
 80019e0:	600d      	str	r5, [r1, #0]
 80019e2:	0635      	lsls	r5, r6, #24
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	d501      	bpl.n	80019ec <_printf_i+0x1cc>
 80019e8:	6018      	str	r0, [r3, #0]
 80019ea:	e002      	b.n	80019f2 <_printf_i+0x1d2>
 80019ec:	0671      	lsls	r1, r6, #25
 80019ee:	d5fb      	bpl.n	80019e8 <_printf_i+0x1c8>
 80019f0:	8018      	strh	r0, [r3, #0]
 80019f2:	2300      	movs	r3, #0
 80019f4:	6123      	str	r3, [r4, #16]
 80019f6:	4616      	mov	r6, r2
 80019f8:	e7ba      	b.n	8001970 <_printf_i+0x150>
 80019fa:	680b      	ldr	r3, [r1, #0]
 80019fc:	1d1a      	adds	r2, r3, #4
 80019fe:	600a      	str	r2, [r1, #0]
 8001a00:	681e      	ldr	r6, [r3, #0]
 8001a02:	6862      	ldr	r2, [r4, #4]
 8001a04:	2100      	movs	r1, #0
 8001a06:	4630      	mov	r0, r6
 8001a08:	f7fe fbf2 	bl	80001f0 <memchr>
 8001a0c:	b108      	cbz	r0, 8001a12 <_printf_i+0x1f2>
 8001a0e:	1b80      	subs	r0, r0, r6
 8001a10:	6060      	str	r0, [r4, #4]
 8001a12:	6863      	ldr	r3, [r4, #4]
 8001a14:	6123      	str	r3, [r4, #16]
 8001a16:	2300      	movs	r3, #0
 8001a18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001a1c:	e7a8      	b.n	8001970 <_printf_i+0x150>
 8001a1e:	6923      	ldr	r3, [r4, #16]
 8001a20:	4632      	mov	r2, r6
 8001a22:	4649      	mov	r1, r9
 8001a24:	4640      	mov	r0, r8
 8001a26:	47d0      	blx	sl
 8001a28:	3001      	adds	r0, #1
 8001a2a:	d0ab      	beq.n	8001984 <_printf_i+0x164>
 8001a2c:	6823      	ldr	r3, [r4, #0]
 8001a2e:	079b      	lsls	r3, r3, #30
 8001a30:	d413      	bmi.n	8001a5a <_printf_i+0x23a>
 8001a32:	68e0      	ldr	r0, [r4, #12]
 8001a34:	9b03      	ldr	r3, [sp, #12]
 8001a36:	4298      	cmp	r0, r3
 8001a38:	bfb8      	it	lt
 8001a3a:	4618      	movlt	r0, r3
 8001a3c:	e7a4      	b.n	8001988 <_printf_i+0x168>
 8001a3e:	2301      	movs	r3, #1
 8001a40:	4632      	mov	r2, r6
 8001a42:	4649      	mov	r1, r9
 8001a44:	4640      	mov	r0, r8
 8001a46:	47d0      	blx	sl
 8001a48:	3001      	adds	r0, #1
 8001a4a:	d09b      	beq.n	8001984 <_printf_i+0x164>
 8001a4c:	3501      	adds	r5, #1
 8001a4e:	68e3      	ldr	r3, [r4, #12]
 8001a50:	9903      	ldr	r1, [sp, #12]
 8001a52:	1a5b      	subs	r3, r3, r1
 8001a54:	42ab      	cmp	r3, r5
 8001a56:	dcf2      	bgt.n	8001a3e <_printf_i+0x21e>
 8001a58:	e7eb      	b.n	8001a32 <_printf_i+0x212>
 8001a5a:	2500      	movs	r5, #0
 8001a5c:	f104 0619 	add.w	r6, r4, #25
 8001a60:	e7f5      	b.n	8001a4e <_printf_i+0x22e>
 8001a62:	bf00      	nop
 8001a64:	08002105 	.word	0x08002105
 8001a68:	08002116 	.word	0x08002116

08001a6c <_sbrk_r>:
 8001a6c:	b538      	push	{r3, r4, r5, lr}
 8001a6e:	4d06      	ldr	r5, [pc, #24]	; (8001a88 <_sbrk_r+0x1c>)
 8001a70:	2300      	movs	r3, #0
 8001a72:	4604      	mov	r4, r0
 8001a74:	4608      	mov	r0, r1
 8001a76:	602b      	str	r3, [r5, #0]
 8001a78:	f7fe fd72 	bl	8000560 <_sbrk>
 8001a7c:	1c43      	adds	r3, r0, #1
 8001a7e:	d102      	bne.n	8001a86 <_sbrk_r+0x1a>
 8001a80:	682b      	ldr	r3, [r5, #0]
 8001a82:	b103      	cbz	r3, 8001a86 <_sbrk_r+0x1a>
 8001a84:	6023      	str	r3, [r4, #0]
 8001a86:	bd38      	pop	{r3, r4, r5, pc}
 8001a88:	200000dc 	.word	0x200000dc

08001a8c <__sread>:
 8001a8c:	b510      	push	{r4, lr}
 8001a8e:	460c      	mov	r4, r1
 8001a90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a94:	f000 fab4 	bl	8002000 <_read_r>
 8001a98:	2800      	cmp	r0, #0
 8001a9a:	bfab      	itete	ge
 8001a9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001a9e:	89a3      	ldrhlt	r3, [r4, #12]
 8001aa0:	181b      	addge	r3, r3, r0
 8001aa2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001aa6:	bfac      	ite	ge
 8001aa8:	6563      	strge	r3, [r4, #84]	; 0x54
 8001aaa:	81a3      	strhlt	r3, [r4, #12]
 8001aac:	bd10      	pop	{r4, pc}

08001aae <__swrite>:
 8001aae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ab2:	461f      	mov	r7, r3
 8001ab4:	898b      	ldrh	r3, [r1, #12]
 8001ab6:	05db      	lsls	r3, r3, #23
 8001ab8:	4605      	mov	r5, r0
 8001aba:	460c      	mov	r4, r1
 8001abc:	4616      	mov	r6, r2
 8001abe:	d505      	bpl.n	8001acc <__swrite+0x1e>
 8001ac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f000 f9c8 	bl	8001e5c <_lseek_r>
 8001acc:	89a3      	ldrh	r3, [r4, #12]
 8001ace:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001ad2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ad6:	81a3      	strh	r3, [r4, #12]
 8001ad8:	4632      	mov	r2, r6
 8001ada:	463b      	mov	r3, r7
 8001adc:	4628      	mov	r0, r5
 8001ade:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001ae2:	f000 b869 	b.w	8001bb8 <_write_r>

08001ae6 <__sseek>:
 8001ae6:	b510      	push	{r4, lr}
 8001ae8:	460c      	mov	r4, r1
 8001aea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001aee:	f000 f9b5 	bl	8001e5c <_lseek_r>
 8001af2:	1c43      	adds	r3, r0, #1
 8001af4:	89a3      	ldrh	r3, [r4, #12]
 8001af6:	bf15      	itete	ne
 8001af8:	6560      	strne	r0, [r4, #84]	; 0x54
 8001afa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001afe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001b02:	81a3      	strheq	r3, [r4, #12]
 8001b04:	bf18      	it	ne
 8001b06:	81a3      	strhne	r3, [r4, #12]
 8001b08:	bd10      	pop	{r4, pc}

08001b0a <__sclose>:
 8001b0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b0e:	f000 b8d3 	b.w	8001cb8 <_close_r>
	...

08001b14 <__swbuf_r>:
 8001b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b16:	460e      	mov	r6, r1
 8001b18:	4614      	mov	r4, r2
 8001b1a:	4605      	mov	r5, r0
 8001b1c:	b118      	cbz	r0, 8001b26 <__swbuf_r+0x12>
 8001b1e:	6983      	ldr	r3, [r0, #24]
 8001b20:	b90b      	cbnz	r3, 8001b26 <__swbuf_r+0x12>
 8001b22:	f7ff fbbb 	bl	800129c <__sinit>
 8001b26:	4b21      	ldr	r3, [pc, #132]	; (8001bac <__swbuf_r+0x98>)
 8001b28:	429c      	cmp	r4, r3
 8001b2a:	d12b      	bne.n	8001b84 <__swbuf_r+0x70>
 8001b2c:	686c      	ldr	r4, [r5, #4]
 8001b2e:	69a3      	ldr	r3, [r4, #24]
 8001b30:	60a3      	str	r3, [r4, #8]
 8001b32:	89a3      	ldrh	r3, [r4, #12]
 8001b34:	071a      	lsls	r2, r3, #28
 8001b36:	d52f      	bpl.n	8001b98 <__swbuf_r+0x84>
 8001b38:	6923      	ldr	r3, [r4, #16]
 8001b3a:	b36b      	cbz	r3, 8001b98 <__swbuf_r+0x84>
 8001b3c:	6923      	ldr	r3, [r4, #16]
 8001b3e:	6820      	ldr	r0, [r4, #0]
 8001b40:	1ac0      	subs	r0, r0, r3
 8001b42:	6963      	ldr	r3, [r4, #20]
 8001b44:	b2f6      	uxtb	r6, r6
 8001b46:	4283      	cmp	r3, r0
 8001b48:	4637      	mov	r7, r6
 8001b4a:	dc04      	bgt.n	8001b56 <__swbuf_r+0x42>
 8001b4c:	4621      	mov	r1, r4
 8001b4e:	4628      	mov	r0, r5
 8001b50:	f000 f948 	bl	8001de4 <_fflush_r>
 8001b54:	bb30      	cbnz	r0, 8001ba4 <__swbuf_r+0x90>
 8001b56:	68a3      	ldr	r3, [r4, #8]
 8001b58:	3b01      	subs	r3, #1
 8001b5a:	60a3      	str	r3, [r4, #8]
 8001b5c:	6823      	ldr	r3, [r4, #0]
 8001b5e:	1c5a      	adds	r2, r3, #1
 8001b60:	6022      	str	r2, [r4, #0]
 8001b62:	701e      	strb	r6, [r3, #0]
 8001b64:	6963      	ldr	r3, [r4, #20]
 8001b66:	3001      	adds	r0, #1
 8001b68:	4283      	cmp	r3, r0
 8001b6a:	d004      	beq.n	8001b76 <__swbuf_r+0x62>
 8001b6c:	89a3      	ldrh	r3, [r4, #12]
 8001b6e:	07db      	lsls	r3, r3, #31
 8001b70:	d506      	bpl.n	8001b80 <__swbuf_r+0x6c>
 8001b72:	2e0a      	cmp	r6, #10
 8001b74:	d104      	bne.n	8001b80 <__swbuf_r+0x6c>
 8001b76:	4621      	mov	r1, r4
 8001b78:	4628      	mov	r0, r5
 8001b7a:	f000 f933 	bl	8001de4 <_fflush_r>
 8001b7e:	b988      	cbnz	r0, 8001ba4 <__swbuf_r+0x90>
 8001b80:	4638      	mov	r0, r7
 8001b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b84:	4b0a      	ldr	r3, [pc, #40]	; (8001bb0 <__swbuf_r+0x9c>)
 8001b86:	429c      	cmp	r4, r3
 8001b88:	d101      	bne.n	8001b8e <__swbuf_r+0x7a>
 8001b8a:	68ac      	ldr	r4, [r5, #8]
 8001b8c:	e7cf      	b.n	8001b2e <__swbuf_r+0x1a>
 8001b8e:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <__swbuf_r+0xa0>)
 8001b90:	429c      	cmp	r4, r3
 8001b92:	bf08      	it	eq
 8001b94:	68ec      	ldreq	r4, [r5, #12]
 8001b96:	e7ca      	b.n	8001b2e <__swbuf_r+0x1a>
 8001b98:	4621      	mov	r1, r4
 8001b9a:	4628      	mov	r0, r5
 8001b9c:	f000 f81e 	bl	8001bdc <__swsetup_r>
 8001ba0:	2800      	cmp	r0, #0
 8001ba2:	d0cb      	beq.n	8001b3c <__swbuf_r+0x28>
 8001ba4:	f04f 37ff 	mov.w	r7, #4294967295
 8001ba8:	e7ea      	b.n	8001b80 <__swbuf_r+0x6c>
 8001baa:	bf00      	nop
 8001bac:	080020b4 	.word	0x080020b4
 8001bb0:	080020d4 	.word	0x080020d4
 8001bb4:	08002094 	.word	0x08002094

08001bb8 <_write_r>:
 8001bb8:	b538      	push	{r3, r4, r5, lr}
 8001bba:	4d07      	ldr	r5, [pc, #28]	; (8001bd8 <_write_r+0x20>)
 8001bbc:	4604      	mov	r4, r0
 8001bbe:	4608      	mov	r0, r1
 8001bc0:	4611      	mov	r1, r2
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	602a      	str	r2, [r5, #0]
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	f7fe fc79 	bl	80004be <_write>
 8001bcc:	1c43      	adds	r3, r0, #1
 8001bce:	d102      	bne.n	8001bd6 <_write_r+0x1e>
 8001bd0:	682b      	ldr	r3, [r5, #0]
 8001bd2:	b103      	cbz	r3, 8001bd6 <_write_r+0x1e>
 8001bd4:	6023      	str	r3, [r4, #0]
 8001bd6:	bd38      	pop	{r3, r4, r5, pc}
 8001bd8:	200000dc 	.word	0x200000dc

08001bdc <__swsetup_r>:
 8001bdc:	4b32      	ldr	r3, [pc, #200]	; (8001ca8 <__swsetup_r+0xcc>)
 8001bde:	b570      	push	{r4, r5, r6, lr}
 8001be0:	681d      	ldr	r5, [r3, #0]
 8001be2:	4606      	mov	r6, r0
 8001be4:	460c      	mov	r4, r1
 8001be6:	b125      	cbz	r5, 8001bf2 <__swsetup_r+0x16>
 8001be8:	69ab      	ldr	r3, [r5, #24]
 8001bea:	b913      	cbnz	r3, 8001bf2 <__swsetup_r+0x16>
 8001bec:	4628      	mov	r0, r5
 8001bee:	f7ff fb55 	bl	800129c <__sinit>
 8001bf2:	4b2e      	ldr	r3, [pc, #184]	; (8001cac <__swsetup_r+0xd0>)
 8001bf4:	429c      	cmp	r4, r3
 8001bf6:	d10f      	bne.n	8001c18 <__swsetup_r+0x3c>
 8001bf8:	686c      	ldr	r4, [r5, #4]
 8001bfa:	89a3      	ldrh	r3, [r4, #12]
 8001bfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001c00:	0719      	lsls	r1, r3, #28
 8001c02:	d42c      	bmi.n	8001c5e <__swsetup_r+0x82>
 8001c04:	06dd      	lsls	r5, r3, #27
 8001c06:	d411      	bmi.n	8001c2c <__swsetup_r+0x50>
 8001c08:	2309      	movs	r3, #9
 8001c0a:	6033      	str	r3, [r6, #0]
 8001c0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001c10:	81a3      	strh	r3, [r4, #12]
 8001c12:	f04f 30ff 	mov.w	r0, #4294967295
 8001c16:	e03e      	b.n	8001c96 <__swsetup_r+0xba>
 8001c18:	4b25      	ldr	r3, [pc, #148]	; (8001cb0 <__swsetup_r+0xd4>)
 8001c1a:	429c      	cmp	r4, r3
 8001c1c:	d101      	bne.n	8001c22 <__swsetup_r+0x46>
 8001c1e:	68ac      	ldr	r4, [r5, #8]
 8001c20:	e7eb      	b.n	8001bfa <__swsetup_r+0x1e>
 8001c22:	4b24      	ldr	r3, [pc, #144]	; (8001cb4 <__swsetup_r+0xd8>)
 8001c24:	429c      	cmp	r4, r3
 8001c26:	bf08      	it	eq
 8001c28:	68ec      	ldreq	r4, [r5, #12]
 8001c2a:	e7e6      	b.n	8001bfa <__swsetup_r+0x1e>
 8001c2c:	0758      	lsls	r0, r3, #29
 8001c2e:	d512      	bpl.n	8001c56 <__swsetup_r+0x7a>
 8001c30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001c32:	b141      	cbz	r1, 8001c46 <__swsetup_r+0x6a>
 8001c34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001c38:	4299      	cmp	r1, r3
 8001c3a:	d002      	beq.n	8001c42 <__swsetup_r+0x66>
 8001c3c:	4630      	mov	r0, r6
 8001c3e:	f000 f98f 	bl	8001f60 <_free_r>
 8001c42:	2300      	movs	r3, #0
 8001c44:	6363      	str	r3, [r4, #52]	; 0x34
 8001c46:	89a3      	ldrh	r3, [r4, #12]
 8001c48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001c4c:	81a3      	strh	r3, [r4, #12]
 8001c4e:	2300      	movs	r3, #0
 8001c50:	6063      	str	r3, [r4, #4]
 8001c52:	6923      	ldr	r3, [r4, #16]
 8001c54:	6023      	str	r3, [r4, #0]
 8001c56:	89a3      	ldrh	r3, [r4, #12]
 8001c58:	f043 0308 	orr.w	r3, r3, #8
 8001c5c:	81a3      	strh	r3, [r4, #12]
 8001c5e:	6923      	ldr	r3, [r4, #16]
 8001c60:	b94b      	cbnz	r3, 8001c76 <__swsetup_r+0x9a>
 8001c62:	89a3      	ldrh	r3, [r4, #12]
 8001c64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001c68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c6c:	d003      	beq.n	8001c76 <__swsetup_r+0x9a>
 8001c6e:	4621      	mov	r1, r4
 8001c70:	4630      	mov	r0, r6
 8001c72:	f000 f929 	bl	8001ec8 <__smakebuf_r>
 8001c76:	89a0      	ldrh	r0, [r4, #12]
 8001c78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001c7c:	f010 0301 	ands.w	r3, r0, #1
 8001c80:	d00a      	beq.n	8001c98 <__swsetup_r+0xbc>
 8001c82:	2300      	movs	r3, #0
 8001c84:	60a3      	str	r3, [r4, #8]
 8001c86:	6963      	ldr	r3, [r4, #20]
 8001c88:	425b      	negs	r3, r3
 8001c8a:	61a3      	str	r3, [r4, #24]
 8001c8c:	6923      	ldr	r3, [r4, #16]
 8001c8e:	b943      	cbnz	r3, 8001ca2 <__swsetup_r+0xc6>
 8001c90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001c94:	d1ba      	bne.n	8001c0c <__swsetup_r+0x30>
 8001c96:	bd70      	pop	{r4, r5, r6, pc}
 8001c98:	0781      	lsls	r1, r0, #30
 8001c9a:	bf58      	it	pl
 8001c9c:	6963      	ldrpl	r3, [r4, #20]
 8001c9e:	60a3      	str	r3, [r4, #8]
 8001ca0:	e7f4      	b.n	8001c8c <__swsetup_r+0xb0>
 8001ca2:	2000      	movs	r0, #0
 8001ca4:	e7f7      	b.n	8001c96 <__swsetup_r+0xba>
 8001ca6:	bf00      	nop
 8001ca8:	20000018 	.word	0x20000018
 8001cac:	080020b4 	.word	0x080020b4
 8001cb0:	080020d4 	.word	0x080020d4
 8001cb4:	08002094 	.word	0x08002094

08001cb8 <_close_r>:
 8001cb8:	b538      	push	{r3, r4, r5, lr}
 8001cba:	4d06      	ldr	r5, [pc, #24]	; (8001cd4 <_close_r+0x1c>)
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	4604      	mov	r4, r0
 8001cc0:	4608      	mov	r0, r1
 8001cc2:	602b      	str	r3, [r5, #0]
 8001cc4:	f7fe fc17 	bl	80004f6 <_close>
 8001cc8:	1c43      	adds	r3, r0, #1
 8001cca:	d102      	bne.n	8001cd2 <_close_r+0x1a>
 8001ccc:	682b      	ldr	r3, [r5, #0]
 8001cce:	b103      	cbz	r3, 8001cd2 <_close_r+0x1a>
 8001cd0:	6023      	str	r3, [r4, #0]
 8001cd2:	bd38      	pop	{r3, r4, r5, pc}
 8001cd4:	200000dc 	.word	0x200000dc

08001cd8 <__sflush_r>:
 8001cd8:	898a      	ldrh	r2, [r1, #12]
 8001cda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cde:	4605      	mov	r5, r0
 8001ce0:	0710      	lsls	r0, r2, #28
 8001ce2:	460c      	mov	r4, r1
 8001ce4:	d458      	bmi.n	8001d98 <__sflush_r+0xc0>
 8001ce6:	684b      	ldr	r3, [r1, #4]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	dc05      	bgt.n	8001cf8 <__sflush_r+0x20>
 8001cec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	dc02      	bgt.n	8001cf8 <__sflush_r+0x20>
 8001cf2:	2000      	movs	r0, #0
 8001cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001cf8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001cfa:	2e00      	cmp	r6, #0
 8001cfc:	d0f9      	beq.n	8001cf2 <__sflush_r+0x1a>
 8001cfe:	2300      	movs	r3, #0
 8001d00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001d04:	682f      	ldr	r7, [r5, #0]
 8001d06:	602b      	str	r3, [r5, #0]
 8001d08:	d032      	beq.n	8001d70 <__sflush_r+0x98>
 8001d0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001d0c:	89a3      	ldrh	r3, [r4, #12]
 8001d0e:	075a      	lsls	r2, r3, #29
 8001d10:	d505      	bpl.n	8001d1e <__sflush_r+0x46>
 8001d12:	6863      	ldr	r3, [r4, #4]
 8001d14:	1ac0      	subs	r0, r0, r3
 8001d16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001d18:	b10b      	cbz	r3, 8001d1e <__sflush_r+0x46>
 8001d1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d1c:	1ac0      	subs	r0, r0, r3
 8001d1e:	2300      	movs	r3, #0
 8001d20:	4602      	mov	r2, r0
 8001d22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001d24:	6a21      	ldr	r1, [r4, #32]
 8001d26:	4628      	mov	r0, r5
 8001d28:	47b0      	blx	r6
 8001d2a:	1c43      	adds	r3, r0, #1
 8001d2c:	89a3      	ldrh	r3, [r4, #12]
 8001d2e:	d106      	bne.n	8001d3e <__sflush_r+0x66>
 8001d30:	6829      	ldr	r1, [r5, #0]
 8001d32:	291d      	cmp	r1, #29
 8001d34:	d82c      	bhi.n	8001d90 <__sflush_r+0xb8>
 8001d36:	4a2a      	ldr	r2, [pc, #168]	; (8001de0 <__sflush_r+0x108>)
 8001d38:	40ca      	lsrs	r2, r1
 8001d3a:	07d6      	lsls	r6, r2, #31
 8001d3c:	d528      	bpl.n	8001d90 <__sflush_r+0xb8>
 8001d3e:	2200      	movs	r2, #0
 8001d40:	6062      	str	r2, [r4, #4]
 8001d42:	04d9      	lsls	r1, r3, #19
 8001d44:	6922      	ldr	r2, [r4, #16]
 8001d46:	6022      	str	r2, [r4, #0]
 8001d48:	d504      	bpl.n	8001d54 <__sflush_r+0x7c>
 8001d4a:	1c42      	adds	r2, r0, #1
 8001d4c:	d101      	bne.n	8001d52 <__sflush_r+0x7a>
 8001d4e:	682b      	ldr	r3, [r5, #0]
 8001d50:	b903      	cbnz	r3, 8001d54 <__sflush_r+0x7c>
 8001d52:	6560      	str	r0, [r4, #84]	; 0x54
 8001d54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001d56:	602f      	str	r7, [r5, #0]
 8001d58:	2900      	cmp	r1, #0
 8001d5a:	d0ca      	beq.n	8001cf2 <__sflush_r+0x1a>
 8001d5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001d60:	4299      	cmp	r1, r3
 8001d62:	d002      	beq.n	8001d6a <__sflush_r+0x92>
 8001d64:	4628      	mov	r0, r5
 8001d66:	f000 f8fb 	bl	8001f60 <_free_r>
 8001d6a:	2000      	movs	r0, #0
 8001d6c:	6360      	str	r0, [r4, #52]	; 0x34
 8001d6e:	e7c1      	b.n	8001cf4 <__sflush_r+0x1c>
 8001d70:	6a21      	ldr	r1, [r4, #32]
 8001d72:	2301      	movs	r3, #1
 8001d74:	4628      	mov	r0, r5
 8001d76:	47b0      	blx	r6
 8001d78:	1c41      	adds	r1, r0, #1
 8001d7a:	d1c7      	bne.n	8001d0c <__sflush_r+0x34>
 8001d7c:	682b      	ldr	r3, [r5, #0]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d0c4      	beq.n	8001d0c <__sflush_r+0x34>
 8001d82:	2b1d      	cmp	r3, #29
 8001d84:	d001      	beq.n	8001d8a <__sflush_r+0xb2>
 8001d86:	2b16      	cmp	r3, #22
 8001d88:	d101      	bne.n	8001d8e <__sflush_r+0xb6>
 8001d8a:	602f      	str	r7, [r5, #0]
 8001d8c:	e7b1      	b.n	8001cf2 <__sflush_r+0x1a>
 8001d8e:	89a3      	ldrh	r3, [r4, #12]
 8001d90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d94:	81a3      	strh	r3, [r4, #12]
 8001d96:	e7ad      	b.n	8001cf4 <__sflush_r+0x1c>
 8001d98:	690f      	ldr	r7, [r1, #16]
 8001d9a:	2f00      	cmp	r7, #0
 8001d9c:	d0a9      	beq.n	8001cf2 <__sflush_r+0x1a>
 8001d9e:	0793      	lsls	r3, r2, #30
 8001da0:	680e      	ldr	r6, [r1, #0]
 8001da2:	bf08      	it	eq
 8001da4:	694b      	ldreq	r3, [r1, #20]
 8001da6:	600f      	str	r7, [r1, #0]
 8001da8:	bf18      	it	ne
 8001daa:	2300      	movne	r3, #0
 8001dac:	eba6 0807 	sub.w	r8, r6, r7
 8001db0:	608b      	str	r3, [r1, #8]
 8001db2:	f1b8 0f00 	cmp.w	r8, #0
 8001db6:	dd9c      	ble.n	8001cf2 <__sflush_r+0x1a>
 8001db8:	6a21      	ldr	r1, [r4, #32]
 8001dba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001dbc:	4643      	mov	r3, r8
 8001dbe:	463a      	mov	r2, r7
 8001dc0:	4628      	mov	r0, r5
 8001dc2:	47b0      	blx	r6
 8001dc4:	2800      	cmp	r0, #0
 8001dc6:	dc06      	bgt.n	8001dd6 <__sflush_r+0xfe>
 8001dc8:	89a3      	ldrh	r3, [r4, #12]
 8001dca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dce:	81a3      	strh	r3, [r4, #12]
 8001dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd4:	e78e      	b.n	8001cf4 <__sflush_r+0x1c>
 8001dd6:	4407      	add	r7, r0
 8001dd8:	eba8 0800 	sub.w	r8, r8, r0
 8001ddc:	e7e9      	b.n	8001db2 <__sflush_r+0xda>
 8001dde:	bf00      	nop
 8001de0:	20400001 	.word	0x20400001

08001de4 <_fflush_r>:
 8001de4:	b538      	push	{r3, r4, r5, lr}
 8001de6:	690b      	ldr	r3, [r1, #16]
 8001de8:	4605      	mov	r5, r0
 8001dea:	460c      	mov	r4, r1
 8001dec:	b913      	cbnz	r3, 8001df4 <_fflush_r+0x10>
 8001dee:	2500      	movs	r5, #0
 8001df0:	4628      	mov	r0, r5
 8001df2:	bd38      	pop	{r3, r4, r5, pc}
 8001df4:	b118      	cbz	r0, 8001dfe <_fflush_r+0x1a>
 8001df6:	6983      	ldr	r3, [r0, #24]
 8001df8:	b90b      	cbnz	r3, 8001dfe <_fflush_r+0x1a>
 8001dfa:	f7ff fa4f 	bl	800129c <__sinit>
 8001dfe:	4b14      	ldr	r3, [pc, #80]	; (8001e50 <_fflush_r+0x6c>)
 8001e00:	429c      	cmp	r4, r3
 8001e02:	d11b      	bne.n	8001e3c <_fflush_r+0x58>
 8001e04:	686c      	ldr	r4, [r5, #4]
 8001e06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d0ef      	beq.n	8001dee <_fflush_r+0xa>
 8001e0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001e10:	07d0      	lsls	r0, r2, #31
 8001e12:	d404      	bmi.n	8001e1e <_fflush_r+0x3a>
 8001e14:	0599      	lsls	r1, r3, #22
 8001e16:	d402      	bmi.n	8001e1e <_fflush_r+0x3a>
 8001e18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001e1a:	f7ff fadd 	bl	80013d8 <__retarget_lock_acquire_recursive>
 8001e1e:	4628      	mov	r0, r5
 8001e20:	4621      	mov	r1, r4
 8001e22:	f7ff ff59 	bl	8001cd8 <__sflush_r>
 8001e26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001e28:	07da      	lsls	r2, r3, #31
 8001e2a:	4605      	mov	r5, r0
 8001e2c:	d4e0      	bmi.n	8001df0 <_fflush_r+0xc>
 8001e2e:	89a3      	ldrh	r3, [r4, #12]
 8001e30:	059b      	lsls	r3, r3, #22
 8001e32:	d4dd      	bmi.n	8001df0 <_fflush_r+0xc>
 8001e34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001e36:	f7ff fad0 	bl	80013da <__retarget_lock_release_recursive>
 8001e3a:	e7d9      	b.n	8001df0 <_fflush_r+0xc>
 8001e3c:	4b05      	ldr	r3, [pc, #20]	; (8001e54 <_fflush_r+0x70>)
 8001e3e:	429c      	cmp	r4, r3
 8001e40:	d101      	bne.n	8001e46 <_fflush_r+0x62>
 8001e42:	68ac      	ldr	r4, [r5, #8]
 8001e44:	e7df      	b.n	8001e06 <_fflush_r+0x22>
 8001e46:	4b04      	ldr	r3, [pc, #16]	; (8001e58 <_fflush_r+0x74>)
 8001e48:	429c      	cmp	r4, r3
 8001e4a:	bf08      	it	eq
 8001e4c:	68ec      	ldreq	r4, [r5, #12]
 8001e4e:	e7da      	b.n	8001e06 <_fflush_r+0x22>
 8001e50:	080020b4 	.word	0x080020b4
 8001e54:	080020d4 	.word	0x080020d4
 8001e58:	08002094 	.word	0x08002094

08001e5c <_lseek_r>:
 8001e5c:	b538      	push	{r3, r4, r5, lr}
 8001e5e:	4d07      	ldr	r5, [pc, #28]	; (8001e7c <_lseek_r+0x20>)
 8001e60:	4604      	mov	r4, r0
 8001e62:	4608      	mov	r0, r1
 8001e64:	4611      	mov	r1, r2
 8001e66:	2200      	movs	r2, #0
 8001e68:	602a      	str	r2, [r5, #0]
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	f7fe fb6a 	bl	8000544 <_lseek>
 8001e70:	1c43      	adds	r3, r0, #1
 8001e72:	d102      	bne.n	8001e7a <_lseek_r+0x1e>
 8001e74:	682b      	ldr	r3, [r5, #0]
 8001e76:	b103      	cbz	r3, 8001e7a <_lseek_r+0x1e>
 8001e78:	6023      	str	r3, [r4, #0]
 8001e7a:	bd38      	pop	{r3, r4, r5, pc}
 8001e7c:	200000dc 	.word	0x200000dc

08001e80 <__swhatbuf_r>:
 8001e80:	b570      	push	{r4, r5, r6, lr}
 8001e82:	460e      	mov	r6, r1
 8001e84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e88:	2900      	cmp	r1, #0
 8001e8a:	b096      	sub	sp, #88	; 0x58
 8001e8c:	4614      	mov	r4, r2
 8001e8e:	461d      	mov	r5, r3
 8001e90:	da07      	bge.n	8001ea2 <__swhatbuf_r+0x22>
 8001e92:	2300      	movs	r3, #0
 8001e94:	602b      	str	r3, [r5, #0]
 8001e96:	89b3      	ldrh	r3, [r6, #12]
 8001e98:	061a      	lsls	r2, r3, #24
 8001e9a:	d410      	bmi.n	8001ebe <__swhatbuf_r+0x3e>
 8001e9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ea0:	e00e      	b.n	8001ec0 <__swhatbuf_r+0x40>
 8001ea2:	466a      	mov	r2, sp
 8001ea4:	f000 f8be 	bl	8002024 <_fstat_r>
 8001ea8:	2800      	cmp	r0, #0
 8001eaa:	dbf2      	blt.n	8001e92 <__swhatbuf_r+0x12>
 8001eac:	9a01      	ldr	r2, [sp, #4]
 8001eae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001eb2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001eb6:	425a      	negs	r2, r3
 8001eb8:	415a      	adcs	r2, r3
 8001eba:	602a      	str	r2, [r5, #0]
 8001ebc:	e7ee      	b.n	8001e9c <__swhatbuf_r+0x1c>
 8001ebe:	2340      	movs	r3, #64	; 0x40
 8001ec0:	2000      	movs	r0, #0
 8001ec2:	6023      	str	r3, [r4, #0]
 8001ec4:	b016      	add	sp, #88	; 0x58
 8001ec6:	bd70      	pop	{r4, r5, r6, pc}

08001ec8 <__smakebuf_r>:
 8001ec8:	898b      	ldrh	r3, [r1, #12]
 8001eca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001ecc:	079d      	lsls	r5, r3, #30
 8001ece:	4606      	mov	r6, r0
 8001ed0:	460c      	mov	r4, r1
 8001ed2:	d507      	bpl.n	8001ee4 <__smakebuf_r+0x1c>
 8001ed4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001ed8:	6023      	str	r3, [r4, #0]
 8001eda:	6123      	str	r3, [r4, #16]
 8001edc:	2301      	movs	r3, #1
 8001ede:	6163      	str	r3, [r4, #20]
 8001ee0:	b002      	add	sp, #8
 8001ee2:	bd70      	pop	{r4, r5, r6, pc}
 8001ee4:	ab01      	add	r3, sp, #4
 8001ee6:	466a      	mov	r2, sp
 8001ee8:	f7ff ffca 	bl	8001e80 <__swhatbuf_r>
 8001eec:	9900      	ldr	r1, [sp, #0]
 8001eee:	4605      	mov	r5, r0
 8001ef0:	4630      	mov	r0, r6
 8001ef2:	f7ff fa73 	bl	80013dc <_malloc_r>
 8001ef6:	b948      	cbnz	r0, 8001f0c <__smakebuf_r+0x44>
 8001ef8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001efc:	059a      	lsls	r2, r3, #22
 8001efe:	d4ef      	bmi.n	8001ee0 <__smakebuf_r+0x18>
 8001f00:	f023 0303 	bic.w	r3, r3, #3
 8001f04:	f043 0302 	orr.w	r3, r3, #2
 8001f08:	81a3      	strh	r3, [r4, #12]
 8001f0a:	e7e3      	b.n	8001ed4 <__smakebuf_r+0xc>
 8001f0c:	4b0d      	ldr	r3, [pc, #52]	; (8001f44 <__smakebuf_r+0x7c>)
 8001f0e:	62b3      	str	r3, [r6, #40]	; 0x28
 8001f10:	89a3      	ldrh	r3, [r4, #12]
 8001f12:	6020      	str	r0, [r4, #0]
 8001f14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f18:	81a3      	strh	r3, [r4, #12]
 8001f1a:	9b00      	ldr	r3, [sp, #0]
 8001f1c:	6163      	str	r3, [r4, #20]
 8001f1e:	9b01      	ldr	r3, [sp, #4]
 8001f20:	6120      	str	r0, [r4, #16]
 8001f22:	b15b      	cbz	r3, 8001f3c <__smakebuf_r+0x74>
 8001f24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001f28:	4630      	mov	r0, r6
 8001f2a:	f000 f88d 	bl	8002048 <_isatty_r>
 8001f2e:	b128      	cbz	r0, 8001f3c <__smakebuf_r+0x74>
 8001f30:	89a3      	ldrh	r3, [r4, #12]
 8001f32:	f023 0303 	bic.w	r3, r3, #3
 8001f36:	f043 0301 	orr.w	r3, r3, #1
 8001f3a:	81a3      	strh	r3, [r4, #12]
 8001f3c:	89a0      	ldrh	r0, [r4, #12]
 8001f3e:	4305      	orrs	r5, r0
 8001f40:	81a5      	strh	r5, [r4, #12]
 8001f42:	e7cd      	b.n	8001ee0 <__smakebuf_r+0x18>
 8001f44:	08001235 	.word	0x08001235

08001f48 <__malloc_lock>:
 8001f48:	4801      	ldr	r0, [pc, #4]	; (8001f50 <__malloc_lock+0x8>)
 8001f4a:	f7ff ba45 	b.w	80013d8 <__retarget_lock_acquire_recursive>
 8001f4e:	bf00      	nop
 8001f50:	200000d4 	.word	0x200000d4

08001f54 <__malloc_unlock>:
 8001f54:	4801      	ldr	r0, [pc, #4]	; (8001f5c <__malloc_unlock+0x8>)
 8001f56:	f7ff ba40 	b.w	80013da <__retarget_lock_release_recursive>
 8001f5a:	bf00      	nop
 8001f5c:	200000d4 	.word	0x200000d4

08001f60 <_free_r>:
 8001f60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001f62:	2900      	cmp	r1, #0
 8001f64:	d048      	beq.n	8001ff8 <_free_r+0x98>
 8001f66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001f6a:	9001      	str	r0, [sp, #4]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	f1a1 0404 	sub.w	r4, r1, #4
 8001f72:	bfb8      	it	lt
 8001f74:	18e4      	addlt	r4, r4, r3
 8001f76:	f7ff ffe7 	bl	8001f48 <__malloc_lock>
 8001f7a:	4a20      	ldr	r2, [pc, #128]	; (8001ffc <_free_r+0x9c>)
 8001f7c:	9801      	ldr	r0, [sp, #4]
 8001f7e:	6813      	ldr	r3, [r2, #0]
 8001f80:	4615      	mov	r5, r2
 8001f82:	b933      	cbnz	r3, 8001f92 <_free_r+0x32>
 8001f84:	6063      	str	r3, [r4, #4]
 8001f86:	6014      	str	r4, [r2, #0]
 8001f88:	b003      	add	sp, #12
 8001f8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001f8e:	f7ff bfe1 	b.w	8001f54 <__malloc_unlock>
 8001f92:	42a3      	cmp	r3, r4
 8001f94:	d90b      	bls.n	8001fae <_free_r+0x4e>
 8001f96:	6821      	ldr	r1, [r4, #0]
 8001f98:	1862      	adds	r2, r4, r1
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	bf04      	itt	eq
 8001f9e:	681a      	ldreq	r2, [r3, #0]
 8001fa0:	685b      	ldreq	r3, [r3, #4]
 8001fa2:	6063      	str	r3, [r4, #4]
 8001fa4:	bf04      	itt	eq
 8001fa6:	1852      	addeq	r2, r2, r1
 8001fa8:	6022      	streq	r2, [r4, #0]
 8001faa:	602c      	str	r4, [r5, #0]
 8001fac:	e7ec      	b.n	8001f88 <_free_r+0x28>
 8001fae:	461a      	mov	r2, r3
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	b10b      	cbz	r3, 8001fb8 <_free_r+0x58>
 8001fb4:	42a3      	cmp	r3, r4
 8001fb6:	d9fa      	bls.n	8001fae <_free_r+0x4e>
 8001fb8:	6811      	ldr	r1, [r2, #0]
 8001fba:	1855      	adds	r5, r2, r1
 8001fbc:	42a5      	cmp	r5, r4
 8001fbe:	d10b      	bne.n	8001fd8 <_free_r+0x78>
 8001fc0:	6824      	ldr	r4, [r4, #0]
 8001fc2:	4421      	add	r1, r4
 8001fc4:	1854      	adds	r4, r2, r1
 8001fc6:	42a3      	cmp	r3, r4
 8001fc8:	6011      	str	r1, [r2, #0]
 8001fca:	d1dd      	bne.n	8001f88 <_free_r+0x28>
 8001fcc:	681c      	ldr	r4, [r3, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	6053      	str	r3, [r2, #4]
 8001fd2:	4421      	add	r1, r4
 8001fd4:	6011      	str	r1, [r2, #0]
 8001fd6:	e7d7      	b.n	8001f88 <_free_r+0x28>
 8001fd8:	d902      	bls.n	8001fe0 <_free_r+0x80>
 8001fda:	230c      	movs	r3, #12
 8001fdc:	6003      	str	r3, [r0, #0]
 8001fde:	e7d3      	b.n	8001f88 <_free_r+0x28>
 8001fe0:	6825      	ldr	r5, [r4, #0]
 8001fe2:	1961      	adds	r1, r4, r5
 8001fe4:	428b      	cmp	r3, r1
 8001fe6:	bf04      	itt	eq
 8001fe8:	6819      	ldreq	r1, [r3, #0]
 8001fea:	685b      	ldreq	r3, [r3, #4]
 8001fec:	6063      	str	r3, [r4, #4]
 8001fee:	bf04      	itt	eq
 8001ff0:	1949      	addeq	r1, r1, r5
 8001ff2:	6021      	streq	r1, [r4, #0]
 8001ff4:	6054      	str	r4, [r2, #4]
 8001ff6:	e7c7      	b.n	8001f88 <_free_r+0x28>
 8001ff8:	b003      	add	sp, #12
 8001ffa:	bd30      	pop	{r4, r5, pc}
 8001ffc:	2000009c 	.word	0x2000009c

08002000 <_read_r>:
 8002000:	b538      	push	{r3, r4, r5, lr}
 8002002:	4d07      	ldr	r5, [pc, #28]	; (8002020 <_read_r+0x20>)
 8002004:	4604      	mov	r4, r0
 8002006:	4608      	mov	r0, r1
 8002008:	4611      	mov	r1, r2
 800200a:	2200      	movs	r2, #0
 800200c:	602a      	str	r2, [r5, #0]
 800200e:	461a      	mov	r2, r3
 8002010:	f7fe fa38 	bl	8000484 <_read>
 8002014:	1c43      	adds	r3, r0, #1
 8002016:	d102      	bne.n	800201e <_read_r+0x1e>
 8002018:	682b      	ldr	r3, [r5, #0]
 800201a:	b103      	cbz	r3, 800201e <_read_r+0x1e>
 800201c:	6023      	str	r3, [r4, #0]
 800201e:	bd38      	pop	{r3, r4, r5, pc}
 8002020:	200000dc 	.word	0x200000dc

08002024 <_fstat_r>:
 8002024:	b538      	push	{r3, r4, r5, lr}
 8002026:	4d07      	ldr	r5, [pc, #28]	; (8002044 <_fstat_r+0x20>)
 8002028:	2300      	movs	r3, #0
 800202a:	4604      	mov	r4, r0
 800202c:	4608      	mov	r0, r1
 800202e:	4611      	mov	r1, r2
 8002030:	602b      	str	r3, [r5, #0]
 8002032:	f7fe fa6c 	bl	800050e <_fstat>
 8002036:	1c43      	adds	r3, r0, #1
 8002038:	d102      	bne.n	8002040 <_fstat_r+0x1c>
 800203a:	682b      	ldr	r3, [r5, #0]
 800203c:	b103      	cbz	r3, 8002040 <_fstat_r+0x1c>
 800203e:	6023      	str	r3, [r4, #0]
 8002040:	bd38      	pop	{r3, r4, r5, pc}
 8002042:	bf00      	nop
 8002044:	200000dc 	.word	0x200000dc

08002048 <_isatty_r>:
 8002048:	b538      	push	{r3, r4, r5, lr}
 800204a:	4d06      	ldr	r5, [pc, #24]	; (8002064 <_isatty_r+0x1c>)
 800204c:	2300      	movs	r3, #0
 800204e:	4604      	mov	r4, r0
 8002050:	4608      	mov	r0, r1
 8002052:	602b      	str	r3, [r5, #0]
 8002054:	f7fe fa6b 	bl	800052e <_isatty>
 8002058:	1c43      	adds	r3, r0, #1
 800205a:	d102      	bne.n	8002062 <_isatty_r+0x1a>
 800205c:	682b      	ldr	r3, [r5, #0]
 800205e:	b103      	cbz	r3, 8002062 <_isatty_r+0x1a>
 8002060:	6023      	str	r3, [r4, #0]
 8002062:	bd38      	pop	{r3, r4, r5, pc}
 8002064:	200000dc 	.word	0x200000dc

08002068 <_init>:
 8002068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800206a:	bf00      	nop
 800206c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800206e:	bc08      	pop	{r3}
 8002070:	469e      	mov	lr, r3
 8002072:	4770      	bx	lr

08002074 <_fini>:
 8002074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002076:	bf00      	nop
 8002078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800207a:	bc08      	pop	{r3}
 800207c:	469e      	mov	lr, r3
 800207e:	4770      	bx	lr
