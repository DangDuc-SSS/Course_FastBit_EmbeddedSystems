
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ea8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08002058  08002058  00012058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002100  08002100  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08002100  08002100  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002100  08002100  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002100  08002100  00012100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002104  08002104  00012104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08002108  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00000064  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000e0  200000e0  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000036ec  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000a1c  00000000  00000000  00023798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000250  00000000  00000000  000241b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000001f8  00000000  00000000  00024408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003754  00000000  00000000  00024600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000027e4  00000000  00000000  00027d54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000c59a  00000000  00000000  0002a538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00036ad2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001060  00000000  00000000  00036b28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002040 	.word	0x08002040

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000080 	.word	0x20000080
 80001ec:	08002040 	.word	0x08002040

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <delay>:

#define MY_ADDR			0x61
#define SLAVE_ADDR		0x68

void delay(void)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i++);
 8000296:	2300      	movs	r3, #0
 8000298:	607b      	str	r3, [r7, #4]
 800029a:	e002      	b.n	80002a2 <delay+0x12>
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	3301      	adds	r3, #1
 80002a0:	607b      	str	r3, [r7, #4]
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	4a04      	ldr	r2, [pc, #16]	; (80002b8 <delay+0x28>)
 80002a6:	4293      	cmp	r3, r2
 80002a8:	d9f8      	bls.n	800029c <delay+0xc>
}
 80002aa:	bf00      	nop
 80002ac:	bf00      	nop
 80002ae:	370c      	adds	r7, #12
 80002b0:	46bd      	mov	sp, r7
 80002b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b6:	4770      	bx	lr
 80002b8:	0003d08f 	.word	0x0003d08f

080002bc <I2C1_GPIOInits>:
 * PB7 --> SDA
 * ALT function mode : 4
 */

void I2C1_GPIOInits(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CPins;

	I2CPins.pGPIOx = GPIOB;
 80002c2:	4b0e      	ldr	r3, [pc, #56]	; (80002fc <I2C1_GPIOInits+0x40>)
 80002c4:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80002c6:	2302      	movs	r3, #2
 80002c8:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OP;
 80002ca:	2301      	movs	r3, #1
 80002cc:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 80002ce:	2301      	movs	r3, #1
 80002d0:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 80002d2:	2304      	movs	r3, #4
 80002d4:	737b      	strb	r3, [r7, #13]
	I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002d6:	2302      	movs	r3, #2
 80002d8:	72bb      	strb	r3, [r7, #10]

	// scl
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 80002da:	2306      	movs	r3, #6
 80002dc:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	4618      	mov	r0, r3
 80002e2:	f000 fd77 	bl	8000dd4 <GPIO_Init>

	// sda
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 80002e6:	2307      	movs	r3, #7
 80002e8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	4618      	mov	r0, r3
 80002ee:	f000 fd71 	bl	8000dd4 <GPIO_Init>


}
 80002f2:	bf00      	nop
 80002f4:	3710      	adds	r7, #16
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	40020400 	.word	0x40020400

08000300 <I2C1_Inits>:

void I2C1_Inits(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	I2C1Handle.pI2Cx = I2C1;
 8000304:	4b09      	ldr	r3, [pc, #36]	; (800032c <I2C1_Inits+0x2c>)
 8000306:	4a0a      	ldr	r2, [pc, #40]	; (8000330 <I2C1_Inits+0x30>)
 8000308:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 800030a:	4b08      	ldr	r3, [pc, #32]	; (800032c <I2C1_Inits+0x2c>)
 800030c:	2201      	movs	r2, #1
 800030e:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
 8000310:	4b06      	ldr	r3, [pc, #24]	; (800032c <I2C1_Inits+0x2c>)
 8000312:	2261      	movs	r2, #97	; 0x61
 8000314:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 8000316:	4b05      	ldr	r3, [pc, #20]	; (800032c <I2C1_Inits+0x2c>)
 8000318:	2200      	movs	r2, #0
 800031a:	815a      	strh	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 800031c:	4b03      	ldr	r3, [pc, #12]	; (800032c <I2C1_Inits+0x2c>)
 800031e:	4a05      	ldr	r2, [pc, #20]	; (8000334 <I2C1_Inits+0x34>)
 8000320:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 8000322:	4802      	ldr	r0, [pc, #8]	; (800032c <I2C1_Inits+0x2c>)
 8000324:	f000 fa30 	bl	8000788 <I2C_Init>
}
 8000328:	bf00      	nop
 800032a:	bd80      	pop	{r7, pc}
 800032c:	200000a4 	.word	0x200000a4
 8000330:	40005400 	.word	0x40005400
 8000334:	000186a0 	.word	0x000186a0

08000338 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b086      	sub	sp, #24
 800033c:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn, GpioLed;

	// this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOA;
 800033e:	4b14      	ldr	r3, [pc, #80]	; (8000390 <GPIO_ButtonInit+0x58>)
 8000340:	60fb      	str	r3, [r7, #12]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8000342:	2300      	movs	r3, #0
 8000344:	743b      	strb	r3, [r7, #16]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000346:	2300      	movs	r3, #0
 8000348:	747b      	strb	r3, [r7, #17]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800034a:	2302      	movs	r3, #2
 800034c:	74bb      	strb	r3, [r7, #18]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800034e:	2300      	movs	r3, #0
 8000350:	74fb      	strb	r3, [r7, #19]

	GPIO_PeripheralClockControl(GPIOA, ENABLE);
 8000352:	2101      	movs	r1, #1
 8000354:	480e      	ldr	r0, [pc, #56]	; (8000390 <GPIO_ButtonInit+0x58>)
 8000356:	f000 fc55 	bl	8000c04 <GPIO_PeripheralClockControl>
	GPIO_Init(&GPIOBtn);
 800035a:	f107 030c 	add.w	r3, r7, #12
 800035e:	4618      	mov	r0, r3
 8000360:	f000 fd38 	bl	8000dd4 <GPIO_Init>

	// this is led gpio configuration
	GpioLed.pGPIOx = GPIOD;
 8000364:	4b0b      	ldr	r3, [pc, #44]	; (8000394 <GPIO_ButtonInit+0x5c>)
 8000366:	603b      	str	r3, [r7, #0]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000368:	230c      	movs	r3, #12
 800036a:	713b      	strb	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 800036c:	2301      	movs	r3, #1
 800036e:	717b      	strb	r3, [r7, #5]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000370:	2302      	movs	r3, #2
 8000372:	71bb      	strb	r3, [r7, #6]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000374:	2300      	movs	r3, #0
 8000376:	71fb      	strb	r3, [r7, #7]

	GPIO_PeripheralClockControl(GPIOD, ENABLE);
 8000378:	2101      	movs	r1, #1
 800037a:	4806      	ldr	r0, [pc, #24]	; (8000394 <GPIO_ButtonInit+0x5c>)
 800037c:	f000 fc42 	bl	8000c04 <GPIO_PeripheralClockControl>
	GPIO_Init(&GpioLed);
 8000380:	463b      	mov	r3, r7
 8000382:	4618      	mov	r0, r3
 8000384:	f000 fd26 	bl	8000dd4 <GPIO_Init>
}
 8000388:	bf00      	nop
 800038a:	3718      	adds	r7, #24
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	40020000 	.word	0x40020000
 8000394:	40020c00 	.word	0x40020c00

08000398 <main>:

int main(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b082      	sub	sp, #8
 800039c:	af00      	add	r7, sp, #0
	uint8_t commandcode;
	uint8_t len;

	//initiate button
	GPIO_ButtonInit();
 800039e:	f7ff ffcb 	bl	8000338 <GPIO_ButtonInit>

	// i2c pin inits
	I2C1_GPIOInits();
 80003a2:	f7ff ff8b 	bl	80002bc <I2C1_GPIOInits>

	//i2c peripheral configuration
	I2C1_Inits();
 80003a6:	f7ff ffab 	bl	8000300 <I2C1_Inits>

	//enable the peripheral
	I2C_PeripheralControl(I2C1, ENABLE);
 80003aa:	2101      	movs	r1, #1
 80003ac:	4818      	ldr	r0, [pc, #96]	; (8000410 <main+0x78>)
 80003ae:	f000 fbdd 	bl	8000b6c <I2C_PeripheralControl>

	//ack bit is made 1 after PE=1
	I2C_ManageAcking(I2C1, I2C_ACK_ENABLE);
 80003b2:	2101      	movs	r1, #1
 80003b4:	4816      	ldr	r0, [pc, #88]	; (8000410 <main+0x78>)
 80003b6:	f000 fc09 	bl	8000bcc <I2C_ManageAcking>

	while(1)
	{

		// wait for button pressed
		while(! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 80003ba:	bf00      	nop
 80003bc:	2100      	movs	r1, #0
 80003be:	4815      	ldr	r0, [pc, #84]	; (8000414 <main+0x7c>)
 80003c0:	f000 fea0 	bl	8001104 <GPIO_ReadFromInputPin>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d0f8      	beq.n	80003bc <main+0x24>

		// to avoid button de-bouncing related issues 200ms of delay
		delay();
 80003ca:	f7ff ff61 	bl	8000290 <delay>

		commandcode = 0x51;
 80003ce:	2351      	movs	r3, #81	; 0x51
 80003d0:	71fb      	strb	r3, [r7, #7]

		I2C_MAsterSendData(&I2C1Handle, &commandcode, 1, SLAVE_ADDR);
 80003d2:	1df9      	adds	r1, r7, #7
 80003d4:	2368      	movs	r3, #104	; 0x68
 80003d6:	2201      	movs	r2, #1
 80003d8:	480f      	ldr	r0, [pc, #60]	; (8000418 <main+0x80>)
 80003da:	f000 fa77 	bl	80008cc <I2C_MAsterSendData>

		I2C_MasterReceiveData(&I2C1Handle, &len, 1, SLAVE_ADDR);
 80003de:	1db9      	adds	r1, r7, #6
 80003e0:	2368      	movs	r3, #104	; 0x68
 80003e2:	2201      	movs	r2, #1
 80003e4:	480c      	ldr	r0, [pc, #48]	; (8000418 <main+0x80>)
 80003e6:	f000 fb33 	bl	8000a50 <I2C_MasterReceiveData>


		commandcode = 0x52;
 80003ea:	2352      	movs	r3, #82	; 0x52
 80003ec:	71fb      	strb	r3, [r7, #7]

		I2C_MAsterSendData(&I2C1Handle, &commandcode, 1, SLAVE_ADDR);
 80003ee:	1df9      	adds	r1, r7, #7
 80003f0:	2368      	movs	r3, #104	; 0x68
 80003f2:	2201      	movs	r2, #1
 80003f4:	4808      	ldr	r0, [pc, #32]	; (8000418 <main+0x80>)
 80003f6:	f000 fa69 	bl	80008cc <I2C_MAsterSendData>

		I2C_MasterReceiveData(&I2C1Handle, rcv_buf, len, SLAVE_ADDR);
 80003fa:	79ba      	ldrb	r2, [r7, #6]
 80003fc:	2368      	movs	r3, #104	; 0x68
 80003fe:	4907      	ldr	r1, [pc, #28]	; (800041c <main+0x84>)
 8000400:	4805      	ldr	r0, [pc, #20]	; (8000418 <main+0x80>)
 8000402:	f000 fb25 	bl	8000a50 <I2C_MasterReceiveData>

		printf("received : %s",rcv_buf);
 8000406:	4905      	ldr	r1, [pc, #20]	; (800041c <main+0x84>)
 8000408:	4805      	ldr	r0, [pc, #20]	; (8000420 <main+0x88>)
 800040a:	f000 fec3 	bl	8001194 <iprintf>
		while(! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 800040e:	e7d4      	b.n	80003ba <main+0x22>
 8000410:	40005400 	.word	0x40005400
 8000414:	40020000 	.word	0x40020000
 8000418:	200000a4 	.word	0x200000a4
 800041c:	200000b0 	.word	0x200000b0
 8000420:	08002058 	.word	0x08002058

08000424 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
 800042a:	4603      	mov	r3, r0
 800042c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800042e:	4b0f      	ldr	r3, [pc, #60]	; (800046c <ITM_SendChar+0x48>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a0e      	ldr	r2, [pc, #56]	; (800046c <ITM_SendChar+0x48>)
 8000434:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000438:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800043a:	4b0d      	ldr	r3, [pc, #52]	; (8000470 <ITM_SendChar+0x4c>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	4a0c      	ldr	r2, [pc, #48]	; (8000470 <ITM_SendChar+0x4c>)
 8000440:	f043 0301 	orr.w	r3, r3, #1
 8000444:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000446:	bf00      	nop
 8000448:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	f003 0301 	and.w	r3, r3, #1
 8000452:	2b00      	cmp	r3, #0
 8000454:	d0f8      	beq.n	8000448 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000456:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800045a:	79fb      	ldrb	r3, [r7, #7]
 800045c:	6013      	str	r3, [r2, #0]
}
 800045e:	bf00      	nop
 8000460:	370c      	adds	r7, #12
 8000462:	46bd      	mov	sp, r7
 8000464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop
 800046c:	e000edfc 	.word	0xe000edfc
 8000470:	e0000e00 	.word	0xe0000e00

08000474 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b086      	sub	sp, #24
 8000478:	af00      	add	r7, sp, #0
 800047a:	60f8      	str	r0, [r7, #12]
 800047c:	60b9      	str	r1, [r7, #8]
 800047e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000480:	2300      	movs	r3, #0
 8000482:	617b      	str	r3, [r7, #20]
 8000484:	e00a      	b.n	800049c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000486:	f3af 8000 	nop.w
 800048a:	4601      	mov	r1, r0
 800048c:	68bb      	ldr	r3, [r7, #8]
 800048e:	1c5a      	adds	r2, r3, #1
 8000490:	60ba      	str	r2, [r7, #8]
 8000492:	b2ca      	uxtb	r2, r1
 8000494:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000496:	697b      	ldr	r3, [r7, #20]
 8000498:	3301      	adds	r3, #1
 800049a:	617b      	str	r3, [r7, #20]
 800049c:	697a      	ldr	r2, [r7, #20]
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	429a      	cmp	r2, r3
 80004a2:	dbf0      	blt.n	8000486 <_read+0x12>
	}

return len;
 80004a4:	687b      	ldr	r3, [r7, #4]
}
 80004a6:	4618      	mov	r0, r3
 80004a8:	3718      	adds	r7, #24
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}

080004ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80004ae:	b580      	push	{r7, lr}
 80004b0:	b086      	sub	sp, #24
 80004b2:	af00      	add	r7, sp, #0
 80004b4:	60f8      	str	r0, [r7, #12]
 80004b6:	60b9      	str	r1, [r7, #8]
 80004b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004ba:	2300      	movs	r3, #0
 80004bc:	617b      	str	r3, [r7, #20]
 80004be:	e009      	b.n	80004d4 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80004c0:	68bb      	ldr	r3, [r7, #8]
 80004c2:	1c5a      	adds	r2, r3, #1
 80004c4:	60ba      	str	r2, [r7, #8]
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	4618      	mov	r0, r3
 80004ca:	f7ff ffab 	bl	8000424 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004ce:	697b      	ldr	r3, [r7, #20]
 80004d0:	3301      	adds	r3, #1
 80004d2:	617b      	str	r3, [r7, #20]
 80004d4:	697a      	ldr	r2, [r7, #20]
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	429a      	cmp	r2, r3
 80004da:	dbf1      	blt.n	80004c0 <_write+0x12>
	}
	return len;
 80004dc:	687b      	ldr	r3, [r7, #4]
}
 80004de:	4618      	mov	r0, r3
 80004e0:	3718      	adds	r7, #24
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}

080004e6 <_close>:

int _close(int file)
{
 80004e6:	b480      	push	{r7}
 80004e8:	b083      	sub	sp, #12
 80004ea:	af00      	add	r7, sp, #0
 80004ec:	6078      	str	r0, [r7, #4]
	return -1;
 80004ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80004f2:	4618      	mov	r0, r3
 80004f4:	370c      	adds	r7, #12
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr

080004fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80004fe:	b480      	push	{r7}
 8000500:	b083      	sub	sp, #12
 8000502:	af00      	add	r7, sp, #0
 8000504:	6078      	str	r0, [r7, #4]
 8000506:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800050e:	605a      	str	r2, [r3, #4]
	return 0;
 8000510:	2300      	movs	r3, #0
}
 8000512:	4618      	mov	r0, r3
 8000514:	370c      	adds	r7, #12
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr

0800051e <_isatty>:

int _isatty(int file)
{
 800051e:	b480      	push	{r7}
 8000520:	b083      	sub	sp, #12
 8000522:	af00      	add	r7, sp, #0
 8000524:	6078      	str	r0, [r7, #4]
	return 1;
 8000526:	2301      	movs	r3, #1
}
 8000528:	4618      	mov	r0, r3
 800052a:	370c      	adds	r7, #12
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr

08000534 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000534:	b480      	push	{r7}
 8000536:	b085      	sub	sp, #20
 8000538:	af00      	add	r7, sp, #0
 800053a:	60f8      	str	r0, [r7, #12]
 800053c:	60b9      	str	r1, [r7, #8]
 800053e:	607a      	str	r2, [r7, #4]
	return 0;
 8000540:	2300      	movs	r3, #0
}
 8000542:	4618      	mov	r0, r3
 8000544:	3714      	adds	r7, #20
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
	...

08000550 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b086      	sub	sp, #24
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000558:	4a14      	ldr	r2, [pc, #80]	; (80005ac <_sbrk+0x5c>)
 800055a:	4b15      	ldr	r3, [pc, #84]	; (80005b0 <_sbrk+0x60>)
 800055c:	1ad3      	subs	r3, r2, r3
 800055e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000560:	697b      	ldr	r3, [r7, #20]
 8000562:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000564:	4b13      	ldr	r3, [pc, #76]	; (80005b4 <_sbrk+0x64>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	2b00      	cmp	r3, #0
 800056a:	d102      	bne.n	8000572 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800056c:	4b11      	ldr	r3, [pc, #68]	; (80005b4 <_sbrk+0x64>)
 800056e:	4a12      	ldr	r2, [pc, #72]	; (80005b8 <_sbrk+0x68>)
 8000570:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000572:	4b10      	ldr	r3, [pc, #64]	; (80005b4 <_sbrk+0x64>)
 8000574:	681a      	ldr	r2, [r3, #0]
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	4413      	add	r3, r2
 800057a:	693a      	ldr	r2, [r7, #16]
 800057c:	429a      	cmp	r2, r3
 800057e:	d207      	bcs.n	8000590 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000580:	f000 fdd6 	bl	8001130 <__errno>
 8000584:	4603      	mov	r3, r0
 8000586:	220c      	movs	r2, #12
 8000588:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800058a:	f04f 33ff 	mov.w	r3, #4294967295
 800058e:	e009      	b.n	80005a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000590:	4b08      	ldr	r3, [pc, #32]	; (80005b4 <_sbrk+0x64>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000596:	4b07      	ldr	r3, [pc, #28]	; (80005b4 <_sbrk+0x64>)
 8000598:	681a      	ldr	r2, [r3, #0]
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	4413      	add	r3, r2
 800059e:	4a05      	ldr	r2, [pc, #20]	; (80005b4 <_sbrk+0x64>)
 80005a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005a2:	68fb      	ldr	r3, [r7, #12]
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3718      	adds	r7, #24
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20020000 	.word	0x20020000
 80005b0:	00000400 	.word	0x00000400
 80005b4:	20000098 	.word	0x20000098
 80005b8:	200000e0 	.word	0x200000e0

080005bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005bc:	480d      	ldr	r0, [pc, #52]	; (80005f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005be:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80005c0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005c4:	480c      	ldr	r0, [pc, #48]	; (80005f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80005c6:	490d      	ldr	r1, [pc, #52]	; (80005fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80005c8:	4a0d      	ldr	r2, [pc, #52]	; (8000600 <LoopForever+0xe>)
  movs r3, #0
 80005ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005cc:	e002      	b.n	80005d4 <LoopCopyDataInit>

080005ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005d2:	3304      	adds	r3, #4

080005d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005d8:	d3f9      	bcc.n	80005ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005da:	4a0a      	ldr	r2, [pc, #40]	; (8000604 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005dc:	4c0a      	ldr	r4, [pc, #40]	; (8000608 <LoopForever+0x16>)
  movs r3, #0
 80005de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005e0:	e001      	b.n	80005e6 <LoopFillZerobss>

080005e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005e4:	3204      	adds	r2, #4

080005e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005e8:	d3fb      	bcc.n	80005e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005ea:	f000 fda7 	bl	800113c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005ee:	f7ff fed3 	bl	8000398 <main>

080005f2 <LoopForever>:

LoopForever:
    b LoopForever
 80005f2:	e7fe      	b.n	80005f2 <LoopForever>
  ldr   r0, =_estack
 80005f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005fc:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000600:	08002108 	.word	0x08002108
  ldr r2, =_sbss
 8000604:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000608:	200000e0 	.word	0x200000e0

0800060c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800060c:	e7fe      	b.n	800060c <ADC_IRQHandler>
	...

08000610 <I2C_PeripheralClockControl>:
 *
 *@Note					-
 *
 */
void I2C_PeripheralClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
 8000618:	460b      	mov	r3, r1
 800061a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800061c:	78fb      	ldrb	r3, [r7, #3]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d120      	bne.n	8000664 <I2C_PeripheralClockControl+0x54>
	{
		if(pI2Cx == I2C1)
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4a22      	ldr	r2, [pc, #136]	; (80006b0 <I2C_PeripheralClockControl+0xa0>)
 8000626:	4293      	cmp	r3, r2
 8000628:	d106      	bne.n	8000638 <I2C_PeripheralClockControl+0x28>
		{
			I2C1_PCLK_EN();
 800062a:	4b22      	ldr	r3, [pc, #136]	; (80006b4 <I2C_PeripheralClockControl+0xa4>)
 800062c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062e:	4a21      	ldr	r2, [pc, #132]	; (80006b4 <I2C_PeripheralClockControl+0xa4>)
 8000630:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000634:	6413      	str	r3, [r2, #64]	; 0x40
		else if(pI2Cx == I2C3)
		{
			I2C3_PCLK_DI();
		}
	}
}
 8000636:	e035      	b.n	80006a4 <I2C_PeripheralClockControl+0x94>
		else if(pI2Cx == I2C2)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	4a1f      	ldr	r2, [pc, #124]	; (80006b8 <I2C_PeripheralClockControl+0xa8>)
 800063c:	4293      	cmp	r3, r2
 800063e:	d106      	bne.n	800064e <I2C_PeripheralClockControl+0x3e>
			I2C2_PCLK_EN();
 8000640:	4b1c      	ldr	r3, [pc, #112]	; (80006b4 <I2C_PeripheralClockControl+0xa4>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000644:	4a1b      	ldr	r2, [pc, #108]	; (80006b4 <I2C_PeripheralClockControl+0xa4>)
 8000646:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800064a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800064c:	e02a      	b.n	80006a4 <I2C_PeripheralClockControl+0x94>
		else if(pI2Cx == I2C3)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	4a1a      	ldr	r2, [pc, #104]	; (80006bc <I2C_PeripheralClockControl+0xac>)
 8000652:	4293      	cmp	r3, r2
 8000654:	d126      	bne.n	80006a4 <I2C_PeripheralClockControl+0x94>
			I2C3_PCLK_EN();
 8000656:	4b17      	ldr	r3, [pc, #92]	; (80006b4 <I2C_PeripheralClockControl+0xa4>)
 8000658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065a:	4a16      	ldr	r2, [pc, #88]	; (80006b4 <I2C_PeripheralClockControl+0xa4>)
 800065c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000660:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000662:	e01f      	b.n	80006a4 <I2C_PeripheralClockControl+0x94>
		if(pI2Cx == I2C1)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	4a12      	ldr	r2, [pc, #72]	; (80006b0 <I2C_PeripheralClockControl+0xa0>)
 8000668:	4293      	cmp	r3, r2
 800066a:	d106      	bne.n	800067a <I2C_PeripheralClockControl+0x6a>
			I2C1_PCLK_DI();
 800066c:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <I2C_PeripheralClockControl+0xa4>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	4a10      	ldr	r2, [pc, #64]	; (80006b4 <I2C_PeripheralClockControl+0xa4>)
 8000672:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000676:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000678:	e014      	b.n	80006a4 <I2C_PeripheralClockControl+0x94>
		else if(pI2Cx == I2C2)
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	4a0e      	ldr	r2, [pc, #56]	; (80006b8 <I2C_PeripheralClockControl+0xa8>)
 800067e:	4293      	cmp	r3, r2
 8000680:	d106      	bne.n	8000690 <I2C_PeripheralClockControl+0x80>
			I2C2_PCLK_DI();
 8000682:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <I2C_PeripheralClockControl+0xa4>)
 8000684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000686:	4a0b      	ldr	r2, [pc, #44]	; (80006b4 <I2C_PeripheralClockControl+0xa4>)
 8000688:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800068c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800068e:	e009      	b.n	80006a4 <I2C_PeripheralClockControl+0x94>
		else if(pI2Cx == I2C3)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	4a0a      	ldr	r2, [pc, #40]	; (80006bc <I2C_PeripheralClockControl+0xac>)
 8000694:	4293      	cmp	r3, r2
 8000696:	d105      	bne.n	80006a4 <I2C_PeripheralClockControl+0x94>
			I2C3_PCLK_DI();
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <I2C_PeripheralClockControl+0xa4>)
 800069a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069c:	4a05      	ldr	r2, [pc, #20]	; (80006b4 <I2C_PeripheralClockControl+0xa4>)
 800069e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80006a2:	6413      	str	r3, [r2, #64]	; 0x40
}
 80006a4:	bf00      	nop
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr
 80006b0:	40005400 	.word	0x40005400
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40005800 	.word	0x40005800
 80006bc:	40005c00 	.word	0x40005c00

080006c0 <RCC_GETPLLOutputClock>:

uint32_t RCC_GETPLLOutputClock(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
	return 160000000; // dummy value to be implemented
 80006c4:	4b02      	ldr	r3, [pc, #8]	; (80006d0 <RCC_GETPLLOutputClock+0x10>)
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	09896800 	.word	0x09896800

080006d4 <RCC_GetPCLK1Value>:


uint32_t RCC_GetPCLK1Value(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
	uint32_t pclk1, SystemClk;

	uint8_t clkSrc, temp, ahbp, apb1;
	clkSrc = ((RCC->CFGR >> 2) & 0x03);
 80006da:	4b26      	ldr	r3, [pc, #152]	; (8000774 <RCC_GetPCLK1Value+0xa0>)
 80006dc:	689b      	ldr	r3, [r3, #8]
 80006de:	089b      	lsrs	r3, r3, #2
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	f003 0303 	and.w	r3, r3, #3
 80006e6:	727b      	strb	r3, [r7, #9]

	if(clkSrc == 0)
 80006e8:	7a7b      	ldrb	r3, [r7, #9]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d102      	bne.n	80006f4 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 80006ee:	4b22      	ldr	r3, [pc, #136]	; (8000778 <RCC_GetPCLK1Value+0xa4>)
 80006f0:	60fb      	str	r3, [r7, #12]
 80006f2:	e00b      	b.n	800070c <RCC_GetPCLK1Value+0x38>
	}
	else if(clkSrc == 1)
 80006f4:	7a7b      	ldrb	r3, [r7, #9]
 80006f6:	2b01      	cmp	r3, #1
 80006f8:	d102      	bne.n	8000700 <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 80006fa:	4b20      	ldr	r3, [pc, #128]	; (800077c <RCC_GetPCLK1Value+0xa8>)
 80006fc:	60fb      	str	r3, [r7, #12]
 80006fe:	e005      	b.n	800070c <RCC_GetPCLK1Value+0x38>
	}
	else if(clkSrc == 2)
 8000700:	7a7b      	ldrb	r3, [r7, #9]
 8000702:	2b02      	cmp	r3, #2
 8000704:	d102      	bne.n	800070c <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GETPLLOutputClock();
 8000706:	f7ff ffdb 	bl	80006c0 <RCC_GETPLLOutputClock>
 800070a:	60f8      	str	r0, [r7, #12]
	}

	// ahbp
	temp = ((RCC->CFGR >> 4) & 0xF);
 800070c:	4b19      	ldr	r3, [pc, #100]	; (8000774 <RCC_GetPCLK1Value+0xa0>)
 800070e:	689b      	ldr	r3, [r3, #8]
 8000710:	091b      	lsrs	r3, r3, #4
 8000712:	b2db      	uxtb	r3, r3
 8000714:	f003 030f 	and.w	r3, r3, #15
 8000718:	723b      	strb	r3, [r7, #8]
	if(temp < 8)
 800071a:	7a3b      	ldrb	r3, [r7, #8]
 800071c:	2b07      	cmp	r3, #7
 800071e:	d802      	bhi.n	8000726 <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 8000720:	2301      	movs	r3, #1
 8000722:	72fb      	strb	r3, [r7, #11]
 8000724:	e005      	b.n	8000732 <RCC_GetPCLK1Value+0x5e>
	}
	else
	{
		ahbp = AHB_PreScalar[temp - 8];
 8000726:	7a3b      	ldrb	r3, [r7, #8]
 8000728:	3b08      	subs	r3, #8
 800072a:	4a15      	ldr	r2, [pc, #84]	; (8000780 <RCC_GetPCLK1Value+0xac>)
 800072c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000730:	72fb      	strb	r3, [r7, #11]
	}

	// apb1
	temp = ((RCC->CFGR >> 10) & 0x7);
 8000732:	4b10      	ldr	r3, [pc, #64]	; (8000774 <RCC_GetPCLK1Value+0xa0>)
 8000734:	689b      	ldr	r3, [r3, #8]
 8000736:	0a9b      	lsrs	r3, r3, #10
 8000738:	b2db      	uxtb	r3, r3
 800073a:	f003 0307 	and.w	r3, r3, #7
 800073e:	723b      	strb	r3, [r7, #8]
	if(temp < 4)
 8000740:	7a3b      	ldrb	r3, [r7, #8]
 8000742:	2b03      	cmp	r3, #3
 8000744:	d802      	bhi.n	800074c <RCC_GetPCLK1Value+0x78>
	{
		apb1 = 1;
 8000746:	2301      	movs	r3, #1
 8000748:	72bb      	strb	r3, [r7, #10]
 800074a:	e005      	b.n	8000758 <RCC_GetPCLK1Value+0x84>
	}
	else
	{
		apb1 = APB1_PreScalar[temp - 4];
 800074c:	7a3b      	ldrb	r3, [r7, #8]
 800074e:	3b04      	subs	r3, #4
 8000750:	4a0c      	ldr	r2, [pc, #48]	; (8000784 <RCC_GetPCLK1Value+0xb0>)
 8000752:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000756:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = (SystemClk / ahbp) / apb1;
 8000758:	7afb      	ldrb	r3, [r7, #11]
 800075a:	68fa      	ldr	r2, [r7, #12]
 800075c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000760:	7abb      	ldrb	r3, [r7, #10]
 8000762:	fbb2 f3f3 	udiv	r3, r2, r3
 8000766:	607b      	str	r3, [r7, #4]

	return pclk1;
 8000768:	687b      	ldr	r3, [r7, #4]
}
 800076a:	4618      	mov	r0, r3
 800076c:	3710      	adds	r7, #16
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40023800 	.word	0x40023800
 8000778:	00f42400 	.word	0x00f42400
 800077c:	007a1200 	.word	0x007a1200
 8000780:	20000000 	.word	0x20000000
 8000784:	20000010 	.word	0x20000010

08000788 <I2C_Init>:
 *
 *@Note					-
 *
 */
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
	// enable the clock for the i2cx peripheral
	I2C_PeripheralClockControl(pI2CHandle->pI2Cx, ENABLE);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	2101      	movs	r1, #1
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff ff3a 	bl	8000610 <I2C_PeripheralClockControl>

	uint32_t tempreg = 0;
 800079c:	2300      	movs	r3, #0
 800079e:	60fb      	str	r3, [r7, #12]


	// configure the FREQ field of CR2
	tempreg |= RCC_GetPCLK1Value() / 1000000U;
 80007a0:	f7ff ff98 	bl	80006d4 <RCC_GetPCLK1Value>
 80007a4:	4603      	mov	r3, r0
 80007a6:	4a46      	ldr	r2, [pc, #280]	; (80008c0 <I2C_Init+0x138>)
 80007a8:	fba2 2303 	umull	r2, r3, r2, r3
 80007ac:	0c9b      	lsrs	r3, r3, #18
 80007ae:	68fa      	ldr	r2, [r7, #12]
 80007b0:	4313      	orrs	r3, r2
 80007b2:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 = (tempreg & 0x3F);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	68fa      	ldr	r2, [r7, #12]
 80007ba:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80007be:	605a      	str	r2, [r3, #4]

	// program the device own address
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	7a1b      	ldrb	r3, [r3, #8]
 80007c4:	005b      	lsls	r3, r3, #1
 80007c6:	461a      	mov	r2, r3
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	4313      	orrs	r3, r2
 80007cc:	60fb      	str	r3, [r7, #12]
	tempreg |= (1 << 14);
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007d4:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	68fa      	ldr	r2, [r7, #12]
 80007dc:	609a      	str	r2, [r3, #8]

	// CCR calculation
	uint16_t ccr_value = 0;
 80007de:	2300      	movs	r3, #0
 80007e0:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	60fb      	str	r3, [r7, #12]

	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	685b      	ldr	r3, [r3, #4]
 80007ea:	4a36      	ldr	r2, [pc, #216]	; (80008c4 <I2C_Init+0x13c>)
 80007ec:	4293      	cmp	r3, r2
 80007ee:	d80f      	bhi.n	8000810 <I2C_Init+0x88>
	{
		// mode is standard mode
		ccr_value = RCC_GetPCLK1Value() / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 80007f0:	f7ff ff70 	bl	80006d4 <RCC_GetPCLK1Value>
 80007f4:	4602      	mov	r2, r0
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	685b      	ldr	r3, [r3, #4]
 80007fa:	005b      	lsls	r3, r3, #1
 80007fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000800:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8000802:	897b      	ldrh	r3, [r7, #10]
 8000804:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000808:	68fa      	ldr	r2, [r7, #12]
 800080a:	4313      	orrs	r3, r2
 800080c:	60fb      	str	r3, [r7, #12]
 800080e:	e02b      	b.n	8000868 <I2C_Init+0xe0>
	}
	else
	{
		// mode is fast mode
		tempreg |= (1 << 15);
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000816:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	895b      	ldrh	r3, [r3, #10]
 800081c:	039b      	lsls	r3, r3, #14
 800081e:	461a      	mov	r2, r3
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	4313      	orrs	r3, r2
 8000824:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	895b      	ldrh	r3, [r3, #10]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d10b      	bne.n	8000846 <I2C_Init+0xbe>
		{
			ccr_value = RCC_GetPCLK1Value() / (3 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 800082e:	f7ff ff51 	bl	80006d4 <RCC_GetPCLK1Value>
 8000832:	4601      	mov	r1, r0
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	685a      	ldr	r2, [r3, #4]
 8000838:	4613      	mov	r3, r2
 800083a:	005b      	lsls	r3, r3, #1
 800083c:	4413      	add	r3, r2
 800083e:	fbb1 f3f3 	udiv	r3, r1, r3
 8000842:	817b      	strh	r3, [r7, #10]
 8000844:	e00c      	b.n	8000860 <I2C_Init+0xd8>
		}
		else
		{
			ccr_value = RCC_GetPCLK1Value() / (25 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000846:	f7ff ff45 	bl	80006d4 <RCC_GetPCLK1Value>
 800084a:	4601      	mov	r1, r0
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	685a      	ldr	r2, [r3, #4]
 8000850:	4613      	mov	r3, r2
 8000852:	009b      	lsls	r3, r3, #2
 8000854:	4413      	add	r3, r2
 8000856:	009a      	lsls	r2, r3, #2
 8000858:	4413      	add	r3, r2
 800085a:	fbb1 f3f3 	udiv	r3, r1, r3
 800085e:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= ccr_value;
 8000860:	897b      	ldrh	r3, [r7, #10]
 8000862:	68fa      	ldr	r2, [r7, #12]
 8000864:	4313      	orrs	r3, r2
 8000866:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	68fa      	ldr	r2, [r7, #12]
 800086e:	61da      	str	r2, [r3, #28]

	// TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	685b      	ldr	r3, [r3, #4]
 8000874:	4a13      	ldr	r2, [pc, #76]	; (80008c4 <I2C_Init+0x13c>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d809      	bhi.n	800088e <I2C_Init+0x106>
	{
		// mode is standard mode
		tempreg = (RCC_GetPCLK1Value() / 1000000U) + 1;
 800087a:	f7ff ff2b 	bl	80006d4 <RCC_GetPCLK1Value>
 800087e:	4603      	mov	r3, r0
 8000880:	4a0f      	ldr	r2, [pc, #60]	; (80008c0 <I2C_Init+0x138>)
 8000882:	fba2 2303 	umull	r2, r3, r2, r3
 8000886:	0c9b      	lsrs	r3, r3, #18
 8000888:	3301      	adds	r3, #1
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	e00d      	b.n	80008aa <I2C_Init+0x122>
	}
	else
	{
		// mode is fast mode
		tempreg = ((RCC_GetPCLK1Value() * 300) / 1000000000U) + 1;
 800088e:	f7ff ff21 	bl	80006d4 <RCC_GetPCLK1Value>
 8000892:	4603      	mov	r3, r0
 8000894:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000898:	fb02 f303 	mul.w	r3, r2, r3
 800089c:	0a5b      	lsrs	r3, r3, #9
 800089e:	4a0a      	ldr	r2, [pc, #40]	; (80008c8 <I2C_Init+0x140>)
 80008a0:	fba2 2303 	umull	r2, r3, r2, r3
 80008a4:	09db      	lsrs	r3, r3, #7
 80008a6:	3301      	adds	r3, #1
 80008a8:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	68fa      	ldr	r2, [r7, #12]
 80008b0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80008b4:	621a      	str	r2, [r3, #32]


}
 80008b6:	bf00      	nop
 80008b8:	3710      	adds	r7, #16
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	431bde83 	.word	0x431bde83
 80008c4:	000186a0 	.word	0x000186a0
 80008c8:	00044b83 	.word	0x00044b83

080008cc <I2C_MAsterSendData>:
 *
 *@Note					-
 *
 */
void I2C_MAsterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxBuffer, uint8_t len, uint8_t slaveAddr)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	60f8      	str	r0, [r7, #12]
 80008d4:	60b9      	str	r1, [r7, #8]
 80008d6:	4611      	mov	r1, r2
 80008d8:	461a      	mov	r2, r3
 80008da:	460b      	mov	r3, r1
 80008dc:	71fb      	strb	r3, [r7, #7]
 80008de:	4613      	mov	r3, r2
 80008e0:	71bb      	strb	r3, [r7, #6]
	// 1. Generate the START condition
	I2C_generateStartCondition(pI2CHandle->pI2Cx);
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4618      	mov	r0, r3
 80008e8:	f000 f856 	bl	8000998 <I2C_generateStartCondition>

	// 2. Confirm that start generation is completed by checking the SB flag in the SR1
	// note: until SB is cleared SCL will be stretched (pulled to LOW)
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_SB_FLAG));
 80008ec:	bf00      	nop
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	2101      	movs	r1, #1
 80008f4:	4618      	mov	r0, r3
 80008f6:	f000 f955 	bl	8000ba4 <I2C_GetFlagStatus>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d0f6      	beq.n	80008ee <I2C_MAsterSendData+0x22>

	// 3. Send the address of the slave with r/nw bit set to w(0) (total 8 bits)
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx, slaveAddr);
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	79ba      	ldrb	r2, [r7, #6]
 8000906:	4611      	mov	r1, r2
 8000908:	4618      	mov	r0, r3
 800090a:	f000 f855 	bl	80009b8 <I2C_ExecuteAddressPhaseWrite>

	// 4. confirm that the address phase is completed by checking the ADDR flag in the SR1
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_ADDR_FLAG));
 800090e:	bf00      	nop
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2102      	movs	r1, #2
 8000916:	4618      	mov	r0, r3
 8000918:	f000 f944 	bl	8000ba4 <I2C_GetFlagStatus>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d0f6      	beq.n	8000910 <I2C_MAsterSendData+0x44>

	// 5. clear the ADDR flag according to its software sequence
	// Note : Until ADDR is cleared SCL will be stretched (pulled to LOW)
	I2C_ClearADDRFlag(pI2CHandle->pI2Cx);
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4618      	mov	r0, r3
 8000928:	f000 f872 	bl	8000a10 <I2C_ClearADDRFlag>

	// 6. Send the data until Len becomes 0
	while(len > 0)
 800092c:	e014      	b.n	8000958 <I2C_MAsterSendData+0x8c>
	{
		while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_TxE_FLAG)); // wait till TXE is set
 800092e:	bf00      	nop
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	2180      	movs	r1, #128	; 0x80
 8000936:	4618      	mov	r0, r3
 8000938:	f000 f934 	bl	8000ba4 <I2C_GetFlagStatus>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d0f6      	beq.n	8000930 <I2C_MAsterSendData+0x64>
		pI2CHandle->pI2Cx->DR = *pTxBuffer;
 8000942:	68bb      	ldr	r3, [r7, #8]
 8000944:	781a      	ldrb	r2, [r3, #0]
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	611a      	str	r2, [r3, #16]
		pTxBuffer++;
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	3301      	adds	r3, #1
 8000950:	60bb      	str	r3, [r7, #8]
		len--;
 8000952:	79fb      	ldrb	r3, [r7, #7]
 8000954:	3b01      	subs	r3, #1
 8000956:	71fb      	strb	r3, [r7, #7]
	while(len > 0)
 8000958:	79fb      	ldrb	r3, [r7, #7]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d1e7      	bne.n	800092e <I2C_MAsterSendData+0x62>
	}

	// 7. When Len becomes zero , wait for TXE = 1 and BTF = 1 before generating the STOP condition
	// NOTE: TXE = 1 , BTF = 1, means that both SR and DR are empty and next transition should begin
	// when BTF = 1 , SCL will be stretched (pulled to LOW)
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_TxE_FLAG));
 800095e:	bf00      	nop
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	2180      	movs	r1, #128	; 0x80
 8000966:	4618      	mov	r0, r3
 8000968:	f000 f91c 	bl	8000ba4 <I2C_GetFlagStatus>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d0f6      	beq.n	8000960 <I2C_MAsterSendData+0x94>
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_BTF_FLAG));
 8000972:	bf00      	nop
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2104      	movs	r1, #4
 800097a:	4618      	mov	r0, r3
 800097c:	f000 f912 	bl	8000ba4 <I2C_GetFlagStatus>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d0f6      	beq.n	8000974 <I2C_MAsterSendData+0xa8>


	// 8. generate STOP condition and master need no to wait for the completion of STOP condition.
	// Note : generating STOP, automatically clears the BTF
	I2C_generateStopCondition(pI2CHandle->pI2Cx);
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4618      	mov	r0, r3
 800098c:	f000 f850 	bl	8000a30 <I2C_generateStopCondition>


}
 8000990:	bf00      	nop
 8000992:	3710      	adds	r7, #16
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}

08000998 <I2C_generateStartCondition>:
static void I2C_generateStartCondition(I2C_RegDef_t *pI2Cx)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_START);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	601a      	str	r2, [r3, #0]
}
 80009ac:	bf00      	nop
 80009ae:	370c      	adds	r7, #12
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <I2C_ExecuteAddressPhaseWrite>:
static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t slaveAddr)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	460b      	mov	r3, r1
 80009c2:	70fb      	strb	r3, [r7, #3]
	slaveAddr = slaveAddr << 1;
 80009c4:	78fb      	ldrb	r3, [r7, #3]
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	70fb      	strb	r3, [r7, #3]
	slaveAddr &= ~(1 << 0);
 80009ca:	78fb      	ldrb	r3, [r7, #3]
 80009cc:	f023 0301 	bic.w	r3, r3, #1
 80009d0:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = slaveAddr;
 80009d2:	78fa      	ldrb	r2, [r7, #3]
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	611a      	str	r2, [r3, #16]
}
 80009d8:	bf00      	nop
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <I2C_ExecuteAddressPhaseRead>:
static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t slaveAddr)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	460b      	mov	r3, r1
 80009ee:	70fb      	strb	r3, [r7, #3]
	slaveAddr = slaveAddr << 1;
 80009f0:	78fb      	ldrb	r3, [r7, #3]
 80009f2:	005b      	lsls	r3, r3, #1
 80009f4:	70fb      	strb	r3, [r7, #3]
	slaveAddr |= (1 << 0);
 80009f6:	78fb      	ldrb	r3, [r7, #3]
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = slaveAddr;
 80009fe:	78fa      	ldrb	r2, [r7, #3]
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	611a      	str	r2, [r3, #16]
}
 8000a04:	bf00      	nop
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr

08000a10 <I2C_ClearADDRFlag>:
static void I2C_ClearADDRFlag(I2C_RegDef_t *pI2Cx)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
	uint32_t dummyRead = pI2Cx->SR1;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	695b      	ldr	r3, [r3, #20]
 8000a1c:	60fb      	str	r3, [r7, #12]
	dummyRead = pI2Cx->SR2;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	699b      	ldr	r3, [r3, #24]
 8000a22:	60fb      	str	r3, [r7, #12]
	(void)dummyRead;
}
 8000a24:	bf00      	nop
 8000a26:	3714      	adds	r7, #20
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <I2C_generateStopCondition>:
static void I2C_generateStopCondition(I2C_RegDef_t *pI2Cx)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	601a      	str	r2, [r3, #0]
}
 8000a44:	bf00      	nop
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr

08000a50 <I2C_MasterReceiveData>:
 *
 *@Note					-
 *
 */
void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle, uint8_t *pRxBuffer, uint8_t len, uint8_t slaveAddr)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b086      	sub	sp, #24
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	60f8      	str	r0, [r7, #12]
 8000a58:	60b9      	str	r1, [r7, #8]
 8000a5a:	4611      	mov	r1, r2
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	460b      	mov	r3, r1
 8000a60:	71fb      	strb	r3, [r7, #7]
 8000a62:	4613      	mov	r3, r2
 8000a64:	71bb      	strb	r3, [r7, #6]
	// 1. Generate the START condition
	I2C_generateStartCondition(pI2CHandle->pI2Cx);
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff ff94 	bl	8000998 <I2C_generateStartCondition>

	// 2. confirm that start generation is completed by checking the SB flag in the SR1
	// 	Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_SB_FLAG));
 8000a70:	bf00      	nop
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	2101      	movs	r1, #1
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f000 f893 	bl	8000ba4 <I2C_GetFlagStatus>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d0f6      	beq.n	8000a72 <I2C_MasterReceiveData+0x22>

	// 3. Send the address of the slave with r/nw bit set to R(1) (total 8 bits)
	I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx, slaveAddr);
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	79ba      	ldrb	r2, [r7, #6]
 8000a8a:	4611      	mov	r1, r2
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff ffa9 	bl	80009e4 <I2C_ExecuteAddressPhaseRead>

	// 4. wait until address phase is completed by checking the ADDR flag in the SR1
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_ADDR_FLAG));
 8000a92:	bf00      	nop
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2102      	movs	r1, #2
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f000 f882 	bl	8000ba4 <I2C_GetFlagStatus>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d0f6      	beq.n	8000a94 <I2C_MasterReceiveData+0x44>

	// procedure to read only 1 byte from slave
	if(len == 1)
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
 8000aa8:	2b01      	cmp	r3, #1
 8000aaa:	d11f      	bne.n	8000aec <I2C_MasterReceiveData+0x9c>
	{
		// Disable Acking
		I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_DISABLE);
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f000 f88a 	bl	8000bcc <I2C_ManageAcking>

		// clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle->pI2Cx);
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff ffa7 	bl	8000a10 <I2C_ClearADDRFlag>

		// wait until RXNE becomes 1
		while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_RxNE_FLAG));
 8000ac2:	bf00      	nop
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	2140      	movs	r1, #64	; 0x40
 8000aca:	4618      	mov	r0, r3
 8000acc:	f000 f86a 	bl	8000ba4 <I2C_GetFlagStatus>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d0f6      	beq.n	8000ac4 <I2C_MasterReceiveData+0x74>

		// generate STOP condition
		I2C_generateStopCondition(pI2CHandle->pI2Cx);
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4618      	mov	r0, r3
 8000adc:	f7ff ffa8 	bl	8000a30 <I2C_generateStopCondition>

		// read data in to buffer
		*pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	691b      	ldr	r3, [r3, #16]
 8000ae6:	b2da      	uxtb	r2, r3
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	701a      	strb	r2, [r3, #0]

	}

	// procedure to read data from slave when len > 1
	if(len > 1)
 8000aec:	79fb      	ldrb	r3, [r7, #7]
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d92e      	bls.n	8000b50 <I2C_MasterReceiveData+0x100>
	{
		// clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle->pI2Cx);
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff ff8a 	bl	8000a10 <I2C_ClearADDRFlag>

		// read the data until len becomes zero
		for(uint32_t i = len; i > 0; i--)
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	617b      	str	r3, [r7, #20]
 8000b00:	e023      	b.n	8000b4a <I2C_MasterReceiveData+0xfa>
		{
			// wait until RXNE becomes 1
			while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_RxNE_FLAG));
 8000b02:	bf00      	nop
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2140      	movs	r1, #64	; 0x40
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f000 f84a 	bl	8000ba4 <I2C_GetFlagStatus>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d0f6      	beq.n	8000b04 <I2C_MasterReceiveData+0xb4>

			if(i == 2) // if last 2 bytes are remaining
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	2b02      	cmp	r3, #2
 8000b1a:	d10a      	bne.n	8000b32 <I2C_MasterReceiveData+0xe2>
			{
				// clear the ack bit
				I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_DISABLE);
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2100      	movs	r1, #0
 8000b22:	4618      	mov	r0, r3
 8000b24:	f000 f852 	bl	8000bcc <I2C_ManageAcking>

				// generate STOP condition
				I2C_generateStopCondition(pI2CHandle->pI2Cx);
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff ff7f 	bl	8000a30 <I2C_generateStopCondition>
			}

			// read the data from data register in to buffer
			*pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	691b      	ldr	r3, [r3, #16]
 8000b38:	b2da      	uxtb	r2, r3
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	701a      	strb	r2, [r3, #0]

			// increment the buffer address
			pRxBuffer++;
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	3301      	adds	r3, #1
 8000b42:	60bb      	str	r3, [r7, #8]
		for(uint32_t i = len; i > 0; i--)
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	3b01      	subs	r3, #1
 8000b48:	617b      	str	r3, [r7, #20]
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d1d8      	bne.n	8000b02 <I2C_MasterReceiveData+0xb2>
		}
	}

	// re-enable ACKings
	if(pI2CHandle->I2C_Config.I2C_ACKControl == I2C_ACK_ENABLE)
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	7a5b      	ldrb	r3, [r3, #9]
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d105      	bne.n	8000b64 <I2C_MasterReceiveData+0x114>
		I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_ENABLE);
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	2101      	movs	r1, #1
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f000 f834 	bl	8000bcc <I2C_ManageAcking>
}
 8000b64:	bf00      	nop
 8000b66:	3718      	adds	r7, #24
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <I2C_PeripheralControl>:
  *
  *@Note					-
  *
  */
 void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
 {
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	460b      	mov	r3, r1
 8000b76:	70fb      	strb	r3, [r7, #3]
		if(EnorDi == ENABLE)
 8000b78:	78fb      	ldrb	r3, [r7, #3]
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d106      	bne.n	8000b8c <I2C_PeripheralControl+0x20>
		{
			pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f043 0201 	orr.w	r2, r3, #1
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	601a      	str	r2, [r3, #0]
		}
		else
		{
			pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
		}
 }
 8000b8a:	e005      	b.n	8000b98 <I2C_PeripheralControl+0x2c>
			pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f023 0201 	bic.w	r2, r3, #1
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	601a      	str	r2, [r3, #0]
 }
 8000b98:	bf00      	nop
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <I2C_GetFlagStatus>:
  *
  *@Note					-
  *
  */
 uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint32_t FlagName)
 {
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	6039      	str	r1, [r7, #0]
		if(pI2Cx->SR1 & FlagName)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	695a      	ldr	r2, [r3, #20]
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <I2C_GetFlagStatus+0x1a>
			return FLAG_SET;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e000      	b.n	8000bc0 <I2C_GetFlagStatus+0x1c>
		else
			return FLAG_RESET;
 8000bbe:	2300      	movs	r3, #0
 }
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <I2C_ManageAcking>:
  *
  *@Note					-
  *
  */
 void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
 {
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	70fb      	strb	r3, [r7, #3]
	 if(EnorDi == I2C_ACK_ENABLE)
 8000bd8:	78fb      	ldrb	r3, [r7, #3]
 8000bda:	2b01      	cmp	r3, #1
 8000bdc:	d106      	bne.n	8000bec <I2C_ManageAcking+0x20>
	 {
		 // enable the ack
		 pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	601a      	str	r2, [r3, #0]
	 {
		 // disable the ack
		 pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
	 }

 }
 8000bea:	e005      	b.n	8000bf8 <I2C_ManageAcking+0x2c>
		 pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	601a      	str	r2, [r3, #0]
 }
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <GPIO_PeripheralClockControl>:
 *
 *@Note					- none
 *
 */
void GPIO_PeripheralClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	460b      	mov	r3, r1
 8000c0e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000c10:	78fb      	ldrb	r3, [r7, #3]
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d162      	bne.n	8000cdc <GPIO_PeripheralClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4a64      	ldr	r2, [pc, #400]	; (8000dac <GPIO_PeripheralClockControl+0x1a8>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d106      	bne.n	8000c2c <GPIO_PeripheralClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000c1e:	4b64      	ldr	r3, [pc, #400]	; (8000db0 <GPIO_PeripheralClockControl+0x1ac>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	4a63      	ldr	r2, [pc, #396]	; (8000db0 <GPIO_PeripheralClockControl+0x1ac>)
 8000c24:	f043 0301 	orr.w	r3, r3, #1
 8000c28:	6313      	str	r3, [r2, #48]	; 0x30
		else if(pGPIOx == GPIOI)
		{
			GPIOI_PCLK_DI();
		}
	}
}
 8000c2a:	e0b9      	b.n	8000da0 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	4a61      	ldr	r2, [pc, #388]	; (8000db4 <GPIO_PeripheralClockControl+0x1b0>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d106      	bne.n	8000c42 <GPIO_PeripheralClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000c34:	4b5e      	ldr	r3, [pc, #376]	; (8000db0 <GPIO_PeripheralClockControl+0x1ac>)
 8000c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c38:	4a5d      	ldr	r2, [pc, #372]	; (8000db0 <GPIO_PeripheralClockControl+0x1ac>)
 8000c3a:	f043 0302 	orr.w	r3, r3, #2
 8000c3e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c40:	e0ae      	b.n	8000da0 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4a5c      	ldr	r2, [pc, #368]	; (8000db8 <GPIO_PeripheralClockControl+0x1b4>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d106      	bne.n	8000c58 <GPIO_PeripheralClockControl+0x54>
			GPIOC_PCLK_EN();
 8000c4a:	4b59      	ldr	r3, [pc, #356]	; (8000db0 <GPIO_PeripheralClockControl+0x1ac>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	4a58      	ldr	r2, [pc, #352]	; (8000db0 <GPIO_PeripheralClockControl+0x1ac>)
 8000c50:	f043 0304 	orr.w	r3, r3, #4
 8000c54:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c56:	e0a3      	b.n	8000da0 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4a58      	ldr	r2, [pc, #352]	; (8000dbc <GPIO_PeripheralClockControl+0x1b8>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d106      	bne.n	8000c6e <GPIO_PeripheralClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000c60:	4b53      	ldr	r3, [pc, #332]	; (8000db0 <GPIO_PeripheralClockControl+0x1ac>)
 8000c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c64:	4a52      	ldr	r2, [pc, #328]	; (8000db0 <GPIO_PeripheralClockControl+0x1ac>)
 8000c66:	f043 0308 	orr.w	r3, r3, #8
 8000c6a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c6c:	e098      	b.n	8000da0 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4a53      	ldr	r2, [pc, #332]	; (8000dc0 <GPIO_PeripheralClockControl+0x1bc>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d106      	bne.n	8000c84 <GPIO_PeripheralClockControl+0x80>
			GPIOE_PCLK_EN();
 8000c76:	4b4e      	ldr	r3, [pc, #312]	; (8000db0 <GPIO_PeripheralClockControl+0x1ac>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	4a4d      	ldr	r2, [pc, #308]	; (8000db0 <GPIO_PeripheralClockControl+0x1ac>)
 8000c7c:	f043 0310 	orr.w	r3, r3, #16
 8000c80:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c82:	e08d      	b.n	8000da0 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	4a4f      	ldr	r2, [pc, #316]	; (8000dc4 <GPIO_PeripheralClockControl+0x1c0>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d106      	bne.n	8000c9a <GPIO_PeripheralClockControl+0x96>
			GPIOF_PCLK_EN();
 8000c8c:	4b48      	ldr	r3, [pc, #288]	; (8000db0 <GPIO_PeripheralClockControl+0x1ac>)
 8000c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c90:	4a47      	ldr	r2, [pc, #284]	; (8000db0 <GPIO_PeripheralClockControl+0x1ac>)
 8000c92:	f043 0320 	orr.w	r3, r3, #32
 8000c96:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c98:	e082      	b.n	8000da0 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4a4a      	ldr	r2, [pc, #296]	; (8000dc8 <GPIO_PeripheralClockControl+0x1c4>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d106      	bne.n	8000cb0 <GPIO_PeripheralClockControl+0xac>
			GPIOG_PCLK_EN();
 8000ca2:	4b43      	ldr	r3, [pc, #268]	; (8000db0 <GPIO_PeripheralClockControl+0x1ac>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a42      	ldr	r2, [pc, #264]	; (8000db0 <GPIO_PeripheralClockControl+0x1ac>)
 8000ca8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000cae:	e077      	b.n	8000da0 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	4a46      	ldr	r2, [pc, #280]	; (8000dcc <GPIO_PeripheralClockControl+0x1c8>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d106      	bne.n	8000cc6 <GPIO_PeripheralClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000cb8:	4b3d      	ldr	r3, [pc, #244]	; (8000db0 <GPIO_PeripheralClockControl+0x1ac>)
 8000cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbc:	4a3c      	ldr	r2, [pc, #240]	; (8000db0 <GPIO_PeripheralClockControl+0x1ac>)
 8000cbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cc2:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000cc4:	e06c      	b.n	8000da0 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4a41      	ldr	r2, [pc, #260]	; (8000dd0 <GPIO_PeripheralClockControl+0x1cc>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d168      	bne.n	8000da0 <GPIO_PeripheralClockControl+0x19c>
			GPIOI_PCLK_EN();
 8000cce:	4b38      	ldr	r3, [pc, #224]	; (8000db0 <GPIO_PeripheralClockControl+0x1ac>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	4a37      	ldr	r2, [pc, #220]	; (8000db0 <GPIO_PeripheralClockControl+0x1ac>)
 8000cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cd8:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000cda:	e061      	b.n	8000da0 <GPIO_PeripheralClockControl+0x19c>
		if(pGPIOx == GPIOA)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	4a33      	ldr	r2, [pc, #204]	; (8000dac <GPIO_PeripheralClockControl+0x1a8>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d106      	bne.n	8000cf2 <GPIO_PeripheralClockControl+0xee>
			GPIOA_PCLK_DI();
 8000ce4:	4b32      	ldr	r3, [pc, #200]	; (8000db0 <GPIO_PeripheralClockControl+0x1ac>)
 8000ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce8:	4a31      	ldr	r2, [pc, #196]	; (8000db0 <GPIO_PeripheralClockControl+0x1ac>)
 8000cea:	f023 0301 	bic.w	r3, r3, #1
 8000cee:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000cf0:	e056      	b.n	8000da0 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4a2f      	ldr	r2, [pc, #188]	; (8000db4 <GPIO_PeripheralClockControl+0x1b0>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d106      	bne.n	8000d08 <GPIO_PeripheralClockControl+0x104>
			GPIOB_PCLK_DI();
 8000cfa:	4b2d      	ldr	r3, [pc, #180]	; (8000db0 <GPIO_PeripheralClockControl+0x1ac>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	4a2c      	ldr	r2, [pc, #176]	; (8000db0 <GPIO_PeripheralClockControl+0x1ac>)
 8000d00:	f023 0302 	bic.w	r3, r3, #2
 8000d04:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d06:	e04b      	b.n	8000da0 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	4a2b      	ldr	r2, [pc, #172]	; (8000db8 <GPIO_PeripheralClockControl+0x1b4>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d106      	bne.n	8000d1e <GPIO_PeripheralClockControl+0x11a>
			GPIOC_PCLK_DI();
 8000d10:	4b27      	ldr	r3, [pc, #156]	; (8000db0 <GPIO_PeripheralClockControl+0x1ac>)
 8000d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d14:	4a26      	ldr	r2, [pc, #152]	; (8000db0 <GPIO_PeripheralClockControl+0x1ac>)
 8000d16:	f023 0304 	bic.w	r3, r3, #4
 8000d1a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d1c:	e040      	b.n	8000da0 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4a26      	ldr	r2, [pc, #152]	; (8000dbc <GPIO_PeripheralClockControl+0x1b8>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d106      	bne.n	8000d34 <GPIO_PeripheralClockControl+0x130>
			GPIOD_PCLK_DI();
 8000d26:	4b22      	ldr	r3, [pc, #136]	; (8000db0 <GPIO_PeripheralClockControl+0x1ac>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	4a21      	ldr	r2, [pc, #132]	; (8000db0 <GPIO_PeripheralClockControl+0x1ac>)
 8000d2c:	f023 0308 	bic.w	r3, r3, #8
 8000d30:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d32:	e035      	b.n	8000da0 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	4a22      	ldr	r2, [pc, #136]	; (8000dc0 <GPIO_PeripheralClockControl+0x1bc>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d106      	bne.n	8000d4a <GPIO_PeripheralClockControl+0x146>
			GPIOE_PCLK_DI();
 8000d3c:	4b1c      	ldr	r3, [pc, #112]	; (8000db0 <GPIO_PeripheralClockControl+0x1ac>)
 8000d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d40:	4a1b      	ldr	r2, [pc, #108]	; (8000db0 <GPIO_PeripheralClockControl+0x1ac>)
 8000d42:	f023 0310 	bic.w	r3, r3, #16
 8000d46:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d48:	e02a      	b.n	8000da0 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4a1d      	ldr	r2, [pc, #116]	; (8000dc4 <GPIO_PeripheralClockControl+0x1c0>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d106      	bne.n	8000d60 <GPIO_PeripheralClockControl+0x15c>
			GPIOF_PCLK_DI();
 8000d52:	4b17      	ldr	r3, [pc, #92]	; (8000db0 <GPIO_PeripheralClockControl+0x1ac>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	4a16      	ldr	r2, [pc, #88]	; (8000db0 <GPIO_PeripheralClockControl+0x1ac>)
 8000d58:	f023 0320 	bic.w	r3, r3, #32
 8000d5c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d5e:	e01f      	b.n	8000da0 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4a19      	ldr	r2, [pc, #100]	; (8000dc8 <GPIO_PeripheralClockControl+0x1c4>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d106      	bne.n	8000d76 <GPIO_PeripheralClockControl+0x172>
			GPIOG_PCLK_DI();
 8000d68:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <GPIO_PeripheralClockControl+0x1ac>)
 8000d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6c:	4a10      	ldr	r2, [pc, #64]	; (8000db0 <GPIO_PeripheralClockControl+0x1ac>)
 8000d6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000d72:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d74:	e014      	b.n	8000da0 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a14      	ldr	r2, [pc, #80]	; (8000dcc <GPIO_PeripheralClockControl+0x1c8>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d106      	bne.n	8000d8c <GPIO_PeripheralClockControl+0x188>
			GPIOH_PCLK_DI();
 8000d7e:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <GPIO_PeripheralClockControl+0x1ac>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	4a0b      	ldr	r2, [pc, #44]	; (8000db0 <GPIO_PeripheralClockControl+0x1ac>)
 8000d84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000d88:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d8a:	e009      	b.n	8000da0 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4a10      	ldr	r2, [pc, #64]	; (8000dd0 <GPIO_PeripheralClockControl+0x1cc>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d105      	bne.n	8000da0 <GPIO_PeripheralClockControl+0x19c>
			GPIOI_PCLK_DI();
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <GPIO_PeripheralClockControl+0x1ac>)
 8000d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d98:	4a05      	ldr	r2, [pc, #20]	; (8000db0 <GPIO_PeripheralClockControl+0x1ac>)
 8000d9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d9e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	40020000 	.word	0x40020000
 8000db0:	40023800 	.word	0x40023800
 8000db4:	40020400 	.word	0x40020400
 8000db8:	40020800 	.word	0x40020800
 8000dbc:	40020c00 	.word	0x40020c00
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	40021400 	.word	0x40021400
 8000dc8:	40021800 	.word	0x40021800
 8000dcc:	40021c00 	.word	0x40021c00
 8000dd0:	40022000 	.word	0x40022000

08000dd4 <GPIO_Init>:

/*
 * Init and De-init
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0; // temp register
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]

	// enable the peripheral clock
	GPIO_PeripheralClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2101      	movs	r1, #1
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff ff0c 	bl	8000c04 <GPIO_PeripheralClockControl>

	// 1. configure the mode of gpio pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	795b      	ldrb	r3, [r3, #5]
 8000df0:	2b03      	cmp	r3, #3
 8000df2:	d820      	bhi.n	8000e36 <GPIO_Init+0x62>
	{
		// the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	795b      	ldrb	r3, [r3, #5]
 8000df8:	461a      	mov	r2, r3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	791b      	ldrb	r3, [r3, #4]
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clear
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	791b      	ldrb	r3, [r3, #4]
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	2103      	movs	r1, #3
 8000e14:	fa01 f303 	lsl.w	r3, r1, r3
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	400a      	ands	r2, r1
 8000e22:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;	// setting
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	6819      	ldr	r1, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	697a      	ldr	r2, [r7, #20]
 8000e30:	430a      	orrs	r2, r1
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	e0c1      	b.n	8000fba <GPIO_Init+0x1e6>

	}
	else
	{
		// this part will code later (interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	795b      	ldrb	r3, [r3, #5]
 8000e3a:	2b04      	cmp	r3, #4
 8000e3c:	d117      	bne.n	8000e6e <GPIO_Init+0x9a>
		{
			// 1. configure the FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000e3e:	4b47      	ldr	r3, [pc, #284]	; (8000f5c <GPIO_Init+0x188>)
 8000e40:	68db      	ldr	r3, [r3, #12]
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	7912      	ldrb	r2, [r2, #4]
 8000e46:	4611      	mov	r1, r2
 8000e48:	2201      	movs	r2, #1
 8000e4a:	408a      	lsls	r2, r1
 8000e4c:	4611      	mov	r1, r2
 8000e4e:	4a43      	ldr	r2, [pc, #268]	; (8000f5c <GPIO_Init+0x188>)
 8000e50:	430b      	orrs	r3, r1
 8000e52:	60d3      	str	r3, [r2, #12]
			// Clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000e54:	4b41      	ldr	r3, [pc, #260]	; (8000f5c <GPIO_Init+0x188>)
 8000e56:	689b      	ldr	r3, [r3, #8]
 8000e58:	687a      	ldr	r2, [r7, #4]
 8000e5a:	7912      	ldrb	r2, [r2, #4]
 8000e5c:	4611      	mov	r1, r2
 8000e5e:	2201      	movs	r2, #1
 8000e60:	408a      	lsls	r2, r1
 8000e62:	43d2      	mvns	r2, r2
 8000e64:	4611      	mov	r1, r2
 8000e66:	4a3d      	ldr	r2, [pc, #244]	; (8000f5c <GPIO_Init+0x188>)
 8000e68:	400b      	ands	r3, r1
 8000e6a:	6093      	str	r3, [r2, #8]
 8000e6c:	e035      	b.n	8000eda <GPIO_Init+0x106>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	795b      	ldrb	r3, [r3, #5]
 8000e72:	2b05      	cmp	r3, #5
 8000e74:	d117      	bne.n	8000ea6 <GPIO_Init+0xd2>
		{
			// 1. configure the RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000e76:	4b39      	ldr	r3, [pc, #228]	; (8000f5c <GPIO_Init+0x188>)
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	7912      	ldrb	r2, [r2, #4]
 8000e7e:	4611      	mov	r1, r2
 8000e80:	2201      	movs	r2, #1
 8000e82:	408a      	lsls	r2, r1
 8000e84:	4611      	mov	r1, r2
 8000e86:	4a35      	ldr	r2, [pc, #212]	; (8000f5c <GPIO_Init+0x188>)
 8000e88:	430b      	orrs	r3, r1
 8000e8a:	6093      	str	r3, [r2, #8]
			// Clear the corresponding FTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000e8c:	4b33      	ldr	r3, [pc, #204]	; (8000f5c <GPIO_Init+0x188>)
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	7912      	ldrb	r2, [r2, #4]
 8000e94:	4611      	mov	r1, r2
 8000e96:	2201      	movs	r2, #1
 8000e98:	408a      	lsls	r2, r1
 8000e9a:	43d2      	mvns	r2, r2
 8000e9c:	4611      	mov	r1, r2
 8000e9e:	4a2f      	ldr	r2, [pc, #188]	; (8000f5c <GPIO_Init+0x188>)
 8000ea0:	400b      	ands	r3, r1
 8000ea2:	60d3      	str	r3, [r2, #12]
 8000ea4:	e019      	b.n	8000eda <GPIO_Init+0x106>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	795b      	ldrb	r3, [r3, #5]
 8000eaa:	2b06      	cmp	r3, #6
 8000eac:	d115      	bne.n	8000eda <GPIO_Init+0x106>
		{
			// 1. configure both FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000eae:	4b2b      	ldr	r3, [pc, #172]	; (8000f5c <GPIO_Init+0x188>)
 8000eb0:	68db      	ldr	r3, [r3, #12]
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	7912      	ldrb	r2, [r2, #4]
 8000eb6:	4611      	mov	r1, r2
 8000eb8:	2201      	movs	r2, #1
 8000eba:	408a      	lsls	r2, r1
 8000ebc:	4611      	mov	r1, r2
 8000ebe:	4a27      	ldr	r2, [pc, #156]	; (8000f5c <GPIO_Init+0x188>)
 8000ec0:	430b      	orrs	r3, r1
 8000ec2:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000ec4:	4b25      	ldr	r3, [pc, #148]	; (8000f5c <GPIO_Init+0x188>)
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	687a      	ldr	r2, [r7, #4]
 8000eca:	7912      	ldrb	r2, [r2, #4]
 8000ecc:	4611      	mov	r1, r2
 8000ece:	2201      	movs	r2, #1
 8000ed0:	408a      	lsls	r2, r1
 8000ed2:	4611      	mov	r1, r2
 8000ed4:	4a21      	ldr	r2, [pc, #132]	; (8000f5c <GPIO_Init+0x188>)
 8000ed6:	430b      	orrs	r3, r1
 8000ed8:	6093      	str	r3, [r2, #8]
		}

		// 2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	791b      	ldrb	r3, [r3, #4]
 8000ede:	089b      	lsrs	r3, r3, #2
 8000ee0:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	791b      	ldrb	r3, [r3, #4]
 8000ee6:	f003 0303 	and.w	r3, r3, #3
 8000eea:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a1b      	ldr	r2, [pc, #108]	; (8000f60 <GPIO_Init+0x18c>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d044      	beq.n	8000f80 <GPIO_Init+0x1ac>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a1a      	ldr	r2, [pc, #104]	; (8000f64 <GPIO_Init+0x190>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d02b      	beq.n	8000f58 <GPIO_Init+0x184>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a18      	ldr	r2, [pc, #96]	; (8000f68 <GPIO_Init+0x194>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d024      	beq.n	8000f54 <GPIO_Init+0x180>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a17      	ldr	r2, [pc, #92]	; (8000f6c <GPIO_Init+0x198>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d01d      	beq.n	8000f50 <GPIO_Init+0x17c>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a15      	ldr	r2, [pc, #84]	; (8000f70 <GPIO_Init+0x19c>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d016      	beq.n	8000f4c <GPIO_Init+0x178>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a14      	ldr	r2, [pc, #80]	; (8000f74 <GPIO_Init+0x1a0>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d00f      	beq.n	8000f48 <GPIO_Init+0x174>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a12      	ldr	r2, [pc, #72]	; (8000f78 <GPIO_Init+0x1a4>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d008      	beq.n	8000f44 <GPIO_Init+0x170>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a11      	ldr	r2, [pc, #68]	; (8000f7c <GPIO_Init+0x1a8>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d101      	bne.n	8000f40 <GPIO_Init+0x16c>
 8000f3c:	2307      	movs	r3, #7
 8000f3e:	e020      	b.n	8000f82 <GPIO_Init+0x1ae>
 8000f40:	2308      	movs	r3, #8
 8000f42:	e01e      	b.n	8000f82 <GPIO_Init+0x1ae>
 8000f44:	2306      	movs	r3, #6
 8000f46:	e01c      	b.n	8000f82 <GPIO_Init+0x1ae>
 8000f48:	2305      	movs	r3, #5
 8000f4a:	e01a      	b.n	8000f82 <GPIO_Init+0x1ae>
 8000f4c:	2304      	movs	r3, #4
 8000f4e:	e018      	b.n	8000f82 <GPIO_Init+0x1ae>
 8000f50:	2303      	movs	r3, #3
 8000f52:	e016      	b.n	8000f82 <GPIO_Init+0x1ae>
 8000f54:	2302      	movs	r3, #2
 8000f56:	e014      	b.n	8000f82 <GPIO_Init+0x1ae>
 8000f58:	2301      	movs	r3, #1
 8000f5a:	e012      	b.n	8000f82 <GPIO_Init+0x1ae>
 8000f5c:	40013c00 	.word	0x40013c00
 8000f60:	40020000 	.word	0x40020000
 8000f64:	40020400 	.word	0x40020400
 8000f68:	40020800 	.word	0x40020800
 8000f6c:	40020c00 	.word	0x40020c00
 8000f70:	40021000 	.word	0x40021000
 8000f74:	40021400 	.word	0x40021400
 8000f78:	40021800 	.word	0x40021800
 8000f7c:	40021c00 	.word	0x40021c00
 8000f80:	2300      	movs	r3, #0
 8000f82:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000f84:	4b5c      	ldr	r3, [pc, #368]	; (80010f8 <GPIO_Init+0x324>)
 8000f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f88:	4a5b      	ldr	r2, [pc, #364]	; (80010f8 <GPIO_Init+0x324>)
 8000f8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f8e:	6453      	str	r3, [r2, #68]	; 0x44
		SYS_CFG->EXTICR[temp1] = portcode << (temp2 * 4);
 8000f90:	7c7a      	ldrb	r2, [r7, #17]
 8000f92:	7cbb      	ldrb	r3, [r7, #18]
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	fa02 f103 	lsl.w	r1, r2, r3
 8000f9a:	4a58      	ldr	r2, [pc, #352]	; (80010fc <GPIO_Init+0x328>)
 8000f9c:	7cfb      	ldrb	r3, [r7, #19]
 8000f9e:	3302      	adds	r3, #2
 8000fa0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]


		// 3. enable the exti interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000fa4:	4b56      	ldr	r3, [pc, #344]	; (8001100 <GPIO_Init+0x32c>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	687a      	ldr	r2, [r7, #4]
 8000faa:	7912      	ldrb	r2, [r2, #4]
 8000fac:	4611      	mov	r1, r2
 8000fae:	2201      	movs	r2, #1
 8000fb0:	408a      	lsls	r2, r1
 8000fb2:	4611      	mov	r1, r2
 8000fb4:	4a52      	ldr	r2, [pc, #328]	; (8001100 <GPIO_Init+0x32c>)
 8000fb6:	430b      	orrs	r3, r1
 8000fb8:	6013      	str	r3, [r2, #0]
	}

	// 2. configure the speed
	temp = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	799b      	ldrb	r3, [r3, #6]
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	791b      	ldrb	r3, [r3, #4]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clear
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	689a      	ldr	r2, [r3, #8]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	791b      	ldrb	r3, [r3, #4]
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	2103      	movs	r1, #3
 8000fde:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	400a      	ands	r2, r1
 8000fec:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;	// setting
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	6899      	ldr	r1, [r3, #8]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	697a      	ldr	r2, [r7, #20]
 8000ffa:	430a      	orrs	r2, r1
 8000ffc:	609a      	str	r2, [r3, #8]

	// 3. configure the pupd settings
	temp = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	79db      	ldrb	r3, [r3, #7]
 8001006:	461a      	mov	r2, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	791b      	ldrb	r3, [r3, #4]
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clear
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	68da      	ldr	r2, [r3, #12]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	791b      	ldrb	r3, [r3, #4]
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	2103      	movs	r1, #3
 8001022:	fa01 f303 	lsl.w	r3, r1, r3
 8001026:	43db      	mvns	r3, r3
 8001028:	4619      	mov	r1, r3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	400a      	ands	r2, r1
 8001030:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;	// setting
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	68d9      	ldr	r1, [r3, #12]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	697a      	ldr	r2, [r7, #20]
 800103e:	430a      	orrs	r2, r1
 8001040:	60da      	str	r2, [r3, #12]


	// 4. configure the optype
	temp = 0;
 8001042:	2300      	movs	r3, #0
 8001044:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	7a1b      	ldrb	r3, [r3, #8]
 800104a:	461a      	mov	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	791b      	ldrb	r3, [r3, #4]
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x01 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clear
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	685a      	ldr	r2, [r3, #4]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	791b      	ldrb	r3, [r3, #4]
 8001060:	4619      	mov	r1, r3
 8001062:	2301      	movs	r3, #1
 8001064:	408b      	lsls	r3, r1
 8001066:	43db      	mvns	r3, r3
 8001068:	4619      	mov	r1, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	400a      	ands	r2, r1
 8001070:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;	// setting
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	6859      	ldr	r1, [r3, #4]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	697a      	ldr	r2, [r7, #20]
 800107e:	430a      	orrs	r2, r1
 8001080:	605a      	str	r2, [r3, #4]

	// 5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	795b      	ldrb	r3, [r3, #5]
 8001086:	2b02      	cmp	r3, #2
 8001088:	d131      	bne.n	80010ee <GPIO_Init+0x31a>
	{
		// configure the alt function register
		uint8_t temp1,temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	791b      	ldrb	r3, [r3, #4]
 800108e:	08db      	lsrs	r3, r3, #3
 8001090:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	791b      	ldrb	r3, [r3, #4]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2)); // clearing
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	7c3a      	ldrb	r2, [r7, #16]
 80010a2:	3208      	adds	r2, #8
 80010a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	220f      	movs	r2, #15
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43db      	mvns	r3, r3
 80010b4:	4618      	mov	r0, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	7c3a      	ldrb	r2, [r7, #16]
 80010bc:	4001      	ands	r1, r0
 80010be:	3208      	adds	r2, #8
 80010c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2); // setting
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	7c3a      	ldrb	r2, [r7, #16]
 80010ca:	3208      	adds	r2, #8
 80010cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	7a5b      	ldrb	r3, [r3, #9]
 80010d4:	461a      	mov	r2, r3
 80010d6:	7bfb      	ldrb	r3, [r7, #15]
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	4618      	mov	r0, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	7c3a      	ldrb	r2, [r7, #16]
 80010e6:	4301      	orrs	r1, r0
 80010e8:	3208      	adds	r2, #8
 80010ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 80010ee:	bf00      	nop
 80010f0:	3718      	adds	r7, #24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40023800 	.word	0x40023800
 80010fc:	40013800 	.word	0x40013800
 8001100:	40013c00 	.word	0x40013c00

08001104 <GPIO_ReadFromInputPin>:

/*
 * Data read and write
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	460b      	mov	r3, r1
 800110e:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	691a      	ldr	r2, [r3, #16]
 8001114:	78fb      	ldrb	r3, [r7, #3]
 8001116:	fa22 f303 	lsr.w	r3, r2, r3
 800111a:	b2db      	uxtb	r3, r3
 800111c:	f003 0301 	and.w	r3, r3, #1
 8001120:	73fb      	strb	r3, [r7, #15]
	return value;
 8001122:	7bfb      	ldrb	r3, [r7, #15]
}
 8001124:	4618      	mov	r0, r3
 8001126:	3714      	adds	r7, #20
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <__errno>:
 8001130:	4b01      	ldr	r3, [pc, #4]	; (8001138 <__errno+0x8>)
 8001132:	6818      	ldr	r0, [r3, #0]
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	20000018 	.word	0x20000018

0800113c <__libc_init_array>:
 800113c:	b570      	push	{r4, r5, r6, lr}
 800113e:	4d0d      	ldr	r5, [pc, #52]	; (8001174 <__libc_init_array+0x38>)
 8001140:	4c0d      	ldr	r4, [pc, #52]	; (8001178 <__libc_init_array+0x3c>)
 8001142:	1b64      	subs	r4, r4, r5
 8001144:	10a4      	asrs	r4, r4, #2
 8001146:	2600      	movs	r6, #0
 8001148:	42a6      	cmp	r6, r4
 800114a:	d109      	bne.n	8001160 <__libc_init_array+0x24>
 800114c:	4d0b      	ldr	r5, [pc, #44]	; (800117c <__libc_init_array+0x40>)
 800114e:	4c0c      	ldr	r4, [pc, #48]	; (8001180 <__libc_init_array+0x44>)
 8001150:	f000 ff76 	bl	8002040 <_init>
 8001154:	1b64      	subs	r4, r4, r5
 8001156:	10a4      	asrs	r4, r4, #2
 8001158:	2600      	movs	r6, #0
 800115a:	42a6      	cmp	r6, r4
 800115c:	d105      	bne.n	800116a <__libc_init_array+0x2e>
 800115e:	bd70      	pop	{r4, r5, r6, pc}
 8001160:	f855 3b04 	ldr.w	r3, [r5], #4
 8001164:	4798      	blx	r3
 8001166:	3601      	adds	r6, #1
 8001168:	e7ee      	b.n	8001148 <__libc_init_array+0xc>
 800116a:	f855 3b04 	ldr.w	r3, [r5], #4
 800116e:	4798      	blx	r3
 8001170:	3601      	adds	r6, #1
 8001172:	e7f2      	b.n	800115a <__libc_init_array+0x1e>
 8001174:	08002100 	.word	0x08002100
 8001178:	08002100 	.word	0x08002100
 800117c:	08002100 	.word	0x08002100
 8001180:	08002104 	.word	0x08002104

08001184 <memset>:
 8001184:	4402      	add	r2, r0
 8001186:	4603      	mov	r3, r0
 8001188:	4293      	cmp	r3, r2
 800118a:	d100      	bne.n	800118e <memset+0xa>
 800118c:	4770      	bx	lr
 800118e:	f803 1b01 	strb.w	r1, [r3], #1
 8001192:	e7f9      	b.n	8001188 <memset+0x4>

08001194 <iprintf>:
 8001194:	b40f      	push	{r0, r1, r2, r3}
 8001196:	4b0a      	ldr	r3, [pc, #40]	; (80011c0 <iprintf+0x2c>)
 8001198:	b513      	push	{r0, r1, r4, lr}
 800119a:	681c      	ldr	r4, [r3, #0]
 800119c:	b124      	cbz	r4, 80011a8 <iprintf+0x14>
 800119e:	69a3      	ldr	r3, [r4, #24]
 80011a0:	b913      	cbnz	r3, 80011a8 <iprintf+0x14>
 80011a2:	4620      	mov	r0, r4
 80011a4:	f000 f866 	bl	8001274 <__sinit>
 80011a8:	ab05      	add	r3, sp, #20
 80011aa:	9a04      	ldr	r2, [sp, #16]
 80011ac:	68a1      	ldr	r1, [r4, #8]
 80011ae:	9301      	str	r3, [sp, #4]
 80011b0:	4620      	mov	r0, r4
 80011b2:	f000 f983 	bl	80014bc <_vfiprintf_r>
 80011b6:	b002      	add	sp, #8
 80011b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80011bc:	b004      	add	sp, #16
 80011be:	4770      	bx	lr
 80011c0:	20000018 	.word	0x20000018

080011c4 <std>:
 80011c4:	2300      	movs	r3, #0
 80011c6:	b510      	push	{r4, lr}
 80011c8:	4604      	mov	r4, r0
 80011ca:	e9c0 3300 	strd	r3, r3, [r0]
 80011ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80011d2:	6083      	str	r3, [r0, #8]
 80011d4:	8181      	strh	r1, [r0, #12]
 80011d6:	6643      	str	r3, [r0, #100]	; 0x64
 80011d8:	81c2      	strh	r2, [r0, #14]
 80011da:	6183      	str	r3, [r0, #24]
 80011dc:	4619      	mov	r1, r3
 80011de:	2208      	movs	r2, #8
 80011e0:	305c      	adds	r0, #92	; 0x5c
 80011e2:	f7ff ffcf 	bl	8001184 <memset>
 80011e6:	4b05      	ldr	r3, [pc, #20]	; (80011fc <std+0x38>)
 80011e8:	6263      	str	r3, [r4, #36]	; 0x24
 80011ea:	4b05      	ldr	r3, [pc, #20]	; (8001200 <std+0x3c>)
 80011ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80011ee:	4b05      	ldr	r3, [pc, #20]	; (8001204 <std+0x40>)
 80011f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80011f2:	4b05      	ldr	r3, [pc, #20]	; (8001208 <std+0x44>)
 80011f4:	6224      	str	r4, [r4, #32]
 80011f6:	6323      	str	r3, [r4, #48]	; 0x30
 80011f8:	bd10      	pop	{r4, pc}
 80011fa:	bf00      	nop
 80011fc:	08001a65 	.word	0x08001a65
 8001200:	08001a87 	.word	0x08001a87
 8001204:	08001abf 	.word	0x08001abf
 8001208:	08001ae3 	.word	0x08001ae3

0800120c <_cleanup_r>:
 800120c:	4901      	ldr	r1, [pc, #4]	; (8001214 <_cleanup_r+0x8>)
 800120e:	f000 b8af 	b.w	8001370 <_fwalk_reent>
 8001212:	bf00      	nop
 8001214:	08001dbd 	.word	0x08001dbd

08001218 <__sfmoreglue>:
 8001218:	b570      	push	{r4, r5, r6, lr}
 800121a:	1e4a      	subs	r2, r1, #1
 800121c:	2568      	movs	r5, #104	; 0x68
 800121e:	4355      	muls	r5, r2
 8001220:	460e      	mov	r6, r1
 8001222:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001226:	f000 f8c5 	bl	80013b4 <_malloc_r>
 800122a:	4604      	mov	r4, r0
 800122c:	b140      	cbz	r0, 8001240 <__sfmoreglue+0x28>
 800122e:	2100      	movs	r1, #0
 8001230:	e9c0 1600 	strd	r1, r6, [r0]
 8001234:	300c      	adds	r0, #12
 8001236:	60a0      	str	r0, [r4, #8]
 8001238:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800123c:	f7ff ffa2 	bl	8001184 <memset>
 8001240:	4620      	mov	r0, r4
 8001242:	bd70      	pop	{r4, r5, r6, pc}

08001244 <__sfp_lock_acquire>:
 8001244:	4801      	ldr	r0, [pc, #4]	; (800124c <__sfp_lock_acquire+0x8>)
 8001246:	f000 b8b3 	b.w	80013b0 <__retarget_lock_acquire_recursive>
 800124a:	bf00      	nop
 800124c:	200000d8 	.word	0x200000d8

08001250 <__sfp_lock_release>:
 8001250:	4801      	ldr	r0, [pc, #4]	; (8001258 <__sfp_lock_release+0x8>)
 8001252:	f000 b8ae 	b.w	80013b2 <__retarget_lock_release_recursive>
 8001256:	bf00      	nop
 8001258:	200000d8 	.word	0x200000d8

0800125c <__sinit_lock_acquire>:
 800125c:	4801      	ldr	r0, [pc, #4]	; (8001264 <__sinit_lock_acquire+0x8>)
 800125e:	f000 b8a7 	b.w	80013b0 <__retarget_lock_acquire_recursive>
 8001262:	bf00      	nop
 8001264:	200000d3 	.word	0x200000d3

08001268 <__sinit_lock_release>:
 8001268:	4801      	ldr	r0, [pc, #4]	; (8001270 <__sinit_lock_release+0x8>)
 800126a:	f000 b8a2 	b.w	80013b2 <__retarget_lock_release_recursive>
 800126e:	bf00      	nop
 8001270:	200000d3 	.word	0x200000d3

08001274 <__sinit>:
 8001274:	b510      	push	{r4, lr}
 8001276:	4604      	mov	r4, r0
 8001278:	f7ff fff0 	bl	800125c <__sinit_lock_acquire>
 800127c:	69a3      	ldr	r3, [r4, #24]
 800127e:	b11b      	cbz	r3, 8001288 <__sinit+0x14>
 8001280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001284:	f7ff bff0 	b.w	8001268 <__sinit_lock_release>
 8001288:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800128c:	6523      	str	r3, [r4, #80]	; 0x50
 800128e:	4b13      	ldr	r3, [pc, #76]	; (80012dc <__sinit+0x68>)
 8001290:	4a13      	ldr	r2, [pc, #76]	; (80012e0 <__sinit+0x6c>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	62a2      	str	r2, [r4, #40]	; 0x28
 8001296:	42a3      	cmp	r3, r4
 8001298:	bf04      	itt	eq
 800129a:	2301      	moveq	r3, #1
 800129c:	61a3      	streq	r3, [r4, #24]
 800129e:	4620      	mov	r0, r4
 80012a0:	f000 f820 	bl	80012e4 <__sfp>
 80012a4:	6060      	str	r0, [r4, #4]
 80012a6:	4620      	mov	r0, r4
 80012a8:	f000 f81c 	bl	80012e4 <__sfp>
 80012ac:	60a0      	str	r0, [r4, #8]
 80012ae:	4620      	mov	r0, r4
 80012b0:	f000 f818 	bl	80012e4 <__sfp>
 80012b4:	2200      	movs	r2, #0
 80012b6:	60e0      	str	r0, [r4, #12]
 80012b8:	2104      	movs	r1, #4
 80012ba:	6860      	ldr	r0, [r4, #4]
 80012bc:	f7ff ff82 	bl	80011c4 <std>
 80012c0:	68a0      	ldr	r0, [r4, #8]
 80012c2:	2201      	movs	r2, #1
 80012c4:	2109      	movs	r1, #9
 80012c6:	f7ff ff7d 	bl	80011c4 <std>
 80012ca:	68e0      	ldr	r0, [r4, #12]
 80012cc:	2202      	movs	r2, #2
 80012ce:	2112      	movs	r1, #18
 80012d0:	f7ff ff78 	bl	80011c4 <std>
 80012d4:	2301      	movs	r3, #1
 80012d6:	61a3      	str	r3, [r4, #24]
 80012d8:	e7d2      	b.n	8001280 <__sinit+0xc>
 80012da:	bf00      	nop
 80012dc:	08002068 	.word	0x08002068
 80012e0:	0800120d 	.word	0x0800120d

080012e4 <__sfp>:
 80012e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012e6:	4607      	mov	r7, r0
 80012e8:	f7ff ffac 	bl	8001244 <__sfp_lock_acquire>
 80012ec:	4b1e      	ldr	r3, [pc, #120]	; (8001368 <__sfp+0x84>)
 80012ee:	681e      	ldr	r6, [r3, #0]
 80012f0:	69b3      	ldr	r3, [r6, #24]
 80012f2:	b913      	cbnz	r3, 80012fa <__sfp+0x16>
 80012f4:	4630      	mov	r0, r6
 80012f6:	f7ff ffbd 	bl	8001274 <__sinit>
 80012fa:	3648      	adds	r6, #72	; 0x48
 80012fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001300:	3b01      	subs	r3, #1
 8001302:	d503      	bpl.n	800130c <__sfp+0x28>
 8001304:	6833      	ldr	r3, [r6, #0]
 8001306:	b30b      	cbz	r3, 800134c <__sfp+0x68>
 8001308:	6836      	ldr	r6, [r6, #0]
 800130a:	e7f7      	b.n	80012fc <__sfp+0x18>
 800130c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001310:	b9d5      	cbnz	r5, 8001348 <__sfp+0x64>
 8001312:	4b16      	ldr	r3, [pc, #88]	; (800136c <__sfp+0x88>)
 8001314:	60e3      	str	r3, [r4, #12]
 8001316:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800131a:	6665      	str	r5, [r4, #100]	; 0x64
 800131c:	f000 f847 	bl	80013ae <__retarget_lock_init_recursive>
 8001320:	f7ff ff96 	bl	8001250 <__sfp_lock_release>
 8001324:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001328:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800132c:	6025      	str	r5, [r4, #0]
 800132e:	61a5      	str	r5, [r4, #24]
 8001330:	2208      	movs	r2, #8
 8001332:	4629      	mov	r1, r5
 8001334:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001338:	f7ff ff24 	bl	8001184 <memset>
 800133c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001340:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001344:	4620      	mov	r0, r4
 8001346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001348:	3468      	adds	r4, #104	; 0x68
 800134a:	e7d9      	b.n	8001300 <__sfp+0x1c>
 800134c:	2104      	movs	r1, #4
 800134e:	4638      	mov	r0, r7
 8001350:	f7ff ff62 	bl	8001218 <__sfmoreglue>
 8001354:	4604      	mov	r4, r0
 8001356:	6030      	str	r0, [r6, #0]
 8001358:	2800      	cmp	r0, #0
 800135a:	d1d5      	bne.n	8001308 <__sfp+0x24>
 800135c:	f7ff ff78 	bl	8001250 <__sfp_lock_release>
 8001360:	230c      	movs	r3, #12
 8001362:	603b      	str	r3, [r7, #0]
 8001364:	e7ee      	b.n	8001344 <__sfp+0x60>
 8001366:	bf00      	nop
 8001368:	08002068 	.word	0x08002068
 800136c:	ffff0001 	.word	0xffff0001

08001370 <_fwalk_reent>:
 8001370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001374:	4606      	mov	r6, r0
 8001376:	4688      	mov	r8, r1
 8001378:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800137c:	2700      	movs	r7, #0
 800137e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001382:	f1b9 0901 	subs.w	r9, r9, #1
 8001386:	d505      	bpl.n	8001394 <_fwalk_reent+0x24>
 8001388:	6824      	ldr	r4, [r4, #0]
 800138a:	2c00      	cmp	r4, #0
 800138c:	d1f7      	bne.n	800137e <_fwalk_reent+0xe>
 800138e:	4638      	mov	r0, r7
 8001390:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001394:	89ab      	ldrh	r3, [r5, #12]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d907      	bls.n	80013aa <_fwalk_reent+0x3a>
 800139a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800139e:	3301      	adds	r3, #1
 80013a0:	d003      	beq.n	80013aa <_fwalk_reent+0x3a>
 80013a2:	4629      	mov	r1, r5
 80013a4:	4630      	mov	r0, r6
 80013a6:	47c0      	blx	r8
 80013a8:	4307      	orrs	r7, r0
 80013aa:	3568      	adds	r5, #104	; 0x68
 80013ac:	e7e9      	b.n	8001382 <_fwalk_reent+0x12>

080013ae <__retarget_lock_init_recursive>:
 80013ae:	4770      	bx	lr

080013b0 <__retarget_lock_acquire_recursive>:
 80013b0:	4770      	bx	lr

080013b2 <__retarget_lock_release_recursive>:
 80013b2:	4770      	bx	lr

080013b4 <_malloc_r>:
 80013b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013b6:	1ccd      	adds	r5, r1, #3
 80013b8:	f025 0503 	bic.w	r5, r5, #3
 80013bc:	3508      	adds	r5, #8
 80013be:	2d0c      	cmp	r5, #12
 80013c0:	bf38      	it	cc
 80013c2:	250c      	movcc	r5, #12
 80013c4:	2d00      	cmp	r5, #0
 80013c6:	4606      	mov	r6, r0
 80013c8:	db01      	blt.n	80013ce <_malloc_r+0x1a>
 80013ca:	42a9      	cmp	r1, r5
 80013cc:	d903      	bls.n	80013d6 <_malloc_r+0x22>
 80013ce:	230c      	movs	r3, #12
 80013d0:	6033      	str	r3, [r6, #0]
 80013d2:	2000      	movs	r0, #0
 80013d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013d6:	f000 fda3 	bl	8001f20 <__malloc_lock>
 80013da:	4921      	ldr	r1, [pc, #132]	; (8001460 <_malloc_r+0xac>)
 80013dc:	680a      	ldr	r2, [r1, #0]
 80013de:	4614      	mov	r4, r2
 80013e0:	b99c      	cbnz	r4, 800140a <_malloc_r+0x56>
 80013e2:	4f20      	ldr	r7, [pc, #128]	; (8001464 <_malloc_r+0xb0>)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	b923      	cbnz	r3, 80013f2 <_malloc_r+0x3e>
 80013e8:	4621      	mov	r1, r4
 80013ea:	4630      	mov	r0, r6
 80013ec:	f000 fb2a 	bl	8001a44 <_sbrk_r>
 80013f0:	6038      	str	r0, [r7, #0]
 80013f2:	4629      	mov	r1, r5
 80013f4:	4630      	mov	r0, r6
 80013f6:	f000 fb25 	bl	8001a44 <_sbrk_r>
 80013fa:	1c43      	adds	r3, r0, #1
 80013fc:	d123      	bne.n	8001446 <_malloc_r+0x92>
 80013fe:	230c      	movs	r3, #12
 8001400:	6033      	str	r3, [r6, #0]
 8001402:	4630      	mov	r0, r6
 8001404:	f000 fd92 	bl	8001f2c <__malloc_unlock>
 8001408:	e7e3      	b.n	80013d2 <_malloc_r+0x1e>
 800140a:	6823      	ldr	r3, [r4, #0]
 800140c:	1b5b      	subs	r3, r3, r5
 800140e:	d417      	bmi.n	8001440 <_malloc_r+0x8c>
 8001410:	2b0b      	cmp	r3, #11
 8001412:	d903      	bls.n	800141c <_malloc_r+0x68>
 8001414:	6023      	str	r3, [r4, #0]
 8001416:	441c      	add	r4, r3
 8001418:	6025      	str	r5, [r4, #0]
 800141a:	e004      	b.n	8001426 <_malloc_r+0x72>
 800141c:	6863      	ldr	r3, [r4, #4]
 800141e:	42a2      	cmp	r2, r4
 8001420:	bf0c      	ite	eq
 8001422:	600b      	streq	r3, [r1, #0]
 8001424:	6053      	strne	r3, [r2, #4]
 8001426:	4630      	mov	r0, r6
 8001428:	f000 fd80 	bl	8001f2c <__malloc_unlock>
 800142c:	f104 000b 	add.w	r0, r4, #11
 8001430:	1d23      	adds	r3, r4, #4
 8001432:	f020 0007 	bic.w	r0, r0, #7
 8001436:	1ac2      	subs	r2, r0, r3
 8001438:	d0cc      	beq.n	80013d4 <_malloc_r+0x20>
 800143a:	1a1b      	subs	r3, r3, r0
 800143c:	50a3      	str	r3, [r4, r2]
 800143e:	e7c9      	b.n	80013d4 <_malloc_r+0x20>
 8001440:	4622      	mov	r2, r4
 8001442:	6864      	ldr	r4, [r4, #4]
 8001444:	e7cc      	b.n	80013e0 <_malloc_r+0x2c>
 8001446:	1cc4      	adds	r4, r0, #3
 8001448:	f024 0403 	bic.w	r4, r4, #3
 800144c:	42a0      	cmp	r0, r4
 800144e:	d0e3      	beq.n	8001418 <_malloc_r+0x64>
 8001450:	1a21      	subs	r1, r4, r0
 8001452:	4630      	mov	r0, r6
 8001454:	f000 faf6 	bl	8001a44 <_sbrk_r>
 8001458:	3001      	adds	r0, #1
 800145a:	d1dd      	bne.n	8001418 <_malloc_r+0x64>
 800145c:	e7cf      	b.n	80013fe <_malloc_r+0x4a>
 800145e:	bf00      	nop
 8001460:	2000009c 	.word	0x2000009c
 8001464:	200000a0 	.word	0x200000a0

08001468 <__sfputc_r>:
 8001468:	6893      	ldr	r3, [r2, #8]
 800146a:	3b01      	subs	r3, #1
 800146c:	2b00      	cmp	r3, #0
 800146e:	b410      	push	{r4}
 8001470:	6093      	str	r3, [r2, #8]
 8001472:	da08      	bge.n	8001486 <__sfputc_r+0x1e>
 8001474:	6994      	ldr	r4, [r2, #24]
 8001476:	42a3      	cmp	r3, r4
 8001478:	db01      	blt.n	800147e <__sfputc_r+0x16>
 800147a:	290a      	cmp	r1, #10
 800147c:	d103      	bne.n	8001486 <__sfputc_r+0x1e>
 800147e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001482:	f000 bb33 	b.w	8001aec <__swbuf_r>
 8001486:	6813      	ldr	r3, [r2, #0]
 8001488:	1c58      	adds	r0, r3, #1
 800148a:	6010      	str	r0, [r2, #0]
 800148c:	7019      	strb	r1, [r3, #0]
 800148e:	4608      	mov	r0, r1
 8001490:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001494:	4770      	bx	lr

08001496 <__sfputs_r>:
 8001496:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001498:	4606      	mov	r6, r0
 800149a:	460f      	mov	r7, r1
 800149c:	4614      	mov	r4, r2
 800149e:	18d5      	adds	r5, r2, r3
 80014a0:	42ac      	cmp	r4, r5
 80014a2:	d101      	bne.n	80014a8 <__sfputs_r+0x12>
 80014a4:	2000      	movs	r0, #0
 80014a6:	e007      	b.n	80014b8 <__sfputs_r+0x22>
 80014a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80014ac:	463a      	mov	r2, r7
 80014ae:	4630      	mov	r0, r6
 80014b0:	f7ff ffda 	bl	8001468 <__sfputc_r>
 80014b4:	1c43      	adds	r3, r0, #1
 80014b6:	d1f3      	bne.n	80014a0 <__sfputs_r+0xa>
 80014b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080014bc <_vfiprintf_r>:
 80014bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014c0:	460d      	mov	r5, r1
 80014c2:	b09d      	sub	sp, #116	; 0x74
 80014c4:	4614      	mov	r4, r2
 80014c6:	4698      	mov	r8, r3
 80014c8:	4606      	mov	r6, r0
 80014ca:	b118      	cbz	r0, 80014d4 <_vfiprintf_r+0x18>
 80014cc:	6983      	ldr	r3, [r0, #24]
 80014ce:	b90b      	cbnz	r3, 80014d4 <_vfiprintf_r+0x18>
 80014d0:	f7ff fed0 	bl	8001274 <__sinit>
 80014d4:	4b89      	ldr	r3, [pc, #548]	; (80016fc <_vfiprintf_r+0x240>)
 80014d6:	429d      	cmp	r5, r3
 80014d8:	d11b      	bne.n	8001512 <_vfiprintf_r+0x56>
 80014da:	6875      	ldr	r5, [r6, #4]
 80014dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80014de:	07d9      	lsls	r1, r3, #31
 80014e0:	d405      	bmi.n	80014ee <_vfiprintf_r+0x32>
 80014e2:	89ab      	ldrh	r3, [r5, #12]
 80014e4:	059a      	lsls	r2, r3, #22
 80014e6:	d402      	bmi.n	80014ee <_vfiprintf_r+0x32>
 80014e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80014ea:	f7ff ff61 	bl	80013b0 <__retarget_lock_acquire_recursive>
 80014ee:	89ab      	ldrh	r3, [r5, #12]
 80014f0:	071b      	lsls	r3, r3, #28
 80014f2:	d501      	bpl.n	80014f8 <_vfiprintf_r+0x3c>
 80014f4:	692b      	ldr	r3, [r5, #16]
 80014f6:	b9eb      	cbnz	r3, 8001534 <_vfiprintf_r+0x78>
 80014f8:	4629      	mov	r1, r5
 80014fa:	4630      	mov	r0, r6
 80014fc:	f000 fb5a 	bl	8001bb4 <__swsetup_r>
 8001500:	b1c0      	cbz	r0, 8001534 <_vfiprintf_r+0x78>
 8001502:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001504:	07dc      	lsls	r4, r3, #31
 8001506:	d50e      	bpl.n	8001526 <_vfiprintf_r+0x6a>
 8001508:	f04f 30ff 	mov.w	r0, #4294967295
 800150c:	b01d      	add	sp, #116	; 0x74
 800150e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001512:	4b7b      	ldr	r3, [pc, #492]	; (8001700 <_vfiprintf_r+0x244>)
 8001514:	429d      	cmp	r5, r3
 8001516:	d101      	bne.n	800151c <_vfiprintf_r+0x60>
 8001518:	68b5      	ldr	r5, [r6, #8]
 800151a:	e7df      	b.n	80014dc <_vfiprintf_r+0x20>
 800151c:	4b79      	ldr	r3, [pc, #484]	; (8001704 <_vfiprintf_r+0x248>)
 800151e:	429d      	cmp	r5, r3
 8001520:	bf08      	it	eq
 8001522:	68f5      	ldreq	r5, [r6, #12]
 8001524:	e7da      	b.n	80014dc <_vfiprintf_r+0x20>
 8001526:	89ab      	ldrh	r3, [r5, #12]
 8001528:	0598      	lsls	r0, r3, #22
 800152a:	d4ed      	bmi.n	8001508 <_vfiprintf_r+0x4c>
 800152c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800152e:	f7ff ff40 	bl	80013b2 <__retarget_lock_release_recursive>
 8001532:	e7e9      	b.n	8001508 <_vfiprintf_r+0x4c>
 8001534:	2300      	movs	r3, #0
 8001536:	9309      	str	r3, [sp, #36]	; 0x24
 8001538:	2320      	movs	r3, #32
 800153a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800153e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001542:	2330      	movs	r3, #48	; 0x30
 8001544:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001708 <_vfiprintf_r+0x24c>
 8001548:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800154c:	f04f 0901 	mov.w	r9, #1
 8001550:	4623      	mov	r3, r4
 8001552:	469a      	mov	sl, r3
 8001554:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001558:	b10a      	cbz	r2, 800155e <_vfiprintf_r+0xa2>
 800155a:	2a25      	cmp	r2, #37	; 0x25
 800155c:	d1f9      	bne.n	8001552 <_vfiprintf_r+0x96>
 800155e:	ebba 0b04 	subs.w	fp, sl, r4
 8001562:	d00b      	beq.n	800157c <_vfiprintf_r+0xc0>
 8001564:	465b      	mov	r3, fp
 8001566:	4622      	mov	r2, r4
 8001568:	4629      	mov	r1, r5
 800156a:	4630      	mov	r0, r6
 800156c:	f7ff ff93 	bl	8001496 <__sfputs_r>
 8001570:	3001      	adds	r0, #1
 8001572:	f000 80aa 	beq.w	80016ca <_vfiprintf_r+0x20e>
 8001576:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001578:	445a      	add	r2, fp
 800157a:	9209      	str	r2, [sp, #36]	; 0x24
 800157c:	f89a 3000 	ldrb.w	r3, [sl]
 8001580:	2b00      	cmp	r3, #0
 8001582:	f000 80a2 	beq.w	80016ca <_vfiprintf_r+0x20e>
 8001586:	2300      	movs	r3, #0
 8001588:	f04f 32ff 	mov.w	r2, #4294967295
 800158c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001590:	f10a 0a01 	add.w	sl, sl, #1
 8001594:	9304      	str	r3, [sp, #16]
 8001596:	9307      	str	r3, [sp, #28]
 8001598:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800159c:	931a      	str	r3, [sp, #104]	; 0x68
 800159e:	4654      	mov	r4, sl
 80015a0:	2205      	movs	r2, #5
 80015a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80015a6:	4858      	ldr	r0, [pc, #352]	; (8001708 <_vfiprintf_r+0x24c>)
 80015a8:	f7fe fe22 	bl	80001f0 <memchr>
 80015ac:	9a04      	ldr	r2, [sp, #16]
 80015ae:	b9d8      	cbnz	r0, 80015e8 <_vfiprintf_r+0x12c>
 80015b0:	06d1      	lsls	r1, r2, #27
 80015b2:	bf44      	itt	mi
 80015b4:	2320      	movmi	r3, #32
 80015b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80015ba:	0713      	lsls	r3, r2, #28
 80015bc:	bf44      	itt	mi
 80015be:	232b      	movmi	r3, #43	; 0x2b
 80015c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80015c4:	f89a 3000 	ldrb.w	r3, [sl]
 80015c8:	2b2a      	cmp	r3, #42	; 0x2a
 80015ca:	d015      	beq.n	80015f8 <_vfiprintf_r+0x13c>
 80015cc:	9a07      	ldr	r2, [sp, #28]
 80015ce:	4654      	mov	r4, sl
 80015d0:	2000      	movs	r0, #0
 80015d2:	f04f 0c0a 	mov.w	ip, #10
 80015d6:	4621      	mov	r1, r4
 80015d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80015dc:	3b30      	subs	r3, #48	; 0x30
 80015de:	2b09      	cmp	r3, #9
 80015e0:	d94e      	bls.n	8001680 <_vfiprintf_r+0x1c4>
 80015e2:	b1b0      	cbz	r0, 8001612 <_vfiprintf_r+0x156>
 80015e4:	9207      	str	r2, [sp, #28]
 80015e6:	e014      	b.n	8001612 <_vfiprintf_r+0x156>
 80015e8:	eba0 0308 	sub.w	r3, r0, r8
 80015ec:	fa09 f303 	lsl.w	r3, r9, r3
 80015f0:	4313      	orrs	r3, r2
 80015f2:	9304      	str	r3, [sp, #16]
 80015f4:	46a2      	mov	sl, r4
 80015f6:	e7d2      	b.n	800159e <_vfiprintf_r+0xe2>
 80015f8:	9b03      	ldr	r3, [sp, #12]
 80015fa:	1d19      	adds	r1, r3, #4
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	9103      	str	r1, [sp, #12]
 8001600:	2b00      	cmp	r3, #0
 8001602:	bfbb      	ittet	lt
 8001604:	425b      	neglt	r3, r3
 8001606:	f042 0202 	orrlt.w	r2, r2, #2
 800160a:	9307      	strge	r3, [sp, #28]
 800160c:	9307      	strlt	r3, [sp, #28]
 800160e:	bfb8      	it	lt
 8001610:	9204      	strlt	r2, [sp, #16]
 8001612:	7823      	ldrb	r3, [r4, #0]
 8001614:	2b2e      	cmp	r3, #46	; 0x2e
 8001616:	d10c      	bne.n	8001632 <_vfiprintf_r+0x176>
 8001618:	7863      	ldrb	r3, [r4, #1]
 800161a:	2b2a      	cmp	r3, #42	; 0x2a
 800161c:	d135      	bne.n	800168a <_vfiprintf_r+0x1ce>
 800161e:	9b03      	ldr	r3, [sp, #12]
 8001620:	1d1a      	adds	r2, r3, #4
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	9203      	str	r2, [sp, #12]
 8001626:	2b00      	cmp	r3, #0
 8001628:	bfb8      	it	lt
 800162a:	f04f 33ff 	movlt.w	r3, #4294967295
 800162e:	3402      	adds	r4, #2
 8001630:	9305      	str	r3, [sp, #20]
 8001632:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001718 <_vfiprintf_r+0x25c>
 8001636:	7821      	ldrb	r1, [r4, #0]
 8001638:	2203      	movs	r2, #3
 800163a:	4650      	mov	r0, sl
 800163c:	f7fe fdd8 	bl	80001f0 <memchr>
 8001640:	b140      	cbz	r0, 8001654 <_vfiprintf_r+0x198>
 8001642:	2340      	movs	r3, #64	; 0x40
 8001644:	eba0 000a 	sub.w	r0, r0, sl
 8001648:	fa03 f000 	lsl.w	r0, r3, r0
 800164c:	9b04      	ldr	r3, [sp, #16]
 800164e:	4303      	orrs	r3, r0
 8001650:	3401      	adds	r4, #1
 8001652:	9304      	str	r3, [sp, #16]
 8001654:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001658:	482c      	ldr	r0, [pc, #176]	; (800170c <_vfiprintf_r+0x250>)
 800165a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800165e:	2206      	movs	r2, #6
 8001660:	f7fe fdc6 	bl	80001f0 <memchr>
 8001664:	2800      	cmp	r0, #0
 8001666:	d03f      	beq.n	80016e8 <_vfiprintf_r+0x22c>
 8001668:	4b29      	ldr	r3, [pc, #164]	; (8001710 <_vfiprintf_r+0x254>)
 800166a:	bb1b      	cbnz	r3, 80016b4 <_vfiprintf_r+0x1f8>
 800166c:	9b03      	ldr	r3, [sp, #12]
 800166e:	3307      	adds	r3, #7
 8001670:	f023 0307 	bic.w	r3, r3, #7
 8001674:	3308      	adds	r3, #8
 8001676:	9303      	str	r3, [sp, #12]
 8001678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800167a:	443b      	add	r3, r7
 800167c:	9309      	str	r3, [sp, #36]	; 0x24
 800167e:	e767      	b.n	8001550 <_vfiprintf_r+0x94>
 8001680:	fb0c 3202 	mla	r2, ip, r2, r3
 8001684:	460c      	mov	r4, r1
 8001686:	2001      	movs	r0, #1
 8001688:	e7a5      	b.n	80015d6 <_vfiprintf_r+0x11a>
 800168a:	2300      	movs	r3, #0
 800168c:	3401      	adds	r4, #1
 800168e:	9305      	str	r3, [sp, #20]
 8001690:	4619      	mov	r1, r3
 8001692:	f04f 0c0a 	mov.w	ip, #10
 8001696:	4620      	mov	r0, r4
 8001698:	f810 2b01 	ldrb.w	r2, [r0], #1
 800169c:	3a30      	subs	r2, #48	; 0x30
 800169e:	2a09      	cmp	r2, #9
 80016a0:	d903      	bls.n	80016aa <_vfiprintf_r+0x1ee>
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d0c5      	beq.n	8001632 <_vfiprintf_r+0x176>
 80016a6:	9105      	str	r1, [sp, #20]
 80016a8:	e7c3      	b.n	8001632 <_vfiprintf_r+0x176>
 80016aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80016ae:	4604      	mov	r4, r0
 80016b0:	2301      	movs	r3, #1
 80016b2:	e7f0      	b.n	8001696 <_vfiprintf_r+0x1da>
 80016b4:	ab03      	add	r3, sp, #12
 80016b6:	9300      	str	r3, [sp, #0]
 80016b8:	462a      	mov	r2, r5
 80016ba:	4b16      	ldr	r3, [pc, #88]	; (8001714 <_vfiprintf_r+0x258>)
 80016bc:	a904      	add	r1, sp, #16
 80016be:	4630      	mov	r0, r6
 80016c0:	f3af 8000 	nop.w
 80016c4:	4607      	mov	r7, r0
 80016c6:	1c78      	adds	r0, r7, #1
 80016c8:	d1d6      	bne.n	8001678 <_vfiprintf_r+0x1bc>
 80016ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80016cc:	07d9      	lsls	r1, r3, #31
 80016ce:	d405      	bmi.n	80016dc <_vfiprintf_r+0x220>
 80016d0:	89ab      	ldrh	r3, [r5, #12]
 80016d2:	059a      	lsls	r2, r3, #22
 80016d4:	d402      	bmi.n	80016dc <_vfiprintf_r+0x220>
 80016d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80016d8:	f7ff fe6b 	bl	80013b2 <__retarget_lock_release_recursive>
 80016dc:	89ab      	ldrh	r3, [r5, #12]
 80016de:	065b      	lsls	r3, r3, #25
 80016e0:	f53f af12 	bmi.w	8001508 <_vfiprintf_r+0x4c>
 80016e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80016e6:	e711      	b.n	800150c <_vfiprintf_r+0x50>
 80016e8:	ab03      	add	r3, sp, #12
 80016ea:	9300      	str	r3, [sp, #0]
 80016ec:	462a      	mov	r2, r5
 80016ee:	4b09      	ldr	r3, [pc, #36]	; (8001714 <_vfiprintf_r+0x258>)
 80016f0:	a904      	add	r1, sp, #16
 80016f2:	4630      	mov	r0, r6
 80016f4:	f000 f880 	bl	80017f8 <_printf_i>
 80016f8:	e7e4      	b.n	80016c4 <_vfiprintf_r+0x208>
 80016fa:	bf00      	nop
 80016fc:	0800208c 	.word	0x0800208c
 8001700:	080020ac 	.word	0x080020ac
 8001704:	0800206c 	.word	0x0800206c
 8001708:	080020cc 	.word	0x080020cc
 800170c:	080020d6 	.word	0x080020d6
 8001710:	00000000 	.word	0x00000000
 8001714:	08001497 	.word	0x08001497
 8001718:	080020d2 	.word	0x080020d2

0800171c <_printf_common>:
 800171c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001720:	4616      	mov	r6, r2
 8001722:	4699      	mov	r9, r3
 8001724:	688a      	ldr	r2, [r1, #8]
 8001726:	690b      	ldr	r3, [r1, #16]
 8001728:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800172c:	4293      	cmp	r3, r2
 800172e:	bfb8      	it	lt
 8001730:	4613      	movlt	r3, r2
 8001732:	6033      	str	r3, [r6, #0]
 8001734:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001738:	4607      	mov	r7, r0
 800173a:	460c      	mov	r4, r1
 800173c:	b10a      	cbz	r2, 8001742 <_printf_common+0x26>
 800173e:	3301      	adds	r3, #1
 8001740:	6033      	str	r3, [r6, #0]
 8001742:	6823      	ldr	r3, [r4, #0]
 8001744:	0699      	lsls	r1, r3, #26
 8001746:	bf42      	ittt	mi
 8001748:	6833      	ldrmi	r3, [r6, #0]
 800174a:	3302      	addmi	r3, #2
 800174c:	6033      	strmi	r3, [r6, #0]
 800174e:	6825      	ldr	r5, [r4, #0]
 8001750:	f015 0506 	ands.w	r5, r5, #6
 8001754:	d106      	bne.n	8001764 <_printf_common+0x48>
 8001756:	f104 0a19 	add.w	sl, r4, #25
 800175a:	68e3      	ldr	r3, [r4, #12]
 800175c:	6832      	ldr	r2, [r6, #0]
 800175e:	1a9b      	subs	r3, r3, r2
 8001760:	42ab      	cmp	r3, r5
 8001762:	dc26      	bgt.n	80017b2 <_printf_common+0x96>
 8001764:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001768:	1e13      	subs	r3, r2, #0
 800176a:	6822      	ldr	r2, [r4, #0]
 800176c:	bf18      	it	ne
 800176e:	2301      	movne	r3, #1
 8001770:	0692      	lsls	r2, r2, #26
 8001772:	d42b      	bmi.n	80017cc <_printf_common+0xb0>
 8001774:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001778:	4649      	mov	r1, r9
 800177a:	4638      	mov	r0, r7
 800177c:	47c0      	blx	r8
 800177e:	3001      	adds	r0, #1
 8001780:	d01e      	beq.n	80017c0 <_printf_common+0xa4>
 8001782:	6823      	ldr	r3, [r4, #0]
 8001784:	68e5      	ldr	r5, [r4, #12]
 8001786:	6832      	ldr	r2, [r6, #0]
 8001788:	f003 0306 	and.w	r3, r3, #6
 800178c:	2b04      	cmp	r3, #4
 800178e:	bf08      	it	eq
 8001790:	1aad      	subeq	r5, r5, r2
 8001792:	68a3      	ldr	r3, [r4, #8]
 8001794:	6922      	ldr	r2, [r4, #16]
 8001796:	bf0c      	ite	eq
 8001798:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800179c:	2500      	movne	r5, #0
 800179e:	4293      	cmp	r3, r2
 80017a0:	bfc4      	itt	gt
 80017a2:	1a9b      	subgt	r3, r3, r2
 80017a4:	18ed      	addgt	r5, r5, r3
 80017a6:	2600      	movs	r6, #0
 80017a8:	341a      	adds	r4, #26
 80017aa:	42b5      	cmp	r5, r6
 80017ac:	d11a      	bne.n	80017e4 <_printf_common+0xc8>
 80017ae:	2000      	movs	r0, #0
 80017b0:	e008      	b.n	80017c4 <_printf_common+0xa8>
 80017b2:	2301      	movs	r3, #1
 80017b4:	4652      	mov	r2, sl
 80017b6:	4649      	mov	r1, r9
 80017b8:	4638      	mov	r0, r7
 80017ba:	47c0      	blx	r8
 80017bc:	3001      	adds	r0, #1
 80017be:	d103      	bne.n	80017c8 <_printf_common+0xac>
 80017c0:	f04f 30ff 	mov.w	r0, #4294967295
 80017c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80017c8:	3501      	adds	r5, #1
 80017ca:	e7c6      	b.n	800175a <_printf_common+0x3e>
 80017cc:	18e1      	adds	r1, r4, r3
 80017ce:	1c5a      	adds	r2, r3, #1
 80017d0:	2030      	movs	r0, #48	; 0x30
 80017d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80017d6:	4422      	add	r2, r4
 80017d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80017dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80017e0:	3302      	adds	r3, #2
 80017e2:	e7c7      	b.n	8001774 <_printf_common+0x58>
 80017e4:	2301      	movs	r3, #1
 80017e6:	4622      	mov	r2, r4
 80017e8:	4649      	mov	r1, r9
 80017ea:	4638      	mov	r0, r7
 80017ec:	47c0      	blx	r8
 80017ee:	3001      	adds	r0, #1
 80017f0:	d0e6      	beq.n	80017c0 <_printf_common+0xa4>
 80017f2:	3601      	adds	r6, #1
 80017f4:	e7d9      	b.n	80017aa <_printf_common+0x8e>
	...

080017f8 <_printf_i>:
 80017f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80017fc:	460c      	mov	r4, r1
 80017fe:	4691      	mov	r9, r2
 8001800:	7e27      	ldrb	r7, [r4, #24]
 8001802:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001804:	2f78      	cmp	r7, #120	; 0x78
 8001806:	4680      	mov	r8, r0
 8001808:	469a      	mov	sl, r3
 800180a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800180e:	d807      	bhi.n	8001820 <_printf_i+0x28>
 8001810:	2f62      	cmp	r7, #98	; 0x62
 8001812:	d80a      	bhi.n	800182a <_printf_i+0x32>
 8001814:	2f00      	cmp	r7, #0
 8001816:	f000 80d8 	beq.w	80019ca <_printf_i+0x1d2>
 800181a:	2f58      	cmp	r7, #88	; 0x58
 800181c:	f000 80a3 	beq.w	8001966 <_printf_i+0x16e>
 8001820:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001824:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001828:	e03a      	b.n	80018a0 <_printf_i+0xa8>
 800182a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800182e:	2b15      	cmp	r3, #21
 8001830:	d8f6      	bhi.n	8001820 <_printf_i+0x28>
 8001832:	a001      	add	r0, pc, #4	; (adr r0, 8001838 <_printf_i+0x40>)
 8001834:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001838:	08001891 	.word	0x08001891
 800183c:	080018a5 	.word	0x080018a5
 8001840:	08001821 	.word	0x08001821
 8001844:	08001821 	.word	0x08001821
 8001848:	08001821 	.word	0x08001821
 800184c:	08001821 	.word	0x08001821
 8001850:	080018a5 	.word	0x080018a5
 8001854:	08001821 	.word	0x08001821
 8001858:	08001821 	.word	0x08001821
 800185c:	08001821 	.word	0x08001821
 8001860:	08001821 	.word	0x08001821
 8001864:	080019b1 	.word	0x080019b1
 8001868:	080018d5 	.word	0x080018d5
 800186c:	08001993 	.word	0x08001993
 8001870:	08001821 	.word	0x08001821
 8001874:	08001821 	.word	0x08001821
 8001878:	080019d3 	.word	0x080019d3
 800187c:	08001821 	.word	0x08001821
 8001880:	080018d5 	.word	0x080018d5
 8001884:	08001821 	.word	0x08001821
 8001888:	08001821 	.word	0x08001821
 800188c:	0800199b 	.word	0x0800199b
 8001890:	680b      	ldr	r3, [r1, #0]
 8001892:	1d1a      	adds	r2, r3, #4
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	600a      	str	r2, [r1, #0]
 8001898:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800189c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80018a0:	2301      	movs	r3, #1
 80018a2:	e0a3      	b.n	80019ec <_printf_i+0x1f4>
 80018a4:	6825      	ldr	r5, [r4, #0]
 80018a6:	6808      	ldr	r0, [r1, #0]
 80018a8:	062e      	lsls	r6, r5, #24
 80018aa:	f100 0304 	add.w	r3, r0, #4
 80018ae:	d50a      	bpl.n	80018c6 <_printf_i+0xce>
 80018b0:	6805      	ldr	r5, [r0, #0]
 80018b2:	600b      	str	r3, [r1, #0]
 80018b4:	2d00      	cmp	r5, #0
 80018b6:	da03      	bge.n	80018c0 <_printf_i+0xc8>
 80018b8:	232d      	movs	r3, #45	; 0x2d
 80018ba:	426d      	negs	r5, r5
 80018bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80018c0:	485e      	ldr	r0, [pc, #376]	; (8001a3c <_printf_i+0x244>)
 80018c2:	230a      	movs	r3, #10
 80018c4:	e019      	b.n	80018fa <_printf_i+0x102>
 80018c6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80018ca:	6805      	ldr	r5, [r0, #0]
 80018cc:	600b      	str	r3, [r1, #0]
 80018ce:	bf18      	it	ne
 80018d0:	b22d      	sxthne	r5, r5
 80018d2:	e7ef      	b.n	80018b4 <_printf_i+0xbc>
 80018d4:	680b      	ldr	r3, [r1, #0]
 80018d6:	6825      	ldr	r5, [r4, #0]
 80018d8:	1d18      	adds	r0, r3, #4
 80018da:	6008      	str	r0, [r1, #0]
 80018dc:	0628      	lsls	r0, r5, #24
 80018de:	d501      	bpl.n	80018e4 <_printf_i+0xec>
 80018e0:	681d      	ldr	r5, [r3, #0]
 80018e2:	e002      	b.n	80018ea <_printf_i+0xf2>
 80018e4:	0669      	lsls	r1, r5, #25
 80018e6:	d5fb      	bpl.n	80018e0 <_printf_i+0xe8>
 80018e8:	881d      	ldrh	r5, [r3, #0]
 80018ea:	4854      	ldr	r0, [pc, #336]	; (8001a3c <_printf_i+0x244>)
 80018ec:	2f6f      	cmp	r7, #111	; 0x6f
 80018ee:	bf0c      	ite	eq
 80018f0:	2308      	moveq	r3, #8
 80018f2:	230a      	movne	r3, #10
 80018f4:	2100      	movs	r1, #0
 80018f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80018fa:	6866      	ldr	r6, [r4, #4]
 80018fc:	60a6      	str	r6, [r4, #8]
 80018fe:	2e00      	cmp	r6, #0
 8001900:	bfa2      	ittt	ge
 8001902:	6821      	ldrge	r1, [r4, #0]
 8001904:	f021 0104 	bicge.w	r1, r1, #4
 8001908:	6021      	strge	r1, [r4, #0]
 800190a:	b90d      	cbnz	r5, 8001910 <_printf_i+0x118>
 800190c:	2e00      	cmp	r6, #0
 800190e:	d04d      	beq.n	80019ac <_printf_i+0x1b4>
 8001910:	4616      	mov	r6, r2
 8001912:	fbb5 f1f3 	udiv	r1, r5, r3
 8001916:	fb03 5711 	mls	r7, r3, r1, r5
 800191a:	5dc7      	ldrb	r7, [r0, r7]
 800191c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001920:	462f      	mov	r7, r5
 8001922:	42bb      	cmp	r3, r7
 8001924:	460d      	mov	r5, r1
 8001926:	d9f4      	bls.n	8001912 <_printf_i+0x11a>
 8001928:	2b08      	cmp	r3, #8
 800192a:	d10b      	bne.n	8001944 <_printf_i+0x14c>
 800192c:	6823      	ldr	r3, [r4, #0]
 800192e:	07df      	lsls	r7, r3, #31
 8001930:	d508      	bpl.n	8001944 <_printf_i+0x14c>
 8001932:	6923      	ldr	r3, [r4, #16]
 8001934:	6861      	ldr	r1, [r4, #4]
 8001936:	4299      	cmp	r1, r3
 8001938:	bfde      	ittt	le
 800193a:	2330      	movle	r3, #48	; 0x30
 800193c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001940:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001944:	1b92      	subs	r2, r2, r6
 8001946:	6122      	str	r2, [r4, #16]
 8001948:	f8cd a000 	str.w	sl, [sp]
 800194c:	464b      	mov	r3, r9
 800194e:	aa03      	add	r2, sp, #12
 8001950:	4621      	mov	r1, r4
 8001952:	4640      	mov	r0, r8
 8001954:	f7ff fee2 	bl	800171c <_printf_common>
 8001958:	3001      	adds	r0, #1
 800195a:	d14c      	bne.n	80019f6 <_printf_i+0x1fe>
 800195c:	f04f 30ff 	mov.w	r0, #4294967295
 8001960:	b004      	add	sp, #16
 8001962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001966:	4835      	ldr	r0, [pc, #212]	; (8001a3c <_printf_i+0x244>)
 8001968:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800196c:	6823      	ldr	r3, [r4, #0]
 800196e:	680e      	ldr	r6, [r1, #0]
 8001970:	061f      	lsls	r7, r3, #24
 8001972:	f856 5b04 	ldr.w	r5, [r6], #4
 8001976:	600e      	str	r6, [r1, #0]
 8001978:	d514      	bpl.n	80019a4 <_printf_i+0x1ac>
 800197a:	07d9      	lsls	r1, r3, #31
 800197c:	bf44      	itt	mi
 800197e:	f043 0320 	orrmi.w	r3, r3, #32
 8001982:	6023      	strmi	r3, [r4, #0]
 8001984:	b91d      	cbnz	r5, 800198e <_printf_i+0x196>
 8001986:	6823      	ldr	r3, [r4, #0]
 8001988:	f023 0320 	bic.w	r3, r3, #32
 800198c:	6023      	str	r3, [r4, #0]
 800198e:	2310      	movs	r3, #16
 8001990:	e7b0      	b.n	80018f4 <_printf_i+0xfc>
 8001992:	6823      	ldr	r3, [r4, #0]
 8001994:	f043 0320 	orr.w	r3, r3, #32
 8001998:	6023      	str	r3, [r4, #0]
 800199a:	2378      	movs	r3, #120	; 0x78
 800199c:	4828      	ldr	r0, [pc, #160]	; (8001a40 <_printf_i+0x248>)
 800199e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80019a2:	e7e3      	b.n	800196c <_printf_i+0x174>
 80019a4:	065e      	lsls	r6, r3, #25
 80019a6:	bf48      	it	mi
 80019a8:	b2ad      	uxthmi	r5, r5
 80019aa:	e7e6      	b.n	800197a <_printf_i+0x182>
 80019ac:	4616      	mov	r6, r2
 80019ae:	e7bb      	b.n	8001928 <_printf_i+0x130>
 80019b0:	680b      	ldr	r3, [r1, #0]
 80019b2:	6826      	ldr	r6, [r4, #0]
 80019b4:	6960      	ldr	r0, [r4, #20]
 80019b6:	1d1d      	adds	r5, r3, #4
 80019b8:	600d      	str	r5, [r1, #0]
 80019ba:	0635      	lsls	r5, r6, #24
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	d501      	bpl.n	80019c4 <_printf_i+0x1cc>
 80019c0:	6018      	str	r0, [r3, #0]
 80019c2:	e002      	b.n	80019ca <_printf_i+0x1d2>
 80019c4:	0671      	lsls	r1, r6, #25
 80019c6:	d5fb      	bpl.n	80019c0 <_printf_i+0x1c8>
 80019c8:	8018      	strh	r0, [r3, #0]
 80019ca:	2300      	movs	r3, #0
 80019cc:	6123      	str	r3, [r4, #16]
 80019ce:	4616      	mov	r6, r2
 80019d0:	e7ba      	b.n	8001948 <_printf_i+0x150>
 80019d2:	680b      	ldr	r3, [r1, #0]
 80019d4:	1d1a      	adds	r2, r3, #4
 80019d6:	600a      	str	r2, [r1, #0]
 80019d8:	681e      	ldr	r6, [r3, #0]
 80019da:	6862      	ldr	r2, [r4, #4]
 80019dc:	2100      	movs	r1, #0
 80019de:	4630      	mov	r0, r6
 80019e0:	f7fe fc06 	bl	80001f0 <memchr>
 80019e4:	b108      	cbz	r0, 80019ea <_printf_i+0x1f2>
 80019e6:	1b80      	subs	r0, r0, r6
 80019e8:	6060      	str	r0, [r4, #4]
 80019ea:	6863      	ldr	r3, [r4, #4]
 80019ec:	6123      	str	r3, [r4, #16]
 80019ee:	2300      	movs	r3, #0
 80019f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80019f4:	e7a8      	b.n	8001948 <_printf_i+0x150>
 80019f6:	6923      	ldr	r3, [r4, #16]
 80019f8:	4632      	mov	r2, r6
 80019fa:	4649      	mov	r1, r9
 80019fc:	4640      	mov	r0, r8
 80019fe:	47d0      	blx	sl
 8001a00:	3001      	adds	r0, #1
 8001a02:	d0ab      	beq.n	800195c <_printf_i+0x164>
 8001a04:	6823      	ldr	r3, [r4, #0]
 8001a06:	079b      	lsls	r3, r3, #30
 8001a08:	d413      	bmi.n	8001a32 <_printf_i+0x23a>
 8001a0a:	68e0      	ldr	r0, [r4, #12]
 8001a0c:	9b03      	ldr	r3, [sp, #12]
 8001a0e:	4298      	cmp	r0, r3
 8001a10:	bfb8      	it	lt
 8001a12:	4618      	movlt	r0, r3
 8001a14:	e7a4      	b.n	8001960 <_printf_i+0x168>
 8001a16:	2301      	movs	r3, #1
 8001a18:	4632      	mov	r2, r6
 8001a1a:	4649      	mov	r1, r9
 8001a1c:	4640      	mov	r0, r8
 8001a1e:	47d0      	blx	sl
 8001a20:	3001      	adds	r0, #1
 8001a22:	d09b      	beq.n	800195c <_printf_i+0x164>
 8001a24:	3501      	adds	r5, #1
 8001a26:	68e3      	ldr	r3, [r4, #12]
 8001a28:	9903      	ldr	r1, [sp, #12]
 8001a2a:	1a5b      	subs	r3, r3, r1
 8001a2c:	42ab      	cmp	r3, r5
 8001a2e:	dcf2      	bgt.n	8001a16 <_printf_i+0x21e>
 8001a30:	e7eb      	b.n	8001a0a <_printf_i+0x212>
 8001a32:	2500      	movs	r5, #0
 8001a34:	f104 0619 	add.w	r6, r4, #25
 8001a38:	e7f5      	b.n	8001a26 <_printf_i+0x22e>
 8001a3a:	bf00      	nop
 8001a3c:	080020dd 	.word	0x080020dd
 8001a40:	080020ee 	.word	0x080020ee

08001a44 <_sbrk_r>:
 8001a44:	b538      	push	{r3, r4, r5, lr}
 8001a46:	4d06      	ldr	r5, [pc, #24]	; (8001a60 <_sbrk_r+0x1c>)
 8001a48:	2300      	movs	r3, #0
 8001a4a:	4604      	mov	r4, r0
 8001a4c:	4608      	mov	r0, r1
 8001a4e:	602b      	str	r3, [r5, #0]
 8001a50:	f7fe fd7e 	bl	8000550 <_sbrk>
 8001a54:	1c43      	adds	r3, r0, #1
 8001a56:	d102      	bne.n	8001a5e <_sbrk_r+0x1a>
 8001a58:	682b      	ldr	r3, [r5, #0]
 8001a5a:	b103      	cbz	r3, 8001a5e <_sbrk_r+0x1a>
 8001a5c:	6023      	str	r3, [r4, #0]
 8001a5e:	bd38      	pop	{r3, r4, r5, pc}
 8001a60:	200000dc 	.word	0x200000dc

08001a64 <__sread>:
 8001a64:	b510      	push	{r4, lr}
 8001a66:	460c      	mov	r4, r1
 8001a68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a6c:	f000 fab4 	bl	8001fd8 <_read_r>
 8001a70:	2800      	cmp	r0, #0
 8001a72:	bfab      	itete	ge
 8001a74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001a76:	89a3      	ldrhlt	r3, [r4, #12]
 8001a78:	181b      	addge	r3, r3, r0
 8001a7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001a7e:	bfac      	ite	ge
 8001a80:	6563      	strge	r3, [r4, #84]	; 0x54
 8001a82:	81a3      	strhlt	r3, [r4, #12]
 8001a84:	bd10      	pop	{r4, pc}

08001a86 <__swrite>:
 8001a86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a8a:	461f      	mov	r7, r3
 8001a8c:	898b      	ldrh	r3, [r1, #12]
 8001a8e:	05db      	lsls	r3, r3, #23
 8001a90:	4605      	mov	r5, r0
 8001a92:	460c      	mov	r4, r1
 8001a94:	4616      	mov	r6, r2
 8001a96:	d505      	bpl.n	8001aa4 <__swrite+0x1e>
 8001a98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f000 f9c8 	bl	8001e34 <_lseek_r>
 8001aa4:	89a3      	ldrh	r3, [r4, #12]
 8001aa6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001aaa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001aae:	81a3      	strh	r3, [r4, #12]
 8001ab0:	4632      	mov	r2, r6
 8001ab2:	463b      	mov	r3, r7
 8001ab4:	4628      	mov	r0, r5
 8001ab6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001aba:	f000 b869 	b.w	8001b90 <_write_r>

08001abe <__sseek>:
 8001abe:	b510      	push	{r4, lr}
 8001ac0:	460c      	mov	r4, r1
 8001ac2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ac6:	f000 f9b5 	bl	8001e34 <_lseek_r>
 8001aca:	1c43      	adds	r3, r0, #1
 8001acc:	89a3      	ldrh	r3, [r4, #12]
 8001ace:	bf15      	itete	ne
 8001ad0:	6560      	strne	r0, [r4, #84]	; 0x54
 8001ad2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001ad6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001ada:	81a3      	strheq	r3, [r4, #12]
 8001adc:	bf18      	it	ne
 8001ade:	81a3      	strhne	r3, [r4, #12]
 8001ae0:	bd10      	pop	{r4, pc}

08001ae2 <__sclose>:
 8001ae2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ae6:	f000 b8d3 	b.w	8001c90 <_close_r>
	...

08001aec <__swbuf_r>:
 8001aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001aee:	460e      	mov	r6, r1
 8001af0:	4614      	mov	r4, r2
 8001af2:	4605      	mov	r5, r0
 8001af4:	b118      	cbz	r0, 8001afe <__swbuf_r+0x12>
 8001af6:	6983      	ldr	r3, [r0, #24]
 8001af8:	b90b      	cbnz	r3, 8001afe <__swbuf_r+0x12>
 8001afa:	f7ff fbbb 	bl	8001274 <__sinit>
 8001afe:	4b21      	ldr	r3, [pc, #132]	; (8001b84 <__swbuf_r+0x98>)
 8001b00:	429c      	cmp	r4, r3
 8001b02:	d12b      	bne.n	8001b5c <__swbuf_r+0x70>
 8001b04:	686c      	ldr	r4, [r5, #4]
 8001b06:	69a3      	ldr	r3, [r4, #24]
 8001b08:	60a3      	str	r3, [r4, #8]
 8001b0a:	89a3      	ldrh	r3, [r4, #12]
 8001b0c:	071a      	lsls	r2, r3, #28
 8001b0e:	d52f      	bpl.n	8001b70 <__swbuf_r+0x84>
 8001b10:	6923      	ldr	r3, [r4, #16]
 8001b12:	b36b      	cbz	r3, 8001b70 <__swbuf_r+0x84>
 8001b14:	6923      	ldr	r3, [r4, #16]
 8001b16:	6820      	ldr	r0, [r4, #0]
 8001b18:	1ac0      	subs	r0, r0, r3
 8001b1a:	6963      	ldr	r3, [r4, #20]
 8001b1c:	b2f6      	uxtb	r6, r6
 8001b1e:	4283      	cmp	r3, r0
 8001b20:	4637      	mov	r7, r6
 8001b22:	dc04      	bgt.n	8001b2e <__swbuf_r+0x42>
 8001b24:	4621      	mov	r1, r4
 8001b26:	4628      	mov	r0, r5
 8001b28:	f000 f948 	bl	8001dbc <_fflush_r>
 8001b2c:	bb30      	cbnz	r0, 8001b7c <__swbuf_r+0x90>
 8001b2e:	68a3      	ldr	r3, [r4, #8]
 8001b30:	3b01      	subs	r3, #1
 8001b32:	60a3      	str	r3, [r4, #8]
 8001b34:	6823      	ldr	r3, [r4, #0]
 8001b36:	1c5a      	adds	r2, r3, #1
 8001b38:	6022      	str	r2, [r4, #0]
 8001b3a:	701e      	strb	r6, [r3, #0]
 8001b3c:	6963      	ldr	r3, [r4, #20]
 8001b3e:	3001      	adds	r0, #1
 8001b40:	4283      	cmp	r3, r0
 8001b42:	d004      	beq.n	8001b4e <__swbuf_r+0x62>
 8001b44:	89a3      	ldrh	r3, [r4, #12]
 8001b46:	07db      	lsls	r3, r3, #31
 8001b48:	d506      	bpl.n	8001b58 <__swbuf_r+0x6c>
 8001b4a:	2e0a      	cmp	r6, #10
 8001b4c:	d104      	bne.n	8001b58 <__swbuf_r+0x6c>
 8001b4e:	4621      	mov	r1, r4
 8001b50:	4628      	mov	r0, r5
 8001b52:	f000 f933 	bl	8001dbc <_fflush_r>
 8001b56:	b988      	cbnz	r0, 8001b7c <__swbuf_r+0x90>
 8001b58:	4638      	mov	r0, r7
 8001b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b5c:	4b0a      	ldr	r3, [pc, #40]	; (8001b88 <__swbuf_r+0x9c>)
 8001b5e:	429c      	cmp	r4, r3
 8001b60:	d101      	bne.n	8001b66 <__swbuf_r+0x7a>
 8001b62:	68ac      	ldr	r4, [r5, #8]
 8001b64:	e7cf      	b.n	8001b06 <__swbuf_r+0x1a>
 8001b66:	4b09      	ldr	r3, [pc, #36]	; (8001b8c <__swbuf_r+0xa0>)
 8001b68:	429c      	cmp	r4, r3
 8001b6a:	bf08      	it	eq
 8001b6c:	68ec      	ldreq	r4, [r5, #12]
 8001b6e:	e7ca      	b.n	8001b06 <__swbuf_r+0x1a>
 8001b70:	4621      	mov	r1, r4
 8001b72:	4628      	mov	r0, r5
 8001b74:	f000 f81e 	bl	8001bb4 <__swsetup_r>
 8001b78:	2800      	cmp	r0, #0
 8001b7a:	d0cb      	beq.n	8001b14 <__swbuf_r+0x28>
 8001b7c:	f04f 37ff 	mov.w	r7, #4294967295
 8001b80:	e7ea      	b.n	8001b58 <__swbuf_r+0x6c>
 8001b82:	bf00      	nop
 8001b84:	0800208c 	.word	0x0800208c
 8001b88:	080020ac 	.word	0x080020ac
 8001b8c:	0800206c 	.word	0x0800206c

08001b90 <_write_r>:
 8001b90:	b538      	push	{r3, r4, r5, lr}
 8001b92:	4d07      	ldr	r5, [pc, #28]	; (8001bb0 <_write_r+0x20>)
 8001b94:	4604      	mov	r4, r0
 8001b96:	4608      	mov	r0, r1
 8001b98:	4611      	mov	r1, r2
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	602a      	str	r2, [r5, #0]
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	f7fe fc85 	bl	80004ae <_write>
 8001ba4:	1c43      	adds	r3, r0, #1
 8001ba6:	d102      	bne.n	8001bae <_write_r+0x1e>
 8001ba8:	682b      	ldr	r3, [r5, #0]
 8001baa:	b103      	cbz	r3, 8001bae <_write_r+0x1e>
 8001bac:	6023      	str	r3, [r4, #0]
 8001bae:	bd38      	pop	{r3, r4, r5, pc}
 8001bb0:	200000dc 	.word	0x200000dc

08001bb4 <__swsetup_r>:
 8001bb4:	4b32      	ldr	r3, [pc, #200]	; (8001c80 <__swsetup_r+0xcc>)
 8001bb6:	b570      	push	{r4, r5, r6, lr}
 8001bb8:	681d      	ldr	r5, [r3, #0]
 8001bba:	4606      	mov	r6, r0
 8001bbc:	460c      	mov	r4, r1
 8001bbe:	b125      	cbz	r5, 8001bca <__swsetup_r+0x16>
 8001bc0:	69ab      	ldr	r3, [r5, #24]
 8001bc2:	b913      	cbnz	r3, 8001bca <__swsetup_r+0x16>
 8001bc4:	4628      	mov	r0, r5
 8001bc6:	f7ff fb55 	bl	8001274 <__sinit>
 8001bca:	4b2e      	ldr	r3, [pc, #184]	; (8001c84 <__swsetup_r+0xd0>)
 8001bcc:	429c      	cmp	r4, r3
 8001bce:	d10f      	bne.n	8001bf0 <__swsetup_r+0x3c>
 8001bd0:	686c      	ldr	r4, [r5, #4]
 8001bd2:	89a3      	ldrh	r3, [r4, #12]
 8001bd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001bd8:	0719      	lsls	r1, r3, #28
 8001bda:	d42c      	bmi.n	8001c36 <__swsetup_r+0x82>
 8001bdc:	06dd      	lsls	r5, r3, #27
 8001bde:	d411      	bmi.n	8001c04 <__swsetup_r+0x50>
 8001be0:	2309      	movs	r3, #9
 8001be2:	6033      	str	r3, [r6, #0]
 8001be4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001be8:	81a3      	strh	r3, [r4, #12]
 8001bea:	f04f 30ff 	mov.w	r0, #4294967295
 8001bee:	e03e      	b.n	8001c6e <__swsetup_r+0xba>
 8001bf0:	4b25      	ldr	r3, [pc, #148]	; (8001c88 <__swsetup_r+0xd4>)
 8001bf2:	429c      	cmp	r4, r3
 8001bf4:	d101      	bne.n	8001bfa <__swsetup_r+0x46>
 8001bf6:	68ac      	ldr	r4, [r5, #8]
 8001bf8:	e7eb      	b.n	8001bd2 <__swsetup_r+0x1e>
 8001bfa:	4b24      	ldr	r3, [pc, #144]	; (8001c8c <__swsetup_r+0xd8>)
 8001bfc:	429c      	cmp	r4, r3
 8001bfe:	bf08      	it	eq
 8001c00:	68ec      	ldreq	r4, [r5, #12]
 8001c02:	e7e6      	b.n	8001bd2 <__swsetup_r+0x1e>
 8001c04:	0758      	lsls	r0, r3, #29
 8001c06:	d512      	bpl.n	8001c2e <__swsetup_r+0x7a>
 8001c08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001c0a:	b141      	cbz	r1, 8001c1e <__swsetup_r+0x6a>
 8001c0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001c10:	4299      	cmp	r1, r3
 8001c12:	d002      	beq.n	8001c1a <__swsetup_r+0x66>
 8001c14:	4630      	mov	r0, r6
 8001c16:	f000 f98f 	bl	8001f38 <_free_r>
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	6363      	str	r3, [r4, #52]	; 0x34
 8001c1e:	89a3      	ldrh	r3, [r4, #12]
 8001c20:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001c24:	81a3      	strh	r3, [r4, #12]
 8001c26:	2300      	movs	r3, #0
 8001c28:	6063      	str	r3, [r4, #4]
 8001c2a:	6923      	ldr	r3, [r4, #16]
 8001c2c:	6023      	str	r3, [r4, #0]
 8001c2e:	89a3      	ldrh	r3, [r4, #12]
 8001c30:	f043 0308 	orr.w	r3, r3, #8
 8001c34:	81a3      	strh	r3, [r4, #12]
 8001c36:	6923      	ldr	r3, [r4, #16]
 8001c38:	b94b      	cbnz	r3, 8001c4e <__swsetup_r+0x9a>
 8001c3a:	89a3      	ldrh	r3, [r4, #12]
 8001c3c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001c40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c44:	d003      	beq.n	8001c4e <__swsetup_r+0x9a>
 8001c46:	4621      	mov	r1, r4
 8001c48:	4630      	mov	r0, r6
 8001c4a:	f000 f929 	bl	8001ea0 <__smakebuf_r>
 8001c4e:	89a0      	ldrh	r0, [r4, #12]
 8001c50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001c54:	f010 0301 	ands.w	r3, r0, #1
 8001c58:	d00a      	beq.n	8001c70 <__swsetup_r+0xbc>
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60a3      	str	r3, [r4, #8]
 8001c5e:	6963      	ldr	r3, [r4, #20]
 8001c60:	425b      	negs	r3, r3
 8001c62:	61a3      	str	r3, [r4, #24]
 8001c64:	6923      	ldr	r3, [r4, #16]
 8001c66:	b943      	cbnz	r3, 8001c7a <__swsetup_r+0xc6>
 8001c68:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001c6c:	d1ba      	bne.n	8001be4 <__swsetup_r+0x30>
 8001c6e:	bd70      	pop	{r4, r5, r6, pc}
 8001c70:	0781      	lsls	r1, r0, #30
 8001c72:	bf58      	it	pl
 8001c74:	6963      	ldrpl	r3, [r4, #20]
 8001c76:	60a3      	str	r3, [r4, #8]
 8001c78:	e7f4      	b.n	8001c64 <__swsetup_r+0xb0>
 8001c7a:	2000      	movs	r0, #0
 8001c7c:	e7f7      	b.n	8001c6e <__swsetup_r+0xba>
 8001c7e:	bf00      	nop
 8001c80:	20000018 	.word	0x20000018
 8001c84:	0800208c 	.word	0x0800208c
 8001c88:	080020ac 	.word	0x080020ac
 8001c8c:	0800206c 	.word	0x0800206c

08001c90 <_close_r>:
 8001c90:	b538      	push	{r3, r4, r5, lr}
 8001c92:	4d06      	ldr	r5, [pc, #24]	; (8001cac <_close_r+0x1c>)
 8001c94:	2300      	movs	r3, #0
 8001c96:	4604      	mov	r4, r0
 8001c98:	4608      	mov	r0, r1
 8001c9a:	602b      	str	r3, [r5, #0]
 8001c9c:	f7fe fc23 	bl	80004e6 <_close>
 8001ca0:	1c43      	adds	r3, r0, #1
 8001ca2:	d102      	bne.n	8001caa <_close_r+0x1a>
 8001ca4:	682b      	ldr	r3, [r5, #0]
 8001ca6:	b103      	cbz	r3, 8001caa <_close_r+0x1a>
 8001ca8:	6023      	str	r3, [r4, #0]
 8001caa:	bd38      	pop	{r3, r4, r5, pc}
 8001cac:	200000dc 	.word	0x200000dc

08001cb0 <__sflush_r>:
 8001cb0:	898a      	ldrh	r2, [r1, #12]
 8001cb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cb6:	4605      	mov	r5, r0
 8001cb8:	0710      	lsls	r0, r2, #28
 8001cba:	460c      	mov	r4, r1
 8001cbc:	d458      	bmi.n	8001d70 <__sflush_r+0xc0>
 8001cbe:	684b      	ldr	r3, [r1, #4]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	dc05      	bgt.n	8001cd0 <__sflush_r+0x20>
 8001cc4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	dc02      	bgt.n	8001cd0 <__sflush_r+0x20>
 8001cca:	2000      	movs	r0, #0
 8001ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001cd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001cd2:	2e00      	cmp	r6, #0
 8001cd4:	d0f9      	beq.n	8001cca <__sflush_r+0x1a>
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001cdc:	682f      	ldr	r7, [r5, #0]
 8001cde:	602b      	str	r3, [r5, #0]
 8001ce0:	d032      	beq.n	8001d48 <__sflush_r+0x98>
 8001ce2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001ce4:	89a3      	ldrh	r3, [r4, #12]
 8001ce6:	075a      	lsls	r2, r3, #29
 8001ce8:	d505      	bpl.n	8001cf6 <__sflush_r+0x46>
 8001cea:	6863      	ldr	r3, [r4, #4]
 8001cec:	1ac0      	subs	r0, r0, r3
 8001cee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001cf0:	b10b      	cbz	r3, 8001cf6 <__sflush_r+0x46>
 8001cf2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001cf4:	1ac0      	subs	r0, r0, r3
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001cfc:	6a21      	ldr	r1, [r4, #32]
 8001cfe:	4628      	mov	r0, r5
 8001d00:	47b0      	blx	r6
 8001d02:	1c43      	adds	r3, r0, #1
 8001d04:	89a3      	ldrh	r3, [r4, #12]
 8001d06:	d106      	bne.n	8001d16 <__sflush_r+0x66>
 8001d08:	6829      	ldr	r1, [r5, #0]
 8001d0a:	291d      	cmp	r1, #29
 8001d0c:	d82c      	bhi.n	8001d68 <__sflush_r+0xb8>
 8001d0e:	4a2a      	ldr	r2, [pc, #168]	; (8001db8 <__sflush_r+0x108>)
 8001d10:	40ca      	lsrs	r2, r1
 8001d12:	07d6      	lsls	r6, r2, #31
 8001d14:	d528      	bpl.n	8001d68 <__sflush_r+0xb8>
 8001d16:	2200      	movs	r2, #0
 8001d18:	6062      	str	r2, [r4, #4]
 8001d1a:	04d9      	lsls	r1, r3, #19
 8001d1c:	6922      	ldr	r2, [r4, #16]
 8001d1e:	6022      	str	r2, [r4, #0]
 8001d20:	d504      	bpl.n	8001d2c <__sflush_r+0x7c>
 8001d22:	1c42      	adds	r2, r0, #1
 8001d24:	d101      	bne.n	8001d2a <__sflush_r+0x7a>
 8001d26:	682b      	ldr	r3, [r5, #0]
 8001d28:	b903      	cbnz	r3, 8001d2c <__sflush_r+0x7c>
 8001d2a:	6560      	str	r0, [r4, #84]	; 0x54
 8001d2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001d2e:	602f      	str	r7, [r5, #0]
 8001d30:	2900      	cmp	r1, #0
 8001d32:	d0ca      	beq.n	8001cca <__sflush_r+0x1a>
 8001d34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001d38:	4299      	cmp	r1, r3
 8001d3a:	d002      	beq.n	8001d42 <__sflush_r+0x92>
 8001d3c:	4628      	mov	r0, r5
 8001d3e:	f000 f8fb 	bl	8001f38 <_free_r>
 8001d42:	2000      	movs	r0, #0
 8001d44:	6360      	str	r0, [r4, #52]	; 0x34
 8001d46:	e7c1      	b.n	8001ccc <__sflush_r+0x1c>
 8001d48:	6a21      	ldr	r1, [r4, #32]
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	4628      	mov	r0, r5
 8001d4e:	47b0      	blx	r6
 8001d50:	1c41      	adds	r1, r0, #1
 8001d52:	d1c7      	bne.n	8001ce4 <__sflush_r+0x34>
 8001d54:	682b      	ldr	r3, [r5, #0]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d0c4      	beq.n	8001ce4 <__sflush_r+0x34>
 8001d5a:	2b1d      	cmp	r3, #29
 8001d5c:	d001      	beq.n	8001d62 <__sflush_r+0xb2>
 8001d5e:	2b16      	cmp	r3, #22
 8001d60:	d101      	bne.n	8001d66 <__sflush_r+0xb6>
 8001d62:	602f      	str	r7, [r5, #0]
 8001d64:	e7b1      	b.n	8001cca <__sflush_r+0x1a>
 8001d66:	89a3      	ldrh	r3, [r4, #12]
 8001d68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d6c:	81a3      	strh	r3, [r4, #12]
 8001d6e:	e7ad      	b.n	8001ccc <__sflush_r+0x1c>
 8001d70:	690f      	ldr	r7, [r1, #16]
 8001d72:	2f00      	cmp	r7, #0
 8001d74:	d0a9      	beq.n	8001cca <__sflush_r+0x1a>
 8001d76:	0793      	lsls	r3, r2, #30
 8001d78:	680e      	ldr	r6, [r1, #0]
 8001d7a:	bf08      	it	eq
 8001d7c:	694b      	ldreq	r3, [r1, #20]
 8001d7e:	600f      	str	r7, [r1, #0]
 8001d80:	bf18      	it	ne
 8001d82:	2300      	movne	r3, #0
 8001d84:	eba6 0807 	sub.w	r8, r6, r7
 8001d88:	608b      	str	r3, [r1, #8]
 8001d8a:	f1b8 0f00 	cmp.w	r8, #0
 8001d8e:	dd9c      	ble.n	8001cca <__sflush_r+0x1a>
 8001d90:	6a21      	ldr	r1, [r4, #32]
 8001d92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001d94:	4643      	mov	r3, r8
 8001d96:	463a      	mov	r2, r7
 8001d98:	4628      	mov	r0, r5
 8001d9a:	47b0      	blx	r6
 8001d9c:	2800      	cmp	r0, #0
 8001d9e:	dc06      	bgt.n	8001dae <__sflush_r+0xfe>
 8001da0:	89a3      	ldrh	r3, [r4, #12]
 8001da2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001da6:	81a3      	strh	r3, [r4, #12]
 8001da8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dac:	e78e      	b.n	8001ccc <__sflush_r+0x1c>
 8001dae:	4407      	add	r7, r0
 8001db0:	eba8 0800 	sub.w	r8, r8, r0
 8001db4:	e7e9      	b.n	8001d8a <__sflush_r+0xda>
 8001db6:	bf00      	nop
 8001db8:	20400001 	.word	0x20400001

08001dbc <_fflush_r>:
 8001dbc:	b538      	push	{r3, r4, r5, lr}
 8001dbe:	690b      	ldr	r3, [r1, #16]
 8001dc0:	4605      	mov	r5, r0
 8001dc2:	460c      	mov	r4, r1
 8001dc4:	b913      	cbnz	r3, 8001dcc <_fflush_r+0x10>
 8001dc6:	2500      	movs	r5, #0
 8001dc8:	4628      	mov	r0, r5
 8001dca:	bd38      	pop	{r3, r4, r5, pc}
 8001dcc:	b118      	cbz	r0, 8001dd6 <_fflush_r+0x1a>
 8001dce:	6983      	ldr	r3, [r0, #24]
 8001dd0:	b90b      	cbnz	r3, 8001dd6 <_fflush_r+0x1a>
 8001dd2:	f7ff fa4f 	bl	8001274 <__sinit>
 8001dd6:	4b14      	ldr	r3, [pc, #80]	; (8001e28 <_fflush_r+0x6c>)
 8001dd8:	429c      	cmp	r4, r3
 8001dda:	d11b      	bne.n	8001e14 <_fflush_r+0x58>
 8001ddc:	686c      	ldr	r4, [r5, #4]
 8001dde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d0ef      	beq.n	8001dc6 <_fflush_r+0xa>
 8001de6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001de8:	07d0      	lsls	r0, r2, #31
 8001dea:	d404      	bmi.n	8001df6 <_fflush_r+0x3a>
 8001dec:	0599      	lsls	r1, r3, #22
 8001dee:	d402      	bmi.n	8001df6 <_fflush_r+0x3a>
 8001df0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001df2:	f7ff fadd 	bl	80013b0 <__retarget_lock_acquire_recursive>
 8001df6:	4628      	mov	r0, r5
 8001df8:	4621      	mov	r1, r4
 8001dfa:	f7ff ff59 	bl	8001cb0 <__sflush_r>
 8001dfe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001e00:	07da      	lsls	r2, r3, #31
 8001e02:	4605      	mov	r5, r0
 8001e04:	d4e0      	bmi.n	8001dc8 <_fflush_r+0xc>
 8001e06:	89a3      	ldrh	r3, [r4, #12]
 8001e08:	059b      	lsls	r3, r3, #22
 8001e0a:	d4dd      	bmi.n	8001dc8 <_fflush_r+0xc>
 8001e0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001e0e:	f7ff fad0 	bl	80013b2 <__retarget_lock_release_recursive>
 8001e12:	e7d9      	b.n	8001dc8 <_fflush_r+0xc>
 8001e14:	4b05      	ldr	r3, [pc, #20]	; (8001e2c <_fflush_r+0x70>)
 8001e16:	429c      	cmp	r4, r3
 8001e18:	d101      	bne.n	8001e1e <_fflush_r+0x62>
 8001e1a:	68ac      	ldr	r4, [r5, #8]
 8001e1c:	e7df      	b.n	8001dde <_fflush_r+0x22>
 8001e1e:	4b04      	ldr	r3, [pc, #16]	; (8001e30 <_fflush_r+0x74>)
 8001e20:	429c      	cmp	r4, r3
 8001e22:	bf08      	it	eq
 8001e24:	68ec      	ldreq	r4, [r5, #12]
 8001e26:	e7da      	b.n	8001dde <_fflush_r+0x22>
 8001e28:	0800208c 	.word	0x0800208c
 8001e2c:	080020ac 	.word	0x080020ac
 8001e30:	0800206c 	.word	0x0800206c

08001e34 <_lseek_r>:
 8001e34:	b538      	push	{r3, r4, r5, lr}
 8001e36:	4d07      	ldr	r5, [pc, #28]	; (8001e54 <_lseek_r+0x20>)
 8001e38:	4604      	mov	r4, r0
 8001e3a:	4608      	mov	r0, r1
 8001e3c:	4611      	mov	r1, r2
 8001e3e:	2200      	movs	r2, #0
 8001e40:	602a      	str	r2, [r5, #0]
 8001e42:	461a      	mov	r2, r3
 8001e44:	f7fe fb76 	bl	8000534 <_lseek>
 8001e48:	1c43      	adds	r3, r0, #1
 8001e4a:	d102      	bne.n	8001e52 <_lseek_r+0x1e>
 8001e4c:	682b      	ldr	r3, [r5, #0]
 8001e4e:	b103      	cbz	r3, 8001e52 <_lseek_r+0x1e>
 8001e50:	6023      	str	r3, [r4, #0]
 8001e52:	bd38      	pop	{r3, r4, r5, pc}
 8001e54:	200000dc 	.word	0x200000dc

08001e58 <__swhatbuf_r>:
 8001e58:	b570      	push	{r4, r5, r6, lr}
 8001e5a:	460e      	mov	r6, r1
 8001e5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e60:	2900      	cmp	r1, #0
 8001e62:	b096      	sub	sp, #88	; 0x58
 8001e64:	4614      	mov	r4, r2
 8001e66:	461d      	mov	r5, r3
 8001e68:	da07      	bge.n	8001e7a <__swhatbuf_r+0x22>
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	602b      	str	r3, [r5, #0]
 8001e6e:	89b3      	ldrh	r3, [r6, #12]
 8001e70:	061a      	lsls	r2, r3, #24
 8001e72:	d410      	bmi.n	8001e96 <__swhatbuf_r+0x3e>
 8001e74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e78:	e00e      	b.n	8001e98 <__swhatbuf_r+0x40>
 8001e7a:	466a      	mov	r2, sp
 8001e7c:	f000 f8be 	bl	8001ffc <_fstat_r>
 8001e80:	2800      	cmp	r0, #0
 8001e82:	dbf2      	blt.n	8001e6a <__swhatbuf_r+0x12>
 8001e84:	9a01      	ldr	r2, [sp, #4]
 8001e86:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001e8a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001e8e:	425a      	negs	r2, r3
 8001e90:	415a      	adcs	r2, r3
 8001e92:	602a      	str	r2, [r5, #0]
 8001e94:	e7ee      	b.n	8001e74 <__swhatbuf_r+0x1c>
 8001e96:	2340      	movs	r3, #64	; 0x40
 8001e98:	2000      	movs	r0, #0
 8001e9a:	6023      	str	r3, [r4, #0]
 8001e9c:	b016      	add	sp, #88	; 0x58
 8001e9e:	bd70      	pop	{r4, r5, r6, pc}

08001ea0 <__smakebuf_r>:
 8001ea0:	898b      	ldrh	r3, [r1, #12]
 8001ea2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001ea4:	079d      	lsls	r5, r3, #30
 8001ea6:	4606      	mov	r6, r0
 8001ea8:	460c      	mov	r4, r1
 8001eaa:	d507      	bpl.n	8001ebc <__smakebuf_r+0x1c>
 8001eac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001eb0:	6023      	str	r3, [r4, #0]
 8001eb2:	6123      	str	r3, [r4, #16]
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	6163      	str	r3, [r4, #20]
 8001eb8:	b002      	add	sp, #8
 8001eba:	bd70      	pop	{r4, r5, r6, pc}
 8001ebc:	ab01      	add	r3, sp, #4
 8001ebe:	466a      	mov	r2, sp
 8001ec0:	f7ff ffca 	bl	8001e58 <__swhatbuf_r>
 8001ec4:	9900      	ldr	r1, [sp, #0]
 8001ec6:	4605      	mov	r5, r0
 8001ec8:	4630      	mov	r0, r6
 8001eca:	f7ff fa73 	bl	80013b4 <_malloc_r>
 8001ece:	b948      	cbnz	r0, 8001ee4 <__smakebuf_r+0x44>
 8001ed0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ed4:	059a      	lsls	r2, r3, #22
 8001ed6:	d4ef      	bmi.n	8001eb8 <__smakebuf_r+0x18>
 8001ed8:	f023 0303 	bic.w	r3, r3, #3
 8001edc:	f043 0302 	orr.w	r3, r3, #2
 8001ee0:	81a3      	strh	r3, [r4, #12]
 8001ee2:	e7e3      	b.n	8001eac <__smakebuf_r+0xc>
 8001ee4:	4b0d      	ldr	r3, [pc, #52]	; (8001f1c <__smakebuf_r+0x7c>)
 8001ee6:	62b3      	str	r3, [r6, #40]	; 0x28
 8001ee8:	89a3      	ldrh	r3, [r4, #12]
 8001eea:	6020      	str	r0, [r4, #0]
 8001eec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ef0:	81a3      	strh	r3, [r4, #12]
 8001ef2:	9b00      	ldr	r3, [sp, #0]
 8001ef4:	6163      	str	r3, [r4, #20]
 8001ef6:	9b01      	ldr	r3, [sp, #4]
 8001ef8:	6120      	str	r0, [r4, #16]
 8001efa:	b15b      	cbz	r3, 8001f14 <__smakebuf_r+0x74>
 8001efc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001f00:	4630      	mov	r0, r6
 8001f02:	f000 f88d 	bl	8002020 <_isatty_r>
 8001f06:	b128      	cbz	r0, 8001f14 <__smakebuf_r+0x74>
 8001f08:	89a3      	ldrh	r3, [r4, #12]
 8001f0a:	f023 0303 	bic.w	r3, r3, #3
 8001f0e:	f043 0301 	orr.w	r3, r3, #1
 8001f12:	81a3      	strh	r3, [r4, #12]
 8001f14:	89a0      	ldrh	r0, [r4, #12]
 8001f16:	4305      	orrs	r5, r0
 8001f18:	81a5      	strh	r5, [r4, #12]
 8001f1a:	e7cd      	b.n	8001eb8 <__smakebuf_r+0x18>
 8001f1c:	0800120d 	.word	0x0800120d

08001f20 <__malloc_lock>:
 8001f20:	4801      	ldr	r0, [pc, #4]	; (8001f28 <__malloc_lock+0x8>)
 8001f22:	f7ff ba45 	b.w	80013b0 <__retarget_lock_acquire_recursive>
 8001f26:	bf00      	nop
 8001f28:	200000d4 	.word	0x200000d4

08001f2c <__malloc_unlock>:
 8001f2c:	4801      	ldr	r0, [pc, #4]	; (8001f34 <__malloc_unlock+0x8>)
 8001f2e:	f7ff ba40 	b.w	80013b2 <__retarget_lock_release_recursive>
 8001f32:	bf00      	nop
 8001f34:	200000d4 	.word	0x200000d4

08001f38 <_free_r>:
 8001f38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001f3a:	2900      	cmp	r1, #0
 8001f3c:	d048      	beq.n	8001fd0 <_free_r+0x98>
 8001f3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001f42:	9001      	str	r0, [sp, #4]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	f1a1 0404 	sub.w	r4, r1, #4
 8001f4a:	bfb8      	it	lt
 8001f4c:	18e4      	addlt	r4, r4, r3
 8001f4e:	f7ff ffe7 	bl	8001f20 <__malloc_lock>
 8001f52:	4a20      	ldr	r2, [pc, #128]	; (8001fd4 <_free_r+0x9c>)
 8001f54:	9801      	ldr	r0, [sp, #4]
 8001f56:	6813      	ldr	r3, [r2, #0]
 8001f58:	4615      	mov	r5, r2
 8001f5a:	b933      	cbnz	r3, 8001f6a <_free_r+0x32>
 8001f5c:	6063      	str	r3, [r4, #4]
 8001f5e:	6014      	str	r4, [r2, #0]
 8001f60:	b003      	add	sp, #12
 8001f62:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001f66:	f7ff bfe1 	b.w	8001f2c <__malloc_unlock>
 8001f6a:	42a3      	cmp	r3, r4
 8001f6c:	d90b      	bls.n	8001f86 <_free_r+0x4e>
 8001f6e:	6821      	ldr	r1, [r4, #0]
 8001f70:	1862      	adds	r2, r4, r1
 8001f72:	4293      	cmp	r3, r2
 8001f74:	bf04      	itt	eq
 8001f76:	681a      	ldreq	r2, [r3, #0]
 8001f78:	685b      	ldreq	r3, [r3, #4]
 8001f7a:	6063      	str	r3, [r4, #4]
 8001f7c:	bf04      	itt	eq
 8001f7e:	1852      	addeq	r2, r2, r1
 8001f80:	6022      	streq	r2, [r4, #0]
 8001f82:	602c      	str	r4, [r5, #0]
 8001f84:	e7ec      	b.n	8001f60 <_free_r+0x28>
 8001f86:	461a      	mov	r2, r3
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	b10b      	cbz	r3, 8001f90 <_free_r+0x58>
 8001f8c:	42a3      	cmp	r3, r4
 8001f8e:	d9fa      	bls.n	8001f86 <_free_r+0x4e>
 8001f90:	6811      	ldr	r1, [r2, #0]
 8001f92:	1855      	adds	r5, r2, r1
 8001f94:	42a5      	cmp	r5, r4
 8001f96:	d10b      	bne.n	8001fb0 <_free_r+0x78>
 8001f98:	6824      	ldr	r4, [r4, #0]
 8001f9a:	4421      	add	r1, r4
 8001f9c:	1854      	adds	r4, r2, r1
 8001f9e:	42a3      	cmp	r3, r4
 8001fa0:	6011      	str	r1, [r2, #0]
 8001fa2:	d1dd      	bne.n	8001f60 <_free_r+0x28>
 8001fa4:	681c      	ldr	r4, [r3, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	6053      	str	r3, [r2, #4]
 8001faa:	4421      	add	r1, r4
 8001fac:	6011      	str	r1, [r2, #0]
 8001fae:	e7d7      	b.n	8001f60 <_free_r+0x28>
 8001fb0:	d902      	bls.n	8001fb8 <_free_r+0x80>
 8001fb2:	230c      	movs	r3, #12
 8001fb4:	6003      	str	r3, [r0, #0]
 8001fb6:	e7d3      	b.n	8001f60 <_free_r+0x28>
 8001fb8:	6825      	ldr	r5, [r4, #0]
 8001fba:	1961      	adds	r1, r4, r5
 8001fbc:	428b      	cmp	r3, r1
 8001fbe:	bf04      	itt	eq
 8001fc0:	6819      	ldreq	r1, [r3, #0]
 8001fc2:	685b      	ldreq	r3, [r3, #4]
 8001fc4:	6063      	str	r3, [r4, #4]
 8001fc6:	bf04      	itt	eq
 8001fc8:	1949      	addeq	r1, r1, r5
 8001fca:	6021      	streq	r1, [r4, #0]
 8001fcc:	6054      	str	r4, [r2, #4]
 8001fce:	e7c7      	b.n	8001f60 <_free_r+0x28>
 8001fd0:	b003      	add	sp, #12
 8001fd2:	bd30      	pop	{r4, r5, pc}
 8001fd4:	2000009c 	.word	0x2000009c

08001fd8 <_read_r>:
 8001fd8:	b538      	push	{r3, r4, r5, lr}
 8001fda:	4d07      	ldr	r5, [pc, #28]	; (8001ff8 <_read_r+0x20>)
 8001fdc:	4604      	mov	r4, r0
 8001fde:	4608      	mov	r0, r1
 8001fe0:	4611      	mov	r1, r2
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	602a      	str	r2, [r5, #0]
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	f7fe fa44 	bl	8000474 <_read>
 8001fec:	1c43      	adds	r3, r0, #1
 8001fee:	d102      	bne.n	8001ff6 <_read_r+0x1e>
 8001ff0:	682b      	ldr	r3, [r5, #0]
 8001ff2:	b103      	cbz	r3, 8001ff6 <_read_r+0x1e>
 8001ff4:	6023      	str	r3, [r4, #0]
 8001ff6:	bd38      	pop	{r3, r4, r5, pc}
 8001ff8:	200000dc 	.word	0x200000dc

08001ffc <_fstat_r>:
 8001ffc:	b538      	push	{r3, r4, r5, lr}
 8001ffe:	4d07      	ldr	r5, [pc, #28]	; (800201c <_fstat_r+0x20>)
 8002000:	2300      	movs	r3, #0
 8002002:	4604      	mov	r4, r0
 8002004:	4608      	mov	r0, r1
 8002006:	4611      	mov	r1, r2
 8002008:	602b      	str	r3, [r5, #0]
 800200a:	f7fe fa78 	bl	80004fe <_fstat>
 800200e:	1c43      	adds	r3, r0, #1
 8002010:	d102      	bne.n	8002018 <_fstat_r+0x1c>
 8002012:	682b      	ldr	r3, [r5, #0]
 8002014:	b103      	cbz	r3, 8002018 <_fstat_r+0x1c>
 8002016:	6023      	str	r3, [r4, #0]
 8002018:	bd38      	pop	{r3, r4, r5, pc}
 800201a:	bf00      	nop
 800201c:	200000dc 	.word	0x200000dc

08002020 <_isatty_r>:
 8002020:	b538      	push	{r3, r4, r5, lr}
 8002022:	4d06      	ldr	r5, [pc, #24]	; (800203c <_isatty_r+0x1c>)
 8002024:	2300      	movs	r3, #0
 8002026:	4604      	mov	r4, r0
 8002028:	4608      	mov	r0, r1
 800202a:	602b      	str	r3, [r5, #0]
 800202c:	f7fe fa77 	bl	800051e <_isatty>
 8002030:	1c43      	adds	r3, r0, #1
 8002032:	d102      	bne.n	800203a <_isatty_r+0x1a>
 8002034:	682b      	ldr	r3, [r5, #0]
 8002036:	b103      	cbz	r3, 800203a <_isatty_r+0x1a>
 8002038:	6023      	str	r3, [r4, #0]
 800203a:	bd38      	pop	{r3, r4, r5, pc}
 800203c:	200000dc 	.word	0x200000dc

08002040 <_init>:
 8002040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002042:	bf00      	nop
 8002044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002046:	bc08      	pop	{r3}
 8002048:	469e      	mov	lr, r3
 800204a:	4770      	bx	lr

0800204c <_fini>:
 800204c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800204e:	bf00      	nop
 8002050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002052:	bc08      	pop	{r3}
 8002054:	469e      	mov	lr, r3
 8002056:	4770      	bx	lr
