
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000011f4  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800139c  0800139c  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800139c  0800139c  00020038  2**0
                  CONTENTS
  4 .ARM          00000000  0800139c  0800139c  00020038  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800139c  0800139c  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800139c  0800139c  0001139c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080013a0  080013a0  000113a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  080013a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020038  2**0
                  CONTENTS
 10 .bss          00000048  20000038  20000038  00020038  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000080  20000080  00020038  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 13 .debug_info   000020fd  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000604  00000000  00000000  00022165  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001f0  00000000  00000000  00022770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000001b8  00000000  00000000  00022960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000291f  00000000  00000000  00022b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001f97  00000000  00000000  00025437  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000b036  00000000  00000000  000273ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00032404  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000770  00000000  00000000  00032458  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000038 	.word	0x20000038
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08001384 	.word	0x08001384

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	2000003c 	.word	0x2000003c
 80001e4:	08001384 	.word	0x08001384

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <I2C1_GPIOInits>:
 * PB7 --> SDA
 * ALT function mode : 4
 */

void I2C1_GPIOInits(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b084      	sub	sp, #16
 80001fc:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CPins;

	I2CPins.pGPIOx = GPIOB;
 80001fe:	4b0e      	ldr	r3, [pc, #56]	; (8000238 <I2C1_GPIOInits+0x40>)
 8000200:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000202:	2302      	movs	r3, #2
 8000204:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OP;
 8000206:	2301      	movs	r3, #1
 8000208:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 800020a:	2301      	movs	r3, #1
 800020c:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 800020e:	2304      	movs	r3, #4
 8000210:	737b      	strb	r3, [r7, #13]
	I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000212:	2302      	movs	r3, #2
 8000214:	72bb      	strb	r3, [r7, #10]

	// scl
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 8000216:	2306      	movs	r3, #6
 8000218:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 800021a:	1d3b      	adds	r3, r7, #4
 800021c:	4618      	mov	r0, r3
 800021e:	f000 fef5 	bl	800100c <GPIO_Init>

	// sda
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 8000222:	2307      	movs	r3, #7
 8000224:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	4618      	mov	r0, r3
 800022a:	f000 feef 	bl	800100c <GPIO_Init>


}
 800022e:	bf00      	nop
 8000230:	3710      	adds	r7, #16
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}
 8000236:	bf00      	nop
 8000238:	40020400 	.word	0x40020400

0800023c <I2C1_Inits>:

void I2C1_Inits(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
	I2C1Handle.pI2Cx = I2C1;
 8000240:	4b09      	ldr	r3, [pc, #36]	; (8000268 <I2C1_Inits+0x2c>)
 8000242:	4a0a      	ldr	r2, [pc, #40]	; (800026c <I2C1_Inits+0x30>)
 8000244:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 8000246:	4b08      	ldr	r3, [pc, #32]	; (8000268 <I2C1_Inits+0x2c>)
 8000248:	2201      	movs	r2, #1
 800024a:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
 800024c:	4b06      	ldr	r3, [pc, #24]	; (8000268 <I2C1_Inits+0x2c>)
 800024e:	2269      	movs	r2, #105	; 0x69
 8000250:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 8000252:	4b05      	ldr	r3, [pc, #20]	; (8000268 <I2C1_Inits+0x2c>)
 8000254:	2200      	movs	r2, #0
 8000256:	815a      	strh	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 8000258:	4b03      	ldr	r3, [pc, #12]	; (8000268 <I2C1_Inits+0x2c>)
 800025a:	4a05      	ldr	r2, [pc, #20]	; (8000270 <I2C1_Inits+0x34>)
 800025c:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 800025e:	4802      	ldr	r0, [pc, #8]	; (8000268 <I2C1_Inits+0x2c>)
 8000260:	f000 f9a0 	bl	80005a4 <I2C_Init>
}
 8000264:	bf00      	nop
 8000266:	bd80      	pop	{r7, pc}
 8000268:	20000058 	.word	0x20000058
 800026c:	40005400 	.word	0x40005400
 8000270:	000186a0 	.word	0x000186a0

08000274 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b086      	sub	sp, #24
 8000278:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn, GpioLed;

	// this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOA;
 800027a:	4b14      	ldr	r3, [pc, #80]	; (80002cc <GPIO_ButtonInit+0x58>)
 800027c:	60fb      	str	r3, [r7, #12]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 800027e:	2300      	movs	r3, #0
 8000280:	743b      	strb	r3, [r7, #16]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000282:	2300      	movs	r3, #0
 8000284:	747b      	strb	r3, [r7, #17]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000286:	2302      	movs	r3, #2
 8000288:	74bb      	strb	r3, [r7, #18]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800028a:	2300      	movs	r3, #0
 800028c:	74fb      	strb	r3, [r7, #19]

	GPIO_PeripheralClockControl(GPIOA, ENABLE);
 800028e:	2101      	movs	r1, #1
 8000290:	480e      	ldr	r0, [pc, #56]	; (80002cc <GPIO_ButtonInit+0x58>)
 8000292:	f000 fdd3 	bl	8000e3c <GPIO_PeripheralClockControl>
	GPIO_Init(&GPIOBtn);
 8000296:	f107 030c 	add.w	r3, r7, #12
 800029a:	4618      	mov	r0, r3
 800029c:	f000 feb6 	bl	800100c <GPIO_Init>

	// this is led gpio configuration
	GpioLed.pGPIOx = GPIOD;
 80002a0:	4b0b      	ldr	r3, [pc, #44]	; (80002d0 <GPIO_ButtonInit+0x5c>)
 80002a2:	603b      	str	r3, [r7, #0]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 80002a4:	230c      	movs	r3, #12
 80002a6:	713b      	strb	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80002a8:	2301      	movs	r3, #1
 80002aa:	717b      	strb	r3, [r7, #5]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002ac:	2302      	movs	r3, #2
 80002ae:	71bb      	strb	r3, [r7, #6]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002b0:	2300      	movs	r3, #0
 80002b2:	71fb      	strb	r3, [r7, #7]

	GPIO_PeripheralClockControl(GPIOD, ENABLE);
 80002b4:	2101      	movs	r1, #1
 80002b6:	4806      	ldr	r0, [pc, #24]	; (80002d0 <GPIO_ButtonInit+0x5c>)
 80002b8:	f000 fdc0 	bl	8000e3c <GPIO_PeripheralClockControl>
	GPIO_Init(&GpioLed);
 80002bc:	463b      	mov	r3, r7
 80002be:	4618      	mov	r0, r3
 80002c0:	f000 fea4 	bl	800100c <GPIO_Init>
}
 80002c4:	bf00      	nop
 80002c6:	3718      	adds	r7, #24
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	40020000 	.word	0x40020000
 80002d0:	40020c00 	.word	0x40020c00

080002d4 <main>:

int main(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0

	//initiate button
	GPIO_ButtonInit();
 80002d8:	f7ff ffcc 	bl	8000274 <GPIO_ButtonInit>

	// i2c pin inits
	I2C1_GPIOInits();
 80002dc:	f7ff ff8c 	bl	80001f8 <I2C1_GPIOInits>

	//i2c peripheral configuration
	I2C1_Inits();
 80002e0:	f7ff ffac 	bl	800023c <I2C1_Inits>

	// I2C IRQ configuration
	I2C_IRQInterruptConfig(IRQ_NO_I2C1_EV, ENABLE);
 80002e4:	2101      	movs	r1, #1
 80002e6:	201f      	movs	r0, #31
 80002e8:	f000 fa9e 	bl	8000828 <I2C_IRQInterruptConfig>
	I2C_IRQInterruptConfig(IRQ_NO_I2C1_ER, ENABLE);
 80002ec:	2101      	movs	r1, #1
 80002ee:	2020      	movs	r0, #32
 80002f0:	f000 fa9a 	bl	8000828 <I2C_IRQInterruptConfig>

	I2C_SlaveEnableDisableCallbackEvents(I2C1, ENABLE);
 80002f4:	2101      	movs	r1, #1
 80002f6:	4806      	ldr	r0, [pc, #24]	; (8000310 <main+0x3c>)
 80002f8:	f000 fd6b 	bl	8000dd2 <I2C_SlaveEnableDisableCallbackEvents>

	//enable the peripheral
	I2C_PeripheralControl(I2C1, ENABLE);
 80002fc:	2101      	movs	r1, #1
 80002fe:	4804      	ldr	r0, [pc, #16]	; (8000310 <main+0x3c>)
 8000300:	f000 fb16 	bl	8000930 <I2C_PeripheralControl>

	//ack bit is made 1 after PE=1
	I2C_ManageAcking(I2C1, I2C_ACK_ENABLE);
 8000304:	2101      	movs	r1, #1
 8000306:	4802      	ldr	r0, [pc, #8]	; (8000310 <main+0x3c>)
 8000308:	f000 fb2e 	bl	8000968 <I2C_ManageAcking>

	while(1);
 800030c:	e7fe      	b.n	800030c <main+0x38>
 800030e:	bf00      	nop
 8000310:	40005400 	.word	0x40005400

08000314 <I2C1_EV_IRQHandler>:

	return 0;
}

void I2C1_EV_IRQHandler(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
	I2C_EV_IRQHandling(&I2C1Handle);
 8000318:	4802      	ldr	r0, [pc, #8]	; (8000324 <I2C1_EV_IRQHandler+0x10>)
 800031a:	f000 fb41 	bl	80009a0 <I2C_EV_IRQHandling>
}
 800031e:	bf00      	nop
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	20000058 	.word	0x20000058

08000328 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
	I2C_ER_IRQHandling(&I2C1Handle);
 800032c:	4802      	ldr	r0, [pc, #8]	; (8000338 <I2C1_ER_IRQHandler+0x10>)
 800032e:	f000 fcca 	bl	8000cc6 <I2C_ER_IRQHandling>
}
 8000332:	bf00      	nop
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	20000058 	.word	0x20000058

0800033c <I2C_ApplicationEventCallback>:




void I2C_ApplicationEventCallback(I2C_Handle_t *pI2CHandle, uint8_t AppEv)
{
 800033c:	b590      	push	{r4, r7, lr}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
 8000344:	460b      	mov	r3, r1
 8000346:	70fb      	strb	r3, [r7, #3]
	static uint8_t commandCode = 0;
	static uint8_t Cnt = 0;

	if(AppEv == I2C_EV_DATA_REQ)
 8000348:	78fb      	ldrb	r3, [r7, #3]
 800034a:	2b08      	cmp	r3, #8
 800034c:	d123      	bne.n	8000396 <I2C_ApplicationEventCallback+0x5a>
	{
		// Master wants some data, slave has to send it
		if(commandCode == 0x51)
 800034e:	4b1f      	ldr	r3, [pc, #124]	; (80003cc <I2C_ApplicationEventCallback+0x90>)
 8000350:	781b      	ldrb	r3, [r3, #0]
 8000352:	2b51      	cmp	r3, #81	; 0x51
 8000354:	d10b      	bne.n	800036e <I2C_ApplicationEventCallback+0x32>
		{
			// send the length information to the master
			I2C_SlaveSendData(pI2CHandle->pI2Cx, (uint8_t)strlen((char*)Tx_buf));
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	681c      	ldr	r4, [r3, #0]
 800035a:	481d      	ldr	r0, [pc, #116]	; (80003d0 <I2C_ApplicationEventCallback+0x94>)
 800035c:	f7ff ff44 	bl	80001e8 <strlen>
 8000360:	4603      	mov	r3, r0
 8000362:	b2db      	uxtb	r3, r3
 8000364:	4619      	mov	r1, r3
 8000366:	4620      	mov	r0, r4
 8000368:	f000 fa41 	bl	80007ee <I2C_SlaveSendData>
	else if(AppEv == I2C_EV_STOP)
	{
		// This happens only during slave reception
		// Master has ended the I2C communication with the slave
	}
}
 800036c:	e029      	b.n	80003c2 <I2C_ApplicationEventCallback+0x86>
		else if(commandCode == 0x52)
 800036e:	4b17      	ldr	r3, [pc, #92]	; (80003cc <I2C_ApplicationEventCallback+0x90>)
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	2b52      	cmp	r3, #82	; 0x52
 8000374:	d125      	bne.n	80003c2 <I2C_ApplicationEventCallback+0x86>
			I2C_SlaveSendData(pI2CHandle->pI2Cx, Tx_buf[Cnt++]);
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	681a      	ldr	r2, [r3, #0]
 800037a:	4b16      	ldr	r3, [pc, #88]	; (80003d4 <I2C_ApplicationEventCallback+0x98>)
 800037c:	781b      	ldrb	r3, [r3, #0]
 800037e:	1c59      	adds	r1, r3, #1
 8000380:	b2c8      	uxtb	r0, r1
 8000382:	4914      	ldr	r1, [pc, #80]	; (80003d4 <I2C_ApplicationEventCallback+0x98>)
 8000384:	7008      	strb	r0, [r1, #0]
 8000386:	4619      	mov	r1, r3
 8000388:	4b11      	ldr	r3, [pc, #68]	; (80003d0 <I2C_ApplicationEventCallback+0x94>)
 800038a:	5c5b      	ldrb	r3, [r3, r1]
 800038c:	4619      	mov	r1, r3
 800038e:	4610      	mov	r0, r2
 8000390:	f000 fa2d 	bl	80007ee <I2C_SlaveSendData>
}
 8000394:	e015      	b.n	80003c2 <I2C_ApplicationEventCallback+0x86>
	else if(AppEv == I2C_EV_DATA_RCV)
 8000396:	78fb      	ldrb	r3, [r7, #3]
 8000398:	2b09      	cmp	r3, #9
 800039a:	d109      	bne.n	80003b0 <I2C_ApplicationEventCallback+0x74>
		commandCode = I2C_SlaveReceiveData(pI2CHandle->pI2Cx);
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4618      	mov	r0, r3
 80003a2:	f000 fa33 	bl	800080c <I2C_SlaveReceiveData>
 80003a6:	4603      	mov	r3, r0
 80003a8:	461a      	mov	r2, r3
 80003aa:	4b08      	ldr	r3, [pc, #32]	; (80003cc <I2C_ApplicationEventCallback+0x90>)
 80003ac:	701a      	strb	r2, [r3, #0]
}
 80003ae:	e008      	b.n	80003c2 <I2C_ApplicationEventCallback+0x86>
	else if(AppEv == I2C_ERROR_AF)
 80003b0:	78fb      	ldrb	r3, [r7, #3]
 80003b2:	2b05      	cmp	r3, #5
 80003b4:	d105      	bne.n	80003c2 <I2C_ApplicationEventCallback+0x86>
		commandCode = 0xFF;
 80003b6:	4b05      	ldr	r3, [pc, #20]	; (80003cc <I2C_ApplicationEventCallback+0x90>)
 80003b8:	22ff      	movs	r2, #255	; 0xff
 80003ba:	701a      	strb	r2, [r3, #0]
		Cnt = 0;
 80003bc:	4b05      	ldr	r3, [pc, #20]	; (80003d4 <I2C_ApplicationEventCallback+0x98>)
 80003be:	2200      	movs	r2, #0
 80003c0:	701a      	strb	r2, [r3, #0]
}
 80003c2:	bf00      	nop
 80003c4:	370c      	adds	r7, #12
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd90      	pop	{r4, r7, pc}
 80003ca:	bf00      	nop
 80003cc:	20000054 	.word	0x20000054
 80003d0:	20000000 	.word	0x20000000
 80003d4:	20000055 	.word	0x20000055

080003d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003d8:	480d      	ldr	r0, [pc, #52]	; (8000410 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003da:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80003dc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003e0:	480c      	ldr	r0, [pc, #48]	; (8000414 <LoopForever+0x6>)
  ldr r1, =_edata
 80003e2:	490d      	ldr	r1, [pc, #52]	; (8000418 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003e4:	4a0d      	ldr	r2, [pc, #52]	; (800041c <LoopForever+0xe>)
  movs r3, #0
 80003e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003e8:	e002      	b.n	80003f0 <LoopCopyDataInit>

080003ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003ee:	3304      	adds	r3, #4

080003f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003f4:	d3f9      	bcc.n	80003ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003f6:	4a0a      	ldr	r2, [pc, #40]	; (8000420 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003f8:	4c0a      	ldr	r4, [pc, #40]	; (8000424 <LoopForever+0x16>)
  movs r3, #0
 80003fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003fc:	e001      	b.n	8000402 <LoopFillZerobss>

080003fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000400:	3204      	adds	r2, #4

08000402 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000402:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000404:	d3fb      	bcc.n	80003fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000406:	f000 ff99 	bl	800133c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800040a:	f7ff ff63 	bl	80002d4 <main>

0800040e <LoopForever>:

LoopForever:
    b LoopForever
 800040e:	e7fe      	b.n	800040e <LoopForever>
  ldr   r0, =_estack
 8000410:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000414:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000418:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 800041c:	080013a4 	.word	0x080013a4
  ldr r2, =_sbss
 8000420:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 8000424:	20000080 	.word	0x20000080

08000428 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000428:	e7fe      	b.n	8000428 <ADC_IRQHandler>
	...

0800042c <I2C_PeripheralClockControl>:
 *
 *@Note					-
 *
 */
void I2C_PeripheralClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 800042c:	b480      	push	{r7}
 800042e:	b083      	sub	sp, #12
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
 8000434:	460b      	mov	r3, r1
 8000436:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000438:	78fb      	ldrb	r3, [r7, #3]
 800043a:	2b01      	cmp	r3, #1
 800043c:	d120      	bne.n	8000480 <I2C_PeripheralClockControl+0x54>
	{
		if(pI2Cx == I2C1)
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	4a22      	ldr	r2, [pc, #136]	; (80004cc <I2C_PeripheralClockControl+0xa0>)
 8000442:	4293      	cmp	r3, r2
 8000444:	d106      	bne.n	8000454 <I2C_PeripheralClockControl+0x28>
		{
			I2C1_PCLK_EN();
 8000446:	4b22      	ldr	r3, [pc, #136]	; (80004d0 <I2C_PeripheralClockControl+0xa4>)
 8000448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800044a:	4a21      	ldr	r2, [pc, #132]	; (80004d0 <I2C_PeripheralClockControl+0xa4>)
 800044c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000450:	6413      	str	r3, [r2, #64]	; 0x40
		else if(pI2Cx == I2C3)
		{
			I2C3_PCLK_DI();
		}
	}
}
 8000452:	e035      	b.n	80004c0 <I2C_PeripheralClockControl+0x94>
		else if(pI2Cx == I2C2)
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	4a1f      	ldr	r2, [pc, #124]	; (80004d4 <I2C_PeripheralClockControl+0xa8>)
 8000458:	4293      	cmp	r3, r2
 800045a:	d106      	bne.n	800046a <I2C_PeripheralClockControl+0x3e>
			I2C2_PCLK_EN();
 800045c:	4b1c      	ldr	r3, [pc, #112]	; (80004d0 <I2C_PeripheralClockControl+0xa4>)
 800045e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000460:	4a1b      	ldr	r2, [pc, #108]	; (80004d0 <I2C_PeripheralClockControl+0xa4>)
 8000462:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000466:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000468:	e02a      	b.n	80004c0 <I2C_PeripheralClockControl+0x94>
		else if(pI2Cx == I2C3)
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	4a1a      	ldr	r2, [pc, #104]	; (80004d8 <I2C_PeripheralClockControl+0xac>)
 800046e:	4293      	cmp	r3, r2
 8000470:	d126      	bne.n	80004c0 <I2C_PeripheralClockControl+0x94>
			I2C3_PCLK_EN();
 8000472:	4b17      	ldr	r3, [pc, #92]	; (80004d0 <I2C_PeripheralClockControl+0xa4>)
 8000474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000476:	4a16      	ldr	r2, [pc, #88]	; (80004d0 <I2C_PeripheralClockControl+0xa4>)
 8000478:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800047c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800047e:	e01f      	b.n	80004c0 <I2C_PeripheralClockControl+0x94>
		if(pI2Cx == I2C1)
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	4a12      	ldr	r2, [pc, #72]	; (80004cc <I2C_PeripheralClockControl+0xa0>)
 8000484:	4293      	cmp	r3, r2
 8000486:	d106      	bne.n	8000496 <I2C_PeripheralClockControl+0x6a>
			I2C1_PCLK_DI();
 8000488:	4b11      	ldr	r3, [pc, #68]	; (80004d0 <I2C_PeripheralClockControl+0xa4>)
 800048a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800048c:	4a10      	ldr	r2, [pc, #64]	; (80004d0 <I2C_PeripheralClockControl+0xa4>)
 800048e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000492:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000494:	e014      	b.n	80004c0 <I2C_PeripheralClockControl+0x94>
		else if(pI2Cx == I2C2)
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	4a0e      	ldr	r2, [pc, #56]	; (80004d4 <I2C_PeripheralClockControl+0xa8>)
 800049a:	4293      	cmp	r3, r2
 800049c:	d106      	bne.n	80004ac <I2C_PeripheralClockControl+0x80>
			I2C2_PCLK_DI();
 800049e:	4b0c      	ldr	r3, [pc, #48]	; (80004d0 <I2C_PeripheralClockControl+0xa4>)
 80004a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004a2:	4a0b      	ldr	r2, [pc, #44]	; (80004d0 <I2C_PeripheralClockControl+0xa4>)
 80004a4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80004a8:	6413      	str	r3, [r2, #64]	; 0x40
}
 80004aa:	e009      	b.n	80004c0 <I2C_PeripheralClockControl+0x94>
		else if(pI2Cx == I2C3)
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	4a0a      	ldr	r2, [pc, #40]	; (80004d8 <I2C_PeripheralClockControl+0xac>)
 80004b0:	4293      	cmp	r3, r2
 80004b2:	d105      	bne.n	80004c0 <I2C_PeripheralClockControl+0x94>
			I2C3_PCLK_DI();
 80004b4:	4b06      	ldr	r3, [pc, #24]	; (80004d0 <I2C_PeripheralClockControl+0xa4>)
 80004b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004b8:	4a05      	ldr	r2, [pc, #20]	; (80004d0 <I2C_PeripheralClockControl+0xa4>)
 80004ba:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80004be:	6413      	str	r3, [r2, #64]	; 0x40
}
 80004c0:	bf00      	nop
 80004c2:	370c      	adds	r7, #12
 80004c4:	46bd      	mov	sp, r7
 80004c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ca:	4770      	bx	lr
 80004cc:	40005400 	.word	0x40005400
 80004d0:	40023800 	.word	0x40023800
 80004d4:	40005800 	.word	0x40005800
 80004d8:	40005c00 	.word	0x40005c00

080004dc <RCC_GETPLLOutputClock>:

uint32_t RCC_GETPLLOutputClock(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
	return 160000000; // dummy value to be implemented
 80004e0:	4b02      	ldr	r3, [pc, #8]	; (80004ec <RCC_GETPLLOutputClock+0x10>)
}
 80004e2:	4618      	mov	r0, r3
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr
 80004ec:	09896800 	.word	0x09896800

080004f0 <RCC_GetPCLK1Value>:


uint32_t RCC_GetPCLK1Value(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b084      	sub	sp, #16
 80004f4:	af00      	add	r7, sp, #0
	uint32_t pclk1, SystemClk;

	uint8_t clkSrc, temp, ahbp, apb1;
	clkSrc = ((RCC->CFGR >> 2) & 0x03);
 80004f6:	4b26      	ldr	r3, [pc, #152]	; (8000590 <RCC_GetPCLK1Value+0xa0>)
 80004f8:	689b      	ldr	r3, [r3, #8]
 80004fa:	089b      	lsrs	r3, r3, #2
 80004fc:	b2db      	uxtb	r3, r3
 80004fe:	f003 0303 	and.w	r3, r3, #3
 8000502:	727b      	strb	r3, [r7, #9]

	if(clkSrc == 0)
 8000504:	7a7b      	ldrb	r3, [r7, #9]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d102      	bne.n	8000510 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 800050a:	4b22      	ldr	r3, [pc, #136]	; (8000594 <RCC_GetPCLK1Value+0xa4>)
 800050c:	60fb      	str	r3, [r7, #12]
 800050e:	e00b      	b.n	8000528 <RCC_GetPCLK1Value+0x38>
	}
	else if(clkSrc == 1)
 8000510:	7a7b      	ldrb	r3, [r7, #9]
 8000512:	2b01      	cmp	r3, #1
 8000514:	d102      	bne.n	800051c <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 8000516:	4b20      	ldr	r3, [pc, #128]	; (8000598 <RCC_GetPCLK1Value+0xa8>)
 8000518:	60fb      	str	r3, [r7, #12]
 800051a:	e005      	b.n	8000528 <RCC_GetPCLK1Value+0x38>
	}
	else if(clkSrc == 2)
 800051c:	7a7b      	ldrb	r3, [r7, #9]
 800051e:	2b02      	cmp	r3, #2
 8000520:	d102      	bne.n	8000528 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GETPLLOutputClock();
 8000522:	f7ff ffdb 	bl	80004dc <RCC_GETPLLOutputClock>
 8000526:	60f8      	str	r0, [r7, #12]
	}

	// ahbp
	temp = ((RCC->CFGR >> 4) & 0xF);
 8000528:	4b19      	ldr	r3, [pc, #100]	; (8000590 <RCC_GetPCLK1Value+0xa0>)
 800052a:	689b      	ldr	r3, [r3, #8]
 800052c:	091b      	lsrs	r3, r3, #4
 800052e:	b2db      	uxtb	r3, r3
 8000530:	f003 030f 	and.w	r3, r3, #15
 8000534:	723b      	strb	r3, [r7, #8]
	if(temp < 8)
 8000536:	7a3b      	ldrb	r3, [r7, #8]
 8000538:	2b07      	cmp	r3, #7
 800053a:	d802      	bhi.n	8000542 <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 800053c:	2301      	movs	r3, #1
 800053e:	72fb      	strb	r3, [r7, #11]
 8000540:	e005      	b.n	800054e <RCC_GetPCLK1Value+0x5e>
	}
	else
	{
		ahbp = AHB_PreScalar[temp - 8];
 8000542:	7a3b      	ldrb	r3, [r7, #8]
 8000544:	3b08      	subs	r3, #8
 8000546:	4a15      	ldr	r2, [pc, #84]	; (800059c <RCC_GetPCLK1Value+0xac>)
 8000548:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800054c:	72fb      	strb	r3, [r7, #11]
	}

	// apb1
	temp = ((RCC->CFGR >> 10) & 0x7);
 800054e:	4b10      	ldr	r3, [pc, #64]	; (8000590 <RCC_GetPCLK1Value+0xa0>)
 8000550:	689b      	ldr	r3, [r3, #8]
 8000552:	0a9b      	lsrs	r3, r3, #10
 8000554:	b2db      	uxtb	r3, r3
 8000556:	f003 0307 	and.w	r3, r3, #7
 800055a:	723b      	strb	r3, [r7, #8]
	if(temp < 4)
 800055c:	7a3b      	ldrb	r3, [r7, #8]
 800055e:	2b03      	cmp	r3, #3
 8000560:	d802      	bhi.n	8000568 <RCC_GetPCLK1Value+0x78>
	{
		apb1 = 1;
 8000562:	2301      	movs	r3, #1
 8000564:	72bb      	strb	r3, [r7, #10]
 8000566:	e005      	b.n	8000574 <RCC_GetPCLK1Value+0x84>
	}
	else
	{
		apb1 = APB1_PreScalar[temp - 4];
 8000568:	7a3b      	ldrb	r3, [r7, #8]
 800056a:	3b04      	subs	r3, #4
 800056c:	4a0c      	ldr	r2, [pc, #48]	; (80005a0 <RCC_GetPCLK1Value+0xb0>)
 800056e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000572:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = (SystemClk / ahbp) / apb1;
 8000574:	7afb      	ldrb	r3, [r7, #11]
 8000576:	68fa      	ldr	r2, [r7, #12]
 8000578:	fbb2 f2f3 	udiv	r2, r2, r3
 800057c:	7abb      	ldrb	r3, [r7, #10]
 800057e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000582:	607b      	str	r3, [r7, #4]

	return pclk1;
 8000584:	687b      	ldr	r3, [r7, #4]
}
 8000586:	4618      	mov	r0, r3
 8000588:	3710      	adds	r7, #16
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	40023800 	.word	0x40023800
 8000594:	00f42400 	.word	0x00f42400
 8000598:	007a1200 	.word	0x007a1200
 800059c:	20000020 	.word	0x20000020
 80005a0:	20000030 	.word	0x20000030

080005a4 <I2C_Init>:
 *
 *@Note					-
 *
 */
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
	// enable the clock for the i2cx peripheral
	I2C_PeripheralClockControl(pI2CHandle->pI2Cx, ENABLE);
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	2101      	movs	r1, #1
 80005b2:	4618      	mov	r0, r3
 80005b4:	f7ff ff3a 	bl	800042c <I2C_PeripheralClockControl>

	uint32_t tempreg = 0;
 80005b8:	2300      	movs	r3, #0
 80005ba:	60fb      	str	r3, [r7, #12]


	// configure the FREQ field of CR2
	tempreg |= RCC_GetPCLK1Value() / 1000000U;
 80005bc:	f7ff ff98 	bl	80004f0 <RCC_GetPCLK1Value>
 80005c0:	4603      	mov	r3, r0
 80005c2:	4a46      	ldr	r2, [pc, #280]	; (80006dc <I2C_Init+0x138>)
 80005c4:	fba2 2303 	umull	r2, r3, r2, r3
 80005c8:	0c9b      	lsrs	r3, r3, #18
 80005ca:	68fa      	ldr	r2, [r7, #12]
 80005cc:	4313      	orrs	r3, r2
 80005ce:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 = (tempreg & 0x3F);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	68fa      	ldr	r2, [r7, #12]
 80005d6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80005da:	605a      	str	r2, [r3, #4]

	// program the device own address
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	7a1b      	ldrb	r3, [r3, #8]
 80005e0:	005b      	lsls	r3, r3, #1
 80005e2:	461a      	mov	r2, r3
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	4313      	orrs	r3, r2
 80005e8:	60fb      	str	r3, [r7, #12]
	tempreg |= (1 << 14);
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005f0:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	68fa      	ldr	r2, [r7, #12]
 80005f8:	609a      	str	r2, [r3, #8]

	// CCR calculation
	uint16_t ccr_value = 0;
 80005fa:	2300      	movs	r3, #0
 80005fc:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 80005fe:	2300      	movs	r3, #0
 8000600:	60fb      	str	r3, [r7, #12]

	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	685b      	ldr	r3, [r3, #4]
 8000606:	4a36      	ldr	r2, [pc, #216]	; (80006e0 <I2C_Init+0x13c>)
 8000608:	4293      	cmp	r3, r2
 800060a:	d80f      	bhi.n	800062c <I2C_Init+0x88>
	{
		// mode is standard mode
		ccr_value = RCC_GetPCLK1Value() / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 800060c:	f7ff ff70 	bl	80004f0 <RCC_GetPCLK1Value>
 8000610:	4602      	mov	r2, r0
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	685b      	ldr	r3, [r3, #4]
 8000616:	005b      	lsls	r3, r3, #1
 8000618:	fbb2 f3f3 	udiv	r3, r2, r3
 800061c:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 800061e:	897b      	ldrh	r3, [r7, #10]
 8000620:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000624:	68fa      	ldr	r2, [r7, #12]
 8000626:	4313      	orrs	r3, r2
 8000628:	60fb      	str	r3, [r7, #12]
 800062a:	e02b      	b.n	8000684 <I2C_Init+0xe0>
	}
	else
	{
		// mode is fast mode
		tempreg |= (1 << 15);
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000632:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	895b      	ldrh	r3, [r3, #10]
 8000638:	039b      	lsls	r3, r3, #14
 800063a:	461a      	mov	r2, r3
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	4313      	orrs	r3, r2
 8000640:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	895b      	ldrh	r3, [r3, #10]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d10b      	bne.n	8000662 <I2C_Init+0xbe>
		{
			ccr_value = RCC_GetPCLK1Value() / (3 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 800064a:	f7ff ff51 	bl	80004f0 <RCC_GetPCLK1Value>
 800064e:	4601      	mov	r1, r0
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	685a      	ldr	r2, [r3, #4]
 8000654:	4613      	mov	r3, r2
 8000656:	005b      	lsls	r3, r3, #1
 8000658:	4413      	add	r3, r2
 800065a:	fbb1 f3f3 	udiv	r3, r1, r3
 800065e:	817b      	strh	r3, [r7, #10]
 8000660:	e00c      	b.n	800067c <I2C_Init+0xd8>
		}
		else
		{
			ccr_value = RCC_GetPCLK1Value() / (25 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000662:	f7ff ff45 	bl	80004f0 <RCC_GetPCLK1Value>
 8000666:	4601      	mov	r1, r0
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	685a      	ldr	r2, [r3, #4]
 800066c:	4613      	mov	r3, r2
 800066e:	009b      	lsls	r3, r3, #2
 8000670:	4413      	add	r3, r2
 8000672:	009a      	lsls	r2, r3, #2
 8000674:	4413      	add	r3, r2
 8000676:	fbb1 f3f3 	udiv	r3, r1, r3
 800067a:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= ccr_value;
 800067c:	897b      	ldrh	r3, [r7, #10]
 800067e:	68fa      	ldr	r2, [r7, #12]
 8000680:	4313      	orrs	r3, r2
 8000682:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	68fa      	ldr	r2, [r7, #12]
 800068a:	61da      	str	r2, [r3, #28]

	// TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	685b      	ldr	r3, [r3, #4]
 8000690:	4a13      	ldr	r2, [pc, #76]	; (80006e0 <I2C_Init+0x13c>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d809      	bhi.n	80006aa <I2C_Init+0x106>
	{
		// mode is standard mode
		tempreg = (RCC_GetPCLK1Value() / 1000000U) + 1;
 8000696:	f7ff ff2b 	bl	80004f0 <RCC_GetPCLK1Value>
 800069a:	4603      	mov	r3, r0
 800069c:	4a0f      	ldr	r2, [pc, #60]	; (80006dc <I2C_Init+0x138>)
 800069e:	fba2 2303 	umull	r2, r3, r2, r3
 80006a2:	0c9b      	lsrs	r3, r3, #18
 80006a4:	3301      	adds	r3, #1
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	e00d      	b.n	80006c6 <I2C_Init+0x122>
	}
	else
	{
		// mode is fast mode
		tempreg = ((RCC_GetPCLK1Value() * 300) / 1000000000U) + 1;
 80006aa:	f7ff ff21 	bl	80004f0 <RCC_GetPCLK1Value>
 80006ae:	4603      	mov	r3, r0
 80006b0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80006b4:	fb02 f303 	mul.w	r3, r2, r3
 80006b8:	0a5b      	lsrs	r3, r3, #9
 80006ba:	4a0a      	ldr	r2, [pc, #40]	; (80006e4 <I2C_Init+0x140>)
 80006bc:	fba2 2303 	umull	r2, r3, r2, r3
 80006c0:	09db      	lsrs	r3, r3, #7
 80006c2:	3301      	adds	r3, #1
 80006c4:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	68fa      	ldr	r2, [r7, #12]
 80006cc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80006d0:	621a      	str	r2, [r3, #32]


}
 80006d2:	bf00      	nop
 80006d4:	3710      	adds	r7, #16
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	431bde83 	.word	0x431bde83
 80006e0:	000186a0 	.word	0x000186a0
 80006e4:	00044b83 	.word	0x00044b83

080006e8 <I2C_generateStartCondition>:
		I2C_generateStopCondition(pI2CHandle->pI2Cx);


}
static void I2C_generateStartCondition(I2C_RegDef_t *pI2Cx)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_START);
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	601a      	str	r2, [r3, #0]
}
 80006fc:	bf00      	nop
 80006fe:	370c      	adds	r7, #12
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr

08000708 <I2C_ExecuteAddressPhaseWrite>:
static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t slaveAddr)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	460b      	mov	r3, r1
 8000712:	70fb      	strb	r3, [r7, #3]
	slaveAddr = slaveAddr << 1;
 8000714:	78fb      	ldrb	r3, [r7, #3]
 8000716:	005b      	lsls	r3, r3, #1
 8000718:	70fb      	strb	r3, [r7, #3]
	slaveAddr &= ~(1 << 0);
 800071a:	78fb      	ldrb	r3, [r7, #3]
 800071c:	f023 0301 	bic.w	r3, r3, #1
 8000720:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = slaveAddr;
 8000722:	78fa      	ldrb	r2, [r7, #3]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	611a      	str	r2, [r3, #16]
}
 8000728:	bf00      	nop
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr

08000734 <I2C_ExecuteAddressPhaseRead>:
static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t slaveAddr)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	460b      	mov	r3, r1
 800073e:	70fb      	strb	r3, [r7, #3]
	slaveAddr = slaveAddr << 1;
 8000740:	78fb      	ldrb	r3, [r7, #3]
 8000742:	005b      	lsls	r3, r3, #1
 8000744:	70fb      	strb	r3, [r7, #3]
	slaveAddr |= (1 << 0);
 8000746:	78fb      	ldrb	r3, [r7, #3]
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = slaveAddr;
 800074e:	78fa      	ldrb	r2, [r7, #3]
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	611a      	str	r2, [r3, #16]
}
 8000754:	bf00      	nop
 8000756:	370c      	adds	r7, #12
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr

08000760 <I2C_ClearADDRFlag>:
static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
	uint32_t dummyRead;
	// check for device mode
	if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL))
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	699b      	ldr	r3, [r3, #24]
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	2b00      	cmp	r3, #0
 8000774:	d01f      	beq.n	80007b6 <I2C_ClearADDRFlag+0x56>
	{
		// device is in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	7f1b      	ldrb	r3, [r3, #28]
 800077a:	2b01      	cmp	r3, #1
 800077c:	d112      	bne.n	80007a4 <I2C_ClearADDRFlag+0x44>
		{
			if(pI2CHandle->RxSize == 1)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	6a1b      	ldr	r3, [r3, #32]
 8000782:	2b01      	cmp	r3, #1
 8000784:	d11f      	bne.n	80007c6 <I2C_ClearADDRFlag+0x66>
			{
				// first disable the ack
				I2C_ManageAcking(pI2CHandle->pI2Cx, DISABLE);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	2100      	movs	r1, #0
 800078c:	4618      	mov	r0, r3
 800078e:	f000 f8eb 	bl	8000968 <I2C_ManageAcking>

				// clear the ADDR flag (read SR1, read SR2)
				dummyRead = pI2CHandle->pI2Cx->SR1;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	695b      	ldr	r3, [r3, #20]
 8000798:	60fb      	str	r3, [r7, #12]
				dummyRead = pI2CHandle->pI2Cx->SR2;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	60fb      	str	r3, [r7, #12]
		dummyRead = pI2CHandle->pI2Cx->SR2;
		(void)dummyRead;
	}


}
 80007a2:	e010      	b.n	80007c6 <I2C_ClearADDRFlag+0x66>
			dummyRead = pI2CHandle->pI2Cx->SR1;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	695b      	ldr	r3, [r3, #20]
 80007aa:	60fb      	str	r3, [r7, #12]
			dummyRead = pI2CHandle->pI2Cx->SR2;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	699b      	ldr	r3, [r3, #24]
 80007b2:	60fb      	str	r3, [r7, #12]
}
 80007b4:	e007      	b.n	80007c6 <I2C_ClearADDRFlag+0x66>
		dummyRead = pI2CHandle->pI2Cx->SR1;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	695b      	ldr	r3, [r3, #20]
 80007bc:	60fb      	str	r3, [r7, #12]
		dummyRead = pI2CHandle->pI2Cx->SR2;
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	699b      	ldr	r3, [r3, #24]
 80007c4:	60fb      	str	r3, [r7, #12]
}
 80007c6:	bf00      	nop
 80007c8:	3710      	adds	r7, #16
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}

080007ce <I2C_generateStopCondition>:
void I2C_generateStopCondition(I2C_RegDef_t *pI2Cx)
{
 80007ce:	b480      	push	{r7}
 80007d0:	b083      	sub	sp, #12
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	601a      	str	r2, [r3, #0]
}
 80007e2:	bf00      	nop
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr

080007ee <I2C_SlaveSendData>:

	return busystate;
}

void I2C_SlaveSendData(I2C_RegDef_t *pI2Cx, uint8_t data)
{
 80007ee:	b480      	push	{r7}
 80007f0:	b083      	sub	sp, #12
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	6078      	str	r0, [r7, #4]
 80007f6:	460b      	mov	r3, r1
 80007f8:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = data;
 80007fa:	78fa      	ldrb	r2, [r7, #3]
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	611a      	str	r2, [r3, #16]
}
 8000800:	bf00      	nop
 8000802:	370c      	adds	r7, #12
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr

0800080c <I2C_SlaveReceiveData>:

uint8_t I2C_SlaveReceiveData(I2C_RegDef_t *pI2Cx)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
	return (uint8_t)pI2Cx->DR;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	691b      	ldr	r3, [r3, #16]
 8000818:	b2db      	uxtb	r3, r3
}
 800081a:	4618      	mov	r0, r3
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
	...

08000828 <I2C_IRQInterruptConfig>:
 *
 *@Note					-
 *
 */
void I2C_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	460a      	mov	r2, r1
 8000832:	71fb      	strb	r3, [r7, #7]
 8000834:	4613      	mov	r3, r2
 8000836:	71bb      	strb	r3, [r7, #6]
	if(EnorDi == ENABLE)
 8000838:	79bb      	ldrb	r3, [r7, #6]
 800083a:	2b01      	cmp	r3, #1
 800083c:	d133      	bne.n	80008a6 <I2C_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31)
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	2b1f      	cmp	r3, #31
 8000842:	d80a      	bhi.n	800085a <I2C_IRQInterruptConfig+0x32>
		{
			// program ISER0 register
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000844:	4b35      	ldr	r3, [pc, #212]	; (800091c <I2C_IRQInterruptConfig+0xf4>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	79fa      	ldrb	r2, [r7, #7]
 800084a:	2101      	movs	r1, #1
 800084c:	fa01 f202 	lsl.w	r2, r1, r2
 8000850:	4611      	mov	r1, r2
 8000852:	4a32      	ldr	r2, [pc, #200]	; (800091c <I2C_IRQInterruptConfig+0xf4>)
 8000854:	430b      	orrs	r3, r1
 8000856:	6013      	str	r3, [r2, #0]
		{
			// program ISER2 register
			*NVIC_ICER1 |= (1 << (IRQNumber % 64));
		}
	}
}
 8000858:	e059      	b.n	800090e <I2C_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 31 && IRQNumber < 64)
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	2b1f      	cmp	r3, #31
 800085e:	d90f      	bls.n	8000880 <I2C_IRQInterruptConfig+0x58>
 8000860:	79fb      	ldrb	r3, [r7, #7]
 8000862:	2b3f      	cmp	r3, #63	; 0x3f
 8000864:	d80c      	bhi.n	8000880 <I2C_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 8000866:	4b2e      	ldr	r3, [pc, #184]	; (8000920 <I2C_IRQInterruptConfig+0xf8>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	79fa      	ldrb	r2, [r7, #7]
 800086c:	f002 021f 	and.w	r2, r2, #31
 8000870:	2101      	movs	r1, #1
 8000872:	fa01 f202 	lsl.w	r2, r1, r2
 8000876:	4611      	mov	r1, r2
 8000878:	4a29      	ldr	r2, [pc, #164]	; (8000920 <I2C_IRQInterruptConfig+0xf8>)
 800087a:	430b      	orrs	r3, r1
 800087c:	6013      	str	r3, [r2, #0]
 800087e:	e046      	b.n	800090e <I2C_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96)
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	2b3f      	cmp	r3, #63	; 0x3f
 8000884:	d943      	bls.n	800090e <I2C_IRQInterruptConfig+0xe6>
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	2b5f      	cmp	r3, #95	; 0x5f
 800088a:	d840      	bhi.n	800090e <I2C_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= (1 << (IRQNumber % 32));
 800088c:	4b25      	ldr	r3, [pc, #148]	; (8000924 <I2C_IRQInterruptConfig+0xfc>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	79fa      	ldrb	r2, [r7, #7]
 8000892:	f002 021f 	and.w	r2, r2, #31
 8000896:	2101      	movs	r1, #1
 8000898:	fa01 f202 	lsl.w	r2, r1, r2
 800089c:	4611      	mov	r1, r2
 800089e:	4a21      	ldr	r2, [pc, #132]	; (8000924 <I2C_IRQInterruptConfig+0xfc>)
 80008a0:	430b      	orrs	r3, r1
 80008a2:	6013      	str	r3, [r2, #0]
}
 80008a4:	e033      	b.n	800090e <I2C_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	2b1f      	cmp	r3, #31
 80008aa:	d80a      	bhi.n	80008c2 <I2C_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 80008ac:	4b1e      	ldr	r3, [pc, #120]	; (8000928 <I2C_IRQInterruptConfig+0x100>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	79fa      	ldrb	r2, [r7, #7]
 80008b2:	2101      	movs	r1, #1
 80008b4:	fa01 f202 	lsl.w	r2, r1, r2
 80008b8:	4611      	mov	r1, r2
 80008ba:	4a1b      	ldr	r2, [pc, #108]	; (8000928 <I2C_IRQInterruptConfig+0x100>)
 80008bc:	430b      	orrs	r3, r1
 80008be:	6013      	str	r3, [r2, #0]
}
 80008c0:	e025      	b.n	800090e <I2C_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 31 && IRQNumber < 64)
 80008c2:	79fb      	ldrb	r3, [r7, #7]
 80008c4:	2b1f      	cmp	r3, #31
 80008c6:	d90f      	bls.n	80008e8 <I2C_IRQInterruptConfig+0xc0>
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	2b3f      	cmp	r3, #63	; 0x3f
 80008cc:	d80c      	bhi.n	80008e8 <I2C_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 80008ce:	4b17      	ldr	r3, [pc, #92]	; (800092c <I2C_IRQInterruptConfig+0x104>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	79fa      	ldrb	r2, [r7, #7]
 80008d4:	f002 021f 	and.w	r2, r2, #31
 80008d8:	2101      	movs	r1, #1
 80008da:	fa01 f202 	lsl.w	r2, r1, r2
 80008de:	4611      	mov	r1, r2
 80008e0:	4a12      	ldr	r2, [pc, #72]	; (800092c <I2C_IRQInterruptConfig+0x104>)
 80008e2:	430b      	orrs	r3, r1
 80008e4:	6013      	str	r3, [r2, #0]
 80008e6:	e012      	b.n	800090e <I2C_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96)
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	2b3f      	cmp	r3, #63	; 0x3f
 80008ec:	d90f      	bls.n	800090e <I2C_IRQInterruptConfig+0xe6>
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	2b5f      	cmp	r3, #95	; 0x5f
 80008f2:	d80c      	bhi.n	800090e <I2C_IRQInterruptConfig+0xe6>
			*NVIC_ICER1 |= (1 << (IRQNumber % 64));
 80008f4:	4b0d      	ldr	r3, [pc, #52]	; (800092c <I2C_IRQInterruptConfig+0x104>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	79fa      	ldrb	r2, [r7, #7]
 80008fa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80008fe:	2101      	movs	r1, #1
 8000900:	fa01 f202 	lsl.w	r2, r1, r2
 8000904:	4611      	mov	r1, r2
 8000906:	4a09      	ldr	r2, [pc, #36]	; (800092c <I2C_IRQInterruptConfig+0x104>)
 8000908:	430b      	orrs	r3, r1
 800090a:	6013      	str	r3, [r2, #0]
}
 800090c:	e7ff      	b.n	800090e <I2C_IRQInterruptConfig+0xe6>
 800090e:	bf00      	nop
 8000910:	370c      	adds	r7, #12
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	e000e100 	.word	0xe000e100
 8000920:	e000e104 	.word	0xe000e104
 8000924:	e000e108 	.word	0xe000e108
 8000928:	e000e180 	.word	0xe000e180
 800092c:	e000e184 	.word	0xe000e184

08000930 <I2C_PeripheralControl>:
  *
  *@Note					-
  *
  */
 void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
 {
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	460b      	mov	r3, r1
 800093a:	70fb      	strb	r3, [r7, #3]
		if(EnorDi == ENABLE)
 800093c:	78fb      	ldrb	r3, [r7, #3]
 800093e:	2b01      	cmp	r3, #1
 8000940:	d106      	bne.n	8000950 <I2C_PeripheralControl+0x20>
		{
			pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	f043 0201 	orr.w	r2, r3, #1
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	601a      	str	r2, [r3, #0]
		}
		else
		{
			pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
		}
 }
 800094e:	e005      	b.n	800095c <I2C_PeripheralControl+0x2c>
			pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f023 0201 	bic.w	r2, r3, #1
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	601a      	str	r2, [r3, #0]
 }
 800095c:	bf00      	nop
 800095e:	370c      	adds	r7, #12
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr

08000968 <I2C_ManageAcking>:
  *
  *@Note					-
  *
  */
 void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
 {
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
 8000970:	460b      	mov	r3, r1
 8000972:	70fb      	strb	r3, [r7, #3]
	 if(EnorDi == I2C_ACK_ENABLE)
 8000974:	78fb      	ldrb	r3, [r7, #3]
 8000976:	2b01      	cmp	r3, #1
 8000978:	d106      	bne.n	8000988 <I2C_ManageAcking+0x20>
	 {
		 // enable the ack
		 pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	601a      	str	r2, [r3, #0]
	 {
		 // disable the ack
		 pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
	 }

 }
 8000986:	e005      	b.n	8000994 <I2C_ManageAcking+0x2c>
		 pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	601a      	str	r2, [r3, #0]
 }
 8000994:	bf00      	nop
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <I2C_EV_IRQHandling>:
  *
  * @Note              -  Interrupt handling for different I2C events (refer SR1)

  */
 void I2C_EV_IRQHandling(I2C_Handle_t *pI2CHandle)
 {
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b086      	sub	sp, #24
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]

 	//Interrupt handling for both master and slave mode of a device
	 uint32_t temp1, temp2, temp3;

	 temp1 = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITEVTEN);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	685b      	ldr	r3, [r3, #4]
 80009ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80009b2:	617b      	str	r3, [r7, #20]
	 temp2 = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITBUFEN);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	685b      	ldr	r3, [r3, #4]
 80009ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009be:	613b      	str	r3, [r7, #16]

	 temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_SB);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	695b      	ldr	r3, [r3, #20]
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	60fb      	str	r3, [r7, #12]

 	//1. Handle For interrupt generated by SB event
 	//	Note : SB flag is only applicable in Master mode
	 if(temp1 && temp3)
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d01b      	beq.n	8000a0a <I2C_EV_IRQHandling+0x6a>
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d018      	beq.n	8000a0a <I2C_EV_IRQHandling+0x6a>
	 {
		 // interrupt is generated because of SB event
		 // this block will not be executed in slave mode because for slave SB is always zero
		 // in this block lets execute the address phase
		 if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	7f1b      	ldrb	r3, [r3, #28]
 80009dc:	2b02      	cmp	r3, #2
 80009de:	d108      	bne.n	80009f2 <I2C_EV_IRQHandling+0x52>
		 {
			 I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx, pI2CHandle->DevAddr);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	7f5b      	ldrb	r3, [r3, #29]
 80009e8:	4619      	mov	r1, r3
 80009ea:	4610      	mov	r0, r2
 80009ec:	f7ff fe8c 	bl	8000708 <I2C_ExecuteAddressPhaseWrite>
 80009f0:	e00b      	b.n	8000a0a <I2C_EV_IRQHandling+0x6a>
		 }
		 else if (pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	7f1b      	ldrb	r3, [r3, #28]
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d107      	bne.n	8000a0a <I2C_EV_IRQHandling+0x6a>
		 {
			 I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx, pI2CHandle->DevAddr);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	7f5b      	ldrb	r3, [r3, #29]
 8000a02:	4619      	mov	r1, r3
 8000a04:	4610      	mov	r0, r2
 8000a06:	f7ff fe95 	bl	8000734 <I2C_ExecuteAddressPhaseRead>
		 }
	 }

	 temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_ADDR);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	695b      	ldr	r3, [r3, #20]
 8000a10:	f003 0302 	and.w	r3, r3, #2
 8000a14:	60fb      	str	r3, [r7, #12]
 	//2. Handle For interrupt generated by ADDR event
 	//Note : When master mode : Address is sent
 	//		 When Slave mode   : Address matched with own address
	 if(temp1 && temp3)
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d005      	beq.n	8000a28 <I2C_EV_IRQHandling+0x88>
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d002      	beq.n	8000a28 <I2C_EV_IRQHandling+0x88>
	 {
		 // interrupt is generated because of ADDR event
		 I2C_ClearADDRFlag(pI2CHandle);
 8000a22:	6878      	ldr	r0, [r7, #4]
 8000a24:	f7ff fe9c 	bl	8000760 <I2C_ClearADDRFlag>
	 }

	 temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_BTF);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	695b      	ldr	r3, [r3, #20]
 8000a2e:	f003 0304 	and.w	r3, r3, #4
 8000a32:	60fb      	str	r3, [r7, #12]
 	//3. Handle For interrupt generated by BTF(Byte Transfer Finished) event
	 if(temp1 && temp3)
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d022      	beq.n	8000a80 <I2C_EV_IRQHandling+0xe0>
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d01f      	beq.n	8000a80 <I2C_EV_IRQHandling+0xe0>
	 {
		 // interrupt is generated because of BTF event
		 if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	7f1b      	ldrb	r3, [r3, #28]
 8000a44:	2b02      	cmp	r3, #2
 8000a46:	d11b      	bne.n	8000a80 <I2C_EV_IRQHandling+0xe0>
		 {
			 // make sure that TXE is also set
			 if(pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_TxE))
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	695b      	ldr	r3, [r3, #20]
 8000a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d014      	beq.n	8000a80 <I2C_EV_IRQHandling+0xe0>
			 {
				 // BTF, TXE = 1 , close the transmission

				 if(pI2CHandle->TXLen == 0)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	695b      	ldr	r3, [r3, #20]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d110      	bne.n	8000a80 <I2C_EV_IRQHandling+0xe0>
				 {
					 // 1. generate the STOP condition
					 if(pI2CHandle->Sr == I2C_DISABLE_SR)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d104      	bne.n	8000a72 <I2C_EV_IRQHandling+0xd2>
						 I2C_generateStartCondition(pI2CHandle->pI2Cx);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff fe3b 	bl	80006e8 <I2C_generateStartCondition>

					 // 2. reset all the member elements of the handle structure.
					 I2C_CloseSendData(pI2CHandle);
 8000a72:	6878      	ldr	r0, [r7, #4]
 8000a74:	f000 f904 	bl	8000c80 <I2C_CloseSendData>

					 // 3. notify the application about the transmission complete
					 I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_TX_CMPLT);
 8000a78:	2100      	movs	r1, #0
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	f7ff fc5e 	bl	800033c <I2C_ApplicationEventCallback>
		 {
			 // nothing to do
		 }
	 }

	 temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_STOPF);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	695b      	ldr	r3, [r3, #20]
 8000a86:	f003 0310 	and.w	r3, r3, #16
 8000a8a:	60fb      	str	r3, [r7, #12]
 	//4. Handle For interrupt generated by STOPF event
 	// Note : Stop detection flag is applicable only slave mode . For master this flag will never be set
	 if(temp1 && temp3)
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d00c      	beq.n	8000aac <I2C_EV_IRQHandling+0x10c>
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d009      	beq.n	8000aac <I2C_EV_IRQHandling+0x10c>
	 {
		 // STOPF flag is set

		 // clear the STOP (i.e -> 1) read SR1 2) write to CR1)
		 pI2CHandle->pI2Cx->CR1 |= 0x0000;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	6812      	ldr	r2, [r2, #0]
 8000aa2:	601a      	str	r2, [r3, #0]

		 // notify the application that STOP is detected
		 I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_STOP);
 8000aa4:	2102      	movs	r1, #2
 8000aa6:	6878      	ldr	r0, [r7, #4]
 8000aa8:	f7ff fc48 	bl	800033c <I2C_ApplicationEventCallback>
	 }

	 temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_TxE);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	695b      	ldr	r3, [r3, #20]
 8000ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ab6:	60fb      	str	r3, [r7, #12]
 	//5. Handle For interrupt generated by TXE event
	 if(temp1 && temp2 && temp3)
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d01f      	beq.n	8000afe <I2C_EV_IRQHandling+0x15e>
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d01c      	beq.n	8000afe <I2C_EV_IRQHandling+0x15e>
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d019      	beq.n	8000afe <I2C_EV_IRQHandling+0x15e>
	 {
		 // check for device mode
		 if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL))
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	f003 0301 	and.w	r3, r3, #1
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d007      	beq.n	8000ae8 <I2C_EV_IRQHandling+0x148>
		 {
			 // TXE flag is set
			 // we have to do data transmission
			 if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	7f1b      	ldrb	r3, [r3, #28]
 8000adc:	2b02      	cmp	r3, #2
 8000ade:	d10e      	bne.n	8000afe <I2C_EV_IRQHandling+0x15e>
			 {
				 I2C_MasterHandleTXEInterrupt(pI2CHandle);
 8000ae0:	6878      	ldr	r0, [r7, #4]
 8000ae2:	f000 f839 	bl	8000b58 <I2C_MasterHandleTXEInterrupt>
 8000ae6:	e00a      	b.n	8000afe <I2C_EV_IRQHandling+0x15e>
		 }
		 else
		 {
			 //slave
			 // make sure that the slave is really in transmitter mode
			 if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_TRA))
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	699b      	ldr	r3, [r3, #24]
 8000aee:	f003 0304 	and.w	r3, r3, #4
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d003      	beq.n	8000afe <I2C_EV_IRQHandling+0x15e>
				 I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_DATA_REQ);
 8000af6:	2108      	movs	r1, #8
 8000af8:	6878      	ldr	r0, [r7, #4]
 8000afa:	f7ff fc1f 	bl	800033c <I2C_ApplicationEventCallback>
		 }

	 }

	 temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_RxNE);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	695b      	ldr	r3, [r3, #20]
 8000b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b08:	60fb      	str	r3, [r7, #12]
 	//6. Handle For interrupt generated by RXNE event
	 if(temp1 && temp2 && temp3)
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d01f      	beq.n	8000b50 <I2C_EV_IRQHandling+0x1b0>
 8000b10:	693b      	ldr	r3, [r7, #16]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d01c      	beq.n	8000b50 <I2C_EV_IRQHandling+0x1b0>
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d019      	beq.n	8000b50 <I2C_EV_IRQHandling+0x1b0>
	 {
		 // check for device mode
		 if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL))
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	699b      	ldr	r3, [r3, #24]
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d007      	beq.n	8000b3a <I2C_EV_IRQHandling+0x19a>
		 {
			 // the device is master

			 // RXNE flag is set
			 if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	7f1b      	ldrb	r3, [r3, #28]
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	d10e      	bne.n	8000b50 <I2C_EV_IRQHandling+0x1b0>
			 {
				 I2C_MasterHandleRXNEInterrupt(pI2CHandle);
 8000b32:	6878      	ldr	r0, [r7, #4]
 8000b34:	f000 f82e 	bl	8000b94 <I2C_MasterHandleRXNEInterrupt>
			 // make sure that the slave is really in receiver mode
			 if(!(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_TRA)))
				 I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_DATA_RCV);
		 }
	 }
 }
 8000b38:	e00a      	b.n	8000b50 <I2C_EV_IRQHandling+0x1b0>
			 if(!(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_TRA)))
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	f003 0304 	and.w	r3, r3, #4
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d103      	bne.n	8000b50 <I2C_EV_IRQHandling+0x1b0>
				 I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_DATA_RCV);
 8000b48:	2109      	movs	r1, #9
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f7ff fbf6 	bl	800033c <I2C_ApplicationEventCallback>
 }
 8000b50:	bf00      	nop
 8000b52:	3718      	adds	r7, #24
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <I2C_MasterHandleTXEInterrupt>:
 static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle)
 {
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
	 if(pI2CHandle->TXLen > 0)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	695b      	ldr	r3, [r3, #20]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d00f      	beq.n	8000b88 <I2C_MasterHandleTXEInterrupt+0x30>
	 {
		 // 1. load the data in to DR
		 pI2CHandle->pI2Cx->DR = *(pI2CHandle->pTxBuffer);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	781a      	ldrb	r2, [r3, #0]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	611a      	str	r2, [r3, #16]

		 // 2. decrement the TxLen
		 pI2CHandle->TXLen--;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	695b      	ldr	r3, [r3, #20]
 8000b78:	1e5a      	subs	r2, r3, #1
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	615a      	str	r2, [r3, #20]

		 // 3. increment the buffer address
		 pI2CHandle->pTxBuffer++;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	68db      	ldr	r3, [r3, #12]
 8000b82:	1c5a      	adds	r2, r3, #1
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	60da      	str	r2, [r3, #12]
	 }
 }
 8000b88:	bf00      	nop
 8000b8a:	370c      	adds	r7, #12
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <I2C_MasterHandleRXNEInterrupt>:
static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
	 // we have to do the data reception
	 if(pI2CHandle->RxSize == 1)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	6a1b      	ldr	r3, [r3, #32]
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d10b      	bne.n	8000bbc <I2C_MasterHandleRXNEInterrupt+0x28>
	 {
		 *pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	691a      	ldr	r2, [r3, #16]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	691b      	ldr	r3, [r3, #16]
 8000bae:	b2d2      	uxtb	r2, r2
 8000bb0:	701a      	strb	r2, [r3, #0]
		 pI2CHandle->RXLen--;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	699b      	ldr	r3, [r3, #24]
 8000bb6:	1e5a      	subs	r2, r3, #1
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	619a      	str	r2, [r3, #24]
	 }

	 if(pI2CHandle->RxSize > 1)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	6a1b      	ldr	r3, [r3, #32]
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d91a      	bls.n	8000bfa <I2C_MasterHandleRXNEInterrupt+0x66>
	 {
		 if(pI2CHandle->RXLen == 2)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	699b      	ldr	r3, [r3, #24]
 8000bc8:	2b02      	cmp	r3, #2
 8000bca:	d105      	bne.n	8000bd8 <I2C_MasterHandleRXNEInterrupt+0x44>
		 {
			 // clear the ack bit
			 I2C_ManageAcking(pI2CHandle->pI2Cx, DISABLE);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff fec8 	bl	8000968 <I2C_ManageAcking>
		 }
		 // read DR
		 *pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	691a      	ldr	r2, [r3, #16]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	691b      	ldr	r3, [r3, #16]
 8000be2:	b2d2      	uxtb	r2, r2
 8000be4:	701a      	strb	r2, [r3, #0]
		 pI2CHandle->RXLen--;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	699b      	ldr	r3, [r3, #24]
 8000bea:	1e5a      	subs	r2, r3, #1
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	619a      	str	r2, [r3, #24]
		 pI2CHandle->pRxBuffer++;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	691b      	ldr	r3, [r3, #16]
 8000bf4:	1c5a      	adds	r2, r3, #1
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	611a      	str	r2, [r3, #16]
	 }

	 if(pI2CHandle->RXLen == 0)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	699b      	ldr	r3, [r3, #24]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d110      	bne.n	8000c24 <I2C_MasterHandleRXNEInterrupt+0x90>
	 {
		 // close the I2C data reception and notify the application

		 // 1. generate the STOP condition
			if(pI2CHandle->Sr == I2C_DISABLE_SR)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d104      	bne.n	8000c16 <I2C_MasterHandleRXNEInterrupt+0x82>
				I2C_generateStopCondition(pI2CHandle->pI2Cx);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff fddc 	bl	80007ce <I2C_generateStopCondition>

		 // 2. close the I2C rx
			I2C_closeReceiveData(pI2CHandle);
 8000c16:	6878      	ldr	r0, [r7, #4]
 8000c18:	f000 f808 	bl	8000c2c <I2C_closeReceiveData>

		 // 3. Notify the application
			I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_RX_CMPLT);
 8000c1c:	2101      	movs	r1, #1
 8000c1e:	6878      	ldr	r0, [r7, #4]
 8000c20:	f7ff fb8c 	bl	800033c <I2C_ApplicationEventCallback>
	 }
}
 8000c24:	bf00      	nop
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <I2C_closeReceiveData>:

void I2C_closeReceiveData(I2C_Handle_t *pI2CHandle)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
	// Implement the code to disable ITBUFEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	685a      	ldr	r2, [r3, #4]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000c42:	605a      	str	r2, [r3, #4]

	// Implement the code to disable ITEVFEN Control bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	685a      	ldr	r2, [r3, #4]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000c52:	605a      	str	r2, [r3, #4]

	pI2CHandle->TxRxState = I2C_READY;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2200      	movs	r2, #0
 8000c58:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pRxBuffer = NULL;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	611a      	str	r2, [r3, #16]
	pI2CHandle->RXLen = 0;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2200      	movs	r2, #0
 8000c64:	619a      	str	r2, [r3, #24]
	pI2CHandle->RxSize = 0;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2200      	movs	r2, #0
 8000c6a:	621a      	str	r2, [r3, #32]
	I2C_ManageAcking(pI2CHandle->pI2Cx, ENABLE);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	2101      	movs	r1, #1
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff fe78 	bl	8000968 <I2C_ManageAcking>
}
 8000c78:	bf00      	nop
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <I2C_CloseSendData>:

void I2C_CloseSendData(I2C_Handle_t *pI2CHandle)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
	// Implement the code to disable ITBUFEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	685a      	ldr	r2, [r3, #4]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000c96:	605a      	str	r2, [r3, #4]

	// Implement the code to disable ITEVFEN Control bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	685a      	ldr	r2, [r3, #4]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000ca6:	605a      	str	r2, [r3, #4]

	pI2CHandle->TxRxState = I2C_READY;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2200      	movs	r2, #0
 8000cac:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pTxBuffer = NULL;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	60da      	str	r2, [r3, #12]
	pI2CHandle->TXLen = 0;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	615a      	str	r2, [r3, #20]
}
 8000cba:	bf00      	nop
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <I2C_ER_IRQHandling>:
 						#define I2C_ERROR_OVR   6
 						#define I2C_ERROR_TIMEOUT 7

  */
 void I2C_ER_IRQHandling(I2C_Handle_t *pI2CHandle)
 {
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b084      	sub	sp, #16
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
		uint32_t temp1,temp2;

	    //Know the status of  ITERREN control bit in the CR2
		temp2 = (pI2CHandle->pI2Cx->CR2) & ( 1 << I2C_CR2_ITERREN);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cd8:	60fb      	str	r3, [r7, #12]


	/***********************Check for Bus error************************************/
		temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1<< I2C_SR1_BERR);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	695b      	ldr	r3, [r3, #20]
 8000ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ce4:	60bb      	str	r3, [r7, #8]
		if(temp1  && temp2 )
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d00e      	beq.n	8000d0a <I2C_ER_IRQHandling+0x44>
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d00b      	beq.n	8000d0a <I2C_ER_IRQHandling+0x44>
		{
			//This is Bus error

			//Implement the code to clear the buss error flag
			pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_BERR);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	695a      	ldr	r2, [r3, #20]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000d00:	615a      	str	r2, [r3, #20]

			//Implement the code to notify the application about the error
		   I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_BERR);
 8000d02:	2103      	movs	r1, #3
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f7ff fb19 	bl	800033c <I2C_ApplicationEventCallback>
		}

	/***********************Check for arbitration lost error************************************/
		temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_ARLO );
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	695b      	ldr	r3, [r3, #20]
 8000d10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d14:	60bb      	str	r3, [r7, #8]
		if(temp1  && temp2)
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d00e      	beq.n	8000d3a <I2C_ER_IRQHandling+0x74>
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d00b      	beq.n	8000d3a <I2C_ER_IRQHandling+0x74>
		{
			//This is arbitration lost error

			//Implement the code to clear the arbitration lost error flag
			pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_ARLO);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	695a      	ldr	r2, [r3, #20]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000d30:	615a      	str	r2, [r3, #20]

			//Implement the code to notify the application about the error
			I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_ARLO);
 8000d32:	2104      	movs	r1, #4
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	f7ff fb01 	bl	800033c <I2C_ApplicationEventCallback>
		}

	/***********************Check for ACK failure  error************************************/

		temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_AF);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	695b      	ldr	r3, [r3, #20]
 8000d40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d44:	60bb      	str	r3, [r7, #8]
		if(temp1  && temp2)
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d00e      	beq.n	8000d6a <I2C_ER_IRQHandling+0xa4>
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d00b      	beq.n	8000d6a <I2C_ER_IRQHandling+0xa4>
		{
			//This is ACK failure error

		    //Implement the code to clear the ACK failure error flag
			pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_AF);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	695a      	ldr	r2, [r3, #20]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d60:	615a      	str	r2, [r3, #20]

			//Implement the code to notify the application about the error
			I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_AF);
 8000d62:	2105      	movs	r1, #5
 8000d64:	6878      	ldr	r0, [r7, #4]
 8000d66:	f7ff fae9 	bl	800033c <I2C_ApplicationEventCallback>
		}

	/***********************Check for Overrun/underrun error************************************/
		temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_OVR);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	695b      	ldr	r3, [r3, #20]
 8000d70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d74:	60bb      	str	r3, [r7, #8]
		if(temp1  && temp2)
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d00e      	beq.n	8000d9a <I2C_ER_IRQHandling+0xd4>
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d00b      	beq.n	8000d9a <I2C_ER_IRQHandling+0xd4>
		{
			//This is Overrun/underrun

		    //Implement the code to clear the Overrun/underrun error flag
			pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_OVR);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	695a      	ldr	r2, [r3, #20]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000d90:	615a      	str	r2, [r3, #20]

			//Implement the code to notify the application about the error
			I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_OVR);
 8000d92:	2106      	movs	r1, #6
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	f7ff fad1 	bl	800033c <I2C_ApplicationEventCallback>
		}

	/***********************Check for Time out error************************************/
		temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_TIMEOUT);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	695b      	ldr	r3, [r3, #20]
 8000da0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000da4:	60bb      	str	r3, [r7, #8]
		if(temp1  && temp2)
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d00e      	beq.n	8000dca <I2C_ER_IRQHandling+0x104>
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d00b      	beq.n	8000dca <I2C_ER_IRQHandling+0x104>
		{
			//This is Time out error

		    //Implement the code to clear the Time out error flag
			pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_TIMEOUT);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	695a      	ldr	r2, [r3, #20]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000dc0:	615a      	str	r2, [r3, #20]

			//Implement the code to notify the application about the error
			I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_TIMEOUT);
 8000dc2:	2107      	movs	r1, #7
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f7ff fab9 	bl	800033c <I2C_ApplicationEventCallback>
		}
 }
 8000dca:	bf00      	nop
 8000dcc:	3710      	adds	r7, #16
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <I2C_SlaveEnableDisableCallbackEvents>:

 }


 void I2C_SlaveEnableDisableCallbackEvents(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
 {
 8000dd2:	b480      	push	{r7}
 8000dd4:	b083      	sub	sp, #12
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
 8000dda:	460b      	mov	r3, r1
 8000ddc:	70fb      	strb	r3, [r7, #3]
	 if(EnorDi == ENABLE)
 8000dde:	78fb      	ldrb	r3, [r7, #3]
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d112      	bne.n	8000e0a <I2C_SlaveEnableDisableCallbackEvents+0x38>
	 {
		 pI2Cx->CR2 |= (1 << I2C_CR2_ITEVTEN);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	605a      	str	r2, [r3, #4]
		 pI2Cx->CR2 |= (1 << I2C_CR2_ITBUFEN);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	605a      	str	r2, [r3, #4]
		 pI2Cx->CR2 |= (1 << I2C_CR2_ITERREN);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	605a      	str	r2, [r3, #4]
	 {
		 pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
		 pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
		 pI2Cx->CR2 &= ~(1 << I2C_CR2_ITERREN);
	 }
 }
 8000e08:	e011      	b.n	8000e2e <I2C_SlaveEnableDisableCallbackEvents+0x5c>
		 pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	605a      	str	r2, [r3, #4]
		 pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	605a      	str	r2, [r3, #4]
		 pI2Cx->CR2 &= ~(1 << I2C_CR2_ITERREN);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	605a      	str	r2, [r3, #4]
 }
 8000e2e:	bf00      	nop
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
	...

08000e3c <GPIO_PeripheralClockControl>:
 *
 *@Note					- none
 *
 */
void GPIO_PeripheralClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	460b      	mov	r3, r1
 8000e46:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000e48:	78fb      	ldrb	r3, [r7, #3]
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d162      	bne.n	8000f14 <GPIO_PeripheralClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a64      	ldr	r2, [pc, #400]	; (8000fe4 <GPIO_PeripheralClockControl+0x1a8>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d106      	bne.n	8000e64 <GPIO_PeripheralClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000e56:	4b64      	ldr	r3, [pc, #400]	; (8000fe8 <GPIO_PeripheralClockControl+0x1ac>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	4a63      	ldr	r2, [pc, #396]	; (8000fe8 <GPIO_PeripheralClockControl+0x1ac>)
 8000e5c:	f043 0301 	orr.w	r3, r3, #1
 8000e60:	6313      	str	r3, [r2, #48]	; 0x30
		else if(pGPIOx == GPIOI)
		{
			GPIOI_PCLK_DI();
		}
	}
}
 8000e62:	e0b9      	b.n	8000fd8 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	4a61      	ldr	r2, [pc, #388]	; (8000fec <GPIO_PeripheralClockControl+0x1b0>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d106      	bne.n	8000e7a <GPIO_PeripheralClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000e6c:	4b5e      	ldr	r3, [pc, #376]	; (8000fe8 <GPIO_PeripheralClockControl+0x1ac>)
 8000e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e70:	4a5d      	ldr	r2, [pc, #372]	; (8000fe8 <GPIO_PeripheralClockControl+0x1ac>)
 8000e72:	f043 0302 	orr.w	r3, r3, #2
 8000e76:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000e78:	e0ae      	b.n	8000fd8 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a5c      	ldr	r2, [pc, #368]	; (8000ff0 <GPIO_PeripheralClockControl+0x1b4>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d106      	bne.n	8000e90 <GPIO_PeripheralClockControl+0x54>
			GPIOC_PCLK_EN();
 8000e82:	4b59      	ldr	r3, [pc, #356]	; (8000fe8 <GPIO_PeripheralClockControl+0x1ac>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	4a58      	ldr	r2, [pc, #352]	; (8000fe8 <GPIO_PeripheralClockControl+0x1ac>)
 8000e88:	f043 0304 	orr.w	r3, r3, #4
 8000e8c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000e8e:	e0a3      	b.n	8000fd8 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	4a58      	ldr	r2, [pc, #352]	; (8000ff4 <GPIO_PeripheralClockControl+0x1b8>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d106      	bne.n	8000ea6 <GPIO_PeripheralClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000e98:	4b53      	ldr	r3, [pc, #332]	; (8000fe8 <GPIO_PeripheralClockControl+0x1ac>)
 8000e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9c:	4a52      	ldr	r2, [pc, #328]	; (8000fe8 <GPIO_PeripheralClockControl+0x1ac>)
 8000e9e:	f043 0308 	orr.w	r3, r3, #8
 8000ea2:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ea4:	e098      	b.n	8000fd8 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a53      	ldr	r2, [pc, #332]	; (8000ff8 <GPIO_PeripheralClockControl+0x1bc>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d106      	bne.n	8000ebc <GPIO_PeripheralClockControl+0x80>
			GPIOE_PCLK_EN();
 8000eae:	4b4e      	ldr	r3, [pc, #312]	; (8000fe8 <GPIO_PeripheralClockControl+0x1ac>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	4a4d      	ldr	r2, [pc, #308]	; (8000fe8 <GPIO_PeripheralClockControl+0x1ac>)
 8000eb4:	f043 0310 	orr.w	r3, r3, #16
 8000eb8:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000eba:	e08d      	b.n	8000fd8 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	4a4f      	ldr	r2, [pc, #316]	; (8000ffc <GPIO_PeripheralClockControl+0x1c0>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d106      	bne.n	8000ed2 <GPIO_PeripheralClockControl+0x96>
			GPIOF_PCLK_EN();
 8000ec4:	4b48      	ldr	r3, [pc, #288]	; (8000fe8 <GPIO_PeripheralClockControl+0x1ac>)
 8000ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec8:	4a47      	ldr	r2, [pc, #284]	; (8000fe8 <GPIO_PeripheralClockControl+0x1ac>)
 8000eca:	f043 0320 	orr.w	r3, r3, #32
 8000ece:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ed0:	e082      	b.n	8000fd8 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a4a      	ldr	r2, [pc, #296]	; (8001000 <GPIO_PeripheralClockControl+0x1c4>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d106      	bne.n	8000ee8 <GPIO_PeripheralClockControl+0xac>
			GPIOG_PCLK_EN();
 8000eda:	4b43      	ldr	r3, [pc, #268]	; (8000fe8 <GPIO_PeripheralClockControl+0x1ac>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	4a42      	ldr	r2, [pc, #264]	; (8000fe8 <GPIO_PeripheralClockControl+0x1ac>)
 8000ee0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ee4:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ee6:	e077      	b.n	8000fd8 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	4a46      	ldr	r2, [pc, #280]	; (8001004 <GPIO_PeripheralClockControl+0x1c8>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d106      	bne.n	8000efe <GPIO_PeripheralClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000ef0:	4b3d      	ldr	r3, [pc, #244]	; (8000fe8 <GPIO_PeripheralClockControl+0x1ac>)
 8000ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef4:	4a3c      	ldr	r2, [pc, #240]	; (8000fe8 <GPIO_PeripheralClockControl+0x1ac>)
 8000ef6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000efa:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000efc:	e06c      	b.n	8000fd8 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a41      	ldr	r2, [pc, #260]	; (8001008 <GPIO_PeripheralClockControl+0x1cc>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d168      	bne.n	8000fd8 <GPIO_PeripheralClockControl+0x19c>
			GPIOI_PCLK_EN();
 8000f06:	4b38      	ldr	r3, [pc, #224]	; (8000fe8 <GPIO_PeripheralClockControl+0x1ac>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	4a37      	ldr	r2, [pc, #220]	; (8000fe8 <GPIO_PeripheralClockControl+0x1ac>)
 8000f0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f10:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f12:	e061      	b.n	8000fd8 <GPIO_PeripheralClockControl+0x19c>
		if(pGPIOx == GPIOA)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	4a33      	ldr	r2, [pc, #204]	; (8000fe4 <GPIO_PeripheralClockControl+0x1a8>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d106      	bne.n	8000f2a <GPIO_PeripheralClockControl+0xee>
			GPIOA_PCLK_DI();
 8000f1c:	4b32      	ldr	r3, [pc, #200]	; (8000fe8 <GPIO_PeripheralClockControl+0x1ac>)
 8000f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f20:	4a31      	ldr	r2, [pc, #196]	; (8000fe8 <GPIO_PeripheralClockControl+0x1ac>)
 8000f22:	f023 0301 	bic.w	r3, r3, #1
 8000f26:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f28:	e056      	b.n	8000fd8 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a2f      	ldr	r2, [pc, #188]	; (8000fec <GPIO_PeripheralClockControl+0x1b0>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d106      	bne.n	8000f40 <GPIO_PeripheralClockControl+0x104>
			GPIOB_PCLK_DI();
 8000f32:	4b2d      	ldr	r3, [pc, #180]	; (8000fe8 <GPIO_PeripheralClockControl+0x1ac>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	4a2c      	ldr	r2, [pc, #176]	; (8000fe8 <GPIO_PeripheralClockControl+0x1ac>)
 8000f38:	f023 0302 	bic.w	r3, r3, #2
 8000f3c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f3e:	e04b      	b.n	8000fd8 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4a2b      	ldr	r2, [pc, #172]	; (8000ff0 <GPIO_PeripheralClockControl+0x1b4>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d106      	bne.n	8000f56 <GPIO_PeripheralClockControl+0x11a>
			GPIOC_PCLK_DI();
 8000f48:	4b27      	ldr	r3, [pc, #156]	; (8000fe8 <GPIO_PeripheralClockControl+0x1ac>)
 8000f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4c:	4a26      	ldr	r2, [pc, #152]	; (8000fe8 <GPIO_PeripheralClockControl+0x1ac>)
 8000f4e:	f023 0304 	bic.w	r3, r3, #4
 8000f52:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f54:	e040      	b.n	8000fd8 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a26      	ldr	r2, [pc, #152]	; (8000ff4 <GPIO_PeripheralClockControl+0x1b8>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d106      	bne.n	8000f6c <GPIO_PeripheralClockControl+0x130>
			GPIOD_PCLK_DI();
 8000f5e:	4b22      	ldr	r3, [pc, #136]	; (8000fe8 <GPIO_PeripheralClockControl+0x1ac>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	4a21      	ldr	r2, [pc, #132]	; (8000fe8 <GPIO_PeripheralClockControl+0x1ac>)
 8000f64:	f023 0308 	bic.w	r3, r3, #8
 8000f68:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f6a:	e035      	b.n	8000fd8 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	4a22      	ldr	r2, [pc, #136]	; (8000ff8 <GPIO_PeripheralClockControl+0x1bc>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d106      	bne.n	8000f82 <GPIO_PeripheralClockControl+0x146>
			GPIOE_PCLK_DI();
 8000f74:	4b1c      	ldr	r3, [pc, #112]	; (8000fe8 <GPIO_PeripheralClockControl+0x1ac>)
 8000f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f78:	4a1b      	ldr	r2, [pc, #108]	; (8000fe8 <GPIO_PeripheralClockControl+0x1ac>)
 8000f7a:	f023 0310 	bic.w	r3, r3, #16
 8000f7e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f80:	e02a      	b.n	8000fd8 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a1d      	ldr	r2, [pc, #116]	; (8000ffc <GPIO_PeripheralClockControl+0x1c0>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d106      	bne.n	8000f98 <GPIO_PeripheralClockControl+0x15c>
			GPIOF_PCLK_DI();
 8000f8a:	4b17      	ldr	r3, [pc, #92]	; (8000fe8 <GPIO_PeripheralClockControl+0x1ac>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	4a16      	ldr	r2, [pc, #88]	; (8000fe8 <GPIO_PeripheralClockControl+0x1ac>)
 8000f90:	f023 0320 	bic.w	r3, r3, #32
 8000f94:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f96:	e01f      	b.n	8000fd8 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4a19      	ldr	r2, [pc, #100]	; (8001000 <GPIO_PeripheralClockControl+0x1c4>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d106      	bne.n	8000fae <GPIO_PeripheralClockControl+0x172>
			GPIOG_PCLK_DI();
 8000fa0:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <GPIO_PeripheralClockControl+0x1ac>)
 8000fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa4:	4a10      	ldr	r2, [pc, #64]	; (8000fe8 <GPIO_PeripheralClockControl+0x1ac>)
 8000fa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000faa:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000fac:	e014      	b.n	8000fd8 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a14      	ldr	r2, [pc, #80]	; (8001004 <GPIO_PeripheralClockControl+0x1c8>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d106      	bne.n	8000fc4 <GPIO_PeripheralClockControl+0x188>
			GPIOH_PCLK_DI();
 8000fb6:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <GPIO_PeripheralClockControl+0x1ac>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4a0b      	ldr	r2, [pc, #44]	; (8000fe8 <GPIO_PeripheralClockControl+0x1ac>)
 8000fbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000fc2:	e009      	b.n	8000fd8 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4a10      	ldr	r2, [pc, #64]	; (8001008 <GPIO_PeripheralClockControl+0x1cc>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d105      	bne.n	8000fd8 <GPIO_PeripheralClockControl+0x19c>
			GPIOI_PCLK_DI();
 8000fcc:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <GPIO_PeripheralClockControl+0x1ac>)
 8000fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd0:	4a05      	ldr	r2, [pc, #20]	; (8000fe8 <GPIO_PeripheralClockControl+0x1ac>)
 8000fd2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fd6:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	40020000 	.word	0x40020000
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	40020400 	.word	0x40020400
 8000ff0:	40020800 	.word	0x40020800
 8000ff4:	40020c00 	.word	0x40020c00
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	40021400 	.word	0x40021400
 8001000:	40021800 	.word	0x40021800
 8001004:	40021c00 	.word	0x40021c00
 8001008:	40022000 	.word	0x40022000

0800100c <GPIO_Init>:

/*
 * Init and De-init
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0; // temp register
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]

	// enable the peripheral clock
	GPIO_PeripheralClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2101      	movs	r1, #1
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff ff0c 	bl	8000e3c <GPIO_PeripheralClockControl>

	// 1. configure the mode of gpio pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	795b      	ldrb	r3, [r3, #5]
 8001028:	2b03      	cmp	r3, #3
 800102a:	d820      	bhi.n	800106e <GPIO_Init+0x62>
	{
		// the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	795b      	ldrb	r3, [r3, #5]
 8001030:	461a      	mov	r2, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	791b      	ldrb	r3, [r3, #4]
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clear
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	791b      	ldrb	r3, [r3, #4]
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	2103      	movs	r1, #3
 800104c:	fa01 f303 	lsl.w	r3, r1, r3
 8001050:	43db      	mvns	r3, r3
 8001052:	4619      	mov	r1, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	400a      	ands	r2, r1
 800105a:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;	// setting
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	6819      	ldr	r1, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	697a      	ldr	r2, [r7, #20]
 8001068:	430a      	orrs	r2, r1
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	e0c1      	b.n	80011f2 <GPIO_Init+0x1e6>

	}
	else
	{
		// this part will code later (interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	795b      	ldrb	r3, [r3, #5]
 8001072:	2b04      	cmp	r3, #4
 8001074:	d117      	bne.n	80010a6 <GPIO_Init+0x9a>
		{
			// 1. configure the FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001076:	4b47      	ldr	r3, [pc, #284]	; (8001194 <GPIO_Init+0x188>)
 8001078:	68db      	ldr	r3, [r3, #12]
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	7912      	ldrb	r2, [r2, #4]
 800107e:	4611      	mov	r1, r2
 8001080:	2201      	movs	r2, #1
 8001082:	408a      	lsls	r2, r1
 8001084:	4611      	mov	r1, r2
 8001086:	4a43      	ldr	r2, [pc, #268]	; (8001194 <GPIO_Init+0x188>)
 8001088:	430b      	orrs	r3, r1
 800108a:	60d3      	str	r3, [r2, #12]
			// Clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800108c:	4b41      	ldr	r3, [pc, #260]	; (8001194 <GPIO_Init+0x188>)
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	687a      	ldr	r2, [r7, #4]
 8001092:	7912      	ldrb	r2, [r2, #4]
 8001094:	4611      	mov	r1, r2
 8001096:	2201      	movs	r2, #1
 8001098:	408a      	lsls	r2, r1
 800109a:	43d2      	mvns	r2, r2
 800109c:	4611      	mov	r1, r2
 800109e:	4a3d      	ldr	r2, [pc, #244]	; (8001194 <GPIO_Init+0x188>)
 80010a0:	400b      	ands	r3, r1
 80010a2:	6093      	str	r3, [r2, #8]
 80010a4:	e035      	b.n	8001112 <GPIO_Init+0x106>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	795b      	ldrb	r3, [r3, #5]
 80010aa:	2b05      	cmp	r3, #5
 80010ac:	d117      	bne.n	80010de <GPIO_Init+0xd2>
		{
			// 1. configure the RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80010ae:	4b39      	ldr	r3, [pc, #228]	; (8001194 <GPIO_Init+0x188>)
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	7912      	ldrb	r2, [r2, #4]
 80010b6:	4611      	mov	r1, r2
 80010b8:	2201      	movs	r2, #1
 80010ba:	408a      	lsls	r2, r1
 80010bc:	4611      	mov	r1, r2
 80010be:	4a35      	ldr	r2, [pc, #212]	; (8001194 <GPIO_Init+0x188>)
 80010c0:	430b      	orrs	r3, r1
 80010c2:	6093      	str	r3, [r2, #8]
			// Clear the corresponding FTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80010c4:	4b33      	ldr	r3, [pc, #204]	; (8001194 <GPIO_Init+0x188>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	7912      	ldrb	r2, [r2, #4]
 80010cc:	4611      	mov	r1, r2
 80010ce:	2201      	movs	r2, #1
 80010d0:	408a      	lsls	r2, r1
 80010d2:	43d2      	mvns	r2, r2
 80010d4:	4611      	mov	r1, r2
 80010d6:	4a2f      	ldr	r2, [pc, #188]	; (8001194 <GPIO_Init+0x188>)
 80010d8:	400b      	ands	r3, r1
 80010da:	60d3      	str	r3, [r2, #12]
 80010dc:	e019      	b.n	8001112 <GPIO_Init+0x106>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	795b      	ldrb	r3, [r3, #5]
 80010e2:	2b06      	cmp	r3, #6
 80010e4:	d115      	bne.n	8001112 <GPIO_Init+0x106>
		{
			// 1. configure both FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80010e6:	4b2b      	ldr	r3, [pc, #172]	; (8001194 <GPIO_Init+0x188>)
 80010e8:	68db      	ldr	r3, [r3, #12]
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	7912      	ldrb	r2, [r2, #4]
 80010ee:	4611      	mov	r1, r2
 80010f0:	2201      	movs	r2, #1
 80010f2:	408a      	lsls	r2, r1
 80010f4:	4611      	mov	r1, r2
 80010f6:	4a27      	ldr	r2, [pc, #156]	; (8001194 <GPIO_Init+0x188>)
 80010f8:	430b      	orrs	r3, r1
 80010fa:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80010fc:	4b25      	ldr	r3, [pc, #148]	; (8001194 <GPIO_Init+0x188>)
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	7912      	ldrb	r2, [r2, #4]
 8001104:	4611      	mov	r1, r2
 8001106:	2201      	movs	r2, #1
 8001108:	408a      	lsls	r2, r1
 800110a:	4611      	mov	r1, r2
 800110c:	4a21      	ldr	r2, [pc, #132]	; (8001194 <GPIO_Init+0x188>)
 800110e:	430b      	orrs	r3, r1
 8001110:	6093      	str	r3, [r2, #8]
		}

		// 2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	791b      	ldrb	r3, [r3, #4]
 8001116:	089b      	lsrs	r3, r3, #2
 8001118:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	791b      	ldrb	r3, [r3, #4]
 800111e:	f003 0303 	and.w	r3, r3, #3
 8001122:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a1b      	ldr	r2, [pc, #108]	; (8001198 <GPIO_Init+0x18c>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d044      	beq.n	80011b8 <GPIO_Init+0x1ac>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a1a      	ldr	r2, [pc, #104]	; (800119c <GPIO_Init+0x190>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d02b      	beq.n	8001190 <GPIO_Init+0x184>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a18      	ldr	r2, [pc, #96]	; (80011a0 <GPIO_Init+0x194>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d024      	beq.n	800118c <GPIO_Init+0x180>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a17      	ldr	r2, [pc, #92]	; (80011a4 <GPIO_Init+0x198>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d01d      	beq.n	8001188 <GPIO_Init+0x17c>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a15      	ldr	r2, [pc, #84]	; (80011a8 <GPIO_Init+0x19c>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d016      	beq.n	8001184 <GPIO_Init+0x178>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a14      	ldr	r2, [pc, #80]	; (80011ac <GPIO_Init+0x1a0>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d00f      	beq.n	8001180 <GPIO_Init+0x174>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a12      	ldr	r2, [pc, #72]	; (80011b0 <GPIO_Init+0x1a4>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d008      	beq.n	800117c <GPIO_Init+0x170>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a11      	ldr	r2, [pc, #68]	; (80011b4 <GPIO_Init+0x1a8>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d101      	bne.n	8001178 <GPIO_Init+0x16c>
 8001174:	2307      	movs	r3, #7
 8001176:	e020      	b.n	80011ba <GPIO_Init+0x1ae>
 8001178:	2308      	movs	r3, #8
 800117a:	e01e      	b.n	80011ba <GPIO_Init+0x1ae>
 800117c:	2306      	movs	r3, #6
 800117e:	e01c      	b.n	80011ba <GPIO_Init+0x1ae>
 8001180:	2305      	movs	r3, #5
 8001182:	e01a      	b.n	80011ba <GPIO_Init+0x1ae>
 8001184:	2304      	movs	r3, #4
 8001186:	e018      	b.n	80011ba <GPIO_Init+0x1ae>
 8001188:	2303      	movs	r3, #3
 800118a:	e016      	b.n	80011ba <GPIO_Init+0x1ae>
 800118c:	2302      	movs	r3, #2
 800118e:	e014      	b.n	80011ba <GPIO_Init+0x1ae>
 8001190:	2301      	movs	r3, #1
 8001192:	e012      	b.n	80011ba <GPIO_Init+0x1ae>
 8001194:	40013c00 	.word	0x40013c00
 8001198:	40020000 	.word	0x40020000
 800119c:	40020400 	.word	0x40020400
 80011a0:	40020800 	.word	0x40020800
 80011a4:	40020c00 	.word	0x40020c00
 80011a8:	40021000 	.word	0x40021000
 80011ac:	40021400 	.word	0x40021400
 80011b0:	40021800 	.word	0x40021800
 80011b4:	40021c00 	.word	0x40021c00
 80011b8:	2300      	movs	r3, #0
 80011ba:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80011bc:	4b5c      	ldr	r3, [pc, #368]	; (8001330 <GPIO_Init+0x324>)
 80011be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c0:	4a5b      	ldr	r2, [pc, #364]	; (8001330 <GPIO_Init+0x324>)
 80011c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011c6:	6453      	str	r3, [r2, #68]	; 0x44
		SYS_CFG->EXTICR[temp1] = portcode << (temp2 * 4);
 80011c8:	7c7a      	ldrb	r2, [r7, #17]
 80011ca:	7cbb      	ldrb	r3, [r7, #18]
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	fa02 f103 	lsl.w	r1, r2, r3
 80011d2:	4a58      	ldr	r2, [pc, #352]	; (8001334 <GPIO_Init+0x328>)
 80011d4:	7cfb      	ldrb	r3, [r7, #19]
 80011d6:	3302      	adds	r3, #2
 80011d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]


		// 3. enable the exti interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80011dc:	4b56      	ldr	r3, [pc, #344]	; (8001338 <GPIO_Init+0x32c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	7912      	ldrb	r2, [r2, #4]
 80011e4:	4611      	mov	r1, r2
 80011e6:	2201      	movs	r2, #1
 80011e8:	408a      	lsls	r2, r1
 80011ea:	4611      	mov	r1, r2
 80011ec:	4a52      	ldr	r2, [pc, #328]	; (8001338 <GPIO_Init+0x32c>)
 80011ee:	430b      	orrs	r3, r1
 80011f0:	6013      	str	r3, [r2, #0]
	}

	// 2. configure the speed
	temp = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	799b      	ldrb	r3, [r3, #6]
 80011fa:	461a      	mov	r2, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	791b      	ldrb	r3, [r3, #4]
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clear
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	689a      	ldr	r2, [r3, #8]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	791b      	ldrb	r3, [r3, #4]
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	2103      	movs	r1, #3
 8001216:	fa01 f303 	lsl.w	r3, r1, r3
 800121a:	43db      	mvns	r3, r3
 800121c:	4619      	mov	r1, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	400a      	ands	r2, r1
 8001224:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;	// setting
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	6899      	ldr	r1, [r3, #8]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	697a      	ldr	r2, [r7, #20]
 8001232:	430a      	orrs	r2, r1
 8001234:	609a      	str	r2, [r3, #8]

	// 3. configure the pupd settings
	temp = 0;
 8001236:	2300      	movs	r3, #0
 8001238:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	79db      	ldrb	r3, [r3, #7]
 800123e:	461a      	mov	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	791b      	ldrb	r3, [r3, #4]
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clear
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	68da      	ldr	r2, [r3, #12]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	791b      	ldrb	r3, [r3, #4]
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	2103      	movs	r1, #3
 800125a:	fa01 f303 	lsl.w	r3, r1, r3
 800125e:	43db      	mvns	r3, r3
 8001260:	4619      	mov	r1, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	400a      	ands	r2, r1
 8001268:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;	// setting
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	68d9      	ldr	r1, [r3, #12]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	697a      	ldr	r2, [r7, #20]
 8001276:	430a      	orrs	r2, r1
 8001278:	60da      	str	r2, [r3, #12]


	// 4. configure the optype
	temp = 0;
 800127a:	2300      	movs	r3, #0
 800127c:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	7a1b      	ldrb	r3, [r3, #8]
 8001282:	461a      	mov	r2, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	791b      	ldrb	r3, [r3, #4]
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x01 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clear
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	685a      	ldr	r2, [r3, #4]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	791b      	ldrb	r3, [r3, #4]
 8001298:	4619      	mov	r1, r3
 800129a:	2301      	movs	r3, #1
 800129c:	408b      	lsls	r3, r1
 800129e:	43db      	mvns	r3, r3
 80012a0:	4619      	mov	r1, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	400a      	ands	r2, r1
 80012a8:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;	// setting
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	6859      	ldr	r1, [r3, #4]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	697a      	ldr	r2, [r7, #20]
 80012b6:	430a      	orrs	r2, r1
 80012b8:	605a      	str	r2, [r3, #4]

	// 5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	795b      	ldrb	r3, [r3, #5]
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d131      	bne.n	8001326 <GPIO_Init+0x31a>
	{
		// configure the alt function register
		uint8_t temp1,temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	791b      	ldrb	r3, [r3, #4]
 80012c6:	08db      	lsrs	r3, r3, #3
 80012c8:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	791b      	ldrb	r3, [r3, #4]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2)); // clearing
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	7c3a      	ldrb	r2, [r7, #16]
 80012da:	3208      	adds	r2, #8
 80012dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80012e0:	7bfb      	ldrb	r3, [r7, #15]
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	220f      	movs	r2, #15
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	43db      	mvns	r3, r3
 80012ec:	4618      	mov	r0, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	7c3a      	ldrb	r2, [r7, #16]
 80012f4:	4001      	ands	r1, r0
 80012f6:	3208      	adds	r2, #8
 80012f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2); // setting
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	7c3a      	ldrb	r2, [r7, #16]
 8001302:	3208      	adds	r2, #8
 8001304:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	7a5b      	ldrb	r3, [r3, #9]
 800130c:	461a      	mov	r2, r3
 800130e:	7bfb      	ldrb	r3, [r7, #15]
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	4618      	mov	r0, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	7c3a      	ldrb	r2, [r7, #16]
 800131e:	4301      	orrs	r1, r0
 8001320:	3208      	adds	r2, #8
 8001322:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8001326:	bf00      	nop
 8001328:	3718      	adds	r7, #24
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40023800 	.word	0x40023800
 8001334:	40013800 	.word	0x40013800
 8001338:	40013c00 	.word	0x40013c00

0800133c <__libc_init_array>:
 800133c:	b570      	push	{r4, r5, r6, lr}
 800133e:	4d0d      	ldr	r5, [pc, #52]	; (8001374 <__libc_init_array+0x38>)
 8001340:	4c0d      	ldr	r4, [pc, #52]	; (8001378 <__libc_init_array+0x3c>)
 8001342:	1b64      	subs	r4, r4, r5
 8001344:	10a4      	asrs	r4, r4, #2
 8001346:	2600      	movs	r6, #0
 8001348:	42a6      	cmp	r6, r4
 800134a:	d109      	bne.n	8001360 <__libc_init_array+0x24>
 800134c:	4d0b      	ldr	r5, [pc, #44]	; (800137c <__libc_init_array+0x40>)
 800134e:	4c0c      	ldr	r4, [pc, #48]	; (8001380 <__libc_init_array+0x44>)
 8001350:	f000 f818 	bl	8001384 <_init>
 8001354:	1b64      	subs	r4, r4, r5
 8001356:	10a4      	asrs	r4, r4, #2
 8001358:	2600      	movs	r6, #0
 800135a:	42a6      	cmp	r6, r4
 800135c:	d105      	bne.n	800136a <__libc_init_array+0x2e>
 800135e:	bd70      	pop	{r4, r5, r6, pc}
 8001360:	f855 3b04 	ldr.w	r3, [r5], #4
 8001364:	4798      	blx	r3
 8001366:	3601      	adds	r6, #1
 8001368:	e7ee      	b.n	8001348 <__libc_init_array+0xc>
 800136a:	f855 3b04 	ldr.w	r3, [r5], #4
 800136e:	4798      	blx	r3
 8001370:	3601      	adds	r6, #1
 8001372:	e7f2      	b.n	800135a <__libc_init_array+0x1e>
 8001374:	0800139c 	.word	0x0800139c
 8001378:	0800139c 	.word	0x0800139c
 800137c:	0800139c 	.word	0x0800139c
 8001380:	080013a0 	.word	0x080013a0

08001384 <_init>:
 8001384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001386:	bf00      	nop
 8001388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800138a:	bc08      	pop	{r3}
 800138c:	469e      	mov	lr, r3
 800138e:	4770      	bx	lr

08001390 <_fini>:
 8001390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001392:	bf00      	nop
 8001394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001396:	bc08      	pop	{r3}
 8001398:	469e      	mov	lr, r3
 800139a:	4770      	bx	lr
