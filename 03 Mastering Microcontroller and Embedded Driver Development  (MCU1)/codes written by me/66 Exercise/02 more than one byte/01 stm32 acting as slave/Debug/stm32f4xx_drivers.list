
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001218  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080013c0  080013c0  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080013c0  080013c0  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  080013c0  080013c0  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080013c0  080013c0  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080013c0  080013c0  000113c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080013c4  080013c4  000113c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  080013c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f4  2**0
                  CONTENTS
 10 .bss          00000074  200001f4  200001f4  000201f4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000268  20000268  000201f4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002135  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000060d  00000000  00000000  00022359  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001f0  00000000  00000000  00022968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000001b8  00000000  00000000  00022b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000291f  00000000  00000000  00022d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001faf  00000000  00000000  0002562f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000b046  00000000  00000000  000275de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00032624  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000076c  00000000  00000000  00032678  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	200001f4 	.word	0x200001f4
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080013a8 	.word	0x080013a8

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	200001f8 	.word	0x200001f8
 80001e4:	080013a8 	.word	0x080013a8

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <I2C1_GPIOInits>:
 * PB6-> SCL
 * PB7 -> SDA
 */

void I2C1_GPIOInits(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b084      	sub	sp, #16
 80001fc:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CPins;

	I2CPins.pGPIOx = GPIOB;
 80001fe:	4b0e      	ldr	r3, [pc, #56]	; (8000238 <I2C1_GPIOInits+0x40>)
 8000200:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000202:	2302      	movs	r3, #2
 8000204:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OP;
 8000206:	2301      	movs	r3, #1
 8000208:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800020a:	2300      	movs	r3, #0
 800020c:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 800020e:	2304      	movs	r3, #4
 8000210:	737b      	strb	r3, [r7, #13]
	I2CPins. GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000212:	2302      	movs	r3, #2
 8000214:	72bb      	strb	r3, [r7, #10]

	//scl
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 8000216:	2306      	movs	r3, #6
 8000218:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 800021a:	1d3b      	adds	r3, r7, #4
 800021c:	4618      	mov	r0, r3
 800021e:	f000 ff07 	bl	8001030 <GPIO_Init>


	//sda
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 8000222:	2307      	movs	r3, #7
 8000224:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	4618      	mov	r0, r3
 800022a:	f000 ff01 	bl	8001030 <GPIO_Init>


}
 800022e:	bf00      	nop
 8000230:	3710      	adds	r7, #16
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}
 8000236:	bf00      	nop
 8000238:	40020400 	.word	0x40020400

0800023c <I2C1_Inits>:

void I2C1_Inits(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
	I2C1Handle.pI2Cx = I2C1;
 8000240:	4b09      	ldr	r3, [pc, #36]	; (8000268 <I2C1_Inits+0x2c>)
 8000242:	4a0a      	ldr	r2, [pc, #40]	; (800026c <I2C1_Inits+0x30>)
 8000244:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 8000246:	4b08      	ldr	r3, [pc, #32]	; (8000268 <I2C1_Inits+0x2c>)
 8000248:	2201      	movs	r2, #1
 800024a:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
 800024c:	4b06      	ldr	r3, [pc, #24]	; (8000268 <I2C1_Inits+0x2c>)
 800024e:	2269      	movs	r2, #105	; 0x69
 8000250:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 8000252:	4b05      	ldr	r3, [pc, #20]	; (8000268 <I2C1_Inits+0x2c>)
 8000254:	2200      	movs	r2, #0
 8000256:	815a      	strh	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 8000258:	4b03      	ldr	r3, [pc, #12]	; (8000268 <I2C1_Inits+0x2c>)
 800025a:	4a05      	ldr	r2, [pc, #20]	; (8000270 <I2C1_Inits+0x34>)
 800025c:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 800025e:	4802      	ldr	r0, [pc, #8]	; (8000268 <I2C1_Inits+0x2c>)
 8000260:	f000 f9b0 	bl	80005c4 <I2C_Init>

}
 8000264:	bf00      	nop
 8000266:	bd80      	pop	{r7, pc}
 8000268:	2000021c 	.word	0x2000021c
 800026c:	40005400 	.word	0x40005400
 8000270:	000186a0 	.word	0x000186a0

08000274 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b084      	sub	sp, #16
 8000278:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOA;
 800027a:	4b09      	ldr	r3, [pc, #36]	; (80002a0 <GPIO_ButtonInit+0x2c>)
 800027c:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 800027e:	2300      	movs	r3, #0
 8000280:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000282:	2300      	movs	r3, #0
 8000284:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000286:	2302      	movs	r3, #2
 8000288:	72bb      	strb	r3, [r7, #10]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800028a:	2300      	movs	r3, #0
 800028c:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIOBtn);
 800028e:	1d3b      	adds	r3, r7, #4
 8000290:	4618      	mov	r0, r3
 8000292:	f000 fecd 	bl	8001030 <GPIO_Init>

}
 8000296:	bf00      	nop
 8000298:	3710      	adds	r7, #16
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}
 800029e:	bf00      	nop
 80002a0:	40020000 	.word	0x40020000

080002a4 <main>:


int main(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0

	//initialise_monitor_handles();

	//printf("Application is running\n");

	 data_len = strlen((char*)Tx_buf);
 80002a8:	4810      	ldr	r0, [pc, #64]	; (80002ec <main+0x48>)
 80002aa:	f7ff ff9d 	bl	80001e8 <strlen>
 80002ae:	4603      	mov	r3, r0
 80002b0:	4a0f      	ldr	r2, [pc, #60]	; (80002f0 <main+0x4c>)
 80002b2:	6013      	str	r3, [r2, #0]

	GPIO_ButtonInit();
 80002b4:	f7ff ffde 	bl	8000274 <GPIO_ButtonInit>

	//i2c pin inits
	I2C1_GPIOInits();
 80002b8:	f7ff ff9e 	bl	80001f8 <I2C1_GPIOInits>

	//i2c peripheral configuration
	I2C1_Inits();
 80002bc:	f7ff ffbe 	bl	800023c <I2C1_Inits>

	//enable the i2c peripheral
	I2C_PeripheralControl(I2C1,ENABLE);
 80002c0:	2101      	movs	r1, #1
 80002c2:	480c      	ldr	r0, [pc, #48]	; (80002f4 <main+0x50>)
 80002c4:	f000 fb46 	bl	8000954 <I2C_PeripheralControl>

	//ack bit is made 1 after PE=1
	I2C_ManageAcking(I2C1,I2C_ACK_ENABLE);
 80002c8:	2101      	movs	r1, #1
 80002ca:	480a      	ldr	r0, [pc, #40]	; (80002f4 <main+0x50>)
 80002cc:	f000 fb5e 	bl	800098c <I2C_ManageAcking>

	I2C_IRQInterruptConfig(IRQ_NO_I2C1_ER,ENABLE);
 80002d0:	2101      	movs	r1, #1
 80002d2:	2020      	movs	r0, #32
 80002d4:	f000 faba 	bl	800084c <I2C_IRQInterruptConfig>
	I2C_IRQInterruptConfig(IRQ_NO_I2C1_EV,ENABLE);
 80002d8:	2101      	movs	r1, #1
 80002da:	201f      	movs	r0, #31
 80002dc:	f000 fab6 	bl	800084c <I2C_IRQInterruptConfig>

	I2C_SlaveEnableDisableCallbackEvents(I2C1,ENABLE);
 80002e0:	2101      	movs	r1, #1
 80002e2:	4804      	ldr	r0, [pc, #16]	; (80002f4 <main+0x50>)
 80002e4:	f000 fd87 	bl	8000df6 <I2C_SlaveEnableDisableCallbackEvents>


	while(1);
 80002e8:	e7fe      	b.n	80002e8 <main+0x44>
 80002ea:	bf00      	nop
 80002ec:	20000000 	.word	0x20000000
 80002f0:	20000210 	.word	0x20000210
 80002f4:	40005400 	.word	0x40005400

080002f8 <I2C_ApplicationEventCallback>:
}


void I2C_ApplicationEventCallback(I2C_Handle_t *pI2CHandle, uint8_t AppEv)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b082      	sub	sp, #8
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
 8000300:	460b      	mov	r3, r1
 8000302:	70fb      	strb	r3, [r7, #3]
	static uint32_t cnt = 0;
	static uint32_t w_ptr = 0;



	if(AppEv == I2C_ERROR_AF)
 8000304:	78fb      	ldrb	r3, [r7, #3]
 8000306:	2b05      	cmp	r3, #5
 8000308:	d116      	bne.n	8000338 <I2C_ApplicationEventCallback+0x40>
		// slave should understand master needs no more data
		//slave concludes end of Tx


		//if the current active code is 0x52 then dont invalidate
		if(! (CommandCode == 0x52))
 800030a:	4b2b      	ldr	r3, [pc, #172]	; (80003b8 <I2C_ApplicationEventCallback+0xc0>)
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	2b52      	cmp	r3, #82	; 0x52
 8000310:	d002      	beq.n	8000318 <I2C_ApplicationEventCallback+0x20>
			CommandCode = 0XFF;
 8000312:	4b29      	ldr	r3, [pc, #164]	; (80003b8 <I2C_ApplicationEventCallback+0xc0>)
 8000314:	22ff      	movs	r2, #255	; 0xff
 8000316:	701a      	strb	r2, [r3, #0]

		//reset the cnt variable because its end of transmission
		cnt = 0;
 8000318:	4b28      	ldr	r3, [pc, #160]	; (80003bc <I2C_ApplicationEventCallback+0xc4>)
 800031a:	2200      	movs	r2, #0
 800031c:	601a      	str	r2, [r3, #0]

		//Slave concludes it sent all the bytes when w_ptr reaches data_len
		if(w_ptr >= (data_len))
 800031e:	4b28      	ldr	r3, [pc, #160]	; (80003c0 <I2C_ApplicationEventCallback+0xc8>)
 8000320:	681a      	ldr	r2, [r3, #0]
 8000322:	4b28      	ldr	r3, [pc, #160]	; (80003c4 <I2C_ApplicationEventCallback+0xcc>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	429a      	cmp	r2, r3
 8000328:	d342      	bcc.n	80003b0 <I2C_ApplicationEventCallback+0xb8>
		{
			w_ptr=0;
 800032a:	4b25      	ldr	r3, [pc, #148]	; (80003c0 <I2C_ApplicationEventCallback+0xc8>)
 800032c:	2200      	movs	r2, #0
 800032e:	601a      	str	r2, [r3, #0]
			CommandCode = 0xff;
 8000330:	4b21      	ldr	r3, [pc, #132]	; (80003b8 <I2C_ApplicationEventCallback+0xc0>)
 8000332:	22ff      	movs	r2, #255	; 0xff
 8000334:	701a      	strb	r2, [r3, #0]
	{
		//Master has sent command code, read it
		 CommandCode = I2C_SlaveReceiveData(I2C1);

	}
}
 8000336:	e03b      	b.n	80003b0 <I2C_ApplicationEventCallback+0xb8>
	}else if (AppEv == I2C_EV_STOP)
 8000338:	78fb      	ldrb	r3, [r7, #3]
 800033a:	2b02      	cmp	r3, #2
 800033c:	d103      	bne.n	8000346 <I2C_ApplicationEventCallback+0x4e>
		cnt = 0;
 800033e:	4b1f      	ldr	r3, [pc, #124]	; (80003bc <I2C_ApplicationEventCallback+0xc4>)
 8000340:	2200      	movs	r2, #0
 8000342:	601a      	str	r2, [r3, #0]
}
 8000344:	e034      	b.n	80003b0 <I2C_ApplicationEventCallback+0xb8>
	}else if (AppEv == I2C_EV_DATA_REQ)
 8000346:	78fb      	ldrb	r3, [r7, #3]
 8000348:	2b08      	cmp	r3, #8
 800034a:	d127      	bne.n	800039c <I2C_ApplicationEventCallback+0xa4>
		if(CommandCode == 0x51)
 800034c:	4b1a      	ldr	r3, [pc, #104]	; (80003b8 <I2C_ApplicationEventCallback+0xc0>)
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	2b51      	cmp	r3, #81	; 0x51
 8000352:	d113      	bne.n	800037c <I2C_ApplicationEventCallback+0x84>
			I2C_SlaveSendData(I2C1,((data_len >> ((cnt%4) * 8)) & 0xFF));
 8000354:	4b1b      	ldr	r3, [pc, #108]	; (80003c4 <I2C_ApplicationEventCallback+0xcc>)
 8000356:	681a      	ldr	r2, [r3, #0]
 8000358:	4b18      	ldr	r3, [pc, #96]	; (80003bc <I2C_ApplicationEventCallback+0xc4>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	f003 0303 	and.w	r3, r3, #3
 8000360:	00db      	lsls	r3, r3, #3
 8000362:	fa22 f303 	lsr.w	r3, r2, r3
 8000366:	b2db      	uxtb	r3, r3
 8000368:	4619      	mov	r1, r3
 800036a:	4817      	ldr	r0, [pc, #92]	; (80003c8 <I2C_ApplicationEventCallback+0xd0>)
 800036c:	f000 fa51 	bl	8000812 <I2C_SlaveSendData>
		    cnt++;
 8000370:	4b12      	ldr	r3, [pc, #72]	; (80003bc <I2C_ApplicationEventCallback+0xc4>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	3301      	adds	r3, #1
 8000376:	4a11      	ldr	r2, [pc, #68]	; (80003bc <I2C_ApplicationEventCallback+0xc4>)
 8000378:	6013      	str	r3, [r2, #0]
}
 800037a:	e019      	b.n	80003b0 <I2C_ApplicationEventCallback+0xb8>
		}else if (CommandCode == 0x52)
 800037c:	4b0e      	ldr	r3, [pc, #56]	; (80003b8 <I2C_ApplicationEventCallback+0xc0>)
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	2b52      	cmp	r3, #82	; 0x52
 8000382:	d115      	bne.n	80003b0 <I2C_ApplicationEventCallback+0xb8>
			I2C_SlaveSendData(I2C1,Tx_buf[w_ptr++]);
 8000384:	4b0e      	ldr	r3, [pc, #56]	; (80003c0 <I2C_ApplicationEventCallback+0xc8>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	1c5a      	adds	r2, r3, #1
 800038a:	490d      	ldr	r1, [pc, #52]	; (80003c0 <I2C_ApplicationEventCallback+0xc8>)
 800038c:	600a      	str	r2, [r1, #0]
 800038e:	4a0f      	ldr	r2, [pc, #60]	; (80003cc <I2C_ApplicationEventCallback+0xd4>)
 8000390:	5cd3      	ldrb	r3, [r2, r3]
 8000392:	4619      	mov	r1, r3
 8000394:	480c      	ldr	r0, [pc, #48]	; (80003c8 <I2C_ApplicationEventCallback+0xd0>)
 8000396:	f000 fa3c 	bl	8000812 <I2C_SlaveSendData>
}
 800039a:	e009      	b.n	80003b0 <I2C_ApplicationEventCallback+0xb8>
	}else if (AppEv == I2C_EV_DATA_RCV)
 800039c:	78fb      	ldrb	r3, [r7, #3]
 800039e:	2b09      	cmp	r3, #9
 80003a0:	d106      	bne.n	80003b0 <I2C_ApplicationEventCallback+0xb8>
		 CommandCode = I2C_SlaveReceiveData(I2C1);
 80003a2:	4809      	ldr	r0, [pc, #36]	; (80003c8 <I2C_ApplicationEventCallback+0xd0>)
 80003a4:	f000 fa44 	bl	8000830 <I2C_SlaveReceiveData>
 80003a8:	4603      	mov	r3, r0
 80003aa:	461a      	mov	r2, r3
 80003ac:	4b02      	ldr	r3, [pc, #8]	; (80003b8 <I2C_ApplicationEventCallback+0xc0>)
 80003ae:	701a      	strb	r2, [r3, #0]
}
 80003b0:	bf00      	nop
 80003b2:	3708      	adds	r7, #8
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	20000244 	.word	0x20000244
 80003bc:	20000214 	.word	0x20000214
 80003c0:	20000218 	.word	0x20000218
 80003c4:	20000210 	.word	0x20000210
 80003c8:	40005400 	.word	0x40005400
 80003cc:	20000000 	.word	0x20000000

080003d0 <I2C1_EV_IRQHandler>:


void I2C1_EV_IRQHandler(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0

	I2C_EV_IRQHandling(&I2C1Handle);
 80003d4:	4802      	ldr	r0, [pc, #8]	; (80003e0 <I2C1_EV_IRQHandler+0x10>)
 80003d6:	f000 faf5 	bl	80009c4 <I2C_EV_IRQHandling>
}
 80003da:	bf00      	nop
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	2000021c 	.word	0x2000021c

080003e4 <I2C1_ER_IRQHandler>:



void I2C1_ER_IRQHandler(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0

	I2C_ER_IRQHandling(&I2C1Handle);
 80003e8:	4802      	ldr	r0, [pc, #8]	; (80003f4 <I2C1_ER_IRQHandler+0x10>)
 80003ea:	f000 fc7e 	bl	8000cea <I2C_ER_IRQHandling>
}
 80003ee:	bf00      	nop
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	2000021c 	.word	0x2000021c

080003f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003f8:	480d      	ldr	r0, [pc, #52]	; (8000430 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003fa:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80003fc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000400:	480c      	ldr	r0, [pc, #48]	; (8000434 <LoopForever+0x6>)
  ldr r1, =_edata
 8000402:	490d      	ldr	r1, [pc, #52]	; (8000438 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000404:	4a0d      	ldr	r2, [pc, #52]	; (800043c <LoopForever+0xe>)
  movs r3, #0
 8000406:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000408:	e002      	b.n	8000410 <LoopCopyDataInit>

0800040a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800040a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800040c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800040e:	3304      	adds	r3, #4

08000410 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000410:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000412:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000414:	d3f9      	bcc.n	800040a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000416:	4a0a      	ldr	r2, [pc, #40]	; (8000440 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000418:	4c0a      	ldr	r4, [pc, #40]	; (8000444 <LoopForever+0x16>)
  movs r3, #0
 800041a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800041c:	e001      	b.n	8000422 <LoopFillZerobss>

0800041e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800041e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000420:	3204      	adds	r2, #4

08000422 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000422:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000424:	d3fb      	bcc.n	800041e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000426:	f000 ff9b 	bl	8001360 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800042a:	f7ff ff3b 	bl	80002a4 <main>

0800042e <LoopForever>:

LoopForever:
    b LoopForever
 800042e:	e7fe      	b.n	800042e <LoopForever>
  ldr   r0, =_estack
 8000430:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000434:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000438:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 800043c:	080013c8 	.word	0x080013c8
  ldr r2, =_sbss
 8000440:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8000444:	20000268 	.word	0x20000268

08000448 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000448:	e7fe      	b.n	8000448 <ADC_IRQHandler>
	...

0800044c <I2C_PeripheralClockControl>:
 *
 *@Note					-
 *
 */
void I2C_PeripheralClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 800044c:	b480      	push	{r7}
 800044e:	b083      	sub	sp, #12
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
 8000454:	460b      	mov	r3, r1
 8000456:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000458:	78fb      	ldrb	r3, [r7, #3]
 800045a:	2b01      	cmp	r3, #1
 800045c:	d120      	bne.n	80004a0 <I2C_PeripheralClockControl+0x54>
	{
		if(pI2Cx == I2C1)
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	4a22      	ldr	r2, [pc, #136]	; (80004ec <I2C_PeripheralClockControl+0xa0>)
 8000462:	4293      	cmp	r3, r2
 8000464:	d106      	bne.n	8000474 <I2C_PeripheralClockControl+0x28>
		{
			I2C1_PCLK_EN();
 8000466:	4b22      	ldr	r3, [pc, #136]	; (80004f0 <I2C_PeripheralClockControl+0xa4>)
 8000468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800046a:	4a21      	ldr	r2, [pc, #132]	; (80004f0 <I2C_PeripheralClockControl+0xa4>)
 800046c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000470:	6413      	str	r3, [r2, #64]	; 0x40
		else if(pI2Cx == I2C3)
		{
			I2C3_PCLK_DI();
		}
	}
}
 8000472:	e035      	b.n	80004e0 <I2C_PeripheralClockControl+0x94>
		else if(pI2Cx == I2C2)
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	4a1f      	ldr	r2, [pc, #124]	; (80004f4 <I2C_PeripheralClockControl+0xa8>)
 8000478:	4293      	cmp	r3, r2
 800047a:	d106      	bne.n	800048a <I2C_PeripheralClockControl+0x3e>
			I2C2_PCLK_EN();
 800047c:	4b1c      	ldr	r3, [pc, #112]	; (80004f0 <I2C_PeripheralClockControl+0xa4>)
 800047e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000480:	4a1b      	ldr	r2, [pc, #108]	; (80004f0 <I2C_PeripheralClockControl+0xa4>)
 8000482:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000486:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000488:	e02a      	b.n	80004e0 <I2C_PeripheralClockControl+0x94>
		else if(pI2Cx == I2C3)
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	4a1a      	ldr	r2, [pc, #104]	; (80004f8 <I2C_PeripheralClockControl+0xac>)
 800048e:	4293      	cmp	r3, r2
 8000490:	d126      	bne.n	80004e0 <I2C_PeripheralClockControl+0x94>
			I2C3_PCLK_EN();
 8000492:	4b17      	ldr	r3, [pc, #92]	; (80004f0 <I2C_PeripheralClockControl+0xa4>)
 8000494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000496:	4a16      	ldr	r2, [pc, #88]	; (80004f0 <I2C_PeripheralClockControl+0xa4>)
 8000498:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800049c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800049e:	e01f      	b.n	80004e0 <I2C_PeripheralClockControl+0x94>
		if(pI2Cx == I2C1)
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	4a12      	ldr	r2, [pc, #72]	; (80004ec <I2C_PeripheralClockControl+0xa0>)
 80004a4:	4293      	cmp	r3, r2
 80004a6:	d106      	bne.n	80004b6 <I2C_PeripheralClockControl+0x6a>
			I2C1_PCLK_DI();
 80004a8:	4b11      	ldr	r3, [pc, #68]	; (80004f0 <I2C_PeripheralClockControl+0xa4>)
 80004aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004ac:	4a10      	ldr	r2, [pc, #64]	; (80004f0 <I2C_PeripheralClockControl+0xa4>)
 80004ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80004b2:	6413      	str	r3, [r2, #64]	; 0x40
}
 80004b4:	e014      	b.n	80004e0 <I2C_PeripheralClockControl+0x94>
		else if(pI2Cx == I2C2)
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	4a0e      	ldr	r2, [pc, #56]	; (80004f4 <I2C_PeripheralClockControl+0xa8>)
 80004ba:	4293      	cmp	r3, r2
 80004bc:	d106      	bne.n	80004cc <I2C_PeripheralClockControl+0x80>
			I2C2_PCLK_DI();
 80004be:	4b0c      	ldr	r3, [pc, #48]	; (80004f0 <I2C_PeripheralClockControl+0xa4>)
 80004c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004c2:	4a0b      	ldr	r2, [pc, #44]	; (80004f0 <I2C_PeripheralClockControl+0xa4>)
 80004c4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80004c8:	6413      	str	r3, [r2, #64]	; 0x40
}
 80004ca:	e009      	b.n	80004e0 <I2C_PeripheralClockControl+0x94>
		else if(pI2Cx == I2C3)
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	4a0a      	ldr	r2, [pc, #40]	; (80004f8 <I2C_PeripheralClockControl+0xac>)
 80004d0:	4293      	cmp	r3, r2
 80004d2:	d105      	bne.n	80004e0 <I2C_PeripheralClockControl+0x94>
			I2C3_PCLK_DI();
 80004d4:	4b06      	ldr	r3, [pc, #24]	; (80004f0 <I2C_PeripheralClockControl+0xa4>)
 80004d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004d8:	4a05      	ldr	r2, [pc, #20]	; (80004f0 <I2C_PeripheralClockControl+0xa4>)
 80004da:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80004de:	6413      	str	r3, [r2, #64]	; 0x40
}
 80004e0:	bf00      	nop
 80004e2:	370c      	adds	r7, #12
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr
 80004ec:	40005400 	.word	0x40005400
 80004f0:	40023800 	.word	0x40023800
 80004f4:	40005800 	.word	0x40005800
 80004f8:	40005c00 	.word	0x40005c00

080004fc <RCC_GETPLLOutputClock>:

uint32_t RCC_GETPLLOutputClock(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
	return 160000000; // dummy value to be implemented
 8000500:	4b02      	ldr	r3, [pc, #8]	; (800050c <RCC_GETPLLOutputClock+0x10>)
}
 8000502:	4618      	mov	r0, r3
 8000504:	46bd      	mov	sp, r7
 8000506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050a:	4770      	bx	lr
 800050c:	09896800 	.word	0x09896800

08000510 <RCC_GetPCLK1Value>:


uint32_t RCC_GetPCLK1Value(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0
	uint32_t pclk1, SystemClk;

	uint8_t clkSrc, temp, ahbp, apb1;
	clkSrc = ((RCC->CFGR >> 2) & 0x03);
 8000516:	4b26      	ldr	r3, [pc, #152]	; (80005b0 <RCC_GetPCLK1Value+0xa0>)
 8000518:	689b      	ldr	r3, [r3, #8]
 800051a:	089b      	lsrs	r3, r3, #2
 800051c:	b2db      	uxtb	r3, r3
 800051e:	f003 0303 	and.w	r3, r3, #3
 8000522:	727b      	strb	r3, [r7, #9]

	if(clkSrc == 0)
 8000524:	7a7b      	ldrb	r3, [r7, #9]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d102      	bne.n	8000530 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 800052a:	4b22      	ldr	r3, [pc, #136]	; (80005b4 <RCC_GetPCLK1Value+0xa4>)
 800052c:	60fb      	str	r3, [r7, #12]
 800052e:	e00b      	b.n	8000548 <RCC_GetPCLK1Value+0x38>
	}
	else if(clkSrc == 1)
 8000530:	7a7b      	ldrb	r3, [r7, #9]
 8000532:	2b01      	cmp	r3, #1
 8000534:	d102      	bne.n	800053c <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 8000536:	4b20      	ldr	r3, [pc, #128]	; (80005b8 <RCC_GetPCLK1Value+0xa8>)
 8000538:	60fb      	str	r3, [r7, #12]
 800053a:	e005      	b.n	8000548 <RCC_GetPCLK1Value+0x38>
	}
	else if(clkSrc == 2)
 800053c:	7a7b      	ldrb	r3, [r7, #9]
 800053e:	2b02      	cmp	r3, #2
 8000540:	d102      	bne.n	8000548 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GETPLLOutputClock();
 8000542:	f7ff ffdb 	bl	80004fc <RCC_GETPLLOutputClock>
 8000546:	60f8      	str	r0, [r7, #12]
	}

	// ahbp
	temp = ((RCC->CFGR >> 4) & 0xF);
 8000548:	4b19      	ldr	r3, [pc, #100]	; (80005b0 <RCC_GetPCLK1Value+0xa0>)
 800054a:	689b      	ldr	r3, [r3, #8]
 800054c:	091b      	lsrs	r3, r3, #4
 800054e:	b2db      	uxtb	r3, r3
 8000550:	f003 030f 	and.w	r3, r3, #15
 8000554:	723b      	strb	r3, [r7, #8]
	if(temp < 8)
 8000556:	7a3b      	ldrb	r3, [r7, #8]
 8000558:	2b07      	cmp	r3, #7
 800055a:	d802      	bhi.n	8000562 <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 800055c:	2301      	movs	r3, #1
 800055e:	72fb      	strb	r3, [r7, #11]
 8000560:	e005      	b.n	800056e <RCC_GetPCLK1Value+0x5e>
	}
	else
	{
		ahbp = AHB_PreScalar[temp - 8];
 8000562:	7a3b      	ldrb	r3, [r7, #8]
 8000564:	3b08      	subs	r3, #8
 8000566:	4a15      	ldr	r2, [pc, #84]	; (80005bc <RCC_GetPCLK1Value+0xac>)
 8000568:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800056c:	72fb      	strb	r3, [r7, #11]
	}

	// apb1
	temp = ((RCC->CFGR >> 10) & 0x7);
 800056e:	4b10      	ldr	r3, [pc, #64]	; (80005b0 <RCC_GetPCLK1Value+0xa0>)
 8000570:	689b      	ldr	r3, [r3, #8]
 8000572:	0a9b      	lsrs	r3, r3, #10
 8000574:	b2db      	uxtb	r3, r3
 8000576:	f003 0307 	and.w	r3, r3, #7
 800057a:	723b      	strb	r3, [r7, #8]
	if(temp < 4)
 800057c:	7a3b      	ldrb	r3, [r7, #8]
 800057e:	2b03      	cmp	r3, #3
 8000580:	d802      	bhi.n	8000588 <RCC_GetPCLK1Value+0x78>
	{
		apb1 = 1;
 8000582:	2301      	movs	r3, #1
 8000584:	72bb      	strb	r3, [r7, #10]
 8000586:	e005      	b.n	8000594 <RCC_GetPCLK1Value+0x84>
	}
	else
	{
		apb1 = APB1_PreScalar[temp - 4];
 8000588:	7a3b      	ldrb	r3, [r7, #8]
 800058a:	3b04      	subs	r3, #4
 800058c:	4a0c      	ldr	r2, [pc, #48]	; (80005c0 <RCC_GetPCLK1Value+0xb0>)
 800058e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000592:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = (SystemClk / ahbp) / apb1;
 8000594:	7afb      	ldrb	r3, [r7, #11]
 8000596:	68fa      	ldr	r2, [r7, #12]
 8000598:	fbb2 f2f3 	udiv	r2, r2, r3
 800059c:	7abb      	ldrb	r3, [r7, #10]
 800059e:	fbb2 f3f3 	udiv	r3, r2, r3
 80005a2:	607b      	str	r3, [r7, #4]

	return pclk1;
 80005a4:	687b      	ldr	r3, [r7, #4]
}
 80005a6:	4618      	mov	r0, r3
 80005a8:	3710      	adds	r7, #16
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40023800 	.word	0x40023800
 80005b4:	00f42400 	.word	0x00f42400
 80005b8:	007a1200 	.word	0x007a1200
 80005bc:	200001dc 	.word	0x200001dc
 80005c0:	200001ec 	.word	0x200001ec

080005c4 <I2C_Init>:
 *
 *@Note					-
 *
 */
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
	// enable the clock for the i2cx peripheral
	I2C_PeripheralClockControl(pI2CHandle->pI2Cx, ENABLE);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	2101      	movs	r1, #1
 80005d2:	4618      	mov	r0, r3
 80005d4:	f7ff ff3a 	bl	800044c <I2C_PeripheralClockControl>

	uint32_t tempreg = 0;
 80005d8:	2300      	movs	r3, #0
 80005da:	60fb      	str	r3, [r7, #12]


	// configure the FREQ field of CR2
	tempreg |= RCC_GetPCLK1Value() / 1000000U;
 80005dc:	f7ff ff98 	bl	8000510 <RCC_GetPCLK1Value>
 80005e0:	4603      	mov	r3, r0
 80005e2:	4a47      	ldr	r2, [pc, #284]	; (8000700 <I2C_Init+0x13c>)
 80005e4:	fba2 2303 	umull	r2, r3, r2, r3
 80005e8:	0c9b      	lsrs	r3, r3, #18
 80005ea:	68fa      	ldr	r2, [r7, #12]
 80005ec:	4313      	orrs	r3, r2
 80005ee:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 = (tempreg & 0x3F);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	68fa      	ldr	r2, [r7, #12]
 80005f6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80005fa:	605a      	str	r2, [r3, #4]

	// program the device own address
	tempreg = 0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	7a1b      	ldrb	r3, [r3, #8]
 8000604:	005b      	lsls	r3, r3, #1
 8000606:	461a      	mov	r2, r3
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	4313      	orrs	r3, r2
 800060c:	60fb      	str	r3, [r7, #12]
	tempreg |= (1 << 14);
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000614:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	68fa      	ldr	r2, [r7, #12]
 800061c:	609a      	str	r2, [r3, #8]

	// CCR calculation
	uint16_t ccr_value = 0;
 800061e:	2300      	movs	r3, #0
 8000620:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8000622:	2300      	movs	r3, #0
 8000624:	60fb      	str	r3, [r7, #12]

	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	685b      	ldr	r3, [r3, #4]
 800062a:	4a36      	ldr	r2, [pc, #216]	; (8000704 <I2C_Init+0x140>)
 800062c:	4293      	cmp	r3, r2
 800062e:	d80f      	bhi.n	8000650 <I2C_Init+0x8c>
	{
		// mode is standard mode
		ccr_value = RCC_GetPCLK1Value() / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000630:	f7ff ff6e 	bl	8000510 <RCC_GetPCLK1Value>
 8000634:	4602      	mov	r2, r0
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	685b      	ldr	r3, [r3, #4]
 800063a:	005b      	lsls	r3, r3, #1
 800063c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000640:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8000642:	897b      	ldrh	r3, [r7, #10]
 8000644:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000648:	68fa      	ldr	r2, [r7, #12]
 800064a:	4313      	orrs	r3, r2
 800064c:	60fb      	str	r3, [r7, #12]
 800064e:	e02b      	b.n	80006a8 <I2C_Init+0xe4>
	}
	else
	{
		// mode is fast mode
		tempreg |= (1 << 15);
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000656:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	895b      	ldrh	r3, [r3, #10]
 800065c:	039b      	lsls	r3, r3, #14
 800065e:	461a      	mov	r2, r3
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	4313      	orrs	r3, r2
 8000664:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	895b      	ldrh	r3, [r3, #10]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d10b      	bne.n	8000686 <I2C_Init+0xc2>
		{
			ccr_value = RCC_GetPCLK1Value() / (3 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 800066e:	f7ff ff4f 	bl	8000510 <RCC_GetPCLK1Value>
 8000672:	4601      	mov	r1, r0
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	685a      	ldr	r2, [r3, #4]
 8000678:	4613      	mov	r3, r2
 800067a:	005b      	lsls	r3, r3, #1
 800067c:	4413      	add	r3, r2
 800067e:	fbb1 f3f3 	udiv	r3, r1, r3
 8000682:	817b      	strh	r3, [r7, #10]
 8000684:	e00c      	b.n	80006a0 <I2C_Init+0xdc>
		}
		else
		{
			ccr_value = RCC_GetPCLK1Value() / (25 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000686:	f7ff ff43 	bl	8000510 <RCC_GetPCLK1Value>
 800068a:	4601      	mov	r1, r0
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	685a      	ldr	r2, [r3, #4]
 8000690:	4613      	mov	r3, r2
 8000692:	009b      	lsls	r3, r3, #2
 8000694:	4413      	add	r3, r2
 8000696:	009a      	lsls	r2, r3, #2
 8000698:	4413      	add	r3, r2
 800069a:	fbb1 f3f3 	udiv	r3, r1, r3
 800069e:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= ccr_value;
 80006a0:	897b      	ldrh	r3, [r7, #10]
 80006a2:	68fa      	ldr	r2, [r7, #12]
 80006a4:	4313      	orrs	r3, r2
 80006a6:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	68fa      	ldr	r2, [r7, #12]
 80006ae:	61da      	str	r2, [r3, #28]

	// TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	685b      	ldr	r3, [r3, #4]
 80006b4:	4a13      	ldr	r2, [pc, #76]	; (8000704 <I2C_Init+0x140>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d809      	bhi.n	80006ce <I2C_Init+0x10a>
	{
		// mode is standard mode
		tempreg = (RCC_GetPCLK1Value() / 1000000U) + 1;
 80006ba:	f7ff ff29 	bl	8000510 <RCC_GetPCLK1Value>
 80006be:	4603      	mov	r3, r0
 80006c0:	4a0f      	ldr	r2, [pc, #60]	; (8000700 <I2C_Init+0x13c>)
 80006c2:	fba2 2303 	umull	r2, r3, r2, r3
 80006c6:	0c9b      	lsrs	r3, r3, #18
 80006c8:	3301      	adds	r3, #1
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	e00d      	b.n	80006ea <I2C_Init+0x126>
	}
	else
	{
		// mode is fast mode
		tempreg = ((RCC_GetPCLK1Value() * 300) / 1000000000U) + 1;
 80006ce:	f7ff ff1f 	bl	8000510 <RCC_GetPCLK1Value>
 80006d2:	4603      	mov	r3, r0
 80006d4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80006d8:	fb02 f303 	mul.w	r3, r2, r3
 80006dc:	0a5b      	lsrs	r3, r3, #9
 80006de:	4a0a      	ldr	r2, [pc, #40]	; (8000708 <I2C_Init+0x144>)
 80006e0:	fba2 2303 	umull	r2, r3, r2, r3
 80006e4:	09db      	lsrs	r3, r3, #7
 80006e6:	3301      	adds	r3, #1
 80006e8:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	68fa      	ldr	r2, [r7, #12]
 80006f0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80006f4:	621a      	str	r2, [r3, #32]


}
 80006f6:	bf00      	nop
 80006f8:	3710      	adds	r7, #16
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	431bde83 	.word	0x431bde83
 8000704:	000186a0 	.word	0x000186a0
 8000708:	00044b83 	.word	0x00044b83

0800070c <I2C_generateStartCondition>:
		I2C_generateStopCondition(pI2CHandle->pI2Cx);


}
static void I2C_generateStartCondition(I2C_RegDef_t *pI2Cx)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_START);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	601a      	str	r2, [r3, #0]
}
 8000720:	bf00      	nop
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr

0800072c <I2C_ExecuteAddressPhaseWrite>:
static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t slaveAddr)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	460b      	mov	r3, r1
 8000736:	70fb      	strb	r3, [r7, #3]
	slaveAddr = slaveAddr << 1;
 8000738:	78fb      	ldrb	r3, [r7, #3]
 800073a:	005b      	lsls	r3, r3, #1
 800073c:	70fb      	strb	r3, [r7, #3]
	slaveAddr &= ~(1 << 0);
 800073e:	78fb      	ldrb	r3, [r7, #3]
 8000740:	f023 0301 	bic.w	r3, r3, #1
 8000744:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = slaveAddr;
 8000746:	78fa      	ldrb	r2, [r7, #3]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	611a      	str	r2, [r3, #16]
}
 800074c:	bf00      	nop
 800074e:	370c      	adds	r7, #12
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr

08000758 <I2C_ExecuteAddressPhaseRead>:
static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t slaveAddr)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	460b      	mov	r3, r1
 8000762:	70fb      	strb	r3, [r7, #3]
	slaveAddr = slaveAddr << 1;
 8000764:	78fb      	ldrb	r3, [r7, #3]
 8000766:	005b      	lsls	r3, r3, #1
 8000768:	70fb      	strb	r3, [r7, #3]
	slaveAddr |= (1 << 0);
 800076a:	78fb      	ldrb	r3, [r7, #3]
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = slaveAddr;
 8000772:	78fa      	ldrb	r2, [r7, #3]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	611a      	str	r2, [r3, #16]
}
 8000778:	bf00      	nop
 800077a:	370c      	adds	r7, #12
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr

08000784 <I2C_ClearADDRFlag>:
static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
	uint32_t dummyRead;
	// check for device mode
	if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL))
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	699b      	ldr	r3, [r3, #24]
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	2b00      	cmp	r3, #0
 8000798:	d01f      	beq.n	80007da <I2C_ClearADDRFlag+0x56>
	{
		// device is in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	7f1b      	ldrb	r3, [r3, #28]
 800079e:	2b01      	cmp	r3, #1
 80007a0:	d112      	bne.n	80007c8 <I2C_ClearADDRFlag+0x44>
		{
			if(pI2CHandle->RxSize == 1)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	6a1b      	ldr	r3, [r3, #32]
 80007a6:	2b01      	cmp	r3, #1
 80007a8:	d11f      	bne.n	80007ea <I2C_ClearADDRFlag+0x66>
			{
				// first disable the ack
				I2C_ManageAcking(pI2CHandle->pI2Cx, DISABLE);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	2100      	movs	r1, #0
 80007b0:	4618      	mov	r0, r3
 80007b2:	f000 f8eb 	bl	800098c <I2C_ManageAcking>

				// clear the ADDR flag (read SR1, read SR2)
				dummyRead = pI2CHandle->pI2Cx->SR1;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	695b      	ldr	r3, [r3, #20]
 80007bc:	60fb      	str	r3, [r7, #12]
				dummyRead = pI2CHandle->pI2Cx->SR2;
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	699b      	ldr	r3, [r3, #24]
 80007c4:	60fb      	str	r3, [r7, #12]
		dummyRead = pI2CHandle->pI2Cx->SR2;
		(void)dummyRead;
	}


}
 80007c6:	e010      	b.n	80007ea <I2C_ClearADDRFlag+0x66>
			dummyRead = pI2CHandle->pI2Cx->SR1;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	695b      	ldr	r3, [r3, #20]
 80007ce:	60fb      	str	r3, [r7, #12]
			dummyRead = pI2CHandle->pI2Cx->SR2;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	699b      	ldr	r3, [r3, #24]
 80007d6:	60fb      	str	r3, [r7, #12]
}
 80007d8:	e007      	b.n	80007ea <I2C_ClearADDRFlag+0x66>
		dummyRead = pI2CHandle->pI2Cx->SR1;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	695b      	ldr	r3, [r3, #20]
 80007e0:	60fb      	str	r3, [r7, #12]
		dummyRead = pI2CHandle->pI2Cx->SR2;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	699b      	ldr	r3, [r3, #24]
 80007e8:	60fb      	str	r3, [r7, #12]
}
 80007ea:	bf00      	nop
 80007ec:	3710      	adds	r7, #16
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <I2C_generateStopCondition>:
void I2C_generateStopCondition(I2C_RegDef_t *pI2Cx)
{
 80007f2:	b480      	push	{r7}
 80007f4:	b083      	sub	sp, #12
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	601a      	str	r2, [r3, #0]
}
 8000806:	bf00      	nop
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr

08000812 <I2C_SlaveSendData>:

	return busystate;
}

void I2C_SlaveSendData(I2C_RegDef_t *pI2Cx, uint8_t data)
{
 8000812:	b480      	push	{r7}
 8000814:	b083      	sub	sp, #12
 8000816:	af00      	add	r7, sp, #0
 8000818:	6078      	str	r0, [r7, #4]
 800081a:	460b      	mov	r3, r1
 800081c:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = data;
 800081e:	78fa      	ldrb	r2, [r7, #3]
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	611a      	str	r2, [r3, #16]
}
 8000824:	bf00      	nop
 8000826:	370c      	adds	r7, #12
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr

08000830 <I2C_SlaveReceiveData>:

uint8_t I2C_SlaveReceiveData(I2C_RegDef_t *pI2Cx)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
	return (uint8_t)pI2Cx->DR;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	691b      	ldr	r3, [r3, #16]
 800083c:	b2db      	uxtb	r3, r3
}
 800083e:	4618      	mov	r0, r3
 8000840:	370c      	adds	r7, #12
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
	...

0800084c <I2C_IRQInterruptConfig>:
 *
 *@Note					-
 *
 */
void I2C_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	460a      	mov	r2, r1
 8000856:	71fb      	strb	r3, [r7, #7]
 8000858:	4613      	mov	r3, r2
 800085a:	71bb      	strb	r3, [r7, #6]
	if(EnorDi == ENABLE)
 800085c:	79bb      	ldrb	r3, [r7, #6]
 800085e:	2b01      	cmp	r3, #1
 8000860:	d133      	bne.n	80008ca <I2C_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31)
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	2b1f      	cmp	r3, #31
 8000866:	d80a      	bhi.n	800087e <I2C_IRQInterruptConfig+0x32>
		{
			// program ISER0 register
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000868:	4b35      	ldr	r3, [pc, #212]	; (8000940 <I2C_IRQInterruptConfig+0xf4>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	79fa      	ldrb	r2, [r7, #7]
 800086e:	2101      	movs	r1, #1
 8000870:	fa01 f202 	lsl.w	r2, r1, r2
 8000874:	4611      	mov	r1, r2
 8000876:	4a32      	ldr	r2, [pc, #200]	; (8000940 <I2C_IRQInterruptConfig+0xf4>)
 8000878:	430b      	orrs	r3, r1
 800087a:	6013      	str	r3, [r2, #0]
		{
			// program ISER2 register
			*NVIC_ICER1 |= (1 << (IRQNumber % 64));
		}
	}
}
 800087c:	e059      	b.n	8000932 <I2C_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 31 && IRQNumber < 64)
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	2b1f      	cmp	r3, #31
 8000882:	d90f      	bls.n	80008a4 <I2C_IRQInterruptConfig+0x58>
 8000884:	79fb      	ldrb	r3, [r7, #7]
 8000886:	2b3f      	cmp	r3, #63	; 0x3f
 8000888:	d80c      	bhi.n	80008a4 <I2C_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 800088a:	4b2e      	ldr	r3, [pc, #184]	; (8000944 <I2C_IRQInterruptConfig+0xf8>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	79fa      	ldrb	r2, [r7, #7]
 8000890:	f002 021f 	and.w	r2, r2, #31
 8000894:	2101      	movs	r1, #1
 8000896:	fa01 f202 	lsl.w	r2, r1, r2
 800089a:	4611      	mov	r1, r2
 800089c:	4a29      	ldr	r2, [pc, #164]	; (8000944 <I2C_IRQInterruptConfig+0xf8>)
 800089e:	430b      	orrs	r3, r1
 80008a0:	6013      	str	r3, [r2, #0]
 80008a2:	e046      	b.n	8000932 <I2C_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96)
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	2b3f      	cmp	r3, #63	; 0x3f
 80008a8:	d943      	bls.n	8000932 <I2C_IRQInterruptConfig+0xe6>
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	2b5f      	cmp	r3, #95	; 0x5f
 80008ae:	d840      	bhi.n	8000932 <I2C_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= (1 << (IRQNumber % 32));
 80008b0:	4b25      	ldr	r3, [pc, #148]	; (8000948 <I2C_IRQInterruptConfig+0xfc>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	79fa      	ldrb	r2, [r7, #7]
 80008b6:	f002 021f 	and.w	r2, r2, #31
 80008ba:	2101      	movs	r1, #1
 80008bc:	fa01 f202 	lsl.w	r2, r1, r2
 80008c0:	4611      	mov	r1, r2
 80008c2:	4a21      	ldr	r2, [pc, #132]	; (8000948 <I2C_IRQInterruptConfig+0xfc>)
 80008c4:	430b      	orrs	r3, r1
 80008c6:	6013      	str	r3, [r2, #0]
}
 80008c8:	e033      	b.n	8000932 <I2C_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	2b1f      	cmp	r3, #31
 80008ce:	d80a      	bhi.n	80008e6 <I2C_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 80008d0:	4b1e      	ldr	r3, [pc, #120]	; (800094c <I2C_IRQInterruptConfig+0x100>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	79fa      	ldrb	r2, [r7, #7]
 80008d6:	2101      	movs	r1, #1
 80008d8:	fa01 f202 	lsl.w	r2, r1, r2
 80008dc:	4611      	mov	r1, r2
 80008de:	4a1b      	ldr	r2, [pc, #108]	; (800094c <I2C_IRQInterruptConfig+0x100>)
 80008e0:	430b      	orrs	r3, r1
 80008e2:	6013      	str	r3, [r2, #0]
}
 80008e4:	e025      	b.n	8000932 <I2C_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 31 && IRQNumber < 64)
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	2b1f      	cmp	r3, #31
 80008ea:	d90f      	bls.n	800090c <I2C_IRQInterruptConfig+0xc0>
 80008ec:	79fb      	ldrb	r3, [r7, #7]
 80008ee:	2b3f      	cmp	r3, #63	; 0x3f
 80008f0:	d80c      	bhi.n	800090c <I2C_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 80008f2:	4b17      	ldr	r3, [pc, #92]	; (8000950 <I2C_IRQInterruptConfig+0x104>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	79fa      	ldrb	r2, [r7, #7]
 80008f8:	f002 021f 	and.w	r2, r2, #31
 80008fc:	2101      	movs	r1, #1
 80008fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000902:	4611      	mov	r1, r2
 8000904:	4a12      	ldr	r2, [pc, #72]	; (8000950 <I2C_IRQInterruptConfig+0x104>)
 8000906:	430b      	orrs	r3, r1
 8000908:	6013      	str	r3, [r2, #0]
 800090a:	e012      	b.n	8000932 <I2C_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96)
 800090c:	79fb      	ldrb	r3, [r7, #7]
 800090e:	2b3f      	cmp	r3, #63	; 0x3f
 8000910:	d90f      	bls.n	8000932 <I2C_IRQInterruptConfig+0xe6>
 8000912:	79fb      	ldrb	r3, [r7, #7]
 8000914:	2b5f      	cmp	r3, #95	; 0x5f
 8000916:	d80c      	bhi.n	8000932 <I2C_IRQInterruptConfig+0xe6>
			*NVIC_ICER1 |= (1 << (IRQNumber % 64));
 8000918:	4b0d      	ldr	r3, [pc, #52]	; (8000950 <I2C_IRQInterruptConfig+0x104>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	79fa      	ldrb	r2, [r7, #7]
 800091e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000922:	2101      	movs	r1, #1
 8000924:	fa01 f202 	lsl.w	r2, r1, r2
 8000928:	4611      	mov	r1, r2
 800092a:	4a09      	ldr	r2, [pc, #36]	; (8000950 <I2C_IRQInterruptConfig+0x104>)
 800092c:	430b      	orrs	r3, r1
 800092e:	6013      	str	r3, [r2, #0]
}
 8000930:	e7ff      	b.n	8000932 <I2C_IRQInterruptConfig+0xe6>
 8000932:	bf00      	nop
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	e000e100 	.word	0xe000e100
 8000944:	e000e104 	.word	0xe000e104
 8000948:	e000e108 	.word	0xe000e108
 800094c:	e000e180 	.word	0xe000e180
 8000950:	e000e184 	.word	0xe000e184

08000954 <I2C_PeripheralControl>:
  *
  *@Note					-
  *
  */
 void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
 {
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
 800095c:	460b      	mov	r3, r1
 800095e:	70fb      	strb	r3, [r7, #3]
		if(EnorDi == ENABLE)
 8000960:	78fb      	ldrb	r3, [r7, #3]
 8000962:	2b01      	cmp	r3, #1
 8000964:	d106      	bne.n	8000974 <I2C_PeripheralControl+0x20>
		{
			pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f043 0201 	orr.w	r2, r3, #1
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	601a      	str	r2, [r3, #0]
		}
		else
		{
			pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
		}
 }
 8000972:	e005      	b.n	8000980 <I2C_PeripheralControl+0x2c>
			pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f023 0201 	bic.w	r2, r3, #1
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	601a      	str	r2, [r3, #0]
 }
 8000980:	bf00      	nop
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <I2C_ManageAcking>:
  *
  *@Note					-
  *
  */
 void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
 {
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
 8000994:	460b      	mov	r3, r1
 8000996:	70fb      	strb	r3, [r7, #3]
	 if(EnorDi == I2C_ACK_ENABLE)
 8000998:	78fb      	ldrb	r3, [r7, #3]
 800099a:	2b01      	cmp	r3, #1
 800099c:	d106      	bne.n	80009ac <I2C_ManageAcking+0x20>
	 {
		 // enable the ack
		 pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	601a      	str	r2, [r3, #0]
	 {
		 // disable the ack
		 pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
	 }

 }
 80009aa:	e005      	b.n	80009b8 <I2C_ManageAcking+0x2c>
		 pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	601a      	str	r2, [r3, #0]
 }
 80009b8:	bf00      	nop
 80009ba:	370c      	adds	r7, #12
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <I2C_EV_IRQHandling>:
  *
  * @Note              -  Interrupt handling for different I2C events (refer SR1)

  */
 void I2C_EV_IRQHandling(I2C_Handle_t *pI2CHandle)
 {
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]

 	//Interrupt handling for both master and slave mode of a device
	 uint32_t temp1, temp2, temp3;

	 temp1 = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITEVTEN);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80009d6:	617b      	str	r3, [r7, #20]
	 temp2 = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITBUFEN);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009e2:	613b      	str	r3, [r7, #16]

	 temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_SB);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	695b      	ldr	r3, [r3, #20]
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	60fb      	str	r3, [r7, #12]

 	//1. Handle For interrupt generated by SB event
 	//	Note : SB flag is only applicable in Master mode
	 if(temp1 && temp3)
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d01b      	beq.n	8000a2e <I2C_EV_IRQHandling+0x6a>
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d018      	beq.n	8000a2e <I2C_EV_IRQHandling+0x6a>
	 {
		 // interrupt is generated because of SB event
		 // this block will not be executed in slave mode because for slave SB is always zero
		 // in this block lets execute the address phase
		 if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	7f1b      	ldrb	r3, [r3, #28]
 8000a00:	2b02      	cmp	r3, #2
 8000a02:	d108      	bne.n	8000a16 <I2C_EV_IRQHandling+0x52>
		 {
			 I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx, pI2CHandle->DevAddr);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	7f5b      	ldrb	r3, [r3, #29]
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4610      	mov	r0, r2
 8000a10:	f7ff fe8c 	bl	800072c <I2C_ExecuteAddressPhaseWrite>
 8000a14:	e00b      	b.n	8000a2e <I2C_EV_IRQHandling+0x6a>
		 }
		 else if (pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	7f1b      	ldrb	r3, [r3, #28]
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d107      	bne.n	8000a2e <I2C_EV_IRQHandling+0x6a>
		 {
			 I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx, pI2CHandle->DevAddr);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	7f5b      	ldrb	r3, [r3, #29]
 8000a26:	4619      	mov	r1, r3
 8000a28:	4610      	mov	r0, r2
 8000a2a:	f7ff fe95 	bl	8000758 <I2C_ExecuteAddressPhaseRead>
		 }
	 }

	 temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_ADDR);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	695b      	ldr	r3, [r3, #20]
 8000a34:	f003 0302 	and.w	r3, r3, #2
 8000a38:	60fb      	str	r3, [r7, #12]
 	//2. Handle For interrupt generated by ADDR event
 	//Note : When master mode : Address is sent
 	//		 When Slave mode   : Address matched with own address
	 if(temp1 && temp3)
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d005      	beq.n	8000a4c <I2C_EV_IRQHandling+0x88>
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d002      	beq.n	8000a4c <I2C_EV_IRQHandling+0x88>
	 {
		 // interrupt is generated because of ADDR event
		 I2C_ClearADDRFlag(pI2CHandle);
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	f7ff fe9c 	bl	8000784 <I2C_ClearADDRFlag>
	 }

	 temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_BTF);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	695b      	ldr	r3, [r3, #20]
 8000a52:	f003 0304 	and.w	r3, r3, #4
 8000a56:	60fb      	str	r3, [r7, #12]
 	//3. Handle For interrupt generated by BTF(Byte Transfer Finished) event
	 if(temp1 && temp3)
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d022      	beq.n	8000aa4 <I2C_EV_IRQHandling+0xe0>
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d01f      	beq.n	8000aa4 <I2C_EV_IRQHandling+0xe0>
	 {
		 // interrupt is generated because of BTF event
		 if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	7f1b      	ldrb	r3, [r3, #28]
 8000a68:	2b02      	cmp	r3, #2
 8000a6a:	d11b      	bne.n	8000aa4 <I2C_EV_IRQHandling+0xe0>
		 {
			 // make sure that TXE is also set
			 if(pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_TxE))
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	695b      	ldr	r3, [r3, #20]
 8000a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d014      	beq.n	8000aa4 <I2C_EV_IRQHandling+0xe0>
			 {
				 // BTF, TXE = 1 , close the transmission

				 if(pI2CHandle->TXLen == 0)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	695b      	ldr	r3, [r3, #20]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d110      	bne.n	8000aa4 <I2C_EV_IRQHandling+0xe0>
				 {
					 // 1. generate the STOP condition
					 if(pI2CHandle->Sr == I2C_DISABLE_SR)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d104      	bne.n	8000a96 <I2C_EV_IRQHandling+0xd2>
						 I2C_generateStartCondition(pI2CHandle->pI2Cx);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff fe3b 	bl	800070c <I2C_generateStartCondition>

					 // 2. reset all the member elements of the handle structure.
					 I2C_CloseSendData(pI2CHandle);
 8000a96:	6878      	ldr	r0, [r7, #4]
 8000a98:	f000 f904 	bl	8000ca4 <I2C_CloseSendData>

					 // 3. notify the application about the transmission complete
					 I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_TX_CMPLT);
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	6878      	ldr	r0, [r7, #4]
 8000aa0:	f7ff fc2a 	bl	80002f8 <I2C_ApplicationEventCallback>
		 {
			 // nothing to do
		 }
	 }

	 temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_STOPF);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	695b      	ldr	r3, [r3, #20]
 8000aaa:	f003 0310 	and.w	r3, r3, #16
 8000aae:	60fb      	str	r3, [r7, #12]
 	//4. Handle For interrupt generated by STOPF event
 	// Note : Stop detection flag is applicable only slave mode . For master this flag will never be set
	 if(temp1 && temp3)
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d00c      	beq.n	8000ad0 <I2C_EV_IRQHandling+0x10c>
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d009      	beq.n	8000ad0 <I2C_EV_IRQHandling+0x10c>
	 {
		 // STOPF flag is set

		 // clear the STOP (i.e -> 1) read SR1 2) write to CR1)
		 pI2CHandle->pI2Cx->CR1 |= 0x0000;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	6812      	ldr	r2, [r2, #0]
 8000ac6:	601a      	str	r2, [r3, #0]

		 // notify the application that STOP is detected
		 I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_STOP);
 8000ac8:	2102      	movs	r1, #2
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f7ff fc14 	bl	80002f8 <I2C_ApplicationEventCallback>
	 }

	 temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_TxE);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	695b      	ldr	r3, [r3, #20]
 8000ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ada:	60fb      	str	r3, [r7, #12]
 	//5. Handle For interrupt generated by TXE event
	 if(temp1 && temp2 && temp3)
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d01f      	beq.n	8000b22 <I2C_EV_IRQHandling+0x15e>
 8000ae2:	693b      	ldr	r3, [r7, #16]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d01c      	beq.n	8000b22 <I2C_EV_IRQHandling+0x15e>
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d019      	beq.n	8000b22 <I2C_EV_IRQHandling+0x15e>
	 {
		 // check for device mode
		 if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL))
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	f003 0301 	and.w	r3, r3, #1
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d007      	beq.n	8000b0c <I2C_EV_IRQHandling+0x148>
		 {
			 // TXE flag is set
			 // we have to do data transmission
			 if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	7f1b      	ldrb	r3, [r3, #28]
 8000b00:	2b02      	cmp	r3, #2
 8000b02:	d10e      	bne.n	8000b22 <I2C_EV_IRQHandling+0x15e>
			 {
				 I2C_MasterHandleTXEInterrupt(pI2CHandle);
 8000b04:	6878      	ldr	r0, [r7, #4]
 8000b06:	f000 f839 	bl	8000b7c <I2C_MasterHandleTXEInterrupt>
 8000b0a:	e00a      	b.n	8000b22 <I2C_EV_IRQHandling+0x15e>
		 }
		 else
		 {
			 //slave
			 // make sure that the slave is really in transmitter mode
			 if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_TRA))
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	699b      	ldr	r3, [r3, #24]
 8000b12:	f003 0304 	and.w	r3, r3, #4
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d003      	beq.n	8000b22 <I2C_EV_IRQHandling+0x15e>
				 I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_DATA_REQ);
 8000b1a:	2108      	movs	r1, #8
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f7ff fbeb 	bl	80002f8 <I2C_ApplicationEventCallback>
		 }

	 }

	 temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_RxNE);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	695b      	ldr	r3, [r3, #20]
 8000b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b2c:	60fb      	str	r3, [r7, #12]
 	//6. Handle For interrupt generated by RXNE event
	 if(temp1 && temp2 && temp3)
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d01f      	beq.n	8000b74 <I2C_EV_IRQHandling+0x1b0>
 8000b34:	693b      	ldr	r3, [r7, #16]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d01c      	beq.n	8000b74 <I2C_EV_IRQHandling+0x1b0>
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d019      	beq.n	8000b74 <I2C_EV_IRQHandling+0x1b0>
	 {
		 // check for device mode
		 if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL))
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	699b      	ldr	r3, [r3, #24]
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d007      	beq.n	8000b5e <I2C_EV_IRQHandling+0x19a>
		 {
			 // the device is master

			 // RXNE flag is set
			 if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	7f1b      	ldrb	r3, [r3, #28]
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d10e      	bne.n	8000b74 <I2C_EV_IRQHandling+0x1b0>
			 {
				 I2C_MasterHandleRXNEInterrupt(pI2CHandle);
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f000 f82e 	bl	8000bb8 <I2C_MasterHandleRXNEInterrupt>
			 // make sure that the slave is really in receiver mode
			 if(!(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_TRA)))
				 I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_DATA_RCV);
		 }
	 }
 }
 8000b5c:	e00a      	b.n	8000b74 <I2C_EV_IRQHandling+0x1b0>
			 if(!(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_TRA)))
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	f003 0304 	and.w	r3, r3, #4
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d103      	bne.n	8000b74 <I2C_EV_IRQHandling+0x1b0>
				 I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_DATA_RCV);
 8000b6c:	2109      	movs	r1, #9
 8000b6e:	6878      	ldr	r0, [r7, #4]
 8000b70:	f7ff fbc2 	bl	80002f8 <I2C_ApplicationEventCallback>
 }
 8000b74:	bf00      	nop
 8000b76:	3718      	adds	r7, #24
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <I2C_MasterHandleTXEInterrupt>:
 static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle)
 {
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
	 if(pI2CHandle->TXLen > 0)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	695b      	ldr	r3, [r3, #20]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d00f      	beq.n	8000bac <I2C_MasterHandleTXEInterrupt+0x30>
	 {
		 // 1. load the data in to DR
		 pI2CHandle->pI2Cx->DR = *(pI2CHandle->pTxBuffer);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	781a      	ldrb	r2, [r3, #0]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	611a      	str	r2, [r3, #16]

		 // 2. decrement the TxLen
		 pI2CHandle->TXLen--;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	695b      	ldr	r3, [r3, #20]
 8000b9c:	1e5a      	subs	r2, r3, #1
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	615a      	str	r2, [r3, #20]

		 // 3. increment the buffer address
		 pI2CHandle->pTxBuffer++;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	68db      	ldr	r3, [r3, #12]
 8000ba6:	1c5a      	adds	r2, r3, #1
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	60da      	str	r2, [r3, #12]
	 }
 }
 8000bac:	bf00      	nop
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <I2C_MasterHandleRXNEInterrupt>:
static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
	 // we have to do the data reception
	 if(pI2CHandle->RxSize == 1)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6a1b      	ldr	r3, [r3, #32]
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d10b      	bne.n	8000be0 <I2C_MasterHandleRXNEInterrupt+0x28>
	 {
		 *pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	691a      	ldr	r2, [r3, #16]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	691b      	ldr	r3, [r3, #16]
 8000bd2:	b2d2      	uxtb	r2, r2
 8000bd4:	701a      	strb	r2, [r3, #0]
		 pI2CHandle->RXLen--;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	699b      	ldr	r3, [r3, #24]
 8000bda:	1e5a      	subs	r2, r3, #1
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	619a      	str	r2, [r3, #24]
	 }

	 if(pI2CHandle->RxSize > 1)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	6a1b      	ldr	r3, [r3, #32]
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d91a      	bls.n	8000c1e <I2C_MasterHandleRXNEInterrupt+0x66>
	 {
		 if(pI2CHandle->RXLen == 2)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	2b02      	cmp	r3, #2
 8000bee:	d105      	bne.n	8000bfc <I2C_MasterHandleRXNEInterrupt+0x44>
		 {
			 // clear the ack bit
			 I2C_ManageAcking(pI2CHandle->pI2Cx, DISABLE);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f7ff fec8 	bl	800098c <I2C_ManageAcking>
		 }
		 // read DR
		 *pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	691a      	ldr	r2, [r3, #16]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	691b      	ldr	r3, [r3, #16]
 8000c06:	b2d2      	uxtb	r2, r2
 8000c08:	701a      	strb	r2, [r3, #0]
		 pI2CHandle->RXLen--;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	699b      	ldr	r3, [r3, #24]
 8000c0e:	1e5a      	subs	r2, r3, #1
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	619a      	str	r2, [r3, #24]
		 pI2CHandle->pRxBuffer++;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	691b      	ldr	r3, [r3, #16]
 8000c18:	1c5a      	adds	r2, r3, #1
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	611a      	str	r2, [r3, #16]
	 }

	 if(pI2CHandle->RXLen == 0)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	699b      	ldr	r3, [r3, #24]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d110      	bne.n	8000c48 <I2C_MasterHandleRXNEInterrupt+0x90>
	 {
		 // close the I2C data reception and notify the application

		 // 1. generate the STOP condition
			if(pI2CHandle->Sr == I2C_DISABLE_SR)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d104      	bne.n	8000c3a <I2C_MasterHandleRXNEInterrupt+0x82>
				I2C_generateStopCondition(pI2CHandle->pI2Cx);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff fddc 	bl	80007f2 <I2C_generateStopCondition>

		 // 2. close the I2C rx
			I2C_closeReceiveData(pI2CHandle);
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f000 f808 	bl	8000c50 <I2C_closeReceiveData>

		 // 3. Notify the application
			I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_RX_CMPLT);
 8000c40:	2101      	movs	r1, #1
 8000c42:	6878      	ldr	r0, [r7, #4]
 8000c44:	f7ff fb58 	bl	80002f8 <I2C_ApplicationEventCallback>
	 }
}
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <I2C_closeReceiveData>:

void I2C_closeReceiveData(I2C_Handle_t *pI2CHandle)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
	// Implement the code to disable ITBUFEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	685a      	ldr	r2, [r3, #4]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000c66:	605a      	str	r2, [r3, #4]

	// Implement the code to disable ITEVFEN Control bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	685a      	ldr	r2, [r3, #4]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000c76:	605a      	str	r2, [r3, #4]

	pI2CHandle->TxRxState = I2C_READY;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pRxBuffer = NULL;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2200      	movs	r2, #0
 8000c82:	611a      	str	r2, [r3, #16]
	pI2CHandle->RXLen = 0;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2200      	movs	r2, #0
 8000c88:	619a      	str	r2, [r3, #24]
	pI2CHandle->RxSize = 0;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	621a      	str	r2, [r3, #32]
	I2C_ManageAcking(pI2CHandle->pI2Cx, ENABLE);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2101      	movs	r1, #1
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff fe78 	bl	800098c <I2C_ManageAcking>
}
 8000c9c:	bf00      	nop
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <I2C_CloseSendData>:

void I2C_CloseSendData(I2C_Handle_t *pI2CHandle)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
	// Implement the code to disable ITBUFEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	685a      	ldr	r2, [r3, #4]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000cba:	605a      	str	r2, [r3, #4]

	// Implement the code to disable ITEVFEN Control bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	685a      	ldr	r2, [r3, #4]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000cca:	605a      	str	r2, [r3, #4]

	pI2CHandle->TxRxState = I2C_READY;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2200      	movs	r2, #0
 8000cd0:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pTxBuffer = NULL;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	60da      	str	r2, [r3, #12]
	pI2CHandle->TXLen = 0;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2200      	movs	r2, #0
 8000cdc:	615a      	str	r2, [r3, #20]
}
 8000cde:	bf00      	nop
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr

08000cea <I2C_ER_IRQHandling>:
 						#define I2C_ERROR_OVR   6
 						#define I2C_ERROR_TIMEOUT 7

  */
 void I2C_ER_IRQHandling(I2C_Handle_t *pI2CHandle)
 {
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b084      	sub	sp, #16
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
		uint32_t temp1,temp2;

	    //Know the status of  ITERREN control bit in the CR2
		temp2 = (pI2CHandle->pI2Cx->CR2) & ( 1 << I2C_CR2_ITERREN);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cfc:	60fb      	str	r3, [r7, #12]


	/***********************Check for Bus error************************************/
		temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1<< I2C_SR1_BERR);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	695b      	ldr	r3, [r3, #20]
 8000d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d08:	60bb      	str	r3, [r7, #8]
		if(temp1  && temp2 )
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d00e      	beq.n	8000d2e <I2C_ER_IRQHandling+0x44>
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d00b      	beq.n	8000d2e <I2C_ER_IRQHandling+0x44>
		{
			//This is Bus error

			//Implement the code to clear the buss error flag
			pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_BERR);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	695a      	ldr	r2, [r3, #20]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000d24:	615a      	str	r2, [r3, #20]

			//Implement the code to notify the application about the error
		   I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_BERR);
 8000d26:	2103      	movs	r1, #3
 8000d28:	6878      	ldr	r0, [r7, #4]
 8000d2a:	f7ff fae5 	bl	80002f8 <I2C_ApplicationEventCallback>
		}

	/***********************Check for arbitration lost error************************************/
		temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_ARLO );
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	695b      	ldr	r3, [r3, #20]
 8000d34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d38:	60bb      	str	r3, [r7, #8]
		if(temp1  && temp2)
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d00e      	beq.n	8000d5e <I2C_ER_IRQHandling+0x74>
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d00b      	beq.n	8000d5e <I2C_ER_IRQHandling+0x74>
		{
			//This is arbitration lost error

			//Implement the code to clear the arbitration lost error flag
			pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_ARLO);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	695a      	ldr	r2, [r3, #20]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000d54:	615a      	str	r2, [r3, #20]

			//Implement the code to notify the application about the error
			I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_ARLO);
 8000d56:	2104      	movs	r1, #4
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f7ff facd 	bl	80002f8 <I2C_ApplicationEventCallback>
		}

	/***********************Check for ACK failure  error************************************/

		temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_AF);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	695b      	ldr	r3, [r3, #20]
 8000d64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d68:	60bb      	str	r3, [r7, #8]
		if(temp1  && temp2)
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d00e      	beq.n	8000d8e <I2C_ER_IRQHandling+0xa4>
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d00b      	beq.n	8000d8e <I2C_ER_IRQHandling+0xa4>
		{
			//This is ACK failure error

		    //Implement the code to clear the ACK failure error flag
			pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_AF);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	695a      	ldr	r2, [r3, #20]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d84:	615a      	str	r2, [r3, #20]

			//Implement the code to notify the application about the error
			I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_AF);
 8000d86:	2105      	movs	r1, #5
 8000d88:	6878      	ldr	r0, [r7, #4]
 8000d8a:	f7ff fab5 	bl	80002f8 <I2C_ApplicationEventCallback>
		}

	/***********************Check for Overrun/underrun error************************************/
		temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_OVR);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	695b      	ldr	r3, [r3, #20]
 8000d94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d98:	60bb      	str	r3, [r7, #8]
		if(temp1  && temp2)
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d00e      	beq.n	8000dbe <I2C_ER_IRQHandling+0xd4>
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d00b      	beq.n	8000dbe <I2C_ER_IRQHandling+0xd4>
		{
			//This is Overrun/underrun

		    //Implement the code to clear the Overrun/underrun error flag
			pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_OVR);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	695a      	ldr	r2, [r3, #20]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000db4:	615a      	str	r2, [r3, #20]

			//Implement the code to notify the application about the error
			I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_OVR);
 8000db6:	2106      	movs	r1, #6
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f7ff fa9d 	bl	80002f8 <I2C_ApplicationEventCallback>
		}

	/***********************Check for Time out error************************************/
		temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_TIMEOUT);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	695b      	ldr	r3, [r3, #20]
 8000dc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dc8:	60bb      	str	r3, [r7, #8]
		if(temp1  && temp2)
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d00e      	beq.n	8000dee <I2C_ER_IRQHandling+0x104>
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d00b      	beq.n	8000dee <I2C_ER_IRQHandling+0x104>
		{
			//This is Time out error

		    //Implement the code to clear the Time out error flag
			pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_TIMEOUT);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	695a      	ldr	r2, [r3, #20]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000de4:	615a      	str	r2, [r3, #20]

			//Implement the code to notify the application about the error
			I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_TIMEOUT);
 8000de6:	2107      	movs	r1, #7
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f7ff fa85 	bl	80002f8 <I2C_ApplicationEventCallback>
		}
 }
 8000dee:	bf00      	nop
 8000df0:	3710      	adds	r7, #16
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <I2C_SlaveEnableDisableCallbackEvents>:

 }


 void I2C_SlaveEnableDisableCallbackEvents(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
 {
 8000df6:	b480      	push	{r7}
 8000df8:	b083      	sub	sp, #12
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
 8000dfe:	460b      	mov	r3, r1
 8000e00:	70fb      	strb	r3, [r7, #3]
	 if(EnorDi == ENABLE)
 8000e02:	78fb      	ldrb	r3, [r7, #3]
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d112      	bne.n	8000e2e <I2C_SlaveEnableDisableCallbackEvents+0x38>
	 {
		 pI2Cx->CR2 |= (1 << I2C_CR2_ITEVTEN);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	605a      	str	r2, [r3, #4]
		 pI2Cx->CR2 |= (1 << I2C_CR2_ITBUFEN);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	605a      	str	r2, [r3, #4]
		 pI2Cx->CR2 |= (1 << I2C_CR2_ITERREN);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	605a      	str	r2, [r3, #4]
	 {
		 pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
		 pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
		 pI2Cx->CR2 &= ~(1 << I2C_CR2_ITERREN);
	 }
 }
 8000e2c:	e011      	b.n	8000e52 <I2C_SlaveEnableDisableCallbackEvents+0x5c>
		 pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	605a      	str	r2, [r3, #4]
		 pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	605a      	str	r2, [r3, #4]
		 pI2Cx->CR2 &= ~(1 << I2C_CR2_ITERREN);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	605a      	str	r2, [r3, #4]
 }
 8000e52:	bf00      	nop
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
	...

08000e60 <GPIO_PeripheralClockControl>:
 *
 *@Note					- none
 *
 */
void GPIO_PeripheralClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	460b      	mov	r3, r1
 8000e6a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000e6c:	78fb      	ldrb	r3, [r7, #3]
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d162      	bne.n	8000f38 <GPIO_PeripheralClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a64      	ldr	r2, [pc, #400]	; (8001008 <GPIO_PeripheralClockControl+0x1a8>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d106      	bne.n	8000e88 <GPIO_PeripheralClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000e7a:	4b64      	ldr	r3, [pc, #400]	; (800100c <GPIO_PeripheralClockControl+0x1ac>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	4a63      	ldr	r2, [pc, #396]	; (800100c <GPIO_PeripheralClockControl+0x1ac>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	6313      	str	r3, [r2, #48]	; 0x30
		else if(pGPIOx == GPIOI)
		{
			GPIOI_PCLK_DI();
		}
	}
}
 8000e86:	e0b9      	b.n	8000ffc <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	4a61      	ldr	r2, [pc, #388]	; (8001010 <GPIO_PeripheralClockControl+0x1b0>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d106      	bne.n	8000e9e <GPIO_PeripheralClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000e90:	4b5e      	ldr	r3, [pc, #376]	; (800100c <GPIO_PeripheralClockControl+0x1ac>)
 8000e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e94:	4a5d      	ldr	r2, [pc, #372]	; (800100c <GPIO_PeripheralClockControl+0x1ac>)
 8000e96:	f043 0302 	orr.w	r3, r3, #2
 8000e9a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000e9c:	e0ae      	b.n	8000ffc <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a5c      	ldr	r2, [pc, #368]	; (8001014 <GPIO_PeripheralClockControl+0x1b4>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d106      	bne.n	8000eb4 <GPIO_PeripheralClockControl+0x54>
			GPIOC_PCLK_EN();
 8000ea6:	4b59      	ldr	r3, [pc, #356]	; (800100c <GPIO_PeripheralClockControl+0x1ac>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	4a58      	ldr	r2, [pc, #352]	; (800100c <GPIO_PeripheralClockControl+0x1ac>)
 8000eac:	f043 0304 	orr.w	r3, r3, #4
 8000eb0:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000eb2:	e0a3      	b.n	8000ffc <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4a58      	ldr	r2, [pc, #352]	; (8001018 <GPIO_PeripheralClockControl+0x1b8>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d106      	bne.n	8000eca <GPIO_PeripheralClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000ebc:	4b53      	ldr	r3, [pc, #332]	; (800100c <GPIO_PeripheralClockControl+0x1ac>)
 8000ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec0:	4a52      	ldr	r2, [pc, #328]	; (800100c <GPIO_PeripheralClockControl+0x1ac>)
 8000ec2:	f043 0308 	orr.w	r3, r3, #8
 8000ec6:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ec8:	e098      	b.n	8000ffc <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4a53      	ldr	r2, [pc, #332]	; (800101c <GPIO_PeripheralClockControl+0x1bc>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d106      	bne.n	8000ee0 <GPIO_PeripheralClockControl+0x80>
			GPIOE_PCLK_EN();
 8000ed2:	4b4e      	ldr	r3, [pc, #312]	; (800100c <GPIO_PeripheralClockControl+0x1ac>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	4a4d      	ldr	r2, [pc, #308]	; (800100c <GPIO_PeripheralClockControl+0x1ac>)
 8000ed8:	f043 0310 	orr.w	r3, r3, #16
 8000edc:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ede:	e08d      	b.n	8000ffc <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	4a4f      	ldr	r2, [pc, #316]	; (8001020 <GPIO_PeripheralClockControl+0x1c0>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d106      	bne.n	8000ef6 <GPIO_PeripheralClockControl+0x96>
			GPIOF_PCLK_EN();
 8000ee8:	4b48      	ldr	r3, [pc, #288]	; (800100c <GPIO_PeripheralClockControl+0x1ac>)
 8000eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eec:	4a47      	ldr	r2, [pc, #284]	; (800100c <GPIO_PeripheralClockControl+0x1ac>)
 8000eee:	f043 0320 	orr.w	r3, r3, #32
 8000ef2:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ef4:	e082      	b.n	8000ffc <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a4a      	ldr	r2, [pc, #296]	; (8001024 <GPIO_PeripheralClockControl+0x1c4>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d106      	bne.n	8000f0c <GPIO_PeripheralClockControl+0xac>
			GPIOG_PCLK_EN();
 8000efe:	4b43      	ldr	r3, [pc, #268]	; (800100c <GPIO_PeripheralClockControl+0x1ac>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	4a42      	ldr	r2, [pc, #264]	; (800100c <GPIO_PeripheralClockControl+0x1ac>)
 8000f04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f08:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f0a:	e077      	b.n	8000ffc <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4a46      	ldr	r2, [pc, #280]	; (8001028 <GPIO_PeripheralClockControl+0x1c8>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d106      	bne.n	8000f22 <GPIO_PeripheralClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000f14:	4b3d      	ldr	r3, [pc, #244]	; (800100c <GPIO_PeripheralClockControl+0x1ac>)
 8000f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f18:	4a3c      	ldr	r2, [pc, #240]	; (800100c <GPIO_PeripheralClockControl+0x1ac>)
 8000f1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f1e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f20:	e06c      	b.n	8000ffc <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a41      	ldr	r2, [pc, #260]	; (800102c <GPIO_PeripheralClockControl+0x1cc>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d168      	bne.n	8000ffc <GPIO_PeripheralClockControl+0x19c>
			GPIOI_PCLK_EN();
 8000f2a:	4b38      	ldr	r3, [pc, #224]	; (800100c <GPIO_PeripheralClockControl+0x1ac>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	4a37      	ldr	r2, [pc, #220]	; (800100c <GPIO_PeripheralClockControl+0x1ac>)
 8000f30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f34:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f36:	e061      	b.n	8000ffc <GPIO_PeripheralClockControl+0x19c>
		if(pGPIOx == GPIOA)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4a33      	ldr	r2, [pc, #204]	; (8001008 <GPIO_PeripheralClockControl+0x1a8>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d106      	bne.n	8000f4e <GPIO_PeripheralClockControl+0xee>
			GPIOA_PCLK_DI();
 8000f40:	4b32      	ldr	r3, [pc, #200]	; (800100c <GPIO_PeripheralClockControl+0x1ac>)
 8000f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f44:	4a31      	ldr	r2, [pc, #196]	; (800100c <GPIO_PeripheralClockControl+0x1ac>)
 8000f46:	f023 0301 	bic.w	r3, r3, #1
 8000f4a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f4c:	e056      	b.n	8000ffc <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a2f      	ldr	r2, [pc, #188]	; (8001010 <GPIO_PeripheralClockControl+0x1b0>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d106      	bne.n	8000f64 <GPIO_PeripheralClockControl+0x104>
			GPIOB_PCLK_DI();
 8000f56:	4b2d      	ldr	r3, [pc, #180]	; (800100c <GPIO_PeripheralClockControl+0x1ac>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	4a2c      	ldr	r2, [pc, #176]	; (800100c <GPIO_PeripheralClockControl+0x1ac>)
 8000f5c:	f023 0302 	bic.w	r3, r3, #2
 8000f60:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f62:	e04b      	b.n	8000ffc <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4a2b      	ldr	r2, [pc, #172]	; (8001014 <GPIO_PeripheralClockControl+0x1b4>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d106      	bne.n	8000f7a <GPIO_PeripheralClockControl+0x11a>
			GPIOC_PCLK_DI();
 8000f6c:	4b27      	ldr	r3, [pc, #156]	; (800100c <GPIO_PeripheralClockControl+0x1ac>)
 8000f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f70:	4a26      	ldr	r2, [pc, #152]	; (800100c <GPIO_PeripheralClockControl+0x1ac>)
 8000f72:	f023 0304 	bic.w	r3, r3, #4
 8000f76:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f78:	e040      	b.n	8000ffc <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a26      	ldr	r2, [pc, #152]	; (8001018 <GPIO_PeripheralClockControl+0x1b8>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d106      	bne.n	8000f90 <GPIO_PeripheralClockControl+0x130>
			GPIOD_PCLK_DI();
 8000f82:	4b22      	ldr	r3, [pc, #136]	; (800100c <GPIO_PeripheralClockControl+0x1ac>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	4a21      	ldr	r2, [pc, #132]	; (800100c <GPIO_PeripheralClockControl+0x1ac>)
 8000f88:	f023 0308 	bic.w	r3, r3, #8
 8000f8c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f8e:	e035      	b.n	8000ffc <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4a22      	ldr	r2, [pc, #136]	; (800101c <GPIO_PeripheralClockControl+0x1bc>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d106      	bne.n	8000fa6 <GPIO_PeripheralClockControl+0x146>
			GPIOE_PCLK_DI();
 8000f98:	4b1c      	ldr	r3, [pc, #112]	; (800100c <GPIO_PeripheralClockControl+0x1ac>)
 8000f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9c:	4a1b      	ldr	r2, [pc, #108]	; (800100c <GPIO_PeripheralClockControl+0x1ac>)
 8000f9e:	f023 0310 	bic.w	r3, r3, #16
 8000fa2:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000fa4:	e02a      	b.n	8000ffc <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a1d      	ldr	r2, [pc, #116]	; (8001020 <GPIO_PeripheralClockControl+0x1c0>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d106      	bne.n	8000fbc <GPIO_PeripheralClockControl+0x15c>
			GPIOF_PCLK_DI();
 8000fae:	4b17      	ldr	r3, [pc, #92]	; (800100c <GPIO_PeripheralClockControl+0x1ac>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a16      	ldr	r2, [pc, #88]	; (800100c <GPIO_PeripheralClockControl+0x1ac>)
 8000fb4:	f023 0320 	bic.w	r3, r3, #32
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000fba:	e01f      	b.n	8000ffc <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	4a19      	ldr	r2, [pc, #100]	; (8001024 <GPIO_PeripheralClockControl+0x1c4>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d106      	bne.n	8000fd2 <GPIO_PeripheralClockControl+0x172>
			GPIOG_PCLK_DI();
 8000fc4:	4b11      	ldr	r3, [pc, #68]	; (800100c <GPIO_PeripheralClockControl+0x1ac>)
 8000fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc8:	4a10      	ldr	r2, [pc, #64]	; (800100c <GPIO_PeripheralClockControl+0x1ac>)
 8000fca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000fce:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000fd0:	e014      	b.n	8000ffc <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a14      	ldr	r2, [pc, #80]	; (8001028 <GPIO_PeripheralClockControl+0x1c8>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d106      	bne.n	8000fe8 <GPIO_PeripheralClockControl+0x188>
			GPIOH_PCLK_DI();
 8000fda:	4b0c      	ldr	r3, [pc, #48]	; (800100c <GPIO_PeripheralClockControl+0x1ac>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	4a0b      	ldr	r2, [pc, #44]	; (800100c <GPIO_PeripheralClockControl+0x1ac>)
 8000fe0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000fe4:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000fe6:	e009      	b.n	8000ffc <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4a10      	ldr	r2, [pc, #64]	; (800102c <GPIO_PeripheralClockControl+0x1cc>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d105      	bne.n	8000ffc <GPIO_PeripheralClockControl+0x19c>
			GPIOI_PCLK_DI();
 8000ff0:	4b06      	ldr	r3, [pc, #24]	; (800100c <GPIO_PeripheralClockControl+0x1ac>)
 8000ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff4:	4a05      	ldr	r2, [pc, #20]	; (800100c <GPIO_PeripheralClockControl+0x1ac>)
 8000ff6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ffa:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	40020000 	.word	0x40020000
 800100c:	40023800 	.word	0x40023800
 8001010:	40020400 	.word	0x40020400
 8001014:	40020800 	.word	0x40020800
 8001018:	40020c00 	.word	0x40020c00
 800101c:	40021000 	.word	0x40021000
 8001020:	40021400 	.word	0x40021400
 8001024:	40021800 	.word	0x40021800
 8001028:	40021c00 	.word	0x40021c00
 800102c:	40022000 	.word	0x40022000

08001030 <GPIO_Init>:

/*
 * Init and De-init
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0; // temp register
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]

	// enable the peripheral clock
	GPIO_PeripheralClockControl(pGPIOHandle->pGPIOx, ENABLE);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2101      	movs	r1, #1
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff ff0c 	bl	8000e60 <GPIO_PeripheralClockControl>

	// 1. configure the mode of gpio pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	795b      	ldrb	r3, [r3, #5]
 800104c:	2b03      	cmp	r3, #3
 800104e:	d820      	bhi.n	8001092 <GPIO_Init+0x62>
	{
		// the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	795b      	ldrb	r3, [r3, #5]
 8001054:	461a      	mov	r2, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	791b      	ldrb	r3, [r3, #4]
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clear
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	791b      	ldrb	r3, [r3, #4]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	2103      	movs	r1, #3
 8001070:	fa01 f303 	lsl.w	r3, r1, r3
 8001074:	43db      	mvns	r3, r3
 8001076:	4619      	mov	r1, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	400a      	ands	r2, r1
 800107e:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;	// setting
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	6819      	ldr	r1, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	697a      	ldr	r2, [r7, #20]
 800108c:	430a      	orrs	r2, r1
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	e0c1      	b.n	8001216 <GPIO_Init+0x1e6>

	}
	else
	{
		// this part will code later (interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	795b      	ldrb	r3, [r3, #5]
 8001096:	2b04      	cmp	r3, #4
 8001098:	d117      	bne.n	80010ca <GPIO_Init+0x9a>
		{
			// 1. configure the FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800109a:	4b47      	ldr	r3, [pc, #284]	; (80011b8 <GPIO_Init+0x188>)
 800109c:	68db      	ldr	r3, [r3, #12]
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	7912      	ldrb	r2, [r2, #4]
 80010a2:	4611      	mov	r1, r2
 80010a4:	2201      	movs	r2, #1
 80010a6:	408a      	lsls	r2, r1
 80010a8:	4611      	mov	r1, r2
 80010aa:	4a43      	ldr	r2, [pc, #268]	; (80011b8 <GPIO_Init+0x188>)
 80010ac:	430b      	orrs	r3, r1
 80010ae:	60d3      	str	r3, [r2, #12]
			// Clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80010b0:	4b41      	ldr	r3, [pc, #260]	; (80011b8 <GPIO_Init+0x188>)
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	7912      	ldrb	r2, [r2, #4]
 80010b8:	4611      	mov	r1, r2
 80010ba:	2201      	movs	r2, #1
 80010bc:	408a      	lsls	r2, r1
 80010be:	43d2      	mvns	r2, r2
 80010c0:	4611      	mov	r1, r2
 80010c2:	4a3d      	ldr	r2, [pc, #244]	; (80011b8 <GPIO_Init+0x188>)
 80010c4:	400b      	ands	r3, r1
 80010c6:	6093      	str	r3, [r2, #8]
 80010c8:	e035      	b.n	8001136 <GPIO_Init+0x106>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	795b      	ldrb	r3, [r3, #5]
 80010ce:	2b05      	cmp	r3, #5
 80010d0:	d117      	bne.n	8001102 <GPIO_Init+0xd2>
		{
			// 1. configure the RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80010d2:	4b39      	ldr	r3, [pc, #228]	; (80011b8 <GPIO_Init+0x188>)
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	7912      	ldrb	r2, [r2, #4]
 80010da:	4611      	mov	r1, r2
 80010dc:	2201      	movs	r2, #1
 80010de:	408a      	lsls	r2, r1
 80010e0:	4611      	mov	r1, r2
 80010e2:	4a35      	ldr	r2, [pc, #212]	; (80011b8 <GPIO_Init+0x188>)
 80010e4:	430b      	orrs	r3, r1
 80010e6:	6093      	str	r3, [r2, #8]
			// Clear the corresponding FTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80010e8:	4b33      	ldr	r3, [pc, #204]	; (80011b8 <GPIO_Init+0x188>)
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	687a      	ldr	r2, [r7, #4]
 80010ee:	7912      	ldrb	r2, [r2, #4]
 80010f0:	4611      	mov	r1, r2
 80010f2:	2201      	movs	r2, #1
 80010f4:	408a      	lsls	r2, r1
 80010f6:	43d2      	mvns	r2, r2
 80010f8:	4611      	mov	r1, r2
 80010fa:	4a2f      	ldr	r2, [pc, #188]	; (80011b8 <GPIO_Init+0x188>)
 80010fc:	400b      	ands	r3, r1
 80010fe:	60d3      	str	r3, [r2, #12]
 8001100:	e019      	b.n	8001136 <GPIO_Init+0x106>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	795b      	ldrb	r3, [r3, #5]
 8001106:	2b06      	cmp	r3, #6
 8001108:	d115      	bne.n	8001136 <GPIO_Init+0x106>
		{
			// 1. configure both FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800110a:	4b2b      	ldr	r3, [pc, #172]	; (80011b8 <GPIO_Init+0x188>)
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	7912      	ldrb	r2, [r2, #4]
 8001112:	4611      	mov	r1, r2
 8001114:	2201      	movs	r2, #1
 8001116:	408a      	lsls	r2, r1
 8001118:	4611      	mov	r1, r2
 800111a:	4a27      	ldr	r2, [pc, #156]	; (80011b8 <GPIO_Init+0x188>)
 800111c:	430b      	orrs	r3, r1
 800111e:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001120:	4b25      	ldr	r3, [pc, #148]	; (80011b8 <GPIO_Init+0x188>)
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	7912      	ldrb	r2, [r2, #4]
 8001128:	4611      	mov	r1, r2
 800112a:	2201      	movs	r2, #1
 800112c:	408a      	lsls	r2, r1
 800112e:	4611      	mov	r1, r2
 8001130:	4a21      	ldr	r2, [pc, #132]	; (80011b8 <GPIO_Init+0x188>)
 8001132:	430b      	orrs	r3, r1
 8001134:	6093      	str	r3, [r2, #8]
		}

		// 2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	791b      	ldrb	r3, [r3, #4]
 800113a:	089b      	lsrs	r3, r3, #2
 800113c:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	791b      	ldrb	r3, [r3, #4]
 8001142:	f003 0303 	and.w	r3, r3, #3
 8001146:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a1b      	ldr	r2, [pc, #108]	; (80011bc <GPIO_Init+0x18c>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d044      	beq.n	80011dc <GPIO_Init+0x1ac>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a1a      	ldr	r2, [pc, #104]	; (80011c0 <GPIO_Init+0x190>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d02b      	beq.n	80011b4 <GPIO_Init+0x184>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a18      	ldr	r2, [pc, #96]	; (80011c4 <GPIO_Init+0x194>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d024      	beq.n	80011b0 <GPIO_Init+0x180>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a17      	ldr	r2, [pc, #92]	; (80011c8 <GPIO_Init+0x198>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d01d      	beq.n	80011ac <GPIO_Init+0x17c>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a15      	ldr	r2, [pc, #84]	; (80011cc <GPIO_Init+0x19c>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d016      	beq.n	80011a8 <GPIO_Init+0x178>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a14      	ldr	r2, [pc, #80]	; (80011d0 <GPIO_Init+0x1a0>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d00f      	beq.n	80011a4 <GPIO_Init+0x174>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a12      	ldr	r2, [pc, #72]	; (80011d4 <GPIO_Init+0x1a4>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d008      	beq.n	80011a0 <GPIO_Init+0x170>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a11      	ldr	r2, [pc, #68]	; (80011d8 <GPIO_Init+0x1a8>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d101      	bne.n	800119c <GPIO_Init+0x16c>
 8001198:	2307      	movs	r3, #7
 800119a:	e020      	b.n	80011de <GPIO_Init+0x1ae>
 800119c:	2308      	movs	r3, #8
 800119e:	e01e      	b.n	80011de <GPIO_Init+0x1ae>
 80011a0:	2306      	movs	r3, #6
 80011a2:	e01c      	b.n	80011de <GPIO_Init+0x1ae>
 80011a4:	2305      	movs	r3, #5
 80011a6:	e01a      	b.n	80011de <GPIO_Init+0x1ae>
 80011a8:	2304      	movs	r3, #4
 80011aa:	e018      	b.n	80011de <GPIO_Init+0x1ae>
 80011ac:	2303      	movs	r3, #3
 80011ae:	e016      	b.n	80011de <GPIO_Init+0x1ae>
 80011b0:	2302      	movs	r3, #2
 80011b2:	e014      	b.n	80011de <GPIO_Init+0x1ae>
 80011b4:	2301      	movs	r3, #1
 80011b6:	e012      	b.n	80011de <GPIO_Init+0x1ae>
 80011b8:	40013c00 	.word	0x40013c00
 80011bc:	40020000 	.word	0x40020000
 80011c0:	40020400 	.word	0x40020400
 80011c4:	40020800 	.word	0x40020800
 80011c8:	40020c00 	.word	0x40020c00
 80011cc:	40021000 	.word	0x40021000
 80011d0:	40021400 	.word	0x40021400
 80011d4:	40021800 	.word	0x40021800
 80011d8:	40021c00 	.word	0x40021c00
 80011dc:	2300      	movs	r3, #0
 80011de:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80011e0:	4b5c      	ldr	r3, [pc, #368]	; (8001354 <GPIO_Init+0x324>)
 80011e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e4:	4a5b      	ldr	r2, [pc, #364]	; (8001354 <GPIO_Init+0x324>)
 80011e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011ea:	6453      	str	r3, [r2, #68]	; 0x44
		SYS_CFG->EXTICR[temp1] = portcode << (temp2 * 4);
 80011ec:	7c7a      	ldrb	r2, [r7, #17]
 80011ee:	7cbb      	ldrb	r3, [r7, #18]
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	fa02 f103 	lsl.w	r1, r2, r3
 80011f6:	4a58      	ldr	r2, [pc, #352]	; (8001358 <GPIO_Init+0x328>)
 80011f8:	7cfb      	ldrb	r3, [r7, #19]
 80011fa:	3302      	adds	r3, #2
 80011fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]


		// 3. enable the exti interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001200:	4b56      	ldr	r3, [pc, #344]	; (800135c <GPIO_Init+0x32c>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	7912      	ldrb	r2, [r2, #4]
 8001208:	4611      	mov	r1, r2
 800120a:	2201      	movs	r2, #1
 800120c:	408a      	lsls	r2, r1
 800120e:	4611      	mov	r1, r2
 8001210:	4a52      	ldr	r2, [pc, #328]	; (800135c <GPIO_Init+0x32c>)
 8001212:	430b      	orrs	r3, r1
 8001214:	6013      	str	r3, [r2, #0]
	}

	// 2. configure the speed
	temp = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	799b      	ldrb	r3, [r3, #6]
 800121e:	461a      	mov	r2, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	791b      	ldrb	r3, [r3, #4]
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clear
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	689a      	ldr	r2, [r3, #8]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	791b      	ldrb	r3, [r3, #4]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	2103      	movs	r1, #3
 800123a:	fa01 f303 	lsl.w	r3, r1, r3
 800123e:	43db      	mvns	r3, r3
 8001240:	4619      	mov	r1, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	400a      	ands	r2, r1
 8001248:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;	// setting
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	6899      	ldr	r1, [r3, #8]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	697a      	ldr	r2, [r7, #20]
 8001256:	430a      	orrs	r2, r1
 8001258:	609a      	str	r2, [r3, #8]

	// 3. configure the pupd settings
	temp = 0;
 800125a:	2300      	movs	r3, #0
 800125c:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	79db      	ldrb	r3, [r3, #7]
 8001262:	461a      	mov	r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	791b      	ldrb	r3, [r3, #4]
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clear
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	68da      	ldr	r2, [r3, #12]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	791b      	ldrb	r3, [r3, #4]
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	2103      	movs	r1, #3
 800127e:	fa01 f303 	lsl.w	r3, r1, r3
 8001282:	43db      	mvns	r3, r3
 8001284:	4619      	mov	r1, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	400a      	ands	r2, r1
 800128c:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;	// setting
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	68d9      	ldr	r1, [r3, #12]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	697a      	ldr	r2, [r7, #20]
 800129a:	430a      	orrs	r2, r1
 800129c:	60da      	str	r2, [r3, #12]


	// 4. configure the optype
	temp = 0;
 800129e:	2300      	movs	r3, #0
 80012a0:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	7a1b      	ldrb	r3, [r3, #8]
 80012a6:	461a      	mov	r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	791b      	ldrb	r3, [r3, #4]
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x01 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clear
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	685a      	ldr	r2, [r3, #4]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	791b      	ldrb	r3, [r3, #4]
 80012bc:	4619      	mov	r1, r3
 80012be:	2301      	movs	r3, #1
 80012c0:	408b      	lsls	r3, r1
 80012c2:	43db      	mvns	r3, r3
 80012c4:	4619      	mov	r1, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	400a      	ands	r2, r1
 80012cc:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;	// setting
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	6859      	ldr	r1, [r3, #4]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	697a      	ldr	r2, [r7, #20]
 80012da:	430a      	orrs	r2, r1
 80012dc:	605a      	str	r2, [r3, #4]

	// 5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	795b      	ldrb	r3, [r3, #5]
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d131      	bne.n	800134a <GPIO_Init+0x31a>
	{
		// configure the alt function register
		uint8_t temp1,temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	791b      	ldrb	r3, [r3, #4]
 80012ea:	08db      	lsrs	r3, r3, #3
 80012ec:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	791b      	ldrb	r3, [r3, #4]
 80012f2:	f003 0307 	and.w	r3, r3, #7
 80012f6:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2)); // clearing
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	7c3a      	ldrb	r2, [r7, #16]
 80012fe:	3208      	adds	r2, #8
 8001300:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001304:	7bfb      	ldrb	r3, [r7, #15]
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	220f      	movs	r2, #15
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	43db      	mvns	r3, r3
 8001310:	4618      	mov	r0, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	7c3a      	ldrb	r2, [r7, #16]
 8001318:	4001      	ands	r1, r0
 800131a:	3208      	adds	r2, #8
 800131c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2); // setting
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	7c3a      	ldrb	r2, [r7, #16]
 8001326:	3208      	adds	r2, #8
 8001328:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	7a5b      	ldrb	r3, [r3, #9]
 8001330:	461a      	mov	r2, r3
 8001332:	7bfb      	ldrb	r3, [r7, #15]
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	4618      	mov	r0, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	7c3a      	ldrb	r2, [r7, #16]
 8001342:	4301      	orrs	r1, r0
 8001344:	3208      	adds	r2, #8
 8001346:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 800134a:	bf00      	nop
 800134c:	3718      	adds	r7, #24
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40023800 	.word	0x40023800
 8001358:	40013800 	.word	0x40013800
 800135c:	40013c00 	.word	0x40013c00

08001360 <__libc_init_array>:
 8001360:	b570      	push	{r4, r5, r6, lr}
 8001362:	4d0d      	ldr	r5, [pc, #52]	; (8001398 <__libc_init_array+0x38>)
 8001364:	4c0d      	ldr	r4, [pc, #52]	; (800139c <__libc_init_array+0x3c>)
 8001366:	1b64      	subs	r4, r4, r5
 8001368:	10a4      	asrs	r4, r4, #2
 800136a:	2600      	movs	r6, #0
 800136c:	42a6      	cmp	r6, r4
 800136e:	d109      	bne.n	8001384 <__libc_init_array+0x24>
 8001370:	4d0b      	ldr	r5, [pc, #44]	; (80013a0 <__libc_init_array+0x40>)
 8001372:	4c0c      	ldr	r4, [pc, #48]	; (80013a4 <__libc_init_array+0x44>)
 8001374:	f000 f818 	bl	80013a8 <_init>
 8001378:	1b64      	subs	r4, r4, r5
 800137a:	10a4      	asrs	r4, r4, #2
 800137c:	2600      	movs	r6, #0
 800137e:	42a6      	cmp	r6, r4
 8001380:	d105      	bne.n	800138e <__libc_init_array+0x2e>
 8001382:	bd70      	pop	{r4, r5, r6, pc}
 8001384:	f855 3b04 	ldr.w	r3, [r5], #4
 8001388:	4798      	blx	r3
 800138a:	3601      	adds	r6, #1
 800138c:	e7ee      	b.n	800136c <__libc_init_array+0xc>
 800138e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001392:	4798      	blx	r3
 8001394:	3601      	adds	r6, #1
 8001396:	e7f2      	b.n	800137e <__libc_init_array+0x1e>
 8001398:	080013c0 	.word	0x080013c0
 800139c:	080013c0 	.word	0x080013c0
 80013a0:	080013c0 	.word	0x080013c0
 80013a4:	080013c4 	.word	0x080013c4

080013a8 <_init>:
 80013a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013aa:	bf00      	nop
 80013ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013ae:	bc08      	pop	{r3}
 80013b0:	469e      	mov	lr, r3
 80013b2:	4770      	bx	lr

080013b4 <_fini>:
 80013b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013b6:	bf00      	nop
 80013b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013ba:	bc08      	pop	{r3}
 80013bc:	469e      	mov	lr, r3
 80013be:	4770      	bx	lr
