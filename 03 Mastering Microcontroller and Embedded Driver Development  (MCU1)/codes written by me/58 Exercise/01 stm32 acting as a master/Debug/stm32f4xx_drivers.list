
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c18  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000dc0  08000dc0  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000dc0  08000dc0  00020038  2**0
                  CONTENTS
  4 .ARM          00000000  08000dc0  08000dc0  00020038  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000dc0  08000dc0  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000dc0  08000dc0  00010dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000dc4  08000dc4  00010dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  08000dc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020038  2**0
                  CONTENTS
 10 .bss          00000028  20000038  20000038  00020038  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000060  20000060  00020038  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001bd7  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000574  00000000  00000000  00021c3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000168  00000000  00000000  000221b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000130  00000000  00000000  00022320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002841  00000000  00000000  00022450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000019cf  00000000  00000000  00024c91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000ad09  00000000  00000000  00026660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00031369  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000500  00000000  00000000  000313bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000038 	.word	0x20000038
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000da8 	.word	0x08000da8

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	2000003c 	.word	0x2000003c
 80001e4:	08000da8 	.word	0x08000da8

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <delay>:

#define MY_ADDR			0x61
#define SLAVE_ADDR		0x68

void delay(void)
{
 80001f8:	b480      	push	{r7}
 80001fa:	b083      	sub	sp, #12
 80001fc:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i++);
 80001fe:	2300      	movs	r3, #0
 8000200:	607b      	str	r3, [r7, #4]
 8000202:	e002      	b.n	800020a <delay+0x12>
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	3301      	adds	r3, #1
 8000208:	607b      	str	r3, [r7, #4]
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4a04      	ldr	r2, [pc, #16]	; (8000220 <delay+0x28>)
 800020e:	4293      	cmp	r3, r2
 8000210:	d9f8      	bls.n	8000204 <delay+0xc>
}
 8000212:	bf00      	nop
 8000214:	bf00      	nop
 8000216:	370c      	adds	r7, #12
 8000218:	46bd      	mov	sp, r7
 800021a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021e:	4770      	bx	lr
 8000220:	0003d08f 	.word	0x0003d08f

08000224 <I2C1_GPIOInits>:
 * PB9 --> SDA
 * ALT function mode : 4
 */

void I2C1_GPIOInits(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b084      	sub	sp, #16
 8000228:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CPins;

	I2CPins.pGPIOx = GPIOB;
 800022a:	4b0e      	ldr	r3, [pc, #56]	; (8000264 <I2C1_GPIOInits+0x40>)
 800022c:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800022e:	2302      	movs	r3, #2
 8000230:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OP;
 8000232:	2301      	movs	r3, #1
 8000234:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000236:	2301      	movs	r3, #1
 8000238:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 800023a:	2304      	movs	r3, #4
 800023c:	737b      	strb	r3, [r7, #13]
	I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800023e:	2302      	movs	r3, #2
 8000240:	72bb      	strb	r3, [r7, #10]

	// scl
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 8000242:	2306      	movs	r3, #6
 8000244:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000246:	1d3b      	adds	r3, r7, #4
 8000248:	4618      	mov	r0, r3
 800024a:	f000 fbdb 	bl	8000a04 <GPIO_Init>

	// scl
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_9;
 800024e:	2309      	movs	r3, #9
 8000250:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000252:	1d3b      	adds	r3, r7, #4
 8000254:	4618      	mov	r0, r3
 8000256:	f000 fbd5 	bl	8000a04 <GPIO_Init>


}
 800025a:	bf00      	nop
 800025c:	3710      	adds	r7, #16
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	40020400 	.word	0x40020400

08000268 <I2C1_Inits>:

void I2C1_Inits(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
	I2C1Handle.pI2Cx = I2C1;
 800026c:	4b09      	ldr	r3, [pc, #36]	; (8000294 <I2C1_Inits+0x2c>)
 800026e:	4a0a      	ldr	r2, [pc, #40]	; (8000298 <I2C1_Inits+0x30>)
 8000270:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 8000272:	4b08      	ldr	r3, [pc, #32]	; (8000294 <I2C1_Inits+0x2c>)
 8000274:	2201      	movs	r2, #1
 8000276:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
 8000278:	4b06      	ldr	r3, [pc, #24]	; (8000294 <I2C1_Inits+0x2c>)
 800027a:	2261      	movs	r2, #97	; 0x61
 800027c:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 800027e:	4b05      	ldr	r3, [pc, #20]	; (8000294 <I2C1_Inits+0x2c>)
 8000280:	2200      	movs	r2, #0
 8000282:	815a      	strh	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 8000284:	4b03      	ldr	r3, [pc, #12]	; (8000294 <I2C1_Inits+0x2c>)
 8000286:	4a05      	ldr	r2, [pc, #20]	; (800029c <I2C1_Inits+0x34>)
 8000288:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 800028a:	4802      	ldr	r0, [pc, #8]	; (8000294 <I2C1_Inits+0x2c>)
 800028c:	f000 f948 	bl	8000520 <I2C_Init>
}
 8000290:	bf00      	nop
 8000292:	bd80      	pop	{r7, pc}
 8000294:	20000054 	.word	0x20000054
 8000298:	40005400 	.word	0x40005400
 800029c:	000186a0 	.word	0x000186a0

080002a0 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b086      	sub	sp, #24
 80002a4:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn, GpioLed;

	// this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOA;
 80002a6:	4b14      	ldr	r3, [pc, #80]	; (80002f8 <GPIO_ButtonInit+0x58>)
 80002a8:	60fb      	str	r3, [r7, #12]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 80002aa:	2300      	movs	r3, #0
 80002ac:	743b      	strb	r3, [r7, #16]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 80002ae:	2300      	movs	r3, #0
 80002b0:	747b      	strb	r3, [r7, #17]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002b2:	2302      	movs	r3, #2
 80002b4:	74bb      	strb	r3, [r7, #18]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002b6:	2300      	movs	r3, #0
 80002b8:	74fb      	strb	r3, [r7, #19]

	GPIO_PeripheralClockControl(GPIOA, ENABLE);
 80002ba:	2101      	movs	r1, #1
 80002bc:	480e      	ldr	r0, [pc, #56]	; (80002f8 <GPIO_ButtonInit+0x58>)
 80002be:	f000 fab9 	bl	8000834 <GPIO_PeripheralClockControl>
	GPIO_Init(&GPIOBtn);
 80002c2:	f107 030c 	add.w	r3, r7, #12
 80002c6:	4618      	mov	r0, r3
 80002c8:	f000 fb9c 	bl	8000a04 <GPIO_Init>

	// this is led gpio configuration
	GpioLed.pGPIOx = GPIOD;
 80002cc:	4b0b      	ldr	r3, [pc, #44]	; (80002fc <GPIO_ButtonInit+0x5c>)
 80002ce:	603b      	str	r3, [r7, #0]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 80002d0:	230c      	movs	r3, #12
 80002d2:	713b      	strb	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80002d4:	2301      	movs	r3, #1
 80002d6:	717b      	strb	r3, [r7, #5]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002d8:	2302      	movs	r3, #2
 80002da:	71bb      	strb	r3, [r7, #6]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002dc:	2300      	movs	r3, #0
 80002de:	71fb      	strb	r3, [r7, #7]

	GPIO_PeripheralClockControl(GPIOD, ENABLE);
 80002e0:	2101      	movs	r1, #1
 80002e2:	4806      	ldr	r0, [pc, #24]	; (80002fc <GPIO_ButtonInit+0x5c>)
 80002e4:	f000 faa6 	bl	8000834 <GPIO_PeripheralClockControl>
	GPIO_Init(&GpioLed);
 80002e8:	463b      	mov	r3, r7
 80002ea:	4618      	mov	r0, r3
 80002ec:	f000 fb8a 	bl	8000a04 <GPIO_Init>
}
 80002f0:	bf00      	nop
 80002f2:	3718      	adds	r7, #24
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	40020000 	.word	0x40020000
 80002fc:	40020c00 	.word	0x40020c00

08000300 <main>:

int main(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	//initiate button
	GPIO_ButtonInit();
 8000304:	f7ff ffcc 	bl	80002a0 <GPIO_ButtonInit>

	// i2c pin inits
	I2C1_GPIOInits();
 8000308:	f7ff ff8c 	bl	8000224 <I2C1_GPIOInits>

	//i2c peripheral configuration
	I2C1_Inits();
 800030c:	f7ff ffac 	bl	8000268 <I2C1_Inits>

	//enable the peripheral
	I2C_PeripheralControl(I2C1, ENABLE);
 8000310:	2101      	movs	r1, #1
 8000312:	480c      	ldr	r0, [pc, #48]	; (8000344 <main+0x44>)
 8000314:	f000 fa5e 	bl	80007d4 <I2C_PeripheralControl>

	while(1)
	{

		// wait for button pressed
		while(! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 8000318:	bf00      	nop
 800031a:	2100      	movs	r1, #0
 800031c:	480a      	ldr	r0, [pc, #40]	; (8000348 <main+0x48>)
 800031e:	f000 fd09 	bl	8000d34 <GPIO_ReadFromInputPin>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d0f8      	beq.n	800031a <main+0x1a>

		// to avoid button de-bouncing related issues 200ms of delay
		delay();
 8000328:	f7ff ff66 	bl	80001f8 <delay>

		//send some data to the salve
		I2C_MAsterSendData(&I2C1Handle, some_data, strlen((char*)some_data), SLAVE_ADDR);
 800032c:	4807      	ldr	r0, [pc, #28]	; (800034c <main+0x4c>)
 800032e:	f7ff ff5b 	bl	80001e8 <strlen>
 8000332:	4603      	mov	r3, r0
 8000334:	b2da      	uxtb	r2, r3
 8000336:	2368      	movs	r3, #104	; 0x68
 8000338:	4904      	ldr	r1, [pc, #16]	; (800034c <main+0x4c>)
 800033a:	4805      	ldr	r0, [pc, #20]	; (8000350 <main+0x50>)
 800033c:	f000 f99e 	bl	800067c <I2C_MAsterSendData>
		while(! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 8000340:	e7ea      	b.n	8000318 <main+0x18>
 8000342:	bf00      	nop
 8000344:	40005400 	.word	0x40005400
 8000348:	40020000 	.word	0x40020000
 800034c:	20000000 	.word	0x20000000
 8000350:	20000054 	.word	0x20000054

08000354 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000354:	480d      	ldr	r0, [pc, #52]	; (800038c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000356:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000358:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800035c:	480c      	ldr	r0, [pc, #48]	; (8000390 <LoopForever+0x6>)
  ldr r1, =_edata
 800035e:	490d      	ldr	r1, [pc, #52]	; (8000394 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000360:	4a0d      	ldr	r2, [pc, #52]	; (8000398 <LoopForever+0xe>)
  movs r3, #0
 8000362:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000364:	e002      	b.n	800036c <LoopCopyDataInit>

08000366 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000366:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000368:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800036a:	3304      	adds	r3, #4

0800036c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800036c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800036e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000370:	d3f9      	bcc.n	8000366 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000372:	4a0a      	ldr	r2, [pc, #40]	; (800039c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000374:	4c0a      	ldr	r4, [pc, #40]	; (80003a0 <LoopForever+0x16>)
  movs r3, #0
 8000376:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000378:	e001      	b.n	800037e <LoopFillZerobss>

0800037a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800037a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800037c:	3204      	adds	r2, #4

0800037e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800037e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000380:	d3fb      	bcc.n	800037a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000382:	f000 fced 	bl	8000d60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000386:	f7ff ffbb 	bl	8000300 <main>

0800038a <LoopForever>:

LoopForever:
    b LoopForever
 800038a:	e7fe      	b.n	800038a <LoopForever>
  ldr   r0, =_estack
 800038c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000390:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000394:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 8000398:	08000dc8 	.word	0x08000dc8
  ldr r2, =_sbss
 800039c:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 80003a0:	20000060 	.word	0x20000060

080003a4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003a4:	e7fe      	b.n	80003a4 <ADC_IRQHandler>
	...

080003a8 <I2C_PeripheralClockControl>:
 *
 *@Note					-
 *
 */
void I2C_PeripheralClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
 80003b0:	460b      	mov	r3, r1
 80003b2:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80003b4:	78fb      	ldrb	r3, [r7, #3]
 80003b6:	2b01      	cmp	r3, #1
 80003b8:	d120      	bne.n	80003fc <I2C_PeripheralClockControl+0x54>
	{
		if(pI2Cx == I2C1)
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	4a22      	ldr	r2, [pc, #136]	; (8000448 <I2C_PeripheralClockControl+0xa0>)
 80003be:	4293      	cmp	r3, r2
 80003c0:	d106      	bne.n	80003d0 <I2C_PeripheralClockControl+0x28>
		{
			I2C1_PCLK_EN();
 80003c2:	4b22      	ldr	r3, [pc, #136]	; (800044c <I2C_PeripheralClockControl+0xa4>)
 80003c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003c6:	4a21      	ldr	r2, [pc, #132]	; (800044c <I2C_PeripheralClockControl+0xa4>)
 80003c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80003cc:	6413      	str	r3, [r2, #64]	; 0x40
		else if(pI2Cx == I2C3)
		{
			I2C3_PCLK_DI();
		}
	}
}
 80003ce:	e035      	b.n	800043c <I2C_PeripheralClockControl+0x94>
		else if(pI2Cx == I2C2)
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	4a1f      	ldr	r2, [pc, #124]	; (8000450 <I2C_PeripheralClockControl+0xa8>)
 80003d4:	4293      	cmp	r3, r2
 80003d6:	d106      	bne.n	80003e6 <I2C_PeripheralClockControl+0x3e>
			I2C2_PCLK_EN();
 80003d8:	4b1c      	ldr	r3, [pc, #112]	; (800044c <I2C_PeripheralClockControl+0xa4>)
 80003da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003dc:	4a1b      	ldr	r2, [pc, #108]	; (800044c <I2C_PeripheralClockControl+0xa4>)
 80003de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80003e2:	6413      	str	r3, [r2, #64]	; 0x40
}
 80003e4:	e02a      	b.n	800043c <I2C_PeripheralClockControl+0x94>
		else if(pI2Cx == I2C3)
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	4a1a      	ldr	r2, [pc, #104]	; (8000454 <I2C_PeripheralClockControl+0xac>)
 80003ea:	4293      	cmp	r3, r2
 80003ec:	d126      	bne.n	800043c <I2C_PeripheralClockControl+0x94>
			I2C3_PCLK_EN();
 80003ee:	4b17      	ldr	r3, [pc, #92]	; (800044c <I2C_PeripheralClockControl+0xa4>)
 80003f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003f2:	4a16      	ldr	r2, [pc, #88]	; (800044c <I2C_PeripheralClockControl+0xa4>)
 80003f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80003f8:	6413      	str	r3, [r2, #64]	; 0x40
}
 80003fa:	e01f      	b.n	800043c <I2C_PeripheralClockControl+0x94>
		if(pI2Cx == I2C1)
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	4a12      	ldr	r2, [pc, #72]	; (8000448 <I2C_PeripheralClockControl+0xa0>)
 8000400:	4293      	cmp	r3, r2
 8000402:	d106      	bne.n	8000412 <I2C_PeripheralClockControl+0x6a>
			I2C1_PCLK_DI();
 8000404:	4b11      	ldr	r3, [pc, #68]	; (800044c <I2C_PeripheralClockControl+0xa4>)
 8000406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000408:	4a10      	ldr	r2, [pc, #64]	; (800044c <I2C_PeripheralClockControl+0xa4>)
 800040a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800040e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000410:	e014      	b.n	800043c <I2C_PeripheralClockControl+0x94>
		else if(pI2Cx == I2C2)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	4a0e      	ldr	r2, [pc, #56]	; (8000450 <I2C_PeripheralClockControl+0xa8>)
 8000416:	4293      	cmp	r3, r2
 8000418:	d106      	bne.n	8000428 <I2C_PeripheralClockControl+0x80>
			I2C2_PCLK_DI();
 800041a:	4b0c      	ldr	r3, [pc, #48]	; (800044c <I2C_PeripheralClockControl+0xa4>)
 800041c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800041e:	4a0b      	ldr	r2, [pc, #44]	; (800044c <I2C_PeripheralClockControl+0xa4>)
 8000420:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000424:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000426:	e009      	b.n	800043c <I2C_PeripheralClockControl+0x94>
		else if(pI2Cx == I2C3)
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	4a0a      	ldr	r2, [pc, #40]	; (8000454 <I2C_PeripheralClockControl+0xac>)
 800042c:	4293      	cmp	r3, r2
 800042e:	d105      	bne.n	800043c <I2C_PeripheralClockControl+0x94>
			I2C3_PCLK_DI();
 8000430:	4b06      	ldr	r3, [pc, #24]	; (800044c <I2C_PeripheralClockControl+0xa4>)
 8000432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000434:	4a05      	ldr	r2, [pc, #20]	; (800044c <I2C_PeripheralClockControl+0xa4>)
 8000436:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800043a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800043c:	bf00      	nop
 800043e:	370c      	adds	r7, #12
 8000440:	46bd      	mov	sp, r7
 8000442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000446:	4770      	bx	lr
 8000448:	40005400 	.word	0x40005400
 800044c:	40023800 	.word	0x40023800
 8000450:	40005800 	.word	0x40005800
 8000454:	40005c00 	.word	0x40005c00

08000458 <RCC_GETPLLOutputClock>:

uint32_t RCC_GETPLLOutputClock(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
	return 160000000; // dummy value to be implemented
 800045c:	4b02      	ldr	r3, [pc, #8]	; (8000468 <RCC_GETPLLOutputClock+0x10>)
}
 800045e:	4618      	mov	r0, r3
 8000460:	46bd      	mov	sp, r7
 8000462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000466:	4770      	bx	lr
 8000468:	09896800 	.word	0x09896800

0800046c <RCC_GetPCLK1Value>:


uint32_t RCC_GetPCLK1Value(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b084      	sub	sp, #16
 8000470:	af00      	add	r7, sp, #0
	uint32_t pclk1, SystemClk;

	uint8_t clkSrc, temp, ahbp, apb1;
	clkSrc = ((RCC->CFGR >> 2) & 0x03);
 8000472:	4b26      	ldr	r3, [pc, #152]	; (800050c <RCC_GetPCLK1Value+0xa0>)
 8000474:	689b      	ldr	r3, [r3, #8]
 8000476:	089b      	lsrs	r3, r3, #2
 8000478:	b2db      	uxtb	r3, r3
 800047a:	f003 0303 	and.w	r3, r3, #3
 800047e:	727b      	strb	r3, [r7, #9]

	if(clkSrc == 0)
 8000480:	7a7b      	ldrb	r3, [r7, #9]
 8000482:	2b00      	cmp	r3, #0
 8000484:	d102      	bne.n	800048c <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 8000486:	4b22      	ldr	r3, [pc, #136]	; (8000510 <RCC_GetPCLK1Value+0xa4>)
 8000488:	60fb      	str	r3, [r7, #12]
 800048a:	e00b      	b.n	80004a4 <RCC_GetPCLK1Value+0x38>
	}
	else if(clkSrc == 1)
 800048c:	7a7b      	ldrb	r3, [r7, #9]
 800048e:	2b01      	cmp	r3, #1
 8000490:	d102      	bne.n	8000498 <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 8000492:	4b20      	ldr	r3, [pc, #128]	; (8000514 <RCC_GetPCLK1Value+0xa8>)
 8000494:	60fb      	str	r3, [r7, #12]
 8000496:	e005      	b.n	80004a4 <RCC_GetPCLK1Value+0x38>
	}
	else if(clkSrc == 2)
 8000498:	7a7b      	ldrb	r3, [r7, #9]
 800049a:	2b02      	cmp	r3, #2
 800049c:	d102      	bne.n	80004a4 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GETPLLOutputClock();
 800049e:	f7ff ffdb 	bl	8000458 <RCC_GETPLLOutputClock>
 80004a2:	60f8      	str	r0, [r7, #12]
	}

	// ahbp
	temp = ((RCC->CFGR >> 4) & 0xF);
 80004a4:	4b19      	ldr	r3, [pc, #100]	; (800050c <RCC_GetPCLK1Value+0xa0>)
 80004a6:	689b      	ldr	r3, [r3, #8]
 80004a8:	091b      	lsrs	r3, r3, #4
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	f003 030f 	and.w	r3, r3, #15
 80004b0:	723b      	strb	r3, [r7, #8]
	if(temp < 8)
 80004b2:	7a3b      	ldrb	r3, [r7, #8]
 80004b4:	2b07      	cmp	r3, #7
 80004b6:	d802      	bhi.n	80004be <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 80004b8:	2301      	movs	r3, #1
 80004ba:	72fb      	strb	r3, [r7, #11]
 80004bc:	e005      	b.n	80004ca <RCC_GetPCLK1Value+0x5e>
	}
	else
	{
		ahbp = AHB_PreScalar[temp - 8];
 80004be:	7a3b      	ldrb	r3, [r7, #8]
 80004c0:	3b08      	subs	r3, #8
 80004c2:	4a15      	ldr	r2, [pc, #84]	; (8000518 <RCC_GetPCLK1Value+0xac>)
 80004c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004c8:	72fb      	strb	r3, [r7, #11]
	}

	// apb1
	temp = ((RCC->CFGR >> 10) & 0x7);
 80004ca:	4b10      	ldr	r3, [pc, #64]	; (800050c <RCC_GetPCLK1Value+0xa0>)
 80004cc:	689b      	ldr	r3, [r3, #8]
 80004ce:	0a9b      	lsrs	r3, r3, #10
 80004d0:	b2db      	uxtb	r3, r3
 80004d2:	f003 0307 	and.w	r3, r3, #7
 80004d6:	723b      	strb	r3, [r7, #8]
	if(temp < 4)
 80004d8:	7a3b      	ldrb	r3, [r7, #8]
 80004da:	2b03      	cmp	r3, #3
 80004dc:	d802      	bhi.n	80004e4 <RCC_GetPCLK1Value+0x78>
	{
		apb1 = 1;
 80004de:	2301      	movs	r3, #1
 80004e0:	72bb      	strb	r3, [r7, #10]
 80004e2:	e005      	b.n	80004f0 <RCC_GetPCLK1Value+0x84>
	}
	else
	{
		apb1 = APB1_PreScalar[temp - 4];
 80004e4:	7a3b      	ldrb	r3, [r7, #8]
 80004e6:	3b04      	subs	r3, #4
 80004e8:	4a0c      	ldr	r2, [pc, #48]	; (800051c <RCC_GetPCLK1Value+0xb0>)
 80004ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004ee:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = (SystemClk / ahbp) / apb1;
 80004f0:	7afb      	ldrb	r3, [r7, #11]
 80004f2:	68fa      	ldr	r2, [r7, #12]
 80004f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80004f8:	7abb      	ldrb	r3, [r7, #10]
 80004fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80004fe:	607b      	str	r3, [r7, #4]

	return pclk1;
 8000500:	687b      	ldr	r3, [r7, #4]
}
 8000502:	4618      	mov	r0, r3
 8000504:	3710      	adds	r7, #16
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	40023800 	.word	0x40023800
 8000510:	00f42400 	.word	0x00f42400
 8000514:	007a1200 	.word	0x007a1200
 8000518:	20000020 	.word	0x20000020
 800051c:	20000030 	.word	0x20000030

08000520 <I2C_Init>:
 *
 *@Note					-
 *
 */
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b084      	sub	sp, #16
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
	// enable the clock for the i2cx peripheral
	I2C_PeripheralClockControl(pI2CHandle->pI2Cx, ENABLE);
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	2101      	movs	r1, #1
 800052e:	4618      	mov	r0, r3
 8000530:	f7ff ff3a 	bl	80003a8 <I2C_PeripheralClockControl>

	uint32_t tempreg = 0;
 8000534:	2300      	movs	r3, #0
 8000536:	60fb      	str	r3, [r7, #12]

	//ack control bit
	tempreg |= (pI2CHandle->I2C_Config.I2C_ACKControl << I2C_CR1_ACK);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	7a5b      	ldrb	r3, [r3, #9]
 800053c:	029b      	lsls	r3, r3, #10
 800053e:	461a      	mov	r2, r3
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	4313      	orrs	r3, r2
 8000544:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	68fa      	ldr	r2, [r7, #12]
 800054c:	601a      	str	r2, [r3, #0]

	// configure the FREQ field of CR2
	tempreg = 0;
 800054e:	2300      	movs	r3, #0
 8000550:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() / 1000000U;
 8000552:	f7ff ff8b 	bl	800046c <RCC_GetPCLK1Value>
 8000556:	4603      	mov	r3, r0
 8000558:	4a45      	ldr	r2, [pc, #276]	; (8000670 <I2C_Init+0x150>)
 800055a:	fba2 2303 	umull	r2, r3, r2, r3
 800055e:	0c9b      	lsrs	r3, r3, #18
 8000560:	68fa      	ldr	r2, [r7, #12]
 8000562:	4313      	orrs	r3, r2
 8000564:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 = (tempreg & 0x3F);
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	68fa      	ldr	r2, [r7, #12]
 800056c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000570:	605a      	str	r2, [r3, #4]

	// program the device own address
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	7a1b      	ldrb	r3, [r3, #8]
 8000576:	005b      	lsls	r3, r3, #1
 8000578:	461a      	mov	r2, r3
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	4313      	orrs	r3, r2
 800057e:	60fb      	str	r3, [r7, #12]
	tempreg |= (1 << 14);
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000586:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	68fa      	ldr	r2, [r7, #12]
 800058e:	609a      	str	r2, [r3, #8]

	// CCR calculation
	uint16_t ccr_value = 0;
 8000590:	2300      	movs	r3, #0
 8000592:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8000594:	2300      	movs	r3, #0
 8000596:	60fb      	str	r3, [r7, #12]

	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	685b      	ldr	r3, [r3, #4]
 800059c:	4a35      	ldr	r2, [pc, #212]	; (8000674 <I2C_Init+0x154>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d80f      	bhi.n	80005c2 <I2C_Init+0xa2>
	{
		// mode is standard mode
		ccr_value = RCC_GetPCLK1Value() / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 80005a2:	f7ff ff63 	bl	800046c <RCC_GetPCLK1Value>
 80005a6:	4602      	mov	r2, r0
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	685b      	ldr	r3, [r3, #4]
 80005ac:	005b      	lsls	r3, r3, #1
 80005ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80005b2:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 80005b4:	897b      	ldrh	r3, [r7, #10]
 80005b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80005ba:	68fa      	ldr	r2, [r7, #12]
 80005bc:	4313      	orrs	r3, r2
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	e02b      	b.n	800061a <I2C_Init+0xfa>
	}
	else
	{
		// mode is fast mode
		tempreg |= (1 << 15);
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005c8:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	895b      	ldrh	r3, [r3, #10]
 80005ce:	039b      	lsls	r3, r3, #14
 80005d0:	461a      	mov	r2, r3
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	4313      	orrs	r3, r2
 80005d6:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	895b      	ldrh	r3, [r3, #10]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d10b      	bne.n	80005f8 <I2C_Init+0xd8>
		{
			ccr_value = RCC_GetPCLK1Value() / (3 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 80005e0:	f7ff ff44 	bl	800046c <RCC_GetPCLK1Value>
 80005e4:	4601      	mov	r1, r0
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	685a      	ldr	r2, [r3, #4]
 80005ea:	4613      	mov	r3, r2
 80005ec:	005b      	lsls	r3, r3, #1
 80005ee:	4413      	add	r3, r2
 80005f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80005f4:	817b      	strh	r3, [r7, #10]
 80005f6:	e00c      	b.n	8000612 <I2C_Init+0xf2>
		}
		else
		{
			ccr_value = RCC_GetPCLK1Value() / (25 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 80005f8:	f7ff ff38 	bl	800046c <RCC_GetPCLK1Value>
 80005fc:	4601      	mov	r1, r0
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	685a      	ldr	r2, [r3, #4]
 8000602:	4613      	mov	r3, r2
 8000604:	009b      	lsls	r3, r3, #2
 8000606:	4413      	add	r3, r2
 8000608:	009a      	lsls	r2, r3, #2
 800060a:	4413      	add	r3, r2
 800060c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000610:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= ccr_value;
 8000612:	897b      	ldrh	r3, [r7, #10]
 8000614:	68fa      	ldr	r2, [r7, #12]
 8000616:	4313      	orrs	r3, r2
 8000618:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	68fa      	ldr	r2, [r7, #12]
 8000620:	61da      	str	r2, [r3, #28]

	// TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	685b      	ldr	r3, [r3, #4]
 8000626:	4a13      	ldr	r2, [pc, #76]	; (8000674 <I2C_Init+0x154>)
 8000628:	4293      	cmp	r3, r2
 800062a:	d809      	bhi.n	8000640 <I2C_Init+0x120>
	{
		// mode is standard mode
		tempreg = (RCC_GetPCLK1Value() / 1000000U) + 1;
 800062c:	f7ff ff1e 	bl	800046c <RCC_GetPCLK1Value>
 8000630:	4603      	mov	r3, r0
 8000632:	4a0f      	ldr	r2, [pc, #60]	; (8000670 <I2C_Init+0x150>)
 8000634:	fba2 2303 	umull	r2, r3, r2, r3
 8000638:	0c9b      	lsrs	r3, r3, #18
 800063a:	3301      	adds	r3, #1
 800063c:	60fb      	str	r3, [r7, #12]
 800063e:	e00d      	b.n	800065c <I2C_Init+0x13c>
	}
	else
	{
		// mode is fast mode
		tempreg = ((RCC_GetPCLK1Value() * 300) / 1000000000U) + 1;
 8000640:	f7ff ff14 	bl	800046c <RCC_GetPCLK1Value>
 8000644:	4603      	mov	r3, r0
 8000646:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800064a:	fb02 f303 	mul.w	r3, r2, r3
 800064e:	0a5b      	lsrs	r3, r3, #9
 8000650:	4a09      	ldr	r2, [pc, #36]	; (8000678 <I2C_Init+0x158>)
 8000652:	fba2 2303 	umull	r2, r3, r2, r3
 8000656:	09db      	lsrs	r3, r3, #7
 8000658:	3301      	adds	r3, #1
 800065a:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	68fa      	ldr	r2, [r7, #12]
 8000662:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000666:	621a      	str	r2, [r3, #32]


}
 8000668:	bf00      	nop
 800066a:	3710      	adds	r7, #16
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	431bde83 	.word	0x431bde83
 8000674:	000186a0 	.word	0x000186a0
 8000678:	00044b83 	.word	0x00044b83

0800067c <I2C_MAsterSendData>:
 *
 *@Note					-
 *
 */
void I2C_MAsterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxBuffer, uint8_t len, uint8_t slaveAddr)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
 8000682:	60f8      	str	r0, [r7, #12]
 8000684:	60b9      	str	r1, [r7, #8]
 8000686:	4611      	mov	r1, r2
 8000688:	461a      	mov	r2, r3
 800068a:	460b      	mov	r3, r1
 800068c:	71fb      	strb	r3, [r7, #7]
 800068e:	4613      	mov	r3, r2
 8000690:	71bb      	strb	r3, [r7, #6]
	// 1. Generate the START condition
	I2C_generateStartCondition(pI2CHandle->pI2Cx);
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	4618      	mov	r0, r3
 8000698:	f000 f856 	bl	8000748 <I2C_generateStartCondition>

	// 2. Confirm that start generation is completed by checking the SB flag in the SR1
	// note: until SB is cleared SCL will be stretched (pulled to LOW)
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_SB_FLAG));
 800069c:	bf00      	nop
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	2101      	movs	r1, #1
 80006a4:	4618      	mov	r0, r3
 80006a6:	f000 f8b1 	bl	800080c <I2C_GetFlagStatus>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d0f6      	beq.n	800069e <I2C_MAsterSendData+0x22>

	// 3. Send the address of the slave with r/nw bit set to w(0) (total 8 bits)
	I2C_ExecuteAddressPhase(pI2CHandle->pI2Cx, slaveAddr);
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	79ba      	ldrb	r2, [r7, #6]
 80006b6:	4611      	mov	r1, r2
 80006b8:	4618      	mov	r0, r3
 80006ba:	f000 f855 	bl	8000768 <I2C_ExecuteAddressPhase>

	// 4. confirm that the address phase is completed by checking the ADDR flag in the SR1
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_ADDR_FLAG));
 80006be:	bf00      	nop
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2102      	movs	r1, #2
 80006c6:	4618      	mov	r0, r3
 80006c8:	f000 f8a0 	bl	800080c <I2C_GetFlagStatus>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d0f6      	beq.n	80006c0 <I2C_MAsterSendData+0x44>

	// 5. clear the ADDR flag according to its software sequence
	// Note : Until ADDR is cleared SCL will be stretched (pulled to LOW)
	I2C_ClearADDRFlag(pI2CHandle->pI2Cx);
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 f85c 	bl	8000794 <I2C_ClearADDRFlag>

	// 6. Send the data until Len becomes 0
	while(len > 0)
 80006dc:	e014      	b.n	8000708 <I2C_MAsterSendData+0x8c>
	{
		while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_TxE_FLAG)); // wait till TXE is set
 80006de:	bf00      	nop
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	2180      	movs	r1, #128	; 0x80
 80006e6:	4618      	mov	r0, r3
 80006e8:	f000 f890 	bl	800080c <I2C_GetFlagStatus>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d0f6      	beq.n	80006e0 <I2C_MAsterSendData+0x64>
		pI2CHandle->pI2Cx->DR = *pTxBuffer;
 80006f2:	68bb      	ldr	r3, [r7, #8]
 80006f4:	781a      	ldrb	r2, [r3, #0]
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	611a      	str	r2, [r3, #16]
		pTxBuffer++;
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	3301      	adds	r3, #1
 8000700:	60bb      	str	r3, [r7, #8]
		len--;
 8000702:	79fb      	ldrb	r3, [r7, #7]
 8000704:	3b01      	subs	r3, #1
 8000706:	71fb      	strb	r3, [r7, #7]
	while(len > 0)
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d1e7      	bne.n	80006de <I2C_MAsterSendData+0x62>
	}

	// 7. When Len becomes zero , wait for TXE = 1 and BTF = 1 before generating the STOP condition
	// NOTE: TXE = 1 , BTF = 1, means that both SR and DR are empty and next transition should begin
	// when BTF = 1 , SCL will be stretched (pulled to LOW)
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_TxE_FLAG));
 800070e:	bf00      	nop
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2180      	movs	r1, #128	; 0x80
 8000716:	4618      	mov	r0, r3
 8000718:	f000 f878 	bl	800080c <I2C_GetFlagStatus>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d0f6      	beq.n	8000710 <I2C_MAsterSendData+0x94>
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_BTF_FLAG));
 8000722:	bf00      	nop
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	2104      	movs	r1, #4
 800072a:	4618      	mov	r0, r3
 800072c:	f000 f86e 	bl	800080c <I2C_GetFlagStatus>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d0f6      	beq.n	8000724 <I2C_MAsterSendData+0xa8>


	// 8. generate STOP condition and master need no to wait for the completion of STOP condition.
	// Note : generating STOP, automatically clears the BTF
	I2C_generateStopCondition(pI2CHandle->pI2Cx);
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4618      	mov	r0, r3
 800073c:	f000 f83a 	bl	80007b4 <I2C_generateStopCondition>


}
 8000740:	bf00      	nop
 8000742:	3710      	adds	r7, #16
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <I2C_generateStartCondition>:
static void I2C_generateStartCondition(I2C_RegDef_t *pI2Cx)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_START);
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	601a      	str	r2, [r3, #0]
}
 800075c:	bf00      	nop
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr

08000768 <I2C_ExecuteAddressPhase>:
static void I2C_ExecuteAddressPhase(I2C_RegDef_t *pI2Cx, uint8_t slaveAddr)
{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	460b      	mov	r3, r1
 8000772:	70fb      	strb	r3, [r7, #3]
	slaveAddr = slaveAddr << 1;
 8000774:	78fb      	ldrb	r3, [r7, #3]
 8000776:	005b      	lsls	r3, r3, #1
 8000778:	70fb      	strb	r3, [r7, #3]
	slaveAddr &= ~(1 << 0);
 800077a:	78fb      	ldrb	r3, [r7, #3]
 800077c:	f023 0301 	bic.w	r3, r3, #1
 8000780:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = slaveAddr;
 8000782:	78fa      	ldrb	r2, [r7, #3]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	611a      	str	r2, [r3, #16]
}
 8000788:	bf00      	nop
 800078a:	370c      	adds	r7, #12
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr

08000794 <I2C_ClearADDRFlag>:
static void I2C_ClearADDRFlag(I2C_RegDef_t *pI2Cx)
{
 8000794:	b480      	push	{r7}
 8000796:	b085      	sub	sp, #20
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
	uint32_t dummyRead = pI2Cx->SR1;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	695b      	ldr	r3, [r3, #20]
 80007a0:	60fb      	str	r3, [r7, #12]
	dummyRead = pI2Cx->SR2;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	699b      	ldr	r3, [r3, #24]
 80007a6:	60fb      	str	r3, [r7, #12]
	(void)dummyRead;
}
 80007a8:	bf00      	nop
 80007aa:	3714      	adds	r7, #20
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr

080007b4 <I2C_generateStopCondition>:
static void I2C_generateStopCondition(I2C_RegDef_t *pI2Cx)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	601a      	str	r2, [r3, #0]
}
 80007c8:	bf00      	nop
 80007ca:	370c      	adds	r7, #12
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr

080007d4 <I2C_PeripheralControl>:
  *
  *@Note					-
  *
  */
 void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
 {
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	460b      	mov	r3, r1
 80007de:	70fb      	strb	r3, [r7, #3]
		if(EnorDi == ENABLE)
 80007e0:	78fb      	ldrb	r3, [r7, #3]
 80007e2:	2b01      	cmp	r3, #1
 80007e4:	d106      	bne.n	80007f4 <I2C_PeripheralControl+0x20>
		{
			pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f043 0201 	orr.w	r2, r3, #1
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	601a      	str	r2, [r3, #0]
		}
		else
		{
			pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
		}
 }
 80007f2:	e005      	b.n	8000800 <I2C_PeripheralControl+0x2c>
			pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f023 0201 	bic.w	r2, r3, #1
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	601a      	str	r2, [r3, #0]
 }
 8000800:	bf00      	nop
 8000802:	370c      	adds	r7, #12
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr

0800080c <I2C_GetFlagStatus>:
  *
  *@Note					-
  *
  */
 uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint32_t FlagName)
 {
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
 8000814:	6039      	str	r1, [r7, #0]
		if(pI2Cx->SR1 & FlagName)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	695a      	ldr	r2, [r3, #20]
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	4013      	ands	r3, r2
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <I2C_GetFlagStatus+0x1a>
			return FLAG_SET;
 8000822:	2301      	movs	r3, #1
 8000824:	e000      	b.n	8000828 <I2C_GetFlagStatus+0x1c>
		else
			return FLAG_RESET;
 8000826:	2300      	movs	r3, #0
 }
 8000828:	4618      	mov	r0, r3
 800082a:	370c      	adds	r7, #12
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr

08000834 <GPIO_PeripheralClockControl>:
 *
 *@Note					- none
 *
 */
void GPIO_PeripheralClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
 800083c:	460b      	mov	r3, r1
 800083e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000840:	78fb      	ldrb	r3, [r7, #3]
 8000842:	2b01      	cmp	r3, #1
 8000844:	d162      	bne.n	800090c <GPIO_PeripheralClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4a64      	ldr	r2, [pc, #400]	; (80009dc <GPIO_PeripheralClockControl+0x1a8>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d106      	bne.n	800085c <GPIO_PeripheralClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 800084e:	4b64      	ldr	r3, [pc, #400]	; (80009e0 <GPIO_PeripheralClockControl+0x1ac>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a63      	ldr	r2, [pc, #396]	; (80009e0 <GPIO_PeripheralClockControl+0x1ac>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
		else if(pGPIOx == GPIOI)
		{
			GPIOI_PCLK_DI();
		}
	}
}
 800085a:	e0b9      	b.n	80009d0 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	4a61      	ldr	r2, [pc, #388]	; (80009e4 <GPIO_PeripheralClockControl+0x1b0>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d106      	bne.n	8000872 <GPIO_PeripheralClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000864:	4b5e      	ldr	r3, [pc, #376]	; (80009e0 <GPIO_PeripheralClockControl+0x1ac>)
 8000866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000868:	4a5d      	ldr	r2, [pc, #372]	; (80009e0 <GPIO_PeripheralClockControl+0x1ac>)
 800086a:	f043 0302 	orr.w	r3, r3, #2
 800086e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000870:	e0ae      	b.n	80009d0 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	4a5c      	ldr	r2, [pc, #368]	; (80009e8 <GPIO_PeripheralClockControl+0x1b4>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d106      	bne.n	8000888 <GPIO_PeripheralClockControl+0x54>
			GPIOC_PCLK_EN();
 800087a:	4b59      	ldr	r3, [pc, #356]	; (80009e0 <GPIO_PeripheralClockControl+0x1ac>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a58      	ldr	r2, [pc, #352]	; (80009e0 <GPIO_PeripheralClockControl+0x1ac>)
 8000880:	f043 0304 	orr.w	r3, r3, #4
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000886:	e0a3      	b.n	80009d0 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	4a58      	ldr	r2, [pc, #352]	; (80009ec <GPIO_PeripheralClockControl+0x1b8>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d106      	bne.n	800089e <GPIO_PeripheralClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000890:	4b53      	ldr	r3, [pc, #332]	; (80009e0 <GPIO_PeripheralClockControl+0x1ac>)
 8000892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000894:	4a52      	ldr	r2, [pc, #328]	; (80009e0 <GPIO_PeripheralClockControl+0x1ac>)
 8000896:	f043 0308 	orr.w	r3, r3, #8
 800089a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800089c:	e098      	b.n	80009d0 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4a53      	ldr	r2, [pc, #332]	; (80009f0 <GPIO_PeripheralClockControl+0x1bc>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d106      	bne.n	80008b4 <GPIO_PeripheralClockControl+0x80>
			GPIOE_PCLK_EN();
 80008a6:	4b4e      	ldr	r3, [pc, #312]	; (80009e0 <GPIO_PeripheralClockControl+0x1ac>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a4d      	ldr	r2, [pc, #308]	; (80009e0 <GPIO_PeripheralClockControl+0x1ac>)
 80008ac:	f043 0310 	orr.w	r3, r3, #16
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008b2:	e08d      	b.n	80009d0 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	4a4f      	ldr	r2, [pc, #316]	; (80009f4 <GPIO_PeripheralClockControl+0x1c0>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d106      	bne.n	80008ca <GPIO_PeripheralClockControl+0x96>
			GPIOF_PCLK_EN();
 80008bc:	4b48      	ldr	r3, [pc, #288]	; (80009e0 <GPIO_PeripheralClockControl+0x1ac>)
 80008be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c0:	4a47      	ldr	r2, [pc, #284]	; (80009e0 <GPIO_PeripheralClockControl+0x1ac>)
 80008c2:	f043 0320 	orr.w	r3, r3, #32
 80008c6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008c8:	e082      	b.n	80009d0 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	4a4a      	ldr	r2, [pc, #296]	; (80009f8 <GPIO_PeripheralClockControl+0x1c4>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d106      	bne.n	80008e0 <GPIO_PeripheralClockControl+0xac>
			GPIOG_PCLK_EN();
 80008d2:	4b43      	ldr	r3, [pc, #268]	; (80009e0 <GPIO_PeripheralClockControl+0x1ac>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a42      	ldr	r2, [pc, #264]	; (80009e0 <GPIO_PeripheralClockControl+0x1ac>)
 80008d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008de:	e077      	b.n	80009d0 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	4a46      	ldr	r2, [pc, #280]	; (80009fc <GPIO_PeripheralClockControl+0x1c8>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d106      	bne.n	80008f6 <GPIO_PeripheralClockControl+0xc2>
			GPIOH_PCLK_EN();
 80008e8:	4b3d      	ldr	r3, [pc, #244]	; (80009e0 <GPIO_PeripheralClockControl+0x1ac>)
 80008ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ec:	4a3c      	ldr	r2, [pc, #240]	; (80009e0 <GPIO_PeripheralClockControl+0x1ac>)
 80008ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008f2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008f4:	e06c      	b.n	80009d0 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4a41      	ldr	r2, [pc, #260]	; (8000a00 <GPIO_PeripheralClockControl+0x1cc>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d168      	bne.n	80009d0 <GPIO_PeripheralClockControl+0x19c>
			GPIOI_PCLK_EN();
 80008fe:	4b38      	ldr	r3, [pc, #224]	; (80009e0 <GPIO_PeripheralClockControl+0x1ac>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a37      	ldr	r2, [pc, #220]	; (80009e0 <GPIO_PeripheralClockControl+0x1ac>)
 8000904:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
}
 800090a:	e061      	b.n	80009d0 <GPIO_PeripheralClockControl+0x19c>
		if(pGPIOx == GPIOA)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	4a33      	ldr	r2, [pc, #204]	; (80009dc <GPIO_PeripheralClockControl+0x1a8>)
 8000910:	4293      	cmp	r3, r2
 8000912:	d106      	bne.n	8000922 <GPIO_PeripheralClockControl+0xee>
			GPIOA_PCLK_DI();
 8000914:	4b32      	ldr	r3, [pc, #200]	; (80009e0 <GPIO_PeripheralClockControl+0x1ac>)
 8000916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000918:	4a31      	ldr	r2, [pc, #196]	; (80009e0 <GPIO_PeripheralClockControl+0x1ac>)
 800091a:	f023 0301 	bic.w	r3, r3, #1
 800091e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000920:	e056      	b.n	80009d0 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	4a2f      	ldr	r2, [pc, #188]	; (80009e4 <GPIO_PeripheralClockControl+0x1b0>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d106      	bne.n	8000938 <GPIO_PeripheralClockControl+0x104>
			GPIOB_PCLK_DI();
 800092a:	4b2d      	ldr	r3, [pc, #180]	; (80009e0 <GPIO_PeripheralClockControl+0x1ac>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a2c      	ldr	r2, [pc, #176]	; (80009e0 <GPIO_PeripheralClockControl+0x1ac>)
 8000930:	f023 0302 	bic.w	r3, r3, #2
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000936:	e04b      	b.n	80009d0 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	4a2b      	ldr	r2, [pc, #172]	; (80009e8 <GPIO_PeripheralClockControl+0x1b4>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d106      	bne.n	800094e <GPIO_PeripheralClockControl+0x11a>
			GPIOC_PCLK_DI();
 8000940:	4b27      	ldr	r3, [pc, #156]	; (80009e0 <GPIO_PeripheralClockControl+0x1ac>)
 8000942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000944:	4a26      	ldr	r2, [pc, #152]	; (80009e0 <GPIO_PeripheralClockControl+0x1ac>)
 8000946:	f023 0304 	bic.w	r3, r3, #4
 800094a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800094c:	e040      	b.n	80009d0 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4a26      	ldr	r2, [pc, #152]	; (80009ec <GPIO_PeripheralClockControl+0x1b8>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d106      	bne.n	8000964 <GPIO_PeripheralClockControl+0x130>
			GPIOD_PCLK_DI();
 8000956:	4b22      	ldr	r3, [pc, #136]	; (80009e0 <GPIO_PeripheralClockControl+0x1ac>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a21      	ldr	r2, [pc, #132]	; (80009e0 <GPIO_PeripheralClockControl+0x1ac>)
 800095c:	f023 0308 	bic.w	r3, r3, #8
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000962:	e035      	b.n	80009d0 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	4a22      	ldr	r2, [pc, #136]	; (80009f0 <GPIO_PeripheralClockControl+0x1bc>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d106      	bne.n	800097a <GPIO_PeripheralClockControl+0x146>
			GPIOE_PCLK_DI();
 800096c:	4b1c      	ldr	r3, [pc, #112]	; (80009e0 <GPIO_PeripheralClockControl+0x1ac>)
 800096e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000970:	4a1b      	ldr	r2, [pc, #108]	; (80009e0 <GPIO_PeripheralClockControl+0x1ac>)
 8000972:	f023 0310 	bic.w	r3, r3, #16
 8000976:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000978:	e02a      	b.n	80009d0 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4a1d      	ldr	r2, [pc, #116]	; (80009f4 <GPIO_PeripheralClockControl+0x1c0>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d106      	bne.n	8000990 <GPIO_PeripheralClockControl+0x15c>
			GPIOF_PCLK_DI();
 8000982:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <GPIO_PeripheralClockControl+0x1ac>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a16      	ldr	r2, [pc, #88]	; (80009e0 <GPIO_PeripheralClockControl+0x1ac>)
 8000988:	f023 0320 	bic.w	r3, r3, #32
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800098e:	e01f      	b.n	80009d0 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	4a19      	ldr	r2, [pc, #100]	; (80009f8 <GPIO_PeripheralClockControl+0x1c4>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d106      	bne.n	80009a6 <GPIO_PeripheralClockControl+0x172>
			GPIOG_PCLK_DI();
 8000998:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <GPIO_PeripheralClockControl+0x1ac>)
 800099a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099c:	4a10      	ldr	r2, [pc, #64]	; (80009e0 <GPIO_PeripheralClockControl+0x1ac>)
 800099e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80009a2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009a4:	e014      	b.n	80009d0 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4a14      	ldr	r2, [pc, #80]	; (80009fc <GPIO_PeripheralClockControl+0x1c8>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d106      	bne.n	80009bc <GPIO_PeripheralClockControl+0x188>
			GPIOH_PCLK_DI();
 80009ae:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <GPIO_PeripheralClockControl+0x1ac>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a0b      	ldr	r2, [pc, #44]	; (80009e0 <GPIO_PeripheralClockControl+0x1ac>)
 80009b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009ba:	e009      	b.n	80009d0 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	4a10      	ldr	r2, [pc, #64]	; (8000a00 <GPIO_PeripheralClockControl+0x1cc>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d105      	bne.n	80009d0 <GPIO_PeripheralClockControl+0x19c>
			GPIOI_PCLK_DI();
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <GPIO_PeripheralClockControl+0x1ac>)
 80009c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c8:	4a05      	ldr	r2, [pc, #20]	; (80009e0 <GPIO_PeripheralClockControl+0x1ac>)
 80009ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80009ce:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009d0:	bf00      	nop
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr
 80009dc:	40020000 	.word	0x40020000
 80009e0:	40023800 	.word	0x40023800
 80009e4:	40020400 	.word	0x40020400
 80009e8:	40020800 	.word	0x40020800
 80009ec:	40020c00 	.word	0x40020c00
 80009f0:	40021000 	.word	0x40021000
 80009f4:	40021400 	.word	0x40021400
 80009f8:	40021800 	.word	0x40021800
 80009fc:	40021c00 	.word	0x40021c00
 8000a00:	40022000 	.word	0x40022000

08000a04 <GPIO_Init>:

/*
 * Init and De-init
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b086      	sub	sp, #24
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0; // temp register
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	617b      	str	r3, [r7, #20]

	// enable the peripheral clock
	GPIO_PeripheralClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	2101      	movs	r1, #1
 8000a16:	4618      	mov	r0, r3
 8000a18:	f7ff ff0c 	bl	8000834 <GPIO_PeripheralClockControl>

	// 1. configure the mode of gpio pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	795b      	ldrb	r3, [r3, #5]
 8000a20:	2b03      	cmp	r3, #3
 8000a22:	d820      	bhi.n	8000a66 <GPIO_Init+0x62>
	{
		// the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	795b      	ldrb	r3, [r3, #5]
 8000a28:	461a      	mov	r2, r3
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	791b      	ldrb	r3, [r3, #4]
 8000a2e:	005b      	lsls	r3, r3, #1
 8000a30:	fa02 f303 	lsl.w	r3, r2, r3
 8000a34:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clear
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	791b      	ldrb	r3, [r3, #4]
 8000a40:	005b      	lsls	r3, r3, #1
 8000a42:	2103      	movs	r1, #3
 8000a44:	fa01 f303 	lsl.w	r3, r1, r3
 8000a48:	43db      	mvns	r3, r3
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	400a      	ands	r2, r1
 8000a52:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;	// setting
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	6819      	ldr	r1, [r3, #0]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	697a      	ldr	r2, [r7, #20]
 8000a60:	430a      	orrs	r2, r1
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	e0c1      	b.n	8000bea <GPIO_Init+0x1e6>

	}
	else
	{
		// this part will code later (interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	795b      	ldrb	r3, [r3, #5]
 8000a6a:	2b04      	cmp	r3, #4
 8000a6c:	d117      	bne.n	8000a9e <GPIO_Init+0x9a>
		{
			// 1. configure the FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a6e:	4b47      	ldr	r3, [pc, #284]	; (8000b8c <GPIO_Init+0x188>)
 8000a70:	68db      	ldr	r3, [r3, #12]
 8000a72:	687a      	ldr	r2, [r7, #4]
 8000a74:	7912      	ldrb	r2, [r2, #4]
 8000a76:	4611      	mov	r1, r2
 8000a78:	2201      	movs	r2, #1
 8000a7a:	408a      	lsls	r2, r1
 8000a7c:	4611      	mov	r1, r2
 8000a7e:	4a43      	ldr	r2, [pc, #268]	; (8000b8c <GPIO_Init+0x188>)
 8000a80:	430b      	orrs	r3, r1
 8000a82:	60d3      	str	r3, [r2, #12]
			// Clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a84:	4b41      	ldr	r3, [pc, #260]	; (8000b8c <GPIO_Init+0x188>)
 8000a86:	689b      	ldr	r3, [r3, #8]
 8000a88:	687a      	ldr	r2, [r7, #4]
 8000a8a:	7912      	ldrb	r2, [r2, #4]
 8000a8c:	4611      	mov	r1, r2
 8000a8e:	2201      	movs	r2, #1
 8000a90:	408a      	lsls	r2, r1
 8000a92:	43d2      	mvns	r2, r2
 8000a94:	4611      	mov	r1, r2
 8000a96:	4a3d      	ldr	r2, [pc, #244]	; (8000b8c <GPIO_Init+0x188>)
 8000a98:	400b      	ands	r3, r1
 8000a9a:	6093      	str	r3, [r2, #8]
 8000a9c:	e035      	b.n	8000b0a <GPIO_Init+0x106>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	795b      	ldrb	r3, [r3, #5]
 8000aa2:	2b05      	cmp	r3, #5
 8000aa4:	d117      	bne.n	8000ad6 <GPIO_Init+0xd2>
		{
			// 1. configure the RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000aa6:	4b39      	ldr	r3, [pc, #228]	; (8000b8c <GPIO_Init+0x188>)
 8000aa8:	689b      	ldr	r3, [r3, #8]
 8000aaa:	687a      	ldr	r2, [r7, #4]
 8000aac:	7912      	ldrb	r2, [r2, #4]
 8000aae:	4611      	mov	r1, r2
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	408a      	lsls	r2, r1
 8000ab4:	4611      	mov	r1, r2
 8000ab6:	4a35      	ldr	r2, [pc, #212]	; (8000b8c <GPIO_Init+0x188>)
 8000ab8:	430b      	orrs	r3, r1
 8000aba:	6093      	str	r3, [r2, #8]
			// Clear the corresponding FTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000abc:	4b33      	ldr	r3, [pc, #204]	; (8000b8c <GPIO_Init+0x188>)
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	687a      	ldr	r2, [r7, #4]
 8000ac2:	7912      	ldrb	r2, [r2, #4]
 8000ac4:	4611      	mov	r1, r2
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	408a      	lsls	r2, r1
 8000aca:	43d2      	mvns	r2, r2
 8000acc:	4611      	mov	r1, r2
 8000ace:	4a2f      	ldr	r2, [pc, #188]	; (8000b8c <GPIO_Init+0x188>)
 8000ad0:	400b      	ands	r3, r1
 8000ad2:	60d3      	str	r3, [r2, #12]
 8000ad4:	e019      	b.n	8000b0a <GPIO_Init+0x106>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	795b      	ldrb	r3, [r3, #5]
 8000ada:	2b06      	cmp	r3, #6
 8000adc:	d115      	bne.n	8000b0a <GPIO_Init+0x106>
		{
			// 1. configure both FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000ade:	4b2b      	ldr	r3, [pc, #172]	; (8000b8c <GPIO_Init+0x188>)
 8000ae0:	68db      	ldr	r3, [r3, #12]
 8000ae2:	687a      	ldr	r2, [r7, #4]
 8000ae4:	7912      	ldrb	r2, [r2, #4]
 8000ae6:	4611      	mov	r1, r2
 8000ae8:	2201      	movs	r2, #1
 8000aea:	408a      	lsls	r2, r1
 8000aec:	4611      	mov	r1, r2
 8000aee:	4a27      	ldr	r2, [pc, #156]	; (8000b8c <GPIO_Init+0x188>)
 8000af0:	430b      	orrs	r3, r1
 8000af2:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000af4:	4b25      	ldr	r3, [pc, #148]	; (8000b8c <GPIO_Init+0x188>)
 8000af6:	689b      	ldr	r3, [r3, #8]
 8000af8:	687a      	ldr	r2, [r7, #4]
 8000afa:	7912      	ldrb	r2, [r2, #4]
 8000afc:	4611      	mov	r1, r2
 8000afe:	2201      	movs	r2, #1
 8000b00:	408a      	lsls	r2, r1
 8000b02:	4611      	mov	r1, r2
 8000b04:	4a21      	ldr	r2, [pc, #132]	; (8000b8c <GPIO_Init+0x188>)
 8000b06:	430b      	orrs	r3, r1
 8000b08:	6093      	str	r3, [r2, #8]
		}

		// 2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	791b      	ldrb	r3, [r3, #4]
 8000b0e:	089b      	lsrs	r3, r3, #2
 8000b10:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	791b      	ldrb	r3, [r3, #4]
 8000b16:	f003 0303 	and.w	r3, r3, #3
 8000b1a:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a1b      	ldr	r2, [pc, #108]	; (8000b90 <GPIO_Init+0x18c>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d044      	beq.n	8000bb0 <GPIO_Init+0x1ac>
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a1a      	ldr	r2, [pc, #104]	; (8000b94 <GPIO_Init+0x190>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d02b      	beq.n	8000b88 <GPIO_Init+0x184>
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a18      	ldr	r2, [pc, #96]	; (8000b98 <GPIO_Init+0x194>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d024      	beq.n	8000b84 <GPIO_Init+0x180>
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a17      	ldr	r2, [pc, #92]	; (8000b9c <GPIO_Init+0x198>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d01d      	beq.n	8000b80 <GPIO_Init+0x17c>
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a15      	ldr	r2, [pc, #84]	; (8000ba0 <GPIO_Init+0x19c>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d016      	beq.n	8000b7c <GPIO_Init+0x178>
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a14      	ldr	r2, [pc, #80]	; (8000ba4 <GPIO_Init+0x1a0>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d00f      	beq.n	8000b78 <GPIO_Init+0x174>
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a12      	ldr	r2, [pc, #72]	; (8000ba8 <GPIO_Init+0x1a4>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d008      	beq.n	8000b74 <GPIO_Init+0x170>
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a11      	ldr	r2, [pc, #68]	; (8000bac <GPIO_Init+0x1a8>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d101      	bne.n	8000b70 <GPIO_Init+0x16c>
 8000b6c:	2307      	movs	r3, #7
 8000b6e:	e020      	b.n	8000bb2 <GPIO_Init+0x1ae>
 8000b70:	2308      	movs	r3, #8
 8000b72:	e01e      	b.n	8000bb2 <GPIO_Init+0x1ae>
 8000b74:	2306      	movs	r3, #6
 8000b76:	e01c      	b.n	8000bb2 <GPIO_Init+0x1ae>
 8000b78:	2305      	movs	r3, #5
 8000b7a:	e01a      	b.n	8000bb2 <GPIO_Init+0x1ae>
 8000b7c:	2304      	movs	r3, #4
 8000b7e:	e018      	b.n	8000bb2 <GPIO_Init+0x1ae>
 8000b80:	2303      	movs	r3, #3
 8000b82:	e016      	b.n	8000bb2 <GPIO_Init+0x1ae>
 8000b84:	2302      	movs	r3, #2
 8000b86:	e014      	b.n	8000bb2 <GPIO_Init+0x1ae>
 8000b88:	2301      	movs	r3, #1
 8000b8a:	e012      	b.n	8000bb2 <GPIO_Init+0x1ae>
 8000b8c:	40013c00 	.word	0x40013c00
 8000b90:	40020000 	.word	0x40020000
 8000b94:	40020400 	.word	0x40020400
 8000b98:	40020800 	.word	0x40020800
 8000b9c:	40020c00 	.word	0x40020c00
 8000ba0:	40021000 	.word	0x40021000
 8000ba4:	40021400 	.word	0x40021400
 8000ba8:	40021800 	.word	0x40021800
 8000bac:	40021c00 	.word	0x40021c00
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000bb4:	4b5c      	ldr	r3, [pc, #368]	; (8000d28 <GPIO_Init+0x324>)
 8000bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb8:	4a5b      	ldr	r2, [pc, #364]	; (8000d28 <GPIO_Init+0x324>)
 8000bba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bbe:	6453      	str	r3, [r2, #68]	; 0x44
		SYS_CFG->EXTICR[temp1] = portcode << (temp2 * 4);
 8000bc0:	7c7a      	ldrb	r2, [r7, #17]
 8000bc2:	7cbb      	ldrb	r3, [r7, #18]
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	fa02 f103 	lsl.w	r1, r2, r3
 8000bca:	4a58      	ldr	r2, [pc, #352]	; (8000d2c <GPIO_Init+0x328>)
 8000bcc:	7cfb      	ldrb	r3, [r7, #19]
 8000bce:	3302      	adds	r3, #2
 8000bd0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]


		// 3. enable the exti interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000bd4:	4b56      	ldr	r3, [pc, #344]	; (8000d30 <GPIO_Init+0x32c>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	687a      	ldr	r2, [r7, #4]
 8000bda:	7912      	ldrb	r2, [r2, #4]
 8000bdc:	4611      	mov	r1, r2
 8000bde:	2201      	movs	r2, #1
 8000be0:	408a      	lsls	r2, r1
 8000be2:	4611      	mov	r1, r2
 8000be4:	4a52      	ldr	r2, [pc, #328]	; (8000d30 <GPIO_Init+0x32c>)
 8000be6:	430b      	orrs	r3, r1
 8000be8:	6013      	str	r3, [r2, #0]
	}

	// 2. configure the speed
	temp = 0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	799b      	ldrb	r3, [r3, #6]
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	791b      	ldrb	r3, [r3, #4]
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfe:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clear
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	689a      	ldr	r2, [r3, #8]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	791b      	ldrb	r3, [r3, #4]
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	2103      	movs	r1, #3
 8000c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c12:	43db      	mvns	r3, r3
 8000c14:	4619      	mov	r1, r3
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	400a      	ands	r2, r1
 8000c1c:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;	// setting
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	6899      	ldr	r1, [r3, #8]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	697a      	ldr	r2, [r7, #20]
 8000c2a:	430a      	orrs	r2, r1
 8000c2c:	609a      	str	r2, [r3, #8]

	// 3. configure the pupd settings
	temp = 0;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	79db      	ldrb	r3, [r3, #7]
 8000c36:	461a      	mov	r2, r3
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	791b      	ldrb	r3, [r3, #4]
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c42:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clear
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	68da      	ldr	r2, [r3, #12]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	791b      	ldrb	r3, [r3, #4]
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	2103      	movs	r1, #3
 8000c52:	fa01 f303 	lsl.w	r3, r1, r3
 8000c56:	43db      	mvns	r3, r3
 8000c58:	4619      	mov	r1, r3
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	400a      	ands	r2, r1
 8000c60:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;	// setting
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	68d9      	ldr	r1, [r3, #12]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	697a      	ldr	r2, [r7, #20]
 8000c6e:	430a      	orrs	r2, r1
 8000c70:	60da      	str	r2, [r3, #12]


	// 4. configure the optype
	temp = 0;
 8000c72:	2300      	movs	r3, #0
 8000c74:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	7a1b      	ldrb	r3, [r3, #8]
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	791b      	ldrb	r3, [r3, #4]
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x01 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clear
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	685a      	ldr	r2, [r3, #4]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	791b      	ldrb	r3, [r3, #4]
 8000c90:	4619      	mov	r1, r3
 8000c92:	2301      	movs	r3, #1
 8000c94:	408b      	lsls	r3, r1
 8000c96:	43db      	mvns	r3, r3
 8000c98:	4619      	mov	r1, r3
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	400a      	ands	r2, r1
 8000ca0:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;	// setting
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	6859      	ldr	r1, [r3, #4]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	697a      	ldr	r2, [r7, #20]
 8000cae:	430a      	orrs	r2, r1
 8000cb0:	605a      	str	r2, [r3, #4]

	// 5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	795b      	ldrb	r3, [r3, #5]
 8000cb6:	2b02      	cmp	r3, #2
 8000cb8:	d131      	bne.n	8000d1e <GPIO_Init+0x31a>
	{
		// configure the alt function register
		uint8_t temp1,temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	791b      	ldrb	r3, [r3, #4]
 8000cbe:	08db      	lsrs	r3, r3, #3
 8000cc0:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	791b      	ldrb	r3, [r3, #4]
 8000cc6:	f003 0307 	and.w	r3, r3, #7
 8000cca:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2)); // clearing
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	7c3a      	ldrb	r2, [r7, #16]
 8000cd2:	3208      	adds	r2, #8
 8000cd4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000cd8:	7bfb      	ldrb	r3, [r7, #15]
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	220f      	movs	r2, #15
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	43db      	mvns	r3, r3
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	7c3a      	ldrb	r2, [r7, #16]
 8000cec:	4001      	ands	r1, r0
 8000cee:	3208      	adds	r2, #8
 8000cf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2); // setting
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	7c3a      	ldrb	r2, [r7, #16]
 8000cfa:	3208      	adds	r2, #8
 8000cfc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	7a5b      	ldrb	r3, [r3, #9]
 8000d04:	461a      	mov	r2, r3
 8000d06:	7bfb      	ldrb	r3, [r7, #15]
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	4618      	mov	r0, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	7c3a      	ldrb	r2, [r7, #16]
 8000d16:	4301      	orrs	r1, r0
 8000d18:	3208      	adds	r2, #8
 8000d1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8000d1e:	bf00      	nop
 8000d20:	3718      	adds	r7, #24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	40013800 	.word	0x40013800
 8000d30:	40013c00 	.word	0x40013c00

08000d34 <GPIO_ReadFromInputPin>:

/*
 * Data read and write
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	460b      	mov	r3, r1
 8000d3e:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	691a      	ldr	r2, [r3, #16]
 8000d44:	78fb      	ldrb	r3, [r7, #3]
 8000d46:	fa22 f303 	lsr.w	r3, r2, r3
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	f003 0301 	and.w	r3, r3, #1
 8000d50:	73fb      	strb	r3, [r7, #15]
	return value;
 8000d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3714      	adds	r7, #20
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <__libc_init_array>:
 8000d60:	b570      	push	{r4, r5, r6, lr}
 8000d62:	4d0d      	ldr	r5, [pc, #52]	; (8000d98 <__libc_init_array+0x38>)
 8000d64:	4c0d      	ldr	r4, [pc, #52]	; (8000d9c <__libc_init_array+0x3c>)
 8000d66:	1b64      	subs	r4, r4, r5
 8000d68:	10a4      	asrs	r4, r4, #2
 8000d6a:	2600      	movs	r6, #0
 8000d6c:	42a6      	cmp	r6, r4
 8000d6e:	d109      	bne.n	8000d84 <__libc_init_array+0x24>
 8000d70:	4d0b      	ldr	r5, [pc, #44]	; (8000da0 <__libc_init_array+0x40>)
 8000d72:	4c0c      	ldr	r4, [pc, #48]	; (8000da4 <__libc_init_array+0x44>)
 8000d74:	f000 f818 	bl	8000da8 <_init>
 8000d78:	1b64      	subs	r4, r4, r5
 8000d7a:	10a4      	asrs	r4, r4, #2
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	42a6      	cmp	r6, r4
 8000d80:	d105      	bne.n	8000d8e <__libc_init_array+0x2e>
 8000d82:	bd70      	pop	{r4, r5, r6, pc}
 8000d84:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d88:	4798      	blx	r3
 8000d8a:	3601      	adds	r6, #1
 8000d8c:	e7ee      	b.n	8000d6c <__libc_init_array+0xc>
 8000d8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d92:	4798      	blx	r3
 8000d94:	3601      	adds	r6, #1
 8000d96:	e7f2      	b.n	8000d7e <__libc_init_array+0x1e>
 8000d98:	08000dc0 	.word	0x08000dc0
 8000d9c:	08000dc0 	.word	0x08000dc0
 8000da0:	08000dc0 	.word	0x08000dc0
 8000da4:	08000dc4 	.word	0x08000dc4

08000da8 <_init>:
 8000da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000daa:	bf00      	nop
 8000dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dae:	bc08      	pop	{r3}
 8000db0:	469e      	mov	lr, r3
 8000db2:	4770      	bx	lr

08000db4 <_fini>:
 8000db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000db6:	bf00      	nop
 8000db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dba:	bc08      	pop	{r3}
 8000dbc:	469e      	mov	lr, r3
 8000dbe:	4770      	bx	lr
