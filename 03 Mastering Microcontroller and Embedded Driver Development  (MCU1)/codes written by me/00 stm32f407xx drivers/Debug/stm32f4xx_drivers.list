
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002240  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  080023e8  080023e8  000123e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024e0  080024e0  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  080024e0  080024e0  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080024e0  080024e0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024e0  080024e0  000124e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080024e4  080024e4  000124e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080024e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00000080  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000fc  200000fc  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004f0d  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000ee4  00000000  00000000  00024fb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003b8  00000000  00000000  00025ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000330  00000000  00000000  00026258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000405e  00000000  00000000  00026588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004063  00000000  00000000  0002a5e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000da0a  00000000  00000000  0002e649  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0003c053  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001470  00000000  00000000  0003c0a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	2000007c 	.word	0x2000007c
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080023d0 	.word	0x080023d0

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000080 	.word	0x20000080
 80001e4:	080023d0 	.word	0x080023d0

080001e8 <init_systick_timer>:
#define SYSTICK_TIM_CLK		16000000UL



void init_systick_timer(uint32_t tick_hz)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b087      	sub	sp, #28
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014;
 80001f0:	4b15      	ldr	r3, [pc, #84]	; (8000248 <init_systick_timer+0x60>)
 80001f2:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 80001f4:	4b15      	ldr	r3, [pc, #84]	; (800024c <init_systick_timer+0x64>)
 80001f6:	613b      	str	r3, [r7, #16]

    /* calculation of reload value */
    uint32_t count_value = (SYSTICK_TIM_CLK/tick_hz)-1;
 80001f8:	4a15      	ldr	r2, [pc, #84]	; (8000250 <init_systick_timer+0x68>)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000200:	3b01      	subs	r3, #1
 8000202:	60fb      	str	r3, [r7, #12]

    //Clear the value of SVR
    *pSRVR &= ~(0x00FFFFFFFF);
 8000204:	697b      	ldr	r3, [r7, #20]
 8000206:	2200      	movs	r2, #0
 8000208:	601a      	str	r2, [r3, #0]

    //load the value in to SVR
    *pSRVR |= count_value;
 800020a:	697b      	ldr	r3, [r7, #20]
 800020c:	681a      	ldr	r2, [r3, #0]
 800020e:	68fb      	ldr	r3, [r7, #12]
 8000210:	431a      	orrs	r2, r3
 8000212:	697b      	ldr	r3, [r7, #20]
 8000214:	601a      	str	r2, [r3, #0]

    //do some settings
    *pSCSR |= ( 1 << 1); //Enables SysTick exception request:
 8000216:	693b      	ldr	r3, [r7, #16]
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	f043 0202 	orr.w	r2, r3, #2
 800021e:	693b      	ldr	r3, [r7, #16]
 8000220:	601a      	str	r2, [r3, #0]
    *pSCSR |= ( 1 << 2);  //Indicates the clock source, processor clock source
 8000222:	693b      	ldr	r3, [r7, #16]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	f043 0204 	orr.w	r2, r3, #4
 800022a:	693b      	ldr	r3, [r7, #16]
 800022c:	601a      	str	r2, [r3, #0]

    //enable the systick
    *pSCSR |= ( 1 << 0); //enables the counter
 800022e:	693b      	ldr	r3, [r7, #16]
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	f043 0201 	orr.w	r2, r3, #1
 8000236:	693b      	ldr	r3, [r7, #16]
 8000238:	601a      	str	r2, [r3, #0]

}
 800023a:	bf00      	nop
 800023c:	371c      	adds	r7, #28
 800023e:	46bd      	mov	sp, r7
 8000240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000244:	4770      	bx	lr
 8000246:	bf00      	nop
 8000248:	e000e014 	.word	0xe000e014
 800024c:	e000e010 	.word	0xe000e010
 8000250:	00f42400 	.word	0x00f42400

08000254 <main>:

RTC_time_t current_time;
RTC_date_t current_date;

int main(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b082      	sub	sp, #8
 8000258:	af00      	add	r7, sp, #0
	printf("RTC test\n");
 800025a:	4839      	ldr	r0, [pc, #228]	; (8000340 <main+0xec>)
 800025c:	f001 fc60 	bl	8001b20 <puts>

	lcd_init();
 8000260:	f000 fc56 	bl	8000b10 <lcd_init>

	lcd_print_string("RTC Test...");
 8000264:	4837      	ldr	r0, [pc, #220]	; (8000344 <main+0xf0>)
 8000266:	f000 fd6f 	bl	8000d48 <lcd_print_string>

	mdelay(2000);
 800026a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800026e:	f000 fdba 	bl	8000de6 <mdelay>

	lcd_display_clear();
 8000272:	f000 fd7d 	bl	8000d70 <lcd_display_clear>
	lcd_display_return_home();
 8000276:	f000 fd85 	bl	8000d84 <lcd_display_return_home>

	if(ds1307_init())
 800027a:	f000 fa61 	bl	8000740 <ds1307_init>
 800027e:	4603      	mov	r3, r0
 8000280:	2b00      	cmp	r3, #0
 8000282:	d003      	beq.n	800028c <main+0x38>
	{
		printf("RTC init has failed\n");
 8000284:	4830      	ldr	r0, [pc, #192]	; (8000348 <main+0xf4>)
 8000286:	f001 fc4b 	bl	8001b20 <puts>
		while(1);
 800028a:	e7fe      	b.n	800028a <main+0x36>
	}

	init_systick_timer(1);
 800028c:	2001      	movs	r0, #1
 800028e:	f7ff ffab 	bl	80001e8 <init_systick_timer>

	current_date.day = FRIDAY;
 8000292:	4b2e      	ldr	r3, [pc, #184]	; (800034c <main+0xf8>)
 8000294:	2206      	movs	r2, #6
 8000296:	70da      	strb	r2, [r3, #3]
	current_date.date = 15;
 8000298:	4b2c      	ldr	r3, [pc, #176]	; (800034c <main+0xf8>)
 800029a:	220f      	movs	r2, #15
 800029c:	701a      	strb	r2, [r3, #0]
	current_date.month = 1;
 800029e:	4b2b      	ldr	r3, [pc, #172]	; (800034c <main+0xf8>)
 80002a0:	2201      	movs	r2, #1
 80002a2:	705a      	strb	r2, [r3, #1]
	current_date.year = 21;
 80002a4:	4b29      	ldr	r3, [pc, #164]	; (800034c <main+0xf8>)
 80002a6:	2215      	movs	r2, #21
 80002a8:	709a      	strb	r2, [r3, #2]

	current_time.hours = 11;
 80002aa:	4b29      	ldr	r3, [pc, #164]	; (8000350 <main+0xfc>)
 80002ac:	220b      	movs	r2, #11
 80002ae:	709a      	strb	r2, [r3, #2]
	current_time.minutes = 59;
 80002b0:	4b27      	ldr	r3, [pc, #156]	; (8000350 <main+0xfc>)
 80002b2:	223b      	movs	r2, #59	; 0x3b
 80002b4:	705a      	strb	r2, [r3, #1]
	current_time.seconds = 30;
 80002b6:	4b26      	ldr	r3, [pc, #152]	; (8000350 <main+0xfc>)
 80002b8:	221e      	movs	r2, #30
 80002ba:	701a      	strb	r2, [r3, #0]
	current_time.time_format = TIME_FORMAT_12HRS_PM;
 80002bc:	4b24      	ldr	r3, [pc, #144]	; (8000350 <main+0xfc>)
 80002be:	2201      	movs	r2, #1
 80002c0:	70da      	strb	r2, [r3, #3]

	ds1307_set_current_date(&current_date);
 80002c2:	4822      	ldr	r0, [pc, #136]	; (800034c <main+0xf8>)
 80002c4:	f000 faec 	bl	80008a0 <ds1307_set_current_date>
	ds1307_set_current_time(&current_time);
 80002c8:	4821      	ldr	r0, [pc, #132]	; (8000350 <main+0xfc>)
 80002ca:	f000 fa57 	bl	800077c <ds1307_set_current_time>

	ds1307_get_current_time(&current_time);
 80002ce:	4820      	ldr	r0, [pc, #128]	; (8000350 <main+0xfc>)
 80002d0:	f000 fa9d 	bl	800080e <ds1307_get_current_time>
	ds1307_get_current_date(&current_date);
 80002d4:	481d      	ldr	r0, [pc, #116]	; (800034c <main+0xf8>)
 80002d6:	f000 fb13 	bl	8000900 <ds1307_get_current_date>

	char *am_pm;
	if(current_time.time_format != TIME_FORMAT_24HRS)
 80002da:	4b1d      	ldr	r3, [pc, #116]	; (8000350 <main+0xfc>)
 80002dc:	78db      	ldrb	r3, [r3, #3]
 80002de:	2b02      	cmp	r3, #2
 80002e0:	d012      	beq.n	8000308 <main+0xb4>
	{
		am_pm = (current_time.time_format) ? "PM" : "AM";
 80002e2:	4b1b      	ldr	r3, [pc, #108]	; (8000350 <main+0xfc>)
 80002e4:	78db      	ldrb	r3, [r3, #3]
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <main+0x9a>
 80002ea:	4b1a      	ldr	r3, [pc, #104]	; (8000354 <main+0x100>)
 80002ec:	e000      	b.n	80002f0 <main+0x9c>
 80002ee:	4b1a      	ldr	r3, [pc, #104]	; (8000358 <main+0x104>)
 80002f0:	607b      	str	r3, [r7, #4]
		//printf("Current time = %s %s\n", time_to_string(&current_time), am_pm);	// 04:25:41 PM
		lcd_print_string(time_to_string(&current_time));
 80002f2:	4817      	ldr	r0, [pc, #92]	; (8000350 <main+0xfc>)
 80002f4:	f000 f850 	bl	8000398 <time_to_string>
 80002f8:	4603      	mov	r3, r0
 80002fa:	4618      	mov	r0, r3
 80002fc:	f000 fd24 	bl	8000d48 <lcd_print_string>
		lcd_print_string(am_pm);
 8000300:	6878      	ldr	r0, [r7, #4]
 8000302:	f000 fd21 	bl	8000d48 <lcd_print_string>
 8000306:	e006      	b.n	8000316 <main+0xc2>
	}
	else
	{
		//printf("Current time = %s\n", time_to_string(&current_time));	// 04:25:41
		lcd_print_string(time_to_string(&current_time));
 8000308:	4811      	ldr	r0, [pc, #68]	; (8000350 <main+0xfc>)
 800030a:	f000 f845 	bl	8000398 <time_to_string>
 800030e:	4603      	mov	r3, r0
 8000310:	4618      	mov	r0, r3
 8000312:	f000 fd19 	bl	8000d48 <lcd_print_string>
	}

	// 15/01/21 <friday>
	//printf("Current date = %s <%s>\n", date_to_string(&current_date), get_day_of_week(current_date.day));
	lcd_set_cursor(2, 1);
 8000316:	2101      	movs	r1, #1
 8000318:	2002      	movs	r0, #2
 800031a:	f000 fd3d 	bl	8000d98 <lcd_set_cursor>
	lcd_print_string(date_to_string(&current_date));
 800031e:	480b      	ldr	r0, [pc, #44]	; (800034c <main+0xf8>)
 8000320:	f000 f864 	bl	80003ec <date_to_string>
 8000324:	4603      	mov	r3, r0
 8000326:	4618      	mov	r0, r3
 8000328:	f000 fd0e 	bl	8000d48 <lcd_print_string>
	lcd_print_string(get_day_of_week(current_date.day));
 800032c:	4b07      	ldr	r3, [pc, #28]	; (800034c <main+0xf8>)
 800032e:	78db      	ldrb	r3, [r3, #3]
 8000330:	4618      	mov	r0, r3
 8000332:	f000 f813 	bl	800035c <get_day_of_week>
 8000336:	4603      	mov	r3, r0
 8000338:	4618      	mov	r0, r3
 800033a:	f000 fd05 	bl	8000d48 <lcd_print_string>

	while(1);
 800033e:	e7fe      	b.n	800033e <main+0xea>
 8000340:	0800242c 	.word	0x0800242c
 8000344:	08002438 	.word	0x08002438
 8000348:	08002444 	.word	0x08002444
 800034c:	200000bc 	.word	0x200000bc
 8000350:	200000c0 	.word	0x200000c0
 8000354:	08002458 	.word	0x08002458
 8000358:	0800245c 	.word	0x0800245c

0800035c <get_day_of_week>:
	return 0;
}

char* get_day_of_week(uint8_t i)
{
 800035c:	b4b0      	push	{r4, r5, r7}
 800035e:	b08b      	sub	sp, #44	; 0x2c
 8000360:	af00      	add	r7, sp, #0
 8000362:	4603      	mov	r3, r0
 8000364:	71fb      	strb	r3, [r7, #7]
	char *days[] = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};
 8000366:	4b0b      	ldr	r3, [pc, #44]	; (8000394 <get_day_of_week+0x38>)
 8000368:	f107 040c 	add.w	r4, r7, #12
 800036c:	461d      	mov	r5, r3
 800036e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000370:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000372:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000376:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	return days[i-1];
 800037a:	79fb      	ldrb	r3, [r7, #7]
 800037c:	3b01      	subs	r3, #1
 800037e:	009b      	lsls	r3, r3, #2
 8000380:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000384:	4413      	add	r3, r2
 8000386:	f853 3c1c 	ldr.w	r3, [r3, #-28]
}
 800038a:	4618      	mov	r0, r3
 800038c:	372c      	adds	r7, #44	; 0x2c
 800038e:	46bd      	mov	sp, r7
 8000390:	bcb0      	pop	{r4, r5, r7}
 8000392:	4770      	bx	lr
 8000394:	08002460 	.word	0x08002460

08000398 <time_to_string>:


// hh:mm:ss
char* time_to_string(RTC_time_t *rtc_time)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b082      	sub	sp, #8
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
	static char buff[9];
	buff[2] = ':';
 80003a0:	4b0f      	ldr	r3, [pc, #60]	; (80003e0 <time_to_string+0x48>)
 80003a2:	223a      	movs	r2, #58	; 0x3a
 80003a4:	709a      	strb	r2, [r3, #2]
	buff[5] = ':';
 80003a6:	4b0e      	ldr	r3, [pc, #56]	; (80003e0 <time_to_string+0x48>)
 80003a8:	223a      	movs	r2, #58	; 0x3a
 80003aa:	715a      	strb	r2, [r3, #5]
	number_to_string(rtc_time->hours, buff);
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	789b      	ldrb	r3, [r3, #2]
 80003b0:	490b      	ldr	r1, [pc, #44]	; (80003e0 <time_to_string+0x48>)
 80003b2:	4618      	mov	r0, r3
 80003b4:	f000 f844 	bl	8000440 <number_to_string>
	number_to_string(rtc_time->minutes, &buff[3]);
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	785b      	ldrb	r3, [r3, #1]
 80003bc:	4909      	ldr	r1, [pc, #36]	; (80003e4 <time_to_string+0x4c>)
 80003be:	4618      	mov	r0, r3
 80003c0:	f000 f83e 	bl	8000440 <number_to_string>
	number_to_string(rtc_time->seconds, &buff[6]);
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	4907      	ldr	r1, [pc, #28]	; (80003e8 <time_to_string+0x50>)
 80003ca:	4618      	mov	r0, r3
 80003cc:	f000 f838 	bl	8000440 <number_to_string>
	buff[8] = '\0';
 80003d0:	4b03      	ldr	r3, [pc, #12]	; (80003e0 <time_to_string+0x48>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	721a      	strb	r2, [r3, #8]
	return buff;
 80003d6:	4b02      	ldr	r3, [pc, #8]	; (80003e0 <time_to_string+0x48>)
}
 80003d8:	4618      	mov	r0, r3
 80003da:	3708      	adds	r7, #8
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	20000098 	.word	0x20000098
 80003e4:	2000009b 	.word	0x2000009b
 80003e8:	2000009e 	.word	0x2000009e

080003ec <date_to_string>:

// dd/mm/yy
char* date_to_string(RTC_date_t *rtc_date)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
	static char buff[9];
	buff[2] = '/';
 80003f4:	4b0f      	ldr	r3, [pc, #60]	; (8000434 <date_to_string+0x48>)
 80003f6:	222f      	movs	r2, #47	; 0x2f
 80003f8:	709a      	strb	r2, [r3, #2]
	buff[5] = '/';
 80003fa:	4b0e      	ldr	r3, [pc, #56]	; (8000434 <date_to_string+0x48>)
 80003fc:	222f      	movs	r2, #47	; 0x2f
 80003fe:	715a      	strb	r2, [r3, #5]
	number_to_string(rtc_date->date, buff);
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	490b      	ldr	r1, [pc, #44]	; (8000434 <date_to_string+0x48>)
 8000406:	4618      	mov	r0, r3
 8000408:	f000 f81a 	bl	8000440 <number_to_string>
	number_to_string(rtc_date->month, &buff[3]);
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	785b      	ldrb	r3, [r3, #1]
 8000410:	4909      	ldr	r1, [pc, #36]	; (8000438 <date_to_string+0x4c>)
 8000412:	4618      	mov	r0, r3
 8000414:	f000 f814 	bl	8000440 <number_to_string>
	number_to_string(rtc_date->year, &buff[6]);
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	789b      	ldrb	r3, [r3, #2]
 800041c:	4907      	ldr	r1, [pc, #28]	; (800043c <date_to_string+0x50>)
 800041e:	4618      	mov	r0, r3
 8000420:	f000 f80e 	bl	8000440 <number_to_string>
	buff[8] = '\0';
 8000424:	4b03      	ldr	r3, [pc, #12]	; (8000434 <date_to_string+0x48>)
 8000426:	2200      	movs	r2, #0
 8000428:	721a      	strb	r2, [r3, #8]
	return buff;
 800042a:	4b02      	ldr	r3, [pc, #8]	; (8000434 <date_to_string+0x48>)
}
 800042c:	4618      	mov	r0, r3
 800042e:	3708      	adds	r7, #8
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}
 8000434:	200000a4 	.word	0x200000a4
 8000438:	200000a7 	.word	0x200000a7
 800043c:	200000aa 	.word	0x200000aa

08000440 <number_to_string>:

void number_to_string(uint8_t num, char *buff)
{
 8000440:	b480      	push	{r7}
 8000442:	b083      	sub	sp, #12
 8000444:	af00      	add	r7, sp, #0
 8000446:	4603      	mov	r3, r0
 8000448:	6039      	str	r1, [r7, #0]
 800044a:	71fb      	strb	r3, [r7, #7]
	if(num < 10)
 800044c:	79fb      	ldrb	r3, [r7, #7]
 800044e:	2b09      	cmp	r3, #9
 8000450:	d809      	bhi.n	8000466 <number_to_string+0x26>
	{
		buff[0] = '0';
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	2230      	movs	r2, #48	; 0x30
 8000456:	701a      	strb	r2, [r3, #0]
		buff[1] = num + 48;
 8000458:	683b      	ldr	r3, [r7, #0]
 800045a:	3301      	adds	r3, #1
 800045c:	79fa      	ldrb	r2, [r7, #7]
 800045e:	3230      	adds	r2, #48	; 0x30
 8000460:	b2d2      	uxtb	r2, r2
 8000462:	701a      	strb	r2, [r3, #0]
	else if(num >= 10 && num < 99)
	{
		buff[0] = (num / 10) + 48;
		buff[1] = (num % 10) + 48;
	}
}
 8000464:	e01f      	b.n	80004a6 <number_to_string+0x66>
	else if(num >= 10 && num < 99)
 8000466:	79fb      	ldrb	r3, [r7, #7]
 8000468:	2b09      	cmp	r3, #9
 800046a:	d91c      	bls.n	80004a6 <number_to_string+0x66>
 800046c:	79fb      	ldrb	r3, [r7, #7]
 800046e:	2b62      	cmp	r3, #98	; 0x62
 8000470:	d819      	bhi.n	80004a6 <number_to_string+0x66>
		buff[0] = (num / 10) + 48;
 8000472:	79fb      	ldrb	r3, [r7, #7]
 8000474:	4a0f      	ldr	r2, [pc, #60]	; (80004b4 <number_to_string+0x74>)
 8000476:	fba2 2303 	umull	r2, r3, r2, r3
 800047a:	08db      	lsrs	r3, r3, #3
 800047c:	b2db      	uxtb	r3, r3
 800047e:	3330      	adds	r3, #48	; 0x30
 8000480:	b2da      	uxtb	r2, r3
 8000482:	683b      	ldr	r3, [r7, #0]
 8000484:	701a      	strb	r2, [r3, #0]
		buff[1] = (num % 10) + 48;
 8000486:	79fa      	ldrb	r2, [r7, #7]
 8000488:	4b0a      	ldr	r3, [pc, #40]	; (80004b4 <number_to_string+0x74>)
 800048a:	fba3 1302 	umull	r1, r3, r3, r2
 800048e:	08d9      	lsrs	r1, r3, #3
 8000490:	460b      	mov	r3, r1
 8000492:	009b      	lsls	r3, r3, #2
 8000494:	440b      	add	r3, r1
 8000496:	005b      	lsls	r3, r3, #1
 8000498:	1ad3      	subs	r3, r2, r3
 800049a:	b2da      	uxtb	r2, r3
 800049c:	683b      	ldr	r3, [r7, #0]
 800049e:	3301      	adds	r3, #1
 80004a0:	3230      	adds	r2, #48	; 0x30
 80004a2:	b2d2      	uxtb	r2, r2
 80004a4:	701a      	strb	r2, [r3, #0]
}
 80004a6:	bf00      	nop
 80004a8:	370c      	adds	r7, #12
 80004aa:	46bd      	mov	sp, r7
 80004ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b0:	4770      	bx	lr
 80004b2:	bf00      	nop
 80004b4:	cccccccd 	.word	0xcccccccd

080004b8 <SysTick_Handler>:

void SysTick_Handler(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
	ds1307_get_current_time(&current_time);
 80004be:	4821      	ldr	r0, [pc, #132]	; (8000544 <SysTick_Handler+0x8c>)
 80004c0:	f000 f9a5 	bl	800080e <ds1307_get_current_time>


	lcd_set_cursor(1, 1);
 80004c4:	2101      	movs	r1, #1
 80004c6:	2001      	movs	r0, #1
 80004c8:	f000 fc66 	bl	8000d98 <lcd_set_cursor>
	char *am_pm;
	if(current_time.time_format != TIME_FORMAT_24HRS)
 80004cc:	4b1d      	ldr	r3, [pc, #116]	; (8000544 <SysTick_Handler+0x8c>)
 80004ce:	78db      	ldrb	r3, [r3, #3]
 80004d0:	2b02      	cmp	r3, #2
 80004d2:	d012      	beq.n	80004fa <SysTick_Handler+0x42>
	{
		am_pm = (current_time.time_format) ? "PM" : "AM";
 80004d4:	4b1b      	ldr	r3, [pc, #108]	; (8000544 <SysTick_Handler+0x8c>)
 80004d6:	78db      	ldrb	r3, [r3, #3]
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d001      	beq.n	80004e0 <SysTick_Handler+0x28>
 80004dc:	4b1a      	ldr	r3, [pc, #104]	; (8000548 <SysTick_Handler+0x90>)
 80004de:	e000      	b.n	80004e2 <SysTick_Handler+0x2a>
 80004e0:	4b1a      	ldr	r3, [pc, #104]	; (800054c <SysTick_Handler+0x94>)
 80004e2:	607b      	str	r3, [r7, #4]
		//printf("Current time = %s %s\n", time_to_string(&current_time), am_pm);	// 04:25:41 PM
		lcd_print_string(time_to_string(&current_time));
 80004e4:	4817      	ldr	r0, [pc, #92]	; (8000544 <SysTick_Handler+0x8c>)
 80004e6:	f7ff ff57 	bl	8000398 <time_to_string>
 80004ea:	4603      	mov	r3, r0
 80004ec:	4618      	mov	r0, r3
 80004ee:	f000 fc2b 	bl	8000d48 <lcd_print_string>
		lcd_print_string(am_pm);
 80004f2:	6878      	ldr	r0, [r7, #4]
 80004f4:	f000 fc28 	bl	8000d48 <lcd_print_string>
 80004f8:	e006      	b.n	8000508 <SysTick_Handler+0x50>
	}
	else
	{
		//printf("Current time = %s\n", time_to_string(&current_time));	// 04:25:41
		lcd_print_string(time_to_string(&current_time));
 80004fa:	4812      	ldr	r0, [pc, #72]	; (8000544 <SysTick_Handler+0x8c>)
 80004fc:	f7ff ff4c 	bl	8000398 <time_to_string>
 8000500:	4603      	mov	r3, r0
 8000502:	4618      	mov	r0, r3
 8000504:	f000 fc20 	bl	8000d48 <lcd_print_string>
	}

	ds1307_get_current_date(&current_date);
 8000508:	4811      	ldr	r0, [pc, #68]	; (8000550 <SysTick_Handler+0x98>)
 800050a:	f000 f9f9 	bl	8000900 <ds1307_get_current_date>
	//printf("Current date = %s <%s>\n", date_to_string(&current_date), get_day_of_week(current_date.day));
	lcd_set_cursor(2, 1);
 800050e:	2101      	movs	r1, #1
 8000510:	2002      	movs	r0, #2
 8000512:	f000 fc41 	bl	8000d98 <lcd_set_cursor>
	lcd_print_string(date_to_string(&current_date));
 8000516:	480e      	ldr	r0, [pc, #56]	; (8000550 <SysTick_Handler+0x98>)
 8000518:	f7ff ff68 	bl	80003ec <date_to_string>
 800051c:	4603      	mov	r3, r0
 800051e:	4618      	mov	r0, r3
 8000520:	f000 fc12 	bl	8000d48 <lcd_print_string>
	lcd_print_char(' ');
 8000524:	2020      	movs	r0, #32
 8000526:	f000 fbed 	bl	8000d04 <lcd_print_char>
	lcd_print_string(get_day_of_week(current_date.day));
 800052a:	4b09      	ldr	r3, [pc, #36]	; (8000550 <SysTick_Handler+0x98>)
 800052c:	78db      	ldrb	r3, [r3, #3]
 800052e:	4618      	mov	r0, r3
 8000530:	f7ff ff14 	bl	800035c <get_day_of_week>
 8000534:	4603      	mov	r3, r0
 8000536:	4618      	mov	r0, r3
 8000538:	f000 fc06 	bl	8000d48 <lcd_print_string>

}
 800053c:	bf00      	nop
 800053e:	3708      	adds	r7, #8
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	200000c0 	.word	0x200000c0
 8000548:	08002458 	.word	0x08002458
 800054c:	0800245c 	.word	0x0800245c
 8000550:	200000bc 	.word	0x200000bc

08000554 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800055e:	4b0f      	ldr	r3, [pc, #60]	; (800059c <ITM_SendChar+0x48>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4a0e      	ldr	r2, [pc, #56]	; (800059c <ITM_SendChar+0x48>)
 8000564:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000568:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800056a:	4b0d      	ldr	r3, [pc, #52]	; (80005a0 <ITM_SendChar+0x4c>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4a0c      	ldr	r2, [pc, #48]	; (80005a0 <ITM_SendChar+0x4c>)
 8000570:	f043 0301 	orr.w	r3, r3, #1
 8000574:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000576:	bf00      	nop
 8000578:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	f003 0301 	and.w	r3, r3, #1
 8000582:	2b00      	cmp	r3, #0
 8000584:	d0f8      	beq.n	8000578 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000586:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	6013      	str	r3, [r2, #0]
}
 800058e:	bf00      	nop
 8000590:	370c      	adds	r7, #12
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	e000edfc 	.word	0xe000edfc
 80005a0:	e0000e00 	.word	0xe0000e00

080005a4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b086      	sub	sp, #24
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	60f8      	str	r0, [r7, #12]
 80005ac:	60b9      	str	r1, [r7, #8]
 80005ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005b0:	2300      	movs	r3, #0
 80005b2:	617b      	str	r3, [r7, #20]
 80005b4:	e00a      	b.n	80005cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80005b6:	f3af 8000 	nop.w
 80005ba:	4601      	mov	r1, r0
 80005bc:	68bb      	ldr	r3, [r7, #8]
 80005be:	1c5a      	adds	r2, r3, #1
 80005c0:	60ba      	str	r2, [r7, #8]
 80005c2:	b2ca      	uxtb	r2, r1
 80005c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005c6:	697b      	ldr	r3, [r7, #20]
 80005c8:	3301      	adds	r3, #1
 80005ca:	617b      	str	r3, [r7, #20]
 80005cc:	697a      	ldr	r2, [r7, #20]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	429a      	cmp	r2, r3
 80005d2:	dbf0      	blt.n	80005b6 <_read+0x12>
	}

return len;
 80005d4:	687b      	ldr	r3, [r7, #4]
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	3718      	adds	r7, #24
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}

080005de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80005de:	b580      	push	{r7, lr}
 80005e0:	b086      	sub	sp, #24
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	60f8      	str	r0, [r7, #12]
 80005e6:	60b9      	str	r1, [r7, #8]
 80005e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005ea:	2300      	movs	r3, #0
 80005ec:	617b      	str	r3, [r7, #20]
 80005ee:	e009      	b.n	8000604 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	1c5a      	adds	r2, r3, #1
 80005f4:	60ba      	str	r2, [r7, #8]
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	4618      	mov	r0, r3
 80005fa:	f7ff ffab 	bl	8000554 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005fe:	697b      	ldr	r3, [r7, #20]
 8000600:	3301      	adds	r3, #1
 8000602:	617b      	str	r3, [r7, #20]
 8000604:	697a      	ldr	r2, [r7, #20]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	429a      	cmp	r2, r3
 800060a:	dbf1      	blt.n	80005f0 <_write+0x12>
	}
	return len;
 800060c:	687b      	ldr	r3, [r7, #4]
}
 800060e:	4618      	mov	r0, r3
 8000610:	3718      	adds	r7, #24
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}

08000616 <_close>:

int _close(int file)
{
 8000616:	b480      	push	{r7}
 8000618:	b083      	sub	sp, #12
 800061a:	af00      	add	r7, sp, #0
 800061c:	6078      	str	r0, [r7, #4]
	return -1;
 800061e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000622:	4618      	mov	r0, r3
 8000624:	370c      	adds	r7, #12
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr

0800062e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800062e:	b480      	push	{r7}
 8000630:	b083      	sub	sp, #12
 8000632:	af00      	add	r7, sp, #0
 8000634:	6078      	str	r0, [r7, #4]
 8000636:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800063e:	605a      	str	r2, [r3, #4]
	return 0;
 8000640:	2300      	movs	r3, #0
}
 8000642:	4618      	mov	r0, r3
 8000644:	370c      	adds	r7, #12
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr

0800064e <_isatty>:

int _isatty(int file)
{
 800064e:	b480      	push	{r7}
 8000650:	b083      	sub	sp, #12
 8000652:	af00      	add	r7, sp, #0
 8000654:	6078      	str	r0, [r7, #4]
	return 1;
 8000656:	2301      	movs	r3, #1
}
 8000658:	4618      	mov	r0, r3
 800065a:	370c      	adds	r7, #12
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr

08000664 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000664:	b480      	push	{r7}
 8000666:	b085      	sub	sp, #20
 8000668:	af00      	add	r7, sp, #0
 800066a:	60f8      	str	r0, [r7, #12]
 800066c:	60b9      	str	r1, [r7, #8]
 800066e:	607a      	str	r2, [r7, #4]
	return 0;
 8000670:	2300      	movs	r3, #0
}
 8000672:	4618      	mov	r0, r3
 8000674:	3714      	adds	r7, #20
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
	...

08000680 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000688:	4a14      	ldr	r2, [pc, #80]	; (80006dc <_sbrk+0x5c>)
 800068a:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <_sbrk+0x60>)
 800068c:	1ad3      	subs	r3, r2, r3
 800068e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000690:	697b      	ldr	r3, [r7, #20]
 8000692:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000694:	4b13      	ldr	r3, [pc, #76]	; (80006e4 <_sbrk+0x64>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d102      	bne.n	80006a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800069c:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <_sbrk+0x64>)
 800069e:	4a12      	ldr	r2, [pc, #72]	; (80006e8 <_sbrk+0x68>)
 80006a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006a2:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <_sbrk+0x64>)
 80006a4:	681a      	ldr	r2, [r3, #0]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	4413      	add	r3, r2
 80006aa:	693a      	ldr	r2, [r7, #16]
 80006ac:	429a      	cmp	r2, r3
 80006ae:	d207      	bcs.n	80006c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006b0:	f001 f996 	bl	80019e0 <__errno>
 80006b4:	4603      	mov	r3, r0
 80006b6:	220c      	movs	r2, #12
 80006b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006ba:	f04f 33ff 	mov.w	r3, #4294967295
 80006be:	e009      	b.n	80006d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006c0:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <_sbrk+0x64>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006c6:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <_sbrk+0x64>)
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	4413      	add	r3, r2
 80006ce:	4a05      	ldr	r2, [pc, #20]	; (80006e4 <_sbrk+0x64>)
 80006d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006d2:	68fb      	ldr	r3, [r7, #12]
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3718      	adds	r7, #24
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20020000 	.word	0x20020000
 80006e0:	00000400 	.word	0x00000400
 80006e4:	200000b0 	.word	0x200000b0
 80006e8:	20000100 	.word	0x20000100

080006ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006ec:	480d      	ldr	r0, [pc, #52]	; (8000724 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006ee:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80006f0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006f4:	480c      	ldr	r0, [pc, #48]	; (8000728 <LoopForever+0x6>)
  ldr r1, =_edata
 80006f6:	490d      	ldr	r1, [pc, #52]	; (800072c <LoopForever+0xa>)
  ldr r2, =_sidata
 80006f8:	4a0d      	ldr	r2, [pc, #52]	; (8000730 <LoopForever+0xe>)
  movs r3, #0
 80006fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006fc:	e002      	b.n	8000704 <LoopCopyDataInit>

080006fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000700:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000702:	3304      	adds	r3, #4

08000704 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000704:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000706:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000708:	d3f9      	bcc.n	80006fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800070a:	4a0a      	ldr	r2, [pc, #40]	; (8000734 <LoopForever+0x12>)
  ldr r4, =_ebss
 800070c:	4c0a      	ldr	r4, [pc, #40]	; (8000738 <LoopForever+0x16>)
  movs r3, #0
 800070e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000710:	e001      	b.n	8000716 <LoopFillZerobss>

08000712 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000712:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000714:	3204      	adds	r2, #4

08000716 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000716:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000718:	d3fb      	bcc.n	8000712 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800071a:	f001 f967 	bl	80019ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800071e:	f7ff fd99 	bl	8000254 <main>

08000722 <LoopForever>:

LoopForever:
    b LoopForever
 8000722:	e7fe      	b.n	8000722 <LoopForever>
  ldr   r0, =_estack
 8000724:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000728:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800072c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000730:	080024e8 	.word	0x080024e8
  ldr r2, =_sbss
 8000734:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000738:	200000fc 	.word	0x200000fc

0800073c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800073c:	e7fe      	b.n	800073c <ADC_IRQHandler>
	...

08000740 <ds1307_init>:


// returns 1: CH = 1; init failed
// returns 0: CH = 0; init succeeded
uint8_t ds1307_init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
	// 1. init the i2c pins
	ds1307_i2c_pin_config();
 8000746:	f000 f90f 	bl	8000968 <ds1307_i2c_pin_config>

	// 2. initialize the i2c peripheral
	ds1307_i2c_config();
 800074a:	f000 f949 	bl	80009e0 <ds1307_i2c_config>

	// 3. enabLe the I2C peripheral
	I2C_PeripheralControl(DS1307_I2C, ENABLE);
 800074e:	2101      	movs	r1, #1
 8000750:	4809      	ldr	r0, [pc, #36]	; (8000778 <ds1307_init+0x38>)
 8000752:	f000 fdef 	bl	8001334 <I2C_PeripheralControl>

	// 4. make clock halt = 0;
	ds1307_write(0x00, DS1307_ADDR_SEC);
 8000756:	2100      	movs	r1, #0
 8000758:	2000      	movs	r0, #0
 800075a:	f000 f957 	bl	8000a0c <ds1307_write>

	// 5. read back clock halt bit
	uint8_t clock_state = ds1307_read(DS1307_ADDR_SEC);
 800075e:	2000      	movs	r0, #0
 8000760:	f000 f970 	bl	8000a44 <ds1307_read>
 8000764:	4603      	mov	r3, r0
 8000766:	71fb      	strb	r3, [r7, #7]

	return ((clock_state >> 7) & 0x1);
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	09db      	lsrs	r3, r3, #7
 800076c:	b2db      	uxtb	r3, r3
}
 800076e:	4618      	mov	r0, r3
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40005400 	.word	0x40005400

0800077c <ds1307_set_current_time>:

void ds1307_set_current_time(RTC_time_t *rtc_time)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
	uint8_t seconds, hrs;
	seconds = binary_to_bcd(rtc_time->seconds);
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	4618      	mov	r0, r3
 800078a:	f000 f979 	bl	8000a80 <binary_to_bcd>
 800078e:	4603      	mov	r3, r0
 8000790:	73bb      	strb	r3, [r7, #14]
	seconds &= ~(1 << 7);
 8000792:	7bbb      	ldrb	r3, [r7, #14]
 8000794:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000798:	73bb      	strb	r3, [r7, #14]
	ds1307_write(seconds, DS1307_ADDR_SEC);
 800079a:	7bbb      	ldrb	r3, [r7, #14]
 800079c:	2100      	movs	r1, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f000 f934 	bl	8000a0c <ds1307_write>
	ds1307_write(binary_to_bcd(rtc_time->minutes), DS1307_ADDR_MIN);
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	785b      	ldrb	r3, [r3, #1]
 80007a8:	4618      	mov	r0, r3
 80007aa:	f000 f969 	bl	8000a80 <binary_to_bcd>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2101      	movs	r1, #1
 80007b2:	4618      	mov	r0, r3
 80007b4:	f000 f92a 	bl	8000a0c <ds1307_write>
	hrs = binary_to_bcd(rtc_time->hours);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	789b      	ldrb	r3, [r3, #2]
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 f95f 	bl	8000a80 <binary_to_bcd>
 80007c2:	4603      	mov	r3, r0
 80007c4:	73fb      	strb	r3, [r7, #15]
	if(rtc_time->time_format == TIME_FORMAT_24HRS)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	78db      	ldrb	r3, [r3, #3]
 80007ca:	2b02      	cmp	r3, #2
 80007cc:	d104      	bne.n	80007d8 <ds1307_set_current_time+0x5c>
	{
		hrs &= ~(1 << 6);
 80007ce:	7bfb      	ldrb	r3, [r7, #15]
 80007d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80007d4:	73fb      	strb	r3, [r7, #15]
 80007d6:	e011      	b.n	80007fc <ds1307_set_current_time+0x80>
	}
	else
	{
		hrs |= (1 << 6);
 80007d8:	7bfb      	ldrb	r3, [r7, #15]
 80007da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007de:	73fb      	strb	r3, [r7, #15]
		hrs = (rtc_time->time_format == TIME_FORMAT_12HRS_PM) ? (hrs | (1 << 5)) : (hrs & ~(1 << 5));
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	78db      	ldrb	r3, [r3, #3]
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d104      	bne.n	80007f2 <ds1307_set_current_time+0x76>
 80007e8:	7bfb      	ldrb	r3, [r7, #15]
 80007ea:	f043 0320 	orr.w	r3, r3, #32
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	e003      	b.n	80007fa <ds1307_set_current_time+0x7e>
 80007f2:	7bfb      	ldrb	r3, [r7, #15]
 80007f4:	f023 0320 	bic.w	r3, r3, #32
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	73fb      	strb	r3, [r7, #15]
	}
	ds1307_write(hrs, DS1307_ADDR_HRS);
 80007fc:	7bfb      	ldrb	r3, [r7, #15]
 80007fe:	2102      	movs	r1, #2
 8000800:	4618      	mov	r0, r3
 8000802:	f000 f903 	bl	8000a0c <ds1307_write>
}
 8000806:	bf00      	nop
 8000808:	3710      	adds	r7, #16
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}

0800080e <ds1307_get_current_time>:

void ds1307_get_current_time(RTC_time_t *rtc_time)
{
 800080e:	b580      	push	{r7, lr}
 8000810:	b084      	sub	sp, #16
 8000812:	af00      	add	r7, sp, #0
 8000814:	6078      	str	r0, [r7, #4]
	uint8_t seconds,hrs;

	seconds = ds1307_read(DS1307_ADDR_SEC);
 8000816:	2000      	movs	r0, #0
 8000818:	f000 f914 	bl	8000a44 <ds1307_read>
 800081c:	4603      	mov	r3, r0
 800081e:	73bb      	strb	r3, [r7, #14]

	seconds &= ~(1 << 7);
 8000820:	7bbb      	ldrb	r3, [r7, #14]
 8000822:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000826:	73bb      	strb	r3, [r7, #14]

	rtc_time->seconds = bcd_to_binary(seconds);
 8000828:	7bbb      	ldrb	r3, [r7, #14]
 800082a:	4618      	mov	r0, r3
 800082c:	f000 f954 	bl	8000ad8 <bcd_to_binary>
 8000830:	4603      	mov	r3, r0
 8000832:	461a      	mov	r2, r3
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	701a      	strb	r2, [r3, #0]
	rtc_time->minutes = bcd_to_binary(ds1307_read(DS1307_ADDR_MIN));
 8000838:	2001      	movs	r0, #1
 800083a:	f000 f903 	bl	8000a44 <ds1307_read>
 800083e:	4603      	mov	r3, r0
 8000840:	4618      	mov	r0, r3
 8000842:	f000 f949 	bl	8000ad8 <bcd_to_binary>
 8000846:	4603      	mov	r3, r0
 8000848:	461a      	mov	r2, r3
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	705a      	strb	r2, [r3, #1]
	hrs = ds1307_read(DS1307_ADDR_HRS);
 800084e:	2002      	movs	r0, #2
 8000850:	f000 f8f8 	bl	8000a44 <ds1307_read>
 8000854:	4603      	mov	r3, r0
 8000856:	73fb      	strb	r3, [r7, #15]
	if(hrs & (1 << 6))
 8000858:	7bfb      	ldrb	r3, [r7, #15]
 800085a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800085e:	2b00      	cmp	r3, #0
 8000860:	d00f      	beq.n	8000882 <ds1307_get_current_time+0x74>
	{
		// 12 hrs format
		rtc_time->time_format = !((hrs & (1 << 5)) == 0);
 8000862:	7bfb      	ldrb	r3, [r7, #15]
 8000864:	f003 0320 	and.w	r3, r3, #32
 8000868:	2b00      	cmp	r3, #0
 800086a:	bf14      	ite	ne
 800086c:	2301      	movne	r3, #1
 800086e:	2300      	moveq	r3, #0
 8000870:	b2db      	uxtb	r3, r3
 8000872:	461a      	mov	r2, r3
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	70da      	strb	r2, [r3, #3]
		hrs &= ~(0x3 << 5);
 8000878:	7bfb      	ldrb	r3, [r7, #15]
 800087a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800087e:	73fb      	strb	r3, [r7, #15]
 8000880:	e002      	b.n	8000888 <ds1307_get_current_time+0x7a>
	}
	else
	{
		// 24 hrs format
		rtc_time->time_format = TIME_FORMAT_24HRS;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	2202      	movs	r2, #2
 8000886:	70da      	strb	r2, [r3, #3]
	}

	rtc_time->hours = bcd_to_binary(hrs);
 8000888:	7bfb      	ldrb	r3, [r7, #15]
 800088a:	4618      	mov	r0, r3
 800088c:	f000 f924 	bl	8000ad8 <bcd_to_binary>
 8000890:	4603      	mov	r3, r0
 8000892:	461a      	mov	r2, r3
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	709a      	strb	r2, [r3, #2]

}
 8000898:	bf00      	nop
 800089a:	3710      	adds	r7, #16
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <ds1307_set_current_date>:

void ds1307_set_current_date(RTC_date_t *rtc_date)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
	ds1307_write(binary_to_bcd(rtc_date->date), DS1307_ADDR_DATE);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	4618      	mov	r0, r3
 80008ae:	f000 f8e7 	bl	8000a80 <binary_to_bcd>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2104      	movs	r1, #4
 80008b6:	4618      	mov	r0, r3
 80008b8:	f000 f8a8 	bl	8000a0c <ds1307_write>

	ds1307_write(binary_to_bcd(rtc_date->month), DS1307_ADDR_MONTH);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	785b      	ldrb	r3, [r3, #1]
 80008c0:	4618      	mov	r0, r3
 80008c2:	f000 f8dd 	bl	8000a80 <binary_to_bcd>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2105      	movs	r1, #5
 80008ca:	4618      	mov	r0, r3
 80008cc:	f000 f89e 	bl	8000a0c <ds1307_write>

	ds1307_write(binary_to_bcd(rtc_date->year), DS1307_ADDR_YEAR);
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	789b      	ldrb	r3, [r3, #2]
 80008d4:	4618      	mov	r0, r3
 80008d6:	f000 f8d3 	bl	8000a80 <binary_to_bcd>
 80008da:	4603      	mov	r3, r0
 80008dc:	2106      	movs	r1, #6
 80008de:	4618      	mov	r0, r3
 80008e0:	f000 f894 	bl	8000a0c <ds1307_write>

	ds1307_write(binary_to_bcd(rtc_date->day), DS1307_ADDR_DAY);
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	78db      	ldrb	r3, [r3, #3]
 80008e8:	4618      	mov	r0, r3
 80008ea:	f000 f8c9 	bl	8000a80 <binary_to_bcd>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2103      	movs	r1, #3
 80008f2:	4618      	mov	r0, r3
 80008f4:	f000 f88a 	bl	8000a0c <ds1307_write>
}
 80008f8:	bf00      	nop
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <ds1307_get_current_date>:

void ds1307_get_current_date(RTC_date_t *rtc_date)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
	rtc_date->date = bcd_to_binary(ds1307_read(DS1307_ADDR_DATE));
 8000908:	2004      	movs	r0, #4
 800090a:	f000 f89b 	bl	8000a44 <ds1307_read>
 800090e:	4603      	mov	r3, r0
 8000910:	4618      	mov	r0, r3
 8000912:	f000 f8e1 	bl	8000ad8 <bcd_to_binary>
 8000916:	4603      	mov	r3, r0
 8000918:	461a      	mov	r2, r3
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	701a      	strb	r2, [r3, #0]
	rtc_date->day = bcd_to_binary(ds1307_read(DS1307_ADDR_DAY));
 800091e:	2003      	movs	r0, #3
 8000920:	f000 f890 	bl	8000a44 <ds1307_read>
 8000924:	4603      	mov	r3, r0
 8000926:	4618      	mov	r0, r3
 8000928:	f000 f8d6 	bl	8000ad8 <bcd_to_binary>
 800092c:	4603      	mov	r3, r0
 800092e:	461a      	mov	r2, r3
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	70da      	strb	r2, [r3, #3]
	rtc_date->month = bcd_to_binary(ds1307_read(DS1307_ADDR_MONTH));
 8000934:	2005      	movs	r0, #5
 8000936:	f000 f885 	bl	8000a44 <ds1307_read>
 800093a:	4603      	mov	r3, r0
 800093c:	4618      	mov	r0, r3
 800093e:	f000 f8cb 	bl	8000ad8 <bcd_to_binary>
 8000942:	4603      	mov	r3, r0
 8000944:	461a      	mov	r2, r3
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	705a      	strb	r2, [r3, #1]
	rtc_date->year = bcd_to_binary(ds1307_read(DS1307_ADDR_YEAR));
 800094a:	2006      	movs	r0, #6
 800094c:	f000 f87a 	bl	8000a44 <ds1307_read>
 8000950:	4603      	mov	r3, r0
 8000952:	4618      	mov	r0, r3
 8000954:	f000 f8c0 	bl	8000ad8 <bcd_to_binary>
 8000958:	4603      	mov	r3, r0
 800095a:	461a      	mov	r2, r3
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	709a      	strb	r2, [r3, #2]
}
 8000960:	bf00      	nop
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}

08000968 <ds1307_i2c_pin_config>:

static void ds1307_i2c_pin_config(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b086      	sub	sp, #24
 800096c:	af00      	add	r7, sp, #0
	GPIO_Handle_t i2c_sda, i2c_scl;

	memset(&i2c_sda, 0, sizeof(i2c_sda));
 800096e:	f107 030c 	add.w	r3, r7, #12
 8000972:	220c      	movs	r2, #12
 8000974:	2100      	movs	r1, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f001 f85c 	bl	8001a34 <memset>
	memset(&i2c_scl, 0, sizeof(i2c_scl));
 800097c:	463b      	mov	r3, r7
 800097e:	220c      	movs	r2, #12
 8000980:	2100      	movs	r1, #0
 8000982:	4618      	mov	r0, r3
 8000984:	f001 f856 	bl	8001a34 <memset>
	/*
	 * I2C1_SCL ==> PB6
	 * I2C1_SDA ==> PB7
	 */

	i2c_sda.pGPIOx = DS1307_I2C_GPIO_PORT;
 8000988:	4b14      	ldr	r3, [pc, #80]	; (80009dc <ds1307_i2c_pin_config+0x74>)
 800098a:	60fb      	str	r3, [r7, #12]
	i2c_sda.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 800098c:	2304      	movs	r3, #4
 800098e:	757b      	strb	r3, [r7, #21]
	i2c_sda.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000990:	2302      	movs	r3, #2
 8000992:	747b      	strb	r3, [r7, #17]
	i2c_sda.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SDA_PIN;
 8000994:	2307      	movs	r3, #7
 8000996:	743b      	strb	r3, [r7, #16]
	i2c_sda.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OP;
 8000998:	2301      	movs	r3, #1
 800099a:	753b      	strb	r3, [r7, #20]
	i2c_sda.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 800099c:	2301      	movs	r3, #1
 800099e:	74fb      	strb	r3, [r7, #19]
	i2c_sda.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80009a0:	2302      	movs	r3, #2
 80009a2:	74bb      	strb	r3, [r7, #18]

	GPIO_Init(&i2c_sda);
 80009a4:	f107 030c 	add.w	r3, r7, #12
 80009a8:	4618      	mov	r0, r3
 80009aa:	f000 fdf7 	bl	800159c <GPIO_Init>


	i2c_scl.pGPIOx = DS1307_I2C_GPIO_PORT;
 80009ae:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <ds1307_i2c_pin_config+0x74>)
 80009b0:	603b      	str	r3, [r7, #0]
	i2c_scl.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 80009b2:	2304      	movs	r3, #4
 80009b4:	727b      	strb	r3, [r7, #9]
	i2c_scl.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80009b6:	2302      	movs	r3, #2
 80009b8:	717b      	strb	r3, [r7, #5]
	i2c_scl.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SCL_PIN;
 80009ba:	2306      	movs	r3, #6
 80009bc:	713b      	strb	r3, [r7, #4]
	i2c_scl.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OP;
 80009be:	2301      	movs	r3, #1
 80009c0:	723b      	strb	r3, [r7, #8]
	i2c_scl.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 80009c2:	2301      	movs	r3, #1
 80009c4:	71fb      	strb	r3, [r7, #7]
	i2c_scl.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80009c6:	2302      	movs	r3, #2
 80009c8:	71bb      	strb	r3, [r7, #6]

	GPIO_Init(&i2c_scl);
 80009ca:	463b      	mov	r3, r7
 80009cc:	4618      	mov	r0, r3
 80009ce:	f000 fde5 	bl	800159c <GPIO_Init>

}
 80009d2:	bf00      	nop
 80009d4:	3718      	adds	r7, #24
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40020400 	.word	0x40020400

080009e0 <ds1307_i2c_config>:

static void ds1307_i2c_config(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
	g_ds1307I2cHandle.pI2Cx = DS1307_I2C;
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <ds1307_i2c_config+0x20>)
 80009e6:	4a07      	ldr	r2, [pc, #28]	; (8000a04 <ds1307_i2c_config+0x24>)
 80009e8:	601a      	str	r2, [r3, #0]
	g_ds1307I2cHandle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 80009ea:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <ds1307_i2c_config+0x20>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	725a      	strb	r2, [r3, #9]
	g_ds1307I2cHandle.I2C_Config.I2C_SCLSpeed = DS1307_I2C_SPEED;
 80009f0:	4b03      	ldr	r3, [pc, #12]	; (8000a00 <ds1307_i2c_config+0x20>)
 80009f2:	4a05      	ldr	r2, [pc, #20]	; (8000a08 <ds1307_i2c_config+0x28>)
 80009f4:	605a      	str	r2, [r3, #4]
	I2C_Init(&g_ds1307I2cHandle);
 80009f6:	4802      	ldr	r0, [pc, #8]	; (8000a00 <ds1307_i2c_config+0x20>)
 80009f8:	f000 fa7c 	bl	8000ef4 <I2C_Init>
}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	200000c4 	.word	0x200000c4
 8000a04:	40005400 	.word	0x40005400
 8000a08:	000186a0 	.word	0x000186a0

08000a0c <ds1307_write>:

static void ds1307_write(uint8_t value, uint8_t reg_address)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b086      	sub	sp, #24
 8000a10:	af02      	add	r7, sp, #8
 8000a12:	4603      	mov	r3, r0
 8000a14:	460a      	mov	r2, r1
 8000a16:	71fb      	strb	r3, [r7, #7]
 8000a18:	4613      	mov	r3, r2
 8000a1a:	71bb      	strb	r3, [r7, #6]
	uint8_t tx[2];
	tx[0] = reg_address;
 8000a1c:	79bb      	ldrb	r3, [r7, #6]
 8000a1e:	733b      	strb	r3, [r7, #12]
	tx[1] = value;
 8000a20:	79fb      	ldrb	r3, [r7, #7]
 8000a22:	737b      	strb	r3, [r7, #13]

	I2C_MAsterSendData(&g_ds1307I2cHandle, tx, 2, DS1307_I2C_ADDRESS, 0);
 8000a24:	f107 010c 	add.w	r1, r7, #12
 8000a28:	2300      	movs	r3, #0
 8000a2a:	9300      	str	r3, [sp, #0]
 8000a2c:	2368      	movs	r3, #104	; 0x68
 8000a2e:	2202      	movs	r2, #2
 8000a30:	4803      	ldr	r0, [pc, #12]	; (8000a40 <ds1307_write+0x34>)
 8000a32:	f000 fb03 	bl	800103c <I2C_MAsterSendData>
}
 8000a36:	bf00      	nop
 8000a38:	3710      	adds	r7, #16
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	200000c4 	.word	0x200000c4

08000a44 <ds1307_read>:

static uint8_t ds1307_read(uint8_t reg_address)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b086      	sub	sp, #24
 8000a48:	af02      	add	r7, sp, #8
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	71fb      	strb	r3, [r7, #7]
	uint8_t data;

	I2C_MAsterSendData(&g_ds1307I2cHandle, &reg_address, 1, DS1307_I2C_ADDRESS, 0);
 8000a4e:	1df9      	adds	r1, r7, #7
 8000a50:	2300      	movs	r3, #0
 8000a52:	9300      	str	r3, [sp, #0]
 8000a54:	2368      	movs	r3, #104	; 0x68
 8000a56:	2201      	movs	r2, #1
 8000a58:	4808      	ldr	r0, [pc, #32]	; (8000a7c <ds1307_read+0x38>)
 8000a5a:	f000 faef 	bl	800103c <I2C_MAsterSendData>
	I2C_MasterReceiveData(&g_ds1307I2cHandle, &data, 1, DS1307_I2C_ADDRESS, 0);
 8000a5e:	f107 010f 	add.w	r1, r7, #15
 8000a62:	2300      	movs	r3, #0
 8000a64:	9300      	str	r3, [sp, #0]
 8000a66:	2368      	movs	r3, #104	; 0x68
 8000a68:	2201      	movs	r2, #1
 8000a6a:	4804      	ldr	r0, [pc, #16]	; (8000a7c <ds1307_read+0x38>)
 8000a6c:	f000 fbd0 	bl	8001210 <I2C_MasterReceiveData>

	return data;
 8000a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3710      	adds	r7, #16
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	200000c4 	.word	0x200000c4

08000a80 <binary_to_bcd>:

static uint8_t binary_to_bcd(uint8_t value)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	71fb      	strb	r3, [r7, #7]
	uint8_t m, n;
	uint8_t bcd;
	bcd = value;
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	73fb      	strb	r3, [r7, #15]

	if(value >= 10)
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	2b09      	cmp	r3, #9
 8000a92:	d918      	bls.n	8000ac6 <binary_to_bcd+0x46>
	{
		m = value / 10;
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	4a0f      	ldr	r2, [pc, #60]	; (8000ad4 <binary_to_bcd+0x54>)
 8000a98:	fba2 2303 	umull	r2, r3, r2, r3
 8000a9c:	08db      	lsrs	r3, r3, #3
 8000a9e:	73bb      	strb	r3, [r7, #14]
		n = value % 10;
 8000aa0:	79fa      	ldrb	r2, [r7, #7]
 8000aa2:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <binary_to_bcd+0x54>)
 8000aa4:	fba3 1302 	umull	r1, r3, r3, r2
 8000aa8:	08d9      	lsrs	r1, r3, #3
 8000aaa:	460b      	mov	r3, r1
 8000aac:	009b      	lsls	r3, r3, #2
 8000aae:	440b      	add	r3, r1
 8000ab0:	005b      	lsls	r3, r3, #1
 8000ab2:	1ad3      	subs	r3, r2, r3
 8000ab4:	737b      	strb	r3, [r7, #13]
		bcd = ((m << 4) | n);
 8000ab6:	7bbb      	ldrb	r3, [r7, #14]
 8000ab8:	011b      	lsls	r3, r3, #4
 8000aba:	b25a      	sxtb	r2, r3
 8000abc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	b25b      	sxtb	r3, r3
 8000ac4:	73fb      	strb	r3, [r7, #15]
	}

	return bcd;
 8000ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3714      	adds	r7, #20
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	cccccccd 	.word	0xcccccccd

08000ad8 <bcd_to_binary>:

static uint8_t bcd_to_binary(uint8_t value)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	71fb      	strb	r3, [r7, #7]
	uint8_t m, n;

	m = (uint8_t)((value >> 4) * 10);
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	091b      	lsrs	r3, r3, #4
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	461a      	mov	r2, r3
 8000aea:	0092      	lsls	r2, r2, #2
 8000aec:	4413      	add	r3, r2
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	73fb      	strb	r3, [r7, #15]
	n = value & (uint8_t)0x0F;
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	f003 030f 	and.w	r3, r3, #15
 8000af8:	73bb      	strb	r3, [r7, #14]

	return (m + n);
 8000afa:	7bfa      	ldrb	r2, [r7, #15]
 8000afc:	7bbb      	ldrb	r3, [r7, #14]
 8000afe:	4413      	add	r3, r2
 8000b00:	b2db      	uxtb	r3, r3
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3714      	adds	r7, #20
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
	...

08000b10 <lcd_init>:
static void lcd_enable(void);
static void udelay(uint32_t cnt);


void lcd_init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
	// 1. configure the gpio pins which are used for lcd connections
	GPIO_Handle_t lcd_signal;
	lcd_signal.pGPIOx = LCD_GPIO_PORT;
 8000b16:	4b42      	ldr	r3, [pc, #264]	; (8000c20 <lcd_init+0x110>)
 8000b18:	607b      	str	r3, [r7, #4]
	lcd_signal.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	727b      	strb	r3, [r7, #9]
	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_RS;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	723b      	strb	r3, [r7, #8]
	lcd_signal.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000b22:	2300      	movs	r3, #0
 8000b24:	733b      	strb	r3, [r7, #12]
	lcd_signal.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000b26:	2300      	movs	r3, #0
 8000b28:	72fb      	strb	r3, [r7, #11]
	lcd_signal.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	72bb      	strb	r3, [r7, #10]
	GPIO_Init(&lcd_signal);
 8000b2e:	1d3b      	adds	r3, r7, #4
 8000b30:	4618      	mov	r0, r3
 8000b32:	f000 fd33 	bl	800159c <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_RW;
 8000b36:	2301      	movs	r3, #1
 8000b38:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000b3a:	1d3b      	adds	r3, r7, #4
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f000 fd2d 	bl	800159c <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_EN;
 8000b42:	2302      	movs	r3, #2
 8000b44:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000b46:	1d3b      	adds	r3, r7, #4
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f000 fd27 	bl	800159c <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D4;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000b52:	1d3b      	adds	r3, r7, #4
 8000b54:	4618      	mov	r0, r3
 8000b56:	f000 fd21 	bl	800159c <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D5;
 8000b5a:	2304      	movs	r3, #4
 8000b5c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000b5e:	1d3b      	adds	r3, r7, #4
 8000b60:	4618      	mov	r0, r3
 8000b62:	f000 fd1b 	bl	800159c <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D6;
 8000b66:	2305      	movs	r3, #5
 8000b68:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f000 fd15 	bl	800159c <GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D7;
 8000b72:	2306      	movs	r3, #6
 8000b74:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_signal);
 8000b76:	1d3b      	adds	r3, r7, #4
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f000 fd0f 	bl	800159c <GPIO_Init>

	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2100      	movs	r1, #0
 8000b82:	4827      	ldr	r0, [pc, #156]	; (8000c20 <lcd_init+0x110>)
 8000b84:	f000 fea2 	bl	80018cc <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2101      	movs	r1, #1
 8000b8c:	4824      	ldr	r0, [pc, #144]	; (8000c20 <lcd_init+0x110>)
 8000b8e:	f000 fe9d 	bl	80018cc <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_RESET);
 8000b92:	2200      	movs	r2, #0
 8000b94:	2102      	movs	r1, #2
 8000b96:	4822      	ldr	r0, [pc, #136]	; (8000c20 <lcd_init+0x110>)
 8000b98:	f000 fe98 	bl	80018cc <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D4, GPIO_PIN_RESET);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	2103      	movs	r1, #3
 8000ba0:	481f      	ldr	r0, [pc, #124]	; (8000c20 <lcd_init+0x110>)
 8000ba2:	f000 fe93 	bl	80018cc <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D5, GPIO_PIN_RESET);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2104      	movs	r1, #4
 8000baa:	481d      	ldr	r0, [pc, #116]	; (8000c20 <lcd_init+0x110>)
 8000bac:	f000 fe8e 	bl	80018cc <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D6, GPIO_PIN_RESET);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2105      	movs	r1, #5
 8000bb4:	481a      	ldr	r0, [pc, #104]	; (8000c20 <lcd_init+0x110>)
 8000bb6:	f000 fe89 	bl	80018cc <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D7, GPIO_PIN_RESET);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	2106      	movs	r1, #6
 8000bbe:	4818      	ldr	r0, [pc, #96]	; (8000c20 <lcd_init+0x110>)
 8000bc0:	f000 fe84 	bl	80018cc <GPIO_WriteToOutputPin>


	// 2. do the LCD initialization
	mdelay(40);
 8000bc4:	2028      	movs	r0, #40	; 0x28
 8000bc6:	f000 f90e 	bl	8000de6 <mdelay>

	/* RS = 0 , for LCD command*/
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2100      	movs	r1, #0
 8000bce:	4814      	ldr	r0, [pc, #80]	; (8000c20 <lcd_init+0x110>)
 8000bd0:	f000 fe7c 	bl	80018cc <GPIO_WriteToOutputPin>

	/* RW = 0 , for Writing tp LCD*/
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	4811      	ldr	r0, [pc, #68]	; (8000c20 <lcd_init+0x110>)
 8000bda:	f000 fe77 	bl	80018cc <GPIO_WriteToOutputPin>

	write_4_bits(0x3);
 8000bde:	2003      	movs	r0, #3
 8000be0:	f000 f820 	bl	8000c24 <write_4_bits>

	mdelay(5);
 8000be4:	2005      	movs	r0, #5
 8000be6:	f000 f8fe 	bl	8000de6 <mdelay>

	write_4_bits(0x3);
 8000bea:	2003      	movs	r0, #3
 8000bec:	f000 f81a 	bl	8000c24 <write_4_bits>

	udelay(150);
 8000bf0:	2096      	movs	r0, #150	; 0x96
 8000bf2:	f000 f911 	bl	8000e18 <udelay>

	write_4_bits(0x3);
 8000bf6:	2003      	movs	r0, #3
 8000bf8:	f000 f814 	bl	8000c24 <write_4_bits>

	write_4_bits(0x2);
 8000bfc:	2002      	movs	r0, #2
 8000bfe:	f000 f811 	bl	8000c24 <write_4_bits>

	// function set command
	lcd_send_command(LCD_CMD_4DL_2N_5X8F);
 8000c02:	2028      	movs	r0, #40	; 0x28
 8000c04:	f000 f85c 	bl	8000cc0 <lcd_send_command>

	// display on and cursor on
	lcd_send_command(LCD_CMD_DON_CURON);
 8000c08:	200e      	movs	r0, #14
 8000c0a:	f000 f859 	bl	8000cc0 <lcd_send_command>

	lcd_display_clear();
 8000c0e:	f000 f8af 	bl	8000d70 <lcd_display_clear>

	// entry mode set
	lcd_send_command(LCD_CMD_INCADD);
 8000c12:	2006      	movs	r0, #6
 8000c14:	f000 f854 	bl	8000cc0 <lcd_send_command>

}
 8000c18:	bf00      	nop
 8000c1a:	3710      	adds	r7, #16
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40020c00 	.word	0x40020c00

08000c24 <write_4_bits>:


/*writes 4 bit of data/command on to D4,D5,D6,D7 lines*/
static void write_4_bits(uint8_t value)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	71fb      	strb	r3, [r7, #7]
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D4, ((value >> 0) & 0x1));
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	f003 0301 	and.w	r3, r3, #1
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	461a      	mov	r2, r3
 8000c38:	2103      	movs	r1, #3
 8000c3a:	4815      	ldr	r0, [pc, #84]	; (8000c90 <write_4_bits+0x6c>)
 8000c3c:	f000 fe46 	bl	80018cc <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D5, ((value >> 1) & 0x1));
 8000c40:	79fb      	ldrb	r3, [r7, #7]
 8000c42:	085b      	lsrs	r3, r3, #1
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	2104      	movs	r1, #4
 8000c50:	480f      	ldr	r0, [pc, #60]	; (8000c90 <write_4_bits+0x6c>)
 8000c52:	f000 fe3b 	bl	80018cc <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D6, ((value >> 2) & 0x1));
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	089b      	lsrs	r3, r3, #2
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	f003 0301 	and.w	r3, r3, #1
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	461a      	mov	r2, r3
 8000c64:	2105      	movs	r1, #5
 8000c66:	480a      	ldr	r0, [pc, #40]	; (8000c90 <write_4_bits+0x6c>)
 8000c68:	f000 fe30 	bl	80018cc <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D7, ((value >> 3) & 0x1));
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	08db      	lsrs	r3, r3, #3
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	461a      	mov	r2, r3
 8000c7a:	2106      	movs	r1, #6
 8000c7c:	4804      	ldr	r0, [pc, #16]	; (8000c90 <write_4_bits+0x6c>)
 8000c7e:	f000 fe25 	bl	80018cc <GPIO_WriteToOutputPin>

	lcd_enable();
 8000c82:	f000 f807 	bl	8000c94 <lcd_enable>
}
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40020c00 	.word	0x40020c00

08000c94 <lcd_enable>:

static void lcd_enable(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_SET);
 8000c98:	2201      	movs	r2, #1
 8000c9a:	2102      	movs	r1, #2
 8000c9c:	4807      	ldr	r0, [pc, #28]	; (8000cbc <lcd_enable+0x28>)
 8000c9e:	f000 fe15 	bl	80018cc <GPIO_WriteToOutputPin>
	udelay(10);
 8000ca2:	200a      	movs	r0, #10
 8000ca4:	f000 f8b8 	bl	8000e18 <udelay>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_RESET);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2102      	movs	r1, #2
 8000cac:	4803      	ldr	r0, [pc, #12]	; (8000cbc <lcd_enable+0x28>)
 8000cae:	f000 fe0d 	bl	80018cc <GPIO_WriteToOutputPin>
	udelay(100);
 8000cb2:	2064      	movs	r0, #100	; 0x64
 8000cb4:	f000 f8b0 	bl	8000e18 <udelay>
}
 8000cb8:	bf00      	nop
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	40020c00 	.word	0x40020c00

08000cc0 <lcd_send_command>:

void lcd_send_command(uint8_t cmd)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71fb      	strb	r3, [r7, #7]
	/* RS = 0 for LCD command */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2100      	movs	r1, #0
 8000cce:	480c      	ldr	r0, [pc, #48]	; (8000d00 <lcd_send_command+0x40>)
 8000cd0:	f000 fdfc 	bl	80018cc <GPIO_WriteToOutputPin>

	/* R/nW = 0 for write */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	4809      	ldr	r0, [pc, #36]	; (8000d00 <lcd_send_command+0x40>)
 8000cda:	f000 fdf7 	bl	80018cc <GPIO_WriteToOutputPin>

	write_4_bits(cmd >> 4);
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	091b      	lsrs	r3, r3, #4
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff ff9d 	bl	8000c24 <write_4_bits>
	write_4_bits(cmd & 0x0F);
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	f003 030f 	and.w	r3, r3, #15
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff ff96 	bl	8000c24 <write_4_bits>
}
 8000cf8:	bf00      	nop
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	40020c00 	.word	0x40020c00

08000d04 <lcd_print_char>:
 * Here we used 4 bits parallel data transmission
 * First Higher nibble of the data will be sent on to the data lines D4, D5, D6, D7
 * Then Lower nibble of the data will be set on to the data lines D4, D5, D6, D7
 */
void lcd_print_char(uint8_t data)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	71fb      	strb	r3, [r7, #7]
	/* RS = 1 for user data */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_SET);
 8000d0e:	2201      	movs	r2, #1
 8000d10:	2100      	movs	r1, #0
 8000d12:	480c      	ldr	r0, [pc, #48]	; (8000d44 <lcd_print_char+0x40>)
 8000d14:	f000 fdda 	bl	80018cc <GPIO_WriteToOutputPin>

	/* R/nW = 0 for write */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	2101      	movs	r1, #1
 8000d1c:	4809      	ldr	r0, [pc, #36]	; (8000d44 <lcd_print_char+0x40>)
 8000d1e:	f000 fdd5 	bl	80018cc <GPIO_WriteToOutputPin>

	write_4_bits(data >> 4);		/* Higher nibble*/
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	091b      	lsrs	r3, r3, #4
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff ff7b 	bl	8000c24 <write_4_bits>
	write_4_bits(data & 0x0F);		/* Lower nibble*/
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	f003 030f 	and.w	r3, r3, #15
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff ff74 	bl	8000c24 <write_4_bits>
}
 8000d3c:	bf00      	nop
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40020c00 	.word	0x40020c00

08000d48 <lcd_print_string>:

void lcd_print_string(char *message)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
	do
	{
		lcd_print_char((char)*message++);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	1c5a      	adds	r2, r3, #1
 8000d54:	607a      	str	r2, [r7, #4]
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff ffd3 	bl	8000d04 <lcd_print_char>
	}while(*message != '\0');
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d1f4      	bne.n	8000d50 <lcd_print_string+0x8>
}
 8000d66:	bf00      	nop
 8000d68:	bf00      	nop
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <lcd_display_clear>:

void lcd_display_clear(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
	// Display clear
	lcd_send_command(LCD_CMD_DIS_CLEAR);
 8000d74:	2001      	movs	r0, #1
 8000d76:	f7ff ffa3 	bl	8000cc0 <lcd_send_command>
	/*
	 * check page number 24 of the datasheet
	 * display clear command execution time is around 2ms
	 */
	mdelay(2);
 8000d7a:	2002      	movs	r0, #2
 8000d7c:	f000 f833 	bl	8000de6 <mdelay>
}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <lcd_display_return_home>:

/*Cursor returns to home position */
void lcd_display_return_home(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
	lcd_send_command(LCD_CMD_DIS_RETURN_HOME);
 8000d88:	2002      	movs	r0, #2
 8000d8a:	f7ff ff99 	bl	8000cc0 <lcd_send_command>
	/*
	 * check page number 24 of the datasheet
	 * return home command execution time is around 2ms
	 */
	mdelay(2);
 8000d8e:	2002      	movs	r0, #2
 8000d90:	f000 f829 	bl	8000de6 <mdelay>
}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <lcd_set_cursor>:
 * Set lcd to a specified location  given by row and column interference
 * Row number (1 to 2)
 * Column number (1 to 16) assuming a 2 x 16 character display
 */
void lcd_set_cursor(uint8_t row, uint8_t column)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	460a      	mov	r2, r1
 8000da2:	71fb      	strb	r3, [r7, #7]
 8000da4:	4613      	mov	r3, r2
 8000da6:	71bb      	strb	r3, [r7, #6]
	column--;
 8000da8:	79bb      	ldrb	r3, [r7, #6]
 8000daa:	3b01      	subs	r3, #1
 8000dac:	71bb      	strb	r3, [r7, #6]
	switch(row)
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d002      	beq.n	8000dba <lcd_set_cursor+0x22>
 8000db4:	2b02      	cmp	r3, #2
 8000db6:	d009      	beq.n	8000dcc <lcd_set_cursor+0x34>
			/* Set cursor to 2nd row address and add index*/
			lcd_send_command((column |= 0xC0));
			break;

		default:
			break;
 8000db8:	e011      	b.n	8000dde <lcd_set_cursor+0x46>
			lcd_send_command((column |= 0x80));
 8000dba:	79bb      	ldrb	r3, [r7, #6]
 8000dbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000dc0:	71bb      	strb	r3, [r7, #6]
 8000dc2:	79bb      	ldrb	r3, [r7, #6]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ff7b 	bl	8000cc0 <lcd_send_command>
			break;
 8000dca:	e008      	b.n	8000dde <lcd_set_cursor+0x46>
			lcd_send_command((column |= 0xC0));
 8000dcc:	79bb      	ldrb	r3, [r7, #6]
 8000dce:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000dd2:	71bb      	strb	r3, [r7, #6]
 8000dd4:	79bb      	ldrb	r3, [r7, #6]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff ff72 	bl	8000cc0 <lcd_send_command>
			break;
 8000ddc:	bf00      	nop
	}
}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <mdelay>:

void mdelay(uint32_t cnt)
{
 8000de6:	b480      	push	{r7}
 8000de8:	b085      	sub	sp, #20
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
	for(uint32_t i = 0; i < (cnt * 1000); i++);
 8000dee:	2300      	movs	r3, #0
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	e002      	b.n	8000dfa <mdelay+0x14>
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	3301      	adds	r3, #1
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e00:	fb02 f303 	mul.w	r3, r2, r3
 8000e04:	68fa      	ldr	r2, [r7, #12]
 8000e06:	429a      	cmp	r2, r3
 8000e08:	d3f4      	bcc.n	8000df4 <mdelay+0xe>
}
 8000e0a:	bf00      	nop
 8000e0c:	bf00      	nop
 8000e0e:	3714      	adds	r7, #20
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <udelay>:

static void udelay(uint32_t cnt)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
	for(uint32_t i = 0; i < (cnt * 1); i++);
 8000e20:	2300      	movs	r3, #0
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	e002      	b.n	8000e2c <udelay+0x14>
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fa      	ldr	r2, [r7, #12]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d3f8      	bcc.n	8000e26 <udelay+0xe>
}
 8000e34:	bf00      	nop
 8000e36:	bf00      	nop
 8000e38:	3714      	adds	r7, #20
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
	...

08000e44 <I2C_PeripheralClockControl>:
 *
 *@Note					-
 *
 */
void I2C_PeripheralClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000e50:	78fb      	ldrb	r3, [r7, #3]
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d120      	bne.n	8000e98 <I2C_PeripheralClockControl+0x54>
	{
		if(pI2Cx == I2C1)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a22      	ldr	r2, [pc, #136]	; (8000ee4 <I2C_PeripheralClockControl+0xa0>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d106      	bne.n	8000e6c <I2C_PeripheralClockControl+0x28>
		{
			I2C1_PCLK_EN();
 8000e5e:	4b22      	ldr	r3, [pc, #136]	; (8000ee8 <I2C_PeripheralClockControl+0xa4>)
 8000e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e62:	4a21      	ldr	r2, [pc, #132]	; (8000ee8 <I2C_PeripheralClockControl+0xa4>)
 8000e64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e68:	6413      	str	r3, [r2, #64]	; 0x40
		else if(pI2Cx == I2C3)
		{
			I2C3_PCLK_DI();
		}
	}
}
 8000e6a:	e035      	b.n	8000ed8 <I2C_PeripheralClockControl+0x94>
		else if(pI2Cx == I2C2)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	4a1f      	ldr	r2, [pc, #124]	; (8000eec <I2C_PeripheralClockControl+0xa8>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d106      	bne.n	8000e82 <I2C_PeripheralClockControl+0x3e>
			I2C2_PCLK_EN();
 8000e74:	4b1c      	ldr	r3, [pc, #112]	; (8000ee8 <I2C_PeripheralClockControl+0xa4>)
 8000e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e78:	4a1b      	ldr	r2, [pc, #108]	; (8000ee8 <I2C_PeripheralClockControl+0xa4>)
 8000e7a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e7e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000e80:	e02a      	b.n	8000ed8 <I2C_PeripheralClockControl+0x94>
		else if(pI2Cx == I2C3)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a1a      	ldr	r2, [pc, #104]	; (8000ef0 <I2C_PeripheralClockControl+0xac>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d126      	bne.n	8000ed8 <I2C_PeripheralClockControl+0x94>
			I2C3_PCLK_EN();
 8000e8a:	4b17      	ldr	r3, [pc, #92]	; (8000ee8 <I2C_PeripheralClockControl+0xa4>)
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8e:	4a16      	ldr	r2, [pc, #88]	; (8000ee8 <I2C_PeripheralClockControl+0xa4>)
 8000e90:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e94:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000e96:	e01f      	b.n	8000ed8 <I2C_PeripheralClockControl+0x94>
		if(pI2Cx == I2C1)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	4a12      	ldr	r2, [pc, #72]	; (8000ee4 <I2C_PeripheralClockControl+0xa0>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d106      	bne.n	8000eae <I2C_PeripheralClockControl+0x6a>
			I2C1_PCLK_DI();
 8000ea0:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <I2C_PeripheralClockControl+0xa4>)
 8000ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea4:	4a10      	ldr	r2, [pc, #64]	; (8000ee8 <I2C_PeripheralClockControl+0xa4>)
 8000ea6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000eaa:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000eac:	e014      	b.n	8000ed8 <I2C_PeripheralClockControl+0x94>
		else if(pI2Cx == I2C2)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a0e      	ldr	r2, [pc, #56]	; (8000eec <I2C_PeripheralClockControl+0xa8>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d106      	bne.n	8000ec4 <I2C_PeripheralClockControl+0x80>
			I2C2_PCLK_DI();
 8000eb6:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <I2C_PeripheralClockControl+0xa4>)
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eba:	4a0b      	ldr	r2, [pc, #44]	; (8000ee8 <I2C_PeripheralClockControl+0xa4>)
 8000ebc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000ec0:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ec2:	e009      	b.n	8000ed8 <I2C_PeripheralClockControl+0x94>
		else if(pI2Cx == I2C3)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	4a0a      	ldr	r2, [pc, #40]	; (8000ef0 <I2C_PeripheralClockControl+0xac>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d105      	bne.n	8000ed8 <I2C_PeripheralClockControl+0x94>
			I2C3_PCLK_DI();
 8000ecc:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <I2C_PeripheralClockControl+0xa4>)
 8000ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed0:	4a05      	ldr	r2, [pc, #20]	; (8000ee8 <I2C_PeripheralClockControl+0xa4>)
 8000ed2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000ed6:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	40005400 	.word	0x40005400
 8000ee8:	40023800 	.word	0x40023800
 8000eec:	40005800 	.word	0x40005800
 8000ef0:	40005c00 	.word	0x40005c00

08000ef4 <I2C_Init>:
 *
 *@Note					-
 *
 */
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
	// enable the clock for the i2cx peripheral
	I2C_PeripheralClockControl(pI2CHandle->pI2Cx, ENABLE);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2101      	movs	r1, #1
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff ff9e 	bl	8000e44 <I2C_PeripheralClockControl>

	uint32_t tempreg = 0;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	60fb      	str	r3, [r7, #12]


	// configure the FREQ field of CR2
	tempreg |= RCC_GetPCLK1Value() / 1000000U;
 8000f0c:	f000 fd0e 	bl	800192c <RCC_GetPCLK1Value>
 8000f10:	4603      	mov	r3, r0
 8000f12:	4a47      	ldr	r2, [pc, #284]	; (8001030 <I2C_Init+0x13c>)
 8000f14:	fba2 2303 	umull	r2, r3, r2, r3
 8000f18:	0c9b      	lsrs	r3, r3, #18
 8000f1a:	68fa      	ldr	r2, [r7, #12]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 = (tempreg & 0x3F);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	68fa      	ldr	r2, [r7, #12]
 8000f26:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000f2a:	605a      	str	r2, [r3, #4]

	// program the device own address
	tempreg = 0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	7a1b      	ldrb	r3, [r3, #8]
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	461a      	mov	r2, r3
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	60fb      	str	r3, [r7, #12]
	tempreg |= (1 << 14);
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f44:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	68fa      	ldr	r2, [r7, #12]
 8000f4c:	609a      	str	r2, [r3, #8]

	// CCR calculation
	uint16_t ccr_value = 0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]

	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	4a36      	ldr	r2, [pc, #216]	; (8001034 <I2C_Init+0x140>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d80f      	bhi.n	8000f80 <I2C_Init+0x8c>
	{
		// mode is standard mode
		ccr_value = RCC_GetPCLK1Value() / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000f60:	f000 fce4 	bl	800192c <RCC_GetPCLK1Value>
 8000f64:	4602      	mov	r2, r0
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f70:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8000f72:	897b      	ldrh	r3, [r7, #10]
 8000f74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f78:	68fa      	ldr	r2, [r7, #12]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	e02b      	b.n	8000fd8 <I2C_Init+0xe4>
	}
	else
	{
		// mode is fast mode
		tempreg |= (1 << 15);
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f86:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	895b      	ldrh	r3, [r3, #10]
 8000f8c:	039b      	lsls	r3, r3, #14
 8000f8e:	461a      	mov	r2, r3
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	895b      	ldrh	r3, [r3, #10]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d10b      	bne.n	8000fb6 <I2C_Init+0xc2>
		{
			ccr_value = RCC_GetPCLK1Value() / (3 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000f9e:	f000 fcc5 	bl	800192c <RCC_GetPCLK1Value>
 8000fa2:	4601      	mov	r1, r0
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	685a      	ldr	r2, [r3, #4]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	4413      	add	r3, r2
 8000fae:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fb2:	817b      	strh	r3, [r7, #10]
 8000fb4:	e00c      	b.n	8000fd0 <I2C_Init+0xdc>
		}
		else
		{
			ccr_value = RCC_GetPCLK1Value() / (25 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000fb6:	f000 fcb9 	bl	800192c <RCC_GetPCLK1Value>
 8000fba:	4601      	mov	r1, r0
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	685a      	ldr	r2, [r3, #4]
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	4413      	add	r3, r2
 8000fc6:	009a      	lsls	r2, r3, #2
 8000fc8:	4413      	add	r3, r2
 8000fca:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fce:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= ccr_value;
 8000fd0:	897b      	ldrh	r3, [r7, #10]
 8000fd2:	68fa      	ldr	r2, [r7, #12]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	68fa      	ldr	r2, [r7, #12]
 8000fde:	61da      	str	r2, [r3, #28]

	// TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	4a13      	ldr	r2, [pc, #76]	; (8001034 <I2C_Init+0x140>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d809      	bhi.n	8000ffe <I2C_Init+0x10a>
	{
		// mode is standard mode
		tempreg = (RCC_GetPCLK1Value() / 1000000U) + 1;
 8000fea:	f000 fc9f 	bl	800192c <RCC_GetPCLK1Value>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	4a0f      	ldr	r2, [pc, #60]	; (8001030 <I2C_Init+0x13c>)
 8000ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ff6:	0c9b      	lsrs	r3, r3, #18
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	e00d      	b.n	800101a <I2C_Init+0x126>
	}
	else
	{
		// mode is fast mode
		tempreg = ((RCC_GetPCLK1Value() * 300) / 1000000000U) + 1;
 8000ffe:	f000 fc95 	bl	800192c <RCC_GetPCLK1Value>
 8001002:	4603      	mov	r3, r0
 8001004:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001008:	fb02 f303 	mul.w	r3, r2, r3
 800100c:	0a5b      	lsrs	r3, r3, #9
 800100e:	4a0a      	ldr	r2, [pc, #40]	; (8001038 <I2C_Init+0x144>)
 8001010:	fba2 2303 	umull	r2, r3, r2, r3
 8001014:	09db      	lsrs	r3, r3, #7
 8001016:	3301      	adds	r3, #1
 8001018:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	68fa      	ldr	r2, [r7, #12]
 8001020:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001024:	621a      	str	r2, [r3, #32]


}
 8001026:	bf00      	nop
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	431bde83 	.word	0x431bde83
 8001034:	000186a0 	.word	0x000186a0
 8001038:	00044b83 	.word	0x00044b83

0800103c <I2C_MAsterSendData>:
 *
 *@Note					-
 *
 */
void I2C_MAsterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxBuffer, uint8_t len, uint8_t slaveAddr, uint8_t Sr)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	4611      	mov	r1, r2
 8001048:	461a      	mov	r2, r3
 800104a:	460b      	mov	r3, r1
 800104c:	71fb      	strb	r3, [r7, #7]
 800104e:	4613      	mov	r3, r2
 8001050:	71bb      	strb	r3, [r7, #6]
	// 1. Generate the START condition
	I2C_generateStartCondition(pI2CHandle->pI2Cx);
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4618      	mov	r0, r3
 8001058:	f000 f857 	bl	800110a <I2C_generateStartCondition>

	// 2. Confirm that start generation is completed by checking the SB flag in the SR1
	// note: until SB is cleared SCL will be stretched (pulled to LOW)
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_SB_FLAG));
 800105c:	bf00      	nop
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2101      	movs	r1, #1
 8001064:	4618      	mov	r0, r3
 8001066:	f000 f981 	bl	800136c <I2C_GetFlagStatus>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d0f6      	beq.n	800105e <I2C_MAsterSendData+0x22>

	// 3. Send the address of the slave with r/nw bit set to w(0) (total 8 bits)
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx, slaveAddr);
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	79ba      	ldrb	r2, [r7, #6]
 8001076:	4611      	mov	r1, r2
 8001078:	4618      	mov	r0, r3
 800107a:	f000 f856 	bl	800112a <I2C_ExecuteAddressPhaseWrite>

	// 4. confirm that the address phase is completed by checking the ADDR flag in the SR1
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_ADDR_FLAG));
 800107e:	bf00      	nop
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2102      	movs	r1, #2
 8001086:	4618      	mov	r0, r3
 8001088:	f000 f970 	bl	800136c <I2C_GetFlagStatus>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d0f6      	beq.n	8001080 <I2C_MAsterSendData+0x44>

	// 5. clear the ADDR flag according to its software sequence
	// Note : Until ADDR is cleared SCL will be stretched (pulled to LOW)
	I2C_ClearADDRFlag(pI2CHandle);
 8001092:	68f8      	ldr	r0, [r7, #12]
 8001094:	f000 f875 	bl	8001182 <I2C_ClearADDRFlag>

	// 6. Send the data until Len becomes 0
	while(len > 0)
 8001098:	e014      	b.n	80010c4 <I2C_MAsterSendData+0x88>
	{
		while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_TxE_FLAG)); // wait till TXE is set
 800109a:	bf00      	nop
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2180      	movs	r1, #128	; 0x80
 80010a2:	4618      	mov	r0, r3
 80010a4:	f000 f962 	bl	800136c <I2C_GetFlagStatus>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d0f6      	beq.n	800109c <I2C_MAsterSendData+0x60>
		pI2CHandle->pI2Cx->DR = *pTxBuffer;
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	781a      	ldrb	r2, [r3, #0]
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	611a      	str	r2, [r3, #16]
		pTxBuffer++;
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	3301      	adds	r3, #1
 80010bc:	60bb      	str	r3, [r7, #8]
		len--;
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	3b01      	subs	r3, #1
 80010c2:	71fb      	strb	r3, [r7, #7]
	while(len > 0)
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d1e7      	bne.n	800109a <I2C_MAsterSendData+0x5e>
	}

	// 7. When Len becomes zero , wait for TXE = 1 and BTF = 1 before generating the STOP condition
	// NOTE: TXE = 1 , BTF = 1, means that both SR and DR are empty and next transition should begin
	// when BTF = 1 , SCL will be stretched (pulled to LOW)
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_TxE_FLAG));
 80010ca:	bf00      	nop
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2180      	movs	r1, #128	; 0x80
 80010d2:	4618      	mov	r0, r3
 80010d4:	f000 f94a 	bl	800136c <I2C_GetFlagStatus>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d0f6      	beq.n	80010cc <I2C_MAsterSendData+0x90>
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_BTF_FLAG));
 80010de:	bf00      	nop
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2104      	movs	r1, #4
 80010e6:	4618      	mov	r0, r3
 80010e8:	f000 f940 	bl	800136c <I2C_GetFlagStatus>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d0f6      	beq.n	80010e0 <I2C_MAsterSendData+0xa4>


	// 8. generate STOP condition and master need no to wait for the completion of STOP condition.
	// Note : generating STOP, automatically clears the BTF
	if(Sr == I2C_DISABLE_SR)
 80010f2:	7e3b      	ldrb	r3, [r7, #24]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d104      	bne.n	8001102 <I2C_MAsterSendData+0xc6>
		I2C_generateStopCondition(pI2CHandle->pI2Cx);
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f000 f877 	bl	80011f0 <I2C_generateStopCondition>


}
 8001102:	bf00      	nop
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <I2C_generateStartCondition>:
static void I2C_generateStartCondition(I2C_RegDef_t *pI2Cx)
{
 800110a:	b480      	push	{r7}
 800110c:	b083      	sub	sp, #12
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_START);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	601a      	str	r2, [r3, #0]
}
 800111e:	bf00      	nop
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr

0800112a <I2C_ExecuteAddressPhaseWrite>:
static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t slaveAddr)
{
 800112a:	b480      	push	{r7}
 800112c:	b083      	sub	sp, #12
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
 8001132:	460b      	mov	r3, r1
 8001134:	70fb      	strb	r3, [r7, #3]
	slaveAddr = slaveAddr << 1;
 8001136:	78fb      	ldrb	r3, [r7, #3]
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	70fb      	strb	r3, [r7, #3]
	slaveAddr &= ~(1 << 0);
 800113c:	78fb      	ldrb	r3, [r7, #3]
 800113e:	f023 0301 	bic.w	r3, r3, #1
 8001142:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = slaveAddr;
 8001144:	78fa      	ldrb	r2, [r7, #3]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	611a      	str	r2, [r3, #16]
}
 800114a:	bf00      	nop
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <I2C_ExecuteAddressPhaseRead>:
static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t slaveAddr)
{
 8001156:	b480      	push	{r7}
 8001158:	b083      	sub	sp, #12
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
 800115e:	460b      	mov	r3, r1
 8001160:	70fb      	strb	r3, [r7, #3]
	slaveAddr = slaveAddr << 1;
 8001162:	78fb      	ldrb	r3, [r7, #3]
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	70fb      	strb	r3, [r7, #3]
	slaveAddr |= (1 << 0);
 8001168:	78fb      	ldrb	r3, [r7, #3]
 800116a:	f043 0301 	orr.w	r3, r3, #1
 800116e:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = slaveAddr;
 8001170:	78fa      	ldrb	r2, [r7, #3]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	611a      	str	r2, [r3, #16]
}
 8001176:	bf00      	nop
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr

08001182 <I2C_ClearADDRFlag>:
static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b084      	sub	sp, #16
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
	uint32_t dummyRead;
	// check for device mode
	if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL))
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	f003 0301 	and.w	r3, r3, #1
 8001194:	2b00      	cmp	r3, #0
 8001196:	d01f      	beq.n	80011d8 <I2C_ClearADDRFlag+0x56>
	{
		// device is in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	7f1b      	ldrb	r3, [r3, #28]
 800119c:	2b01      	cmp	r3, #1
 800119e:	d112      	bne.n	80011c6 <I2C_ClearADDRFlag+0x44>
		{
			if(pI2CHandle->RxSize == 1)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6a1b      	ldr	r3, [r3, #32]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d11f      	bne.n	80011e8 <I2C_ClearADDRFlag+0x66>
			{
				// first disable the ack
				I2C_ManageAcking(pI2CHandle->pI2Cx, DISABLE);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2100      	movs	r1, #0
 80011ae:	4618      	mov	r0, r3
 80011b0:	f000 f8f0 	bl	8001394 <I2C_ManageAcking>

				// clear the ADDR flag (read SR1, read SR2)
				dummyRead = pI2CHandle->pI2Cx->SR1;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	695b      	ldr	r3, [r3, #20]
 80011ba:	60fb      	str	r3, [r7, #12]
				dummyRead = pI2CHandle->pI2Cx->SR2;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	699b      	ldr	r3, [r3, #24]
 80011c2:	60fb      	str	r3, [r7, #12]
		dummyRead = pI2CHandle->pI2Cx->SR2;
		(void)dummyRead;
	}


}
 80011c4:	e010      	b.n	80011e8 <I2C_ClearADDRFlag+0x66>
			dummyRead = pI2CHandle->pI2Cx->SR1;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	695b      	ldr	r3, [r3, #20]
 80011cc:	60fb      	str	r3, [r7, #12]
			dummyRead = pI2CHandle->pI2Cx->SR2;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	60fb      	str	r3, [r7, #12]
}
 80011d6:	e007      	b.n	80011e8 <I2C_ClearADDRFlag+0x66>
		dummyRead = pI2CHandle->pI2Cx->SR1;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	60fb      	str	r3, [r7, #12]
		dummyRead = pI2CHandle->pI2Cx->SR2;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	699b      	ldr	r3, [r3, #24]
 80011e6:	60fb      	str	r3, [r7, #12]
}
 80011e8:	bf00      	nop
 80011ea:	3710      	adds	r7, #16
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <I2C_generateStopCondition>:
void I2C_generateStopCondition(I2C_RegDef_t *pI2Cx)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	601a      	str	r2, [r3, #0]
}
 8001204:	bf00      	nop
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <I2C_MasterReceiveData>:
 *
 *@Note					-
 *
 */
void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle, uint8_t *pRxBuffer, uint8_t len, uint8_t slaveAddr, uint8_t Sr)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	4611      	mov	r1, r2
 800121c:	461a      	mov	r2, r3
 800121e:	460b      	mov	r3, r1
 8001220:	71fb      	strb	r3, [r7, #7]
 8001222:	4613      	mov	r3, r2
 8001224:	71bb      	strb	r3, [r7, #6]
	// 1. Generate the START condition
	I2C_generateStartCondition(pI2CHandle->pI2Cx);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff ff6d 	bl	800110a <I2C_generateStartCondition>

	// 2. confirm that start generation is completed by checking the SB flag in the SR1
	// 	Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_SB_FLAG));
 8001230:	bf00      	nop
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	2101      	movs	r1, #1
 8001238:	4618      	mov	r0, r3
 800123a:	f000 f897 	bl	800136c <I2C_GetFlagStatus>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d0f6      	beq.n	8001232 <I2C_MasterReceiveData+0x22>

	// 3. Send the address of the slave with r/nw bit set to R(1) (total 8 bits)
	I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx, slaveAddr);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	79ba      	ldrb	r2, [r7, #6]
 800124a:	4611      	mov	r1, r2
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff ff82 	bl	8001156 <I2C_ExecuteAddressPhaseRead>

	// 4. wait until address phase is completed by checking the ADDR flag in the SR1
	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_ADDR_FLAG));
 8001252:	bf00      	nop
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2102      	movs	r1, #2
 800125a:	4618      	mov	r0, r3
 800125c:	f000 f886 	bl	800136c <I2C_GetFlagStatus>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d0f6      	beq.n	8001254 <I2C_MasterReceiveData+0x44>

	// procedure to read only 1 byte from slave
	if(len == 1)
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	2b01      	cmp	r3, #1
 800126a:	d121      	bne.n	80012b0 <I2C_MasterReceiveData+0xa0>
	{
		// Disable Acking
		I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_DISABLE);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2100      	movs	r1, #0
 8001272:	4618      	mov	r0, r3
 8001274:	f000 f88e 	bl	8001394 <I2C_ManageAcking>

		// clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 8001278:	68f8      	ldr	r0, [r7, #12]
 800127a:	f7ff ff82 	bl	8001182 <I2C_ClearADDRFlag>

		// wait until RXNE becomes 1
		while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_RxNE_FLAG));
 800127e:	bf00      	nop
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2140      	movs	r1, #64	; 0x40
 8001286:	4618      	mov	r0, r3
 8001288:	f000 f870 	bl	800136c <I2C_GetFlagStatus>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d0f6      	beq.n	8001280 <I2C_MasterReceiveData+0x70>

		// generate STOP condition
		if(Sr == I2C_DISABLE_SR)
 8001292:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d104      	bne.n	80012a4 <I2C_MasterReceiveData+0x94>
			I2C_generateStopCondition(pI2CHandle->pI2Cx);
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff ffa6 	bl	80011f0 <I2C_generateStopCondition>

		// read data in to buffer
		*pRxBuffer = pI2CHandle->pI2Cx->DR;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	691b      	ldr	r3, [r3, #16]
 80012aa:	b2da      	uxtb	r2, r3
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	701a      	strb	r2, [r3, #0]

	}

	// procedure to read data from slave when len > 1
	if(len > 1)
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d930      	bls.n	8001318 <I2C_MasterReceiveData+0x108>
	{
		// clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 80012b6:	68f8      	ldr	r0, [r7, #12]
 80012b8:	f7ff ff63 	bl	8001182 <I2C_ClearADDRFlag>

		// read the data until len becomes zero
		for(uint32_t i = len; i > 0; i--)
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	617b      	str	r3, [r7, #20]
 80012c0:	e027      	b.n	8001312 <I2C_MasterReceiveData+0x102>
		{
			// wait until RXNE becomes 1
			while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_RxNE_FLAG));
 80012c2:	bf00      	nop
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2140      	movs	r1, #64	; 0x40
 80012ca:	4618      	mov	r0, r3
 80012cc:	f000 f84e 	bl	800136c <I2C_GetFlagStatus>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d0f6      	beq.n	80012c4 <I2C_MasterReceiveData+0xb4>

			if(i == 2) // if last 2 bytes are remaining
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d10e      	bne.n	80012fa <I2C_MasterReceiveData+0xea>
			{
				// clear the ack bit
				I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_DISABLE);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2100      	movs	r1, #0
 80012e2:	4618      	mov	r0, r3
 80012e4:	f000 f856 	bl	8001394 <I2C_ManageAcking>

				// generate STOP condition
				if(Sr == I2C_DISABLE_SR)
 80012e8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d104      	bne.n	80012fa <I2C_MasterReceiveData+0xea>
					I2C_generateStopCondition(pI2CHandle->pI2Cx);
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff ff7b 	bl	80011f0 <I2C_generateStopCondition>
			}

			// read the data from data register in to buffer
			*pRxBuffer = pI2CHandle->pI2Cx->DR;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	691b      	ldr	r3, [r3, #16]
 8001300:	b2da      	uxtb	r2, r3
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	701a      	strb	r2, [r3, #0]

			// increment the buffer address
			pRxBuffer++;
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	3301      	adds	r3, #1
 800130a:	60bb      	str	r3, [r7, #8]
		for(uint32_t i = len; i > 0; i--)
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	3b01      	subs	r3, #1
 8001310:	617b      	str	r3, [r7, #20]
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d1d4      	bne.n	80012c2 <I2C_MasterReceiveData+0xb2>
		}
	}

	// re-enable ACKings
	if(pI2CHandle->I2C_Config.I2C_ACKControl == I2C_ACK_ENABLE)
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	7a5b      	ldrb	r3, [r3, #9]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d105      	bne.n	800132c <I2C_MasterReceiveData+0x11c>
		I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_ENABLE);
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2101      	movs	r1, #1
 8001326:	4618      	mov	r0, r3
 8001328:	f000 f834 	bl	8001394 <I2C_ManageAcking>
}
 800132c:	bf00      	nop
 800132e:	3718      	adds	r7, #24
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <I2C_PeripheralControl>:
  *
  *@Note					-
  *
  */
 void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
 {
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	460b      	mov	r3, r1
 800133e:	70fb      	strb	r3, [r7, #3]
		if(EnorDi == ENABLE)
 8001340:	78fb      	ldrb	r3, [r7, #3]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d106      	bne.n	8001354 <I2C_PeripheralControl+0x20>
		{
			pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f043 0201 	orr.w	r2, r3, #1
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	601a      	str	r2, [r3, #0]
		}
		else
		{
			pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
		}
 }
 8001352:	e005      	b.n	8001360 <I2C_PeripheralControl+0x2c>
			pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f023 0201 	bic.w	r2, r3, #1
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	601a      	str	r2, [r3, #0]
 }
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <I2C_GetFlagStatus>:
  *
  *@Note					-
  *
  */
 uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint32_t FlagName)
 {
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]
		if(pI2Cx->SR1 & FlagName)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	695a      	ldr	r2, [r3, #20]
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	4013      	ands	r3, r2
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <I2C_GetFlagStatus+0x1a>
			return FLAG_SET;
 8001382:	2301      	movs	r3, #1
 8001384:	e000      	b.n	8001388 <I2C_GetFlagStatus+0x1c>
		else
			return FLAG_RESET;
 8001386:	2300      	movs	r3, #0
 }
 8001388:	4618      	mov	r0, r3
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <I2C_ManageAcking>:
  *
  *@Note					-
  *
  */
 void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
 {
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	460b      	mov	r3, r1
 800139e:	70fb      	strb	r3, [r7, #3]
	 if(EnorDi == I2C_ACK_ENABLE)
 80013a0:	78fb      	ldrb	r3, [r7, #3]
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d106      	bne.n	80013b4 <I2C_ManageAcking+0x20>
	 {
		 // enable the ack
		 pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	601a      	str	r2, [r3, #0]
	 {
		 // disable the ack
		 pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
	 }

 }
 80013b2:	e005      	b.n	80013c0 <I2C_ManageAcking+0x2c>
		 pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	601a      	str	r2, [r3, #0]
 }
 80013c0:	bf00      	nop
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <GPIO_PeripheralClockControl>:
 *
 *@Note					- none
 *
 */
void GPIO_PeripheralClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	460b      	mov	r3, r1
 80013d6:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80013d8:	78fb      	ldrb	r3, [r7, #3]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d162      	bne.n	80014a4 <GPIO_PeripheralClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a64      	ldr	r2, [pc, #400]	; (8001574 <GPIO_PeripheralClockControl+0x1a8>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d106      	bne.n	80013f4 <GPIO_PeripheralClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80013e6:	4b64      	ldr	r3, [pc, #400]	; (8001578 <GPIO_PeripheralClockControl+0x1ac>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	4a63      	ldr	r2, [pc, #396]	; (8001578 <GPIO_PeripheralClockControl+0x1ac>)
 80013ec:	f043 0301 	orr.w	r3, r3, #1
 80013f0:	6313      	str	r3, [r2, #48]	; 0x30
		else if(pGPIOx == GPIOI)
		{
			GPIOI_PCLK_DI();
		}
	}
}
 80013f2:	e0b9      	b.n	8001568 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4a61      	ldr	r2, [pc, #388]	; (800157c <GPIO_PeripheralClockControl+0x1b0>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d106      	bne.n	800140a <GPIO_PeripheralClockControl+0x3e>
			GPIOB_PCLK_EN();
 80013fc:	4b5e      	ldr	r3, [pc, #376]	; (8001578 <GPIO_PeripheralClockControl+0x1ac>)
 80013fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001400:	4a5d      	ldr	r2, [pc, #372]	; (8001578 <GPIO_PeripheralClockControl+0x1ac>)
 8001402:	f043 0302 	orr.w	r3, r3, #2
 8001406:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001408:	e0ae      	b.n	8001568 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a5c      	ldr	r2, [pc, #368]	; (8001580 <GPIO_PeripheralClockControl+0x1b4>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d106      	bne.n	8001420 <GPIO_PeripheralClockControl+0x54>
			GPIOC_PCLK_EN();
 8001412:	4b59      	ldr	r3, [pc, #356]	; (8001578 <GPIO_PeripheralClockControl+0x1ac>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	4a58      	ldr	r2, [pc, #352]	; (8001578 <GPIO_PeripheralClockControl+0x1ac>)
 8001418:	f043 0304 	orr.w	r3, r3, #4
 800141c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800141e:	e0a3      	b.n	8001568 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	4a58      	ldr	r2, [pc, #352]	; (8001584 <GPIO_PeripheralClockControl+0x1b8>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d106      	bne.n	8001436 <GPIO_PeripheralClockControl+0x6a>
			GPIOD_PCLK_EN();
 8001428:	4b53      	ldr	r3, [pc, #332]	; (8001578 <GPIO_PeripheralClockControl+0x1ac>)
 800142a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142c:	4a52      	ldr	r2, [pc, #328]	; (8001578 <GPIO_PeripheralClockControl+0x1ac>)
 800142e:	f043 0308 	orr.w	r3, r3, #8
 8001432:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001434:	e098      	b.n	8001568 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a53      	ldr	r2, [pc, #332]	; (8001588 <GPIO_PeripheralClockControl+0x1bc>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d106      	bne.n	800144c <GPIO_PeripheralClockControl+0x80>
			GPIOE_PCLK_EN();
 800143e:	4b4e      	ldr	r3, [pc, #312]	; (8001578 <GPIO_PeripheralClockControl+0x1ac>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	4a4d      	ldr	r2, [pc, #308]	; (8001578 <GPIO_PeripheralClockControl+0x1ac>)
 8001444:	f043 0310 	orr.w	r3, r3, #16
 8001448:	6313      	str	r3, [r2, #48]	; 0x30
}
 800144a:	e08d      	b.n	8001568 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4a4f      	ldr	r2, [pc, #316]	; (800158c <GPIO_PeripheralClockControl+0x1c0>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d106      	bne.n	8001462 <GPIO_PeripheralClockControl+0x96>
			GPIOF_PCLK_EN();
 8001454:	4b48      	ldr	r3, [pc, #288]	; (8001578 <GPIO_PeripheralClockControl+0x1ac>)
 8001456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001458:	4a47      	ldr	r2, [pc, #284]	; (8001578 <GPIO_PeripheralClockControl+0x1ac>)
 800145a:	f043 0320 	orr.w	r3, r3, #32
 800145e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001460:	e082      	b.n	8001568 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a4a      	ldr	r2, [pc, #296]	; (8001590 <GPIO_PeripheralClockControl+0x1c4>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d106      	bne.n	8001478 <GPIO_PeripheralClockControl+0xac>
			GPIOG_PCLK_EN();
 800146a:	4b43      	ldr	r3, [pc, #268]	; (8001578 <GPIO_PeripheralClockControl+0x1ac>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	4a42      	ldr	r2, [pc, #264]	; (8001578 <GPIO_PeripheralClockControl+0x1ac>)
 8001470:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001474:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001476:	e077      	b.n	8001568 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4a46      	ldr	r2, [pc, #280]	; (8001594 <GPIO_PeripheralClockControl+0x1c8>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d106      	bne.n	800148e <GPIO_PeripheralClockControl+0xc2>
			GPIOH_PCLK_EN();
 8001480:	4b3d      	ldr	r3, [pc, #244]	; (8001578 <GPIO_PeripheralClockControl+0x1ac>)
 8001482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001484:	4a3c      	ldr	r2, [pc, #240]	; (8001578 <GPIO_PeripheralClockControl+0x1ac>)
 8001486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800148a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800148c:	e06c      	b.n	8001568 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a41      	ldr	r2, [pc, #260]	; (8001598 <GPIO_PeripheralClockControl+0x1cc>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d168      	bne.n	8001568 <GPIO_PeripheralClockControl+0x19c>
			GPIOI_PCLK_EN();
 8001496:	4b38      	ldr	r3, [pc, #224]	; (8001578 <GPIO_PeripheralClockControl+0x1ac>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	4a37      	ldr	r2, [pc, #220]	; (8001578 <GPIO_PeripheralClockControl+0x1ac>)
 800149c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014a0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80014a2:	e061      	b.n	8001568 <GPIO_PeripheralClockControl+0x19c>
		if(pGPIOx == GPIOA)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	4a33      	ldr	r2, [pc, #204]	; (8001574 <GPIO_PeripheralClockControl+0x1a8>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d106      	bne.n	80014ba <GPIO_PeripheralClockControl+0xee>
			GPIOA_PCLK_DI();
 80014ac:	4b32      	ldr	r3, [pc, #200]	; (8001578 <GPIO_PeripheralClockControl+0x1ac>)
 80014ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b0:	4a31      	ldr	r2, [pc, #196]	; (8001578 <GPIO_PeripheralClockControl+0x1ac>)
 80014b2:	f023 0301 	bic.w	r3, r3, #1
 80014b6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80014b8:	e056      	b.n	8001568 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a2f      	ldr	r2, [pc, #188]	; (800157c <GPIO_PeripheralClockControl+0x1b0>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d106      	bne.n	80014d0 <GPIO_PeripheralClockControl+0x104>
			GPIOB_PCLK_DI();
 80014c2:	4b2d      	ldr	r3, [pc, #180]	; (8001578 <GPIO_PeripheralClockControl+0x1ac>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	4a2c      	ldr	r2, [pc, #176]	; (8001578 <GPIO_PeripheralClockControl+0x1ac>)
 80014c8:	f023 0302 	bic.w	r3, r3, #2
 80014cc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80014ce:	e04b      	b.n	8001568 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	4a2b      	ldr	r2, [pc, #172]	; (8001580 <GPIO_PeripheralClockControl+0x1b4>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d106      	bne.n	80014e6 <GPIO_PeripheralClockControl+0x11a>
			GPIOC_PCLK_DI();
 80014d8:	4b27      	ldr	r3, [pc, #156]	; (8001578 <GPIO_PeripheralClockControl+0x1ac>)
 80014da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014dc:	4a26      	ldr	r2, [pc, #152]	; (8001578 <GPIO_PeripheralClockControl+0x1ac>)
 80014de:	f023 0304 	bic.w	r3, r3, #4
 80014e2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80014e4:	e040      	b.n	8001568 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a26      	ldr	r2, [pc, #152]	; (8001584 <GPIO_PeripheralClockControl+0x1b8>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d106      	bne.n	80014fc <GPIO_PeripheralClockControl+0x130>
			GPIOD_PCLK_DI();
 80014ee:	4b22      	ldr	r3, [pc, #136]	; (8001578 <GPIO_PeripheralClockControl+0x1ac>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	4a21      	ldr	r2, [pc, #132]	; (8001578 <GPIO_PeripheralClockControl+0x1ac>)
 80014f4:	f023 0308 	bic.w	r3, r3, #8
 80014f8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80014fa:	e035      	b.n	8001568 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4a22      	ldr	r2, [pc, #136]	; (8001588 <GPIO_PeripheralClockControl+0x1bc>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d106      	bne.n	8001512 <GPIO_PeripheralClockControl+0x146>
			GPIOE_PCLK_DI();
 8001504:	4b1c      	ldr	r3, [pc, #112]	; (8001578 <GPIO_PeripheralClockControl+0x1ac>)
 8001506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001508:	4a1b      	ldr	r2, [pc, #108]	; (8001578 <GPIO_PeripheralClockControl+0x1ac>)
 800150a:	f023 0310 	bic.w	r3, r3, #16
 800150e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001510:	e02a      	b.n	8001568 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a1d      	ldr	r2, [pc, #116]	; (800158c <GPIO_PeripheralClockControl+0x1c0>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d106      	bne.n	8001528 <GPIO_PeripheralClockControl+0x15c>
			GPIOF_PCLK_DI();
 800151a:	4b17      	ldr	r3, [pc, #92]	; (8001578 <GPIO_PeripheralClockControl+0x1ac>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	4a16      	ldr	r2, [pc, #88]	; (8001578 <GPIO_PeripheralClockControl+0x1ac>)
 8001520:	f023 0320 	bic.w	r3, r3, #32
 8001524:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001526:	e01f      	b.n	8001568 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4a19      	ldr	r2, [pc, #100]	; (8001590 <GPIO_PeripheralClockControl+0x1c4>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d106      	bne.n	800153e <GPIO_PeripheralClockControl+0x172>
			GPIOG_PCLK_DI();
 8001530:	4b11      	ldr	r3, [pc, #68]	; (8001578 <GPIO_PeripheralClockControl+0x1ac>)
 8001532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001534:	4a10      	ldr	r2, [pc, #64]	; (8001578 <GPIO_PeripheralClockControl+0x1ac>)
 8001536:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800153a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800153c:	e014      	b.n	8001568 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a14      	ldr	r2, [pc, #80]	; (8001594 <GPIO_PeripheralClockControl+0x1c8>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d106      	bne.n	8001554 <GPIO_PeripheralClockControl+0x188>
			GPIOH_PCLK_DI();
 8001546:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <GPIO_PeripheralClockControl+0x1ac>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	4a0b      	ldr	r2, [pc, #44]	; (8001578 <GPIO_PeripheralClockControl+0x1ac>)
 800154c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001550:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001552:	e009      	b.n	8001568 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	4a10      	ldr	r2, [pc, #64]	; (8001598 <GPIO_PeripheralClockControl+0x1cc>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d105      	bne.n	8001568 <GPIO_PeripheralClockControl+0x19c>
			GPIOI_PCLK_DI();
 800155c:	4b06      	ldr	r3, [pc, #24]	; (8001578 <GPIO_PeripheralClockControl+0x1ac>)
 800155e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001560:	4a05      	ldr	r2, [pc, #20]	; (8001578 <GPIO_PeripheralClockControl+0x1ac>)
 8001562:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001566:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	40020000 	.word	0x40020000
 8001578:	40023800 	.word	0x40023800
 800157c:	40020400 	.word	0x40020400
 8001580:	40020800 	.word	0x40020800
 8001584:	40020c00 	.word	0x40020c00
 8001588:	40021000 	.word	0x40021000
 800158c:	40021400 	.word	0x40021400
 8001590:	40021800 	.word	0x40021800
 8001594:	40021c00 	.word	0x40021c00
 8001598:	40022000 	.word	0x40022000

0800159c <GPIO_Init>:

/*
 * Init and De-init
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0; // temp register
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]

	// enable the peripheral clock
	GPIO_PeripheralClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2101      	movs	r1, #1
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff ff0c 	bl	80013cc <GPIO_PeripheralClockControl>

	// 1. configure the mode of gpio pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	795b      	ldrb	r3, [r3, #5]
 80015b8:	2b03      	cmp	r3, #3
 80015ba:	d820      	bhi.n	80015fe <GPIO_Init+0x62>
	{
		// the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	795b      	ldrb	r3, [r3, #5]
 80015c0:	461a      	mov	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	791b      	ldrb	r3, [r3, #4]
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clear
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	791b      	ldrb	r3, [r3, #4]
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	2103      	movs	r1, #3
 80015dc:	fa01 f303 	lsl.w	r3, r1, r3
 80015e0:	43db      	mvns	r3, r3
 80015e2:	4619      	mov	r1, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	400a      	ands	r2, r1
 80015ea:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;	// setting
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	6819      	ldr	r1, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	697a      	ldr	r2, [r7, #20]
 80015f8:	430a      	orrs	r2, r1
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	e0c1      	b.n	8001782 <GPIO_Init+0x1e6>

	}
	else
	{
		// this part will code later (interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	795b      	ldrb	r3, [r3, #5]
 8001602:	2b04      	cmp	r3, #4
 8001604:	d117      	bne.n	8001636 <GPIO_Init+0x9a>
		{
			// 1. configure the FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001606:	4b47      	ldr	r3, [pc, #284]	; (8001724 <GPIO_Init+0x188>)
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	7912      	ldrb	r2, [r2, #4]
 800160e:	4611      	mov	r1, r2
 8001610:	2201      	movs	r2, #1
 8001612:	408a      	lsls	r2, r1
 8001614:	4611      	mov	r1, r2
 8001616:	4a43      	ldr	r2, [pc, #268]	; (8001724 <GPIO_Init+0x188>)
 8001618:	430b      	orrs	r3, r1
 800161a:	60d3      	str	r3, [r2, #12]
			// Clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800161c:	4b41      	ldr	r3, [pc, #260]	; (8001724 <GPIO_Init+0x188>)
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	7912      	ldrb	r2, [r2, #4]
 8001624:	4611      	mov	r1, r2
 8001626:	2201      	movs	r2, #1
 8001628:	408a      	lsls	r2, r1
 800162a:	43d2      	mvns	r2, r2
 800162c:	4611      	mov	r1, r2
 800162e:	4a3d      	ldr	r2, [pc, #244]	; (8001724 <GPIO_Init+0x188>)
 8001630:	400b      	ands	r3, r1
 8001632:	6093      	str	r3, [r2, #8]
 8001634:	e035      	b.n	80016a2 <GPIO_Init+0x106>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	795b      	ldrb	r3, [r3, #5]
 800163a:	2b05      	cmp	r3, #5
 800163c:	d117      	bne.n	800166e <GPIO_Init+0xd2>
		{
			// 1. configure the RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800163e:	4b39      	ldr	r3, [pc, #228]	; (8001724 <GPIO_Init+0x188>)
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	7912      	ldrb	r2, [r2, #4]
 8001646:	4611      	mov	r1, r2
 8001648:	2201      	movs	r2, #1
 800164a:	408a      	lsls	r2, r1
 800164c:	4611      	mov	r1, r2
 800164e:	4a35      	ldr	r2, [pc, #212]	; (8001724 <GPIO_Init+0x188>)
 8001650:	430b      	orrs	r3, r1
 8001652:	6093      	str	r3, [r2, #8]
			// Clear the corresponding FTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001654:	4b33      	ldr	r3, [pc, #204]	; (8001724 <GPIO_Init+0x188>)
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	7912      	ldrb	r2, [r2, #4]
 800165c:	4611      	mov	r1, r2
 800165e:	2201      	movs	r2, #1
 8001660:	408a      	lsls	r2, r1
 8001662:	43d2      	mvns	r2, r2
 8001664:	4611      	mov	r1, r2
 8001666:	4a2f      	ldr	r2, [pc, #188]	; (8001724 <GPIO_Init+0x188>)
 8001668:	400b      	ands	r3, r1
 800166a:	60d3      	str	r3, [r2, #12]
 800166c:	e019      	b.n	80016a2 <GPIO_Init+0x106>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	795b      	ldrb	r3, [r3, #5]
 8001672:	2b06      	cmp	r3, #6
 8001674:	d115      	bne.n	80016a2 <GPIO_Init+0x106>
		{
			// 1. configure both FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001676:	4b2b      	ldr	r3, [pc, #172]	; (8001724 <GPIO_Init+0x188>)
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	7912      	ldrb	r2, [r2, #4]
 800167e:	4611      	mov	r1, r2
 8001680:	2201      	movs	r2, #1
 8001682:	408a      	lsls	r2, r1
 8001684:	4611      	mov	r1, r2
 8001686:	4a27      	ldr	r2, [pc, #156]	; (8001724 <GPIO_Init+0x188>)
 8001688:	430b      	orrs	r3, r1
 800168a:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800168c:	4b25      	ldr	r3, [pc, #148]	; (8001724 <GPIO_Init+0x188>)
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	7912      	ldrb	r2, [r2, #4]
 8001694:	4611      	mov	r1, r2
 8001696:	2201      	movs	r2, #1
 8001698:	408a      	lsls	r2, r1
 800169a:	4611      	mov	r1, r2
 800169c:	4a21      	ldr	r2, [pc, #132]	; (8001724 <GPIO_Init+0x188>)
 800169e:	430b      	orrs	r3, r1
 80016a0:	6093      	str	r3, [r2, #8]
		}

		// 2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	791b      	ldrb	r3, [r3, #4]
 80016a6:	089b      	lsrs	r3, r3, #2
 80016a8:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	791b      	ldrb	r3, [r3, #4]
 80016ae:	f003 0303 	and.w	r3, r3, #3
 80016b2:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a1b      	ldr	r2, [pc, #108]	; (8001728 <GPIO_Init+0x18c>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d044      	beq.n	8001748 <GPIO_Init+0x1ac>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a1a      	ldr	r2, [pc, #104]	; (800172c <GPIO_Init+0x190>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d02b      	beq.n	8001720 <GPIO_Init+0x184>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a18      	ldr	r2, [pc, #96]	; (8001730 <GPIO_Init+0x194>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d024      	beq.n	800171c <GPIO_Init+0x180>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a17      	ldr	r2, [pc, #92]	; (8001734 <GPIO_Init+0x198>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d01d      	beq.n	8001718 <GPIO_Init+0x17c>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a15      	ldr	r2, [pc, #84]	; (8001738 <GPIO_Init+0x19c>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d016      	beq.n	8001714 <GPIO_Init+0x178>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a14      	ldr	r2, [pc, #80]	; (800173c <GPIO_Init+0x1a0>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d00f      	beq.n	8001710 <GPIO_Init+0x174>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a12      	ldr	r2, [pc, #72]	; (8001740 <GPIO_Init+0x1a4>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d008      	beq.n	800170c <GPIO_Init+0x170>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a11      	ldr	r2, [pc, #68]	; (8001744 <GPIO_Init+0x1a8>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d101      	bne.n	8001708 <GPIO_Init+0x16c>
 8001704:	2307      	movs	r3, #7
 8001706:	e020      	b.n	800174a <GPIO_Init+0x1ae>
 8001708:	2308      	movs	r3, #8
 800170a:	e01e      	b.n	800174a <GPIO_Init+0x1ae>
 800170c:	2306      	movs	r3, #6
 800170e:	e01c      	b.n	800174a <GPIO_Init+0x1ae>
 8001710:	2305      	movs	r3, #5
 8001712:	e01a      	b.n	800174a <GPIO_Init+0x1ae>
 8001714:	2304      	movs	r3, #4
 8001716:	e018      	b.n	800174a <GPIO_Init+0x1ae>
 8001718:	2303      	movs	r3, #3
 800171a:	e016      	b.n	800174a <GPIO_Init+0x1ae>
 800171c:	2302      	movs	r3, #2
 800171e:	e014      	b.n	800174a <GPIO_Init+0x1ae>
 8001720:	2301      	movs	r3, #1
 8001722:	e012      	b.n	800174a <GPIO_Init+0x1ae>
 8001724:	40013c00 	.word	0x40013c00
 8001728:	40020000 	.word	0x40020000
 800172c:	40020400 	.word	0x40020400
 8001730:	40020800 	.word	0x40020800
 8001734:	40020c00 	.word	0x40020c00
 8001738:	40021000 	.word	0x40021000
 800173c:	40021400 	.word	0x40021400
 8001740:	40021800 	.word	0x40021800
 8001744:	40021c00 	.word	0x40021c00
 8001748:	2300      	movs	r3, #0
 800174a:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 800174c:	4b5c      	ldr	r3, [pc, #368]	; (80018c0 <GPIO_Init+0x324>)
 800174e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001750:	4a5b      	ldr	r2, [pc, #364]	; (80018c0 <GPIO_Init+0x324>)
 8001752:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001756:	6453      	str	r3, [r2, #68]	; 0x44
		SYS_CFG->EXTICR[temp1] = portcode << (temp2 * 4);
 8001758:	7c7a      	ldrb	r2, [r7, #17]
 800175a:	7cbb      	ldrb	r3, [r7, #18]
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	fa02 f103 	lsl.w	r1, r2, r3
 8001762:	4a58      	ldr	r2, [pc, #352]	; (80018c4 <GPIO_Init+0x328>)
 8001764:	7cfb      	ldrb	r3, [r7, #19]
 8001766:	3302      	adds	r3, #2
 8001768:	f842 1023 	str.w	r1, [r2, r3, lsl #2]


		// 3. enable the exti interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800176c:	4b56      	ldr	r3, [pc, #344]	; (80018c8 <GPIO_Init+0x32c>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	7912      	ldrb	r2, [r2, #4]
 8001774:	4611      	mov	r1, r2
 8001776:	2201      	movs	r2, #1
 8001778:	408a      	lsls	r2, r1
 800177a:	4611      	mov	r1, r2
 800177c:	4a52      	ldr	r2, [pc, #328]	; (80018c8 <GPIO_Init+0x32c>)
 800177e:	430b      	orrs	r3, r1
 8001780:	6013      	str	r3, [r2, #0]
	}

	// 2. configure the speed
	temp = 0;
 8001782:	2300      	movs	r3, #0
 8001784:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	799b      	ldrb	r3, [r3, #6]
 800178a:	461a      	mov	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	791b      	ldrb	r3, [r3, #4]
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clear
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	689a      	ldr	r2, [r3, #8]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	791b      	ldrb	r3, [r3, #4]
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	2103      	movs	r1, #3
 80017a6:	fa01 f303 	lsl.w	r3, r1, r3
 80017aa:	43db      	mvns	r3, r3
 80017ac:	4619      	mov	r1, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	400a      	ands	r2, r1
 80017b4:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;	// setting
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6899      	ldr	r1, [r3, #8]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	697a      	ldr	r2, [r7, #20]
 80017c2:	430a      	orrs	r2, r1
 80017c4:	609a      	str	r2, [r3, #8]

	// 3. configure the pupd settings
	temp = 0;
 80017c6:	2300      	movs	r3, #0
 80017c8:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	79db      	ldrb	r3, [r3, #7]
 80017ce:	461a      	mov	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	791b      	ldrb	r3, [r3, #4]
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clear
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	68da      	ldr	r2, [r3, #12]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	791b      	ldrb	r3, [r3, #4]
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	2103      	movs	r1, #3
 80017ea:	fa01 f303 	lsl.w	r3, r1, r3
 80017ee:	43db      	mvns	r3, r3
 80017f0:	4619      	mov	r1, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	400a      	ands	r2, r1
 80017f8:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;	// setting
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	68d9      	ldr	r1, [r3, #12]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	697a      	ldr	r2, [r7, #20]
 8001806:	430a      	orrs	r2, r1
 8001808:	60da      	str	r2, [r3, #12]


	// 4. configure the optype
	temp = 0;
 800180a:	2300      	movs	r3, #0
 800180c:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	7a1b      	ldrb	r3, [r3, #8]
 8001812:	461a      	mov	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	791b      	ldrb	r3, [r3, #4]
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x01 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clear
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	685a      	ldr	r2, [r3, #4]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	791b      	ldrb	r3, [r3, #4]
 8001828:	4619      	mov	r1, r3
 800182a:	2301      	movs	r3, #1
 800182c:	408b      	lsls	r3, r1
 800182e:	43db      	mvns	r3, r3
 8001830:	4619      	mov	r1, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	400a      	ands	r2, r1
 8001838:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;	// setting
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	6859      	ldr	r1, [r3, #4]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	697a      	ldr	r2, [r7, #20]
 8001846:	430a      	orrs	r2, r1
 8001848:	605a      	str	r2, [r3, #4]

	// 5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	795b      	ldrb	r3, [r3, #5]
 800184e:	2b02      	cmp	r3, #2
 8001850:	d131      	bne.n	80018b6 <GPIO_Init+0x31a>
	{
		// configure the alt function register
		uint8_t temp1,temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	791b      	ldrb	r3, [r3, #4]
 8001856:	08db      	lsrs	r3, r3, #3
 8001858:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	791b      	ldrb	r3, [r3, #4]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2)); // clearing
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	7c3a      	ldrb	r2, [r7, #16]
 800186a:	3208      	adds	r2, #8
 800186c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001870:	7bfb      	ldrb	r3, [r7, #15]
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	220f      	movs	r2, #15
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	43db      	mvns	r3, r3
 800187c:	4618      	mov	r0, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	7c3a      	ldrb	r2, [r7, #16]
 8001884:	4001      	ands	r1, r0
 8001886:	3208      	adds	r2, #8
 8001888:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2); // setting
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	7c3a      	ldrb	r2, [r7, #16]
 8001892:	3208      	adds	r2, #8
 8001894:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	7a5b      	ldrb	r3, [r3, #9]
 800189c:	461a      	mov	r2, r3
 800189e:	7bfb      	ldrb	r3, [r7, #15]
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	4618      	mov	r0, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	7c3a      	ldrb	r2, [r7, #16]
 80018ae:	4301      	orrs	r1, r0
 80018b0:	3208      	adds	r2, #8
 80018b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 80018b6:	bf00      	nop
 80018b8:	3718      	adds	r7, #24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40023800 	.word	0x40023800
 80018c4:	40013800 	.word	0x40013800
 80018c8:	40013c00 	.word	0x40013c00

080018cc <GPIO_WriteToOutputPin>:
	uint16_t value;
	value = (uint16_t)pGPIOx->IDR;
	return value;
}
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	460b      	mov	r3, r1
 80018d6:	70fb      	strb	r3, [r7, #3]
 80018d8:	4613      	mov	r3, r2
 80018da:	70bb      	strb	r3, [r7, #2]
	if(Value == GPIO_PIN_SET)
 80018dc:	78bb      	ldrb	r3, [r7, #2]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d109      	bne.n	80018f6 <GPIO_WriteToOutputPin+0x2a>
	{
		// Write 1 to the output data register at the bit field corresponding to the pin number
		pGPIOx->ODR |= (1 << PinNumber);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	695b      	ldr	r3, [r3, #20]
 80018e6:	78fa      	ldrb	r2, [r7, #3]
 80018e8:	2101      	movs	r1, #1
 80018ea:	fa01 f202 	lsl.w	r2, r1, r2
 80018ee:	431a      	orrs	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	615a      	str	r2, [r3, #20]
	else
	{
		// Write 0
		pGPIOx->ODR &= ~(1 << PinNumber);
	}
}
 80018f4:	e009      	b.n	800190a <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~(1 << PinNumber);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	695b      	ldr	r3, [r3, #20]
 80018fa:	78fa      	ldrb	r2, [r7, #3]
 80018fc:	2101      	movs	r1, #1
 80018fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001902:	43d2      	mvns	r2, r2
 8001904:	401a      	ands	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	615a      	str	r2, [r3, #20]
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
	...

08001918 <RCC_GETPLLOutputClock>:

uint16_t AHB_PreScalar[8] = {2, 4, 8, 16, 64, 128, 256, 512};
uint16_t APB1_PreScalar[4] = {2, 4, 8, 16};

uint32_t RCC_GETPLLOutputClock(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
	return 160000000; // dummy value to be implemented
 800191c:	4b02      	ldr	r3, [pc, #8]	; (8001928 <RCC_GETPLLOutputClock+0x10>)
}
 800191e:	4618      	mov	r0, r3
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	09896800 	.word	0x09896800

0800192c <RCC_GetPCLK1Value>:


uint32_t RCC_GetPCLK1Value(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
	uint32_t pclk1, SystemClk;

	uint8_t clkSrc, temp, ahbp, apb1;
	clkSrc = ((RCC->CFGR >> 2) & 0x03);
 8001932:	4b26      	ldr	r3, [pc, #152]	; (80019cc <RCC_GetPCLK1Value+0xa0>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	089b      	lsrs	r3, r3, #2
 8001938:	b2db      	uxtb	r3, r3
 800193a:	f003 0303 	and.w	r3, r3, #3
 800193e:	727b      	strb	r3, [r7, #9]

	if(clkSrc == 0)
 8001940:	7a7b      	ldrb	r3, [r7, #9]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d102      	bne.n	800194c <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 8001946:	4b22      	ldr	r3, [pc, #136]	; (80019d0 <RCC_GetPCLK1Value+0xa4>)
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	e00b      	b.n	8001964 <RCC_GetPCLK1Value+0x38>
	}
	else if(clkSrc == 1)
 800194c:	7a7b      	ldrb	r3, [r7, #9]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d102      	bne.n	8001958 <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 8001952:	4b20      	ldr	r3, [pc, #128]	; (80019d4 <RCC_GetPCLK1Value+0xa8>)
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	e005      	b.n	8001964 <RCC_GetPCLK1Value+0x38>
	}
	else if(clkSrc == 2)
 8001958:	7a7b      	ldrb	r3, [r7, #9]
 800195a:	2b02      	cmp	r3, #2
 800195c:	d102      	bne.n	8001964 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GETPLLOutputClock();
 800195e:	f7ff ffdb 	bl	8001918 <RCC_GETPLLOutputClock>
 8001962:	60f8      	str	r0, [r7, #12]
	}

	// ahbp
	temp = ((RCC->CFGR >> 4) & 0xF);
 8001964:	4b19      	ldr	r3, [pc, #100]	; (80019cc <RCC_GetPCLK1Value+0xa0>)
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	091b      	lsrs	r3, r3, #4
 800196a:	b2db      	uxtb	r3, r3
 800196c:	f003 030f 	and.w	r3, r3, #15
 8001970:	723b      	strb	r3, [r7, #8]
	if(temp < 8)
 8001972:	7a3b      	ldrb	r3, [r7, #8]
 8001974:	2b07      	cmp	r3, #7
 8001976:	d802      	bhi.n	800197e <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 8001978:	2301      	movs	r3, #1
 800197a:	72fb      	strb	r3, [r7, #11]
 800197c:	e005      	b.n	800198a <RCC_GetPCLK1Value+0x5e>
	}
	else
	{
		ahbp = AHB_PreScalar[temp - 8];
 800197e:	7a3b      	ldrb	r3, [r7, #8]
 8001980:	3b08      	subs	r3, #8
 8001982:	4a15      	ldr	r2, [pc, #84]	; (80019d8 <RCC_GetPCLK1Value+0xac>)
 8001984:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001988:	72fb      	strb	r3, [r7, #11]
	}

	// apb1
	temp = ((RCC->CFGR >> 10) & 0x7);
 800198a:	4b10      	ldr	r3, [pc, #64]	; (80019cc <RCC_GetPCLK1Value+0xa0>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	0a9b      	lsrs	r3, r3, #10
 8001990:	b2db      	uxtb	r3, r3
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	723b      	strb	r3, [r7, #8]
	if(temp < 4)
 8001998:	7a3b      	ldrb	r3, [r7, #8]
 800199a:	2b03      	cmp	r3, #3
 800199c:	d802      	bhi.n	80019a4 <RCC_GetPCLK1Value+0x78>
	{
		apb1 = 1;
 800199e:	2301      	movs	r3, #1
 80019a0:	72bb      	strb	r3, [r7, #10]
 80019a2:	e005      	b.n	80019b0 <RCC_GetPCLK1Value+0x84>
	}
	else
	{
		apb1 = APB1_PreScalar[temp - 4];
 80019a4:	7a3b      	ldrb	r3, [r7, #8]
 80019a6:	3b04      	subs	r3, #4
 80019a8:	4a0c      	ldr	r2, [pc, #48]	; (80019dc <RCC_GetPCLK1Value+0xb0>)
 80019aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019ae:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = (SystemClk / ahbp) / apb1;
 80019b0:	7afb      	ldrb	r3, [r7, #11]
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80019b8:	7abb      	ldrb	r3, [r7, #10]
 80019ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80019be:	607b      	str	r3, [r7, #4]

	return pclk1;
 80019c0:	687b      	ldr	r3, [r7, #4]
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40023800 	.word	0x40023800
 80019d0:	00f42400 	.word	0x00f42400
 80019d4:	007a1200 	.word	0x007a1200
 80019d8:	20000000 	.word	0x20000000
 80019dc:	20000010 	.word	0x20000010

080019e0 <__errno>:
 80019e0:	4b01      	ldr	r3, [pc, #4]	; (80019e8 <__errno+0x8>)
 80019e2:	6818      	ldr	r0, [r3, #0]
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	20000018 	.word	0x20000018

080019ec <__libc_init_array>:
 80019ec:	b570      	push	{r4, r5, r6, lr}
 80019ee:	4d0d      	ldr	r5, [pc, #52]	; (8001a24 <__libc_init_array+0x38>)
 80019f0:	4c0d      	ldr	r4, [pc, #52]	; (8001a28 <__libc_init_array+0x3c>)
 80019f2:	1b64      	subs	r4, r4, r5
 80019f4:	10a4      	asrs	r4, r4, #2
 80019f6:	2600      	movs	r6, #0
 80019f8:	42a6      	cmp	r6, r4
 80019fa:	d109      	bne.n	8001a10 <__libc_init_array+0x24>
 80019fc:	4d0b      	ldr	r5, [pc, #44]	; (8001a2c <__libc_init_array+0x40>)
 80019fe:	4c0c      	ldr	r4, [pc, #48]	; (8001a30 <__libc_init_array+0x44>)
 8001a00:	f000 fce6 	bl	80023d0 <_init>
 8001a04:	1b64      	subs	r4, r4, r5
 8001a06:	10a4      	asrs	r4, r4, #2
 8001a08:	2600      	movs	r6, #0
 8001a0a:	42a6      	cmp	r6, r4
 8001a0c:	d105      	bne.n	8001a1a <__libc_init_array+0x2e>
 8001a0e:	bd70      	pop	{r4, r5, r6, pc}
 8001a10:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a14:	4798      	blx	r3
 8001a16:	3601      	adds	r6, #1
 8001a18:	e7ee      	b.n	80019f8 <__libc_init_array+0xc>
 8001a1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a1e:	4798      	blx	r3
 8001a20:	3601      	adds	r6, #1
 8001a22:	e7f2      	b.n	8001a0a <__libc_init_array+0x1e>
 8001a24:	080024e0 	.word	0x080024e0
 8001a28:	080024e0 	.word	0x080024e0
 8001a2c:	080024e0 	.word	0x080024e0
 8001a30:	080024e4 	.word	0x080024e4

08001a34 <memset>:
 8001a34:	4402      	add	r2, r0
 8001a36:	4603      	mov	r3, r0
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d100      	bne.n	8001a3e <memset+0xa>
 8001a3c:	4770      	bx	lr
 8001a3e:	f803 1b01 	strb.w	r1, [r3], #1
 8001a42:	e7f9      	b.n	8001a38 <memset+0x4>

08001a44 <_puts_r>:
 8001a44:	b570      	push	{r4, r5, r6, lr}
 8001a46:	460e      	mov	r6, r1
 8001a48:	4605      	mov	r5, r0
 8001a4a:	b118      	cbz	r0, 8001a54 <_puts_r+0x10>
 8001a4c:	6983      	ldr	r3, [r0, #24]
 8001a4e:	b90b      	cbnz	r3, 8001a54 <_puts_r+0x10>
 8001a50:	f000 fa48 	bl	8001ee4 <__sinit>
 8001a54:	69ab      	ldr	r3, [r5, #24]
 8001a56:	68ac      	ldr	r4, [r5, #8]
 8001a58:	b913      	cbnz	r3, 8001a60 <_puts_r+0x1c>
 8001a5a:	4628      	mov	r0, r5
 8001a5c:	f000 fa42 	bl	8001ee4 <__sinit>
 8001a60:	4b2c      	ldr	r3, [pc, #176]	; (8001b14 <_puts_r+0xd0>)
 8001a62:	429c      	cmp	r4, r3
 8001a64:	d120      	bne.n	8001aa8 <_puts_r+0x64>
 8001a66:	686c      	ldr	r4, [r5, #4]
 8001a68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001a6a:	07db      	lsls	r3, r3, #31
 8001a6c:	d405      	bmi.n	8001a7a <_puts_r+0x36>
 8001a6e:	89a3      	ldrh	r3, [r4, #12]
 8001a70:	0598      	lsls	r0, r3, #22
 8001a72:	d402      	bmi.n	8001a7a <_puts_r+0x36>
 8001a74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001a76:	f000 fad3 	bl	8002020 <__retarget_lock_acquire_recursive>
 8001a7a:	89a3      	ldrh	r3, [r4, #12]
 8001a7c:	0719      	lsls	r1, r3, #28
 8001a7e:	d51d      	bpl.n	8001abc <_puts_r+0x78>
 8001a80:	6923      	ldr	r3, [r4, #16]
 8001a82:	b1db      	cbz	r3, 8001abc <_puts_r+0x78>
 8001a84:	3e01      	subs	r6, #1
 8001a86:	68a3      	ldr	r3, [r4, #8]
 8001a88:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	60a3      	str	r3, [r4, #8]
 8001a90:	bb39      	cbnz	r1, 8001ae2 <_puts_r+0x9e>
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	da38      	bge.n	8001b08 <_puts_r+0xc4>
 8001a96:	4622      	mov	r2, r4
 8001a98:	210a      	movs	r1, #10
 8001a9a:	4628      	mov	r0, r5
 8001a9c:	f000 f848 	bl	8001b30 <__swbuf_r>
 8001aa0:	3001      	adds	r0, #1
 8001aa2:	d011      	beq.n	8001ac8 <_puts_r+0x84>
 8001aa4:	250a      	movs	r5, #10
 8001aa6:	e011      	b.n	8001acc <_puts_r+0x88>
 8001aa8:	4b1b      	ldr	r3, [pc, #108]	; (8001b18 <_puts_r+0xd4>)
 8001aaa:	429c      	cmp	r4, r3
 8001aac:	d101      	bne.n	8001ab2 <_puts_r+0x6e>
 8001aae:	68ac      	ldr	r4, [r5, #8]
 8001ab0:	e7da      	b.n	8001a68 <_puts_r+0x24>
 8001ab2:	4b1a      	ldr	r3, [pc, #104]	; (8001b1c <_puts_r+0xd8>)
 8001ab4:	429c      	cmp	r4, r3
 8001ab6:	bf08      	it	eq
 8001ab8:	68ec      	ldreq	r4, [r5, #12]
 8001aba:	e7d5      	b.n	8001a68 <_puts_r+0x24>
 8001abc:	4621      	mov	r1, r4
 8001abe:	4628      	mov	r0, r5
 8001ac0:	f000 f888 	bl	8001bd4 <__swsetup_r>
 8001ac4:	2800      	cmp	r0, #0
 8001ac6:	d0dd      	beq.n	8001a84 <_puts_r+0x40>
 8001ac8:	f04f 35ff 	mov.w	r5, #4294967295
 8001acc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001ace:	07da      	lsls	r2, r3, #31
 8001ad0:	d405      	bmi.n	8001ade <_puts_r+0x9a>
 8001ad2:	89a3      	ldrh	r3, [r4, #12]
 8001ad4:	059b      	lsls	r3, r3, #22
 8001ad6:	d402      	bmi.n	8001ade <_puts_r+0x9a>
 8001ad8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001ada:	f000 faa2 	bl	8002022 <__retarget_lock_release_recursive>
 8001ade:	4628      	mov	r0, r5
 8001ae0:	bd70      	pop	{r4, r5, r6, pc}
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	da04      	bge.n	8001af0 <_puts_r+0xac>
 8001ae6:	69a2      	ldr	r2, [r4, #24]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	dc06      	bgt.n	8001afa <_puts_r+0xb6>
 8001aec:	290a      	cmp	r1, #10
 8001aee:	d004      	beq.n	8001afa <_puts_r+0xb6>
 8001af0:	6823      	ldr	r3, [r4, #0]
 8001af2:	1c5a      	adds	r2, r3, #1
 8001af4:	6022      	str	r2, [r4, #0]
 8001af6:	7019      	strb	r1, [r3, #0]
 8001af8:	e7c5      	b.n	8001a86 <_puts_r+0x42>
 8001afa:	4622      	mov	r2, r4
 8001afc:	4628      	mov	r0, r5
 8001afe:	f000 f817 	bl	8001b30 <__swbuf_r>
 8001b02:	3001      	adds	r0, #1
 8001b04:	d1bf      	bne.n	8001a86 <_puts_r+0x42>
 8001b06:	e7df      	b.n	8001ac8 <_puts_r+0x84>
 8001b08:	6823      	ldr	r3, [r4, #0]
 8001b0a:	250a      	movs	r5, #10
 8001b0c:	1c5a      	adds	r2, r3, #1
 8001b0e:	6022      	str	r2, [r4, #0]
 8001b10:	701d      	strb	r5, [r3, #0]
 8001b12:	e7db      	b.n	8001acc <_puts_r+0x88>
 8001b14:	080024a0 	.word	0x080024a0
 8001b18:	080024c0 	.word	0x080024c0
 8001b1c:	08002480 	.word	0x08002480

08001b20 <puts>:
 8001b20:	4b02      	ldr	r3, [pc, #8]	; (8001b2c <puts+0xc>)
 8001b22:	4601      	mov	r1, r0
 8001b24:	6818      	ldr	r0, [r3, #0]
 8001b26:	f7ff bf8d 	b.w	8001a44 <_puts_r>
 8001b2a:	bf00      	nop
 8001b2c:	20000018 	.word	0x20000018

08001b30 <__swbuf_r>:
 8001b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b32:	460e      	mov	r6, r1
 8001b34:	4614      	mov	r4, r2
 8001b36:	4605      	mov	r5, r0
 8001b38:	b118      	cbz	r0, 8001b42 <__swbuf_r+0x12>
 8001b3a:	6983      	ldr	r3, [r0, #24]
 8001b3c:	b90b      	cbnz	r3, 8001b42 <__swbuf_r+0x12>
 8001b3e:	f000 f9d1 	bl	8001ee4 <__sinit>
 8001b42:	4b21      	ldr	r3, [pc, #132]	; (8001bc8 <__swbuf_r+0x98>)
 8001b44:	429c      	cmp	r4, r3
 8001b46:	d12b      	bne.n	8001ba0 <__swbuf_r+0x70>
 8001b48:	686c      	ldr	r4, [r5, #4]
 8001b4a:	69a3      	ldr	r3, [r4, #24]
 8001b4c:	60a3      	str	r3, [r4, #8]
 8001b4e:	89a3      	ldrh	r3, [r4, #12]
 8001b50:	071a      	lsls	r2, r3, #28
 8001b52:	d52f      	bpl.n	8001bb4 <__swbuf_r+0x84>
 8001b54:	6923      	ldr	r3, [r4, #16]
 8001b56:	b36b      	cbz	r3, 8001bb4 <__swbuf_r+0x84>
 8001b58:	6923      	ldr	r3, [r4, #16]
 8001b5a:	6820      	ldr	r0, [r4, #0]
 8001b5c:	1ac0      	subs	r0, r0, r3
 8001b5e:	6963      	ldr	r3, [r4, #20]
 8001b60:	b2f6      	uxtb	r6, r6
 8001b62:	4283      	cmp	r3, r0
 8001b64:	4637      	mov	r7, r6
 8001b66:	dc04      	bgt.n	8001b72 <__swbuf_r+0x42>
 8001b68:	4621      	mov	r1, r4
 8001b6a:	4628      	mov	r0, r5
 8001b6c:	f000 f926 	bl	8001dbc <_fflush_r>
 8001b70:	bb30      	cbnz	r0, 8001bc0 <__swbuf_r+0x90>
 8001b72:	68a3      	ldr	r3, [r4, #8]
 8001b74:	3b01      	subs	r3, #1
 8001b76:	60a3      	str	r3, [r4, #8]
 8001b78:	6823      	ldr	r3, [r4, #0]
 8001b7a:	1c5a      	adds	r2, r3, #1
 8001b7c:	6022      	str	r2, [r4, #0]
 8001b7e:	701e      	strb	r6, [r3, #0]
 8001b80:	6963      	ldr	r3, [r4, #20]
 8001b82:	3001      	adds	r0, #1
 8001b84:	4283      	cmp	r3, r0
 8001b86:	d004      	beq.n	8001b92 <__swbuf_r+0x62>
 8001b88:	89a3      	ldrh	r3, [r4, #12]
 8001b8a:	07db      	lsls	r3, r3, #31
 8001b8c:	d506      	bpl.n	8001b9c <__swbuf_r+0x6c>
 8001b8e:	2e0a      	cmp	r6, #10
 8001b90:	d104      	bne.n	8001b9c <__swbuf_r+0x6c>
 8001b92:	4621      	mov	r1, r4
 8001b94:	4628      	mov	r0, r5
 8001b96:	f000 f911 	bl	8001dbc <_fflush_r>
 8001b9a:	b988      	cbnz	r0, 8001bc0 <__swbuf_r+0x90>
 8001b9c:	4638      	mov	r0, r7
 8001b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ba0:	4b0a      	ldr	r3, [pc, #40]	; (8001bcc <__swbuf_r+0x9c>)
 8001ba2:	429c      	cmp	r4, r3
 8001ba4:	d101      	bne.n	8001baa <__swbuf_r+0x7a>
 8001ba6:	68ac      	ldr	r4, [r5, #8]
 8001ba8:	e7cf      	b.n	8001b4a <__swbuf_r+0x1a>
 8001baa:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <__swbuf_r+0xa0>)
 8001bac:	429c      	cmp	r4, r3
 8001bae:	bf08      	it	eq
 8001bb0:	68ec      	ldreq	r4, [r5, #12]
 8001bb2:	e7ca      	b.n	8001b4a <__swbuf_r+0x1a>
 8001bb4:	4621      	mov	r1, r4
 8001bb6:	4628      	mov	r0, r5
 8001bb8:	f000 f80c 	bl	8001bd4 <__swsetup_r>
 8001bbc:	2800      	cmp	r0, #0
 8001bbe:	d0cb      	beq.n	8001b58 <__swbuf_r+0x28>
 8001bc0:	f04f 37ff 	mov.w	r7, #4294967295
 8001bc4:	e7ea      	b.n	8001b9c <__swbuf_r+0x6c>
 8001bc6:	bf00      	nop
 8001bc8:	080024a0 	.word	0x080024a0
 8001bcc:	080024c0 	.word	0x080024c0
 8001bd0:	08002480 	.word	0x08002480

08001bd4 <__swsetup_r>:
 8001bd4:	4b32      	ldr	r3, [pc, #200]	; (8001ca0 <__swsetup_r+0xcc>)
 8001bd6:	b570      	push	{r4, r5, r6, lr}
 8001bd8:	681d      	ldr	r5, [r3, #0]
 8001bda:	4606      	mov	r6, r0
 8001bdc:	460c      	mov	r4, r1
 8001bde:	b125      	cbz	r5, 8001bea <__swsetup_r+0x16>
 8001be0:	69ab      	ldr	r3, [r5, #24]
 8001be2:	b913      	cbnz	r3, 8001bea <__swsetup_r+0x16>
 8001be4:	4628      	mov	r0, r5
 8001be6:	f000 f97d 	bl	8001ee4 <__sinit>
 8001bea:	4b2e      	ldr	r3, [pc, #184]	; (8001ca4 <__swsetup_r+0xd0>)
 8001bec:	429c      	cmp	r4, r3
 8001bee:	d10f      	bne.n	8001c10 <__swsetup_r+0x3c>
 8001bf0:	686c      	ldr	r4, [r5, #4]
 8001bf2:	89a3      	ldrh	r3, [r4, #12]
 8001bf4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001bf8:	0719      	lsls	r1, r3, #28
 8001bfa:	d42c      	bmi.n	8001c56 <__swsetup_r+0x82>
 8001bfc:	06dd      	lsls	r5, r3, #27
 8001bfe:	d411      	bmi.n	8001c24 <__swsetup_r+0x50>
 8001c00:	2309      	movs	r3, #9
 8001c02:	6033      	str	r3, [r6, #0]
 8001c04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001c08:	81a3      	strh	r3, [r4, #12]
 8001c0a:	f04f 30ff 	mov.w	r0, #4294967295
 8001c0e:	e03e      	b.n	8001c8e <__swsetup_r+0xba>
 8001c10:	4b25      	ldr	r3, [pc, #148]	; (8001ca8 <__swsetup_r+0xd4>)
 8001c12:	429c      	cmp	r4, r3
 8001c14:	d101      	bne.n	8001c1a <__swsetup_r+0x46>
 8001c16:	68ac      	ldr	r4, [r5, #8]
 8001c18:	e7eb      	b.n	8001bf2 <__swsetup_r+0x1e>
 8001c1a:	4b24      	ldr	r3, [pc, #144]	; (8001cac <__swsetup_r+0xd8>)
 8001c1c:	429c      	cmp	r4, r3
 8001c1e:	bf08      	it	eq
 8001c20:	68ec      	ldreq	r4, [r5, #12]
 8001c22:	e7e6      	b.n	8001bf2 <__swsetup_r+0x1e>
 8001c24:	0758      	lsls	r0, r3, #29
 8001c26:	d512      	bpl.n	8001c4e <__swsetup_r+0x7a>
 8001c28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001c2a:	b141      	cbz	r1, 8001c3e <__swsetup_r+0x6a>
 8001c2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001c30:	4299      	cmp	r1, r3
 8001c32:	d002      	beq.n	8001c3a <__swsetup_r+0x66>
 8001c34:	4630      	mov	r0, r6
 8001c36:	f000 fa59 	bl	80020ec <_free_r>
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	6363      	str	r3, [r4, #52]	; 0x34
 8001c3e:	89a3      	ldrh	r3, [r4, #12]
 8001c40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001c44:	81a3      	strh	r3, [r4, #12]
 8001c46:	2300      	movs	r3, #0
 8001c48:	6063      	str	r3, [r4, #4]
 8001c4a:	6923      	ldr	r3, [r4, #16]
 8001c4c:	6023      	str	r3, [r4, #0]
 8001c4e:	89a3      	ldrh	r3, [r4, #12]
 8001c50:	f043 0308 	orr.w	r3, r3, #8
 8001c54:	81a3      	strh	r3, [r4, #12]
 8001c56:	6923      	ldr	r3, [r4, #16]
 8001c58:	b94b      	cbnz	r3, 8001c6e <__swsetup_r+0x9a>
 8001c5a:	89a3      	ldrh	r3, [r4, #12]
 8001c5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001c60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c64:	d003      	beq.n	8001c6e <__swsetup_r+0x9a>
 8001c66:	4621      	mov	r1, r4
 8001c68:	4630      	mov	r0, r6
 8001c6a:	f000 f9ff 	bl	800206c <__smakebuf_r>
 8001c6e:	89a0      	ldrh	r0, [r4, #12]
 8001c70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001c74:	f010 0301 	ands.w	r3, r0, #1
 8001c78:	d00a      	beq.n	8001c90 <__swsetup_r+0xbc>
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60a3      	str	r3, [r4, #8]
 8001c7e:	6963      	ldr	r3, [r4, #20]
 8001c80:	425b      	negs	r3, r3
 8001c82:	61a3      	str	r3, [r4, #24]
 8001c84:	6923      	ldr	r3, [r4, #16]
 8001c86:	b943      	cbnz	r3, 8001c9a <__swsetup_r+0xc6>
 8001c88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001c8c:	d1ba      	bne.n	8001c04 <__swsetup_r+0x30>
 8001c8e:	bd70      	pop	{r4, r5, r6, pc}
 8001c90:	0781      	lsls	r1, r0, #30
 8001c92:	bf58      	it	pl
 8001c94:	6963      	ldrpl	r3, [r4, #20]
 8001c96:	60a3      	str	r3, [r4, #8]
 8001c98:	e7f4      	b.n	8001c84 <__swsetup_r+0xb0>
 8001c9a:	2000      	movs	r0, #0
 8001c9c:	e7f7      	b.n	8001c8e <__swsetup_r+0xba>
 8001c9e:	bf00      	nop
 8001ca0:	20000018 	.word	0x20000018
 8001ca4:	080024a0 	.word	0x080024a0
 8001ca8:	080024c0 	.word	0x080024c0
 8001cac:	08002480 	.word	0x08002480

08001cb0 <__sflush_r>:
 8001cb0:	898a      	ldrh	r2, [r1, #12]
 8001cb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cb6:	4605      	mov	r5, r0
 8001cb8:	0710      	lsls	r0, r2, #28
 8001cba:	460c      	mov	r4, r1
 8001cbc:	d458      	bmi.n	8001d70 <__sflush_r+0xc0>
 8001cbe:	684b      	ldr	r3, [r1, #4]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	dc05      	bgt.n	8001cd0 <__sflush_r+0x20>
 8001cc4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	dc02      	bgt.n	8001cd0 <__sflush_r+0x20>
 8001cca:	2000      	movs	r0, #0
 8001ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001cd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001cd2:	2e00      	cmp	r6, #0
 8001cd4:	d0f9      	beq.n	8001cca <__sflush_r+0x1a>
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001cdc:	682f      	ldr	r7, [r5, #0]
 8001cde:	602b      	str	r3, [r5, #0]
 8001ce0:	d032      	beq.n	8001d48 <__sflush_r+0x98>
 8001ce2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001ce4:	89a3      	ldrh	r3, [r4, #12]
 8001ce6:	075a      	lsls	r2, r3, #29
 8001ce8:	d505      	bpl.n	8001cf6 <__sflush_r+0x46>
 8001cea:	6863      	ldr	r3, [r4, #4]
 8001cec:	1ac0      	subs	r0, r0, r3
 8001cee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001cf0:	b10b      	cbz	r3, 8001cf6 <__sflush_r+0x46>
 8001cf2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001cf4:	1ac0      	subs	r0, r0, r3
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001cfc:	6a21      	ldr	r1, [r4, #32]
 8001cfe:	4628      	mov	r0, r5
 8001d00:	47b0      	blx	r6
 8001d02:	1c43      	adds	r3, r0, #1
 8001d04:	89a3      	ldrh	r3, [r4, #12]
 8001d06:	d106      	bne.n	8001d16 <__sflush_r+0x66>
 8001d08:	6829      	ldr	r1, [r5, #0]
 8001d0a:	291d      	cmp	r1, #29
 8001d0c:	d82c      	bhi.n	8001d68 <__sflush_r+0xb8>
 8001d0e:	4a2a      	ldr	r2, [pc, #168]	; (8001db8 <__sflush_r+0x108>)
 8001d10:	40ca      	lsrs	r2, r1
 8001d12:	07d6      	lsls	r6, r2, #31
 8001d14:	d528      	bpl.n	8001d68 <__sflush_r+0xb8>
 8001d16:	2200      	movs	r2, #0
 8001d18:	6062      	str	r2, [r4, #4]
 8001d1a:	04d9      	lsls	r1, r3, #19
 8001d1c:	6922      	ldr	r2, [r4, #16]
 8001d1e:	6022      	str	r2, [r4, #0]
 8001d20:	d504      	bpl.n	8001d2c <__sflush_r+0x7c>
 8001d22:	1c42      	adds	r2, r0, #1
 8001d24:	d101      	bne.n	8001d2a <__sflush_r+0x7a>
 8001d26:	682b      	ldr	r3, [r5, #0]
 8001d28:	b903      	cbnz	r3, 8001d2c <__sflush_r+0x7c>
 8001d2a:	6560      	str	r0, [r4, #84]	; 0x54
 8001d2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001d2e:	602f      	str	r7, [r5, #0]
 8001d30:	2900      	cmp	r1, #0
 8001d32:	d0ca      	beq.n	8001cca <__sflush_r+0x1a>
 8001d34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001d38:	4299      	cmp	r1, r3
 8001d3a:	d002      	beq.n	8001d42 <__sflush_r+0x92>
 8001d3c:	4628      	mov	r0, r5
 8001d3e:	f000 f9d5 	bl	80020ec <_free_r>
 8001d42:	2000      	movs	r0, #0
 8001d44:	6360      	str	r0, [r4, #52]	; 0x34
 8001d46:	e7c1      	b.n	8001ccc <__sflush_r+0x1c>
 8001d48:	6a21      	ldr	r1, [r4, #32]
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	4628      	mov	r0, r5
 8001d4e:	47b0      	blx	r6
 8001d50:	1c41      	adds	r1, r0, #1
 8001d52:	d1c7      	bne.n	8001ce4 <__sflush_r+0x34>
 8001d54:	682b      	ldr	r3, [r5, #0]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d0c4      	beq.n	8001ce4 <__sflush_r+0x34>
 8001d5a:	2b1d      	cmp	r3, #29
 8001d5c:	d001      	beq.n	8001d62 <__sflush_r+0xb2>
 8001d5e:	2b16      	cmp	r3, #22
 8001d60:	d101      	bne.n	8001d66 <__sflush_r+0xb6>
 8001d62:	602f      	str	r7, [r5, #0]
 8001d64:	e7b1      	b.n	8001cca <__sflush_r+0x1a>
 8001d66:	89a3      	ldrh	r3, [r4, #12]
 8001d68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d6c:	81a3      	strh	r3, [r4, #12]
 8001d6e:	e7ad      	b.n	8001ccc <__sflush_r+0x1c>
 8001d70:	690f      	ldr	r7, [r1, #16]
 8001d72:	2f00      	cmp	r7, #0
 8001d74:	d0a9      	beq.n	8001cca <__sflush_r+0x1a>
 8001d76:	0793      	lsls	r3, r2, #30
 8001d78:	680e      	ldr	r6, [r1, #0]
 8001d7a:	bf08      	it	eq
 8001d7c:	694b      	ldreq	r3, [r1, #20]
 8001d7e:	600f      	str	r7, [r1, #0]
 8001d80:	bf18      	it	ne
 8001d82:	2300      	movne	r3, #0
 8001d84:	eba6 0807 	sub.w	r8, r6, r7
 8001d88:	608b      	str	r3, [r1, #8]
 8001d8a:	f1b8 0f00 	cmp.w	r8, #0
 8001d8e:	dd9c      	ble.n	8001cca <__sflush_r+0x1a>
 8001d90:	6a21      	ldr	r1, [r4, #32]
 8001d92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001d94:	4643      	mov	r3, r8
 8001d96:	463a      	mov	r2, r7
 8001d98:	4628      	mov	r0, r5
 8001d9a:	47b0      	blx	r6
 8001d9c:	2800      	cmp	r0, #0
 8001d9e:	dc06      	bgt.n	8001dae <__sflush_r+0xfe>
 8001da0:	89a3      	ldrh	r3, [r4, #12]
 8001da2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001da6:	81a3      	strh	r3, [r4, #12]
 8001da8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dac:	e78e      	b.n	8001ccc <__sflush_r+0x1c>
 8001dae:	4407      	add	r7, r0
 8001db0:	eba8 0800 	sub.w	r8, r8, r0
 8001db4:	e7e9      	b.n	8001d8a <__sflush_r+0xda>
 8001db6:	bf00      	nop
 8001db8:	20400001 	.word	0x20400001

08001dbc <_fflush_r>:
 8001dbc:	b538      	push	{r3, r4, r5, lr}
 8001dbe:	690b      	ldr	r3, [r1, #16]
 8001dc0:	4605      	mov	r5, r0
 8001dc2:	460c      	mov	r4, r1
 8001dc4:	b913      	cbnz	r3, 8001dcc <_fflush_r+0x10>
 8001dc6:	2500      	movs	r5, #0
 8001dc8:	4628      	mov	r0, r5
 8001dca:	bd38      	pop	{r3, r4, r5, pc}
 8001dcc:	b118      	cbz	r0, 8001dd6 <_fflush_r+0x1a>
 8001dce:	6983      	ldr	r3, [r0, #24]
 8001dd0:	b90b      	cbnz	r3, 8001dd6 <_fflush_r+0x1a>
 8001dd2:	f000 f887 	bl	8001ee4 <__sinit>
 8001dd6:	4b14      	ldr	r3, [pc, #80]	; (8001e28 <_fflush_r+0x6c>)
 8001dd8:	429c      	cmp	r4, r3
 8001dda:	d11b      	bne.n	8001e14 <_fflush_r+0x58>
 8001ddc:	686c      	ldr	r4, [r5, #4]
 8001dde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d0ef      	beq.n	8001dc6 <_fflush_r+0xa>
 8001de6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001de8:	07d0      	lsls	r0, r2, #31
 8001dea:	d404      	bmi.n	8001df6 <_fflush_r+0x3a>
 8001dec:	0599      	lsls	r1, r3, #22
 8001dee:	d402      	bmi.n	8001df6 <_fflush_r+0x3a>
 8001df0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001df2:	f000 f915 	bl	8002020 <__retarget_lock_acquire_recursive>
 8001df6:	4628      	mov	r0, r5
 8001df8:	4621      	mov	r1, r4
 8001dfa:	f7ff ff59 	bl	8001cb0 <__sflush_r>
 8001dfe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001e00:	07da      	lsls	r2, r3, #31
 8001e02:	4605      	mov	r5, r0
 8001e04:	d4e0      	bmi.n	8001dc8 <_fflush_r+0xc>
 8001e06:	89a3      	ldrh	r3, [r4, #12]
 8001e08:	059b      	lsls	r3, r3, #22
 8001e0a:	d4dd      	bmi.n	8001dc8 <_fflush_r+0xc>
 8001e0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001e0e:	f000 f908 	bl	8002022 <__retarget_lock_release_recursive>
 8001e12:	e7d9      	b.n	8001dc8 <_fflush_r+0xc>
 8001e14:	4b05      	ldr	r3, [pc, #20]	; (8001e2c <_fflush_r+0x70>)
 8001e16:	429c      	cmp	r4, r3
 8001e18:	d101      	bne.n	8001e1e <_fflush_r+0x62>
 8001e1a:	68ac      	ldr	r4, [r5, #8]
 8001e1c:	e7df      	b.n	8001dde <_fflush_r+0x22>
 8001e1e:	4b04      	ldr	r3, [pc, #16]	; (8001e30 <_fflush_r+0x74>)
 8001e20:	429c      	cmp	r4, r3
 8001e22:	bf08      	it	eq
 8001e24:	68ec      	ldreq	r4, [r5, #12]
 8001e26:	e7da      	b.n	8001dde <_fflush_r+0x22>
 8001e28:	080024a0 	.word	0x080024a0
 8001e2c:	080024c0 	.word	0x080024c0
 8001e30:	08002480 	.word	0x08002480

08001e34 <std>:
 8001e34:	2300      	movs	r3, #0
 8001e36:	b510      	push	{r4, lr}
 8001e38:	4604      	mov	r4, r0
 8001e3a:	e9c0 3300 	strd	r3, r3, [r0]
 8001e3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001e42:	6083      	str	r3, [r0, #8]
 8001e44:	8181      	strh	r1, [r0, #12]
 8001e46:	6643      	str	r3, [r0, #100]	; 0x64
 8001e48:	81c2      	strh	r2, [r0, #14]
 8001e4a:	6183      	str	r3, [r0, #24]
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	2208      	movs	r2, #8
 8001e50:	305c      	adds	r0, #92	; 0x5c
 8001e52:	f7ff fdef 	bl	8001a34 <memset>
 8001e56:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <std+0x38>)
 8001e58:	6263      	str	r3, [r4, #36]	; 0x24
 8001e5a:	4b05      	ldr	r3, [pc, #20]	; (8001e70 <std+0x3c>)
 8001e5c:	62a3      	str	r3, [r4, #40]	; 0x28
 8001e5e:	4b05      	ldr	r3, [pc, #20]	; (8001e74 <std+0x40>)
 8001e60:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001e62:	4b05      	ldr	r3, [pc, #20]	; (8001e78 <std+0x44>)
 8001e64:	6224      	str	r4, [r4, #32]
 8001e66:	6323      	str	r3, [r4, #48]	; 0x30
 8001e68:	bd10      	pop	{r4, pc}
 8001e6a:	bf00      	nop
 8001e6c:	08002261 	.word	0x08002261
 8001e70:	08002283 	.word	0x08002283
 8001e74:	080022bb 	.word	0x080022bb
 8001e78:	080022df 	.word	0x080022df

08001e7c <_cleanup_r>:
 8001e7c:	4901      	ldr	r1, [pc, #4]	; (8001e84 <_cleanup_r+0x8>)
 8001e7e:	f000 b8af 	b.w	8001fe0 <_fwalk_reent>
 8001e82:	bf00      	nop
 8001e84:	08001dbd 	.word	0x08001dbd

08001e88 <__sfmoreglue>:
 8001e88:	b570      	push	{r4, r5, r6, lr}
 8001e8a:	1e4a      	subs	r2, r1, #1
 8001e8c:	2568      	movs	r5, #104	; 0x68
 8001e8e:	4355      	muls	r5, r2
 8001e90:	460e      	mov	r6, r1
 8001e92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001e96:	f000 f979 	bl	800218c <_malloc_r>
 8001e9a:	4604      	mov	r4, r0
 8001e9c:	b140      	cbz	r0, 8001eb0 <__sfmoreglue+0x28>
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	e9c0 1600 	strd	r1, r6, [r0]
 8001ea4:	300c      	adds	r0, #12
 8001ea6:	60a0      	str	r0, [r4, #8]
 8001ea8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001eac:	f7ff fdc2 	bl	8001a34 <memset>
 8001eb0:	4620      	mov	r0, r4
 8001eb2:	bd70      	pop	{r4, r5, r6, pc}

08001eb4 <__sfp_lock_acquire>:
 8001eb4:	4801      	ldr	r0, [pc, #4]	; (8001ebc <__sfp_lock_acquire+0x8>)
 8001eb6:	f000 b8b3 	b.w	8002020 <__retarget_lock_acquire_recursive>
 8001eba:	bf00      	nop
 8001ebc:	200000f4 	.word	0x200000f4

08001ec0 <__sfp_lock_release>:
 8001ec0:	4801      	ldr	r0, [pc, #4]	; (8001ec8 <__sfp_lock_release+0x8>)
 8001ec2:	f000 b8ae 	b.w	8002022 <__retarget_lock_release_recursive>
 8001ec6:	bf00      	nop
 8001ec8:	200000f4 	.word	0x200000f4

08001ecc <__sinit_lock_acquire>:
 8001ecc:	4801      	ldr	r0, [pc, #4]	; (8001ed4 <__sinit_lock_acquire+0x8>)
 8001ece:	f000 b8a7 	b.w	8002020 <__retarget_lock_acquire_recursive>
 8001ed2:	bf00      	nop
 8001ed4:	200000ef 	.word	0x200000ef

08001ed8 <__sinit_lock_release>:
 8001ed8:	4801      	ldr	r0, [pc, #4]	; (8001ee0 <__sinit_lock_release+0x8>)
 8001eda:	f000 b8a2 	b.w	8002022 <__retarget_lock_release_recursive>
 8001ede:	bf00      	nop
 8001ee0:	200000ef 	.word	0x200000ef

08001ee4 <__sinit>:
 8001ee4:	b510      	push	{r4, lr}
 8001ee6:	4604      	mov	r4, r0
 8001ee8:	f7ff fff0 	bl	8001ecc <__sinit_lock_acquire>
 8001eec:	69a3      	ldr	r3, [r4, #24]
 8001eee:	b11b      	cbz	r3, 8001ef8 <__sinit+0x14>
 8001ef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ef4:	f7ff bff0 	b.w	8001ed8 <__sinit_lock_release>
 8001ef8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001efc:	6523      	str	r3, [r4, #80]	; 0x50
 8001efe:	4b13      	ldr	r3, [pc, #76]	; (8001f4c <__sinit+0x68>)
 8001f00:	4a13      	ldr	r2, [pc, #76]	; (8001f50 <__sinit+0x6c>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	62a2      	str	r2, [r4, #40]	; 0x28
 8001f06:	42a3      	cmp	r3, r4
 8001f08:	bf04      	itt	eq
 8001f0a:	2301      	moveq	r3, #1
 8001f0c:	61a3      	streq	r3, [r4, #24]
 8001f0e:	4620      	mov	r0, r4
 8001f10:	f000 f820 	bl	8001f54 <__sfp>
 8001f14:	6060      	str	r0, [r4, #4]
 8001f16:	4620      	mov	r0, r4
 8001f18:	f000 f81c 	bl	8001f54 <__sfp>
 8001f1c:	60a0      	str	r0, [r4, #8]
 8001f1e:	4620      	mov	r0, r4
 8001f20:	f000 f818 	bl	8001f54 <__sfp>
 8001f24:	2200      	movs	r2, #0
 8001f26:	60e0      	str	r0, [r4, #12]
 8001f28:	2104      	movs	r1, #4
 8001f2a:	6860      	ldr	r0, [r4, #4]
 8001f2c:	f7ff ff82 	bl	8001e34 <std>
 8001f30:	68a0      	ldr	r0, [r4, #8]
 8001f32:	2201      	movs	r2, #1
 8001f34:	2109      	movs	r1, #9
 8001f36:	f7ff ff7d 	bl	8001e34 <std>
 8001f3a:	68e0      	ldr	r0, [r4, #12]
 8001f3c:	2202      	movs	r2, #2
 8001f3e:	2112      	movs	r1, #18
 8001f40:	f7ff ff78 	bl	8001e34 <std>
 8001f44:	2301      	movs	r3, #1
 8001f46:	61a3      	str	r3, [r4, #24]
 8001f48:	e7d2      	b.n	8001ef0 <__sinit+0xc>
 8001f4a:	bf00      	nop
 8001f4c:	0800247c 	.word	0x0800247c
 8001f50:	08001e7d 	.word	0x08001e7d

08001f54 <__sfp>:
 8001f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f56:	4607      	mov	r7, r0
 8001f58:	f7ff ffac 	bl	8001eb4 <__sfp_lock_acquire>
 8001f5c:	4b1e      	ldr	r3, [pc, #120]	; (8001fd8 <__sfp+0x84>)
 8001f5e:	681e      	ldr	r6, [r3, #0]
 8001f60:	69b3      	ldr	r3, [r6, #24]
 8001f62:	b913      	cbnz	r3, 8001f6a <__sfp+0x16>
 8001f64:	4630      	mov	r0, r6
 8001f66:	f7ff ffbd 	bl	8001ee4 <__sinit>
 8001f6a:	3648      	adds	r6, #72	; 0x48
 8001f6c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001f70:	3b01      	subs	r3, #1
 8001f72:	d503      	bpl.n	8001f7c <__sfp+0x28>
 8001f74:	6833      	ldr	r3, [r6, #0]
 8001f76:	b30b      	cbz	r3, 8001fbc <__sfp+0x68>
 8001f78:	6836      	ldr	r6, [r6, #0]
 8001f7a:	e7f7      	b.n	8001f6c <__sfp+0x18>
 8001f7c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001f80:	b9d5      	cbnz	r5, 8001fb8 <__sfp+0x64>
 8001f82:	4b16      	ldr	r3, [pc, #88]	; (8001fdc <__sfp+0x88>)
 8001f84:	60e3      	str	r3, [r4, #12]
 8001f86:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001f8a:	6665      	str	r5, [r4, #100]	; 0x64
 8001f8c:	f000 f847 	bl	800201e <__retarget_lock_init_recursive>
 8001f90:	f7ff ff96 	bl	8001ec0 <__sfp_lock_release>
 8001f94:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001f98:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001f9c:	6025      	str	r5, [r4, #0]
 8001f9e:	61a5      	str	r5, [r4, #24]
 8001fa0:	2208      	movs	r2, #8
 8001fa2:	4629      	mov	r1, r5
 8001fa4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001fa8:	f7ff fd44 	bl	8001a34 <memset>
 8001fac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001fb0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001fb4:	4620      	mov	r0, r4
 8001fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fb8:	3468      	adds	r4, #104	; 0x68
 8001fba:	e7d9      	b.n	8001f70 <__sfp+0x1c>
 8001fbc:	2104      	movs	r1, #4
 8001fbe:	4638      	mov	r0, r7
 8001fc0:	f7ff ff62 	bl	8001e88 <__sfmoreglue>
 8001fc4:	4604      	mov	r4, r0
 8001fc6:	6030      	str	r0, [r6, #0]
 8001fc8:	2800      	cmp	r0, #0
 8001fca:	d1d5      	bne.n	8001f78 <__sfp+0x24>
 8001fcc:	f7ff ff78 	bl	8001ec0 <__sfp_lock_release>
 8001fd0:	230c      	movs	r3, #12
 8001fd2:	603b      	str	r3, [r7, #0]
 8001fd4:	e7ee      	b.n	8001fb4 <__sfp+0x60>
 8001fd6:	bf00      	nop
 8001fd8:	0800247c 	.word	0x0800247c
 8001fdc:	ffff0001 	.word	0xffff0001

08001fe0 <_fwalk_reent>:
 8001fe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001fe4:	4606      	mov	r6, r0
 8001fe6:	4688      	mov	r8, r1
 8001fe8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001fec:	2700      	movs	r7, #0
 8001fee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001ff2:	f1b9 0901 	subs.w	r9, r9, #1
 8001ff6:	d505      	bpl.n	8002004 <_fwalk_reent+0x24>
 8001ff8:	6824      	ldr	r4, [r4, #0]
 8001ffa:	2c00      	cmp	r4, #0
 8001ffc:	d1f7      	bne.n	8001fee <_fwalk_reent+0xe>
 8001ffe:	4638      	mov	r0, r7
 8002000:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002004:	89ab      	ldrh	r3, [r5, #12]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d907      	bls.n	800201a <_fwalk_reent+0x3a>
 800200a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800200e:	3301      	adds	r3, #1
 8002010:	d003      	beq.n	800201a <_fwalk_reent+0x3a>
 8002012:	4629      	mov	r1, r5
 8002014:	4630      	mov	r0, r6
 8002016:	47c0      	blx	r8
 8002018:	4307      	orrs	r7, r0
 800201a:	3568      	adds	r5, #104	; 0x68
 800201c:	e7e9      	b.n	8001ff2 <_fwalk_reent+0x12>

0800201e <__retarget_lock_init_recursive>:
 800201e:	4770      	bx	lr

08002020 <__retarget_lock_acquire_recursive>:
 8002020:	4770      	bx	lr

08002022 <__retarget_lock_release_recursive>:
 8002022:	4770      	bx	lr

08002024 <__swhatbuf_r>:
 8002024:	b570      	push	{r4, r5, r6, lr}
 8002026:	460e      	mov	r6, r1
 8002028:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800202c:	2900      	cmp	r1, #0
 800202e:	b096      	sub	sp, #88	; 0x58
 8002030:	4614      	mov	r4, r2
 8002032:	461d      	mov	r5, r3
 8002034:	da07      	bge.n	8002046 <__swhatbuf_r+0x22>
 8002036:	2300      	movs	r3, #0
 8002038:	602b      	str	r3, [r5, #0]
 800203a:	89b3      	ldrh	r3, [r6, #12]
 800203c:	061a      	lsls	r2, r3, #24
 800203e:	d410      	bmi.n	8002062 <__swhatbuf_r+0x3e>
 8002040:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002044:	e00e      	b.n	8002064 <__swhatbuf_r+0x40>
 8002046:	466a      	mov	r2, sp
 8002048:	f000 f970 	bl	800232c <_fstat_r>
 800204c:	2800      	cmp	r0, #0
 800204e:	dbf2      	blt.n	8002036 <__swhatbuf_r+0x12>
 8002050:	9a01      	ldr	r2, [sp, #4]
 8002052:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002056:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800205a:	425a      	negs	r2, r3
 800205c:	415a      	adcs	r2, r3
 800205e:	602a      	str	r2, [r5, #0]
 8002060:	e7ee      	b.n	8002040 <__swhatbuf_r+0x1c>
 8002062:	2340      	movs	r3, #64	; 0x40
 8002064:	2000      	movs	r0, #0
 8002066:	6023      	str	r3, [r4, #0]
 8002068:	b016      	add	sp, #88	; 0x58
 800206a:	bd70      	pop	{r4, r5, r6, pc}

0800206c <__smakebuf_r>:
 800206c:	898b      	ldrh	r3, [r1, #12]
 800206e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002070:	079d      	lsls	r5, r3, #30
 8002072:	4606      	mov	r6, r0
 8002074:	460c      	mov	r4, r1
 8002076:	d507      	bpl.n	8002088 <__smakebuf_r+0x1c>
 8002078:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800207c:	6023      	str	r3, [r4, #0]
 800207e:	6123      	str	r3, [r4, #16]
 8002080:	2301      	movs	r3, #1
 8002082:	6163      	str	r3, [r4, #20]
 8002084:	b002      	add	sp, #8
 8002086:	bd70      	pop	{r4, r5, r6, pc}
 8002088:	ab01      	add	r3, sp, #4
 800208a:	466a      	mov	r2, sp
 800208c:	f7ff ffca 	bl	8002024 <__swhatbuf_r>
 8002090:	9900      	ldr	r1, [sp, #0]
 8002092:	4605      	mov	r5, r0
 8002094:	4630      	mov	r0, r6
 8002096:	f000 f879 	bl	800218c <_malloc_r>
 800209a:	b948      	cbnz	r0, 80020b0 <__smakebuf_r+0x44>
 800209c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80020a0:	059a      	lsls	r2, r3, #22
 80020a2:	d4ef      	bmi.n	8002084 <__smakebuf_r+0x18>
 80020a4:	f023 0303 	bic.w	r3, r3, #3
 80020a8:	f043 0302 	orr.w	r3, r3, #2
 80020ac:	81a3      	strh	r3, [r4, #12]
 80020ae:	e7e3      	b.n	8002078 <__smakebuf_r+0xc>
 80020b0:	4b0d      	ldr	r3, [pc, #52]	; (80020e8 <__smakebuf_r+0x7c>)
 80020b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80020b4:	89a3      	ldrh	r3, [r4, #12]
 80020b6:	6020      	str	r0, [r4, #0]
 80020b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020bc:	81a3      	strh	r3, [r4, #12]
 80020be:	9b00      	ldr	r3, [sp, #0]
 80020c0:	6163      	str	r3, [r4, #20]
 80020c2:	9b01      	ldr	r3, [sp, #4]
 80020c4:	6120      	str	r0, [r4, #16]
 80020c6:	b15b      	cbz	r3, 80020e0 <__smakebuf_r+0x74>
 80020c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80020cc:	4630      	mov	r0, r6
 80020ce:	f000 f93f 	bl	8002350 <_isatty_r>
 80020d2:	b128      	cbz	r0, 80020e0 <__smakebuf_r+0x74>
 80020d4:	89a3      	ldrh	r3, [r4, #12]
 80020d6:	f023 0303 	bic.w	r3, r3, #3
 80020da:	f043 0301 	orr.w	r3, r3, #1
 80020de:	81a3      	strh	r3, [r4, #12]
 80020e0:	89a0      	ldrh	r0, [r4, #12]
 80020e2:	4305      	orrs	r5, r0
 80020e4:	81a5      	strh	r5, [r4, #12]
 80020e6:	e7cd      	b.n	8002084 <__smakebuf_r+0x18>
 80020e8:	08001e7d 	.word	0x08001e7d

080020ec <_free_r>:
 80020ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80020ee:	2900      	cmp	r1, #0
 80020f0:	d048      	beq.n	8002184 <_free_r+0x98>
 80020f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80020f6:	9001      	str	r0, [sp, #4]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f1a1 0404 	sub.w	r4, r1, #4
 80020fe:	bfb8      	it	lt
 8002100:	18e4      	addlt	r4, r4, r3
 8002102:	f000 f947 	bl	8002394 <__malloc_lock>
 8002106:	4a20      	ldr	r2, [pc, #128]	; (8002188 <_free_r+0x9c>)
 8002108:	9801      	ldr	r0, [sp, #4]
 800210a:	6813      	ldr	r3, [r2, #0]
 800210c:	4615      	mov	r5, r2
 800210e:	b933      	cbnz	r3, 800211e <_free_r+0x32>
 8002110:	6063      	str	r3, [r4, #4]
 8002112:	6014      	str	r4, [r2, #0]
 8002114:	b003      	add	sp, #12
 8002116:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800211a:	f000 b941 	b.w	80023a0 <__malloc_unlock>
 800211e:	42a3      	cmp	r3, r4
 8002120:	d90b      	bls.n	800213a <_free_r+0x4e>
 8002122:	6821      	ldr	r1, [r4, #0]
 8002124:	1862      	adds	r2, r4, r1
 8002126:	4293      	cmp	r3, r2
 8002128:	bf04      	itt	eq
 800212a:	681a      	ldreq	r2, [r3, #0]
 800212c:	685b      	ldreq	r3, [r3, #4]
 800212e:	6063      	str	r3, [r4, #4]
 8002130:	bf04      	itt	eq
 8002132:	1852      	addeq	r2, r2, r1
 8002134:	6022      	streq	r2, [r4, #0]
 8002136:	602c      	str	r4, [r5, #0]
 8002138:	e7ec      	b.n	8002114 <_free_r+0x28>
 800213a:	461a      	mov	r2, r3
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	b10b      	cbz	r3, 8002144 <_free_r+0x58>
 8002140:	42a3      	cmp	r3, r4
 8002142:	d9fa      	bls.n	800213a <_free_r+0x4e>
 8002144:	6811      	ldr	r1, [r2, #0]
 8002146:	1855      	adds	r5, r2, r1
 8002148:	42a5      	cmp	r5, r4
 800214a:	d10b      	bne.n	8002164 <_free_r+0x78>
 800214c:	6824      	ldr	r4, [r4, #0]
 800214e:	4421      	add	r1, r4
 8002150:	1854      	adds	r4, r2, r1
 8002152:	42a3      	cmp	r3, r4
 8002154:	6011      	str	r1, [r2, #0]
 8002156:	d1dd      	bne.n	8002114 <_free_r+0x28>
 8002158:	681c      	ldr	r4, [r3, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	6053      	str	r3, [r2, #4]
 800215e:	4421      	add	r1, r4
 8002160:	6011      	str	r1, [r2, #0]
 8002162:	e7d7      	b.n	8002114 <_free_r+0x28>
 8002164:	d902      	bls.n	800216c <_free_r+0x80>
 8002166:	230c      	movs	r3, #12
 8002168:	6003      	str	r3, [r0, #0]
 800216a:	e7d3      	b.n	8002114 <_free_r+0x28>
 800216c:	6825      	ldr	r5, [r4, #0]
 800216e:	1961      	adds	r1, r4, r5
 8002170:	428b      	cmp	r3, r1
 8002172:	bf04      	itt	eq
 8002174:	6819      	ldreq	r1, [r3, #0]
 8002176:	685b      	ldreq	r3, [r3, #4]
 8002178:	6063      	str	r3, [r4, #4]
 800217a:	bf04      	itt	eq
 800217c:	1949      	addeq	r1, r1, r5
 800217e:	6021      	streq	r1, [r4, #0]
 8002180:	6054      	str	r4, [r2, #4]
 8002182:	e7c7      	b.n	8002114 <_free_r+0x28>
 8002184:	b003      	add	sp, #12
 8002186:	bd30      	pop	{r4, r5, pc}
 8002188:	200000b4 	.word	0x200000b4

0800218c <_malloc_r>:
 800218c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800218e:	1ccd      	adds	r5, r1, #3
 8002190:	f025 0503 	bic.w	r5, r5, #3
 8002194:	3508      	adds	r5, #8
 8002196:	2d0c      	cmp	r5, #12
 8002198:	bf38      	it	cc
 800219a:	250c      	movcc	r5, #12
 800219c:	2d00      	cmp	r5, #0
 800219e:	4606      	mov	r6, r0
 80021a0:	db01      	blt.n	80021a6 <_malloc_r+0x1a>
 80021a2:	42a9      	cmp	r1, r5
 80021a4:	d903      	bls.n	80021ae <_malloc_r+0x22>
 80021a6:	230c      	movs	r3, #12
 80021a8:	6033      	str	r3, [r6, #0]
 80021aa:	2000      	movs	r0, #0
 80021ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021ae:	f000 f8f1 	bl	8002394 <__malloc_lock>
 80021b2:	4921      	ldr	r1, [pc, #132]	; (8002238 <_malloc_r+0xac>)
 80021b4:	680a      	ldr	r2, [r1, #0]
 80021b6:	4614      	mov	r4, r2
 80021b8:	b99c      	cbnz	r4, 80021e2 <_malloc_r+0x56>
 80021ba:	4f20      	ldr	r7, [pc, #128]	; (800223c <_malloc_r+0xb0>)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	b923      	cbnz	r3, 80021ca <_malloc_r+0x3e>
 80021c0:	4621      	mov	r1, r4
 80021c2:	4630      	mov	r0, r6
 80021c4:	f000 f83c 	bl	8002240 <_sbrk_r>
 80021c8:	6038      	str	r0, [r7, #0]
 80021ca:	4629      	mov	r1, r5
 80021cc:	4630      	mov	r0, r6
 80021ce:	f000 f837 	bl	8002240 <_sbrk_r>
 80021d2:	1c43      	adds	r3, r0, #1
 80021d4:	d123      	bne.n	800221e <_malloc_r+0x92>
 80021d6:	230c      	movs	r3, #12
 80021d8:	6033      	str	r3, [r6, #0]
 80021da:	4630      	mov	r0, r6
 80021dc:	f000 f8e0 	bl	80023a0 <__malloc_unlock>
 80021e0:	e7e3      	b.n	80021aa <_malloc_r+0x1e>
 80021e2:	6823      	ldr	r3, [r4, #0]
 80021e4:	1b5b      	subs	r3, r3, r5
 80021e6:	d417      	bmi.n	8002218 <_malloc_r+0x8c>
 80021e8:	2b0b      	cmp	r3, #11
 80021ea:	d903      	bls.n	80021f4 <_malloc_r+0x68>
 80021ec:	6023      	str	r3, [r4, #0]
 80021ee:	441c      	add	r4, r3
 80021f0:	6025      	str	r5, [r4, #0]
 80021f2:	e004      	b.n	80021fe <_malloc_r+0x72>
 80021f4:	6863      	ldr	r3, [r4, #4]
 80021f6:	42a2      	cmp	r2, r4
 80021f8:	bf0c      	ite	eq
 80021fa:	600b      	streq	r3, [r1, #0]
 80021fc:	6053      	strne	r3, [r2, #4]
 80021fe:	4630      	mov	r0, r6
 8002200:	f000 f8ce 	bl	80023a0 <__malloc_unlock>
 8002204:	f104 000b 	add.w	r0, r4, #11
 8002208:	1d23      	adds	r3, r4, #4
 800220a:	f020 0007 	bic.w	r0, r0, #7
 800220e:	1ac2      	subs	r2, r0, r3
 8002210:	d0cc      	beq.n	80021ac <_malloc_r+0x20>
 8002212:	1a1b      	subs	r3, r3, r0
 8002214:	50a3      	str	r3, [r4, r2]
 8002216:	e7c9      	b.n	80021ac <_malloc_r+0x20>
 8002218:	4622      	mov	r2, r4
 800221a:	6864      	ldr	r4, [r4, #4]
 800221c:	e7cc      	b.n	80021b8 <_malloc_r+0x2c>
 800221e:	1cc4      	adds	r4, r0, #3
 8002220:	f024 0403 	bic.w	r4, r4, #3
 8002224:	42a0      	cmp	r0, r4
 8002226:	d0e3      	beq.n	80021f0 <_malloc_r+0x64>
 8002228:	1a21      	subs	r1, r4, r0
 800222a:	4630      	mov	r0, r6
 800222c:	f000 f808 	bl	8002240 <_sbrk_r>
 8002230:	3001      	adds	r0, #1
 8002232:	d1dd      	bne.n	80021f0 <_malloc_r+0x64>
 8002234:	e7cf      	b.n	80021d6 <_malloc_r+0x4a>
 8002236:	bf00      	nop
 8002238:	200000b4 	.word	0x200000b4
 800223c:	200000b8 	.word	0x200000b8

08002240 <_sbrk_r>:
 8002240:	b538      	push	{r3, r4, r5, lr}
 8002242:	4d06      	ldr	r5, [pc, #24]	; (800225c <_sbrk_r+0x1c>)
 8002244:	2300      	movs	r3, #0
 8002246:	4604      	mov	r4, r0
 8002248:	4608      	mov	r0, r1
 800224a:	602b      	str	r3, [r5, #0]
 800224c:	f7fe fa18 	bl	8000680 <_sbrk>
 8002250:	1c43      	adds	r3, r0, #1
 8002252:	d102      	bne.n	800225a <_sbrk_r+0x1a>
 8002254:	682b      	ldr	r3, [r5, #0]
 8002256:	b103      	cbz	r3, 800225a <_sbrk_r+0x1a>
 8002258:	6023      	str	r3, [r4, #0]
 800225a:	bd38      	pop	{r3, r4, r5, pc}
 800225c:	200000f8 	.word	0x200000f8

08002260 <__sread>:
 8002260:	b510      	push	{r4, lr}
 8002262:	460c      	mov	r4, r1
 8002264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002268:	f000 f8a0 	bl	80023ac <_read_r>
 800226c:	2800      	cmp	r0, #0
 800226e:	bfab      	itete	ge
 8002270:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002272:	89a3      	ldrhlt	r3, [r4, #12]
 8002274:	181b      	addge	r3, r3, r0
 8002276:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800227a:	bfac      	ite	ge
 800227c:	6563      	strge	r3, [r4, #84]	; 0x54
 800227e:	81a3      	strhlt	r3, [r4, #12]
 8002280:	bd10      	pop	{r4, pc}

08002282 <__swrite>:
 8002282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002286:	461f      	mov	r7, r3
 8002288:	898b      	ldrh	r3, [r1, #12]
 800228a:	05db      	lsls	r3, r3, #23
 800228c:	4605      	mov	r5, r0
 800228e:	460c      	mov	r4, r1
 8002290:	4616      	mov	r6, r2
 8002292:	d505      	bpl.n	80022a0 <__swrite+0x1e>
 8002294:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002298:	2302      	movs	r3, #2
 800229a:	2200      	movs	r2, #0
 800229c:	f000 f868 	bl	8002370 <_lseek_r>
 80022a0:	89a3      	ldrh	r3, [r4, #12]
 80022a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80022a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80022aa:	81a3      	strh	r3, [r4, #12]
 80022ac:	4632      	mov	r2, r6
 80022ae:	463b      	mov	r3, r7
 80022b0:	4628      	mov	r0, r5
 80022b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80022b6:	f000 b817 	b.w	80022e8 <_write_r>

080022ba <__sseek>:
 80022ba:	b510      	push	{r4, lr}
 80022bc:	460c      	mov	r4, r1
 80022be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022c2:	f000 f855 	bl	8002370 <_lseek_r>
 80022c6:	1c43      	adds	r3, r0, #1
 80022c8:	89a3      	ldrh	r3, [r4, #12]
 80022ca:	bf15      	itete	ne
 80022cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80022ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80022d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80022d6:	81a3      	strheq	r3, [r4, #12]
 80022d8:	bf18      	it	ne
 80022da:	81a3      	strhne	r3, [r4, #12]
 80022dc:	bd10      	pop	{r4, pc}

080022de <__sclose>:
 80022de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022e2:	f000 b813 	b.w	800230c <_close_r>
	...

080022e8 <_write_r>:
 80022e8:	b538      	push	{r3, r4, r5, lr}
 80022ea:	4d07      	ldr	r5, [pc, #28]	; (8002308 <_write_r+0x20>)
 80022ec:	4604      	mov	r4, r0
 80022ee:	4608      	mov	r0, r1
 80022f0:	4611      	mov	r1, r2
 80022f2:	2200      	movs	r2, #0
 80022f4:	602a      	str	r2, [r5, #0]
 80022f6:	461a      	mov	r2, r3
 80022f8:	f7fe f971 	bl	80005de <_write>
 80022fc:	1c43      	adds	r3, r0, #1
 80022fe:	d102      	bne.n	8002306 <_write_r+0x1e>
 8002300:	682b      	ldr	r3, [r5, #0]
 8002302:	b103      	cbz	r3, 8002306 <_write_r+0x1e>
 8002304:	6023      	str	r3, [r4, #0]
 8002306:	bd38      	pop	{r3, r4, r5, pc}
 8002308:	200000f8 	.word	0x200000f8

0800230c <_close_r>:
 800230c:	b538      	push	{r3, r4, r5, lr}
 800230e:	4d06      	ldr	r5, [pc, #24]	; (8002328 <_close_r+0x1c>)
 8002310:	2300      	movs	r3, #0
 8002312:	4604      	mov	r4, r0
 8002314:	4608      	mov	r0, r1
 8002316:	602b      	str	r3, [r5, #0]
 8002318:	f7fe f97d 	bl	8000616 <_close>
 800231c:	1c43      	adds	r3, r0, #1
 800231e:	d102      	bne.n	8002326 <_close_r+0x1a>
 8002320:	682b      	ldr	r3, [r5, #0]
 8002322:	b103      	cbz	r3, 8002326 <_close_r+0x1a>
 8002324:	6023      	str	r3, [r4, #0]
 8002326:	bd38      	pop	{r3, r4, r5, pc}
 8002328:	200000f8 	.word	0x200000f8

0800232c <_fstat_r>:
 800232c:	b538      	push	{r3, r4, r5, lr}
 800232e:	4d07      	ldr	r5, [pc, #28]	; (800234c <_fstat_r+0x20>)
 8002330:	2300      	movs	r3, #0
 8002332:	4604      	mov	r4, r0
 8002334:	4608      	mov	r0, r1
 8002336:	4611      	mov	r1, r2
 8002338:	602b      	str	r3, [r5, #0]
 800233a:	f7fe f978 	bl	800062e <_fstat>
 800233e:	1c43      	adds	r3, r0, #1
 8002340:	d102      	bne.n	8002348 <_fstat_r+0x1c>
 8002342:	682b      	ldr	r3, [r5, #0]
 8002344:	b103      	cbz	r3, 8002348 <_fstat_r+0x1c>
 8002346:	6023      	str	r3, [r4, #0]
 8002348:	bd38      	pop	{r3, r4, r5, pc}
 800234a:	bf00      	nop
 800234c:	200000f8 	.word	0x200000f8

08002350 <_isatty_r>:
 8002350:	b538      	push	{r3, r4, r5, lr}
 8002352:	4d06      	ldr	r5, [pc, #24]	; (800236c <_isatty_r+0x1c>)
 8002354:	2300      	movs	r3, #0
 8002356:	4604      	mov	r4, r0
 8002358:	4608      	mov	r0, r1
 800235a:	602b      	str	r3, [r5, #0]
 800235c:	f7fe f977 	bl	800064e <_isatty>
 8002360:	1c43      	adds	r3, r0, #1
 8002362:	d102      	bne.n	800236a <_isatty_r+0x1a>
 8002364:	682b      	ldr	r3, [r5, #0]
 8002366:	b103      	cbz	r3, 800236a <_isatty_r+0x1a>
 8002368:	6023      	str	r3, [r4, #0]
 800236a:	bd38      	pop	{r3, r4, r5, pc}
 800236c:	200000f8 	.word	0x200000f8

08002370 <_lseek_r>:
 8002370:	b538      	push	{r3, r4, r5, lr}
 8002372:	4d07      	ldr	r5, [pc, #28]	; (8002390 <_lseek_r+0x20>)
 8002374:	4604      	mov	r4, r0
 8002376:	4608      	mov	r0, r1
 8002378:	4611      	mov	r1, r2
 800237a:	2200      	movs	r2, #0
 800237c:	602a      	str	r2, [r5, #0]
 800237e:	461a      	mov	r2, r3
 8002380:	f7fe f970 	bl	8000664 <_lseek>
 8002384:	1c43      	adds	r3, r0, #1
 8002386:	d102      	bne.n	800238e <_lseek_r+0x1e>
 8002388:	682b      	ldr	r3, [r5, #0]
 800238a:	b103      	cbz	r3, 800238e <_lseek_r+0x1e>
 800238c:	6023      	str	r3, [r4, #0]
 800238e:	bd38      	pop	{r3, r4, r5, pc}
 8002390:	200000f8 	.word	0x200000f8

08002394 <__malloc_lock>:
 8002394:	4801      	ldr	r0, [pc, #4]	; (800239c <__malloc_lock+0x8>)
 8002396:	f7ff be43 	b.w	8002020 <__retarget_lock_acquire_recursive>
 800239a:	bf00      	nop
 800239c:	200000f0 	.word	0x200000f0

080023a0 <__malloc_unlock>:
 80023a0:	4801      	ldr	r0, [pc, #4]	; (80023a8 <__malloc_unlock+0x8>)
 80023a2:	f7ff be3e 	b.w	8002022 <__retarget_lock_release_recursive>
 80023a6:	bf00      	nop
 80023a8:	200000f0 	.word	0x200000f0

080023ac <_read_r>:
 80023ac:	b538      	push	{r3, r4, r5, lr}
 80023ae:	4d07      	ldr	r5, [pc, #28]	; (80023cc <_read_r+0x20>)
 80023b0:	4604      	mov	r4, r0
 80023b2:	4608      	mov	r0, r1
 80023b4:	4611      	mov	r1, r2
 80023b6:	2200      	movs	r2, #0
 80023b8:	602a      	str	r2, [r5, #0]
 80023ba:	461a      	mov	r2, r3
 80023bc:	f7fe f8f2 	bl	80005a4 <_read>
 80023c0:	1c43      	adds	r3, r0, #1
 80023c2:	d102      	bne.n	80023ca <_read_r+0x1e>
 80023c4:	682b      	ldr	r3, [r5, #0]
 80023c6:	b103      	cbz	r3, 80023ca <_read_r+0x1e>
 80023c8:	6023      	str	r3, [r4, #0]
 80023ca:	bd38      	pop	{r3, r4, r5, pc}
 80023cc:	200000f8 	.word	0x200000f8

080023d0 <_init>:
 80023d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023d2:	bf00      	nop
 80023d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023d6:	bc08      	pop	{r3}
 80023d8:	469e      	mov	lr, r3
 80023da:	4770      	bx	lr

080023dc <_fini>:
 80023dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023de:	bf00      	nop
 80023e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023e2:	bc08      	pop	{r3}
 80023e4:	469e      	mov	lr, r3
 80023e6:	4770      	bx	lr
