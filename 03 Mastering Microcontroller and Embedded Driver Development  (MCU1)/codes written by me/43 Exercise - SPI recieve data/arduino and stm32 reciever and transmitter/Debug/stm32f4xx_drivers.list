
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001eb4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08002064  08002064  00012064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002188  08002188  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08002188  08002188  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002188  08002188  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002188  08002188  00012188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800218c  0800218c  0001218c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08002190  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          00000038  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000009c  2000009c  00020064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .debug_info   000035d4  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000009dd  00000000  00000000  00023668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000228  00000000  00000000  00024048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000001d0  00000000  00000000  00024270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003306  00000000  00000000  00024440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000261a  00000000  00000000  00027746  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000bcd6  00000000  00000000  00029d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00035a36  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000fd4  00000000  00000000  00035a8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000064 	.word	0x20000064
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800204c 	.word	0x0800204c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000068 	.word	0x20000068
 80001ec:	0800204c 	.word	0x0800204c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <SPI2_GPIOInits>:
 * PB12 --> SPI2_NSS
 * ALT function mode : 5
 */

void SPI2_GPIOInits(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b084      	sub	sp, #16
 80002a4:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 80002a6:	4b14      	ldr	r3, [pc, #80]	; (80002f8 <SPI2_GPIOInits+0x58>)
 80002a8:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80002aa:	2302      	movs	r3, #2
 80002ac:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 80002ae:	2305      	movs	r3, #5
 80002b0:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80002b2:	2300      	movs	r3, #0
 80002b4:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002b6:	2300      	movs	r3, #0
 80002b8:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002ba:	2302      	movs	r3, #2
 80002bc:	72bb      	strb	r3, [r7, #10]

	// SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 80002be:	230d      	movs	r3, #13
 80002c0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	4618      	mov	r0, r3
 80002c6:	f000 fd7d 	bl	8000dc4 <GPIO_Init>

	// MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 80002ca:	230f      	movs	r3, #15
 80002cc:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002ce:	1d3b      	adds	r3, r7, #4
 80002d0:	4618      	mov	r0, r3
 80002d2:	f000 fd77 	bl	8000dc4 <GPIO_Init>

	// MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 80002d6:	230e      	movs	r3, #14
 80002d8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002da:	1d3b      	adds	r3, r7, #4
 80002dc:	4618      	mov	r0, r3
 80002de:	f000 fd71 	bl	8000dc4 <GPIO_Init>

	// NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 80002e2:	230c      	movs	r3, #12
 80002e4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	4618      	mov	r0, r3
 80002ea:	f000 fd6b 	bl	8000dc4 <GPIO_Init>
}
 80002ee:	bf00      	nop
 80002f0:	3710      	adds	r7, #16
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	40020400 	.word	0x40020400

080002fc <SPI2_Inits>:

void SPI2_Inits()
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b084      	sub	sp, #16
 8000300:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2Handle;

	SPI2Handle.pSPIx = SPI2;
 8000302:	4b0c      	ldr	r3, [pc, #48]	; (8000334 <SPI2_Inits+0x38>)
 8000304:	607b      	str	r3, [r7, #4]
	SPI2Handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000306:	2301      	movs	r3, #1
 8000308:	727b      	strb	r3, [r7, #9]
	SPI2Handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 800030a:	2301      	movs	r3, #1
 800030c:	723b      	strb	r3, [r7, #8]
	SPI2Handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8;	// generates sclk of 8 MHZ
 800030e:	2302      	movs	r3, #2
 8000310:	72bb      	strb	r3, [r7, #10]
	SPI2Handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 8000312:	2300      	movs	r3, #0
 8000314:	72fb      	strb	r3, [r7, #11]
	SPI2Handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 8000316:	2300      	movs	r3, #0
 8000318:	733b      	strb	r3, [r7, #12]
	SPI2Handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 800031a:	2300      	movs	r3, #0
 800031c:	737b      	strb	r3, [r7, #13]
	SPI2Handle.SPIConfig.SPI_SSM = SPI_SSM_DI;	// hardware slave management is enabled for NSS pin
 800031e:	2300      	movs	r3, #0
 8000320:	73bb      	strb	r3, [r7, #14]

	SPI_Init(&SPI2Handle);
 8000322:	1d3b      	adds	r3, r7, #4
 8000324:	4618      	mov	r0, r3
 8000326:	f000 fb8d 	bl	8000a44 <SPI_Init>
}
 800032a:	bf00      	nop
 800032c:	3710      	adds	r7, #16
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	40003800 	.word	0x40003800

08000338 <delay>:

void delay(void)
{
 8000338:	b480      	push	{r7}
 800033a:	b083      	sub	sp, #12
 800033c:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 500000/2; i++);
 800033e:	2300      	movs	r3, #0
 8000340:	607b      	str	r3, [r7, #4]
 8000342:	e002      	b.n	800034a <delay+0x12>
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	3301      	adds	r3, #1
 8000348:	607b      	str	r3, [r7, #4]
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	4a04      	ldr	r2, [pc, #16]	; (8000360 <delay+0x28>)
 800034e:	4293      	cmp	r3, r2
 8000350:	d9f8      	bls.n	8000344 <delay+0xc>
}
 8000352:	bf00      	nop
 8000354:	bf00      	nop
 8000356:	370c      	adds	r7, #12
 8000358:	46bd      	mov	sp, r7
 800035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035e:	4770      	bx	lr
 8000360:	0003d08f 	.word	0x0003d08f

08000364 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b084      	sub	sp, #16
 8000368:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn;

	// this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOA;
 800036a:	4b09      	ldr	r3, [pc, #36]	; (8000390 <GPIO_ButtonInit+0x2c>)
 800036c:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 800036e:	2300      	movs	r3, #0
 8000370:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000372:	2300      	movs	r3, #0
 8000374:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000376:	2302      	movs	r3, #2
 8000378:	72bb      	strb	r3, [r7, #10]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800037a:	2300      	movs	r3, #0
 800037c:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIOBtn);
 800037e:	1d3b      	adds	r3, r7, #4
 8000380:	4618      	mov	r0, r3
 8000382:	f000 fd1f 	bl	8000dc4 <GPIO_Init>
}
 8000386:	bf00      	nop
 8000388:	3710      	adds	r7, #16
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	40020000 	.word	0x40020000

08000394 <SPI_verifyResponse>:

uint8_t SPI_verifyResponse(uint8_t ackbyte)
{
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	4603      	mov	r3, r0
 800039c:	71fb      	strb	r3, [r7, #7]
	if(ackbyte == 0xF5)
 800039e:	79fb      	ldrb	r3, [r7, #7]
 80003a0:	2bf5      	cmp	r3, #245	; 0xf5
 80003a2:	d101      	bne.n	80003a8 <SPI_verifyResponse+0x14>
	{
		// ack
		return 1;
 80003a4:	2301      	movs	r3, #1
 80003a6:	e000      	b.n	80003aa <SPI_verifyResponse+0x16>
	}
	else
	{
		// nack
		return 0;
 80003a8:	2300      	movs	r3, #0
	}
}
 80003aa:	4618      	mov	r0, r3
 80003ac:	370c      	adds	r7, #12
 80003ae:	46bd      	mov	sp, r7
 80003b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b4:	4770      	bx	lr
	...

080003b8 <main>:

int main(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b09e      	sub	sp, #120	; 0x78
 80003bc:	af00      	add	r7, sp, #0
	uint8_t dummy_write = 0xFF;
 80003be:	23ff      	movs	r3, #255	; 0xff
 80003c0:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
	uint8_t dummy_read = 0xFF;
 80003c4:	23ff      	movs	r3, #255	; 0xff
 80003c6:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72

	GPIO_ButtonInit();
 80003ca:	f7ff ffcb 	bl	8000364 <GPIO_ButtonInit>

	// thus function is used to initialize the GPIO pins to behave as SPI2 pins
	SPI2_GPIOInits();
 80003ce:	f7ff ff67 	bl	80002a0 <SPI2_GPIOInits>

	// This function is used to initialize the SPI2 peripheral parameters
	SPI2_Inits();
 80003d2:	f7ff ff93 	bl	80002fc <SPI2_Inits>
	 * making SSOE 1 does NSS output enable.
	 * The NSS pin is automatically managed by the hardware
	 * i.e when SPE = 1, NSS will be pulled to low
	 * and NSS pin will be high when SPE = 0
	 */
	SPI_SSOEConfig(SPI2, ENABLE);
 80003d6:	2101      	movs	r1, #1
 80003d8:	48d1      	ldr	r0, [pc, #836]	; (8000720 <main+0x368>)
 80003da:	f000 fb17 	bl	8000a0c <SPI_SSOEConfig>

	while(1)
	{
		// wait till the button is pressed
		while(!GPIO_ReadFromInputPin(GPIOA,  GPIO_PIN_NO_0));
 80003de:	bf00      	nop
 80003e0:	2100      	movs	r1, #0
 80003e2:	48d0      	ldr	r0, [pc, #832]	; (8000724 <main+0x36c>)
 80003e4:	f000 fe86 	bl	80010f4 <GPIO_ReadFromInputPin>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d0f8      	beq.n	80003e0 <main+0x28>

		// to avoid button de-bouncing related issues 200ms of delay
		delay();
 80003ee:	f7ff ffa3 	bl	8000338 <delay>

		// enable the SPI2 peripheral
		SPI_PeripheralControl(SPI2, ENABLE);
 80003f2:	2101      	movs	r1, #1
 80003f4:	48ca      	ldr	r0, [pc, #808]	; (8000720 <main+0x368>)
 80003f6:	f000 faed 	bl	80009d4 <SPI_PeripheralControl>


		// 1. CMD_LED_CTRL	<pin no(1)>		<value(1)>
		uint8_t commandCode = COMMAND_LED_CTRL;
 80003fa:	2350      	movs	r3, #80	; 0x50
 80003fc:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
		uint8_t ackbyte;
		uint8_t  args[2];

		// send command
		SPI_SendData(SPI2, &commandCode, 1);
 8000400:	f107 0371 	add.w	r3, r7, #113	; 0x71
 8000404:	2201      	movs	r2, #1
 8000406:	4619      	mov	r1, r3
 8000408:	48c5      	ldr	r0, [pc, #788]	; (8000720 <main+0x368>)
 800040a:	f000 fb8a 	bl	8000b22 <SPI_SendData>

		// do dummy read to clear off RXNE
		SPI_RecieveData(SPI2, &dummy_read, 1);
 800040e:	f107 0372 	add.w	r3, r7, #114	; 0x72
 8000412:	2201      	movs	r2, #1
 8000414:	4619      	mov	r1, r3
 8000416:	48c2      	ldr	r0, [pc, #776]	; (8000720 <main+0x368>)
 8000418:	f000 fbb7 	bl	8000b8a <SPI_RecieveData>

		//send some dummy bits (1 byte) to fetch the response from the slave
		SPI_SendData(SPI2, &dummy_write, 1);
 800041c:	f107 0373 	add.w	r3, r7, #115	; 0x73
 8000420:	2201      	movs	r2, #1
 8000422:	4619      	mov	r1, r3
 8000424:	48be      	ldr	r0, [pc, #760]	; (8000720 <main+0x368>)
 8000426:	f000 fb7c 	bl	8000b22 <SPI_SendData>

		// read the ack byte received
		SPI_RecieveData(SPI2, &ackbyte, 1);
 800042a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800042e:	2201      	movs	r2, #1
 8000430:	4619      	mov	r1, r3
 8000432:	48bb      	ldr	r0, [pc, #748]	; (8000720 <main+0x368>)
 8000434:	f000 fba9 	bl	8000b8a <SPI_RecieveData>

		if(SPI_verifyResponse(ackbyte))
 8000438:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800043c:	4618      	mov	r0, r3
 800043e:	f7ff ffa9 	bl	8000394 <SPI_verifyResponse>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d00c      	beq.n	8000462 <main+0xaa>
		{
			// send arguments
			args[0] = LED_PIN;
 8000448:	2309      	movs	r3, #9
 800044a:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
			args[1] = LED_ON;
 800044e:	2301      	movs	r3, #1
 8000450:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d

			// send arguments
			SPI_SendData(SPI2, args, 2);
 8000454:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000458:	2202      	movs	r2, #2
 800045a:	4619      	mov	r1, r3
 800045c:	48b0      	ldr	r0, [pc, #704]	; (8000720 <main+0x368>)
 800045e:	f000 fb60 	bl	8000b22 <SPI_SendData>
		// end of COMMAND_LED_CTRL

		// 2. CMD_SENSOR_READ  <analog pin number(1)>

		// wait till the button is pressed
		while(!GPIO_ReadFromInputPin(GPIOA,  GPIO_PIN_NO_0));
 8000462:	bf00      	nop
 8000464:	2100      	movs	r1, #0
 8000466:	48af      	ldr	r0, [pc, #700]	; (8000724 <main+0x36c>)
 8000468:	f000 fe44 	bl	80010f4 <GPIO_ReadFromInputPin>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d0f8      	beq.n	8000464 <main+0xac>

		// to avoid button de-bouncing related issues 200ms of delay
		delay();
 8000472:	f7ff ff61 	bl	8000338 <delay>

		commandCode = COMMAND_SENSOR_READ;
 8000476:	2351      	movs	r3, #81	; 0x51
 8000478:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71

		// send command
		SPI_SendData(SPI2, &commandCode, 1);
 800047c:	f107 0371 	add.w	r3, r7, #113	; 0x71
 8000480:	2201      	movs	r2, #1
 8000482:	4619      	mov	r1, r3
 8000484:	48a6      	ldr	r0, [pc, #664]	; (8000720 <main+0x368>)
 8000486:	f000 fb4c 	bl	8000b22 <SPI_SendData>

		// do dummy read to clear off RXNE
		SPI_RecieveData(SPI2, &dummy_read, 1);
 800048a:	f107 0372 	add.w	r3, r7, #114	; 0x72
 800048e:	2201      	movs	r2, #1
 8000490:	4619      	mov	r1, r3
 8000492:	48a3      	ldr	r0, [pc, #652]	; (8000720 <main+0x368>)
 8000494:	f000 fb79 	bl	8000b8a <SPI_RecieveData>

		//send some dummy bits (1 byte) to fetch the response from the slave
		SPI_SendData(SPI2, &dummy_write, 1);
 8000498:	f107 0373 	add.w	r3, r7, #115	; 0x73
 800049c:	2201      	movs	r2, #1
 800049e:	4619      	mov	r1, r3
 80004a0:	489f      	ldr	r0, [pc, #636]	; (8000720 <main+0x368>)
 80004a2:	f000 fb3e 	bl	8000b22 <SPI_SendData>

		// read the ack byte received
		SPI_RecieveData(SPI2, &ackbyte, 1);
 80004a6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80004aa:	2201      	movs	r2, #1
 80004ac:	4619      	mov	r1, r3
 80004ae:	489c      	ldr	r0, [pc, #624]	; (8000720 <main+0x368>)
 80004b0:	f000 fb6b 	bl	8000b8a <SPI_RecieveData>

		if(SPI_verifyResponse(ackbyte))
 80004b4:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 80004b8:	4618      	mov	r0, r3
 80004ba:	f7ff ff6b 	bl	8000394 <SPI_verifyResponse>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d026      	beq.n	8000512 <main+0x15a>
		{
			// send arguments
			args[0] = ANALOG_PIN0;
 80004c4:	2300      	movs	r3, #0
 80004c6:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c

			// send arguments
			SPI_SendData(SPI2, args, 1);
 80004ca:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80004ce:	2201      	movs	r2, #1
 80004d0:	4619      	mov	r1, r3
 80004d2:	4893      	ldr	r0, [pc, #588]	; (8000720 <main+0x368>)
 80004d4:	f000 fb25 	bl	8000b22 <SPI_SendData>

			// do dummy read to clear off RXNE
			SPI_RecieveData(SPI2, &dummy_read, 1);
 80004d8:	f107 0372 	add.w	r3, r7, #114	; 0x72
 80004dc:	2201      	movs	r2, #1
 80004de:	4619      	mov	r1, r3
 80004e0:	488f      	ldr	r0, [pc, #572]	; (8000720 <main+0x368>)
 80004e2:	f000 fb52 	bl	8000b8a <SPI_RecieveData>

			// insert some delay so that slave can ready with the data
			delay();
 80004e6:	f7ff ff27 	bl	8000338 <delay>

			//send some dummy bits (1 byte) to fetch the response from the slave
			SPI_SendData(SPI2, &dummy_write, 1);
 80004ea:	f107 0373 	add.w	r3, r7, #115	; 0x73
 80004ee:	2201      	movs	r2, #1
 80004f0:	4619      	mov	r1, r3
 80004f2:	488b      	ldr	r0, [pc, #556]	; (8000720 <main+0x368>)
 80004f4:	f000 fb15 	bl	8000b22 <SPI_SendData>

			uint8_t analog_read;
			SPI_RecieveData(SPI2, &analog_read, 1);
 80004f8:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 80004fc:	2201      	movs	r2, #1
 80004fe:	4619      	mov	r1, r3
 8000500:	4887      	ldr	r0, [pc, #540]	; (8000720 <main+0x368>)
 8000502:	f000 fb42 	bl	8000b8a <SPI_RecieveData>

			printf("sensor read = %d\n",analog_read);
 8000506:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800050a:	4619      	mov	r1, r3
 800050c:	4886      	ldr	r0, [pc, #536]	; (8000728 <main+0x370>)
 800050e:	f000 fe47 	bl	80011a0 <iprintf>


		// 3. CMD_LED_READ  <pin number(1)>

		// wait till the button is pressed
		while(!GPIO_ReadFromInputPin(GPIOA,  GPIO_PIN_NO_0));
 8000512:	bf00      	nop
 8000514:	2100      	movs	r1, #0
 8000516:	4883      	ldr	r0, [pc, #524]	; (8000724 <main+0x36c>)
 8000518:	f000 fdec 	bl	80010f4 <GPIO_ReadFromInputPin>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d0f8      	beq.n	8000514 <main+0x15c>

		// to avoid button de-bouncing related issues 200ms of delay
		delay();
 8000522:	f7ff ff09 	bl	8000338 <delay>

		commandCode = COMMAND_LED_READ;
 8000526:	2352      	movs	r3, #82	; 0x52
 8000528:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71

		// send command
		SPI_SendData(SPI2, &commandCode, 1);
 800052c:	f107 0371 	add.w	r3, r7, #113	; 0x71
 8000530:	2201      	movs	r2, #1
 8000532:	4619      	mov	r1, r3
 8000534:	487a      	ldr	r0, [pc, #488]	; (8000720 <main+0x368>)
 8000536:	f000 faf4 	bl	8000b22 <SPI_SendData>

		// do dummy read to clear off RXNE
		SPI_RecieveData(SPI2, &dummy_read, 1);
 800053a:	f107 0372 	add.w	r3, r7, #114	; 0x72
 800053e:	2201      	movs	r2, #1
 8000540:	4619      	mov	r1, r3
 8000542:	4877      	ldr	r0, [pc, #476]	; (8000720 <main+0x368>)
 8000544:	f000 fb21 	bl	8000b8a <SPI_RecieveData>

		//send some dummy bits (1 byte) to fetch the response from the slave
		SPI_SendData(SPI2, &dummy_write, 1);
 8000548:	f107 0373 	add.w	r3, r7, #115	; 0x73
 800054c:	2201      	movs	r2, #1
 800054e:	4619      	mov	r1, r3
 8000550:	4873      	ldr	r0, [pc, #460]	; (8000720 <main+0x368>)
 8000552:	f000 fae6 	bl	8000b22 <SPI_SendData>

		// read the ack byte received
		SPI_RecieveData(SPI2, &ackbyte, 1);
 8000556:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800055a:	2201      	movs	r2, #1
 800055c:	4619      	mov	r1, r3
 800055e:	4870      	ldr	r0, [pc, #448]	; (8000720 <main+0x368>)
 8000560:	f000 fb13 	bl	8000b8a <SPI_RecieveData>

		if(SPI_verifyResponse(ackbyte))
 8000564:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8000568:	4618      	mov	r0, r3
 800056a:	f7ff ff13 	bl	8000394 <SPI_verifyResponse>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d026      	beq.n	80005c2 <main+0x20a>
		{
			// send arguments
			args[0] = LED_PIN;
 8000574:	2309      	movs	r3, #9
 8000576:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c

			// send arguments
			SPI_SendData(SPI2, args, 1);
 800057a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800057e:	2201      	movs	r2, #1
 8000580:	4619      	mov	r1, r3
 8000582:	4867      	ldr	r0, [pc, #412]	; (8000720 <main+0x368>)
 8000584:	f000 facd 	bl	8000b22 <SPI_SendData>

			// do dummy read to clear off RXNE
			SPI_RecieveData(SPI2, &dummy_read, 1);
 8000588:	f107 0372 	add.w	r3, r7, #114	; 0x72
 800058c:	2201      	movs	r2, #1
 800058e:	4619      	mov	r1, r3
 8000590:	4863      	ldr	r0, [pc, #396]	; (8000720 <main+0x368>)
 8000592:	f000 fafa 	bl	8000b8a <SPI_RecieveData>

			// insert some delay so that slave can ready with the data
			delay();
 8000596:	f7ff fecf 	bl	8000338 <delay>

			//send some dummy bits (1 byte) to fetch the response from the slave
			SPI_SendData(SPI2, &dummy_write, 1);
 800059a:	f107 0373 	add.w	r3, r7, #115	; 0x73
 800059e:	2201      	movs	r2, #1
 80005a0:	4619      	mov	r1, r3
 80005a2:	485f      	ldr	r0, [pc, #380]	; (8000720 <main+0x368>)
 80005a4:	f000 fabd 	bl	8000b22 <SPI_SendData>

			uint8_t led_read;
			SPI_RecieveData(SPI2, &led_read, 1);
 80005a8:	f107 036a 	add.w	r3, r7, #106	; 0x6a
 80005ac:	2201      	movs	r2, #1
 80005ae:	4619      	mov	r1, r3
 80005b0:	485b      	ldr	r0, [pc, #364]	; (8000720 <main+0x368>)
 80005b2:	f000 faea 	bl	8000b8a <SPI_RecieveData>

			printf("led pin read = %d\n",led_read);
 80005b6:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 80005ba:	4619      	mov	r1, r3
 80005bc:	485b      	ldr	r0, [pc, #364]	; (800072c <main+0x374>)
 80005be:	f000 fdef 	bl	80011a0 <iprintf>
		// end of CMD_LED_READ

		// 4. CMD_PRINT  <len(2)>  <message(len)>

		// wait till the button is pressed
		while(!GPIO_ReadFromInputPin(GPIOA,  GPIO_PIN_NO_0));
 80005c2:	bf00      	nop
 80005c4:	2100      	movs	r1, #0
 80005c6:	4857      	ldr	r0, [pc, #348]	; (8000724 <main+0x36c>)
 80005c8:	f000 fd94 	bl	80010f4 <GPIO_ReadFromInputPin>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d0f8      	beq.n	80005c4 <main+0x20c>

		// to avoid button de-bouncing related issues 200ms of delay
		delay();
 80005d2:	f7ff feb1 	bl	8000338 <delay>

		commandCode = COMMAND_PRINT;
 80005d6:	2353      	movs	r3, #83	; 0x53
 80005d8:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71

		// send command
		SPI_SendData(SPI2, &commandCode, 1);
 80005dc:	f107 0371 	add.w	r3, r7, #113	; 0x71
 80005e0:	2201      	movs	r2, #1
 80005e2:	4619      	mov	r1, r3
 80005e4:	484e      	ldr	r0, [pc, #312]	; (8000720 <main+0x368>)
 80005e6:	f000 fa9c 	bl	8000b22 <SPI_SendData>

		// do dummy read to clear off RXNE
		SPI_RecieveData(SPI2, &dummy_read, 1);
 80005ea:	f107 0372 	add.w	r3, r7, #114	; 0x72
 80005ee:	2201      	movs	r2, #1
 80005f0:	4619      	mov	r1, r3
 80005f2:	484b      	ldr	r0, [pc, #300]	; (8000720 <main+0x368>)
 80005f4:	f000 fac9 	bl	8000b8a <SPI_RecieveData>

		//send some dummy bits (1 byte) to fetch the response from the slave
		SPI_SendData(SPI2, &dummy_write, 1);
 80005f8:	f107 0373 	add.w	r3, r7, #115	; 0x73
 80005fc:	2201      	movs	r2, #1
 80005fe:	4619      	mov	r1, r3
 8000600:	4847      	ldr	r0, [pc, #284]	; (8000720 <main+0x368>)
 8000602:	f000 fa8e 	bl	8000b22 <SPI_SendData>

		// read the ack byte received
		SPI_RecieveData(SPI2, &ackbyte, 1);
 8000606:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800060a:	2201      	movs	r2, #1
 800060c:	4619      	mov	r1, r3
 800060e:	4844      	ldr	r0, [pc, #272]	; (8000720 <main+0x368>)
 8000610:	f000 fabb 	bl	8000b8a <SPI_RecieveData>

		if(SPI_verifyResponse(ackbyte))
 8000614:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8000618:	4618      	mov	r0, r3
 800061a:	f7ff febb 	bl	8000394 <SPI_verifyResponse>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d01f      	beq.n	8000664 <main+0x2ac>
		{
			char message[] = "hello , this message is from stm32f407 , I wish you glad that you recieved this message";
 8000624:	4a42      	ldr	r2, [pc, #264]	; (8000730 <main+0x378>)
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	4611      	mov	r1, r2
 800062a:	2258      	movs	r2, #88	; 0x58
 800062c:	4618      	mov	r0, r3
 800062e:	f000 fda1 	bl	8001174 <memcpy>
			// send arguments
			uint8_t message_len = strlen(message);
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	4618      	mov	r0, r3
 8000636:	f7ff fddb 	bl	80001f0 <strlen>
 800063a:	4603      	mov	r3, r0
 800063c:	b2db      	uxtb	r3, r3
 800063e:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69

			// send arguments
			SPI_SendData(SPI2, &message_len, 1);
 8000642:	f107 0369 	add.w	r3, r7, #105	; 0x69
 8000646:	2201      	movs	r2, #1
 8000648:	4619      	mov	r1, r3
 800064a:	4835      	ldr	r0, [pc, #212]	; (8000720 <main+0x368>)
 800064c:	f000 fa69 	bl	8000b22 <SPI_SendData>
			SPI_SendData(SPI2, (uint8_t*)message, strlen(message));
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	4618      	mov	r0, r3
 8000654:	f7ff fdcc 	bl	80001f0 <strlen>
 8000658:	4602      	mov	r2, r0
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	4619      	mov	r1, r3
 800065e:	4830      	ldr	r0, [pc, #192]	; (8000720 <main+0x368>)
 8000660:	f000 fa5f 	bl	8000b22 <SPI_SendData>


		// 5. COMMAND_ID_READ

		// wait till the button is pressed
		while(!GPIO_ReadFromInputPin(GPIOA,  GPIO_PIN_NO_0));
 8000664:	bf00      	nop
 8000666:	2100      	movs	r1, #0
 8000668:	482e      	ldr	r0, [pc, #184]	; (8000724 <main+0x36c>)
 800066a:	f000 fd43 	bl	80010f4 <GPIO_ReadFromInputPin>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d0f8      	beq.n	8000666 <main+0x2ae>

		// to avoid button de-bouncing related issues 200ms of delay
		delay();
 8000674:	f7ff fe60 	bl	8000338 <delay>

		commandCode = COMMAND_ID_READ;
 8000678:	2354      	movs	r3, #84	; 0x54
 800067a:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71

		// send command
		SPI_SendData(SPI2, &commandCode, 1);
 800067e:	f107 0371 	add.w	r3, r7, #113	; 0x71
 8000682:	2201      	movs	r2, #1
 8000684:	4619      	mov	r1, r3
 8000686:	4826      	ldr	r0, [pc, #152]	; (8000720 <main+0x368>)
 8000688:	f000 fa4b 	bl	8000b22 <SPI_SendData>

		// do dummy read to clear off RXNE
		SPI_RecieveData(SPI2, &dummy_read, 1);
 800068c:	f107 0372 	add.w	r3, r7, #114	; 0x72
 8000690:	2201      	movs	r2, #1
 8000692:	4619      	mov	r1, r3
 8000694:	4822      	ldr	r0, [pc, #136]	; (8000720 <main+0x368>)
 8000696:	f000 fa78 	bl	8000b8a <SPI_RecieveData>

		//send some dummy bits (1 byte) to fetch the response from the slave
		SPI_SendData(SPI2, &dummy_write, 1);
 800069a:	f107 0373 	add.w	r3, r7, #115	; 0x73
 800069e:	2201      	movs	r2, #1
 80006a0:	4619      	mov	r1, r3
 80006a2:	481f      	ldr	r0, [pc, #124]	; (8000720 <main+0x368>)
 80006a4:	f000 fa3d 	bl	8000b22 <SPI_SendData>

		// read the ack byte received
		SPI_RecieveData(SPI2, &ackbyte, 1);
 80006a8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80006ac:	2201      	movs	r2, #1
 80006ae:	4619      	mov	r1, r3
 80006b0:	481b      	ldr	r0, [pc, #108]	; (8000720 <main+0x368>)
 80006b2:	f000 fa6a 	bl	8000b8a <SPI_RecieveData>

		if(SPI_verifyResponse(ackbyte))
 80006b6:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff fe6a 	bl	8000394 <SPI_verifyResponse>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d01e      	beq.n	8000704 <main+0x34c>
		{
			char ID[10];
			for(int i = 0; i < 10; i++)
 80006c6:	2300      	movs	r3, #0
 80006c8:	677b      	str	r3, [r7, #116]	; 0x74
 80006ca:	e012      	b.n	80006f2 <main+0x33a>
			{
				//send some dummy bits (10 bytes) to fetch the response from the slave
				SPI_SendData(SPI2, &dummy_write, 1);
 80006cc:	f107 0373 	add.w	r3, r7, #115	; 0x73
 80006d0:	2201      	movs	r2, #1
 80006d2:	4619      	mov	r1, r3
 80006d4:	4812      	ldr	r0, [pc, #72]	; (8000720 <main+0x368>)
 80006d6:	f000 fa24 	bl	8000b22 <SPI_SendData>

				// read the byte received from the ID
				SPI_RecieveData(SPI2, (uint8_t*)&ID[i], 1);
 80006da:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80006de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80006e0:	4413      	add	r3, r2
 80006e2:	2201      	movs	r2, #1
 80006e4:	4619      	mov	r1, r3
 80006e6:	480e      	ldr	r0, [pc, #56]	; (8000720 <main+0x368>)
 80006e8:	f000 fa4f 	bl	8000b8a <SPI_RecieveData>
			for(int i = 0; i < 10; i++)
 80006ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80006ee:	3301      	adds	r3, #1
 80006f0:	677b      	str	r3, [r7, #116]	; 0x74
 80006f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80006f4:	2b09      	cmp	r3, #9
 80006f6:	dde9      	ble.n	80006cc <main+0x314>
			}


			printf("ID = %s\n",ID);
 80006f8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80006fc:	4619      	mov	r1, r3
 80006fe:	480d      	ldr	r0, [pc, #52]	; (8000734 <main+0x37c>)
 8000700:	f000 fd4e 	bl	80011a0 <iprintf>
		}
		// end of COMMAND_ID_READ

		// lets confirm that is not busy
		while(SPI_GetFlagStatus(SPI2, SPI_BSY_FLAG) == SET);
 8000704:	bf00      	nop
 8000706:	2180      	movs	r1, #128	; 0x80
 8000708:	4805      	ldr	r0, [pc, #20]	; (8000720 <main+0x368>)
 800070a:	f000 f9f6 	bl	8000afa <SPI_GetFlagStatus>
 800070e:	4603      	mov	r3, r0
 8000710:	2b01      	cmp	r3, #1
 8000712:	d0f8      	beq.n	8000706 <main+0x34e>

		//Disable the SPI2 peripheral
		SPI_PeripheralControl(SPI2, DISABLE);
 8000714:	2100      	movs	r1, #0
 8000716:	4802      	ldr	r0, [pc, #8]	; (8000720 <main+0x368>)
 8000718:	f000 f95c 	bl	80009d4 <SPI_PeripheralControl>
	{
 800071c:	e65f      	b.n	80003de <main+0x26>
 800071e:	bf00      	nop
 8000720:	40003800 	.word	0x40003800
 8000724:	40020000 	.word	0x40020000
 8000728:	08002064 	.word	0x08002064
 800072c:	08002078 	.word	0x08002078
 8000730:	08002098 	.word	0x08002098
 8000734:	0800208c 	.word	0x0800208c

08000738 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000742:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <ITM_SendChar+0x48>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4a0e      	ldr	r2, [pc, #56]	; (8000780 <ITM_SendChar+0x48>)
 8000748:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800074c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800074e:	4b0d      	ldr	r3, [pc, #52]	; (8000784 <ITM_SendChar+0x4c>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a0c      	ldr	r2, [pc, #48]	; (8000784 <ITM_SendChar+0x4c>)
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800075a:	bf00      	nop
 800075c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	2b00      	cmp	r3, #0
 8000768:	d0f8      	beq.n	800075c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800076a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	6013      	str	r3, [r2, #0]
}
 8000772:	bf00      	nop
 8000774:	370c      	adds	r7, #12
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	e000edfc 	.word	0xe000edfc
 8000784:	e0000e00 	.word	0xe0000e00

08000788 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b086      	sub	sp, #24
 800078c:	af00      	add	r7, sp, #0
 800078e:	60f8      	str	r0, [r7, #12]
 8000790:	60b9      	str	r1, [r7, #8]
 8000792:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]
 8000798:	e00a      	b.n	80007b0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800079a:	f3af 8000 	nop.w
 800079e:	4601      	mov	r1, r0
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	1c5a      	adds	r2, r3, #1
 80007a4:	60ba      	str	r2, [r7, #8]
 80007a6:	b2ca      	uxtb	r2, r1
 80007a8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007aa:	697b      	ldr	r3, [r7, #20]
 80007ac:	3301      	adds	r3, #1
 80007ae:	617b      	str	r3, [r7, #20]
 80007b0:	697a      	ldr	r2, [r7, #20]
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	429a      	cmp	r2, r3
 80007b6:	dbf0      	blt.n	800079a <_read+0x12>
	}

return len;
 80007b8:	687b      	ldr	r3, [r7, #4]
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3718      	adds	r7, #24
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b086      	sub	sp, #24
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	60f8      	str	r0, [r7, #12]
 80007ca:	60b9      	str	r1, [r7, #8]
 80007cc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ce:	2300      	movs	r3, #0
 80007d0:	617b      	str	r3, [r7, #20]
 80007d2:	e009      	b.n	80007e8 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	1c5a      	adds	r2, r3, #1
 80007d8:	60ba      	str	r2, [r7, #8]
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff ffab 	bl	8000738 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007e2:	697b      	ldr	r3, [r7, #20]
 80007e4:	3301      	adds	r3, #1
 80007e6:	617b      	str	r3, [r7, #20]
 80007e8:	697a      	ldr	r2, [r7, #20]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	429a      	cmp	r2, r3
 80007ee:	dbf1      	blt.n	80007d4 <_write+0x12>
	}
	return len;
 80007f0:	687b      	ldr	r3, [r7, #4]
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3718      	adds	r7, #24
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <_close>:

int _close(int file)
{
 80007fa:	b480      	push	{r7}
 80007fc:	b083      	sub	sp, #12
 80007fe:	af00      	add	r7, sp, #0
 8000800:	6078      	str	r0, [r7, #4]
	return -1;
 8000802:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000806:	4618      	mov	r0, r3
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr

08000812 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000812:	b480      	push	{r7}
 8000814:	b083      	sub	sp, #12
 8000816:	af00      	add	r7, sp, #0
 8000818:	6078      	str	r0, [r7, #4]
 800081a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000822:	605a      	str	r2, [r3, #4]
	return 0;
 8000824:	2300      	movs	r3, #0
}
 8000826:	4618      	mov	r0, r3
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr

08000832 <_isatty>:

int _isatty(int file)
{
 8000832:	b480      	push	{r7}
 8000834:	b083      	sub	sp, #12
 8000836:	af00      	add	r7, sp, #0
 8000838:	6078      	str	r0, [r7, #4]
	return 1;
 800083a:	2301      	movs	r3, #1
}
 800083c:	4618      	mov	r0, r3
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr

08000848 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000848:	b480      	push	{r7}
 800084a:	b085      	sub	sp, #20
 800084c:	af00      	add	r7, sp, #0
 800084e:	60f8      	str	r0, [r7, #12]
 8000850:	60b9      	str	r1, [r7, #8]
 8000852:	607a      	str	r2, [r7, #4]
	return 0;
 8000854:	2300      	movs	r3, #0
}
 8000856:	4618      	mov	r0, r3
 8000858:	3714      	adds	r7, #20
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
	...

08000864 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800086c:	4a14      	ldr	r2, [pc, #80]	; (80008c0 <_sbrk+0x5c>)
 800086e:	4b15      	ldr	r3, [pc, #84]	; (80008c4 <_sbrk+0x60>)
 8000870:	1ad3      	subs	r3, r2, r3
 8000872:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000878:	4b13      	ldr	r3, [pc, #76]	; (80008c8 <_sbrk+0x64>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d102      	bne.n	8000886 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000880:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <_sbrk+0x64>)
 8000882:	4a12      	ldr	r2, [pc, #72]	; (80008cc <_sbrk+0x68>)
 8000884:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000886:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <_sbrk+0x64>)
 8000888:	681a      	ldr	r2, [r3, #0]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	4413      	add	r3, r2
 800088e:	693a      	ldr	r2, [r7, #16]
 8000890:	429a      	cmp	r2, r3
 8000892:	d207      	bcs.n	80008a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000894:	f000 fc44 	bl	8001120 <__errno>
 8000898:	4603      	mov	r3, r0
 800089a:	220c      	movs	r2, #12
 800089c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800089e:	f04f 33ff 	mov.w	r3, #4294967295
 80008a2:	e009      	b.n	80008b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008a4:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <_sbrk+0x64>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008aa:	4b07      	ldr	r3, [pc, #28]	; (80008c8 <_sbrk+0x64>)
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	4413      	add	r3, r2
 80008b2:	4a05      	ldr	r2, [pc, #20]	; (80008c8 <_sbrk+0x64>)
 80008b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008b6:	68fb      	ldr	r3, [r7, #12]
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3718      	adds	r7, #24
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20020000 	.word	0x20020000
 80008c4:	00000400 	.word	0x00000400
 80008c8:	20000080 	.word	0x20000080
 80008cc:	200000a0 	.word	0x200000a0

080008d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008d0:	480d      	ldr	r0, [pc, #52]	; (8000908 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008d2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80008d4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008d8:	480c      	ldr	r0, [pc, #48]	; (800090c <LoopForever+0x6>)
  ldr r1, =_edata
 80008da:	490d      	ldr	r1, [pc, #52]	; (8000910 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008dc:	4a0d      	ldr	r2, [pc, #52]	; (8000914 <LoopForever+0xe>)
  movs r3, #0
 80008de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008e0:	e002      	b.n	80008e8 <LoopCopyDataInit>

080008e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008e6:	3304      	adds	r3, #4

080008e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008ec:	d3f9      	bcc.n	80008e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ee:	4a0a      	ldr	r2, [pc, #40]	; (8000918 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008f0:	4c0a      	ldr	r4, [pc, #40]	; (800091c <LoopForever+0x16>)
  movs r3, #0
 80008f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008f4:	e001      	b.n	80008fa <LoopFillZerobss>

080008f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008f8:	3204      	adds	r2, #4

080008fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008fc:	d3fb      	bcc.n	80008f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008fe:	f000 fc15 	bl	800112c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000902:	f7ff fd59 	bl	80003b8 <main>

08000906 <LoopForever>:

LoopForever:
    b LoopForever
 8000906:	e7fe      	b.n	8000906 <LoopForever>
  ldr   r0, =_estack
 8000908:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800090c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000910:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000914:	08002190 	.word	0x08002190
  ldr r2, =_sbss
 8000918:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 800091c:	2000009c 	.word	0x2000009c

08000920 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000920:	e7fe      	b.n	8000920 <ADC_IRQHandler>
	...

08000924 <SPI_PeripheralClockControl>:
 *
 *@Note					-
 *
 */
void SPI_PeripheralClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	460b      	mov	r3, r1
 800092e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000930:	78fb      	ldrb	r3, [r7, #3]
 8000932:	2b01      	cmp	r3, #1
 8000934:	d120      	bne.n	8000978 <SPI_PeripheralClockControl+0x54>
	{
		if(pSPIx == SPI1)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	4a22      	ldr	r2, [pc, #136]	; (80009c4 <SPI_PeripheralClockControl+0xa0>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d106      	bne.n	800094c <SPI_PeripheralClockControl+0x28>
		{
			SPI1_PCLK_EN();
 800093e:	4b22      	ldr	r3, [pc, #136]	; (80009c8 <SPI_PeripheralClockControl+0xa4>)
 8000940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000942:	4a21      	ldr	r2, [pc, #132]	; (80009c8 <SPI_PeripheralClockControl+0xa4>)
 8000944:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000948:	6453      	str	r3, [r2, #68]	; 0x44
		else if(pSPIx == SPI3)
		{
			SPI3_PCLK_DI();
		}
	}
}
 800094a:	e035      	b.n	80009b8 <SPI_PeripheralClockControl+0x94>
		else if(pSPIx == SPI2)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	4a1f      	ldr	r2, [pc, #124]	; (80009cc <SPI_PeripheralClockControl+0xa8>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d106      	bne.n	8000962 <SPI_PeripheralClockControl+0x3e>
			SPI2_PCLK_EN();
 8000954:	4b1c      	ldr	r3, [pc, #112]	; (80009c8 <SPI_PeripheralClockControl+0xa4>)
 8000956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000958:	4a1b      	ldr	r2, [pc, #108]	; (80009c8 <SPI_PeripheralClockControl+0xa4>)
 800095a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800095e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000960:	e02a      	b.n	80009b8 <SPI_PeripheralClockControl+0x94>
		else if(pSPIx == SPI3)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4a1a      	ldr	r2, [pc, #104]	; (80009d0 <SPI_PeripheralClockControl+0xac>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d126      	bne.n	80009b8 <SPI_PeripheralClockControl+0x94>
			SPI3_PCLK_EN();
 800096a:	4b17      	ldr	r3, [pc, #92]	; (80009c8 <SPI_PeripheralClockControl+0xa4>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096e:	4a16      	ldr	r2, [pc, #88]	; (80009c8 <SPI_PeripheralClockControl+0xa4>)
 8000970:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000974:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000976:	e01f      	b.n	80009b8 <SPI_PeripheralClockControl+0x94>
		if(pSPIx == SPI1)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	4a12      	ldr	r2, [pc, #72]	; (80009c4 <SPI_PeripheralClockControl+0xa0>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d106      	bne.n	800098e <SPI_PeripheralClockControl+0x6a>
			SPI1_PCLK_DI();
 8000980:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <SPI_PeripheralClockControl+0xa4>)
 8000982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000984:	4a10      	ldr	r2, [pc, #64]	; (80009c8 <SPI_PeripheralClockControl+0xa4>)
 8000986:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800098a:	6453      	str	r3, [r2, #68]	; 0x44
}
 800098c:	e014      	b.n	80009b8 <SPI_PeripheralClockControl+0x94>
		else if(pSPIx == SPI2)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4a0e      	ldr	r2, [pc, #56]	; (80009cc <SPI_PeripheralClockControl+0xa8>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d106      	bne.n	80009a4 <SPI_PeripheralClockControl+0x80>
			SPI2_PCLK_DI();
 8000996:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <SPI_PeripheralClockControl+0xa4>)
 8000998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099a:	4a0b      	ldr	r2, [pc, #44]	; (80009c8 <SPI_PeripheralClockControl+0xa4>)
 800099c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80009a0:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009a2:	e009      	b.n	80009b8 <SPI_PeripheralClockControl+0x94>
		else if(pSPIx == SPI3)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	4a0a      	ldr	r2, [pc, #40]	; (80009d0 <SPI_PeripheralClockControl+0xac>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d105      	bne.n	80009b8 <SPI_PeripheralClockControl+0x94>
			SPI3_PCLK_DI();
 80009ac:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <SPI_PeripheralClockControl+0xa4>)
 80009ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b0:	4a05      	ldr	r2, [pc, #20]	; (80009c8 <SPI_PeripheralClockControl+0xa4>)
 80009b2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80009b6:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009b8:	bf00      	nop
 80009ba:	370c      	adds	r7, #12
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr
 80009c4:	40013000 	.word	0x40013000
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40003800 	.word	0x40003800
 80009d0:	40003c00 	.word	0x40003c00

080009d4 <SPI_PeripheralControl>:
 *
 *@Note					-
 *
 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	460b      	mov	r3, r1
 80009de:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80009e0:	78fb      	ldrb	r3, [r7, #3]
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d106      	bne.n	80009f4 <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 80009f2:	e005      	b.n	8000a00 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	601a      	str	r2, [r3, #0]
}
 8000a00:	bf00      	nop
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr

08000a0c <SPI_SSOEConfig>:
		pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
	}
}

void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	460b      	mov	r3, r1
 8000a16:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000a18:	78fb      	ldrb	r3, [r7, #3]
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d106      	bne.n	8000a2c <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	f043 0204 	orr.w	r2, r3, #4
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	605a      	str	r2, [r3, #4]
	}
	else
	{
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
	}
}
 8000a2a:	e005      	b.n	8000a38 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	f023 0204 	bic.w	r2, r3, #4
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	605a      	str	r2, [r3, #4]
}
 8000a38:	bf00      	nop
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <SPI_Init>:
 *
 *@Note					-
 *
 */
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
	// peripheral clock enable
	SPI_PeripheralClockControl(pSPIHandle->pSPIx, ENABLE);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	2101      	movs	r1, #1
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff ff66 	bl	8000924 <SPI_PeripheralClockControl>

	// first lets configure the SPI_CR1 register

	uint32_t tempreg = 0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	60fb      	str	r3, [r7, #12]

	// 1. configure the device mode
	tempreg |= (pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	791b      	ldrb	r3, [r3, #4]
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	461a      	mov	r2, r3
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	4313      	orrs	r3, r2
 8000a68:	60fb      	str	r3, [r7, #12]

	// 2. configure the bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	795b      	ldrb	r3, [r3, #5]
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	d104      	bne.n	8000a7c <SPI_Init+0x38>
	{
		//bidi mode should be cleared
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	e014      	b.n	8000aa6 <SPI_Init+0x62>
	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	795b      	ldrb	r3, [r3, #5]
 8000a80:	2b02      	cmp	r3, #2
 8000a82:	d104      	bne.n	8000a8e <SPI_Init+0x4a>
	{
		//bidi mode should be set
		tempreg |= (1 << SPI_CR1_BIDIMODE);
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	e00b      	b.n	8000aa6 <SPI_Init+0x62>
	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	795b      	ldrb	r3, [r3, #5]
 8000a92:	2b03      	cmp	r3, #3
 8000a94:	d107      	bne.n	8000aa6 <SPI_Init+0x62>
	{
		//bidi mode should be cleared
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000a9c:	60fb      	str	r3, [r7, #12]
		//RXONLY bit must be set
		tempreg |= (1 << SPI_CR1_RXONLY);
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000aa4:	60fb      	str	r3, [r7, #12]
	}

	// 3.configure the spi serial clock speed (baud rate)
	tempreg |= (pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	799b      	ldrb	r3, [r3, #6]
 8000aaa:	00db      	lsls	r3, r3, #3
 8000aac:	461a      	mov	r2, r3
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	60fb      	str	r3, [r7, #12]

	// 4. configure the DFF
	tempreg |= (pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	79db      	ldrb	r3, [r3, #7]
 8000ab8:	02db      	lsls	r3, r3, #11
 8000aba:	461a      	mov	r2, r3
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	60fb      	str	r3, [r7, #12]

	// 5. configure the CPOL
	tempreg |= (pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	7a1b      	ldrb	r3, [r3, #8]
 8000ac6:	005b      	lsls	r3, r3, #1
 8000ac8:	461a      	mov	r2, r3
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	4313      	orrs	r3, r2
 8000ace:	60fb      	str	r3, [r7, #12]

	// 6. configure the CPHA
	tempreg |= (pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	7a5b      	ldrb	r3, [r3, #9]
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	60fb      	str	r3, [r7, #12]

	// 7. configure the SSM
	tempreg |= (pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	7a9b      	ldrb	r3, [r3, #10]
 8000ae0:	025b      	lsls	r3, r3, #9
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	60fb      	str	r3, [r7, #12]

	// storing the value in the register
	pSPIHandle->pSPIx->CR1 = tempreg;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	68fa      	ldr	r2, [r7, #12]
 8000af0:	601a      	str	r2, [r3, #0]
}
 8000af2:	bf00      	nop
 8000af4:	3710      	adds	r7, #16
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <SPI_GetFlagStatus>:
		SPI3_REG_RESET();
	}
}

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
 8000afa:	b480      	push	{r7}
 8000afc:	b083      	sub	sp, #12
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
 8000b02:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	689a      	ldr	r2, [r3, #8]
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <SPI_GetFlagStatus+0x1a>
		return FLAG_SET;
 8000b10:	2301      	movs	r3, #1
 8000b12:	e000      	b.n	8000b16 <SPI_GetFlagStatus+0x1c>
	else
		return FLAG_RESET;
 8000b14:	2300      	movs	r3, #0
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr

08000b22 <SPI_SendData>:
 *
 *@Note					- this is a blocking call
 *
 */
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t len)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b084      	sub	sp, #16
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	60f8      	str	r0, [r7, #12]
 8000b2a:	60b9      	str	r1, [r7, #8]
 8000b2c:	607a      	str	r2, [r7, #4]
	while(len > 0)
 8000b2e:	e024      	b.n	8000b7a <SPI_SendData+0x58>
	{
		// 1. wait until TXE is set
		while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);
 8000b30:	bf00      	nop
 8000b32:	2102      	movs	r1, #2
 8000b34:	68f8      	ldr	r0, [r7, #12]
 8000b36:	f7ff ffe0 	bl	8000afa <SPI_GetFlagStatus>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d0f8      	beq.n	8000b32 <SPI_SendData+0x10>

		// 2. check the DFF bit in CR1
		if(pSPIx->CR1 & (1 << SPI_CR1_DFF))
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d00b      	beq.n	8000b64 <SPI_SendData+0x42>
		{
			// 16 BIT DFF
			// 1. load the data in to the DR
			pSPIx->DR = *((uint16_t*)pTxBuffer);
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	881b      	ldrh	r3, [r3, #0]
 8000b50:	461a      	mov	r2, r3
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	60da      	str	r2, [r3, #12]
			(uint16_t*)pTxBuffer++;
 8000b56:	68bb      	ldr	r3, [r7, #8]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	60bb      	str	r3, [r7, #8]
			len -= 2;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	3b02      	subs	r3, #2
 8000b60:	607b      	str	r3, [r7, #4]
 8000b62:	e00a      	b.n	8000b7a <SPI_SendData+0x58>
		}
		else
		{
			// 8 BIT DFF
			pSPIx->DR = *pTxBuffer;
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	461a      	mov	r2, r3
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	60da      	str	r2, [r3, #12]
			pTxBuffer++;
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	3301      	adds	r3, #1
 8000b72:	60bb      	str	r3, [r7, #8]
			len--;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	3b01      	subs	r3, #1
 8000b78:	607b      	str	r3, [r7, #4]
	while(len > 0)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d1d7      	bne.n	8000b30 <SPI_SendData+0xe>
		}
	}
}
 8000b80:	bf00      	nop
 8000b82:	bf00      	nop
 8000b84:	3710      	adds	r7, #16
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <SPI_RecieveData>:
 *
 *@Note					-
 *
 */
void SPI_RecieveData(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t len)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b084      	sub	sp, #16
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	60f8      	str	r0, [r7, #12]
 8000b92:	60b9      	str	r1, [r7, #8]
 8000b94:	607a      	str	r2, [r7, #4]
	while(len > 0)
 8000b96:	e024      	b.n	8000be2 <SPI_RecieveData+0x58>
	{
		// 1. wait until RXE is set
		while(SPI_GetFlagStatus(pSPIx, SPI_RXNE_FLAG) == FLAG_RESET);
 8000b98:	bf00      	nop
 8000b9a:	2101      	movs	r1, #1
 8000b9c:	68f8      	ldr	r0, [r7, #12]
 8000b9e:	f7ff ffac 	bl	8000afa <SPI_GetFlagStatus>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d0f8      	beq.n	8000b9a <SPI_RecieveData+0x10>

		// 2. check the DFF bit in CR1
		if(pSPIx->CR1 & (1 << SPI_CR1_DFF))
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d00b      	beq.n	8000bcc <SPI_RecieveData+0x42>
		{
			// 16 BIT DFF
			// 1. load the data from DR to Rxbuffer address
			*((uint16_t*)pRxBuffer) = pSPIx->DR;
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	b29a      	uxth	r2, r3
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	801a      	strh	r2, [r3, #0]
			(uint16_t*)pRxBuffer++;
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	60bb      	str	r3, [r7, #8]
			len -= 2;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	3b02      	subs	r3, #2
 8000bc8:	607b      	str	r3, [r7, #4]
 8000bca:	e00a      	b.n	8000be2 <SPI_RecieveData+0x58>
		}
		else
		{
			// 8 BIT DFF
			*pRxBuffer = pSPIx->DR;
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	b2da      	uxtb	r2, r3
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	701a      	strb	r2, [r3, #0]
			pRxBuffer++;
 8000bd6:	68bb      	ldr	r3, [r7, #8]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	60bb      	str	r3, [r7, #8]
			len--;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	3b01      	subs	r3, #1
 8000be0:	607b      	str	r3, [r7, #4]
	while(len > 0)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d1d7      	bne.n	8000b98 <SPI_RecieveData+0xe>
		}
	}
}
 8000be8:	bf00      	nop
 8000bea:	bf00      	nop
 8000bec:	3710      	adds	r7, #16
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
	...

08000bf4 <GPIO_PeripheralClockControl>:
 *
 *@Note					- none
 *
 */
void GPIO_PeripheralClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	460b      	mov	r3, r1
 8000bfe:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000c00:	78fb      	ldrb	r3, [r7, #3]
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d162      	bne.n	8000ccc <GPIO_PeripheralClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4a64      	ldr	r2, [pc, #400]	; (8000d9c <GPIO_PeripheralClockControl+0x1a8>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d106      	bne.n	8000c1c <GPIO_PeripheralClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000c0e:	4b64      	ldr	r3, [pc, #400]	; (8000da0 <GPIO_PeripheralClockControl+0x1ac>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a63      	ldr	r2, [pc, #396]	; (8000da0 <GPIO_PeripheralClockControl+0x1ac>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
		else if(pGPIOx == GPIOI)
		{
			GPIOI_PCLK_DI();
		}
	}
}
 8000c1a:	e0b9      	b.n	8000d90 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4a61      	ldr	r2, [pc, #388]	; (8000da4 <GPIO_PeripheralClockControl+0x1b0>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d106      	bne.n	8000c32 <GPIO_PeripheralClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000c24:	4b5e      	ldr	r3, [pc, #376]	; (8000da0 <GPIO_PeripheralClockControl+0x1ac>)
 8000c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c28:	4a5d      	ldr	r2, [pc, #372]	; (8000da0 <GPIO_PeripheralClockControl+0x1ac>)
 8000c2a:	f043 0302 	orr.w	r3, r3, #2
 8000c2e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c30:	e0ae      	b.n	8000d90 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4a5c      	ldr	r2, [pc, #368]	; (8000da8 <GPIO_PeripheralClockControl+0x1b4>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d106      	bne.n	8000c48 <GPIO_PeripheralClockControl+0x54>
			GPIOC_PCLK_EN();
 8000c3a:	4b59      	ldr	r3, [pc, #356]	; (8000da0 <GPIO_PeripheralClockControl+0x1ac>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	4a58      	ldr	r2, [pc, #352]	; (8000da0 <GPIO_PeripheralClockControl+0x1ac>)
 8000c40:	f043 0304 	orr.w	r3, r3, #4
 8000c44:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c46:	e0a3      	b.n	8000d90 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	4a58      	ldr	r2, [pc, #352]	; (8000dac <GPIO_PeripheralClockControl+0x1b8>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d106      	bne.n	8000c5e <GPIO_PeripheralClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000c50:	4b53      	ldr	r3, [pc, #332]	; (8000da0 <GPIO_PeripheralClockControl+0x1ac>)
 8000c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c54:	4a52      	ldr	r2, [pc, #328]	; (8000da0 <GPIO_PeripheralClockControl+0x1ac>)
 8000c56:	f043 0308 	orr.w	r3, r3, #8
 8000c5a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c5c:	e098      	b.n	8000d90 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4a53      	ldr	r2, [pc, #332]	; (8000db0 <GPIO_PeripheralClockControl+0x1bc>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d106      	bne.n	8000c74 <GPIO_PeripheralClockControl+0x80>
			GPIOE_PCLK_EN();
 8000c66:	4b4e      	ldr	r3, [pc, #312]	; (8000da0 <GPIO_PeripheralClockControl+0x1ac>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4a4d      	ldr	r2, [pc, #308]	; (8000da0 <GPIO_PeripheralClockControl+0x1ac>)
 8000c6c:	f043 0310 	orr.w	r3, r3, #16
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c72:	e08d      	b.n	8000d90 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	4a4f      	ldr	r2, [pc, #316]	; (8000db4 <GPIO_PeripheralClockControl+0x1c0>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d106      	bne.n	8000c8a <GPIO_PeripheralClockControl+0x96>
			GPIOF_PCLK_EN();
 8000c7c:	4b48      	ldr	r3, [pc, #288]	; (8000da0 <GPIO_PeripheralClockControl+0x1ac>)
 8000c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c80:	4a47      	ldr	r2, [pc, #284]	; (8000da0 <GPIO_PeripheralClockControl+0x1ac>)
 8000c82:	f043 0320 	orr.w	r3, r3, #32
 8000c86:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c88:	e082      	b.n	8000d90 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4a4a      	ldr	r2, [pc, #296]	; (8000db8 <GPIO_PeripheralClockControl+0x1c4>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d106      	bne.n	8000ca0 <GPIO_PeripheralClockControl+0xac>
			GPIOG_PCLK_EN();
 8000c92:	4b43      	ldr	r3, [pc, #268]	; (8000da0 <GPIO_PeripheralClockControl+0x1ac>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	4a42      	ldr	r2, [pc, #264]	; (8000da0 <GPIO_PeripheralClockControl+0x1ac>)
 8000c98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c9c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c9e:	e077      	b.n	8000d90 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	4a46      	ldr	r2, [pc, #280]	; (8000dbc <GPIO_PeripheralClockControl+0x1c8>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d106      	bne.n	8000cb6 <GPIO_PeripheralClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000ca8:	4b3d      	ldr	r3, [pc, #244]	; (8000da0 <GPIO_PeripheralClockControl+0x1ac>)
 8000caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cac:	4a3c      	ldr	r2, [pc, #240]	; (8000da0 <GPIO_PeripheralClockControl+0x1ac>)
 8000cae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cb2:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000cb4:	e06c      	b.n	8000d90 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4a41      	ldr	r2, [pc, #260]	; (8000dc0 <GPIO_PeripheralClockControl+0x1cc>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d168      	bne.n	8000d90 <GPIO_PeripheralClockControl+0x19c>
			GPIOI_PCLK_EN();
 8000cbe:	4b38      	ldr	r3, [pc, #224]	; (8000da0 <GPIO_PeripheralClockControl+0x1ac>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a37      	ldr	r2, [pc, #220]	; (8000da0 <GPIO_PeripheralClockControl+0x1ac>)
 8000cc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000cca:	e061      	b.n	8000d90 <GPIO_PeripheralClockControl+0x19c>
		if(pGPIOx == GPIOA)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	4a33      	ldr	r2, [pc, #204]	; (8000d9c <GPIO_PeripheralClockControl+0x1a8>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d106      	bne.n	8000ce2 <GPIO_PeripheralClockControl+0xee>
			GPIOA_PCLK_DI();
 8000cd4:	4b32      	ldr	r3, [pc, #200]	; (8000da0 <GPIO_PeripheralClockControl+0x1ac>)
 8000cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd8:	4a31      	ldr	r2, [pc, #196]	; (8000da0 <GPIO_PeripheralClockControl+0x1ac>)
 8000cda:	f023 0301 	bic.w	r3, r3, #1
 8000cde:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ce0:	e056      	b.n	8000d90 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4a2f      	ldr	r2, [pc, #188]	; (8000da4 <GPIO_PeripheralClockControl+0x1b0>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d106      	bne.n	8000cf8 <GPIO_PeripheralClockControl+0x104>
			GPIOB_PCLK_DI();
 8000cea:	4b2d      	ldr	r3, [pc, #180]	; (8000da0 <GPIO_PeripheralClockControl+0x1ac>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4a2c      	ldr	r2, [pc, #176]	; (8000da0 <GPIO_PeripheralClockControl+0x1ac>)
 8000cf0:	f023 0302 	bic.w	r3, r3, #2
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000cf6:	e04b      	b.n	8000d90 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	4a2b      	ldr	r2, [pc, #172]	; (8000da8 <GPIO_PeripheralClockControl+0x1b4>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d106      	bne.n	8000d0e <GPIO_PeripheralClockControl+0x11a>
			GPIOC_PCLK_DI();
 8000d00:	4b27      	ldr	r3, [pc, #156]	; (8000da0 <GPIO_PeripheralClockControl+0x1ac>)
 8000d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d04:	4a26      	ldr	r2, [pc, #152]	; (8000da0 <GPIO_PeripheralClockControl+0x1ac>)
 8000d06:	f023 0304 	bic.w	r3, r3, #4
 8000d0a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d0c:	e040      	b.n	8000d90 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4a26      	ldr	r2, [pc, #152]	; (8000dac <GPIO_PeripheralClockControl+0x1b8>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d106      	bne.n	8000d24 <GPIO_PeripheralClockControl+0x130>
			GPIOD_PCLK_DI();
 8000d16:	4b22      	ldr	r3, [pc, #136]	; (8000da0 <GPIO_PeripheralClockControl+0x1ac>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	4a21      	ldr	r2, [pc, #132]	; (8000da0 <GPIO_PeripheralClockControl+0x1ac>)
 8000d1c:	f023 0308 	bic.w	r3, r3, #8
 8000d20:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d22:	e035      	b.n	8000d90 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	4a22      	ldr	r2, [pc, #136]	; (8000db0 <GPIO_PeripheralClockControl+0x1bc>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d106      	bne.n	8000d3a <GPIO_PeripheralClockControl+0x146>
			GPIOE_PCLK_DI();
 8000d2c:	4b1c      	ldr	r3, [pc, #112]	; (8000da0 <GPIO_PeripheralClockControl+0x1ac>)
 8000d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d30:	4a1b      	ldr	r2, [pc, #108]	; (8000da0 <GPIO_PeripheralClockControl+0x1ac>)
 8000d32:	f023 0310 	bic.w	r3, r3, #16
 8000d36:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d38:	e02a      	b.n	8000d90 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4a1d      	ldr	r2, [pc, #116]	; (8000db4 <GPIO_PeripheralClockControl+0x1c0>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d106      	bne.n	8000d50 <GPIO_PeripheralClockControl+0x15c>
			GPIOF_PCLK_DI();
 8000d42:	4b17      	ldr	r3, [pc, #92]	; (8000da0 <GPIO_PeripheralClockControl+0x1ac>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	4a16      	ldr	r2, [pc, #88]	; (8000da0 <GPIO_PeripheralClockControl+0x1ac>)
 8000d48:	f023 0320 	bic.w	r3, r3, #32
 8000d4c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d4e:	e01f      	b.n	8000d90 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	4a19      	ldr	r2, [pc, #100]	; (8000db8 <GPIO_PeripheralClockControl+0x1c4>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d106      	bne.n	8000d66 <GPIO_PeripheralClockControl+0x172>
			GPIOG_PCLK_DI();
 8000d58:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <GPIO_PeripheralClockControl+0x1ac>)
 8000d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5c:	4a10      	ldr	r2, [pc, #64]	; (8000da0 <GPIO_PeripheralClockControl+0x1ac>)
 8000d5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000d62:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d64:	e014      	b.n	8000d90 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a14      	ldr	r2, [pc, #80]	; (8000dbc <GPIO_PeripheralClockControl+0x1c8>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d106      	bne.n	8000d7c <GPIO_PeripheralClockControl+0x188>
			GPIOH_PCLK_DI();
 8000d6e:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <GPIO_PeripheralClockControl+0x1ac>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a0b      	ldr	r2, [pc, #44]	; (8000da0 <GPIO_PeripheralClockControl+0x1ac>)
 8000d74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d7a:	e009      	b.n	8000d90 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	4a10      	ldr	r2, [pc, #64]	; (8000dc0 <GPIO_PeripheralClockControl+0x1cc>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d105      	bne.n	8000d90 <GPIO_PeripheralClockControl+0x19c>
			GPIOI_PCLK_DI();
 8000d84:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <GPIO_PeripheralClockControl+0x1ac>)
 8000d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d88:	4a05      	ldr	r2, [pc, #20]	; (8000da0 <GPIO_PeripheralClockControl+0x1ac>)
 8000d8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d8e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d90:	bf00      	nop
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	40020000 	.word	0x40020000
 8000da0:	40023800 	.word	0x40023800
 8000da4:	40020400 	.word	0x40020400
 8000da8:	40020800 	.word	0x40020800
 8000dac:	40020c00 	.word	0x40020c00
 8000db0:	40021000 	.word	0x40021000
 8000db4:	40021400 	.word	0x40021400
 8000db8:	40021800 	.word	0x40021800
 8000dbc:	40021c00 	.word	0x40021c00
 8000dc0:	40022000 	.word	0x40022000

08000dc4 <GPIO_Init>:

/*
 * Init and De-init
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0; // temp register
 8000dcc:	2300      	movs	r3, #0
 8000dce:	617b      	str	r3, [r7, #20]

	// enable the peripheral clock
	GPIO_PeripheralClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff ff0c 	bl	8000bf4 <GPIO_PeripheralClockControl>

	// 1. configure the mode of gpio pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	795b      	ldrb	r3, [r3, #5]
 8000de0:	2b03      	cmp	r3, #3
 8000de2:	d820      	bhi.n	8000e26 <GPIO_Init+0x62>
	{
		// the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	795b      	ldrb	r3, [r3, #5]
 8000de8:	461a      	mov	r2, r3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	791b      	ldrb	r3, [r3, #4]
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clear
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	791b      	ldrb	r3, [r3, #4]
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	2103      	movs	r1, #3
 8000e04:	fa01 f303 	lsl.w	r3, r1, r3
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	400a      	ands	r2, r1
 8000e12:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;	// setting
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	6819      	ldr	r1, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	697a      	ldr	r2, [r7, #20]
 8000e20:	430a      	orrs	r2, r1
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	e0c1      	b.n	8000faa <GPIO_Init+0x1e6>

	}
	else
	{
		// this part will code later (interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	795b      	ldrb	r3, [r3, #5]
 8000e2a:	2b04      	cmp	r3, #4
 8000e2c:	d117      	bne.n	8000e5e <GPIO_Init+0x9a>
		{
			// 1. configure the FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000e2e:	4b47      	ldr	r3, [pc, #284]	; (8000f4c <GPIO_Init+0x188>)
 8000e30:	68db      	ldr	r3, [r3, #12]
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	7912      	ldrb	r2, [r2, #4]
 8000e36:	4611      	mov	r1, r2
 8000e38:	2201      	movs	r2, #1
 8000e3a:	408a      	lsls	r2, r1
 8000e3c:	4611      	mov	r1, r2
 8000e3e:	4a43      	ldr	r2, [pc, #268]	; (8000f4c <GPIO_Init+0x188>)
 8000e40:	430b      	orrs	r3, r1
 8000e42:	60d3      	str	r3, [r2, #12]
			// Clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000e44:	4b41      	ldr	r3, [pc, #260]	; (8000f4c <GPIO_Init+0x188>)
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	687a      	ldr	r2, [r7, #4]
 8000e4a:	7912      	ldrb	r2, [r2, #4]
 8000e4c:	4611      	mov	r1, r2
 8000e4e:	2201      	movs	r2, #1
 8000e50:	408a      	lsls	r2, r1
 8000e52:	43d2      	mvns	r2, r2
 8000e54:	4611      	mov	r1, r2
 8000e56:	4a3d      	ldr	r2, [pc, #244]	; (8000f4c <GPIO_Init+0x188>)
 8000e58:	400b      	ands	r3, r1
 8000e5a:	6093      	str	r3, [r2, #8]
 8000e5c:	e035      	b.n	8000eca <GPIO_Init+0x106>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	795b      	ldrb	r3, [r3, #5]
 8000e62:	2b05      	cmp	r3, #5
 8000e64:	d117      	bne.n	8000e96 <GPIO_Init+0xd2>
		{
			// 1. configure the RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000e66:	4b39      	ldr	r3, [pc, #228]	; (8000f4c <GPIO_Init+0x188>)
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	7912      	ldrb	r2, [r2, #4]
 8000e6e:	4611      	mov	r1, r2
 8000e70:	2201      	movs	r2, #1
 8000e72:	408a      	lsls	r2, r1
 8000e74:	4611      	mov	r1, r2
 8000e76:	4a35      	ldr	r2, [pc, #212]	; (8000f4c <GPIO_Init+0x188>)
 8000e78:	430b      	orrs	r3, r1
 8000e7a:	6093      	str	r3, [r2, #8]
			// Clear the corresponding FTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000e7c:	4b33      	ldr	r3, [pc, #204]	; (8000f4c <GPIO_Init+0x188>)
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	687a      	ldr	r2, [r7, #4]
 8000e82:	7912      	ldrb	r2, [r2, #4]
 8000e84:	4611      	mov	r1, r2
 8000e86:	2201      	movs	r2, #1
 8000e88:	408a      	lsls	r2, r1
 8000e8a:	43d2      	mvns	r2, r2
 8000e8c:	4611      	mov	r1, r2
 8000e8e:	4a2f      	ldr	r2, [pc, #188]	; (8000f4c <GPIO_Init+0x188>)
 8000e90:	400b      	ands	r3, r1
 8000e92:	60d3      	str	r3, [r2, #12]
 8000e94:	e019      	b.n	8000eca <GPIO_Init+0x106>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	795b      	ldrb	r3, [r3, #5]
 8000e9a:	2b06      	cmp	r3, #6
 8000e9c:	d115      	bne.n	8000eca <GPIO_Init+0x106>
		{
			// 1. configure both FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000e9e:	4b2b      	ldr	r3, [pc, #172]	; (8000f4c <GPIO_Init+0x188>)
 8000ea0:	68db      	ldr	r3, [r3, #12]
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	7912      	ldrb	r2, [r2, #4]
 8000ea6:	4611      	mov	r1, r2
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	408a      	lsls	r2, r1
 8000eac:	4611      	mov	r1, r2
 8000eae:	4a27      	ldr	r2, [pc, #156]	; (8000f4c <GPIO_Init+0x188>)
 8000eb0:	430b      	orrs	r3, r1
 8000eb2:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000eb4:	4b25      	ldr	r3, [pc, #148]	; (8000f4c <GPIO_Init+0x188>)
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	7912      	ldrb	r2, [r2, #4]
 8000ebc:	4611      	mov	r1, r2
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	408a      	lsls	r2, r1
 8000ec2:	4611      	mov	r1, r2
 8000ec4:	4a21      	ldr	r2, [pc, #132]	; (8000f4c <GPIO_Init+0x188>)
 8000ec6:	430b      	orrs	r3, r1
 8000ec8:	6093      	str	r3, [r2, #8]
		}

		// 2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	791b      	ldrb	r3, [r3, #4]
 8000ece:	089b      	lsrs	r3, r3, #2
 8000ed0:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	791b      	ldrb	r3, [r3, #4]
 8000ed6:	f003 0303 	and.w	r3, r3, #3
 8000eda:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a1b      	ldr	r2, [pc, #108]	; (8000f50 <GPIO_Init+0x18c>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d044      	beq.n	8000f70 <GPIO_Init+0x1ac>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a1a      	ldr	r2, [pc, #104]	; (8000f54 <GPIO_Init+0x190>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d02b      	beq.n	8000f48 <GPIO_Init+0x184>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a18      	ldr	r2, [pc, #96]	; (8000f58 <GPIO_Init+0x194>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d024      	beq.n	8000f44 <GPIO_Init+0x180>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a17      	ldr	r2, [pc, #92]	; (8000f5c <GPIO_Init+0x198>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d01d      	beq.n	8000f40 <GPIO_Init+0x17c>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a15      	ldr	r2, [pc, #84]	; (8000f60 <GPIO_Init+0x19c>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d016      	beq.n	8000f3c <GPIO_Init+0x178>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a14      	ldr	r2, [pc, #80]	; (8000f64 <GPIO_Init+0x1a0>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d00f      	beq.n	8000f38 <GPIO_Init+0x174>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a12      	ldr	r2, [pc, #72]	; (8000f68 <GPIO_Init+0x1a4>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d008      	beq.n	8000f34 <GPIO_Init+0x170>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a11      	ldr	r2, [pc, #68]	; (8000f6c <GPIO_Init+0x1a8>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d101      	bne.n	8000f30 <GPIO_Init+0x16c>
 8000f2c:	2307      	movs	r3, #7
 8000f2e:	e020      	b.n	8000f72 <GPIO_Init+0x1ae>
 8000f30:	2308      	movs	r3, #8
 8000f32:	e01e      	b.n	8000f72 <GPIO_Init+0x1ae>
 8000f34:	2306      	movs	r3, #6
 8000f36:	e01c      	b.n	8000f72 <GPIO_Init+0x1ae>
 8000f38:	2305      	movs	r3, #5
 8000f3a:	e01a      	b.n	8000f72 <GPIO_Init+0x1ae>
 8000f3c:	2304      	movs	r3, #4
 8000f3e:	e018      	b.n	8000f72 <GPIO_Init+0x1ae>
 8000f40:	2303      	movs	r3, #3
 8000f42:	e016      	b.n	8000f72 <GPIO_Init+0x1ae>
 8000f44:	2302      	movs	r3, #2
 8000f46:	e014      	b.n	8000f72 <GPIO_Init+0x1ae>
 8000f48:	2301      	movs	r3, #1
 8000f4a:	e012      	b.n	8000f72 <GPIO_Init+0x1ae>
 8000f4c:	40013c00 	.word	0x40013c00
 8000f50:	40020000 	.word	0x40020000
 8000f54:	40020400 	.word	0x40020400
 8000f58:	40020800 	.word	0x40020800
 8000f5c:	40020c00 	.word	0x40020c00
 8000f60:	40021000 	.word	0x40021000
 8000f64:	40021400 	.word	0x40021400
 8000f68:	40021800 	.word	0x40021800
 8000f6c:	40021c00 	.word	0x40021c00
 8000f70:	2300      	movs	r3, #0
 8000f72:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000f74:	4b5c      	ldr	r3, [pc, #368]	; (80010e8 <GPIO_Init+0x324>)
 8000f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f78:	4a5b      	ldr	r2, [pc, #364]	; (80010e8 <GPIO_Init+0x324>)
 8000f7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f7e:	6453      	str	r3, [r2, #68]	; 0x44
		SYS_CFG->EXTICR[temp1] = portcode << (temp2 * 4);
 8000f80:	7c7a      	ldrb	r2, [r7, #17]
 8000f82:	7cbb      	ldrb	r3, [r7, #18]
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	fa02 f103 	lsl.w	r1, r2, r3
 8000f8a:	4a58      	ldr	r2, [pc, #352]	; (80010ec <GPIO_Init+0x328>)
 8000f8c:	7cfb      	ldrb	r3, [r7, #19]
 8000f8e:	3302      	adds	r3, #2
 8000f90:	f842 1023 	str.w	r1, [r2, r3, lsl #2]


		// 3. enable the exti interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000f94:	4b56      	ldr	r3, [pc, #344]	; (80010f0 <GPIO_Init+0x32c>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	687a      	ldr	r2, [r7, #4]
 8000f9a:	7912      	ldrb	r2, [r2, #4]
 8000f9c:	4611      	mov	r1, r2
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	408a      	lsls	r2, r1
 8000fa2:	4611      	mov	r1, r2
 8000fa4:	4a52      	ldr	r2, [pc, #328]	; (80010f0 <GPIO_Init+0x32c>)
 8000fa6:	430b      	orrs	r3, r1
 8000fa8:	6013      	str	r3, [r2, #0]
	}

	// 2. configure the speed
	temp = 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	799b      	ldrb	r3, [r3, #6]
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	791b      	ldrb	r3, [r3, #4]
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clear
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	689a      	ldr	r2, [r3, #8]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	791b      	ldrb	r3, [r3, #4]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	2103      	movs	r1, #3
 8000fce:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	400a      	ands	r2, r1
 8000fdc:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;	// setting
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	6899      	ldr	r1, [r3, #8]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	697a      	ldr	r2, [r7, #20]
 8000fea:	430a      	orrs	r2, r1
 8000fec:	609a      	str	r2, [r3, #8]

	// 3. configure the pupd settings
	temp = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	79db      	ldrb	r3, [r3, #7]
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	791b      	ldrb	r3, [r3, #4]
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clear
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	68da      	ldr	r2, [r3, #12]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	791b      	ldrb	r3, [r3, #4]
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	2103      	movs	r1, #3
 8001012:	fa01 f303 	lsl.w	r3, r1, r3
 8001016:	43db      	mvns	r3, r3
 8001018:	4619      	mov	r1, r3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	400a      	ands	r2, r1
 8001020:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;	// setting
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	68d9      	ldr	r1, [r3, #12]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	697a      	ldr	r2, [r7, #20]
 800102e:	430a      	orrs	r2, r1
 8001030:	60da      	str	r2, [r3, #12]


	// 4. configure the optype
	temp = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	7a1b      	ldrb	r3, [r3, #8]
 800103a:	461a      	mov	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	791b      	ldrb	r3, [r3, #4]
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x01 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clear
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	685a      	ldr	r2, [r3, #4]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	791b      	ldrb	r3, [r3, #4]
 8001050:	4619      	mov	r1, r3
 8001052:	2301      	movs	r3, #1
 8001054:	408b      	lsls	r3, r1
 8001056:	43db      	mvns	r3, r3
 8001058:	4619      	mov	r1, r3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	400a      	ands	r2, r1
 8001060:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;	// setting
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	6859      	ldr	r1, [r3, #4]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	697a      	ldr	r2, [r7, #20]
 800106e:	430a      	orrs	r2, r1
 8001070:	605a      	str	r2, [r3, #4]

	// 5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	795b      	ldrb	r3, [r3, #5]
 8001076:	2b02      	cmp	r3, #2
 8001078:	d131      	bne.n	80010de <GPIO_Init+0x31a>
	{
		// configure the alt function register
		uint8_t temp1,temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	791b      	ldrb	r3, [r3, #4]
 800107e:	08db      	lsrs	r3, r3, #3
 8001080:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	791b      	ldrb	r3, [r3, #4]
 8001086:	f003 0307 	and.w	r3, r3, #7
 800108a:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2)); // clearing
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	7c3a      	ldrb	r2, [r7, #16]
 8001092:	3208      	adds	r2, #8
 8001094:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001098:	7bfb      	ldrb	r3, [r7, #15]
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	220f      	movs	r2, #15
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43db      	mvns	r3, r3
 80010a4:	4618      	mov	r0, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	7c3a      	ldrb	r2, [r7, #16]
 80010ac:	4001      	ands	r1, r0
 80010ae:	3208      	adds	r2, #8
 80010b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2); // setting
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	7c3a      	ldrb	r2, [r7, #16]
 80010ba:	3208      	adds	r2, #8
 80010bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	7a5b      	ldrb	r3, [r3, #9]
 80010c4:	461a      	mov	r2, r3
 80010c6:	7bfb      	ldrb	r3, [r7, #15]
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	4618      	mov	r0, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	7c3a      	ldrb	r2, [r7, #16]
 80010d6:	4301      	orrs	r1, r0
 80010d8:	3208      	adds	r2, #8
 80010da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 80010de:	bf00      	nop
 80010e0:	3718      	adds	r7, #24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40023800 	.word	0x40023800
 80010ec:	40013800 	.word	0x40013800
 80010f0:	40013c00 	.word	0x40013c00

080010f4 <GPIO_ReadFromInputPin>:

/*
 * Data read and write
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	460b      	mov	r3, r1
 80010fe:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	691a      	ldr	r2, [r3, #16]
 8001104:	78fb      	ldrb	r3, [r7, #3]
 8001106:	fa22 f303 	lsr.w	r3, r2, r3
 800110a:	b2db      	uxtb	r3, r3
 800110c:	f003 0301 	and.w	r3, r3, #1
 8001110:	73fb      	strb	r3, [r7, #15]
	return value;
 8001112:	7bfb      	ldrb	r3, [r7, #15]
}
 8001114:	4618      	mov	r0, r3
 8001116:	3714      	adds	r7, #20
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <__errno>:
 8001120:	4b01      	ldr	r3, [pc, #4]	; (8001128 <__errno+0x8>)
 8001122:	6818      	ldr	r0, [r3, #0]
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	20000000 	.word	0x20000000

0800112c <__libc_init_array>:
 800112c:	b570      	push	{r4, r5, r6, lr}
 800112e:	4d0d      	ldr	r5, [pc, #52]	; (8001164 <__libc_init_array+0x38>)
 8001130:	4c0d      	ldr	r4, [pc, #52]	; (8001168 <__libc_init_array+0x3c>)
 8001132:	1b64      	subs	r4, r4, r5
 8001134:	10a4      	asrs	r4, r4, #2
 8001136:	2600      	movs	r6, #0
 8001138:	42a6      	cmp	r6, r4
 800113a:	d109      	bne.n	8001150 <__libc_init_array+0x24>
 800113c:	4d0b      	ldr	r5, [pc, #44]	; (800116c <__libc_init_array+0x40>)
 800113e:	4c0c      	ldr	r4, [pc, #48]	; (8001170 <__libc_init_array+0x44>)
 8001140:	f000 ff84 	bl	800204c <_init>
 8001144:	1b64      	subs	r4, r4, r5
 8001146:	10a4      	asrs	r4, r4, #2
 8001148:	2600      	movs	r6, #0
 800114a:	42a6      	cmp	r6, r4
 800114c:	d105      	bne.n	800115a <__libc_init_array+0x2e>
 800114e:	bd70      	pop	{r4, r5, r6, pc}
 8001150:	f855 3b04 	ldr.w	r3, [r5], #4
 8001154:	4798      	blx	r3
 8001156:	3601      	adds	r6, #1
 8001158:	e7ee      	b.n	8001138 <__libc_init_array+0xc>
 800115a:	f855 3b04 	ldr.w	r3, [r5], #4
 800115e:	4798      	blx	r3
 8001160:	3601      	adds	r6, #1
 8001162:	e7f2      	b.n	800114a <__libc_init_array+0x1e>
 8001164:	08002188 	.word	0x08002188
 8001168:	08002188 	.word	0x08002188
 800116c:	08002188 	.word	0x08002188
 8001170:	0800218c 	.word	0x0800218c

08001174 <memcpy>:
 8001174:	440a      	add	r2, r1
 8001176:	4291      	cmp	r1, r2
 8001178:	f100 33ff 	add.w	r3, r0, #4294967295
 800117c:	d100      	bne.n	8001180 <memcpy+0xc>
 800117e:	4770      	bx	lr
 8001180:	b510      	push	{r4, lr}
 8001182:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001186:	f803 4f01 	strb.w	r4, [r3, #1]!
 800118a:	4291      	cmp	r1, r2
 800118c:	d1f9      	bne.n	8001182 <memcpy+0xe>
 800118e:	bd10      	pop	{r4, pc}

08001190 <memset>:
 8001190:	4402      	add	r2, r0
 8001192:	4603      	mov	r3, r0
 8001194:	4293      	cmp	r3, r2
 8001196:	d100      	bne.n	800119a <memset+0xa>
 8001198:	4770      	bx	lr
 800119a:	f803 1b01 	strb.w	r1, [r3], #1
 800119e:	e7f9      	b.n	8001194 <memset+0x4>

080011a0 <iprintf>:
 80011a0:	b40f      	push	{r0, r1, r2, r3}
 80011a2:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <iprintf+0x2c>)
 80011a4:	b513      	push	{r0, r1, r4, lr}
 80011a6:	681c      	ldr	r4, [r3, #0]
 80011a8:	b124      	cbz	r4, 80011b4 <iprintf+0x14>
 80011aa:	69a3      	ldr	r3, [r4, #24]
 80011ac:	b913      	cbnz	r3, 80011b4 <iprintf+0x14>
 80011ae:	4620      	mov	r0, r4
 80011b0:	f000 f866 	bl	8001280 <__sinit>
 80011b4:	ab05      	add	r3, sp, #20
 80011b6:	9a04      	ldr	r2, [sp, #16]
 80011b8:	68a1      	ldr	r1, [r4, #8]
 80011ba:	9301      	str	r3, [sp, #4]
 80011bc:	4620      	mov	r0, r4
 80011be:	f000 f983 	bl	80014c8 <_vfiprintf_r>
 80011c2:	b002      	add	sp, #8
 80011c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80011c8:	b004      	add	sp, #16
 80011ca:	4770      	bx	lr
 80011cc:	20000000 	.word	0x20000000

080011d0 <std>:
 80011d0:	2300      	movs	r3, #0
 80011d2:	b510      	push	{r4, lr}
 80011d4:	4604      	mov	r4, r0
 80011d6:	e9c0 3300 	strd	r3, r3, [r0]
 80011da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80011de:	6083      	str	r3, [r0, #8]
 80011e0:	8181      	strh	r1, [r0, #12]
 80011e2:	6643      	str	r3, [r0, #100]	; 0x64
 80011e4:	81c2      	strh	r2, [r0, #14]
 80011e6:	6183      	str	r3, [r0, #24]
 80011e8:	4619      	mov	r1, r3
 80011ea:	2208      	movs	r2, #8
 80011ec:	305c      	adds	r0, #92	; 0x5c
 80011ee:	f7ff ffcf 	bl	8001190 <memset>
 80011f2:	4b05      	ldr	r3, [pc, #20]	; (8001208 <std+0x38>)
 80011f4:	6263      	str	r3, [r4, #36]	; 0x24
 80011f6:	4b05      	ldr	r3, [pc, #20]	; (800120c <std+0x3c>)
 80011f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80011fa:	4b05      	ldr	r3, [pc, #20]	; (8001210 <std+0x40>)
 80011fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80011fe:	4b05      	ldr	r3, [pc, #20]	; (8001214 <std+0x44>)
 8001200:	6224      	str	r4, [r4, #32]
 8001202:	6323      	str	r3, [r4, #48]	; 0x30
 8001204:	bd10      	pop	{r4, pc}
 8001206:	bf00      	nop
 8001208:	08001a71 	.word	0x08001a71
 800120c:	08001a93 	.word	0x08001a93
 8001210:	08001acb 	.word	0x08001acb
 8001214:	08001aef 	.word	0x08001aef

08001218 <_cleanup_r>:
 8001218:	4901      	ldr	r1, [pc, #4]	; (8001220 <_cleanup_r+0x8>)
 800121a:	f000 b8af 	b.w	800137c <_fwalk_reent>
 800121e:	bf00      	nop
 8001220:	08001dc9 	.word	0x08001dc9

08001224 <__sfmoreglue>:
 8001224:	b570      	push	{r4, r5, r6, lr}
 8001226:	1e4a      	subs	r2, r1, #1
 8001228:	2568      	movs	r5, #104	; 0x68
 800122a:	4355      	muls	r5, r2
 800122c:	460e      	mov	r6, r1
 800122e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001232:	f000 f8c5 	bl	80013c0 <_malloc_r>
 8001236:	4604      	mov	r4, r0
 8001238:	b140      	cbz	r0, 800124c <__sfmoreglue+0x28>
 800123a:	2100      	movs	r1, #0
 800123c:	e9c0 1600 	strd	r1, r6, [r0]
 8001240:	300c      	adds	r0, #12
 8001242:	60a0      	str	r0, [r4, #8]
 8001244:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001248:	f7ff ffa2 	bl	8001190 <memset>
 800124c:	4620      	mov	r0, r4
 800124e:	bd70      	pop	{r4, r5, r6, pc}

08001250 <__sfp_lock_acquire>:
 8001250:	4801      	ldr	r0, [pc, #4]	; (8001258 <__sfp_lock_acquire+0x8>)
 8001252:	f000 b8b3 	b.w	80013bc <__retarget_lock_acquire_recursive>
 8001256:	bf00      	nop
 8001258:	20000094 	.word	0x20000094

0800125c <__sfp_lock_release>:
 800125c:	4801      	ldr	r0, [pc, #4]	; (8001264 <__sfp_lock_release+0x8>)
 800125e:	f000 b8ae 	b.w	80013be <__retarget_lock_release_recursive>
 8001262:	bf00      	nop
 8001264:	20000094 	.word	0x20000094

08001268 <__sinit_lock_acquire>:
 8001268:	4801      	ldr	r0, [pc, #4]	; (8001270 <__sinit_lock_acquire+0x8>)
 800126a:	f000 b8a7 	b.w	80013bc <__retarget_lock_acquire_recursive>
 800126e:	bf00      	nop
 8001270:	2000008f 	.word	0x2000008f

08001274 <__sinit_lock_release>:
 8001274:	4801      	ldr	r0, [pc, #4]	; (800127c <__sinit_lock_release+0x8>)
 8001276:	f000 b8a2 	b.w	80013be <__retarget_lock_release_recursive>
 800127a:	bf00      	nop
 800127c:	2000008f 	.word	0x2000008f

08001280 <__sinit>:
 8001280:	b510      	push	{r4, lr}
 8001282:	4604      	mov	r4, r0
 8001284:	f7ff fff0 	bl	8001268 <__sinit_lock_acquire>
 8001288:	69a3      	ldr	r3, [r4, #24]
 800128a:	b11b      	cbz	r3, 8001294 <__sinit+0x14>
 800128c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001290:	f7ff bff0 	b.w	8001274 <__sinit_lock_release>
 8001294:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001298:	6523      	str	r3, [r4, #80]	; 0x50
 800129a:	4b13      	ldr	r3, [pc, #76]	; (80012e8 <__sinit+0x68>)
 800129c:	4a13      	ldr	r2, [pc, #76]	; (80012ec <__sinit+0x6c>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	62a2      	str	r2, [r4, #40]	; 0x28
 80012a2:	42a3      	cmp	r3, r4
 80012a4:	bf04      	itt	eq
 80012a6:	2301      	moveq	r3, #1
 80012a8:	61a3      	streq	r3, [r4, #24]
 80012aa:	4620      	mov	r0, r4
 80012ac:	f000 f820 	bl	80012f0 <__sfp>
 80012b0:	6060      	str	r0, [r4, #4]
 80012b2:	4620      	mov	r0, r4
 80012b4:	f000 f81c 	bl	80012f0 <__sfp>
 80012b8:	60a0      	str	r0, [r4, #8]
 80012ba:	4620      	mov	r0, r4
 80012bc:	f000 f818 	bl	80012f0 <__sfp>
 80012c0:	2200      	movs	r2, #0
 80012c2:	60e0      	str	r0, [r4, #12]
 80012c4:	2104      	movs	r1, #4
 80012c6:	6860      	ldr	r0, [r4, #4]
 80012c8:	f7ff ff82 	bl	80011d0 <std>
 80012cc:	68a0      	ldr	r0, [r4, #8]
 80012ce:	2201      	movs	r2, #1
 80012d0:	2109      	movs	r1, #9
 80012d2:	f7ff ff7d 	bl	80011d0 <std>
 80012d6:	68e0      	ldr	r0, [r4, #12]
 80012d8:	2202      	movs	r2, #2
 80012da:	2112      	movs	r1, #18
 80012dc:	f7ff ff78 	bl	80011d0 <std>
 80012e0:	2301      	movs	r3, #1
 80012e2:	61a3      	str	r3, [r4, #24]
 80012e4:	e7d2      	b.n	800128c <__sinit+0xc>
 80012e6:	bf00      	nop
 80012e8:	080020f0 	.word	0x080020f0
 80012ec:	08001219 	.word	0x08001219

080012f0 <__sfp>:
 80012f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012f2:	4607      	mov	r7, r0
 80012f4:	f7ff ffac 	bl	8001250 <__sfp_lock_acquire>
 80012f8:	4b1e      	ldr	r3, [pc, #120]	; (8001374 <__sfp+0x84>)
 80012fa:	681e      	ldr	r6, [r3, #0]
 80012fc:	69b3      	ldr	r3, [r6, #24]
 80012fe:	b913      	cbnz	r3, 8001306 <__sfp+0x16>
 8001300:	4630      	mov	r0, r6
 8001302:	f7ff ffbd 	bl	8001280 <__sinit>
 8001306:	3648      	adds	r6, #72	; 0x48
 8001308:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800130c:	3b01      	subs	r3, #1
 800130e:	d503      	bpl.n	8001318 <__sfp+0x28>
 8001310:	6833      	ldr	r3, [r6, #0]
 8001312:	b30b      	cbz	r3, 8001358 <__sfp+0x68>
 8001314:	6836      	ldr	r6, [r6, #0]
 8001316:	e7f7      	b.n	8001308 <__sfp+0x18>
 8001318:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800131c:	b9d5      	cbnz	r5, 8001354 <__sfp+0x64>
 800131e:	4b16      	ldr	r3, [pc, #88]	; (8001378 <__sfp+0x88>)
 8001320:	60e3      	str	r3, [r4, #12]
 8001322:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001326:	6665      	str	r5, [r4, #100]	; 0x64
 8001328:	f000 f847 	bl	80013ba <__retarget_lock_init_recursive>
 800132c:	f7ff ff96 	bl	800125c <__sfp_lock_release>
 8001330:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001334:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001338:	6025      	str	r5, [r4, #0]
 800133a:	61a5      	str	r5, [r4, #24]
 800133c:	2208      	movs	r2, #8
 800133e:	4629      	mov	r1, r5
 8001340:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001344:	f7ff ff24 	bl	8001190 <memset>
 8001348:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800134c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001350:	4620      	mov	r0, r4
 8001352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001354:	3468      	adds	r4, #104	; 0x68
 8001356:	e7d9      	b.n	800130c <__sfp+0x1c>
 8001358:	2104      	movs	r1, #4
 800135a:	4638      	mov	r0, r7
 800135c:	f7ff ff62 	bl	8001224 <__sfmoreglue>
 8001360:	4604      	mov	r4, r0
 8001362:	6030      	str	r0, [r6, #0]
 8001364:	2800      	cmp	r0, #0
 8001366:	d1d5      	bne.n	8001314 <__sfp+0x24>
 8001368:	f7ff ff78 	bl	800125c <__sfp_lock_release>
 800136c:	230c      	movs	r3, #12
 800136e:	603b      	str	r3, [r7, #0]
 8001370:	e7ee      	b.n	8001350 <__sfp+0x60>
 8001372:	bf00      	nop
 8001374:	080020f0 	.word	0x080020f0
 8001378:	ffff0001 	.word	0xffff0001

0800137c <_fwalk_reent>:
 800137c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001380:	4606      	mov	r6, r0
 8001382:	4688      	mov	r8, r1
 8001384:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001388:	2700      	movs	r7, #0
 800138a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800138e:	f1b9 0901 	subs.w	r9, r9, #1
 8001392:	d505      	bpl.n	80013a0 <_fwalk_reent+0x24>
 8001394:	6824      	ldr	r4, [r4, #0]
 8001396:	2c00      	cmp	r4, #0
 8001398:	d1f7      	bne.n	800138a <_fwalk_reent+0xe>
 800139a:	4638      	mov	r0, r7
 800139c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80013a0:	89ab      	ldrh	r3, [r5, #12]
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d907      	bls.n	80013b6 <_fwalk_reent+0x3a>
 80013a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80013aa:	3301      	adds	r3, #1
 80013ac:	d003      	beq.n	80013b6 <_fwalk_reent+0x3a>
 80013ae:	4629      	mov	r1, r5
 80013b0:	4630      	mov	r0, r6
 80013b2:	47c0      	blx	r8
 80013b4:	4307      	orrs	r7, r0
 80013b6:	3568      	adds	r5, #104	; 0x68
 80013b8:	e7e9      	b.n	800138e <_fwalk_reent+0x12>

080013ba <__retarget_lock_init_recursive>:
 80013ba:	4770      	bx	lr

080013bc <__retarget_lock_acquire_recursive>:
 80013bc:	4770      	bx	lr

080013be <__retarget_lock_release_recursive>:
 80013be:	4770      	bx	lr

080013c0 <_malloc_r>:
 80013c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013c2:	1ccd      	adds	r5, r1, #3
 80013c4:	f025 0503 	bic.w	r5, r5, #3
 80013c8:	3508      	adds	r5, #8
 80013ca:	2d0c      	cmp	r5, #12
 80013cc:	bf38      	it	cc
 80013ce:	250c      	movcc	r5, #12
 80013d0:	2d00      	cmp	r5, #0
 80013d2:	4606      	mov	r6, r0
 80013d4:	db01      	blt.n	80013da <_malloc_r+0x1a>
 80013d6:	42a9      	cmp	r1, r5
 80013d8:	d903      	bls.n	80013e2 <_malloc_r+0x22>
 80013da:	230c      	movs	r3, #12
 80013dc:	6033      	str	r3, [r6, #0]
 80013de:	2000      	movs	r0, #0
 80013e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013e2:	f000 fda3 	bl	8001f2c <__malloc_lock>
 80013e6:	4921      	ldr	r1, [pc, #132]	; (800146c <_malloc_r+0xac>)
 80013e8:	680a      	ldr	r2, [r1, #0]
 80013ea:	4614      	mov	r4, r2
 80013ec:	b99c      	cbnz	r4, 8001416 <_malloc_r+0x56>
 80013ee:	4f20      	ldr	r7, [pc, #128]	; (8001470 <_malloc_r+0xb0>)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	b923      	cbnz	r3, 80013fe <_malloc_r+0x3e>
 80013f4:	4621      	mov	r1, r4
 80013f6:	4630      	mov	r0, r6
 80013f8:	f000 fb2a 	bl	8001a50 <_sbrk_r>
 80013fc:	6038      	str	r0, [r7, #0]
 80013fe:	4629      	mov	r1, r5
 8001400:	4630      	mov	r0, r6
 8001402:	f000 fb25 	bl	8001a50 <_sbrk_r>
 8001406:	1c43      	adds	r3, r0, #1
 8001408:	d123      	bne.n	8001452 <_malloc_r+0x92>
 800140a:	230c      	movs	r3, #12
 800140c:	6033      	str	r3, [r6, #0]
 800140e:	4630      	mov	r0, r6
 8001410:	f000 fd92 	bl	8001f38 <__malloc_unlock>
 8001414:	e7e3      	b.n	80013de <_malloc_r+0x1e>
 8001416:	6823      	ldr	r3, [r4, #0]
 8001418:	1b5b      	subs	r3, r3, r5
 800141a:	d417      	bmi.n	800144c <_malloc_r+0x8c>
 800141c:	2b0b      	cmp	r3, #11
 800141e:	d903      	bls.n	8001428 <_malloc_r+0x68>
 8001420:	6023      	str	r3, [r4, #0]
 8001422:	441c      	add	r4, r3
 8001424:	6025      	str	r5, [r4, #0]
 8001426:	e004      	b.n	8001432 <_malloc_r+0x72>
 8001428:	6863      	ldr	r3, [r4, #4]
 800142a:	42a2      	cmp	r2, r4
 800142c:	bf0c      	ite	eq
 800142e:	600b      	streq	r3, [r1, #0]
 8001430:	6053      	strne	r3, [r2, #4]
 8001432:	4630      	mov	r0, r6
 8001434:	f000 fd80 	bl	8001f38 <__malloc_unlock>
 8001438:	f104 000b 	add.w	r0, r4, #11
 800143c:	1d23      	adds	r3, r4, #4
 800143e:	f020 0007 	bic.w	r0, r0, #7
 8001442:	1ac2      	subs	r2, r0, r3
 8001444:	d0cc      	beq.n	80013e0 <_malloc_r+0x20>
 8001446:	1a1b      	subs	r3, r3, r0
 8001448:	50a3      	str	r3, [r4, r2]
 800144a:	e7c9      	b.n	80013e0 <_malloc_r+0x20>
 800144c:	4622      	mov	r2, r4
 800144e:	6864      	ldr	r4, [r4, #4]
 8001450:	e7cc      	b.n	80013ec <_malloc_r+0x2c>
 8001452:	1cc4      	adds	r4, r0, #3
 8001454:	f024 0403 	bic.w	r4, r4, #3
 8001458:	42a0      	cmp	r0, r4
 800145a:	d0e3      	beq.n	8001424 <_malloc_r+0x64>
 800145c:	1a21      	subs	r1, r4, r0
 800145e:	4630      	mov	r0, r6
 8001460:	f000 faf6 	bl	8001a50 <_sbrk_r>
 8001464:	3001      	adds	r0, #1
 8001466:	d1dd      	bne.n	8001424 <_malloc_r+0x64>
 8001468:	e7cf      	b.n	800140a <_malloc_r+0x4a>
 800146a:	bf00      	nop
 800146c:	20000084 	.word	0x20000084
 8001470:	20000088 	.word	0x20000088

08001474 <__sfputc_r>:
 8001474:	6893      	ldr	r3, [r2, #8]
 8001476:	3b01      	subs	r3, #1
 8001478:	2b00      	cmp	r3, #0
 800147a:	b410      	push	{r4}
 800147c:	6093      	str	r3, [r2, #8]
 800147e:	da08      	bge.n	8001492 <__sfputc_r+0x1e>
 8001480:	6994      	ldr	r4, [r2, #24]
 8001482:	42a3      	cmp	r3, r4
 8001484:	db01      	blt.n	800148a <__sfputc_r+0x16>
 8001486:	290a      	cmp	r1, #10
 8001488:	d103      	bne.n	8001492 <__sfputc_r+0x1e>
 800148a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800148e:	f000 bb33 	b.w	8001af8 <__swbuf_r>
 8001492:	6813      	ldr	r3, [r2, #0]
 8001494:	1c58      	adds	r0, r3, #1
 8001496:	6010      	str	r0, [r2, #0]
 8001498:	7019      	strb	r1, [r3, #0]
 800149a:	4608      	mov	r0, r1
 800149c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80014a0:	4770      	bx	lr

080014a2 <__sfputs_r>:
 80014a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014a4:	4606      	mov	r6, r0
 80014a6:	460f      	mov	r7, r1
 80014a8:	4614      	mov	r4, r2
 80014aa:	18d5      	adds	r5, r2, r3
 80014ac:	42ac      	cmp	r4, r5
 80014ae:	d101      	bne.n	80014b4 <__sfputs_r+0x12>
 80014b0:	2000      	movs	r0, #0
 80014b2:	e007      	b.n	80014c4 <__sfputs_r+0x22>
 80014b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80014b8:	463a      	mov	r2, r7
 80014ba:	4630      	mov	r0, r6
 80014bc:	f7ff ffda 	bl	8001474 <__sfputc_r>
 80014c0:	1c43      	adds	r3, r0, #1
 80014c2:	d1f3      	bne.n	80014ac <__sfputs_r+0xa>
 80014c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080014c8 <_vfiprintf_r>:
 80014c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014cc:	460d      	mov	r5, r1
 80014ce:	b09d      	sub	sp, #116	; 0x74
 80014d0:	4614      	mov	r4, r2
 80014d2:	4698      	mov	r8, r3
 80014d4:	4606      	mov	r6, r0
 80014d6:	b118      	cbz	r0, 80014e0 <_vfiprintf_r+0x18>
 80014d8:	6983      	ldr	r3, [r0, #24]
 80014da:	b90b      	cbnz	r3, 80014e0 <_vfiprintf_r+0x18>
 80014dc:	f7ff fed0 	bl	8001280 <__sinit>
 80014e0:	4b89      	ldr	r3, [pc, #548]	; (8001708 <_vfiprintf_r+0x240>)
 80014e2:	429d      	cmp	r5, r3
 80014e4:	d11b      	bne.n	800151e <_vfiprintf_r+0x56>
 80014e6:	6875      	ldr	r5, [r6, #4]
 80014e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80014ea:	07d9      	lsls	r1, r3, #31
 80014ec:	d405      	bmi.n	80014fa <_vfiprintf_r+0x32>
 80014ee:	89ab      	ldrh	r3, [r5, #12]
 80014f0:	059a      	lsls	r2, r3, #22
 80014f2:	d402      	bmi.n	80014fa <_vfiprintf_r+0x32>
 80014f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80014f6:	f7ff ff61 	bl	80013bc <__retarget_lock_acquire_recursive>
 80014fa:	89ab      	ldrh	r3, [r5, #12]
 80014fc:	071b      	lsls	r3, r3, #28
 80014fe:	d501      	bpl.n	8001504 <_vfiprintf_r+0x3c>
 8001500:	692b      	ldr	r3, [r5, #16]
 8001502:	b9eb      	cbnz	r3, 8001540 <_vfiprintf_r+0x78>
 8001504:	4629      	mov	r1, r5
 8001506:	4630      	mov	r0, r6
 8001508:	f000 fb5a 	bl	8001bc0 <__swsetup_r>
 800150c:	b1c0      	cbz	r0, 8001540 <_vfiprintf_r+0x78>
 800150e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001510:	07dc      	lsls	r4, r3, #31
 8001512:	d50e      	bpl.n	8001532 <_vfiprintf_r+0x6a>
 8001514:	f04f 30ff 	mov.w	r0, #4294967295
 8001518:	b01d      	add	sp, #116	; 0x74
 800151a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800151e:	4b7b      	ldr	r3, [pc, #492]	; (800170c <_vfiprintf_r+0x244>)
 8001520:	429d      	cmp	r5, r3
 8001522:	d101      	bne.n	8001528 <_vfiprintf_r+0x60>
 8001524:	68b5      	ldr	r5, [r6, #8]
 8001526:	e7df      	b.n	80014e8 <_vfiprintf_r+0x20>
 8001528:	4b79      	ldr	r3, [pc, #484]	; (8001710 <_vfiprintf_r+0x248>)
 800152a:	429d      	cmp	r5, r3
 800152c:	bf08      	it	eq
 800152e:	68f5      	ldreq	r5, [r6, #12]
 8001530:	e7da      	b.n	80014e8 <_vfiprintf_r+0x20>
 8001532:	89ab      	ldrh	r3, [r5, #12]
 8001534:	0598      	lsls	r0, r3, #22
 8001536:	d4ed      	bmi.n	8001514 <_vfiprintf_r+0x4c>
 8001538:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800153a:	f7ff ff40 	bl	80013be <__retarget_lock_release_recursive>
 800153e:	e7e9      	b.n	8001514 <_vfiprintf_r+0x4c>
 8001540:	2300      	movs	r3, #0
 8001542:	9309      	str	r3, [sp, #36]	; 0x24
 8001544:	2320      	movs	r3, #32
 8001546:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800154a:	f8cd 800c 	str.w	r8, [sp, #12]
 800154e:	2330      	movs	r3, #48	; 0x30
 8001550:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001714 <_vfiprintf_r+0x24c>
 8001554:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001558:	f04f 0901 	mov.w	r9, #1
 800155c:	4623      	mov	r3, r4
 800155e:	469a      	mov	sl, r3
 8001560:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001564:	b10a      	cbz	r2, 800156a <_vfiprintf_r+0xa2>
 8001566:	2a25      	cmp	r2, #37	; 0x25
 8001568:	d1f9      	bne.n	800155e <_vfiprintf_r+0x96>
 800156a:	ebba 0b04 	subs.w	fp, sl, r4
 800156e:	d00b      	beq.n	8001588 <_vfiprintf_r+0xc0>
 8001570:	465b      	mov	r3, fp
 8001572:	4622      	mov	r2, r4
 8001574:	4629      	mov	r1, r5
 8001576:	4630      	mov	r0, r6
 8001578:	f7ff ff93 	bl	80014a2 <__sfputs_r>
 800157c:	3001      	adds	r0, #1
 800157e:	f000 80aa 	beq.w	80016d6 <_vfiprintf_r+0x20e>
 8001582:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001584:	445a      	add	r2, fp
 8001586:	9209      	str	r2, [sp, #36]	; 0x24
 8001588:	f89a 3000 	ldrb.w	r3, [sl]
 800158c:	2b00      	cmp	r3, #0
 800158e:	f000 80a2 	beq.w	80016d6 <_vfiprintf_r+0x20e>
 8001592:	2300      	movs	r3, #0
 8001594:	f04f 32ff 	mov.w	r2, #4294967295
 8001598:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800159c:	f10a 0a01 	add.w	sl, sl, #1
 80015a0:	9304      	str	r3, [sp, #16]
 80015a2:	9307      	str	r3, [sp, #28]
 80015a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80015a8:	931a      	str	r3, [sp, #104]	; 0x68
 80015aa:	4654      	mov	r4, sl
 80015ac:	2205      	movs	r2, #5
 80015ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80015b2:	4858      	ldr	r0, [pc, #352]	; (8001714 <_vfiprintf_r+0x24c>)
 80015b4:	f7fe fe24 	bl	8000200 <memchr>
 80015b8:	9a04      	ldr	r2, [sp, #16]
 80015ba:	b9d8      	cbnz	r0, 80015f4 <_vfiprintf_r+0x12c>
 80015bc:	06d1      	lsls	r1, r2, #27
 80015be:	bf44      	itt	mi
 80015c0:	2320      	movmi	r3, #32
 80015c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80015c6:	0713      	lsls	r3, r2, #28
 80015c8:	bf44      	itt	mi
 80015ca:	232b      	movmi	r3, #43	; 0x2b
 80015cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80015d0:	f89a 3000 	ldrb.w	r3, [sl]
 80015d4:	2b2a      	cmp	r3, #42	; 0x2a
 80015d6:	d015      	beq.n	8001604 <_vfiprintf_r+0x13c>
 80015d8:	9a07      	ldr	r2, [sp, #28]
 80015da:	4654      	mov	r4, sl
 80015dc:	2000      	movs	r0, #0
 80015de:	f04f 0c0a 	mov.w	ip, #10
 80015e2:	4621      	mov	r1, r4
 80015e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80015e8:	3b30      	subs	r3, #48	; 0x30
 80015ea:	2b09      	cmp	r3, #9
 80015ec:	d94e      	bls.n	800168c <_vfiprintf_r+0x1c4>
 80015ee:	b1b0      	cbz	r0, 800161e <_vfiprintf_r+0x156>
 80015f0:	9207      	str	r2, [sp, #28]
 80015f2:	e014      	b.n	800161e <_vfiprintf_r+0x156>
 80015f4:	eba0 0308 	sub.w	r3, r0, r8
 80015f8:	fa09 f303 	lsl.w	r3, r9, r3
 80015fc:	4313      	orrs	r3, r2
 80015fe:	9304      	str	r3, [sp, #16]
 8001600:	46a2      	mov	sl, r4
 8001602:	e7d2      	b.n	80015aa <_vfiprintf_r+0xe2>
 8001604:	9b03      	ldr	r3, [sp, #12]
 8001606:	1d19      	adds	r1, r3, #4
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	9103      	str	r1, [sp, #12]
 800160c:	2b00      	cmp	r3, #0
 800160e:	bfbb      	ittet	lt
 8001610:	425b      	neglt	r3, r3
 8001612:	f042 0202 	orrlt.w	r2, r2, #2
 8001616:	9307      	strge	r3, [sp, #28]
 8001618:	9307      	strlt	r3, [sp, #28]
 800161a:	bfb8      	it	lt
 800161c:	9204      	strlt	r2, [sp, #16]
 800161e:	7823      	ldrb	r3, [r4, #0]
 8001620:	2b2e      	cmp	r3, #46	; 0x2e
 8001622:	d10c      	bne.n	800163e <_vfiprintf_r+0x176>
 8001624:	7863      	ldrb	r3, [r4, #1]
 8001626:	2b2a      	cmp	r3, #42	; 0x2a
 8001628:	d135      	bne.n	8001696 <_vfiprintf_r+0x1ce>
 800162a:	9b03      	ldr	r3, [sp, #12]
 800162c:	1d1a      	adds	r2, r3, #4
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	9203      	str	r2, [sp, #12]
 8001632:	2b00      	cmp	r3, #0
 8001634:	bfb8      	it	lt
 8001636:	f04f 33ff 	movlt.w	r3, #4294967295
 800163a:	3402      	adds	r4, #2
 800163c:	9305      	str	r3, [sp, #20]
 800163e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001724 <_vfiprintf_r+0x25c>
 8001642:	7821      	ldrb	r1, [r4, #0]
 8001644:	2203      	movs	r2, #3
 8001646:	4650      	mov	r0, sl
 8001648:	f7fe fdda 	bl	8000200 <memchr>
 800164c:	b140      	cbz	r0, 8001660 <_vfiprintf_r+0x198>
 800164e:	2340      	movs	r3, #64	; 0x40
 8001650:	eba0 000a 	sub.w	r0, r0, sl
 8001654:	fa03 f000 	lsl.w	r0, r3, r0
 8001658:	9b04      	ldr	r3, [sp, #16]
 800165a:	4303      	orrs	r3, r0
 800165c:	3401      	adds	r4, #1
 800165e:	9304      	str	r3, [sp, #16]
 8001660:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001664:	482c      	ldr	r0, [pc, #176]	; (8001718 <_vfiprintf_r+0x250>)
 8001666:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800166a:	2206      	movs	r2, #6
 800166c:	f7fe fdc8 	bl	8000200 <memchr>
 8001670:	2800      	cmp	r0, #0
 8001672:	d03f      	beq.n	80016f4 <_vfiprintf_r+0x22c>
 8001674:	4b29      	ldr	r3, [pc, #164]	; (800171c <_vfiprintf_r+0x254>)
 8001676:	bb1b      	cbnz	r3, 80016c0 <_vfiprintf_r+0x1f8>
 8001678:	9b03      	ldr	r3, [sp, #12]
 800167a:	3307      	adds	r3, #7
 800167c:	f023 0307 	bic.w	r3, r3, #7
 8001680:	3308      	adds	r3, #8
 8001682:	9303      	str	r3, [sp, #12]
 8001684:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001686:	443b      	add	r3, r7
 8001688:	9309      	str	r3, [sp, #36]	; 0x24
 800168a:	e767      	b.n	800155c <_vfiprintf_r+0x94>
 800168c:	fb0c 3202 	mla	r2, ip, r2, r3
 8001690:	460c      	mov	r4, r1
 8001692:	2001      	movs	r0, #1
 8001694:	e7a5      	b.n	80015e2 <_vfiprintf_r+0x11a>
 8001696:	2300      	movs	r3, #0
 8001698:	3401      	adds	r4, #1
 800169a:	9305      	str	r3, [sp, #20]
 800169c:	4619      	mov	r1, r3
 800169e:	f04f 0c0a 	mov.w	ip, #10
 80016a2:	4620      	mov	r0, r4
 80016a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80016a8:	3a30      	subs	r2, #48	; 0x30
 80016aa:	2a09      	cmp	r2, #9
 80016ac:	d903      	bls.n	80016b6 <_vfiprintf_r+0x1ee>
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d0c5      	beq.n	800163e <_vfiprintf_r+0x176>
 80016b2:	9105      	str	r1, [sp, #20]
 80016b4:	e7c3      	b.n	800163e <_vfiprintf_r+0x176>
 80016b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80016ba:	4604      	mov	r4, r0
 80016bc:	2301      	movs	r3, #1
 80016be:	e7f0      	b.n	80016a2 <_vfiprintf_r+0x1da>
 80016c0:	ab03      	add	r3, sp, #12
 80016c2:	9300      	str	r3, [sp, #0]
 80016c4:	462a      	mov	r2, r5
 80016c6:	4b16      	ldr	r3, [pc, #88]	; (8001720 <_vfiprintf_r+0x258>)
 80016c8:	a904      	add	r1, sp, #16
 80016ca:	4630      	mov	r0, r6
 80016cc:	f3af 8000 	nop.w
 80016d0:	4607      	mov	r7, r0
 80016d2:	1c78      	adds	r0, r7, #1
 80016d4:	d1d6      	bne.n	8001684 <_vfiprintf_r+0x1bc>
 80016d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80016d8:	07d9      	lsls	r1, r3, #31
 80016da:	d405      	bmi.n	80016e8 <_vfiprintf_r+0x220>
 80016dc:	89ab      	ldrh	r3, [r5, #12]
 80016de:	059a      	lsls	r2, r3, #22
 80016e0:	d402      	bmi.n	80016e8 <_vfiprintf_r+0x220>
 80016e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80016e4:	f7ff fe6b 	bl	80013be <__retarget_lock_release_recursive>
 80016e8:	89ab      	ldrh	r3, [r5, #12]
 80016ea:	065b      	lsls	r3, r3, #25
 80016ec:	f53f af12 	bmi.w	8001514 <_vfiprintf_r+0x4c>
 80016f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80016f2:	e711      	b.n	8001518 <_vfiprintf_r+0x50>
 80016f4:	ab03      	add	r3, sp, #12
 80016f6:	9300      	str	r3, [sp, #0]
 80016f8:	462a      	mov	r2, r5
 80016fa:	4b09      	ldr	r3, [pc, #36]	; (8001720 <_vfiprintf_r+0x258>)
 80016fc:	a904      	add	r1, sp, #16
 80016fe:	4630      	mov	r0, r6
 8001700:	f000 f880 	bl	8001804 <_printf_i>
 8001704:	e7e4      	b.n	80016d0 <_vfiprintf_r+0x208>
 8001706:	bf00      	nop
 8001708:	08002114 	.word	0x08002114
 800170c:	08002134 	.word	0x08002134
 8001710:	080020f4 	.word	0x080020f4
 8001714:	08002154 	.word	0x08002154
 8001718:	0800215e 	.word	0x0800215e
 800171c:	00000000 	.word	0x00000000
 8001720:	080014a3 	.word	0x080014a3
 8001724:	0800215a 	.word	0x0800215a

08001728 <_printf_common>:
 8001728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800172c:	4616      	mov	r6, r2
 800172e:	4699      	mov	r9, r3
 8001730:	688a      	ldr	r2, [r1, #8]
 8001732:	690b      	ldr	r3, [r1, #16]
 8001734:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001738:	4293      	cmp	r3, r2
 800173a:	bfb8      	it	lt
 800173c:	4613      	movlt	r3, r2
 800173e:	6033      	str	r3, [r6, #0]
 8001740:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001744:	4607      	mov	r7, r0
 8001746:	460c      	mov	r4, r1
 8001748:	b10a      	cbz	r2, 800174e <_printf_common+0x26>
 800174a:	3301      	adds	r3, #1
 800174c:	6033      	str	r3, [r6, #0]
 800174e:	6823      	ldr	r3, [r4, #0]
 8001750:	0699      	lsls	r1, r3, #26
 8001752:	bf42      	ittt	mi
 8001754:	6833      	ldrmi	r3, [r6, #0]
 8001756:	3302      	addmi	r3, #2
 8001758:	6033      	strmi	r3, [r6, #0]
 800175a:	6825      	ldr	r5, [r4, #0]
 800175c:	f015 0506 	ands.w	r5, r5, #6
 8001760:	d106      	bne.n	8001770 <_printf_common+0x48>
 8001762:	f104 0a19 	add.w	sl, r4, #25
 8001766:	68e3      	ldr	r3, [r4, #12]
 8001768:	6832      	ldr	r2, [r6, #0]
 800176a:	1a9b      	subs	r3, r3, r2
 800176c:	42ab      	cmp	r3, r5
 800176e:	dc26      	bgt.n	80017be <_printf_common+0x96>
 8001770:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001774:	1e13      	subs	r3, r2, #0
 8001776:	6822      	ldr	r2, [r4, #0]
 8001778:	bf18      	it	ne
 800177a:	2301      	movne	r3, #1
 800177c:	0692      	lsls	r2, r2, #26
 800177e:	d42b      	bmi.n	80017d8 <_printf_common+0xb0>
 8001780:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001784:	4649      	mov	r1, r9
 8001786:	4638      	mov	r0, r7
 8001788:	47c0      	blx	r8
 800178a:	3001      	adds	r0, #1
 800178c:	d01e      	beq.n	80017cc <_printf_common+0xa4>
 800178e:	6823      	ldr	r3, [r4, #0]
 8001790:	68e5      	ldr	r5, [r4, #12]
 8001792:	6832      	ldr	r2, [r6, #0]
 8001794:	f003 0306 	and.w	r3, r3, #6
 8001798:	2b04      	cmp	r3, #4
 800179a:	bf08      	it	eq
 800179c:	1aad      	subeq	r5, r5, r2
 800179e:	68a3      	ldr	r3, [r4, #8]
 80017a0:	6922      	ldr	r2, [r4, #16]
 80017a2:	bf0c      	ite	eq
 80017a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80017a8:	2500      	movne	r5, #0
 80017aa:	4293      	cmp	r3, r2
 80017ac:	bfc4      	itt	gt
 80017ae:	1a9b      	subgt	r3, r3, r2
 80017b0:	18ed      	addgt	r5, r5, r3
 80017b2:	2600      	movs	r6, #0
 80017b4:	341a      	adds	r4, #26
 80017b6:	42b5      	cmp	r5, r6
 80017b8:	d11a      	bne.n	80017f0 <_printf_common+0xc8>
 80017ba:	2000      	movs	r0, #0
 80017bc:	e008      	b.n	80017d0 <_printf_common+0xa8>
 80017be:	2301      	movs	r3, #1
 80017c0:	4652      	mov	r2, sl
 80017c2:	4649      	mov	r1, r9
 80017c4:	4638      	mov	r0, r7
 80017c6:	47c0      	blx	r8
 80017c8:	3001      	adds	r0, #1
 80017ca:	d103      	bne.n	80017d4 <_printf_common+0xac>
 80017cc:	f04f 30ff 	mov.w	r0, #4294967295
 80017d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80017d4:	3501      	adds	r5, #1
 80017d6:	e7c6      	b.n	8001766 <_printf_common+0x3e>
 80017d8:	18e1      	adds	r1, r4, r3
 80017da:	1c5a      	adds	r2, r3, #1
 80017dc:	2030      	movs	r0, #48	; 0x30
 80017de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80017e2:	4422      	add	r2, r4
 80017e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80017e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80017ec:	3302      	adds	r3, #2
 80017ee:	e7c7      	b.n	8001780 <_printf_common+0x58>
 80017f0:	2301      	movs	r3, #1
 80017f2:	4622      	mov	r2, r4
 80017f4:	4649      	mov	r1, r9
 80017f6:	4638      	mov	r0, r7
 80017f8:	47c0      	blx	r8
 80017fa:	3001      	adds	r0, #1
 80017fc:	d0e6      	beq.n	80017cc <_printf_common+0xa4>
 80017fe:	3601      	adds	r6, #1
 8001800:	e7d9      	b.n	80017b6 <_printf_common+0x8e>
	...

08001804 <_printf_i>:
 8001804:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001808:	460c      	mov	r4, r1
 800180a:	4691      	mov	r9, r2
 800180c:	7e27      	ldrb	r7, [r4, #24]
 800180e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001810:	2f78      	cmp	r7, #120	; 0x78
 8001812:	4680      	mov	r8, r0
 8001814:	469a      	mov	sl, r3
 8001816:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800181a:	d807      	bhi.n	800182c <_printf_i+0x28>
 800181c:	2f62      	cmp	r7, #98	; 0x62
 800181e:	d80a      	bhi.n	8001836 <_printf_i+0x32>
 8001820:	2f00      	cmp	r7, #0
 8001822:	f000 80d8 	beq.w	80019d6 <_printf_i+0x1d2>
 8001826:	2f58      	cmp	r7, #88	; 0x58
 8001828:	f000 80a3 	beq.w	8001972 <_printf_i+0x16e>
 800182c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001830:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001834:	e03a      	b.n	80018ac <_printf_i+0xa8>
 8001836:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800183a:	2b15      	cmp	r3, #21
 800183c:	d8f6      	bhi.n	800182c <_printf_i+0x28>
 800183e:	a001      	add	r0, pc, #4	; (adr r0, 8001844 <_printf_i+0x40>)
 8001840:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001844:	0800189d 	.word	0x0800189d
 8001848:	080018b1 	.word	0x080018b1
 800184c:	0800182d 	.word	0x0800182d
 8001850:	0800182d 	.word	0x0800182d
 8001854:	0800182d 	.word	0x0800182d
 8001858:	0800182d 	.word	0x0800182d
 800185c:	080018b1 	.word	0x080018b1
 8001860:	0800182d 	.word	0x0800182d
 8001864:	0800182d 	.word	0x0800182d
 8001868:	0800182d 	.word	0x0800182d
 800186c:	0800182d 	.word	0x0800182d
 8001870:	080019bd 	.word	0x080019bd
 8001874:	080018e1 	.word	0x080018e1
 8001878:	0800199f 	.word	0x0800199f
 800187c:	0800182d 	.word	0x0800182d
 8001880:	0800182d 	.word	0x0800182d
 8001884:	080019df 	.word	0x080019df
 8001888:	0800182d 	.word	0x0800182d
 800188c:	080018e1 	.word	0x080018e1
 8001890:	0800182d 	.word	0x0800182d
 8001894:	0800182d 	.word	0x0800182d
 8001898:	080019a7 	.word	0x080019a7
 800189c:	680b      	ldr	r3, [r1, #0]
 800189e:	1d1a      	adds	r2, r3, #4
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	600a      	str	r2, [r1, #0]
 80018a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80018a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80018ac:	2301      	movs	r3, #1
 80018ae:	e0a3      	b.n	80019f8 <_printf_i+0x1f4>
 80018b0:	6825      	ldr	r5, [r4, #0]
 80018b2:	6808      	ldr	r0, [r1, #0]
 80018b4:	062e      	lsls	r6, r5, #24
 80018b6:	f100 0304 	add.w	r3, r0, #4
 80018ba:	d50a      	bpl.n	80018d2 <_printf_i+0xce>
 80018bc:	6805      	ldr	r5, [r0, #0]
 80018be:	600b      	str	r3, [r1, #0]
 80018c0:	2d00      	cmp	r5, #0
 80018c2:	da03      	bge.n	80018cc <_printf_i+0xc8>
 80018c4:	232d      	movs	r3, #45	; 0x2d
 80018c6:	426d      	negs	r5, r5
 80018c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80018cc:	485e      	ldr	r0, [pc, #376]	; (8001a48 <_printf_i+0x244>)
 80018ce:	230a      	movs	r3, #10
 80018d0:	e019      	b.n	8001906 <_printf_i+0x102>
 80018d2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80018d6:	6805      	ldr	r5, [r0, #0]
 80018d8:	600b      	str	r3, [r1, #0]
 80018da:	bf18      	it	ne
 80018dc:	b22d      	sxthne	r5, r5
 80018de:	e7ef      	b.n	80018c0 <_printf_i+0xbc>
 80018e0:	680b      	ldr	r3, [r1, #0]
 80018e2:	6825      	ldr	r5, [r4, #0]
 80018e4:	1d18      	adds	r0, r3, #4
 80018e6:	6008      	str	r0, [r1, #0]
 80018e8:	0628      	lsls	r0, r5, #24
 80018ea:	d501      	bpl.n	80018f0 <_printf_i+0xec>
 80018ec:	681d      	ldr	r5, [r3, #0]
 80018ee:	e002      	b.n	80018f6 <_printf_i+0xf2>
 80018f0:	0669      	lsls	r1, r5, #25
 80018f2:	d5fb      	bpl.n	80018ec <_printf_i+0xe8>
 80018f4:	881d      	ldrh	r5, [r3, #0]
 80018f6:	4854      	ldr	r0, [pc, #336]	; (8001a48 <_printf_i+0x244>)
 80018f8:	2f6f      	cmp	r7, #111	; 0x6f
 80018fa:	bf0c      	ite	eq
 80018fc:	2308      	moveq	r3, #8
 80018fe:	230a      	movne	r3, #10
 8001900:	2100      	movs	r1, #0
 8001902:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001906:	6866      	ldr	r6, [r4, #4]
 8001908:	60a6      	str	r6, [r4, #8]
 800190a:	2e00      	cmp	r6, #0
 800190c:	bfa2      	ittt	ge
 800190e:	6821      	ldrge	r1, [r4, #0]
 8001910:	f021 0104 	bicge.w	r1, r1, #4
 8001914:	6021      	strge	r1, [r4, #0]
 8001916:	b90d      	cbnz	r5, 800191c <_printf_i+0x118>
 8001918:	2e00      	cmp	r6, #0
 800191a:	d04d      	beq.n	80019b8 <_printf_i+0x1b4>
 800191c:	4616      	mov	r6, r2
 800191e:	fbb5 f1f3 	udiv	r1, r5, r3
 8001922:	fb03 5711 	mls	r7, r3, r1, r5
 8001926:	5dc7      	ldrb	r7, [r0, r7]
 8001928:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800192c:	462f      	mov	r7, r5
 800192e:	42bb      	cmp	r3, r7
 8001930:	460d      	mov	r5, r1
 8001932:	d9f4      	bls.n	800191e <_printf_i+0x11a>
 8001934:	2b08      	cmp	r3, #8
 8001936:	d10b      	bne.n	8001950 <_printf_i+0x14c>
 8001938:	6823      	ldr	r3, [r4, #0]
 800193a:	07df      	lsls	r7, r3, #31
 800193c:	d508      	bpl.n	8001950 <_printf_i+0x14c>
 800193e:	6923      	ldr	r3, [r4, #16]
 8001940:	6861      	ldr	r1, [r4, #4]
 8001942:	4299      	cmp	r1, r3
 8001944:	bfde      	ittt	le
 8001946:	2330      	movle	r3, #48	; 0x30
 8001948:	f806 3c01 	strble.w	r3, [r6, #-1]
 800194c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001950:	1b92      	subs	r2, r2, r6
 8001952:	6122      	str	r2, [r4, #16]
 8001954:	f8cd a000 	str.w	sl, [sp]
 8001958:	464b      	mov	r3, r9
 800195a:	aa03      	add	r2, sp, #12
 800195c:	4621      	mov	r1, r4
 800195e:	4640      	mov	r0, r8
 8001960:	f7ff fee2 	bl	8001728 <_printf_common>
 8001964:	3001      	adds	r0, #1
 8001966:	d14c      	bne.n	8001a02 <_printf_i+0x1fe>
 8001968:	f04f 30ff 	mov.w	r0, #4294967295
 800196c:	b004      	add	sp, #16
 800196e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001972:	4835      	ldr	r0, [pc, #212]	; (8001a48 <_printf_i+0x244>)
 8001974:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001978:	6823      	ldr	r3, [r4, #0]
 800197a:	680e      	ldr	r6, [r1, #0]
 800197c:	061f      	lsls	r7, r3, #24
 800197e:	f856 5b04 	ldr.w	r5, [r6], #4
 8001982:	600e      	str	r6, [r1, #0]
 8001984:	d514      	bpl.n	80019b0 <_printf_i+0x1ac>
 8001986:	07d9      	lsls	r1, r3, #31
 8001988:	bf44      	itt	mi
 800198a:	f043 0320 	orrmi.w	r3, r3, #32
 800198e:	6023      	strmi	r3, [r4, #0]
 8001990:	b91d      	cbnz	r5, 800199a <_printf_i+0x196>
 8001992:	6823      	ldr	r3, [r4, #0]
 8001994:	f023 0320 	bic.w	r3, r3, #32
 8001998:	6023      	str	r3, [r4, #0]
 800199a:	2310      	movs	r3, #16
 800199c:	e7b0      	b.n	8001900 <_printf_i+0xfc>
 800199e:	6823      	ldr	r3, [r4, #0]
 80019a0:	f043 0320 	orr.w	r3, r3, #32
 80019a4:	6023      	str	r3, [r4, #0]
 80019a6:	2378      	movs	r3, #120	; 0x78
 80019a8:	4828      	ldr	r0, [pc, #160]	; (8001a4c <_printf_i+0x248>)
 80019aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80019ae:	e7e3      	b.n	8001978 <_printf_i+0x174>
 80019b0:	065e      	lsls	r6, r3, #25
 80019b2:	bf48      	it	mi
 80019b4:	b2ad      	uxthmi	r5, r5
 80019b6:	e7e6      	b.n	8001986 <_printf_i+0x182>
 80019b8:	4616      	mov	r6, r2
 80019ba:	e7bb      	b.n	8001934 <_printf_i+0x130>
 80019bc:	680b      	ldr	r3, [r1, #0]
 80019be:	6826      	ldr	r6, [r4, #0]
 80019c0:	6960      	ldr	r0, [r4, #20]
 80019c2:	1d1d      	adds	r5, r3, #4
 80019c4:	600d      	str	r5, [r1, #0]
 80019c6:	0635      	lsls	r5, r6, #24
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	d501      	bpl.n	80019d0 <_printf_i+0x1cc>
 80019cc:	6018      	str	r0, [r3, #0]
 80019ce:	e002      	b.n	80019d6 <_printf_i+0x1d2>
 80019d0:	0671      	lsls	r1, r6, #25
 80019d2:	d5fb      	bpl.n	80019cc <_printf_i+0x1c8>
 80019d4:	8018      	strh	r0, [r3, #0]
 80019d6:	2300      	movs	r3, #0
 80019d8:	6123      	str	r3, [r4, #16]
 80019da:	4616      	mov	r6, r2
 80019dc:	e7ba      	b.n	8001954 <_printf_i+0x150>
 80019de:	680b      	ldr	r3, [r1, #0]
 80019e0:	1d1a      	adds	r2, r3, #4
 80019e2:	600a      	str	r2, [r1, #0]
 80019e4:	681e      	ldr	r6, [r3, #0]
 80019e6:	6862      	ldr	r2, [r4, #4]
 80019e8:	2100      	movs	r1, #0
 80019ea:	4630      	mov	r0, r6
 80019ec:	f7fe fc08 	bl	8000200 <memchr>
 80019f0:	b108      	cbz	r0, 80019f6 <_printf_i+0x1f2>
 80019f2:	1b80      	subs	r0, r0, r6
 80019f4:	6060      	str	r0, [r4, #4]
 80019f6:	6863      	ldr	r3, [r4, #4]
 80019f8:	6123      	str	r3, [r4, #16]
 80019fa:	2300      	movs	r3, #0
 80019fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001a00:	e7a8      	b.n	8001954 <_printf_i+0x150>
 8001a02:	6923      	ldr	r3, [r4, #16]
 8001a04:	4632      	mov	r2, r6
 8001a06:	4649      	mov	r1, r9
 8001a08:	4640      	mov	r0, r8
 8001a0a:	47d0      	blx	sl
 8001a0c:	3001      	adds	r0, #1
 8001a0e:	d0ab      	beq.n	8001968 <_printf_i+0x164>
 8001a10:	6823      	ldr	r3, [r4, #0]
 8001a12:	079b      	lsls	r3, r3, #30
 8001a14:	d413      	bmi.n	8001a3e <_printf_i+0x23a>
 8001a16:	68e0      	ldr	r0, [r4, #12]
 8001a18:	9b03      	ldr	r3, [sp, #12]
 8001a1a:	4298      	cmp	r0, r3
 8001a1c:	bfb8      	it	lt
 8001a1e:	4618      	movlt	r0, r3
 8001a20:	e7a4      	b.n	800196c <_printf_i+0x168>
 8001a22:	2301      	movs	r3, #1
 8001a24:	4632      	mov	r2, r6
 8001a26:	4649      	mov	r1, r9
 8001a28:	4640      	mov	r0, r8
 8001a2a:	47d0      	blx	sl
 8001a2c:	3001      	adds	r0, #1
 8001a2e:	d09b      	beq.n	8001968 <_printf_i+0x164>
 8001a30:	3501      	adds	r5, #1
 8001a32:	68e3      	ldr	r3, [r4, #12]
 8001a34:	9903      	ldr	r1, [sp, #12]
 8001a36:	1a5b      	subs	r3, r3, r1
 8001a38:	42ab      	cmp	r3, r5
 8001a3a:	dcf2      	bgt.n	8001a22 <_printf_i+0x21e>
 8001a3c:	e7eb      	b.n	8001a16 <_printf_i+0x212>
 8001a3e:	2500      	movs	r5, #0
 8001a40:	f104 0619 	add.w	r6, r4, #25
 8001a44:	e7f5      	b.n	8001a32 <_printf_i+0x22e>
 8001a46:	bf00      	nop
 8001a48:	08002165 	.word	0x08002165
 8001a4c:	08002176 	.word	0x08002176

08001a50 <_sbrk_r>:
 8001a50:	b538      	push	{r3, r4, r5, lr}
 8001a52:	4d06      	ldr	r5, [pc, #24]	; (8001a6c <_sbrk_r+0x1c>)
 8001a54:	2300      	movs	r3, #0
 8001a56:	4604      	mov	r4, r0
 8001a58:	4608      	mov	r0, r1
 8001a5a:	602b      	str	r3, [r5, #0]
 8001a5c:	f7fe ff02 	bl	8000864 <_sbrk>
 8001a60:	1c43      	adds	r3, r0, #1
 8001a62:	d102      	bne.n	8001a6a <_sbrk_r+0x1a>
 8001a64:	682b      	ldr	r3, [r5, #0]
 8001a66:	b103      	cbz	r3, 8001a6a <_sbrk_r+0x1a>
 8001a68:	6023      	str	r3, [r4, #0]
 8001a6a:	bd38      	pop	{r3, r4, r5, pc}
 8001a6c:	20000098 	.word	0x20000098

08001a70 <__sread>:
 8001a70:	b510      	push	{r4, lr}
 8001a72:	460c      	mov	r4, r1
 8001a74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a78:	f000 fab4 	bl	8001fe4 <_read_r>
 8001a7c:	2800      	cmp	r0, #0
 8001a7e:	bfab      	itete	ge
 8001a80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001a82:	89a3      	ldrhlt	r3, [r4, #12]
 8001a84:	181b      	addge	r3, r3, r0
 8001a86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001a8a:	bfac      	ite	ge
 8001a8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8001a8e:	81a3      	strhlt	r3, [r4, #12]
 8001a90:	bd10      	pop	{r4, pc}

08001a92 <__swrite>:
 8001a92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a96:	461f      	mov	r7, r3
 8001a98:	898b      	ldrh	r3, [r1, #12]
 8001a9a:	05db      	lsls	r3, r3, #23
 8001a9c:	4605      	mov	r5, r0
 8001a9e:	460c      	mov	r4, r1
 8001aa0:	4616      	mov	r6, r2
 8001aa2:	d505      	bpl.n	8001ab0 <__swrite+0x1e>
 8001aa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f000 f9c8 	bl	8001e40 <_lseek_r>
 8001ab0:	89a3      	ldrh	r3, [r4, #12]
 8001ab2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001ab6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001aba:	81a3      	strh	r3, [r4, #12]
 8001abc:	4632      	mov	r2, r6
 8001abe:	463b      	mov	r3, r7
 8001ac0:	4628      	mov	r0, r5
 8001ac2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001ac6:	f000 b869 	b.w	8001b9c <_write_r>

08001aca <__sseek>:
 8001aca:	b510      	push	{r4, lr}
 8001acc:	460c      	mov	r4, r1
 8001ace:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ad2:	f000 f9b5 	bl	8001e40 <_lseek_r>
 8001ad6:	1c43      	adds	r3, r0, #1
 8001ad8:	89a3      	ldrh	r3, [r4, #12]
 8001ada:	bf15      	itete	ne
 8001adc:	6560      	strne	r0, [r4, #84]	; 0x54
 8001ade:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001ae2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001ae6:	81a3      	strheq	r3, [r4, #12]
 8001ae8:	bf18      	it	ne
 8001aea:	81a3      	strhne	r3, [r4, #12]
 8001aec:	bd10      	pop	{r4, pc}

08001aee <__sclose>:
 8001aee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001af2:	f000 b8d3 	b.w	8001c9c <_close_r>
	...

08001af8 <__swbuf_r>:
 8001af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001afa:	460e      	mov	r6, r1
 8001afc:	4614      	mov	r4, r2
 8001afe:	4605      	mov	r5, r0
 8001b00:	b118      	cbz	r0, 8001b0a <__swbuf_r+0x12>
 8001b02:	6983      	ldr	r3, [r0, #24]
 8001b04:	b90b      	cbnz	r3, 8001b0a <__swbuf_r+0x12>
 8001b06:	f7ff fbbb 	bl	8001280 <__sinit>
 8001b0a:	4b21      	ldr	r3, [pc, #132]	; (8001b90 <__swbuf_r+0x98>)
 8001b0c:	429c      	cmp	r4, r3
 8001b0e:	d12b      	bne.n	8001b68 <__swbuf_r+0x70>
 8001b10:	686c      	ldr	r4, [r5, #4]
 8001b12:	69a3      	ldr	r3, [r4, #24]
 8001b14:	60a3      	str	r3, [r4, #8]
 8001b16:	89a3      	ldrh	r3, [r4, #12]
 8001b18:	071a      	lsls	r2, r3, #28
 8001b1a:	d52f      	bpl.n	8001b7c <__swbuf_r+0x84>
 8001b1c:	6923      	ldr	r3, [r4, #16]
 8001b1e:	b36b      	cbz	r3, 8001b7c <__swbuf_r+0x84>
 8001b20:	6923      	ldr	r3, [r4, #16]
 8001b22:	6820      	ldr	r0, [r4, #0]
 8001b24:	1ac0      	subs	r0, r0, r3
 8001b26:	6963      	ldr	r3, [r4, #20]
 8001b28:	b2f6      	uxtb	r6, r6
 8001b2a:	4283      	cmp	r3, r0
 8001b2c:	4637      	mov	r7, r6
 8001b2e:	dc04      	bgt.n	8001b3a <__swbuf_r+0x42>
 8001b30:	4621      	mov	r1, r4
 8001b32:	4628      	mov	r0, r5
 8001b34:	f000 f948 	bl	8001dc8 <_fflush_r>
 8001b38:	bb30      	cbnz	r0, 8001b88 <__swbuf_r+0x90>
 8001b3a:	68a3      	ldr	r3, [r4, #8]
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	60a3      	str	r3, [r4, #8]
 8001b40:	6823      	ldr	r3, [r4, #0]
 8001b42:	1c5a      	adds	r2, r3, #1
 8001b44:	6022      	str	r2, [r4, #0]
 8001b46:	701e      	strb	r6, [r3, #0]
 8001b48:	6963      	ldr	r3, [r4, #20]
 8001b4a:	3001      	adds	r0, #1
 8001b4c:	4283      	cmp	r3, r0
 8001b4e:	d004      	beq.n	8001b5a <__swbuf_r+0x62>
 8001b50:	89a3      	ldrh	r3, [r4, #12]
 8001b52:	07db      	lsls	r3, r3, #31
 8001b54:	d506      	bpl.n	8001b64 <__swbuf_r+0x6c>
 8001b56:	2e0a      	cmp	r6, #10
 8001b58:	d104      	bne.n	8001b64 <__swbuf_r+0x6c>
 8001b5a:	4621      	mov	r1, r4
 8001b5c:	4628      	mov	r0, r5
 8001b5e:	f000 f933 	bl	8001dc8 <_fflush_r>
 8001b62:	b988      	cbnz	r0, 8001b88 <__swbuf_r+0x90>
 8001b64:	4638      	mov	r0, r7
 8001b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b68:	4b0a      	ldr	r3, [pc, #40]	; (8001b94 <__swbuf_r+0x9c>)
 8001b6a:	429c      	cmp	r4, r3
 8001b6c:	d101      	bne.n	8001b72 <__swbuf_r+0x7a>
 8001b6e:	68ac      	ldr	r4, [r5, #8]
 8001b70:	e7cf      	b.n	8001b12 <__swbuf_r+0x1a>
 8001b72:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <__swbuf_r+0xa0>)
 8001b74:	429c      	cmp	r4, r3
 8001b76:	bf08      	it	eq
 8001b78:	68ec      	ldreq	r4, [r5, #12]
 8001b7a:	e7ca      	b.n	8001b12 <__swbuf_r+0x1a>
 8001b7c:	4621      	mov	r1, r4
 8001b7e:	4628      	mov	r0, r5
 8001b80:	f000 f81e 	bl	8001bc0 <__swsetup_r>
 8001b84:	2800      	cmp	r0, #0
 8001b86:	d0cb      	beq.n	8001b20 <__swbuf_r+0x28>
 8001b88:	f04f 37ff 	mov.w	r7, #4294967295
 8001b8c:	e7ea      	b.n	8001b64 <__swbuf_r+0x6c>
 8001b8e:	bf00      	nop
 8001b90:	08002114 	.word	0x08002114
 8001b94:	08002134 	.word	0x08002134
 8001b98:	080020f4 	.word	0x080020f4

08001b9c <_write_r>:
 8001b9c:	b538      	push	{r3, r4, r5, lr}
 8001b9e:	4d07      	ldr	r5, [pc, #28]	; (8001bbc <_write_r+0x20>)
 8001ba0:	4604      	mov	r4, r0
 8001ba2:	4608      	mov	r0, r1
 8001ba4:	4611      	mov	r1, r2
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	602a      	str	r2, [r5, #0]
 8001baa:	461a      	mov	r2, r3
 8001bac:	f7fe fe09 	bl	80007c2 <_write>
 8001bb0:	1c43      	adds	r3, r0, #1
 8001bb2:	d102      	bne.n	8001bba <_write_r+0x1e>
 8001bb4:	682b      	ldr	r3, [r5, #0]
 8001bb6:	b103      	cbz	r3, 8001bba <_write_r+0x1e>
 8001bb8:	6023      	str	r3, [r4, #0]
 8001bba:	bd38      	pop	{r3, r4, r5, pc}
 8001bbc:	20000098 	.word	0x20000098

08001bc0 <__swsetup_r>:
 8001bc0:	4b32      	ldr	r3, [pc, #200]	; (8001c8c <__swsetup_r+0xcc>)
 8001bc2:	b570      	push	{r4, r5, r6, lr}
 8001bc4:	681d      	ldr	r5, [r3, #0]
 8001bc6:	4606      	mov	r6, r0
 8001bc8:	460c      	mov	r4, r1
 8001bca:	b125      	cbz	r5, 8001bd6 <__swsetup_r+0x16>
 8001bcc:	69ab      	ldr	r3, [r5, #24]
 8001bce:	b913      	cbnz	r3, 8001bd6 <__swsetup_r+0x16>
 8001bd0:	4628      	mov	r0, r5
 8001bd2:	f7ff fb55 	bl	8001280 <__sinit>
 8001bd6:	4b2e      	ldr	r3, [pc, #184]	; (8001c90 <__swsetup_r+0xd0>)
 8001bd8:	429c      	cmp	r4, r3
 8001bda:	d10f      	bne.n	8001bfc <__swsetup_r+0x3c>
 8001bdc:	686c      	ldr	r4, [r5, #4]
 8001bde:	89a3      	ldrh	r3, [r4, #12]
 8001be0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001be4:	0719      	lsls	r1, r3, #28
 8001be6:	d42c      	bmi.n	8001c42 <__swsetup_r+0x82>
 8001be8:	06dd      	lsls	r5, r3, #27
 8001bea:	d411      	bmi.n	8001c10 <__swsetup_r+0x50>
 8001bec:	2309      	movs	r3, #9
 8001bee:	6033      	str	r3, [r6, #0]
 8001bf0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001bf4:	81a3      	strh	r3, [r4, #12]
 8001bf6:	f04f 30ff 	mov.w	r0, #4294967295
 8001bfa:	e03e      	b.n	8001c7a <__swsetup_r+0xba>
 8001bfc:	4b25      	ldr	r3, [pc, #148]	; (8001c94 <__swsetup_r+0xd4>)
 8001bfe:	429c      	cmp	r4, r3
 8001c00:	d101      	bne.n	8001c06 <__swsetup_r+0x46>
 8001c02:	68ac      	ldr	r4, [r5, #8]
 8001c04:	e7eb      	b.n	8001bde <__swsetup_r+0x1e>
 8001c06:	4b24      	ldr	r3, [pc, #144]	; (8001c98 <__swsetup_r+0xd8>)
 8001c08:	429c      	cmp	r4, r3
 8001c0a:	bf08      	it	eq
 8001c0c:	68ec      	ldreq	r4, [r5, #12]
 8001c0e:	e7e6      	b.n	8001bde <__swsetup_r+0x1e>
 8001c10:	0758      	lsls	r0, r3, #29
 8001c12:	d512      	bpl.n	8001c3a <__swsetup_r+0x7a>
 8001c14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001c16:	b141      	cbz	r1, 8001c2a <__swsetup_r+0x6a>
 8001c18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001c1c:	4299      	cmp	r1, r3
 8001c1e:	d002      	beq.n	8001c26 <__swsetup_r+0x66>
 8001c20:	4630      	mov	r0, r6
 8001c22:	f000 f98f 	bl	8001f44 <_free_r>
 8001c26:	2300      	movs	r3, #0
 8001c28:	6363      	str	r3, [r4, #52]	; 0x34
 8001c2a:	89a3      	ldrh	r3, [r4, #12]
 8001c2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001c30:	81a3      	strh	r3, [r4, #12]
 8001c32:	2300      	movs	r3, #0
 8001c34:	6063      	str	r3, [r4, #4]
 8001c36:	6923      	ldr	r3, [r4, #16]
 8001c38:	6023      	str	r3, [r4, #0]
 8001c3a:	89a3      	ldrh	r3, [r4, #12]
 8001c3c:	f043 0308 	orr.w	r3, r3, #8
 8001c40:	81a3      	strh	r3, [r4, #12]
 8001c42:	6923      	ldr	r3, [r4, #16]
 8001c44:	b94b      	cbnz	r3, 8001c5a <__swsetup_r+0x9a>
 8001c46:	89a3      	ldrh	r3, [r4, #12]
 8001c48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001c4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c50:	d003      	beq.n	8001c5a <__swsetup_r+0x9a>
 8001c52:	4621      	mov	r1, r4
 8001c54:	4630      	mov	r0, r6
 8001c56:	f000 f929 	bl	8001eac <__smakebuf_r>
 8001c5a:	89a0      	ldrh	r0, [r4, #12]
 8001c5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001c60:	f010 0301 	ands.w	r3, r0, #1
 8001c64:	d00a      	beq.n	8001c7c <__swsetup_r+0xbc>
 8001c66:	2300      	movs	r3, #0
 8001c68:	60a3      	str	r3, [r4, #8]
 8001c6a:	6963      	ldr	r3, [r4, #20]
 8001c6c:	425b      	negs	r3, r3
 8001c6e:	61a3      	str	r3, [r4, #24]
 8001c70:	6923      	ldr	r3, [r4, #16]
 8001c72:	b943      	cbnz	r3, 8001c86 <__swsetup_r+0xc6>
 8001c74:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001c78:	d1ba      	bne.n	8001bf0 <__swsetup_r+0x30>
 8001c7a:	bd70      	pop	{r4, r5, r6, pc}
 8001c7c:	0781      	lsls	r1, r0, #30
 8001c7e:	bf58      	it	pl
 8001c80:	6963      	ldrpl	r3, [r4, #20]
 8001c82:	60a3      	str	r3, [r4, #8]
 8001c84:	e7f4      	b.n	8001c70 <__swsetup_r+0xb0>
 8001c86:	2000      	movs	r0, #0
 8001c88:	e7f7      	b.n	8001c7a <__swsetup_r+0xba>
 8001c8a:	bf00      	nop
 8001c8c:	20000000 	.word	0x20000000
 8001c90:	08002114 	.word	0x08002114
 8001c94:	08002134 	.word	0x08002134
 8001c98:	080020f4 	.word	0x080020f4

08001c9c <_close_r>:
 8001c9c:	b538      	push	{r3, r4, r5, lr}
 8001c9e:	4d06      	ldr	r5, [pc, #24]	; (8001cb8 <_close_r+0x1c>)
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	4604      	mov	r4, r0
 8001ca4:	4608      	mov	r0, r1
 8001ca6:	602b      	str	r3, [r5, #0]
 8001ca8:	f7fe fda7 	bl	80007fa <_close>
 8001cac:	1c43      	adds	r3, r0, #1
 8001cae:	d102      	bne.n	8001cb6 <_close_r+0x1a>
 8001cb0:	682b      	ldr	r3, [r5, #0]
 8001cb2:	b103      	cbz	r3, 8001cb6 <_close_r+0x1a>
 8001cb4:	6023      	str	r3, [r4, #0]
 8001cb6:	bd38      	pop	{r3, r4, r5, pc}
 8001cb8:	20000098 	.word	0x20000098

08001cbc <__sflush_r>:
 8001cbc:	898a      	ldrh	r2, [r1, #12]
 8001cbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cc2:	4605      	mov	r5, r0
 8001cc4:	0710      	lsls	r0, r2, #28
 8001cc6:	460c      	mov	r4, r1
 8001cc8:	d458      	bmi.n	8001d7c <__sflush_r+0xc0>
 8001cca:	684b      	ldr	r3, [r1, #4]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	dc05      	bgt.n	8001cdc <__sflush_r+0x20>
 8001cd0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	dc02      	bgt.n	8001cdc <__sflush_r+0x20>
 8001cd6:	2000      	movs	r0, #0
 8001cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001cdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001cde:	2e00      	cmp	r6, #0
 8001ce0:	d0f9      	beq.n	8001cd6 <__sflush_r+0x1a>
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001ce8:	682f      	ldr	r7, [r5, #0]
 8001cea:	602b      	str	r3, [r5, #0]
 8001cec:	d032      	beq.n	8001d54 <__sflush_r+0x98>
 8001cee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001cf0:	89a3      	ldrh	r3, [r4, #12]
 8001cf2:	075a      	lsls	r2, r3, #29
 8001cf4:	d505      	bpl.n	8001d02 <__sflush_r+0x46>
 8001cf6:	6863      	ldr	r3, [r4, #4]
 8001cf8:	1ac0      	subs	r0, r0, r3
 8001cfa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001cfc:	b10b      	cbz	r3, 8001d02 <__sflush_r+0x46>
 8001cfe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d00:	1ac0      	subs	r0, r0, r3
 8001d02:	2300      	movs	r3, #0
 8001d04:	4602      	mov	r2, r0
 8001d06:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001d08:	6a21      	ldr	r1, [r4, #32]
 8001d0a:	4628      	mov	r0, r5
 8001d0c:	47b0      	blx	r6
 8001d0e:	1c43      	adds	r3, r0, #1
 8001d10:	89a3      	ldrh	r3, [r4, #12]
 8001d12:	d106      	bne.n	8001d22 <__sflush_r+0x66>
 8001d14:	6829      	ldr	r1, [r5, #0]
 8001d16:	291d      	cmp	r1, #29
 8001d18:	d82c      	bhi.n	8001d74 <__sflush_r+0xb8>
 8001d1a:	4a2a      	ldr	r2, [pc, #168]	; (8001dc4 <__sflush_r+0x108>)
 8001d1c:	40ca      	lsrs	r2, r1
 8001d1e:	07d6      	lsls	r6, r2, #31
 8001d20:	d528      	bpl.n	8001d74 <__sflush_r+0xb8>
 8001d22:	2200      	movs	r2, #0
 8001d24:	6062      	str	r2, [r4, #4]
 8001d26:	04d9      	lsls	r1, r3, #19
 8001d28:	6922      	ldr	r2, [r4, #16]
 8001d2a:	6022      	str	r2, [r4, #0]
 8001d2c:	d504      	bpl.n	8001d38 <__sflush_r+0x7c>
 8001d2e:	1c42      	adds	r2, r0, #1
 8001d30:	d101      	bne.n	8001d36 <__sflush_r+0x7a>
 8001d32:	682b      	ldr	r3, [r5, #0]
 8001d34:	b903      	cbnz	r3, 8001d38 <__sflush_r+0x7c>
 8001d36:	6560      	str	r0, [r4, #84]	; 0x54
 8001d38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001d3a:	602f      	str	r7, [r5, #0]
 8001d3c:	2900      	cmp	r1, #0
 8001d3e:	d0ca      	beq.n	8001cd6 <__sflush_r+0x1a>
 8001d40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001d44:	4299      	cmp	r1, r3
 8001d46:	d002      	beq.n	8001d4e <__sflush_r+0x92>
 8001d48:	4628      	mov	r0, r5
 8001d4a:	f000 f8fb 	bl	8001f44 <_free_r>
 8001d4e:	2000      	movs	r0, #0
 8001d50:	6360      	str	r0, [r4, #52]	; 0x34
 8001d52:	e7c1      	b.n	8001cd8 <__sflush_r+0x1c>
 8001d54:	6a21      	ldr	r1, [r4, #32]
 8001d56:	2301      	movs	r3, #1
 8001d58:	4628      	mov	r0, r5
 8001d5a:	47b0      	blx	r6
 8001d5c:	1c41      	adds	r1, r0, #1
 8001d5e:	d1c7      	bne.n	8001cf0 <__sflush_r+0x34>
 8001d60:	682b      	ldr	r3, [r5, #0]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d0c4      	beq.n	8001cf0 <__sflush_r+0x34>
 8001d66:	2b1d      	cmp	r3, #29
 8001d68:	d001      	beq.n	8001d6e <__sflush_r+0xb2>
 8001d6a:	2b16      	cmp	r3, #22
 8001d6c:	d101      	bne.n	8001d72 <__sflush_r+0xb6>
 8001d6e:	602f      	str	r7, [r5, #0]
 8001d70:	e7b1      	b.n	8001cd6 <__sflush_r+0x1a>
 8001d72:	89a3      	ldrh	r3, [r4, #12]
 8001d74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d78:	81a3      	strh	r3, [r4, #12]
 8001d7a:	e7ad      	b.n	8001cd8 <__sflush_r+0x1c>
 8001d7c:	690f      	ldr	r7, [r1, #16]
 8001d7e:	2f00      	cmp	r7, #0
 8001d80:	d0a9      	beq.n	8001cd6 <__sflush_r+0x1a>
 8001d82:	0793      	lsls	r3, r2, #30
 8001d84:	680e      	ldr	r6, [r1, #0]
 8001d86:	bf08      	it	eq
 8001d88:	694b      	ldreq	r3, [r1, #20]
 8001d8a:	600f      	str	r7, [r1, #0]
 8001d8c:	bf18      	it	ne
 8001d8e:	2300      	movne	r3, #0
 8001d90:	eba6 0807 	sub.w	r8, r6, r7
 8001d94:	608b      	str	r3, [r1, #8]
 8001d96:	f1b8 0f00 	cmp.w	r8, #0
 8001d9a:	dd9c      	ble.n	8001cd6 <__sflush_r+0x1a>
 8001d9c:	6a21      	ldr	r1, [r4, #32]
 8001d9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001da0:	4643      	mov	r3, r8
 8001da2:	463a      	mov	r2, r7
 8001da4:	4628      	mov	r0, r5
 8001da6:	47b0      	blx	r6
 8001da8:	2800      	cmp	r0, #0
 8001daa:	dc06      	bgt.n	8001dba <__sflush_r+0xfe>
 8001dac:	89a3      	ldrh	r3, [r4, #12]
 8001dae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001db2:	81a3      	strh	r3, [r4, #12]
 8001db4:	f04f 30ff 	mov.w	r0, #4294967295
 8001db8:	e78e      	b.n	8001cd8 <__sflush_r+0x1c>
 8001dba:	4407      	add	r7, r0
 8001dbc:	eba8 0800 	sub.w	r8, r8, r0
 8001dc0:	e7e9      	b.n	8001d96 <__sflush_r+0xda>
 8001dc2:	bf00      	nop
 8001dc4:	20400001 	.word	0x20400001

08001dc8 <_fflush_r>:
 8001dc8:	b538      	push	{r3, r4, r5, lr}
 8001dca:	690b      	ldr	r3, [r1, #16]
 8001dcc:	4605      	mov	r5, r0
 8001dce:	460c      	mov	r4, r1
 8001dd0:	b913      	cbnz	r3, 8001dd8 <_fflush_r+0x10>
 8001dd2:	2500      	movs	r5, #0
 8001dd4:	4628      	mov	r0, r5
 8001dd6:	bd38      	pop	{r3, r4, r5, pc}
 8001dd8:	b118      	cbz	r0, 8001de2 <_fflush_r+0x1a>
 8001dda:	6983      	ldr	r3, [r0, #24]
 8001ddc:	b90b      	cbnz	r3, 8001de2 <_fflush_r+0x1a>
 8001dde:	f7ff fa4f 	bl	8001280 <__sinit>
 8001de2:	4b14      	ldr	r3, [pc, #80]	; (8001e34 <_fflush_r+0x6c>)
 8001de4:	429c      	cmp	r4, r3
 8001de6:	d11b      	bne.n	8001e20 <_fflush_r+0x58>
 8001de8:	686c      	ldr	r4, [r5, #4]
 8001dea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d0ef      	beq.n	8001dd2 <_fflush_r+0xa>
 8001df2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001df4:	07d0      	lsls	r0, r2, #31
 8001df6:	d404      	bmi.n	8001e02 <_fflush_r+0x3a>
 8001df8:	0599      	lsls	r1, r3, #22
 8001dfa:	d402      	bmi.n	8001e02 <_fflush_r+0x3a>
 8001dfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001dfe:	f7ff fadd 	bl	80013bc <__retarget_lock_acquire_recursive>
 8001e02:	4628      	mov	r0, r5
 8001e04:	4621      	mov	r1, r4
 8001e06:	f7ff ff59 	bl	8001cbc <__sflush_r>
 8001e0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001e0c:	07da      	lsls	r2, r3, #31
 8001e0e:	4605      	mov	r5, r0
 8001e10:	d4e0      	bmi.n	8001dd4 <_fflush_r+0xc>
 8001e12:	89a3      	ldrh	r3, [r4, #12]
 8001e14:	059b      	lsls	r3, r3, #22
 8001e16:	d4dd      	bmi.n	8001dd4 <_fflush_r+0xc>
 8001e18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001e1a:	f7ff fad0 	bl	80013be <__retarget_lock_release_recursive>
 8001e1e:	e7d9      	b.n	8001dd4 <_fflush_r+0xc>
 8001e20:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <_fflush_r+0x70>)
 8001e22:	429c      	cmp	r4, r3
 8001e24:	d101      	bne.n	8001e2a <_fflush_r+0x62>
 8001e26:	68ac      	ldr	r4, [r5, #8]
 8001e28:	e7df      	b.n	8001dea <_fflush_r+0x22>
 8001e2a:	4b04      	ldr	r3, [pc, #16]	; (8001e3c <_fflush_r+0x74>)
 8001e2c:	429c      	cmp	r4, r3
 8001e2e:	bf08      	it	eq
 8001e30:	68ec      	ldreq	r4, [r5, #12]
 8001e32:	e7da      	b.n	8001dea <_fflush_r+0x22>
 8001e34:	08002114 	.word	0x08002114
 8001e38:	08002134 	.word	0x08002134
 8001e3c:	080020f4 	.word	0x080020f4

08001e40 <_lseek_r>:
 8001e40:	b538      	push	{r3, r4, r5, lr}
 8001e42:	4d07      	ldr	r5, [pc, #28]	; (8001e60 <_lseek_r+0x20>)
 8001e44:	4604      	mov	r4, r0
 8001e46:	4608      	mov	r0, r1
 8001e48:	4611      	mov	r1, r2
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	602a      	str	r2, [r5, #0]
 8001e4e:	461a      	mov	r2, r3
 8001e50:	f7fe fcfa 	bl	8000848 <_lseek>
 8001e54:	1c43      	adds	r3, r0, #1
 8001e56:	d102      	bne.n	8001e5e <_lseek_r+0x1e>
 8001e58:	682b      	ldr	r3, [r5, #0]
 8001e5a:	b103      	cbz	r3, 8001e5e <_lseek_r+0x1e>
 8001e5c:	6023      	str	r3, [r4, #0]
 8001e5e:	bd38      	pop	{r3, r4, r5, pc}
 8001e60:	20000098 	.word	0x20000098

08001e64 <__swhatbuf_r>:
 8001e64:	b570      	push	{r4, r5, r6, lr}
 8001e66:	460e      	mov	r6, r1
 8001e68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e6c:	2900      	cmp	r1, #0
 8001e6e:	b096      	sub	sp, #88	; 0x58
 8001e70:	4614      	mov	r4, r2
 8001e72:	461d      	mov	r5, r3
 8001e74:	da07      	bge.n	8001e86 <__swhatbuf_r+0x22>
 8001e76:	2300      	movs	r3, #0
 8001e78:	602b      	str	r3, [r5, #0]
 8001e7a:	89b3      	ldrh	r3, [r6, #12]
 8001e7c:	061a      	lsls	r2, r3, #24
 8001e7e:	d410      	bmi.n	8001ea2 <__swhatbuf_r+0x3e>
 8001e80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e84:	e00e      	b.n	8001ea4 <__swhatbuf_r+0x40>
 8001e86:	466a      	mov	r2, sp
 8001e88:	f000 f8be 	bl	8002008 <_fstat_r>
 8001e8c:	2800      	cmp	r0, #0
 8001e8e:	dbf2      	blt.n	8001e76 <__swhatbuf_r+0x12>
 8001e90:	9a01      	ldr	r2, [sp, #4]
 8001e92:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001e96:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001e9a:	425a      	negs	r2, r3
 8001e9c:	415a      	adcs	r2, r3
 8001e9e:	602a      	str	r2, [r5, #0]
 8001ea0:	e7ee      	b.n	8001e80 <__swhatbuf_r+0x1c>
 8001ea2:	2340      	movs	r3, #64	; 0x40
 8001ea4:	2000      	movs	r0, #0
 8001ea6:	6023      	str	r3, [r4, #0]
 8001ea8:	b016      	add	sp, #88	; 0x58
 8001eaa:	bd70      	pop	{r4, r5, r6, pc}

08001eac <__smakebuf_r>:
 8001eac:	898b      	ldrh	r3, [r1, #12]
 8001eae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001eb0:	079d      	lsls	r5, r3, #30
 8001eb2:	4606      	mov	r6, r0
 8001eb4:	460c      	mov	r4, r1
 8001eb6:	d507      	bpl.n	8001ec8 <__smakebuf_r+0x1c>
 8001eb8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001ebc:	6023      	str	r3, [r4, #0]
 8001ebe:	6123      	str	r3, [r4, #16]
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	6163      	str	r3, [r4, #20]
 8001ec4:	b002      	add	sp, #8
 8001ec6:	bd70      	pop	{r4, r5, r6, pc}
 8001ec8:	ab01      	add	r3, sp, #4
 8001eca:	466a      	mov	r2, sp
 8001ecc:	f7ff ffca 	bl	8001e64 <__swhatbuf_r>
 8001ed0:	9900      	ldr	r1, [sp, #0]
 8001ed2:	4605      	mov	r5, r0
 8001ed4:	4630      	mov	r0, r6
 8001ed6:	f7ff fa73 	bl	80013c0 <_malloc_r>
 8001eda:	b948      	cbnz	r0, 8001ef0 <__smakebuf_r+0x44>
 8001edc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ee0:	059a      	lsls	r2, r3, #22
 8001ee2:	d4ef      	bmi.n	8001ec4 <__smakebuf_r+0x18>
 8001ee4:	f023 0303 	bic.w	r3, r3, #3
 8001ee8:	f043 0302 	orr.w	r3, r3, #2
 8001eec:	81a3      	strh	r3, [r4, #12]
 8001eee:	e7e3      	b.n	8001eb8 <__smakebuf_r+0xc>
 8001ef0:	4b0d      	ldr	r3, [pc, #52]	; (8001f28 <__smakebuf_r+0x7c>)
 8001ef2:	62b3      	str	r3, [r6, #40]	; 0x28
 8001ef4:	89a3      	ldrh	r3, [r4, #12]
 8001ef6:	6020      	str	r0, [r4, #0]
 8001ef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001efc:	81a3      	strh	r3, [r4, #12]
 8001efe:	9b00      	ldr	r3, [sp, #0]
 8001f00:	6163      	str	r3, [r4, #20]
 8001f02:	9b01      	ldr	r3, [sp, #4]
 8001f04:	6120      	str	r0, [r4, #16]
 8001f06:	b15b      	cbz	r3, 8001f20 <__smakebuf_r+0x74>
 8001f08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001f0c:	4630      	mov	r0, r6
 8001f0e:	f000 f88d 	bl	800202c <_isatty_r>
 8001f12:	b128      	cbz	r0, 8001f20 <__smakebuf_r+0x74>
 8001f14:	89a3      	ldrh	r3, [r4, #12]
 8001f16:	f023 0303 	bic.w	r3, r3, #3
 8001f1a:	f043 0301 	orr.w	r3, r3, #1
 8001f1e:	81a3      	strh	r3, [r4, #12]
 8001f20:	89a0      	ldrh	r0, [r4, #12]
 8001f22:	4305      	orrs	r5, r0
 8001f24:	81a5      	strh	r5, [r4, #12]
 8001f26:	e7cd      	b.n	8001ec4 <__smakebuf_r+0x18>
 8001f28:	08001219 	.word	0x08001219

08001f2c <__malloc_lock>:
 8001f2c:	4801      	ldr	r0, [pc, #4]	; (8001f34 <__malloc_lock+0x8>)
 8001f2e:	f7ff ba45 	b.w	80013bc <__retarget_lock_acquire_recursive>
 8001f32:	bf00      	nop
 8001f34:	20000090 	.word	0x20000090

08001f38 <__malloc_unlock>:
 8001f38:	4801      	ldr	r0, [pc, #4]	; (8001f40 <__malloc_unlock+0x8>)
 8001f3a:	f7ff ba40 	b.w	80013be <__retarget_lock_release_recursive>
 8001f3e:	bf00      	nop
 8001f40:	20000090 	.word	0x20000090

08001f44 <_free_r>:
 8001f44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001f46:	2900      	cmp	r1, #0
 8001f48:	d048      	beq.n	8001fdc <_free_r+0x98>
 8001f4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001f4e:	9001      	str	r0, [sp, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	f1a1 0404 	sub.w	r4, r1, #4
 8001f56:	bfb8      	it	lt
 8001f58:	18e4      	addlt	r4, r4, r3
 8001f5a:	f7ff ffe7 	bl	8001f2c <__malloc_lock>
 8001f5e:	4a20      	ldr	r2, [pc, #128]	; (8001fe0 <_free_r+0x9c>)
 8001f60:	9801      	ldr	r0, [sp, #4]
 8001f62:	6813      	ldr	r3, [r2, #0]
 8001f64:	4615      	mov	r5, r2
 8001f66:	b933      	cbnz	r3, 8001f76 <_free_r+0x32>
 8001f68:	6063      	str	r3, [r4, #4]
 8001f6a:	6014      	str	r4, [r2, #0]
 8001f6c:	b003      	add	sp, #12
 8001f6e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001f72:	f7ff bfe1 	b.w	8001f38 <__malloc_unlock>
 8001f76:	42a3      	cmp	r3, r4
 8001f78:	d90b      	bls.n	8001f92 <_free_r+0x4e>
 8001f7a:	6821      	ldr	r1, [r4, #0]
 8001f7c:	1862      	adds	r2, r4, r1
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	bf04      	itt	eq
 8001f82:	681a      	ldreq	r2, [r3, #0]
 8001f84:	685b      	ldreq	r3, [r3, #4]
 8001f86:	6063      	str	r3, [r4, #4]
 8001f88:	bf04      	itt	eq
 8001f8a:	1852      	addeq	r2, r2, r1
 8001f8c:	6022      	streq	r2, [r4, #0]
 8001f8e:	602c      	str	r4, [r5, #0]
 8001f90:	e7ec      	b.n	8001f6c <_free_r+0x28>
 8001f92:	461a      	mov	r2, r3
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	b10b      	cbz	r3, 8001f9c <_free_r+0x58>
 8001f98:	42a3      	cmp	r3, r4
 8001f9a:	d9fa      	bls.n	8001f92 <_free_r+0x4e>
 8001f9c:	6811      	ldr	r1, [r2, #0]
 8001f9e:	1855      	adds	r5, r2, r1
 8001fa0:	42a5      	cmp	r5, r4
 8001fa2:	d10b      	bne.n	8001fbc <_free_r+0x78>
 8001fa4:	6824      	ldr	r4, [r4, #0]
 8001fa6:	4421      	add	r1, r4
 8001fa8:	1854      	adds	r4, r2, r1
 8001faa:	42a3      	cmp	r3, r4
 8001fac:	6011      	str	r1, [r2, #0]
 8001fae:	d1dd      	bne.n	8001f6c <_free_r+0x28>
 8001fb0:	681c      	ldr	r4, [r3, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	6053      	str	r3, [r2, #4]
 8001fb6:	4421      	add	r1, r4
 8001fb8:	6011      	str	r1, [r2, #0]
 8001fba:	e7d7      	b.n	8001f6c <_free_r+0x28>
 8001fbc:	d902      	bls.n	8001fc4 <_free_r+0x80>
 8001fbe:	230c      	movs	r3, #12
 8001fc0:	6003      	str	r3, [r0, #0]
 8001fc2:	e7d3      	b.n	8001f6c <_free_r+0x28>
 8001fc4:	6825      	ldr	r5, [r4, #0]
 8001fc6:	1961      	adds	r1, r4, r5
 8001fc8:	428b      	cmp	r3, r1
 8001fca:	bf04      	itt	eq
 8001fcc:	6819      	ldreq	r1, [r3, #0]
 8001fce:	685b      	ldreq	r3, [r3, #4]
 8001fd0:	6063      	str	r3, [r4, #4]
 8001fd2:	bf04      	itt	eq
 8001fd4:	1949      	addeq	r1, r1, r5
 8001fd6:	6021      	streq	r1, [r4, #0]
 8001fd8:	6054      	str	r4, [r2, #4]
 8001fda:	e7c7      	b.n	8001f6c <_free_r+0x28>
 8001fdc:	b003      	add	sp, #12
 8001fde:	bd30      	pop	{r4, r5, pc}
 8001fe0:	20000084 	.word	0x20000084

08001fe4 <_read_r>:
 8001fe4:	b538      	push	{r3, r4, r5, lr}
 8001fe6:	4d07      	ldr	r5, [pc, #28]	; (8002004 <_read_r+0x20>)
 8001fe8:	4604      	mov	r4, r0
 8001fea:	4608      	mov	r0, r1
 8001fec:	4611      	mov	r1, r2
 8001fee:	2200      	movs	r2, #0
 8001ff0:	602a      	str	r2, [r5, #0]
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	f7fe fbc8 	bl	8000788 <_read>
 8001ff8:	1c43      	adds	r3, r0, #1
 8001ffa:	d102      	bne.n	8002002 <_read_r+0x1e>
 8001ffc:	682b      	ldr	r3, [r5, #0]
 8001ffe:	b103      	cbz	r3, 8002002 <_read_r+0x1e>
 8002000:	6023      	str	r3, [r4, #0]
 8002002:	bd38      	pop	{r3, r4, r5, pc}
 8002004:	20000098 	.word	0x20000098

08002008 <_fstat_r>:
 8002008:	b538      	push	{r3, r4, r5, lr}
 800200a:	4d07      	ldr	r5, [pc, #28]	; (8002028 <_fstat_r+0x20>)
 800200c:	2300      	movs	r3, #0
 800200e:	4604      	mov	r4, r0
 8002010:	4608      	mov	r0, r1
 8002012:	4611      	mov	r1, r2
 8002014:	602b      	str	r3, [r5, #0]
 8002016:	f7fe fbfc 	bl	8000812 <_fstat>
 800201a:	1c43      	adds	r3, r0, #1
 800201c:	d102      	bne.n	8002024 <_fstat_r+0x1c>
 800201e:	682b      	ldr	r3, [r5, #0]
 8002020:	b103      	cbz	r3, 8002024 <_fstat_r+0x1c>
 8002022:	6023      	str	r3, [r4, #0]
 8002024:	bd38      	pop	{r3, r4, r5, pc}
 8002026:	bf00      	nop
 8002028:	20000098 	.word	0x20000098

0800202c <_isatty_r>:
 800202c:	b538      	push	{r3, r4, r5, lr}
 800202e:	4d06      	ldr	r5, [pc, #24]	; (8002048 <_isatty_r+0x1c>)
 8002030:	2300      	movs	r3, #0
 8002032:	4604      	mov	r4, r0
 8002034:	4608      	mov	r0, r1
 8002036:	602b      	str	r3, [r5, #0]
 8002038:	f7fe fbfb 	bl	8000832 <_isatty>
 800203c:	1c43      	adds	r3, r0, #1
 800203e:	d102      	bne.n	8002046 <_isatty_r+0x1a>
 8002040:	682b      	ldr	r3, [r5, #0]
 8002042:	b103      	cbz	r3, 8002046 <_isatty_r+0x1a>
 8002044:	6023      	str	r3, [r4, #0]
 8002046:	bd38      	pop	{r3, r4, r5, pc}
 8002048:	20000098 	.word	0x20000098

0800204c <_init>:
 800204c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800204e:	bf00      	nop
 8002050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002052:	bc08      	pop	{r3}
 8002054:	469e      	mov	lr, r3
 8002056:	4770      	bx	lr

08002058 <_fini>:
 8002058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800205a:	bf00      	nop
 800205c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800205e:	bc08      	pop	{r3}
 8002060:	469e      	mov	lr, r3
 8002062:	4770      	bx	lr
