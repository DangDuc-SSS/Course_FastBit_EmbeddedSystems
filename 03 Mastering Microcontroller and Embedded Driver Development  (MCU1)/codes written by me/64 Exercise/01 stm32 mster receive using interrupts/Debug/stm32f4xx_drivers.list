
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024f0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  080026a0  080026a0  000126a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800277c  0800277c  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  0800277c  0800277c  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800277c  0800277c  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800277c  0800277c  0001277c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002780  08002780  00012780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08002784  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00000084  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000100  20000100  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003a84  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000a65  00000000  00000000  00023b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000002a8  00000000  00000000  00024598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000250  00000000  00000000  00024840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000381a  00000000  00000000  00024a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002ca0  00000000  00000000  000282aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000c7fc  00000000  00000000  0002af4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00037746  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000121c  00000000  00000000  0003779c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002688 	.word	0x08002688

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000080 	.word	0x20000080
 80001ec:	08002688 	.word	0x08002688

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <delay>:

#define MY_ADDR			0x61
#define SLAVE_ADDR		0x68

void delay(void)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i++);
 8000296:	2300      	movs	r3, #0
 8000298:	607b      	str	r3, [r7, #4]
 800029a:	e002      	b.n	80002a2 <delay+0x12>
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	3301      	adds	r3, #1
 80002a0:	607b      	str	r3, [r7, #4]
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	4a04      	ldr	r2, [pc, #16]	; (80002b8 <delay+0x28>)
 80002a6:	4293      	cmp	r3, r2
 80002a8:	d9f8      	bls.n	800029c <delay+0xc>
}
 80002aa:	bf00      	nop
 80002ac:	bf00      	nop
 80002ae:	370c      	adds	r7, #12
 80002b0:	46bd      	mov	sp, r7
 80002b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b6:	4770      	bx	lr
 80002b8:	0003d08f 	.word	0x0003d08f

080002bc <I2C1_GPIOInits>:
 * PB7 --> SDA
 * ALT function mode : 4
 */

void I2C1_GPIOInits(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CPins;

	I2CPins.pGPIOx = GPIOB;
 80002c2:	4b0e      	ldr	r3, [pc, #56]	; (80002fc <I2C1_GPIOInits+0x40>)
 80002c4:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80002c6:	2302      	movs	r3, #2
 80002c8:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OP;
 80002ca:	2301      	movs	r3, #1
 80002cc:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 80002ce:	2301      	movs	r3, #1
 80002d0:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 80002d2:	2304      	movs	r3, #4
 80002d4:	737b      	strb	r3, [r7, #13]
	I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002d6:	2302      	movs	r3, #2
 80002d8:	72bb      	strb	r3, [r7, #10]

	// scl
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 80002da:	2306      	movs	r3, #6
 80002dc:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	4618      	mov	r0, r3
 80002e2:	f001 f825 	bl	8001330 <GPIO_Init>

	// sda
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 80002e6:	2307      	movs	r3, #7
 80002e8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	4618      	mov	r0, r3
 80002ee:	f001 f81f 	bl	8001330 <GPIO_Init>


}
 80002f2:	bf00      	nop
 80002f4:	3710      	adds	r7, #16
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	40020400 	.word	0x40020400

08000300 <I2C1_Inits>:

void I2C1_Inits(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	I2C1Handle.pI2Cx = I2C1;
 8000304:	4b09      	ldr	r3, [pc, #36]	; (800032c <I2C1_Inits+0x2c>)
 8000306:	4a0a      	ldr	r2, [pc, #40]	; (8000330 <I2C1_Inits+0x30>)
 8000308:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 800030a:	4b08      	ldr	r3, [pc, #32]	; (800032c <I2C1_Inits+0x2c>)
 800030c:	2201      	movs	r2, #1
 800030e:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
 8000310:	4b06      	ldr	r3, [pc, #24]	; (800032c <I2C1_Inits+0x2c>)
 8000312:	2261      	movs	r2, #97	; 0x61
 8000314:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 8000316:	4b05      	ldr	r3, [pc, #20]	; (800032c <I2C1_Inits+0x2c>)
 8000318:	2200      	movs	r2, #0
 800031a:	815a      	strh	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 800031c:	4b03      	ldr	r3, [pc, #12]	; (800032c <I2C1_Inits+0x2c>)
 800031e:	4a05      	ldr	r2, [pc, #20]	; (8000334 <I2C1_Inits+0x34>)
 8000320:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 8000322:	4802      	ldr	r0, [pc, #8]	; (800032c <I2C1_Inits+0x2c>)
 8000324:	f000 faa8 	bl	8000878 <I2C_Init>
}
 8000328:	bf00      	nop
 800032a:	bd80      	pop	{r7, pc}
 800032c:	200000a8 	.word	0x200000a8
 8000330:	40005400 	.word	0x40005400
 8000334:	000186a0 	.word	0x000186a0

08000338 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b086      	sub	sp, #24
 800033c:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn, GpioLed;

	// this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOA;
 800033e:	4b14      	ldr	r3, [pc, #80]	; (8000390 <GPIO_ButtonInit+0x58>)
 8000340:	60fb      	str	r3, [r7, #12]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8000342:	2300      	movs	r3, #0
 8000344:	743b      	strb	r3, [r7, #16]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000346:	2300      	movs	r3, #0
 8000348:	747b      	strb	r3, [r7, #17]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800034a:	2302      	movs	r3, #2
 800034c:	74bb      	strb	r3, [r7, #18]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800034e:	2300      	movs	r3, #0
 8000350:	74fb      	strb	r3, [r7, #19]

	GPIO_PeripheralClockControl(GPIOA, ENABLE);
 8000352:	2101      	movs	r1, #1
 8000354:	480e      	ldr	r0, [pc, #56]	; (8000390 <GPIO_ButtonInit+0x58>)
 8000356:	f000 ff03 	bl	8001160 <GPIO_PeripheralClockControl>
	GPIO_Init(&GPIOBtn);
 800035a:	f107 030c 	add.w	r3, r7, #12
 800035e:	4618      	mov	r0, r3
 8000360:	f000 ffe6 	bl	8001330 <GPIO_Init>

	// this is led gpio configuration
	GpioLed.pGPIOx = GPIOD;
 8000364:	4b0b      	ldr	r3, [pc, #44]	; (8000394 <GPIO_ButtonInit+0x5c>)
 8000366:	603b      	str	r3, [r7, #0]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000368:	230c      	movs	r3, #12
 800036a:	713b      	strb	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 800036c:	2301      	movs	r3, #1
 800036e:	717b      	strb	r3, [r7, #5]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000370:	2302      	movs	r3, #2
 8000372:	71bb      	strb	r3, [r7, #6]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000374:	2300      	movs	r3, #0
 8000376:	71fb      	strb	r3, [r7, #7]

	GPIO_PeripheralClockControl(GPIOD, ENABLE);
 8000378:	2101      	movs	r1, #1
 800037a:	4806      	ldr	r0, [pc, #24]	; (8000394 <GPIO_ButtonInit+0x5c>)
 800037c:	f000 fef0 	bl	8001160 <GPIO_PeripheralClockControl>
	GPIO_Init(&GpioLed);
 8000380:	463b      	mov	r3, r7
 8000382:	4618      	mov	r0, r3
 8000384:	f000 ffd4 	bl	8001330 <GPIO_Init>
}
 8000388:	bf00      	nop
 800038a:	3718      	adds	r7, #24
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	40020000 	.word	0x40020000
 8000394:	40020c00 	.word	0x40020c00

08000398 <main>:

int main(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b084      	sub	sp, #16
 800039c:	af02      	add	r7, sp, #8
	uint8_t commandcode;
	uint8_t len;

	//initiate button
	GPIO_ButtonInit();
 800039e:	f7ff ffcb 	bl	8000338 <GPIO_ButtonInit>

	// i2c pin inits
	I2C1_GPIOInits();
 80003a2:	f7ff ff8b 	bl	80002bc <I2C1_GPIOInits>

	//i2c peripheral configuration
	I2C1_Inits();
 80003a6:	f7ff ffab 	bl	8000300 <I2C1_Inits>

	// I2C IRQ configuration
	I2C_IRQInterruptConfig(IRQ_NO_I2C1_EV, ENABLE);
 80003aa:	2101      	movs	r1, #1
 80003ac:	201f      	movs	r0, #31
 80003ae:	f000 fc19 	bl	8000be4 <I2C_IRQInterruptConfig>
	I2C_IRQInterruptConfig(IRQ_NO_I2C1_ER, ENABLE);
 80003b2:	2101      	movs	r1, #1
 80003b4:	2020      	movs	r0, #32
 80003b6:	f000 fc15 	bl	8000be4 <I2C_IRQInterruptConfig>


	//enable the peripheral
	I2C_PeripheralControl(I2C1, ENABLE);
 80003ba:	2101      	movs	r1, #1
 80003bc:	482c      	ldr	r0, [pc, #176]	; (8000470 <main+0xd8>)
 80003be:	f000 fc95 	bl	8000cec <I2C_PeripheralControl>

	//ack bit is made 1 after PE=1
	I2C_ManageAcking(I2C1, I2C_ACK_ENABLE);
 80003c2:	2101      	movs	r1, #1
 80003c4:	482a      	ldr	r0, [pc, #168]	; (8000470 <main+0xd8>)
 80003c6:	f000 fcad 	bl	8000d24 <I2C_ManageAcking>

	while(1)
	{

		// wait for button pressed
		while(! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 80003ca:	bf00      	nop
 80003cc:	2100      	movs	r1, #0
 80003ce:	4829      	ldr	r0, [pc, #164]	; (8000474 <main+0xdc>)
 80003d0:	f001 f946 	bl	8001660 <GPIO_ReadFromInputPin>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d0f8      	beq.n	80003cc <main+0x34>

		// to avoid button de-bouncing related issues 200ms of delay
		delay();
 80003da:	f7ff ff59 	bl	8000290 <delay>

		commandcode = 0x51;
 80003de:	2351      	movs	r3, #81	; 0x51
 80003e0:	71fb      	strb	r3, [r7, #7]

		while(I2C_MAsterSendDataIT(&I2C1Handle, &commandcode, 1, SLAVE_ADDR, I2C_ENABLE_SR) != I2C_READY);
 80003e2:	bf00      	nop
 80003e4:	1df9      	adds	r1, r7, #7
 80003e6:	2301      	movs	r3, #1
 80003e8:	9300      	str	r3, [sp, #0]
 80003ea:	2368      	movs	r3, #104	; 0x68
 80003ec:	2201      	movs	r2, #1
 80003ee:	4822      	ldr	r0, [pc, #136]	; (8000478 <main+0xe0>)
 80003f0:	f000 fb67 	bl	8000ac2 <I2C_MAsterSendDataIT>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d1f4      	bne.n	80003e4 <main+0x4c>

		while(I2C_MasterReceiveDataIT(&I2C1Handle, &len, 1, SLAVE_ADDR, I2C_ENABLE_SR) != I2C_READY);
 80003fa:	bf00      	nop
 80003fc:	1db9      	adds	r1, r7, #6
 80003fe:	2301      	movs	r3, #1
 8000400:	9300      	str	r3, [sp, #0]
 8000402:	2368      	movs	r3, #104	; 0x68
 8000404:	2201      	movs	r2, #1
 8000406:	481c      	ldr	r0, [pc, #112]	; (8000478 <main+0xe0>)
 8000408:	f000 fba2 	bl	8000b50 <I2C_MasterReceiveDataIT>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d1f4      	bne.n	80003fc <main+0x64>


		commandcode = 0x52;
 8000412:	2352      	movs	r3, #82	; 0x52
 8000414:	71fb      	strb	r3, [r7, #7]

		while(I2C_MAsterSendDataIT(&I2C1Handle, &commandcode, 1, SLAVE_ADDR, I2C_ENABLE_SR) != I2C_READY);
 8000416:	bf00      	nop
 8000418:	1df9      	adds	r1, r7, #7
 800041a:	2301      	movs	r3, #1
 800041c:	9300      	str	r3, [sp, #0]
 800041e:	2368      	movs	r3, #104	; 0x68
 8000420:	2201      	movs	r2, #1
 8000422:	4815      	ldr	r0, [pc, #84]	; (8000478 <main+0xe0>)
 8000424:	f000 fb4d 	bl	8000ac2 <I2C_MAsterSendDataIT>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d1f4      	bne.n	8000418 <main+0x80>

		while(I2C_MasterReceiveDataIT(&I2C1Handle, rcv_buf, len, SLAVE_ADDR, I2C_DISABLE_SR) != I2C_READY);
 800042e:	bf00      	nop
 8000430:	79ba      	ldrb	r2, [r7, #6]
 8000432:	2300      	movs	r3, #0
 8000434:	9300      	str	r3, [sp, #0]
 8000436:	2368      	movs	r3, #104	; 0x68
 8000438:	4910      	ldr	r1, [pc, #64]	; (800047c <main+0xe4>)
 800043a:	480f      	ldr	r0, [pc, #60]	; (8000478 <main+0xe0>)
 800043c:	f000 fb88 	bl	8000b50 <I2C_MasterReceiveDataIT>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d1f4      	bne.n	8000430 <main+0x98>

		rxComplt = RESET;
 8000446:	4b0e      	ldr	r3, [pc, #56]	; (8000480 <main+0xe8>)
 8000448:	2200      	movs	r2, #0
 800044a:	701a      	strb	r2, [r3, #0]

		// wait till Rx complete
		while(rxComplt != SET);
 800044c:	bf00      	nop
 800044e:	4b0c      	ldr	r3, [pc, #48]	; (8000480 <main+0xe8>)
 8000450:	781b      	ldrb	r3, [r3, #0]
 8000452:	2b01      	cmp	r3, #1
 8000454:	d1fb      	bne.n	800044e <main+0xb6>

		rcv_buf[len+1] = '\0';
 8000456:	79bb      	ldrb	r3, [r7, #6]
 8000458:	3301      	adds	r3, #1
 800045a:	4a08      	ldr	r2, [pc, #32]	; (800047c <main+0xe4>)
 800045c:	2100      	movs	r1, #0
 800045e:	54d1      	strb	r1, [r2, r3]

		printf("received : %s",rcv_buf);
 8000460:	4906      	ldr	r1, [pc, #24]	; (800047c <main+0xe4>)
 8000462:	4808      	ldr	r0, [pc, #32]	; (8000484 <main+0xec>)
 8000464:	f001 f944 	bl	80016f0 <iprintf>

		rxComplt = RESET;
 8000468:	4b05      	ldr	r3, [pc, #20]	; (8000480 <main+0xe8>)
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]
		while(! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 800046e:	e7ac      	b.n	80003ca <main+0x32>
 8000470:	40005400 	.word	0x40005400
 8000474:	40020000 	.word	0x40020000
 8000478:	200000a8 	.word	0x200000a8
 800047c:	200000d0 	.word	0x200000d0
 8000480:	20000098 	.word	0x20000098
 8000484:	080026a0 	.word	0x080026a0

08000488 <I2C1_EV_IRQHandler>:

	return 0;
}

void I2C1_EV_IRQHandler(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
	I2C_EV_IRQHandling(&I2C1Handle);
 800048c:	4802      	ldr	r0, [pc, #8]	; (8000498 <I2C1_EV_IRQHandler+0x10>)
 800048e:	f000 fc65 	bl	8000d5c <I2C_EV_IRQHandling>
}
 8000492:	bf00      	nop
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	200000a8 	.word	0x200000a8

0800049c <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
	I2C_ER_IRQHandling(&I2C1Handle);
 80004a0:	4802      	ldr	r0, [pc, #8]	; (80004ac <I2C1_ER_IRQHandler+0x10>)
 80004a2:	f000 fdd6 	bl	8001052 <I2C_ER_IRQHandling>
}
 80004a6:	bf00      	nop
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	200000a8 	.word	0x200000a8

080004b0 <I2C_ApplicationEventCallback>:

void I2C_ApplicationEventCallback(I2C_Handle_t *pI2CHandle, uint8_t AppEv)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
 80004b8:	460b      	mov	r3, r1
 80004ba:	70fb      	strb	r3, [r7, #3]
	if(AppEv == I2C_EV_TX_CMPLT)
 80004bc:	78fb      	ldrb	r3, [r7, #3]
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d103      	bne.n	80004ca <I2C_ApplicationEventCallback+0x1a>
	{
		printf("Tx is complete\n");
 80004c2:	4810      	ldr	r0, [pc, #64]	; (8000504 <I2C_ApplicationEventCallback+0x54>)
 80004c4:	f001 f99a 	bl	80017fc <puts>
		I2C_generateStopCondition(pI2CHandle->pI2Cx);

		// Hang in infinite loop
		while(1);
	}
}
 80004c8:	e018      	b.n	80004fc <I2C_ApplicationEventCallback+0x4c>
	else if(AppEv == I2C_EV_RX_CMPLT)
 80004ca:	78fb      	ldrb	r3, [r7, #3]
 80004cc:	2b01      	cmp	r3, #1
 80004ce:	d106      	bne.n	80004de <I2C_ApplicationEventCallback+0x2e>
		printf("Rx is complete\n");
 80004d0:	480d      	ldr	r0, [pc, #52]	; (8000508 <I2C_ApplicationEventCallback+0x58>)
 80004d2:	f001 f993 	bl	80017fc <puts>
		rxComplt = SET;
 80004d6:	4b0d      	ldr	r3, [pc, #52]	; (800050c <I2C_ApplicationEventCallback+0x5c>)
 80004d8:	2201      	movs	r2, #1
 80004da:	701a      	strb	r2, [r3, #0]
}
 80004dc:	e00e      	b.n	80004fc <I2C_ApplicationEventCallback+0x4c>
	else if(AppEv == I2C_ERROR_AF)
 80004de:	78fb      	ldrb	r3, [r7, #3]
 80004e0:	2b05      	cmp	r3, #5
 80004e2:	d10b      	bne.n	80004fc <I2C_ApplicationEventCallback+0x4c>
		printf("Error : Ack Failure\n");
 80004e4:	480a      	ldr	r0, [pc, #40]	; (8000510 <I2C_ApplicationEventCallback+0x60>)
 80004e6:	f001 f989 	bl	80017fc <puts>
		I2C_CloseSendData(pI2CHandle);
 80004ea:	6878      	ldr	r0, [r7, #4]
 80004ec:	f000 fd8e 	bl	800100c <I2C_CloseSendData>
		I2C_generateStopCondition(pI2CHandle->pI2Cx);
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4618      	mov	r0, r3
 80004f6:	f000 fad4 	bl	8000aa2 <I2C_generateStopCondition>
		while(1);
 80004fa:	e7fe      	b.n	80004fa <I2C_ApplicationEventCallback+0x4a>
}
 80004fc:	bf00      	nop
 80004fe:	3708      	adds	r7, #8
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	080026b0 	.word	0x080026b0
 8000508:	080026c0 	.word	0x080026c0
 800050c:	20000098 	.word	0x20000098
 8000510:	080026d0 	.word	0x080026d0

08000514 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	4603      	mov	r3, r0
 800051c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800051e:	4b0f      	ldr	r3, [pc, #60]	; (800055c <ITM_SendChar+0x48>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	4a0e      	ldr	r2, [pc, #56]	; (800055c <ITM_SendChar+0x48>)
 8000524:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000528:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800052a:	4b0d      	ldr	r3, [pc, #52]	; (8000560 <ITM_SendChar+0x4c>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	4a0c      	ldr	r2, [pc, #48]	; (8000560 <ITM_SendChar+0x4c>)
 8000530:	f043 0301 	orr.w	r3, r3, #1
 8000534:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000536:	bf00      	nop
 8000538:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	f003 0301 	and.w	r3, r3, #1
 8000542:	2b00      	cmp	r3, #0
 8000544:	d0f8      	beq.n	8000538 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000546:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	6013      	str	r3, [r2, #0]
}
 800054e:	bf00      	nop
 8000550:	370c      	adds	r7, #12
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	e000edfc 	.word	0xe000edfc
 8000560:	e0000e00 	.word	0xe0000e00

08000564 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b086      	sub	sp, #24
 8000568:	af00      	add	r7, sp, #0
 800056a:	60f8      	str	r0, [r7, #12]
 800056c:	60b9      	str	r1, [r7, #8]
 800056e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000570:	2300      	movs	r3, #0
 8000572:	617b      	str	r3, [r7, #20]
 8000574:	e00a      	b.n	800058c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000576:	f3af 8000 	nop.w
 800057a:	4601      	mov	r1, r0
 800057c:	68bb      	ldr	r3, [r7, #8]
 800057e:	1c5a      	adds	r2, r3, #1
 8000580:	60ba      	str	r2, [r7, #8]
 8000582:	b2ca      	uxtb	r2, r1
 8000584:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000586:	697b      	ldr	r3, [r7, #20]
 8000588:	3301      	adds	r3, #1
 800058a:	617b      	str	r3, [r7, #20]
 800058c:	697a      	ldr	r2, [r7, #20]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	429a      	cmp	r2, r3
 8000592:	dbf0      	blt.n	8000576 <_read+0x12>
	}

return len;
 8000594:	687b      	ldr	r3, [r7, #4]
}
 8000596:	4618      	mov	r0, r3
 8000598:	3718      	adds	r7, #24
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}

0800059e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800059e:	b580      	push	{r7, lr}
 80005a0:	b086      	sub	sp, #24
 80005a2:	af00      	add	r7, sp, #0
 80005a4:	60f8      	str	r0, [r7, #12]
 80005a6:	60b9      	str	r1, [r7, #8]
 80005a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005aa:	2300      	movs	r3, #0
 80005ac:	617b      	str	r3, [r7, #20]
 80005ae:	e009      	b.n	80005c4 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80005b0:	68bb      	ldr	r3, [r7, #8]
 80005b2:	1c5a      	adds	r2, r3, #1
 80005b4:	60ba      	str	r2, [r7, #8]
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	4618      	mov	r0, r3
 80005ba:	f7ff ffab 	bl	8000514 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005be:	697b      	ldr	r3, [r7, #20]
 80005c0:	3301      	adds	r3, #1
 80005c2:	617b      	str	r3, [r7, #20]
 80005c4:	697a      	ldr	r2, [r7, #20]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	429a      	cmp	r2, r3
 80005ca:	dbf1      	blt.n	80005b0 <_write+0x12>
	}
	return len;
 80005cc:	687b      	ldr	r3, [r7, #4]
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	3718      	adds	r7, #24
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}

080005d6 <_close>:

int _close(int file)
{
 80005d6:	b480      	push	{r7}
 80005d8:	b083      	sub	sp, #12
 80005da:	af00      	add	r7, sp, #0
 80005dc:	6078      	str	r0, [r7, #4]
	return -1;
 80005de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr

080005ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005ee:	b480      	push	{r7}
 80005f0:	b083      	sub	sp, #12
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	6078      	str	r0, [r7, #4]
 80005f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005fe:	605a      	str	r2, [r3, #4]
	return 0;
 8000600:	2300      	movs	r3, #0
}
 8000602:	4618      	mov	r0, r3
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr

0800060e <_isatty>:

int _isatty(int file)
{
 800060e:	b480      	push	{r7}
 8000610:	b083      	sub	sp, #12
 8000612:	af00      	add	r7, sp, #0
 8000614:	6078      	str	r0, [r7, #4]
	return 1;
 8000616:	2301      	movs	r3, #1
}
 8000618:	4618      	mov	r0, r3
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr

08000624 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	60f8      	str	r0, [r7, #12]
 800062c:	60b9      	str	r1, [r7, #8]
 800062e:	607a      	str	r2, [r7, #4]
	return 0;
 8000630:	2300      	movs	r3, #0
}
 8000632:	4618      	mov	r0, r3
 8000634:	3714      	adds	r7, #20
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
	...

08000640 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b086      	sub	sp, #24
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000648:	4a14      	ldr	r2, [pc, #80]	; (800069c <_sbrk+0x5c>)
 800064a:	4b15      	ldr	r3, [pc, #84]	; (80006a0 <_sbrk+0x60>)
 800064c:	1ad3      	subs	r3, r2, r3
 800064e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000654:	4b13      	ldr	r3, [pc, #76]	; (80006a4 <_sbrk+0x64>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d102      	bne.n	8000662 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800065c:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <_sbrk+0x64>)
 800065e:	4a12      	ldr	r2, [pc, #72]	; (80006a8 <_sbrk+0x68>)
 8000660:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000662:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <_sbrk+0x64>)
 8000664:	681a      	ldr	r2, [r3, #0]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	4413      	add	r3, r2
 800066a:	693a      	ldr	r2, [r7, #16]
 800066c:	429a      	cmp	r2, r3
 800066e:	d207      	bcs.n	8000680 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000670:	f001 f80c 	bl	800168c <__errno>
 8000674:	4603      	mov	r3, r0
 8000676:	220c      	movs	r2, #12
 8000678:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800067a:	f04f 33ff 	mov.w	r3, #4294967295
 800067e:	e009      	b.n	8000694 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000680:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <_sbrk+0x64>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000686:	4b07      	ldr	r3, [pc, #28]	; (80006a4 <_sbrk+0x64>)
 8000688:	681a      	ldr	r2, [r3, #0]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	4413      	add	r3, r2
 800068e:	4a05      	ldr	r2, [pc, #20]	; (80006a4 <_sbrk+0x64>)
 8000690:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000692:	68fb      	ldr	r3, [r7, #12]
}
 8000694:	4618      	mov	r0, r3
 8000696:	3718      	adds	r7, #24
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20020000 	.word	0x20020000
 80006a0:	00000400 	.word	0x00000400
 80006a4:	2000009c 	.word	0x2000009c
 80006a8:	20000100 	.word	0x20000100

080006ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006ac:	480d      	ldr	r0, [pc, #52]	; (80006e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006ae:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80006b0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006b4:	480c      	ldr	r0, [pc, #48]	; (80006e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80006b6:	490d      	ldr	r1, [pc, #52]	; (80006ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80006b8:	4a0d      	ldr	r2, [pc, #52]	; (80006f0 <LoopForever+0xe>)
  movs r3, #0
 80006ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006bc:	e002      	b.n	80006c4 <LoopCopyDataInit>

080006be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006c2:	3304      	adds	r3, #4

080006c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006c8:	d3f9      	bcc.n	80006be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ca:	4a0a      	ldr	r2, [pc, #40]	; (80006f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006cc:	4c0a      	ldr	r4, [pc, #40]	; (80006f8 <LoopForever+0x16>)
  movs r3, #0
 80006ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006d0:	e001      	b.n	80006d6 <LoopFillZerobss>

080006d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006d4:	3204      	adds	r2, #4

080006d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006d8:	d3fb      	bcc.n	80006d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006da:	f000 ffdd 	bl	8001698 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006de:	f7ff fe5b 	bl	8000398 <main>

080006e2 <LoopForever>:

LoopForever:
    b LoopForever
 80006e2:	e7fe      	b.n	80006e2 <LoopForever>
  ldr   r0, =_estack
 80006e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006ec:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80006f0:	08002784 	.word	0x08002784
  ldr r2, =_sbss
 80006f4:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80006f8:	20000100 	.word	0x20000100

080006fc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006fc:	e7fe      	b.n	80006fc <ADC_IRQHandler>
	...

08000700 <I2C_PeripheralClockControl>:
 *
 *@Note					-
 *
 */
void I2C_PeripheralClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	460b      	mov	r3, r1
 800070a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800070c:	78fb      	ldrb	r3, [r7, #3]
 800070e:	2b01      	cmp	r3, #1
 8000710:	d120      	bne.n	8000754 <I2C_PeripheralClockControl+0x54>
	{
		if(pI2Cx == I2C1)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	4a22      	ldr	r2, [pc, #136]	; (80007a0 <I2C_PeripheralClockControl+0xa0>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d106      	bne.n	8000728 <I2C_PeripheralClockControl+0x28>
		{
			I2C1_PCLK_EN();
 800071a:	4b22      	ldr	r3, [pc, #136]	; (80007a4 <I2C_PeripheralClockControl+0xa4>)
 800071c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071e:	4a21      	ldr	r2, [pc, #132]	; (80007a4 <I2C_PeripheralClockControl+0xa4>)
 8000720:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000724:	6413      	str	r3, [r2, #64]	; 0x40
		else if(pI2Cx == I2C3)
		{
			I2C3_PCLK_DI();
		}
	}
}
 8000726:	e035      	b.n	8000794 <I2C_PeripheralClockControl+0x94>
		else if(pI2Cx == I2C2)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <I2C_PeripheralClockControl+0xa8>)
 800072c:	4293      	cmp	r3, r2
 800072e:	d106      	bne.n	800073e <I2C_PeripheralClockControl+0x3e>
			I2C2_PCLK_EN();
 8000730:	4b1c      	ldr	r3, [pc, #112]	; (80007a4 <I2C_PeripheralClockControl+0xa4>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000734:	4a1b      	ldr	r2, [pc, #108]	; (80007a4 <I2C_PeripheralClockControl+0xa4>)
 8000736:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800073a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800073c:	e02a      	b.n	8000794 <I2C_PeripheralClockControl+0x94>
		else if(pI2Cx == I2C3)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	4a1a      	ldr	r2, [pc, #104]	; (80007ac <I2C_PeripheralClockControl+0xac>)
 8000742:	4293      	cmp	r3, r2
 8000744:	d126      	bne.n	8000794 <I2C_PeripheralClockControl+0x94>
			I2C3_PCLK_EN();
 8000746:	4b17      	ldr	r3, [pc, #92]	; (80007a4 <I2C_PeripheralClockControl+0xa4>)
 8000748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074a:	4a16      	ldr	r2, [pc, #88]	; (80007a4 <I2C_PeripheralClockControl+0xa4>)
 800074c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000750:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000752:	e01f      	b.n	8000794 <I2C_PeripheralClockControl+0x94>
		if(pI2Cx == I2C1)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	4a12      	ldr	r2, [pc, #72]	; (80007a0 <I2C_PeripheralClockControl+0xa0>)
 8000758:	4293      	cmp	r3, r2
 800075a:	d106      	bne.n	800076a <I2C_PeripheralClockControl+0x6a>
			I2C1_PCLK_DI();
 800075c:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <I2C_PeripheralClockControl+0xa4>)
 800075e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000760:	4a10      	ldr	r2, [pc, #64]	; (80007a4 <I2C_PeripheralClockControl+0xa4>)
 8000762:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000766:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000768:	e014      	b.n	8000794 <I2C_PeripheralClockControl+0x94>
		else if(pI2Cx == I2C2)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	4a0e      	ldr	r2, [pc, #56]	; (80007a8 <I2C_PeripheralClockControl+0xa8>)
 800076e:	4293      	cmp	r3, r2
 8000770:	d106      	bne.n	8000780 <I2C_PeripheralClockControl+0x80>
			I2C2_PCLK_DI();
 8000772:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <I2C_PeripheralClockControl+0xa4>)
 8000774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000776:	4a0b      	ldr	r2, [pc, #44]	; (80007a4 <I2C_PeripheralClockControl+0xa4>)
 8000778:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800077c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800077e:	e009      	b.n	8000794 <I2C_PeripheralClockControl+0x94>
		else if(pI2Cx == I2C3)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	4a0a      	ldr	r2, [pc, #40]	; (80007ac <I2C_PeripheralClockControl+0xac>)
 8000784:	4293      	cmp	r3, r2
 8000786:	d105      	bne.n	8000794 <I2C_PeripheralClockControl+0x94>
			I2C3_PCLK_DI();
 8000788:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <I2C_PeripheralClockControl+0xa4>)
 800078a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078c:	4a05      	ldr	r2, [pc, #20]	; (80007a4 <I2C_PeripheralClockControl+0xa4>)
 800078e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000792:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000794:	bf00      	nop
 8000796:	370c      	adds	r7, #12
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr
 80007a0:	40005400 	.word	0x40005400
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40005800 	.word	0x40005800
 80007ac:	40005c00 	.word	0x40005c00

080007b0 <RCC_GETPLLOutputClock>:

uint32_t RCC_GETPLLOutputClock(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
	return 160000000; // dummy value to be implemented
 80007b4:	4b02      	ldr	r3, [pc, #8]	; (80007c0 <RCC_GETPLLOutputClock+0x10>)
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr
 80007c0:	09896800 	.word	0x09896800

080007c4 <RCC_GetPCLK1Value>:


uint32_t RCC_GetPCLK1Value(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
	uint32_t pclk1, SystemClk;

	uint8_t clkSrc, temp, ahbp, apb1;
	clkSrc = ((RCC->CFGR >> 2) & 0x03);
 80007ca:	4b26      	ldr	r3, [pc, #152]	; (8000864 <RCC_GetPCLK1Value+0xa0>)
 80007cc:	689b      	ldr	r3, [r3, #8]
 80007ce:	089b      	lsrs	r3, r3, #2
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	f003 0303 	and.w	r3, r3, #3
 80007d6:	727b      	strb	r3, [r7, #9]

	if(clkSrc == 0)
 80007d8:	7a7b      	ldrb	r3, [r7, #9]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d102      	bne.n	80007e4 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 80007de:	4b22      	ldr	r3, [pc, #136]	; (8000868 <RCC_GetPCLK1Value+0xa4>)
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	e00b      	b.n	80007fc <RCC_GetPCLK1Value+0x38>
	}
	else if(clkSrc == 1)
 80007e4:	7a7b      	ldrb	r3, [r7, #9]
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d102      	bne.n	80007f0 <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 80007ea:	4b20      	ldr	r3, [pc, #128]	; (800086c <RCC_GetPCLK1Value+0xa8>)
 80007ec:	60fb      	str	r3, [r7, #12]
 80007ee:	e005      	b.n	80007fc <RCC_GetPCLK1Value+0x38>
	}
	else if(clkSrc == 2)
 80007f0:	7a7b      	ldrb	r3, [r7, #9]
 80007f2:	2b02      	cmp	r3, #2
 80007f4:	d102      	bne.n	80007fc <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GETPLLOutputClock();
 80007f6:	f7ff ffdb 	bl	80007b0 <RCC_GETPLLOutputClock>
 80007fa:	60f8      	str	r0, [r7, #12]
	}

	// ahbp
	temp = ((RCC->CFGR >> 4) & 0xF);
 80007fc:	4b19      	ldr	r3, [pc, #100]	; (8000864 <RCC_GetPCLK1Value+0xa0>)
 80007fe:	689b      	ldr	r3, [r3, #8]
 8000800:	091b      	lsrs	r3, r3, #4
 8000802:	b2db      	uxtb	r3, r3
 8000804:	f003 030f 	and.w	r3, r3, #15
 8000808:	723b      	strb	r3, [r7, #8]
	if(temp < 8)
 800080a:	7a3b      	ldrb	r3, [r7, #8]
 800080c:	2b07      	cmp	r3, #7
 800080e:	d802      	bhi.n	8000816 <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 8000810:	2301      	movs	r3, #1
 8000812:	72fb      	strb	r3, [r7, #11]
 8000814:	e005      	b.n	8000822 <RCC_GetPCLK1Value+0x5e>
	}
	else
	{
		ahbp = AHB_PreScalar[temp - 8];
 8000816:	7a3b      	ldrb	r3, [r7, #8]
 8000818:	3b08      	subs	r3, #8
 800081a:	4a15      	ldr	r2, [pc, #84]	; (8000870 <RCC_GetPCLK1Value+0xac>)
 800081c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000820:	72fb      	strb	r3, [r7, #11]
	}

	// apb1
	temp = ((RCC->CFGR >> 10) & 0x7);
 8000822:	4b10      	ldr	r3, [pc, #64]	; (8000864 <RCC_GetPCLK1Value+0xa0>)
 8000824:	689b      	ldr	r3, [r3, #8]
 8000826:	0a9b      	lsrs	r3, r3, #10
 8000828:	b2db      	uxtb	r3, r3
 800082a:	f003 0307 	and.w	r3, r3, #7
 800082e:	723b      	strb	r3, [r7, #8]
	if(temp < 4)
 8000830:	7a3b      	ldrb	r3, [r7, #8]
 8000832:	2b03      	cmp	r3, #3
 8000834:	d802      	bhi.n	800083c <RCC_GetPCLK1Value+0x78>
	{
		apb1 = 1;
 8000836:	2301      	movs	r3, #1
 8000838:	72bb      	strb	r3, [r7, #10]
 800083a:	e005      	b.n	8000848 <RCC_GetPCLK1Value+0x84>
	}
	else
	{
		apb1 = APB1_PreScalar[temp - 4];
 800083c:	7a3b      	ldrb	r3, [r7, #8]
 800083e:	3b04      	subs	r3, #4
 8000840:	4a0c      	ldr	r2, [pc, #48]	; (8000874 <RCC_GetPCLK1Value+0xb0>)
 8000842:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000846:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = (SystemClk / ahbp) / apb1;
 8000848:	7afb      	ldrb	r3, [r7, #11]
 800084a:	68fa      	ldr	r2, [r7, #12]
 800084c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000850:	7abb      	ldrb	r3, [r7, #10]
 8000852:	fbb2 f3f3 	udiv	r3, r2, r3
 8000856:	607b      	str	r3, [r7, #4]

	return pclk1;
 8000858:	687b      	ldr	r3, [r7, #4]
}
 800085a:	4618      	mov	r0, r3
 800085c:	3710      	adds	r7, #16
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40023800 	.word	0x40023800
 8000868:	00f42400 	.word	0x00f42400
 800086c:	007a1200 	.word	0x007a1200
 8000870:	20000000 	.word	0x20000000
 8000874:	20000010 	.word	0x20000010

08000878 <I2C_Init>:
 *
 *@Note					-
 *
 */
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
	// enable the clock for the i2cx peripheral
	I2C_PeripheralClockControl(pI2CHandle->pI2Cx, ENABLE);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2101      	movs	r1, #1
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff ff3a 	bl	8000700 <I2C_PeripheralClockControl>

	uint32_t tempreg = 0;
 800088c:	2300      	movs	r3, #0
 800088e:	60fb      	str	r3, [r7, #12]


	// configure the FREQ field of CR2
	tempreg |= RCC_GetPCLK1Value() / 1000000U;
 8000890:	f7ff ff98 	bl	80007c4 <RCC_GetPCLK1Value>
 8000894:	4603      	mov	r3, r0
 8000896:	4a46      	ldr	r2, [pc, #280]	; (80009b0 <I2C_Init+0x138>)
 8000898:	fba2 2303 	umull	r2, r3, r2, r3
 800089c:	0c9b      	lsrs	r3, r3, #18
 800089e:	68fa      	ldr	r2, [r7, #12]
 80008a0:	4313      	orrs	r3, r2
 80008a2:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 = (tempreg & 0x3F);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	68fa      	ldr	r2, [r7, #12]
 80008aa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80008ae:	605a      	str	r2, [r3, #4]

	// program the device own address
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	7a1b      	ldrb	r3, [r3, #8]
 80008b4:	005b      	lsls	r3, r3, #1
 80008b6:	461a      	mov	r2, r3
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	4313      	orrs	r3, r2
 80008bc:	60fb      	str	r3, [r7, #12]
	tempreg |= (1 << 14);
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008c4:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	68fa      	ldr	r2, [r7, #12]
 80008cc:	609a      	str	r2, [r3, #8]

	// CCR calculation
	uint16_t ccr_value = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]

	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	4a36      	ldr	r2, [pc, #216]	; (80009b4 <I2C_Init+0x13c>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d80f      	bhi.n	8000900 <I2C_Init+0x88>
	{
		// mode is standard mode
		ccr_value = RCC_GetPCLK1Value() / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 80008e0:	f7ff ff70 	bl	80007c4 <RCC_GetPCLK1Value>
 80008e4:	4602      	mov	r2, r0
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	685b      	ldr	r3, [r3, #4]
 80008ea:	005b      	lsls	r3, r3, #1
 80008ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80008f0:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 80008f2:	897b      	ldrh	r3, [r7, #10]
 80008f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80008f8:	68fa      	ldr	r2, [r7, #12]
 80008fa:	4313      	orrs	r3, r2
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	e02b      	b.n	8000958 <I2C_Init+0xe0>
	}
	else
	{
		// mode is fast mode
		tempreg |= (1 << 15);
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000906:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	895b      	ldrh	r3, [r3, #10]
 800090c:	039b      	lsls	r3, r3, #14
 800090e:	461a      	mov	r2, r3
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	4313      	orrs	r3, r2
 8000914:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	895b      	ldrh	r3, [r3, #10]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d10b      	bne.n	8000936 <I2C_Init+0xbe>
		{
			ccr_value = RCC_GetPCLK1Value() / (3 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 800091e:	f7ff ff51 	bl	80007c4 <RCC_GetPCLK1Value>
 8000922:	4601      	mov	r1, r0
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	685a      	ldr	r2, [r3, #4]
 8000928:	4613      	mov	r3, r2
 800092a:	005b      	lsls	r3, r3, #1
 800092c:	4413      	add	r3, r2
 800092e:	fbb1 f3f3 	udiv	r3, r1, r3
 8000932:	817b      	strh	r3, [r7, #10]
 8000934:	e00c      	b.n	8000950 <I2C_Init+0xd8>
		}
		else
		{
			ccr_value = RCC_GetPCLK1Value() / (25 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000936:	f7ff ff45 	bl	80007c4 <RCC_GetPCLK1Value>
 800093a:	4601      	mov	r1, r0
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	685a      	ldr	r2, [r3, #4]
 8000940:	4613      	mov	r3, r2
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	4413      	add	r3, r2
 8000946:	009a      	lsls	r2, r3, #2
 8000948:	4413      	add	r3, r2
 800094a:	fbb1 f3f3 	udiv	r3, r1, r3
 800094e:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= ccr_value;
 8000950:	897b      	ldrh	r3, [r7, #10]
 8000952:	68fa      	ldr	r2, [r7, #12]
 8000954:	4313      	orrs	r3, r2
 8000956:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	68fa      	ldr	r2, [r7, #12]
 800095e:	61da      	str	r2, [r3, #28]

	// TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	4a13      	ldr	r2, [pc, #76]	; (80009b4 <I2C_Init+0x13c>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d809      	bhi.n	800097e <I2C_Init+0x106>
	{
		// mode is standard mode
		tempreg = (RCC_GetPCLK1Value() / 1000000U) + 1;
 800096a:	f7ff ff2b 	bl	80007c4 <RCC_GetPCLK1Value>
 800096e:	4603      	mov	r3, r0
 8000970:	4a0f      	ldr	r2, [pc, #60]	; (80009b0 <I2C_Init+0x138>)
 8000972:	fba2 2303 	umull	r2, r3, r2, r3
 8000976:	0c9b      	lsrs	r3, r3, #18
 8000978:	3301      	adds	r3, #1
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	e00d      	b.n	800099a <I2C_Init+0x122>
	}
	else
	{
		// mode is fast mode
		tempreg = ((RCC_GetPCLK1Value() * 300) / 1000000000U) + 1;
 800097e:	f7ff ff21 	bl	80007c4 <RCC_GetPCLK1Value>
 8000982:	4603      	mov	r3, r0
 8000984:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000988:	fb02 f303 	mul.w	r3, r2, r3
 800098c:	0a5b      	lsrs	r3, r3, #9
 800098e:	4a0a      	ldr	r2, [pc, #40]	; (80009b8 <I2C_Init+0x140>)
 8000990:	fba2 2303 	umull	r2, r3, r2, r3
 8000994:	09db      	lsrs	r3, r3, #7
 8000996:	3301      	adds	r3, #1
 8000998:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	68fa      	ldr	r2, [r7, #12]
 80009a0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80009a4:	621a      	str	r2, [r3, #32]


}
 80009a6:	bf00      	nop
 80009a8:	3710      	adds	r7, #16
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	431bde83 	.word	0x431bde83
 80009b4:	000186a0 	.word	0x000186a0
 80009b8:	00044b83 	.word	0x00044b83

080009bc <I2C_generateStartCondition>:
		I2C_generateStopCondition(pI2CHandle->pI2Cx);


}
static void I2C_generateStartCondition(I2C_RegDef_t *pI2Cx)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_START);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	601a      	str	r2, [r3, #0]
}
 80009d0:	bf00      	nop
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <I2C_ExecuteAddressPhaseWrite>:
static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t slaveAddr)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	460b      	mov	r3, r1
 80009e6:	70fb      	strb	r3, [r7, #3]
	slaveAddr = slaveAddr << 1;
 80009e8:	78fb      	ldrb	r3, [r7, #3]
 80009ea:	005b      	lsls	r3, r3, #1
 80009ec:	70fb      	strb	r3, [r7, #3]
	slaveAddr &= ~(1 << 0);
 80009ee:	78fb      	ldrb	r3, [r7, #3]
 80009f0:	f023 0301 	bic.w	r3, r3, #1
 80009f4:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = slaveAddr;
 80009f6:	78fa      	ldrb	r2, [r7, #3]
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	611a      	str	r2, [r3, #16]
}
 80009fc:	bf00      	nop
 80009fe:	370c      	adds	r7, #12
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr

08000a08 <I2C_ExecuteAddressPhaseRead>:
static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t slaveAddr)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	460b      	mov	r3, r1
 8000a12:	70fb      	strb	r3, [r7, #3]
	slaveAddr = slaveAddr << 1;
 8000a14:	78fb      	ldrb	r3, [r7, #3]
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	70fb      	strb	r3, [r7, #3]
	slaveAddr |= (1 << 0);
 8000a1a:	78fb      	ldrb	r3, [r7, #3]
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = slaveAddr;
 8000a22:	78fa      	ldrb	r2, [r7, #3]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	611a      	str	r2, [r3, #16]
}
 8000a28:	bf00      	nop
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <I2C_ClearADDRFlag>:
static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
	uint32_t dummyRead;
	// check for device mode
	if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL))
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	699b      	ldr	r3, [r3, #24]
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d01f      	beq.n	8000a8a <I2C_ClearADDRFlag+0x56>
	{
		// device is in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	7f1b      	ldrb	r3, [r3, #28]
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d112      	bne.n	8000a78 <I2C_ClearADDRFlag+0x44>
		{
			if(pI2CHandle->RxSize == 1)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	6a1b      	ldr	r3, [r3, #32]
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	d11f      	bne.n	8000a9a <I2C_ClearADDRFlag+0x66>
			{
				// first disable the ack
				I2C_ManageAcking(pI2CHandle->pI2Cx, DISABLE);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	2100      	movs	r1, #0
 8000a60:	4618      	mov	r0, r3
 8000a62:	f000 f95f 	bl	8000d24 <I2C_ManageAcking>

				// clear the ADDR flag (read SR1, read SR2)
				dummyRead = pI2CHandle->pI2Cx->SR1;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	695b      	ldr	r3, [r3, #20]
 8000a6c:	60fb      	str	r3, [r7, #12]
				dummyRead = pI2CHandle->pI2Cx->SR2;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	60fb      	str	r3, [r7, #12]
		dummyRead = pI2CHandle->pI2Cx->SR2;
		(void)dummyRead;
	}


}
 8000a76:	e010      	b.n	8000a9a <I2C_ClearADDRFlag+0x66>
			dummyRead = pI2CHandle->pI2Cx->SR1;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	695b      	ldr	r3, [r3, #20]
 8000a7e:	60fb      	str	r3, [r7, #12]
			dummyRead = pI2CHandle->pI2Cx->SR2;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	699b      	ldr	r3, [r3, #24]
 8000a86:	60fb      	str	r3, [r7, #12]
}
 8000a88:	e007      	b.n	8000a9a <I2C_ClearADDRFlag+0x66>
		dummyRead = pI2CHandle->pI2Cx->SR1;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	695b      	ldr	r3, [r3, #20]
 8000a90:	60fb      	str	r3, [r7, #12]
		dummyRead = pI2CHandle->pI2Cx->SR2;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	60fb      	str	r3, [r7, #12]
}
 8000a9a:	bf00      	nop
 8000a9c:	3710      	adds	r7, #16
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <I2C_generateStopCondition>:
void I2C_generateStopCondition(I2C_RegDef_t *pI2Cx)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	b083      	sub	sp, #12
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	601a      	str	r2, [r3, #0]
}
 8000ab6:	bf00      	nop
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr

08000ac2 <I2C_MAsterSendDataIT>:
 *
 *@Note					-
 *
 */
uint8_t I2C_MAsterSendDataIT(I2C_Handle_t *pI2CHandle, uint8_t *pTxBuffer, uint8_t len, uint8_t slaveAddr, uint8_t Sr)
{
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b086      	sub	sp, #24
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	60f8      	str	r0, [r7, #12]
 8000aca:	60b9      	str	r1, [r7, #8]
 8000acc:	4611      	mov	r1, r2
 8000ace:	461a      	mov	r2, r3
 8000ad0:	460b      	mov	r3, r1
 8000ad2:	71fb      	strb	r3, [r7, #7]
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	71bb      	strb	r3, [r7, #6]
	uint8_t busystate = pI2CHandle->TxRxState;
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	7f1b      	ldrb	r3, [r3, #28]
 8000adc:	75fb      	strb	r3, [r7, #23]

	if( (busystate != I2C_BUSY_IN_TX) && (busystate != I2C_BUSY_IN_RX))
 8000ade:	7dfb      	ldrb	r3, [r7, #23]
 8000ae0:	2b02      	cmp	r3, #2
 8000ae2:	d030      	beq.n	8000b46 <I2C_MAsterSendDataIT+0x84>
 8000ae4:	7dfb      	ldrb	r3, [r7, #23]
 8000ae6:	2b01      	cmp	r3, #1
 8000ae8:	d02d      	beq.n	8000b46 <I2C_MAsterSendDataIT+0x84>
	{
		pI2CHandle->pTxBuffer = pTxBuffer;
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	68ba      	ldr	r2, [r7, #8]
 8000aee:	60da      	str	r2, [r3, #12]
		pI2CHandle->TXLen = len;
 8000af0:	79fa      	ldrb	r2, [r7, #7]
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	615a      	str	r2, [r3, #20]
		pI2CHandle->TxRxState = I2C_BUSY_IN_TX;
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	2202      	movs	r2, #2
 8000afa:	771a      	strb	r2, [r3, #28]
		pI2CHandle->DevAddr = slaveAddr;
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	79ba      	ldrb	r2, [r7, #6]
 8000b00:	775a      	strb	r2, [r3, #29]
		pI2CHandle->Sr = Sr;
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000b08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

		//Implement code to Generate START Condition
		I2C_generateStartCondition(pI2CHandle->pI2Cx);
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4618      	mov	r0, r3
 8000b12:	f7ff ff53 	bl	80009bc <I2C_generateStartCondition>

		//Implement the code to enable ITBUFEN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITBUFEN);
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	685a      	ldr	r2, [r3, #4]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000b24:	605a      	str	r2, [r3, #4]

		//Implement the code to enable ITEVFEN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITEVTEN);
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	685a      	ldr	r2, [r3, #4]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b34:	605a      	str	r2, [r3, #4]

		//Implement the code to enable ITERREN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITERREN);
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	685a      	ldr	r2, [r3, #4]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b44:	605a      	str	r2, [r3, #4]

	}

	return busystate;
 8000b46:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3718      	adds	r7, #24
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <I2C_MasterReceiveDataIT>:
 *
 *@Note					-
 *
 */
uint8_t I2C_MasterReceiveDataIT(I2C_Handle_t *pI2CHandle, uint8_t *pRxBuffer, uint8_t len, uint8_t slaveAddr, uint8_t Sr)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b086      	sub	sp, #24
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	60f8      	str	r0, [r7, #12]
 8000b58:	60b9      	str	r1, [r7, #8]
 8000b5a:	4611      	mov	r1, r2
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	460b      	mov	r3, r1
 8000b60:	71fb      	strb	r3, [r7, #7]
 8000b62:	4613      	mov	r3, r2
 8000b64:	71bb      	strb	r3, [r7, #6]

	uint8_t busystate = pI2CHandle->TxRxState;
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	7f1b      	ldrb	r3, [r3, #28]
 8000b6a:	75fb      	strb	r3, [r7, #23]

	if( (busystate != I2C_BUSY_IN_TX) && (busystate != I2C_BUSY_IN_RX))
 8000b6c:	7dfb      	ldrb	r3, [r7, #23]
 8000b6e:	2b02      	cmp	r3, #2
 8000b70:	d033      	beq.n	8000bda <I2C_MasterReceiveDataIT+0x8a>
 8000b72:	7dfb      	ldrb	r3, [r7, #23]
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d030      	beq.n	8000bda <I2C_MasterReceiveDataIT+0x8a>
	{
		pI2CHandle->pRxBuffer = pRxBuffer;
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	68ba      	ldr	r2, [r7, #8]
 8000b7c:	611a      	str	r2, [r3, #16]
		pI2CHandle->RXLen = len;
 8000b7e:	79fa      	ldrb	r2, [r7, #7]
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	619a      	str	r2, [r3, #24]
		pI2CHandle->TxRxState = I2C_BUSY_IN_RX;
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	2201      	movs	r2, #1
 8000b88:	771a      	strb	r2, [r3, #28]
		pI2CHandle->RxSize = len; //Rxsize is used in the ISR code to manage the data reception
 8000b8a:	79fa      	ldrb	r2, [r7, #7]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	621a      	str	r2, [r3, #32]
		pI2CHandle->DevAddr = slaveAddr;
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	79ba      	ldrb	r2, [r7, #6]
 8000b94:	775a      	strb	r2, [r3, #29]
		pI2CHandle->Sr = Sr;
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000b9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

		//Implement code to Generate START Condition
		I2C_generateStartCondition(pI2CHandle->pI2Cx);
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff ff09 	bl	80009bc <I2C_generateStartCondition>

		//Implement the code to enable ITBUFEN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITBUFEN);
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	685a      	ldr	r2, [r3, #4]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000bb8:	605a      	str	r2, [r3, #4]

		//Implement the code to enable ITEVFEN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITEVTEN);
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	685a      	ldr	r2, [r3, #4]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000bc8:	605a      	str	r2, [r3, #4]

		//Implement the code to enable ITERREN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITERREN);
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	685a      	ldr	r2, [r3, #4]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000bd8:	605a      	str	r2, [r3, #4]

	}

	return busystate;
 8000bda:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3718      	adds	r7, #24
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <I2C_IRQInterruptConfig>:
 *
 *@Note					-
 *
 */
void I2C_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	460a      	mov	r2, r1
 8000bee:	71fb      	strb	r3, [r7, #7]
 8000bf0:	4613      	mov	r3, r2
 8000bf2:	71bb      	strb	r3, [r7, #6]
	if(EnorDi == ENABLE)
 8000bf4:	79bb      	ldrb	r3, [r7, #6]
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d133      	bne.n	8000c62 <I2C_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31)
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	2b1f      	cmp	r3, #31
 8000bfe:	d80a      	bhi.n	8000c16 <I2C_IRQInterruptConfig+0x32>
		{
			// program ISER0 register
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000c00:	4b35      	ldr	r3, [pc, #212]	; (8000cd8 <I2C_IRQInterruptConfig+0xf4>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	79fa      	ldrb	r2, [r7, #7]
 8000c06:	2101      	movs	r1, #1
 8000c08:	fa01 f202 	lsl.w	r2, r1, r2
 8000c0c:	4611      	mov	r1, r2
 8000c0e:	4a32      	ldr	r2, [pc, #200]	; (8000cd8 <I2C_IRQInterruptConfig+0xf4>)
 8000c10:	430b      	orrs	r3, r1
 8000c12:	6013      	str	r3, [r2, #0]
		{
			// program ISER2 register
			*NVIC_ICER1 |= (1 << (IRQNumber % 64));
		}
	}
}
 8000c14:	e059      	b.n	8000cca <I2C_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 31 && IRQNumber < 64)
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	2b1f      	cmp	r3, #31
 8000c1a:	d90f      	bls.n	8000c3c <I2C_IRQInterruptConfig+0x58>
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	2b3f      	cmp	r3, #63	; 0x3f
 8000c20:	d80c      	bhi.n	8000c3c <I2C_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 8000c22:	4b2e      	ldr	r3, [pc, #184]	; (8000cdc <I2C_IRQInterruptConfig+0xf8>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	79fa      	ldrb	r2, [r7, #7]
 8000c28:	f002 021f 	and.w	r2, r2, #31
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c32:	4611      	mov	r1, r2
 8000c34:	4a29      	ldr	r2, [pc, #164]	; (8000cdc <I2C_IRQInterruptConfig+0xf8>)
 8000c36:	430b      	orrs	r3, r1
 8000c38:	6013      	str	r3, [r2, #0]
 8000c3a:	e046      	b.n	8000cca <I2C_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96)
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	2b3f      	cmp	r3, #63	; 0x3f
 8000c40:	d943      	bls.n	8000cca <I2C_IRQInterruptConfig+0xe6>
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	2b5f      	cmp	r3, #95	; 0x5f
 8000c46:	d840      	bhi.n	8000cca <I2C_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= (1 << (IRQNumber % 32));
 8000c48:	4b25      	ldr	r3, [pc, #148]	; (8000ce0 <I2C_IRQInterruptConfig+0xfc>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	79fa      	ldrb	r2, [r7, #7]
 8000c4e:	f002 021f 	and.w	r2, r2, #31
 8000c52:	2101      	movs	r1, #1
 8000c54:	fa01 f202 	lsl.w	r2, r1, r2
 8000c58:	4611      	mov	r1, r2
 8000c5a:	4a21      	ldr	r2, [pc, #132]	; (8000ce0 <I2C_IRQInterruptConfig+0xfc>)
 8000c5c:	430b      	orrs	r3, r1
 8000c5e:	6013      	str	r3, [r2, #0]
}
 8000c60:	e033      	b.n	8000cca <I2C_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	2b1f      	cmp	r3, #31
 8000c66:	d80a      	bhi.n	8000c7e <I2C_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 8000c68:	4b1e      	ldr	r3, [pc, #120]	; (8000ce4 <I2C_IRQInterruptConfig+0x100>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	79fa      	ldrb	r2, [r7, #7]
 8000c6e:	2101      	movs	r1, #1
 8000c70:	fa01 f202 	lsl.w	r2, r1, r2
 8000c74:	4611      	mov	r1, r2
 8000c76:	4a1b      	ldr	r2, [pc, #108]	; (8000ce4 <I2C_IRQInterruptConfig+0x100>)
 8000c78:	430b      	orrs	r3, r1
 8000c7a:	6013      	str	r3, [r2, #0]
}
 8000c7c:	e025      	b.n	8000cca <I2C_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 31 && IRQNumber < 64)
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	2b1f      	cmp	r3, #31
 8000c82:	d90f      	bls.n	8000ca4 <I2C_IRQInterruptConfig+0xc0>
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	2b3f      	cmp	r3, #63	; 0x3f
 8000c88:	d80c      	bhi.n	8000ca4 <I2C_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 8000c8a:	4b17      	ldr	r3, [pc, #92]	; (8000ce8 <I2C_IRQInterruptConfig+0x104>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	79fa      	ldrb	r2, [r7, #7]
 8000c90:	f002 021f 	and.w	r2, r2, #31
 8000c94:	2101      	movs	r1, #1
 8000c96:	fa01 f202 	lsl.w	r2, r1, r2
 8000c9a:	4611      	mov	r1, r2
 8000c9c:	4a12      	ldr	r2, [pc, #72]	; (8000ce8 <I2C_IRQInterruptConfig+0x104>)
 8000c9e:	430b      	orrs	r3, r1
 8000ca0:	6013      	str	r3, [r2, #0]
 8000ca2:	e012      	b.n	8000cca <I2C_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96)
 8000ca4:	79fb      	ldrb	r3, [r7, #7]
 8000ca6:	2b3f      	cmp	r3, #63	; 0x3f
 8000ca8:	d90f      	bls.n	8000cca <I2C_IRQInterruptConfig+0xe6>
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	2b5f      	cmp	r3, #95	; 0x5f
 8000cae:	d80c      	bhi.n	8000cca <I2C_IRQInterruptConfig+0xe6>
			*NVIC_ICER1 |= (1 << (IRQNumber % 64));
 8000cb0:	4b0d      	ldr	r3, [pc, #52]	; (8000ce8 <I2C_IRQInterruptConfig+0x104>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	79fa      	ldrb	r2, [r7, #7]
 8000cb6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000cba:	2101      	movs	r1, #1
 8000cbc:	fa01 f202 	lsl.w	r2, r1, r2
 8000cc0:	4611      	mov	r1, r2
 8000cc2:	4a09      	ldr	r2, [pc, #36]	; (8000ce8 <I2C_IRQInterruptConfig+0x104>)
 8000cc4:	430b      	orrs	r3, r1
 8000cc6:	6013      	str	r3, [r2, #0]
}
 8000cc8:	e7ff      	b.n	8000cca <I2C_IRQInterruptConfig+0xe6>
 8000cca:	bf00      	nop
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	e000e100 	.word	0xe000e100
 8000cdc:	e000e104 	.word	0xe000e104
 8000ce0:	e000e108 	.word	0xe000e108
 8000ce4:	e000e180 	.word	0xe000e180
 8000ce8:	e000e184 	.word	0xe000e184

08000cec <I2C_PeripheralControl>:
  *
  *@Note					-
  *
  */
 void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
 {
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	460b      	mov	r3, r1
 8000cf6:	70fb      	strb	r3, [r7, #3]
		if(EnorDi == ENABLE)
 8000cf8:	78fb      	ldrb	r3, [r7, #3]
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d106      	bne.n	8000d0c <I2C_PeripheralControl+0x20>
		{
			pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f043 0201 	orr.w	r2, r3, #1
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	601a      	str	r2, [r3, #0]
		}
		else
		{
			pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
		}
 }
 8000d0a:	e005      	b.n	8000d18 <I2C_PeripheralControl+0x2c>
			pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f023 0201 	bic.w	r2, r3, #1
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	601a      	str	r2, [r3, #0]
 }
 8000d18:	bf00      	nop
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <I2C_ManageAcking>:
  *
  *@Note					-
  *
  */
 void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
 {
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	460b      	mov	r3, r1
 8000d2e:	70fb      	strb	r3, [r7, #3]
	 if(EnorDi == I2C_ACK_ENABLE)
 8000d30:	78fb      	ldrb	r3, [r7, #3]
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d106      	bne.n	8000d44 <I2C_ManageAcking+0x20>
	 {
		 // enable the ack
		 pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	601a      	str	r2, [r3, #0]
	 {
		 // disable the ack
		 pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
	 }

 }
 8000d42:	e005      	b.n	8000d50 <I2C_ManageAcking+0x2c>
		 pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	601a      	str	r2, [r3, #0]
 }
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <I2C_EV_IRQHandling>:
  *
  * @Note              -  Interrupt handling for different I2C events (refer SR1)

  */
 void I2C_EV_IRQHandling(I2C_Handle_t *pI2CHandle)
 {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]

 	//Interrupt handling for both master and slave mode of a device
	 uint32_t temp1, temp2, temp3;

	 temp1 = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITEVTEN);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d6e:	617b      	str	r3, [r7, #20]
	 temp2 = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITBUFEN);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d7a:	613b      	str	r3, [r7, #16]

	 temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_SB);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	695b      	ldr	r3, [r3, #20]
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	60fb      	str	r3, [r7, #12]

 	//1. Handle For interrupt generated by SB event
 	//	Note : SB flag is only applicable in Master mode
	 if(temp1 && temp3)
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d01b      	beq.n	8000dc6 <I2C_EV_IRQHandling+0x6a>
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d018      	beq.n	8000dc6 <I2C_EV_IRQHandling+0x6a>
	 {
		 // interrupt is generated because of SB event
		 // this block will not be executed in slave mode because for slave SB is always zero
		 // in this block lets execute the address phase
		 if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	7f1b      	ldrb	r3, [r3, #28]
 8000d98:	2b02      	cmp	r3, #2
 8000d9a:	d108      	bne.n	8000dae <I2C_EV_IRQHandling+0x52>
		 {
			 I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx, pI2CHandle->DevAddr);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	7f5b      	ldrb	r3, [r3, #29]
 8000da4:	4619      	mov	r1, r3
 8000da6:	4610      	mov	r0, r2
 8000da8:	f7ff fe18 	bl	80009dc <I2C_ExecuteAddressPhaseWrite>
 8000dac:	e00b      	b.n	8000dc6 <I2C_EV_IRQHandling+0x6a>
		 }
		 else if (pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	7f1b      	ldrb	r3, [r3, #28]
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d107      	bne.n	8000dc6 <I2C_EV_IRQHandling+0x6a>
		 {
			 I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx, pI2CHandle->DevAddr);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	7f5b      	ldrb	r3, [r3, #29]
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4610      	mov	r0, r2
 8000dc2:	f7ff fe21 	bl	8000a08 <I2C_ExecuteAddressPhaseRead>
		 }
	 }

	 temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_ADDR);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	695b      	ldr	r3, [r3, #20]
 8000dcc:	f003 0302 	and.w	r3, r3, #2
 8000dd0:	60fb      	str	r3, [r7, #12]
 	//2. Handle For interrupt generated by ADDR event
 	//Note : When master mode : Address is sent
 	//		 When Slave mode   : Address matched with own address
	 if(temp1 && temp3)
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d005      	beq.n	8000de4 <I2C_EV_IRQHandling+0x88>
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d002      	beq.n	8000de4 <I2C_EV_IRQHandling+0x88>
	 {
		 // interrupt is generated because of ADDR event
		 I2C_ClearADDRFlag(pI2CHandle);
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f7ff fe28 	bl	8000a34 <I2C_ClearADDRFlag>
	 }

	 temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_BTF);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	695b      	ldr	r3, [r3, #20]
 8000dea:	f003 0304 	and.w	r3, r3, #4
 8000dee:	60fb      	str	r3, [r7, #12]
 	//3. Handle For interrupt generated by BTF(Byte Transfer Finished) event
	 if(temp1 && temp3)
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d022      	beq.n	8000e3c <I2C_EV_IRQHandling+0xe0>
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d01f      	beq.n	8000e3c <I2C_EV_IRQHandling+0xe0>
	 {
		 // interrupt is generated because of BTF event
		 if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	7f1b      	ldrb	r3, [r3, #28]
 8000e00:	2b02      	cmp	r3, #2
 8000e02:	d11b      	bne.n	8000e3c <I2C_EV_IRQHandling+0xe0>
		 {
			 // make sure that TXE is also set
			 if(pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_TxE))
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	695b      	ldr	r3, [r3, #20]
 8000e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d014      	beq.n	8000e3c <I2C_EV_IRQHandling+0xe0>
			 {
				 // BTF, TXE = 1 , close the transmission

				 if(pI2CHandle->TXLen == 0)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	695b      	ldr	r3, [r3, #20]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d110      	bne.n	8000e3c <I2C_EV_IRQHandling+0xe0>
				 {
					 // 1. generate the STOP condition
					 if(pI2CHandle->Sr == I2C_DISABLE_SR)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d104      	bne.n	8000e2e <I2C_EV_IRQHandling+0xd2>
						 I2C_generateStartCondition(pI2CHandle->pI2Cx);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff fdc7 	bl	80009bc <I2C_generateStartCondition>

					 // 2. reset all the member elements of the handle structure.
					 I2C_CloseSendData(pI2CHandle);
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f000 f8ec 	bl	800100c <I2C_CloseSendData>

					 // 3. notify the application about the transmission complete
					 I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_TX_CMPLT);
 8000e34:	2100      	movs	r1, #0
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f7ff fb3a 	bl	80004b0 <I2C_ApplicationEventCallback>
		 {
			 // nothing to do
		 }
	 }

	 temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_STOPF);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	f003 0310 	and.w	r3, r3, #16
 8000e46:	60fb      	str	r3, [r7, #12]
 	//4. Handle For interrupt generated by STOPF event
 	// Note : Stop detection flag is applicable only slave mode . For master this flag will never be set
	 if(temp1 && temp3)
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d00c      	beq.n	8000e68 <I2C_EV_IRQHandling+0x10c>
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d009      	beq.n	8000e68 <I2C_EV_IRQHandling+0x10c>
	 {
		 // STOPF flag is set

		 // clear the STOP (i.e -> 1) read SR1 2) write to CR1)
		 pI2CHandle->pI2Cx->CR1 |= 0x0000;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	6812      	ldr	r2, [r2, #0]
 8000e5e:	601a      	str	r2, [r3, #0]

		 // notify the application that STOP is detected
		 I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_STOP);
 8000e60:	2102      	movs	r1, #2
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f7ff fb24 	bl	80004b0 <I2C_ApplicationEventCallback>
	 }

	 temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_TxE);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	695b      	ldr	r3, [r3, #20]
 8000e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e72:	60fb      	str	r3, [r7, #12]
 	//5. Handle For interrupt generated by TXE event
	 if(temp1 && temp2 && temp3)
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d013      	beq.n	8000ea2 <I2C_EV_IRQHandling+0x146>
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d010      	beq.n	8000ea2 <I2C_EV_IRQHandling+0x146>
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d00d      	beq.n	8000ea2 <I2C_EV_IRQHandling+0x146>
	 {
		 // check for device mode
		 if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL))
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	f003 0301 	and.w	r3, r3, #1
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d006      	beq.n	8000ea2 <I2C_EV_IRQHandling+0x146>
		 {
			 // TXE flag is set
			 // we have to do data transmission
			 if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	7f1b      	ldrb	r3, [r3, #28]
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	d102      	bne.n	8000ea2 <I2C_EV_IRQHandling+0x146>
			 {
				 I2C_MasterHandleTXEInterrupt(pI2CHandle);
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f000 f821 	bl	8000ee4 <I2C_MasterHandleTXEInterrupt>
			 }
		 }

	 }

	 temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_RxNE);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	695b      	ldr	r3, [r3, #20]
 8000ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000eac:	60fb      	str	r3, [r7, #12]
 	//6. Handle For interrupt generated by RXNE event
	 if(temp1 && temp2 && temp3)
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d013      	beq.n	8000edc <I2C_EV_IRQHandling+0x180>
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d010      	beq.n	8000edc <I2C_EV_IRQHandling+0x180>
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d00d      	beq.n	8000edc <I2C_EV_IRQHandling+0x180>
	 {
		 // check for device mode
		 if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL))
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	699b      	ldr	r3, [r3, #24]
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d006      	beq.n	8000edc <I2C_EV_IRQHandling+0x180>
		 {
			 // the device is master

			 // RXNE flag is set
			 if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	7f1b      	ldrb	r3, [r3, #28]
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d102      	bne.n	8000edc <I2C_EV_IRQHandling+0x180>
			 {
				 I2C_MasterHandleRXNEInterrupt(pI2CHandle);
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f000 f822 	bl	8000f20 <I2C_MasterHandleRXNEInterrupt>
			 }
		 }
	 }
 }
 8000edc:	bf00      	nop
 8000ede:	3718      	adds	r7, #24
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <I2C_MasterHandleTXEInterrupt>:
 static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle)
 {
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
	 if(pI2CHandle->TXLen > 0)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	695b      	ldr	r3, [r3, #20]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d00f      	beq.n	8000f14 <I2C_MasterHandleTXEInterrupt+0x30>
	 {
		 // 1. load the data in to DR
		 pI2CHandle->pI2Cx->DR = *(pI2CHandle->pTxBuffer);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	781a      	ldrb	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	611a      	str	r2, [r3, #16]

		 // 2. decrement the TxLen
		 pI2CHandle->TXLen--;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	695b      	ldr	r3, [r3, #20]
 8000f04:	1e5a      	subs	r2, r3, #1
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	615a      	str	r2, [r3, #20]

		 // 3. increment the buffer address
		 pI2CHandle->pTxBuffer++;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	68db      	ldr	r3, [r3, #12]
 8000f0e:	1c5a      	adds	r2, r3, #1
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	60da      	str	r2, [r3, #12]
	 }
 }
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <I2C_MasterHandleRXNEInterrupt>:
static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
	 // we have to do the data reception
	 if(pI2CHandle->RxSize == 1)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6a1b      	ldr	r3, [r3, #32]
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d10b      	bne.n	8000f48 <I2C_MasterHandleRXNEInterrupt+0x28>
	 {
		 *pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	691a      	ldr	r2, [r3, #16]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	691b      	ldr	r3, [r3, #16]
 8000f3a:	b2d2      	uxtb	r2, r2
 8000f3c:	701a      	strb	r2, [r3, #0]
		 pI2CHandle->RXLen--;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	699b      	ldr	r3, [r3, #24]
 8000f42:	1e5a      	subs	r2, r3, #1
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	619a      	str	r2, [r3, #24]
	 }

	 if(pI2CHandle->RxSize > 1)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6a1b      	ldr	r3, [r3, #32]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d91a      	bls.n	8000f86 <I2C_MasterHandleRXNEInterrupt+0x66>
	 {
		 if(pI2CHandle->RXLen == 2)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	699b      	ldr	r3, [r3, #24]
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d105      	bne.n	8000f64 <I2C_MasterHandleRXNEInterrupt+0x44>
		 {
			 // clear the ack bit
			 I2C_ManageAcking(pI2CHandle->pI2Cx, DISABLE);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff fee0 	bl	8000d24 <I2C_ManageAcking>
		 }
		 // read DR
		 *pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	691a      	ldr	r2, [r3, #16]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	691b      	ldr	r3, [r3, #16]
 8000f6e:	b2d2      	uxtb	r2, r2
 8000f70:	701a      	strb	r2, [r3, #0]
		 pI2CHandle->RXLen--;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	699b      	ldr	r3, [r3, #24]
 8000f76:	1e5a      	subs	r2, r3, #1
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	619a      	str	r2, [r3, #24]
		 pI2CHandle->pRxBuffer++;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	691b      	ldr	r3, [r3, #16]
 8000f80:	1c5a      	adds	r2, r3, #1
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	611a      	str	r2, [r3, #16]
	 }

	 if(pI2CHandle->RXLen == 0)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	699b      	ldr	r3, [r3, #24]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d110      	bne.n	8000fb0 <I2C_MasterHandleRXNEInterrupt+0x90>
	 {
		 // close the I2C data reception and notify the application

		 // 1. generate the STOP condition
			if(pI2CHandle->Sr == I2C_DISABLE_SR)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d104      	bne.n	8000fa2 <I2C_MasterHandleRXNEInterrupt+0x82>
				I2C_generateStopCondition(pI2CHandle->pI2Cx);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff fd80 	bl	8000aa2 <I2C_generateStopCondition>

		 // 2. close the I2C rx
			I2C_closeReceiveData(pI2CHandle);
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f000 f808 	bl	8000fb8 <I2C_closeReceiveData>

		 // 3. Notify the application
			I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_RX_CMPLT);
 8000fa8:	2101      	movs	r1, #1
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f7ff fa80 	bl	80004b0 <I2C_ApplicationEventCallback>
	 }
}
 8000fb0:	bf00      	nop
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <I2C_closeReceiveData>:

void I2C_closeReceiveData(I2C_Handle_t *pI2CHandle)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
	// Implement the code to disable ITBUFEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	685a      	ldr	r2, [r3, #4]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000fce:	605a      	str	r2, [r3, #4]

	// Implement the code to disable ITEVFEN Control bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	685a      	ldr	r2, [r3, #4]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000fde:	605a      	str	r2, [r3, #4]

	pI2CHandle->TxRxState = I2C_READY;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pRxBuffer = NULL;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	611a      	str	r2, [r3, #16]
	pI2CHandle->RXLen = 0;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	619a      	str	r2, [r3, #24]
	pI2CHandle->RxSize = 0;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	621a      	str	r2, [r3, #32]
	I2C_ManageAcking(pI2CHandle->pI2Cx, ENABLE);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff fe90 	bl	8000d24 <I2C_ManageAcking>
}
 8001004:	bf00      	nop
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <I2C_CloseSendData>:

void I2C_CloseSendData(I2C_Handle_t *pI2CHandle)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
	// Implement the code to disable ITBUFEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	685a      	ldr	r2, [r3, #4]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001022:	605a      	str	r2, [r3, #4]

	// Implement the code to disable ITEVFEN Control bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	685a      	ldr	r2, [r3, #4]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001032:	605a      	str	r2, [r3, #4]

	pI2CHandle->TxRxState = I2C_READY;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2200      	movs	r2, #0
 8001038:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pTxBuffer = NULL;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2200      	movs	r2, #0
 800103e:	60da      	str	r2, [r3, #12]
	pI2CHandle->TXLen = 0;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2200      	movs	r2, #0
 8001044:	615a      	str	r2, [r3, #20]
}
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr

08001052 <I2C_ER_IRQHandling>:
 						#define I2C_ERROR_OVR   6
 						#define I2C_ERROR_TIMEOUT 7

  */
 void I2C_ER_IRQHandling(I2C_Handle_t *pI2CHandle)
 {
 8001052:	b580      	push	{r7, lr}
 8001054:	b084      	sub	sp, #16
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
		uint32_t temp1,temp2;

	    //Know the status of  ITERREN control bit in the CR2
		temp2 = (pI2CHandle->pI2Cx->CR2) & ( 1 << I2C_CR2_ITERREN);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001064:	60fb      	str	r3, [r7, #12]


	/***********************Check for Bus error************************************/
		temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1<< I2C_SR1_BERR);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	695b      	ldr	r3, [r3, #20]
 800106c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001070:	60bb      	str	r3, [r7, #8]
		if(temp1  && temp2 )
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d00e      	beq.n	8001096 <I2C_ER_IRQHandling+0x44>
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d00b      	beq.n	8001096 <I2C_ER_IRQHandling+0x44>
		{
			//This is Bus error

			//Implement the code to clear the buss error flag
			pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_BERR);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	695a      	ldr	r2, [r3, #20]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800108c:	615a      	str	r2, [r3, #20]

			//Implement the code to notify the application about the error
		   I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_BERR);
 800108e:	2103      	movs	r1, #3
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f7ff fa0d 	bl	80004b0 <I2C_ApplicationEventCallback>
		}

	/***********************Check for arbitration lost error************************************/
		temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_ARLO );
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	695b      	ldr	r3, [r3, #20]
 800109c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010a0:	60bb      	str	r3, [r7, #8]
		if(temp1  && temp2)
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d00e      	beq.n	80010c6 <I2C_ER_IRQHandling+0x74>
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d00b      	beq.n	80010c6 <I2C_ER_IRQHandling+0x74>
		{
			//This is arbitration lost error

			//Implement the code to clear the arbitration lost error flag
			pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_ARLO);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	695a      	ldr	r2, [r3, #20]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80010bc:	615a      	str	r2, [r3, #20]

			//Implement the code to notify the application about the error
			I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_ARLO);
 80010be:	2104      	movs	r1, #4
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f7ff f9f5 	bl	80004b0 <I2C_ApplicationEventCallback>
		}

	/***********************Check for ACK failure  error************************************/

		temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_AF);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	695b      	ldr	r3, [r3, #20]
 80010cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010d0:	60bb      	str	r3, [r7, #8]
		if(temp1  && temp2)
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d00e      	beq.n	80010f6 <I2C_ER_IRQHandling+0xa4>
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d00b      	beq.n	80010f6 <I2C_ER_IRQHandling+0xa4>
		{
			//This is ACK failure error

		    //Implement the code to clear the ACK failure error flag
			pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_AF);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	695a      	ldr	r2, [r3, #20]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010ec:	615a      	str	r2, [r3, #20]

			//Implement the code to notify the application about the error
			I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_AF);
 80010ee:	2105      	movs	r1, #5
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f7ff f9dd 	bl	80004b0 <I2C_ApplicationEventCallback>
		}

	/***********************Check for Overrun/underrun error************************************/
		temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_OVR);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	695b      	ldr	r3, [r3, #20]
 80010fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001100:	60bb      	str	r3, [r7, #8]
		if(temp1  && temp2)
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d00e      	beq.n	8001126 <I2C_ER_IRQHandling+0xd4>
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d00b      	beq.n	8001126 <I2C_ER_IRQHandling+0xd4>
		{
			//This is Overrun/underrun

		    //Implement the code to clear the Overrun/underrun error flag
			pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_OVR);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	695a      	ldr	r2, [r3, #20]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800111c:	615a      	str	r2, [r3, #20]

			//Implement the code to notify the application about the error
			I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_OVR);
 800111e:	2106      	movs	r1, #6
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f7ff f9c5 	bl	80004b0 <I2C_ApplicationEventCallback>
		}

	/***********************Check for Time out error************************************/
		temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_TIMEOUT);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	695b      	ldr	r3, [r3, #20]
 800112c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001130:	60bb      	str	r3, [r7, #8]
		if(temp1  && temp2)
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d00e      	beq.n	8001156 <I2C_ER_IRQHandling+0x104>
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d00b      	beq.n	8001156 <I2C_ER_IRQHandling+0x104>
		{
			//This is Time out error

		    //Implement the code to clear the Time out error flag
			pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_TIMEOUT);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	695a      	ldr	r2, [r3, #20]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800114c:	615a      	str	r2, [r3, #20]

			//Implement the code to notify the application about the error
			I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_TIMEOUT);
 800114e:	2107      	movs	r1, #7
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff f9ad 	bl	80004b0 <I2C_ApplicationEventCallback>
		}
 }
 8001156:	bf00      	nop
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
	...

08001160 <GPIO_PeripheralClockControl>:
 *
 *@Note					- none
 *
 */
void GPIO_PeripheralClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	460b      	mov	r3, r1
 800116a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800116c:	78fb      	ldrb	r3, [r7, #3]
 800116e:	2b01      	cmp	r3, #1
 8001170:	d162      	bne.n	8001238 <GPIO_PeripheralClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a64      	ldr	r2, [pc, #400]	; (8001308 <GPIO_PeripheralClockControl+0x1a8>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d106      	bne.n	8001188 <GPIO_PeripheralClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 800117a:	4b64      	ldr	r3, [pc, #400]	; (800130c <GPIO_PeripheralClockControl+0x1ac>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a63      	ldr	r2, [pc, #396]	; (800130c <GPIO_PeripheralClockControl+0x1ac>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
		else if(pGPIOx == GPIOI)
		{
			GPIOI_PCLK_DI();
		}
	}
}
 8001186:	e0b9      	b.n	80012fc <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4a61      	ldr	r2, [pc, #388]	; (8001310 <GPIO_PeripheralClockControl+0x1b0>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d106      	bne.n	800119e <GPIO_PeripheralClockControl+0x3e>
			GPIOB_PCLK_EN();
 8001190:	4b5e      	ldr	r3, [pc, #376]	; (800130c <GPIO_PeripheralClockControl+0x1ac>)
 8001192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001194:	4a5d      	ldr	r2, [pc, #372]	; (800130c <GPIO_PeripheralClockControl+0x1ac>)
 8001196:	f043 0302 	orr.w	r3, r3, #2
 800119a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800119c:	e0ae      	b.n	80012fc <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a5c      	ldr	r2, [pc, #368]	; (8001314 <GPIO_PeripheralClockControl+0x1b4>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d106      	bne.n	80011b4 <GPIO_PeripheralClockControl+0x54>
			GPIOC_PCLK_EN();
 80011a6:	4b59      	ldr	r3, [pc, #356]	; (800130c <GPIO_PeripheralClockControl+0x1ac>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	4a58      	ldr	r2, [pc, #352]	; (800130c <GPIO_PeripheralClockControl+0x1ac>)
 80011ac:	f043 0304 	orr.w	r3, r3, #4
 80011b0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80011b2:	e0a3      	b.n	80012fc <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4a58      	ldr	r2, [pc, #352]	; (8001318 <GPIO_PeripheralClockControl+0x1b8>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d106      	bne.n	80011ca <GPIO_PeripheralClockControl+0x6a>
			GPIOD_PCLK_EN();
 80011bc:	4b53      	ldr	r3, [pc, #332]	; (800130c <GPIO_PeripheralClockControl+0x1ac>)
 80011be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c0:	4a52      	ldr	r2, [pc, #328]	; (800130c <GPIO_PeripheralClockControl+0x1ac>)
 80011c2:	f043 0308 	orr.w	r3, r3, #8
 80011c6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80011c8:	e098      	b.n	80012fc <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a53      	ldr	r2, [pc, #332]	; (800131c <GPIO_PeripheralClockControl+0x1bc>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d106      	bne.n	80011e0 <GPIO_PeripheralClockControl+0x80>
			GPIOE_PCLK_EN();
 80011d2:	4b4e      	ldr	r3, [pc, #312]	; (800130c <GPIO_PeripheralClockControl+0x1ac>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	4a4d      	ldr	r2, [pc, #308]	; (800130c <GPIO_PeripheralClockControl+0x1ac>)
 80011d8:	f043 0310 	orr.w	r3, r3, #16
 80011dc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80011de:	e08d      	b.n	80012fc <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4a4f      	ldr	r2, [pc, #316]	; (8001320 <GPIO_PeripheralClockControl+0x1c0>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d106      	bne.n	80011f6 <GPIO_PeripheralClockControl+0x96>
			GPIOF_PCLK_EN();
 80011e8:	4b48      	ldr	r3, [pc, #288]	; (800130c <GPIO_PeripheralClockControl+0x1ac>)
 80011ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ec:	4a47      	ldr	r2, [pc, #284]	; (800130c <GPIO_PeripheralClockControl+0x1ac>)
 80011ee:	f043 0320 	orr.w	r3, r3, #32
 80011f2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80011f4:	e082      	b.n	80012fc <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a4a      	ldr	r2, [pc, #296]	; (8001324 <GPIO_PeripheralClockControl+0x1c4>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d106      	bne.n	800120c <GPIO_PeripheralClockControl+0xac>
			GPIOG_PCLK_EN();
 80011fe:	4b43      	ldr	r3, [pc, #268]	; (800130c <GPIO_PeripheralClockControl+0x1ac>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	4a42      	ldr	r2, [pc, #264]	; (800130c <GPIO_PeripheralClockControl+0x1ac>)
 8001204:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001208:	6313      	str	r3, [r2, #48]	; 0x30
}
 800120a:	e077      	b.n	80012fc <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4a46      	ldr	r2, [pc, #280]	; (8001328 <GPIO_PeripheralClockControl+0x1c8>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d106      	bne.n	8001222 <GPIO_PeripheralClockControl+0xc2>
			GPIOH_PCLK_EN();
 8001214:	4b3d      	ldr	r3, [pc, #244]	; (800130c <GPIO_PeripheralClockControl+0x1ac>)
 8001216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001218:	4a3c      	ldr	r2, [pc, #240]	; (800130c <GPIO_PeripheralClockControl+0x1ac>)
 800121a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800121e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001220:	e06c      	b.n	80012fc <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a41      	ldr	r2, [pc, #260]	; (800132c <GPIO_PeripheralClockControl+0x1cc>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d168      	bne.n	80012fc <GPIO_PeripheralClockControl+0x19c>
			GPIOI_PCLK_EN();
 800122a:	4b38      	ldr	r3, [pc, #224]	; (800130c <GPIO_PeripheralClockControl+0x1ac>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a37      	ldr	r2, [pc, #220]	; (800130c <GPIO_PeripheralClockControl+0x1ac>)
 8001230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001236:	e061      	b.n	80012fc <GPIO_PeripheralClockControl+0x19c>
		if(pGPIOx == GPIOA)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4a33      	ldr	r2, [pc, #204]	; (8001308 <GPIO_PeripheralClockControl+0x1a8>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d106      	bne.n	800124e <GPIO_PeripheralClockControl+0xee>
			GPIOA_PCLK_DI();
 8001240:	4b32      	ldr	r3, [pc, #200]	; (800130c <GPIO_PeripheralClockControl+0x1ac>)
 8001242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001244:	4a31      	ldr	r2, [pc, #196]	; (800130c <GPIO_PeripheralClockControl+0x1ac>)
 8001246:	f023 0301 	bic.w	r3, r3, #1
 800124a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800124c:	e056      	b.n	80012fc <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a2f      	ldr	r2, [pc, #188]	; (8001310 <GPIO_PeripheralClockControl+0x1b0>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d106      	bne.n	8001264 <GPIO_PeripheralClockControl+0x104>
			GPIOB_PCLK_DI();
 8001256:	4b2d      	ldr	r3, [pc, #180]	; (800130c <GPIO_PeripheralClockControl+0x1ac>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	4a2c      	ldr	r2, [pc, #176]	; (800130c <GPIO_PeripheralClockControl+0x1ac>)
 800125c:	f023 0302 	bic.w	r3, r3, #2
 8001260:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001262:	e04b      	b.n	80012fc <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4a2b      	ldr	r2, [pc, #172]	; (8001314 <GPIO_PeripheralClockControl+0x1b4>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d106      	bne.n	800127a <GPIO_PeripheralClockControl+0x11a>
			GPIOC_PCLK_DI();
 800126c:	4b27      	ldr	r3, [pc, #156]	; (800130c <GPIO_PeripheralClockControl+0x1ac>)
 800126e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001270:	4a26      	ldr	r2, [pc, #152]	; (800130c <GPIO_PeripheralClockControl+0x1ac>)
 8001272:	f023 0304 	bic.w	r3, r3, #4
 8001276:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001278:	e040      	b.n	80012fc <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a26      	ldr	r2, [pc, #152]	; (8001318 <GPIO_PeripheralClockControl+0x1b8>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d106      	bne.n	8001290 <GPIO_PeripheralClockControl+0x130>
			GPIOD_PCLK_DI();
 8001282:	4b22      	ldr	r3, [pc, #136]	; (800130c <GPIO_PeripheralClockControl+0x1ac>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	4a21      	ldr	r2, [pc, #132]	; (800130c <GPIO_PeripheralClockControl+0x1ac>)
 8001288:	f023 0308 	bic.w	r3, r3, #8
 800128c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800128e:	e035      	b.n	80012fc <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4a22      	ldr	r2, [pc, #136]	; (800131c <GPIO_PeripheralClockControl+0x1bc>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d106      	bne.n	80012a6 <GPIO_PeripheralClockControl+0x146>
			GPIOE_PCLK_DI();
 8001298:	4b1c      	ldr	r3, [pc, #112]	; (800130c <GPIO_PeripheralClockControl+0x1ac>)
 800129a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129c:	4a1b      	ldr	r2, [pc, #108]	; (800130c <GPIO_PeripheralClockControl+0x1ac>)
 800129e:	f023 0310 	bic.w	r3, r3, #16
 80012a2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80012a4:	e02a      	b.n	80012fc <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a1d      	ldr	r2, [pc, #116]	; (8001320 <GPIO_PeripheralClockControl+0x1c0>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d106      	bne.n	80012bc <GPIO_PeripheralClockControl+0x15c>
			GPIOF_PCLK_DI();
 80012ae:	4b17      	ldr	r3, [pc, #92]	; (800130c <GPIO_PeripheralClockControl+0x1ac>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	4a16      	ldr	r2, [pc, #88]	; (800130c <GPIO_PeripheralClockControl+0x1ac>)
 80012b4:	f023 0320 	bic.w	r3, r3, #32
 80012b8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80012ba:	e01f      	b.n	80012fc <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4a19      	ldr	r2, [pc, #100]	; (8001324 <GPIO_PeripheralClockControl+0x1c4>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d106      	bne.n	80012d2 <GPIO_PeripheralClockControl+0x172>
			GPIOG_PCLK_DI();
 80012c4:	4b11      	ldr	r3, [pc, #68]	; (800130c <GPIO_PeripheralClockControl+0x1ac>)
 80012c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c8:	4a10      	ldr	r2, [pc, #64]	; (800130c <GPIO_PeripheralClockControl+0x1ac>)
 80012ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80012ce:	6313      	str	r3, [r2, #48]	; 0x30
}
 80012d0:	e014      	b.n	80012fc <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a14      	ldr	r2, [pc, #80]	; (8001328 <GPIO_PeripheralClockControl+0x1c8>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d106      	bne.n	80012e8 <GPIO_PeripheralClockControl+0x188>
			GPIOH_PCLK_DI();
 80012da:	4b0c      	ldr	r3, [pc, #48]	; (800130c <GPIO_PeripheralClockControl+0x1ac>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	4a0b      	ldr	r2, [pc, #44]	; (800130c <GPIO_PeripheralClockControl+0x1ac>)
 80012e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80012e4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80012e6:	e009      	b.n	80012fc <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4a10      	ldr	r2, [pc, #64]	; (800132c <GPIO_PeripheralClockControl+0x1cc>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d105      	bne.n	80012fc <GPIO_PeripheralClockControl+0x19c>
			GPIOI_PCLK_DI();
 80012f0:	4b06      	ldr	r3, [pc, #24]	; (800130c <GPIO_PeripheralClockControl+0x1ac>)
 80012f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f4:	4a05      	ldr	r2, [pc, #20]	; (800130c <GPIO_PeripheralClockControl+0x1ac>)
 80012f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012fa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80012fc:	bf00      	nop
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	40020000 	.word	0x40020000
 800130c:	40023800 	.word	0x40023800
 8001310:	40020400 	.word	0x40020400
 8001314:	40020800 	.word	0x40020800
 8001318:	40020c00 	.word	0x40020c00
 800131c:	40021000 	.word	0x40021000
 8001320:	40021400 	.word	0x40021400
 8001324:	40021800 	.word	0x40021800
 8001328:	40021c00 	.word	0x40021c00
 800132c:	40022000 	.word	0x40022000

08001330 <GPIO_Init>:

/*
 * Init and De-init
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0; // temp register
 8001338:	2300      	movs	r3, #0
 800133a:	617b      	str	r3, [r7, #20]

	// enable the peripheral clock
	GPIO_PeripheralClockControl(pGPIOHandle->pGPIOx, ENABLE);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2101      	movs	r1, #1
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff ff0c 	bl	8001160 <GPIO_PeripheralClockControl>

	// 1. configure the mode of gpio pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	795b      	ldrb	r3, [r3, #5]
 800134c:	2b03      	cmp	r3, #3
 800134e:	d820      	bhi.n	8001392 <GPIO_Init+0x62>
	{
		// the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	795b      	ldrb	r3, [r3, #5]
 8001354:	461a      	mov	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	791b      	ldrb	r3, [r3, #4]
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clear
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	791b      	ldrb	r3, [r3, #4]
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	2103      	movs	r1, #3
 8001370:	fa01 f303 	lsl.w	r3, r1, r3
 8001374:	43db      	mvns	r3, r3
 8001376:	4619      	mov	r1, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	400a      	ands	r2, r1
 800137e:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;	// setting
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	6819      	ldr	r1, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	697a      	ldr	r2, [r7, #20]
 800138c:	430a      	orrs	r2, r1
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	e0c1      	b.n	8001516 <GPIO_Init+0x1e6>

	}
	else
	{
		// this part will code later (interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	795b      	ldrb	r3, [r3, #5]
 8001396:	2b04      	cmp	r3, #4
 8001398:	d117      	bne.n	80013ca <GPIO_Init+0x9a>
		{
			// 1. configure the FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800139a:	4b47      	ldr	r3, [pc, #284]	; (80014b8 <GPIO_Init+0x188>)
 800139c:	68db      	ldr	r3, [r3, #12]
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	7912      	ldrb	r2, [r2, #4]
 80013a2:	4611      	mov	r1, r2
 80013a4:	2201      	movs	r2, #1
 80013a6:	408a      	lsls	r2, r1
 80013a8:	4611      	mov	r1, r2
 80013aa:	4a43      	ldr	r2, [pc, #268]	; (80014b8 <GPIO_Init+0x188>)
 80013ac:	430b      	orrs	r3, r1
 80013ae:	60d3      	str	r3, [r2, #12]
			// Clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80013b0:	4b41      	ldr	r3, [pc, #260]	; (80014b8 <GPIO_Init+0x188>)
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	7912      	ldrb	r2, [r2, #4]
 80013b8:	4611      	mov	r1, r2
 80013ba:	2201      	movs	r2, #1
 80013bc:	408a      	lsls	r2, r1
 80013be:	43d2      	mvns	r2, r2
 80013c0:	4611      	mov	r1, r2
 80013c2:	4a3d      	ldr	r2, [pc, #244]	; (80014b8 <GPIO_Init+0x188>)
 80013c4:	400b      	ands	r3, r1
 80013c6:	6093      	str	r3, [r2, #8]
 80013c8:	e035      	b.n	8001436 <GPIO_Init+0x106>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	795b      	ldrb	r3, [r3, #5]
 80013ce:	2b05      	cmp	r3, #5
 80013d0:	d117      	bne.n	8001402 <GPIO_Init+0xd2>
		{
			// 1. configure the RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80013d2:	4b39      	ldr	r3, [pc, #228]	; (80014b8 <GPIO_Init+0x188>)
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	7912      	ldrb	r2, [r2, #4]
 80013da:	4611      	mov	r1, r2
 80013dc:	2201      	movs	r2, #1
 80013de:	408a      	lsls	r2, r1
 80013e0:	4611      	mov	r1, r2
 80013e2:	4a35      	ldr	r2, [pc, #212]	; (80014b8 <GPIO_Init+0x188>)
 80013e4:	430b      	orrs	r3, r1
 80013e6:	6093      	str	r3, [r2, #8]
			// Clear the corresponding FTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80013e8:	4b33      	ldr	r3, [pc, #204]	; (80014b8 <GPIO_Init+0x188>)
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	7912      	ldrb	r2, [r2, #4]
 80013f0:	4611      	mov	r1, r2
 80013f2:	2201      	movs	r2, #1
 80013f4:	408a      	lsls	r2, r1
 80013f6:	43d2      	mvns	r2, r2
 80013f8:	4611      	mov	r1, r2
 80013fa:	4a2f      	ldr	r2, [pc, #188]	; (80014b8 <GPIO_Init+0x188>)
 80013fc:	400b      	ands	r3, r1
 80013fe:	60d3      	str	r3, [r2, #12]
 8001400:	e019      	b.n	8001436 <GPIO_Init+0x106>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	795b      	ldrb	r3, [r3, #5]
 8001406:	2b06      	cmp	r3, #6
 8001408:	d115      	bne.n	8001436 <GPIO_Init+0x106>
		{
			// 1. configure both FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800140a:	4b2b      	ldr	r3, [pc, #172]	; (80014b8 <GPIO_Init+0x188>)
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	7912      	ldrb	r2, [r2, #4]
 8001412:	4611      	mov	r1, r2
 8001414:	2201      	movs	r2, #1
 8001416:	408a      	lsls	r2, r1
 8001418:	4611      	mov	r1, r2
 800141a:	4a27      	ldr	r2, [pc, #156]	; (80014b8 <GPIO_Init+0x188>)
 800141c:	430b      	orrs	r3, r1
 800141e:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001420:	4b25      	ldr	r3, [pc, #148]	; (80014b8 <GPIO_Init+0x188>)
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	7912      	ldrb	r2, [r2, #4]
 8001428:	4611      	mov	r1, r2
 800142a:	2201      	movs	r2, #1
 800142c:	408a      	lsls	r2, r1
 800142e:	4611      	mov	r1, r2
 8001430:	4a21      	ldr	r2, [pc, #132]	; (80014b8 <GPIO_Init+0x188>)
 8001432:	430b      	orrs	r3, r1
 8001434:	6093      	str	r3, [r2, #8]
		}

		// 2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	791b      	ldrb	r3, [r3, #4]
 800143a:	089b      	lsrs	r3, r3, #2
 800143c:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	791b      	ldrb	r3, [r3, #4]
 8001442:	f003 0303 	and.w	r3, r3, #3
 8001446:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a1b      	ldr	r2, [pc, #108]	; (80014bc <GPIO_Init+0x18c>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d044      	beq.n	80014dc <GPIO_Init+0x1ac>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a1a      	ldr	r2, [pc, #104]	; (80014c0 <GPIO_Init+0x190>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d02b      	beq.n	80014b4 <GPIO_Init+0x184>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a18      	ldr	r2, [pc, #96]	; (80014c4 <GPIO_Init+0x194>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d024      	beq.n	80014b0 <GPIO_Init+0x180>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a17      	ldr	r2, [pc, #92]	; (80014c8 <GPIO_Init+0x198>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d01d      	beq.n	80014ac <GPIO_Init+0x17c>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a15      	ldr	r2, [pc, #84]	; (80014cc <GPIO_Init+0x19c>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d016      	beq.n	80014a8 <GPIO_Init+0x178>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a14      	ldr	r2, [pc, #80]	; (80014d0 <GPIO_Init+0x1a0>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d00f      	beq.n	80014a4 <GPIO_Init+0x174>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a12      	ldr	r2, [pc, #72]	; (80014d4 <GPIO_Init+0x1a4>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d008      	beq.n	80014a0 <GPIO_Init+0x170>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a11      	ldr	r2, [pc, #68]	; (80014d8 <GPIO_Init+0x1a8>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d101      	bne.n	800149c <GPIO_Init+0x16c>
 8001498:	2307      	movs	r3, #7
 800149a:	e020      	b.n	80014de <GPIO_Init+0x1ae>
 800149c:	2308      	movs	r3, #8
 800149e:	e01e      	b.n	80014de <GPIO_Init+0x1ae>
 80014a0:	2306      	movs	r3, #6
 80014a2:	e01c      	b.n	80014de <GPIO_Init+0x1ae>
 80014a4:	2305      	movs	r3, #5
 80014a6:	e01a      	b.n	80014de <GPIO_Init+0x1ae>
 80014a8:	2304      	movs	r3, #4
 80014aa:	e018      	b.n	80014de <GPIO_Init+0x1ae>
 80014ac:	2303      	movs	r3, #3
 80014ae:	e016      	b.n	80014de <GPIO_Init+0x1ae>
 80014b0:	2302      	movs	r3, #2
 80014b2:	e014      	b.n	80014de <GPIO_Init+0x1ae>
 80014b4:	2301      	movs	r3, #1
 80014b6:	e012      	b.n	80014de <GPIO_Init+0x1ae>
 80014b8:	40013c00 	.word	0x40013c00
 80014bc:	40020000 	.word	0x40020000
 80014c0:	40020400 	.word	0x40020400
 80014c4:	40020800 	.word	0x40020800
 80014c8:	40020c00 	.word	0x40020c00
 80014cc:	40021000 	.word	0x40021000
 80014d0:	40021400 	.word	0x40021400
 80014d4:	40021800 	.word	0x40021800
 80014d8:	40021c00 	.word	0x40021c00
 80014dc:	2300      	movs	r3, #0
 80014de:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80014e0:	4b5c      	ldr	r3, [pc, #368]	; (8001654 <GPIO_Init+0x324>)
 80014e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e4:	4a5b      	ldr	r2, [pc, #364]	; (8001654 <GPIO_Init+0x324>)
 80014e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ea:	6453      	str	r3, [r2, #68]	; 0x44
		SYS_CFG->EXTICR[temp1] = portcode << (temp2 * 4);
 80014ec:	7c7a      	ldrb	r2, [r7, #17]
 80014ee:	7cbb      	ldrb	r3, [r7, #18]
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	fa02 f103 	lsl.w	r1, r2, r3
 80014f6:	4a58      	ldr	r2, [pc, #352]	; (8001658 <GPIO_Init+0x328>)
 80014f8:	7cfb      	ldrb	r3, [r7, #19]
 80014fa:	3302      	adds	r3, #2
 80014fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]


		// 3. enable the exti interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001500:	4b56      	ldr	r3, [pc, #344]	; (800165c <GPIO_Init+0x32c>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	7912      	ldrb	r2, [r2, #4]
 8001508:	4611      	mov	r1, r2
 800150a:	2201      	movs	r2, #1
 800150c:	408a      	lsls	r2, r1
 800150e:	4611      	mov	r1, r2
 8001510:	4a52      	ldr	r2, [pc, #328]	; (800165c <GPIO_Init+0x32c>)
 8001512:	430b      	orrs	r3, r1
 8001514:	6013      	str	r3, [r2, #0]
	}

	// 2. configure the speed
	temp = 0;
 8001516:	2300      	movs	r3, #0
 8001518:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	799b      	ldrb	r3, [r3, #6]
 800151e:	461a      	mov	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	791b      	ldrb	r3, [r3, #4]
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clear
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	689a      	ldr	r2, [r3, #8]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	791b      	ldrb	r3, [r3, #4]
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	2103      	movs	r1, #3
 800153a:	fa01 f303 	lsl.w	r3, r1, r3
 800153e:	43db      	mvns	r3, r3
 8001540:	4619      	mov	r1, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	400a      	ands	r2, r1
 8001548:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;	// setting
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	6899      	ldr	r1, [r3, #8]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	697a      	ldr	r2, [r7, #20]
 8001556:	430a      	orrs	r2, r1
 8001558:	609a      	str	r2, [r3, #8]

	// 3. configure the pupd settings
	temp = 0;
 800155a:	2300      	movs	r3, #0
 800155c:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	79db      	ldrb	r3, [r3, #7]
 8001562:	461a      	mov	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	791b      	ldrb	r3, [r3, #4]
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clear
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	68da      	ldr	r2, [r3, #12]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	791b      	ldrb	r3, [r3, #4]
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	2103      	movs	r1, #3
 800157e:	fa01 f303 	lsl.w	r3, r1, r3
 8001582:	43db      	mvns	r3, r3
 8001584:	4619      	mov	r1, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	400a      	ands	r2, r1
 800158c:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;	// setting
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	68d9      	ldr	r1, [r3, #12]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	697a      	ldr	r2, [r7, #20]
 800159a:	430a      	orrs	r2, r1
 800159c:	60da      	str	r2, [r3, #12]


	// 4. configure the optype
	temp = 0;
 800159e:	2300      	movs	r3, #0
 80015a0:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	7a1b      	ldrb	r3, [r3, #8]
 80015a6:	461a      	mov	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	791b      	ldrb	r3, [r3, #4]
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x01 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clear
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	685a      	ldr	r2, [r3, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	791b      	ldrb	r3, [r3, #4]
 80015bc:	4619      	mov	r1, r3
 80015be:	2301      	movs	r3, #1
 80015c0:	408b      	lsls	r3, r1
 80015c2:	43db      	mvns	r3, r3
 80015c4:	4619      	mov	r1, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	400a      	ands	r2, r1
 80015cc:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;	// setting
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	6859      	ldr	r1, [r3, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	697a      	ldr	r2, [r7, #20]
 80015da:	430a      	orrs	r2, r1
 80015dc:	605a      	str	r2, [r3, #4]

	// 5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	795b      	ldrb	r3, [r3, #5]
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d131      	bne.n	800164a <GPIO_Init+0x31a>
	{
		// configure the alt function register
		uint8_t temp1,temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	791b      	ldrb	r3, [r3, #4]
 80015ea:	08db      	lsrs	r3, r3, #3
 80015ec:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	791b      	ldrb	r3, [r3, #4]
 80015f2:	f003 0307 	and.w	r3, r3, #7
 80015f6:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2)); // clearing
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	7c3a      	ldrb	r2, [r7, #16]
 80015fe:	3208      	adds	r2, #8
 8001600:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001604:	7bfb      	ldrb	r3, [r7, #15]
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	220f      	movs	r2, #15
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	43db      	mvns	r3, r3
 8001610:	4618      	mov	r0, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	7c3a      	ldrb	r2, [r7, #16]
 8001618:	4001      	ands	r1, r0
 800161a:	3208      	adds	r2, #8
 800161c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2); // setting
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	7c3a      	ldrb	r2, [r7, #16]
 8001626:	3208      	adds	r2, #8
 8001628:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	7a5b      	ldrb	r3, [r3, #9]
 8001630:	461a      	mov	r2, r3
 8001632:	7bfb      	ldrb	r3, [r7, #15]
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	4618      	mov	r0, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	7c3a      	ldrb	r2, [r7, #16]
 8001642:	4301      	orrs	r1, r0
 8001644:	3208      	adds	r2, #8
 8001646:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 800164a:	bf00      	nop
 800164c:	3718      	adds	r7, #24
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40023800 	.word	0x40023800
 8001658:	40013800 	.word	0x40013800
 800165c:	40013c00 	.word	0x40013c00

08001660 <GPIO_ReadFromInputPin>:

/*
 * Data read and write
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	460b      	mov	r3, r1
 800166a:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	691a      	ldr	r2, [r3, #16]
 8001670:	78fb      	ldrb	r3, [r7, #3]
 8001672:	fa22 f303 	lsr.w	r3, r2, r3
 8001676:	b2db      	uxtb	r3, r3
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	73fb      	strb	r3, [r7, #15]
	return value;
 800167e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001680:	4618      	mov	r0, r3
 8001682:	3714      	adds	r7, #20
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <__errno>:
 800168c:	4b01      	ldr	r3, [pc, #4]	; (8001694 <__errno+0x8>)
 800168e:	6818      	ldr	r0, [r3, #0]
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	20000018 	.word	0x20000018

08001698 <__libc_init_array>:
 8001698:	b570      	push	{r4, r5, r6, lr}
 800169a:	4d0d      	ldr	r5, [pc, #52]	; (80016d0 <__libc_init_array+0x38>)
 800169c:	4c0d      	ldr	r4, [pc, #52]	; (80016d4 <__libc_init_array+0x3c>)
 800169e:	1b64      	subs	r4, r4, r5
 80016a0:	10a4      	asrs	r4, r4, #2
 80016a2:	2600      	movs	r6, #0
 80016a4:	42a6      	cmp	r6, r4
 80016a6:	d109      	bne.n	80016bc <__libc_init_array+0x24>
 80016a8:	4d0b      	ldr	r5, [pc, #44]	; (80016d8 <__libc_init_array+0x40>)
 80016aa:	4c0c      	ldr	r4, [pc, #48]	; (80016dc <__libc_init_array+0x44>)
 80016ac:	f000 ffec 	bl	8002688 <_init>
 80016b0:	1b64      	subs	r4, r4, r5
 80016b2:	10a4      	asrs	r4, r4, #2
 80016b4:	2600      	movs	r6, #0
 80016b6:	42a6      	cmp	r6, r4
 80016b8:	d105      	bne.n	80016c6 <__libc_init_array+0x2e>
 80016ba:	bd70      	pop	{r4, r5, r6, pc}
 80016bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80016c0:	4798      	blx	r3
 80016c2:	3601      	adds	r6, #1
 80016c4:	e7ee      	b.n	80016a4 <__libc_init_array+0xc>
 80016c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80016ca:	4798      	blx	r3
 80016cc:	3601      	adds	r6, #1
 80016ce:	e7f2      	b.n	80016b6 <__libc_init_array+0x1e>
 80016d0:	0800277c 	.word	0x0800277c
 80016d4:	0800277c 	.word	0x0800277c
 80016d8:	0800277c 	.word	0x0800277c
 80016dc:	08002780 	.word	0x08002780

080016e0 <memset>:
 80016e0:	4402      	add	r2, r0
 80016e2:	4603      	mov	r3, r0
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d100      	bne.n	80016ea <memset+0xa>
 80016e8:	4770      	bx	lr
 80016ea:	f803 1b01 	strb.w	r1, [r3], #1
 80016ee:	e7f9      	b.n	80016e4 <memset+0x4>

080016f0 <iprintf>:
 80016f0:	b40f      	push	{r0, r1, r2, r3}
 80016f2:	4b0a      	ldr	r3, [pc, #40]	; (800171c <iprintf+0x2c>)
 80016f4:	b513      	push	{r0, r1, r4, lr}
 80016f6:	681c      	ldr	r4, [r3, #0]
 80016f8:	b124      	cbz	r4, 8001704 <iprintf+0x14>
 80016fa:	69a3      	ldr	r3, [r4, #24]
 80016fc:	b913      	cbnz	r3, 8001704 <iprintf+0x14>
 80016fe:	4620      	mov	r0, r4
 8001700:	f000 fa5e 	bl	8001bc0 <__sinit>
 8001704:	ab05      	add	r3, sp, #20
 8001706:	9a04      	ldr	r2, [sp, #16]
 8001708:	68a1      	ldr	r1, [r4, #8]
 800170a:	9301      	str	r3, [sp, #4]
 800170c:	4620      	mov	r0, r4
 800170e:	f000 fc2f 	bl	8001f70 <_vfiprintf_r>
 8001712:	b002      	add	sp, #8
 8001714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001718:	b004      	add	sp, #16
 800171a:	4770      	bx	lr
 800171c:	20000018 	.word	0x20000018

08001720 <_puts_r>:
 8001720:	b570      	push	{r4, r5, r6, lr}
 8001722:	460e      	mov	r6, r1
 8001724:	4605      	mov	r5, r0
 8001726:	b118      	cbz	r0, 8001730 <_puts_r+0x10>
 8001728:	6983      	ldr	r3, [r0, #24]
 800172a:	b90b      	cbnz	r3, 8001730 <_puts_r+0x10>
 800172c:	f000 fa48 	bl	8001bc0 <__sinit>
 8001730:	69ab      	ldr	r3, [r5, #24]
 8001732:	68ac      	ldr	r4, [r5, #8]
 8001734:	b913      	cbnz	r3, 800173c <_puts_r+0x1c>
 8001736:	4628      	mov	r0, r5
 8001738:	f000 fa42 	bl	8001bc0 <__sinit>
 800173c:	4b2c      	ldr	r3, [pc, #176]	; (80017f0 <_puts_r+0xd0>)
 800173e:	429c      	cmp	r4, r3
 8001740:	d120      	bne.n	8001784 <_puts_r+0x64>
 8001742:	686c      	ldr	r4, [r5, #4]
 8001744:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001746:	07db      	lsls	r3, r3, #31
 8001748:	d405      	bmi.n	8001756 <_puts_r+0x36>
 800174a:	89a3      	ldrh	r3, [r4, #12]
 800174c:	0598      	lsls	r0, r3, #22
 800174e:	d402      	bmi.n	8001756 <_puts_r+0x36>
 8001750:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001752:	f000 fad3 	bl	8001cfc <__retarget_lock_acquire_recursive>
 8001756:	89a3      	ldrh	r3, [r4, #12]
 8001758:	0719      	lsls	r1, r3, #28
 800175a:	d51d      	bpl.n	8001798 <_puts_r+0x78>
 800175c:	6923      	ldr	r3, [r4, #16]
 800175e:	b1db      	cbz	r3, 8001798 <_puts_r+0x78>
 8001760:	3e01      	subs	r6, #1
 8001762:	68a3      	ldr	r3, [r4, #8]
 8001764:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001768:	3b01      	subs	r3, #1
 800176a:	60a3      	str	r3, [r4, #8]
 800176c:	bb39      	cbnz	r1, 80017be <_puts_r+0x9e>
 800176e:	2b00      	cmp	r3, #0
 8001770:	da38      	bge.n	80017e4 <_puts_r+0xc4>
 8001772:	4622      	mov	r2, r4
 8001774:	210a      	movs	r1, #10
 8001776:	4628      	mov	r0, r5
 8001778:	f000 f848 	bl	800180c <__swbuf_r>
 800177c:	3001      	adds	r0, #1
 800177e:	d011      	beq.n	80017a4 <_puts_r+0x84>
 8001780:	250a      	movs	r5, #10
 8001782:	e011      	b.n	80017a8 <_puts_r+0x88>
 8001784:	4b1b      	ldr	r3, [pc, #108]	; (80017f4 <_puts_r+0xd4>)
 8001786:	429c      	cmp	r4, r3
 8001788:	d101      	bne.n	800178e <_puts_r+0x6e>
 800178a:	68ac      	ldr	r4, [r5, #8]
 800178c:	e7da      	b.n	8001744 <_puts_r+0x24>
 800178e:	4b1a      	ldr	r3, [pc, #104]	; (80017f8 <_puts_r+0xd8>)
 8001790:	429c      	cmp	r4, r3
 8001792:	bf08      	it	eq
 8001794:	68ec      	ldreq	r4, [r5, #12]
 8001796:	e7d5      	b.n	8001744 <_puts_r+0x24>
 8001798:	4621      	mov	r1, r4
 800179a:	4628      	mov	r0, r5
 800179c:	f000 f888 	bl	80018b0 <__swsetup_r>
 80017a0:	2800      	cmp	r0, #0
 80017a2:	d0dd      	beq.n	8001760 <_puts_r+0x40>
 80017a4:	f04f 35ff 	mov.w	r5, #4294967295
 80017a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80017aa:	07da      	lsls	r2, r3, #31
 80017ac:	d405      	bmi.n	80017ba <_puts_r+0x9a>
 80017ae:	89a3      	ldrh	r3, [r4, #12]
 80017b0:	059b      	lsls	r3, r3, #22
 80017b2:	d402      	bmi.n	80017ba <_puts_r+0x9a>
 80017b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80017b6:	f000 faa2 	bl	8001cfe <__retarget_lock_release_recursive>
 80017ba:	4628      	mov	r0, r5
 80017bc:	bd70      	pop	{r4, r5, r6, pc}
 80017be:	2b00      	cmp	r3, #0
 80017c0:	da04      	bge.n	80017cc <_puts_r+0xac>
 80017c2:	69a2      	ldr	r2, [r4, #24]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	dc06      	bgt.n	80017d6 <_puts_r+0xb6>
 80017c8:	290a      	cmp	r1, #10
 80017ca:	d004      	beq.n	80017d6 <_puts_r+0xb6>
 80017cc:	6823      	ldr	r3, [r4, #0]
 80017ce:	1c5a      	adds	r2, r3, #1
 80017d0:	6022      	str	r2, [r4, #0]
 80017d2:	7019      	strb	r1, [r3, #0]
 80017d4:	e7c5      	b.n	8001762 <_puts_r+0x42>
 80017d6:	4622      	mov	r2, r4
 80017d8:	4628      	mov	r0, r5
 80017da:	f000 f817 	bl	800180c <__swbuf_r>
 80017de:	3001      	adds	r0, #1
 80017e0:	d1bf      	bne.n	8001762 <_puts_r+0x42>
 80017e2:	e7df      	b.n	80017a4 <_puts_r+0x84>
 80017e4:	6823      	ldr	r3, [r4, #0]
 80017e6:	250a      	movs	r5, #10
 80017e8:	1c5a      	adds	r2, r3, #1
 80017ea:	6022      	str	r2, [r4, #0]
 80017ec:	701d      	strb	r5, [r3, #0]
 80017ee:	e7db      	b.n	80017a8 <_puts_r+0x88>
 80017f0:	08002708 	.word	0x08002708
 80017f4:	08002728 	.word	0x08002728
 80017f8:	080026e8 	.word	0x080026e8

080017fc <puts>:
 80017fc:	4b02      	ldr	r3, [pc, #8]	; (8001808 <puts+0xc>)
 80017fe:	4601      	mov	r1, r0
 8001800:	6818      	ldr	r0, [r3, #0]
 8001802:	f7ff bf8d 	b.w	8001720 <_puts_r>
 8001806:	bf00      	nop
 8001808:	20000018 	.word	0x20000018

0800180c <__swbuf_r>:
 800180c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800180e:	460e      	mov	r6, r1
 8001810:	4614      	mov	r4, r2
 8001812:	4605      	mov	r5, r0
 8001814:	b118      	cbz	r0, 800181e <__swbuf_r+0x12>
 8001816:	6983      	ldr	r3, [r0, #24]
 8001818:	b90b      	cbnz	r3, 800181e <__swbuf_r+0x12>
 800181a:	f000 f9d1 	bl	8001bc0 <__sinit>
 800181e:	4b21      	ldr	r3, [pc, #132]	; (80018a4 <__swbuf_r+0x98>)
 8001820:	429c      	cmp	r4, r3
 8001822:	d12b      	bne.n	800187c <__swbuf_r+0x70>
 8001824:	686c      	ldr	r4, [r5, #4]
 8001826:	69a3      	ldr	r3, [r4, #24]
 8001828:	60a3      	str	r3, [r4, #8]
 800182a:	89a3      	ldrh	r3, [r4, #12]
 800182c:	071a      	lsls	r2, r3, #28
 800182e:	d52f      	bpl.n	8001890 <__swbuf_r+0x84>
 8001830:	6923      	ldr	r3, [r4, #16]
 8001832:	b36b      	cbz	r3, 8001890 <__swbuf_r+0x84>
 8001834:	6923      	ldr	r3, [r4, #16]
 8001836:	6820      	ldr	r0, [r4, #0]
 8001838:	1ac0      	subs	r0, r0, r3
 800183a:	6963      	ldr	r3, [r4, #20]
 800183c:	b2f6      	uxtb	r6, r6
 800183e:	4283      	cmp	r3, r0
 8001840:	4637      	mov	r7, r6
 8001842:	dc04      	bgt.n	800184e <__swbuf_r+0x42>
 8001844:	4621      	mov	r1, r4
 8001846:	4628      	mov	r0, r5
 8001848:	f000 f926 	bl	8001a98 <_fflush_r>
 800184c:	bb30      	cbnz	r0, 800189c <__swbuf_r+0x90>
 800184e:	68a3      	ldr	r3, [r4, #8]
 8001850:	3b01      	subs	r3, #1
 8001852:	60a3      	str	r3, [r4, #8]
 8001854:	6823      	ldr	r3, [r4, #0]
 8001856:	1c5a      	adds	r2, r3, #1
 8001858:	6022      	str	r2, [r4, #0]
 800185a:	701e      	strb	r6, [r3, #0]
 800185c:	6963      	ldr	r3, [r4, #20]
 800185e:	3001      	adds	r0, #1
 8001860:	4283      	cmp	r3, r0
 8001862:	d004      	beq.n	800186e <__swbuf_r+0x62>
 8001864:	89a3      	ldrh	r3, [r4, #12]
 8001866:	07db      	lsls	r3, r3, #31
 8001868:	d506      	bpl.n	8001878 <__swbuf_r+0x6c>
 800186a:	2e0a      	cmp	r6, #10
 800186c:	d104      	bne.n	8001878 <__swbuf_r+0x6c>
 800186e:	4621      	mov	r1, r4
 8001870:	4628      	mov	r0, r5
 8001872:	f000 f911 	bl	8001a98 <_fflush_r>
 8001876:	b988      	cbnz	r0, 800189c <__swbuf_r+0x90>
 8001878:	4638      	mov	r0, r7
 800187a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800187c:	4b0a      	ldr	r3, [pc, #40]	; (80018a8 <__swbuf_r+0x9c>)
 800187e:	429c      	cmp	r4, r3
 8001880:	d101      	bne.n	8001886 <__swbuf_r+0x7a>
 8001882:	68ac      	ldr	r4, [r5, #8]
 8001884:	e7cf      	b.n	8001826 <__swbuf_r+0x1a>
 8001886:	4b09      	ldr	r3, [pc, #36]	; (80018ac <__swbuf_r+0xa0>)
 8001888:	429c      	cmp	r4, r3
 800188a:	bf08      	it	eq
 800188c:	68ec      	ldreq	r4, [r5, #12]
 800188e:	e7ca      	b.n	8001826 <__swbuf_r+0x1a>
 8001890:	4621      	mov	r1, r4
 8001892:	4628      	mov	r0, r5
 8001894:	f000 f80c 	bl	80018b0 <__swsetup_r>
 8001898:	2800      	cmp	r0, #0
 800189a:	d0cb      	beq.n	8001834 <__swbuf_r+0x28>
 800189c:	f04f 37ff 	mov.w	r7, #4294967295
 80018a0:	e7ea      	b.n	8001878 <__swbuf_r+0x6c>
 80018a2:	bf00      	nop
 80018a4:	08002708 	.word	0x08002708
 80018a8:	08002728 	.word	0x08002728
 80018ac:	080026e8 	.word	0x080026e8

080018b0 <__swsetup_r>:
 80018b0:	4b32      	ldr	r3, [pc, #200]	; (800197c <__swsetup_r+0xcc>)
 80018b2:	b570      	push	{r4, r5, r6, lr}
 80018b4:	681d      	ldr	r5, [r3, #0]
 80018b6:	4606      	mov	r6, r0
 80018b8:	460c      	mov	r4, r1
 80018ba:	b125      	cbz	r5, 80018c6 <__swsetup_r+0x16>
 80018bc:	69ab      	ldr	r3, [r5, #24]
 80018be:	b913      	cbnz	r3, 80018c6 <__swsetup_r+0x16>
 80018c0:	4628      	mov	r0, r5
 80018c2:	f000 f97d 	bl	8001bc0 <__sinit>
 80018c6:	4b2e      	ldr	r3, [pc, #184]	; (8001980 <__swsetup_r+0xd0>)
 80018c8:	429c      	cmp	r4, r3
 80018ca:	d10f      	bne.n	80018ec <__swsetup_r+0x3c>
 80018cc:	686c      	ldr	r4, [r5, #4]
 80018ce:	89a3      	ldrh	r3, [r4, #12]
 80018d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80018d4:	0719      	lsls	r1, r3, #28
 80018d6:	d42c      	bmi.n	8001932 <__swsetup_r+0x82>
 80018d8:	06dd      	lsls	r5, r3, #27
 80018da:	d411      	bmi.n	8001900 <__swsetup_r+0x50>
 80018dc:	2309      	movs	r3, #9
 80018de:	6033      	str	r3, [r6, #0]
 80018e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80018e4:	81a3      	strh	r3, [r4, #12]
 80018e6:	f04f 30ff 	mov.w	r0, #4294967295
 80018ea:	e03e      	b.n	800196a <__swsetup_r+0xba>
 80018ec:	4b25      	ldr	r3, [pc, #148]	; (8001984 <__swsetup_r+0xd4>)
 80018ee:	429c      	cmp	r4, r3
 80018f0:	d101      	bne.n	80018f6 <__swsetup_r+0x46>
 80018f2:	68ac      	ldr	r4, [r5, #8]
 80018f4:	e7eb      	b.n	80018ce <__swsetup_r+0x1e>
 80018f6:	4b24      	ldr	r3, [pc, #144]	; (8001988 <__swsetup_r+0xd8>)
 80018f8:	429c      	cmp	r4, r3
 80018fa:	bf08      	it	eq
 80018fc:	68ec      	ldreq	r4, [r5, #12]
 80018fe:	e7e6      	b.n	80018ce <__swsetup_r+0x1e>
 8001900:	0758      	lsls	r0, r3, #29
 8001902:	d512      	bpl.n	800192a <__swsetup_r+0x7a>
 8001904:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001906:	b141      	cbz	r1, 800191a <__swsetup_r+0x6a>
 8001908:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800190c:	4299      	cmp	r1, r3
 800190e:	d002      	beq.n	8001916 <__swsetup_r+0x66>
 8001910:	4630      	mov	r0, r6
 8001912:	f000 fa59 	bl	8001dc8 <_free_r>
 8001916:	2300      	movs	r3, #0
 8001918:	6363      	str	r3, [r4, #52]	; 0x34
 800191a:	89a3      	ldrh	r3, [r4, #12]
 800191c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001920:	81a3      	strh	r3, [r4, #12]
 8001922:	2300      	movs	r3, #0
 8001924:	6063      	str	r3, [r4, #4]
 8001926:	6923      	ldr	r3, [r4, #16]
 8001928:	6023      	str	r3, [r4, #0]
 800192a:	89a3      	ldrh	r3, [r4, #12]
 800192c:	f043 0308 	orr.w	r3, r3, #8
 8001930:	81a3      	strh	r3, [r4, #12]
 8001932:	6923      	ldr	r3, [r4, #16]
 8001934:	b94b      	cbnz	r3, 800194a <__swsetup_r+0x9a>
 8001936:	89a3      	ldrh	r3, [r4, #12]
 8001938:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800193c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001940:	d003      	beq.n	800194a <__swsetup_r+0x9a>
 8001942:	4621      	mov	r1, r4
 8001944:	4630      	mov	r0, r6
 8001946:	f000 f9ff 	bl	8001d48 <__smakebuf_r>
 800194a:	89a0      	ldrh	r0, [r4, #12]
 800194c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001950:	f010 0301 	ands.w	r3, r0, #1
 8001954:	d00a      	beq.n	800196c <__swsetup_r+0xbc>
 8001956:	2300      	movs	r3, #0
 8001958:	60a3      	str	r3, [r4, #8]
 800195a:	6963      	ldr	r3, [r4, #20]
 800195c:	425b      	negs	r3, r3
 800195e:	61a3      	str	r3, [r4, #24]
 8001960:	6923      	ldr	r3, [r4, #16]
 8001962:	b943      	cbnz	r3, 8001976 <__swsetup_r+0xc6>
 8001964:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001968:	d1ba      	bne.n	80018e0 <__swsetup_r+0x30>
 800196a:	bd70      	pop	{r4, r5, r6, pc}
 800196c:	0781      	lsls	r1, r0, #30
 800196e:	bf58      	it	pl
 8001970:	6963      	ldrpl	r3, [r4, #20]
 8001972:	60a3      	str	r3, [r4, #8]
 8001974:	e7f4      	b.n	8001960 <__swsetup_r+0xb0>
 8001976:	2000      	movs	r0, #0
 8001978:	e7f7      	b.n	800196a <__swsetup_r+0xba>
 800197a:	bf00      	nop
 800197c:	20000018 	.word	0x20000018
 8001980:	08002708 	.word	0x08002708
 8001984:	08002728 	.word	0x08002728
 8001988:	080026e8 	.word	0x080026e8

0800198c <__sflush_r>:
 800198c:	898a      	ldrh	r2, [r1, #12]
 800198e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001992:	4605      	mov	r5, r0
 8001994:	0710      	lsls	r0, r2, #28
 8001996:	460c      	mov	r4, r1
 8001998:	d458      	bmi.n	8001a4c <__sflush_r+0xc0>
 800199a:	684b      	ldr	r3, [r1, #4]
 800199c:	2b00      	cmp	r3, #0
 800199e:	dc05      	bgt.n	80019ac <__sflush_r+0x20>
 80019a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	dc02      	bgt.n	80019ac <__sflush_r+0x20>
 80019a6:	2000      	movs	r0, #0
 80019a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80019ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80019ae:	2e00      	cmp	r6, #0
 80019b0:	d0f9      	beq.n	80019a6 <__sflush_r+0x1a>
 80019b2:	2300      	movs	r3, #0
 80019b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80019b8:	682f      	ldr	r7, [r5, #0]
 80019ba:	602b      	str	r3, [r5, #0]
 80019bc:	d032      	beq.n	8001a24 <__sflush_r+0x98>
 80019be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80019c0:	89a3      	ldrh	r3, [r4, #12]
 80019c2:	075a      	lsls	r2, r3, #29
 80019c4:	d505      	bpl.n	80019d2 <__sflush_r+0x46>
 80019c6:	6863      	ldr	r3, [r4, #4]
 80019c8:	1ac0      	subs	r0, r0, r3
 80019ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80019cc:	b10b      	cbz	r3, 80019d2 <__sflush_r+0x46>
 80019ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80019d0:	1ac0      	subs	r0, r0, r3
 80019d2:	2300      	movs	r3, #0
 80019d4:	4602      	mov	r2, r0
 80019d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80019d8:	6a21      	ldr	r1, [r4, #32]
 80019da:	4628      	mov	r0, r5
 80019dc:	47b0      	blx	r6
 80019de:	1c43      	adds	r3, r0, #1
 80019e0:	89a3      	ldrh	r3, [r4, #12]
 80019e2:	d106      	bne.n	80019f2 <__sflush_r+0x66>
 80019e4:	6829      	ldr	r1, [r5, #0]
 80019e6:	291d      	cmp	r1, #29
 80019e8:	d82c      	bhi.n	8001a44 <__sflush_r+0xb8>
 80019ea:	4a2a      	ldr	r2, [pc, #168]	; (8001a94 <__sflush_r+0x108>)
 80019ec:	40ca      	lsrs	r2, r1
 80019ee:	07d6      	lsls	r6, r2, #31
 80019f0:	d528      	bpl.n	8001a44 <__sflush_r+0xb8>
 80019f2:	2200      	movs	r2, #0
 80019f4:	6062      	str	r2, [r4, #4]
 80019f6:	04d9      	lsls	r1, r3, #19
 80019f8:	6922      	ldr	r2, [r4, #16]
 80019fa:	6022      	str	r2, [r4, #0]
 80019fc:	d504      	bpl.n	8001a08 <__sflush_r+0x7c>
 80019fe:	1c42      	adds	r2, r0, #1
 8001a00:	d101      	bne.n	8001a06 <__sflush_r+0x7a>
 8001a02:	682b      	ldr	r3, [r5, #0]
 8001a04:	b903      	cbnz	r3, 8001a08 <__sflush_r+0x7c>
 8001a06:	6560      	str	r0, [r4, #84]	; 0x54
 8001a08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001a0a:	602f      	str	r7, [r5, #0]
 8001a0c:	2900      	cmp	r1, #0
 8001a0e:	d0ca      	beq.n	80019a6 <__sflush_r+0x1a>
 8001a10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001a14:	4299      	cmp	r1, r3
 8001a16:	d002      	beq.n	8001a1e <__sflush_r+0x92>
 8001a18:	4628      	mov	r0, r5
 8001a1a:	f000 f9d5 	bl	8001dc8 <_free_r>
 8001a1e:	2000      	movs	r0, #0
 8001a20:	6360      	str	r0, [r4, #52]	; 0x34
 8001a22:	e7c1      	b.n	80019a8 <__sflush_r+0x1c>
 8001a24:	6a21      	ldr	r1, [r4, #32]
 8001a26:	2301      	movs	r3, #1
 8001a28:	4628      	mov	r0, r5
 8001a2a:	47b0      	blx	r6
 8001a2c:	1c41      	adds	r1, r0, #1
 8001a2e:	d1c7      	bne.n	80019c0 <__sflush_r+0x34>
 8001a30:	682b      	ldr	r3, [r5, #0]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d0c4      	beq.n	80019c0 <__sflush_r+0x34>
 8001a36:	2b1d      	cmp	r3, #29
 8001a38:	d001      	beq.n	8001a3e <__sflush_r+0xb2>
 8001a3a:	2b16      	cmp	r3, #22
 8001a3c:	d101      	bne.n	8001a42 <__sflush_r+0xb6>
 8001a3e:	602f      	str	r7, [r5, #0]
 8001a40:	e7b1      	b.n	80019a6 <__sflush_r+0x1a>
 8001a42:	89a3      	ldrh	r3, [r4, #12]
 8001a44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a48:	81a3      	strh	r3, [r4, #12]
 8001a4a:	e7ad      	b.n	80019a8 <__sflush_r+0x1c>
 8001a4c:	690f      	ldr	r7, [r1, #16]
 8001a4e:	2f00      	cmp	r7, #0
 8001a50:	d0a9      	beq.n	80019a6 <__sflush_r+0x1a>
 8001a52:	0793      	lsls	r3, r2, #30
 8001a54:	680e      	ldr	r6, [r1, #0]
 8001a56:	bf08      	it	eq
 8001a58:	694b      	ldreq	r3, [r1, #20]
 8001a5a:	600f      	str	r7, [r1, #0]
 8001a5c:	bf18      	it	ne
 8001a5e:	2300      	movne	r3, #0
 8001a60:	eba6 0807 	sub.w	r8, r6, r7
 8001a64:	608b      	str	r3, [r1, #8]
 8001a66:	f1b8 0f00 	cmp.w	r8, #0
 8001a6a:	dd9c      	ble.n	80019a6 <__sflush_r+0x1a>
 8001a6c:	6a21      	ldr	r1, [r4, #32]
 8001a6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001a70:	4643      	mov	r3, r8
 8001a72:	463a      	mov	r2, r7
 8001a74:	4628      	mov	r0, r5
 8001a76:	47b0      	blx	r6
 8001a78:	2800      	cmp	r0, #0
 8001a7a:	dc06      	bgt.n	8001a8a <__sflush_r+0xfe>
 8001a7c:	89a3      	ldrh	r3, [r4, #12]
 8001a7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a82:	81a3      	strh	r3, [r4, #12]
 8001a84:	f04f 30ff 	mov.w	r0, #4294967295
 8001a88:	e78e      	b.n	80019a8 <__sflush_r+0x1c>
 8001a8a:	4407      	add	r7, r0
 8001a8c:	eba8 0800 	sub.w	r8, r8, r0
 8001a90:	e7e9      	b.n	8001a66 <__sflush_r+0xda>
 8001a92:	bf00      	nop
 8001a94:	20400001 	.word	0x20400001

08001a98 <_fflush_r>:
 8001a98:	b538      	push	{r3, r4, r5, lr}
 8001a9a:	690b      	ldr	r3, [r1, #16]
 8001a9c:	4605      	mov	r5, r0
 8001a9e:	460c      	mov	r4, r1
 8001aa0:	b913      	cbnz	r3, 8001aa8 <_fflush_r+0x10>
 8001aa2:	2500      	movs	r5, #0
 8001aa4:	4628      	mov	r0, r5
 8001aa6:	bd38      	pop	{r3, r4, r5, pc}
 8001aa8:	b118      	cbz	r0, 8001ab2 <_fflush_r+0x1a>
 8001aaa:	6983      	ldr	r3, [r0, #24]
 8001aac:	b90b      	cbnz	r3, 8001ab2 <_fflush_r+0x1a>
 8001aae:	f000 f887 	bl	8001bc0 <__sinit>
 8001ab2:	4b14      	ldr	r3, [pc, #80]	; (8001b04 <_fflush_r+0x6c>)
 8001ab4:	429c      	cmp	r4, r3
 8001ab6:	d11b      	bne.n	8001af0 <_fflush_r+0x58>
 8001ab8:	686c      	ldr	r4, [r5, #4]
 8001aba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d0ef      	beq.n	8001aa2 <_fflush_r+0xa>
 8001ac2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001ac4:	07d0      	lsls	r0, r2, #31
 8001ac6:	d404      	bmi.n	8001ad2 <_fflush_r+0x3a>
 8001ac8:	0599      	lsls	r1, r3, #22
 8001aca:	d402      	bmi.n	8001ad2 <_fflush_r+0x3a>
 8001acc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001ace:	f000 f915 	bl	8001cfc <__retarget_lock_acquire_recursive>
 8001ad2:	4628      	mov	r0, r5
 8001ad4:	4621      	mov	r1, r4
 8001ad6:	f7ff ff59 	bl	800198c <__sflush_r>
 8001ada:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001adc:	07da      	lsls	r2, r3, #31
 8001ade:	4605      	mov	r5, r0
 8001ae0:	d4e0      	bmi.n	8001aa4 <_fflush_r+0xc>
 8001ae2:	89a3      	ldrh	r3, [r4, #12]
 8001ae4:	059b      	lsls	r3, r3, #22
 8001ae6:	d4dd      	bmi.n	8001aa4 <_fflush_r+0xc>
 8001ae8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001aea:	f000 f908 	bl	8001cfe <__retarget_lock_release_recursive>
 8001aee:	e7d9      	b.n	8001aa4 <_fflush_r+0xc>
 8001af0:	4b05      	ldr	r3, [pc, #20]	; (8001b08 <_fflush_r+0x70>)
 8001af2:	429c      	cmp	r4, r3
 8001af4:	d101      	bne.n	8001afa <_fflush_r+0x62>
 8001af6:	68ac      	ldr	r4, [r5, #8]
 8001af8:	e7df      	b.n	8001aba <_fflush_r+0x22>
 8001afa:	4b04      	ldr	r3, [pc, #16]	; (8001b0c <_fflush_r+0x74>)
 8001afc:	429c      	cmp	r4, r3
 8001afe:	bf08      	it	eq
 8001b00:	68ec      	ldreq	r4, [r5, #12]
 8001b02:	e7da      	b.n	8001aba <_fflush_r+0x22>
 8001b04:	08002708 	.word	0x08002708
 8001b08:	08002728 	.word	0x08002728
 8001b0c:	080026e8 	.word	0x080026e8

08001b10 <std>:
 8001b10:	2300      	movs	r3, #0
 8001b12:	b510      	push	{r4, lr}
 8001b14:	4604      	mov	r4, r0
 8001b16:	e9c0 3300 	strd	r3, r3, [r0]
 8001b1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001b1e:	6083      	str	r3, [r0, #8]
 8001b20:	8181      	strh	r1, [r0, #12]
 8001b22:	6643      	str	r3, [r0, #100]	; 0x64
 8001b24:	81c2      	strh	r2, [r0, #14]
 8001b26:	6183      	str	r3, [r0, #24]
 8001b28:	4619      	mov	r1, r3
 8001b2a:	2208      	movs	r2, #8
 8001b2c:	305c      	adds	r0, #92	; 0x5c
 8001b2e:	f7ff fdd7 	bl	80016e0 <memset>
 8001b32:	4b05      	ldr	r3, [pc, #20]	; (8001b48 <std+0x38>)
 8001b34:	6263      	str	r3, [r4, #36]	; 0x24
 8001b36:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <std+0x3c>)
 8001b38:	62a3      	str	r3, [r4, #40]	; 0x28
 8001b3a:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <std+0x40>)
 8001b3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001b3e:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <std+0x44>)
 8001b40:	6224      	str	r4, [r4, #32]
 8001b42:	6323      	str	r3, [r4, #48]	; 0x30
 8001b44:	bd10      	pop	{r4, pc}
 8001b46:	bf00      	nop
 8001b48:	08002519 	.word	0x08002519
 8001b4c:	0800253b 	.word	0x0800253b
 8001b50:	08002573 	.word	0x08002573
 8001b54:	08002597 	.word	0x08002597

08001b58 <_cleanup_r>:
 8001b58:	4901      	ldr	r1, [pc, #4]	; (8001b60 <_cleanup_r+0x8>)
 8001b5a:	f000 b8af 	b.w	8001cbc <_fwalk_reent>
 8001b5e:	bf00      	nop
 8001b60:	08001a99 	.word	0x08001a99

08001b64 <__sfmoreglue>:
 8001b64:	b570      	push	{r4, r5, r6, lr}
 8001b66:	1e4a      	subs	r2, r1, #1
 8001b68:	2568      	movs	r5, #104	; 0x68
 8001b6a:	4355      	muls	r5, r2
 8001b6c:	460e      	mov	r6, r1
 8001b6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001b72:	f000 f979 	bl	8001e68 <_malloc_r>
 8001b76:	4604      	mov	r4, r0
 8001b78:	b140      	cbz	r0, 8001b8c <__sfmoreglue+0x28>
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	e9c0 1600 	strd	r1, r6, [r0]
 8001b80:	300c      	adds	r0, #12
 8001b82:	60a0      	str	r0, [r4, #8]
 8001b84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001b88:	f7ff fdaa 	bl	80016e0 <memset>
 8001b8c:	4620      	mov	r0, r4
 8001b8e:	bd70      	pop	{r4, r5, r6, pc}

08001b90 <__sfp_lock_acquire>:
 8001b90:	4801      	ldr	r0, [pc, #4]	; (8001b98 <__sfp_lock_acquire+0x8>)
 8001b92:	f000 b8b3 	b.w	8001cfc <__retarget_lock_acquire_recursive>
 8001b96:	bf00      	nop
 8001b98:	200000f8 	.word	0x200000f8

08001b9c <__sfp_lock_release>:
 8001b9c:	4801      	ldr	r0, [pc, #4]	; (8001ba4 <__sfp_lock_release+0x8>)
 8001b9e:	f000 b8ae 	b.w	8001cfe <__retarget_lock_release_recursive>
 8001ba2:	bf00      	nop
 8001ba4:	200000f8 	.word	0x200000f8

08001ba8 <__sinit_lock_acquire>:
 8001ba8:	4801      	ldr	r0, [pc, #4]	; (8001bb0 <__sinit_lock_acquire+0x8>)
 8001baa:	f000 b8a7 	b.w	8001cfc <__retarget_lock_acquire_recursive>
 8001bae:	bf00      	nop
 8001bb0:	200000f3 	.word	0x200000f3

08001bb4 <__sinit_lock_release>:
 8001bb4:	4801      	ldr	r0, [pc, #4]	; (8001bbc <__sinit_lock_release+0x8>)
 8001bb6:	f000 b8a2 	b.w	8001cfe <__retarget_lock_release_recursive>
 8001bba:	bf00      	nop
 8001bbc:	200000f3 	.word	0x200000f3

08001bc0 <__sinit>:
 8001bc0:	b510      	push	{r4, lr}
 8001bc2:	4604      	mov	r4, r0
 8001bc4:	f7ff fff0 	bl	8001ba8 <__sinit_lock_acquire>
 8001bc8:	69a3      	ldr	r3, [r4, #24]
 8001bca:	b11b      	cbz	r3, 8001bd4 <__sinit+0x14>
 8001bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001bd0:	f7ff bff0 	b.w	8001bb4 <__sinit_lock_release>
 8001bd4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001bd8:	6523      	str	r3, [r4, #80]	; 0x50
 8001bda:	4b13      	ldr	r3, [pc, #76]	; (8001c28 <__sinit+0x68>)
 8001bdc:	4a13      	ldr	r2, [pc, #76]	; (8001c2c <__sinit+0x6c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	62a2      	str	r2, [r4, #40]	; 0x28
 8001be2:	42a3      	cmp	r3, r4
 8001be4:	bf04      	itt	eq
 8001be6:	2301      	moveq	r3, #1
 8001be8:	61a3      	streq	r3, [r4, #24]
 8001bea:	4620      	mov	r0, r4
 8001bec:	f000 f820 	bl	8001c30 <__sfp>
 8001bf0:	6060      	str	r0, [r4, #4]
 8001bf2:	4620      	mov	r0, r4
 8001bf4:	f000 f81c 	bl	8001c30 <__sfp>
 8001bf8:	60a0      	str	r0, [r4, #8]
 8001bfa:	4620      	mov	r0, r4
 8001bfc:	f000 f818 	bl	8001c30 <__sfp>
 8001c00:	2200      	movs	r2, #0
 8001c02:	60e0      	str	r0, [r4, #12]
 8001c04:	2104      	movs	r1, #4
 8001c06:	6860      	ldr	r0, [r4, #4]
 8001c08:	f7ff ff82 	bl	8001b10 <std>
 8001c0c:	68a0      	ldr	r0, [r4, #8]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	2109      	movs	r1, #9
 8001c12:	f7ff ff7d 	bl	8001b10 <std>
 8001c16:	68e0      	ldr	r0, [r4, #12]
 8001c18:	2202      	movs	r2, #2
 8001c1a:	2112      	movs	r1, #18
 8001c1c:	f7ff ff78 	bl	8001b10 <std>
 8001c20:	2301      	movs	r3, #1
 8001c22:	61a3      	str	r3, [r4, #24]
 8001c24:	e7d2      	b.n	8001bcc <__sinit+0xc>
 8001c26:	bf00      	nop
 8001c28:	080026e4 	.word	0x080026e4
 8001c2c:	08001b59 	.word	0x08001b59

08001c30 <__sfp>:
 8001c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c32:	4607      	mov	r7, r0
 8001c34:	f7ff ffac 	bl	8001b90 <__sfp_lock_acquire>
 8001c38:	4b1e      	ldr	r3, [pc, #120]	; (8001cb4 <__sfp+0x84>)
 8001c3a:	681e      	ldr	r6, [r3, #0]
 8001c3c:	69b3      	ldr	r3, [r6, #24]
 8001c3e:	b913      	cbnz	r3, 8001c46 <__sfp+0x16>
 8001c40:	4630      	mov	r0, r6
 8001c42:	f7ff ffbd 	bl	8001bc0 <__sinit>
 8001c46:	3648      	adds	r6, #72	; 0x48
 8001c48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	d503      	bpl.n	8001c58 <__sfp+0x28>
 8001c50:	6833      	ldr	r3, [r6, #0]
 8001c52:	b30b      	cbz	r3, 8001c98 <__sfp+0x68>
 8001c54:	6836      	ldr	r6, [r6, #0]
 8001c56:	e7f7      	b.n	8001c48 <__sfp+0x18>
 8001c58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001c5c:	b9d5      	cbnz	r5, 8001c94 <__sfp+0x64>
 8001c5e:	4b16      	ldr	r3, [pc, #88]	; (8001cb8 <__sfp+0x88>)
 8001c60:	60e3      	str	r3, [r4, #12]
 8001c62:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001c66:	6665      	str	r5, [r4, #100]	; 0x64
 8001c68:	f000 f847 	bl	8001cfa <__retarget_lock_init_recursive>
 8001c6c:	f7ff ff96 	bl	8001b9c <__sfp_lock_release>
 8001c70:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001c74:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001c78:	6025      	str	r5, [r4, #0]
 8001c7a:	61a5      	str	r5, [r4, #24]
 8001c7c:	2208      	movs	r2, #8
 8001c7e:	4629      	mov	r1, r5
 8001c80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001c84:	f7ff fd2c 	bl	80016e0 <memset>
 8001c88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001c8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001c90:	4620      	mov	r0, r4
 8001c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c94:	3468      	adds	r4, #104	; 0x68
 8001c96:	e7d9      	b.n	8001c4c <__sfp+0x1c>
 8001c98:	2104      	movs	r1, #4
 8001c9a:	4638      	mov	r0, r7
 8001c9c:	f7ff ff62 	bl	8001b64 <__sfmoreglue>
 8001ca0:	4604      	mov	r4, r0
 8001ca2:	6030      	str	r0, [r6, #0]
 8001ca4:	2800      	cmp	r0, #0
 8001ca6:	d1d5      	bne.n	8001c54 <__sfp+0x24>
 8001ca8:	f7ff ff78 	bl	8001b9c <__sfp_lock_release>
 8001cac:	230c      	movs	r3, #12
 8001cae:	603b      	str	r3, [r7, #0]
 8001cb0:	e7ee      	b.n	8001c90 <__sfp+0x60>
 8001cb2:	bf00      	nop
 8001cb4:	080026e4 	.word	0x080026e4
 8001cb8:	ffff0001 	.word	0xffff0001

08001cbc <_fwalk_reent>:
 8001cbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001cc0:	4606      	mov	r6, r0
 8001cc2:	4688      	mov	r8, r1
 8001cc4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001cc8:	2700      	movs	r7, #0
 8001cca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001cce:	f1b9 0901 	subs.w	r9, r9, #1
 8001cd2:	d505      	bpl.n	8001ce0 <_fwalk_reent+0x24>
 8001cd4:	6824      	ldr	r4, [r4, #0]
 8001cd6:	2c00      	cmp	r4, #0
 8001cd8:	d1f7      	bne.n	8001cca <_fwalk_reent+0xe>
 8001cda:	4638      	mov	r0, r7
 8001cdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001ce0:	89ab      	ldrh	r3, [r5, #12]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d907      	bls.n	8001cf6 <_fwalk_reent+0x3a>
 8001ce6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001cea:	3301      	adds	r3, #1
 8001cec:	d003      	beq.n	8001cf6 <_fwalk_reent+0x3a>
 8001cee:	4629      	mov	r1, r5
 8001cf0:	4630      	mov	r0, r6
 8001cf2:	47c0      	blx	r8
 8001cf4:	4307      	orrs	r7, r0
 8001cf6:	3568      	adds	r5, #104	; 0x68
 8001cf8:	e7e9      	b.n	8001cce <_fwalk_reent+0x12>

08001cfa <__retarget_lock_init_recursive>:
 8001cfa:	4770      	bx	lr

08001cfc <__retarget_lock_acquire_recursive>:
 8001cfc:	4770      	bx	lr

08001cfe <__retarget_lock_release_recursive>:
 8001cfe:	4770      	bx	lr

08001d00 <__swhatbuf_r>:
 8001d00:	b570      	push	{r4, r5, r6, lr}
 8001d02:	460e      	mov	r6, r1
 8001d04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d08:	2900      	cmp	r1, #0
 8001d0a:	b096      	sub	sp, #88	; 0x58
 8001d0c:	4614      	mov	r4, r2
 8001d0e:	461d      	mov	r5, r3
 8001d10:	da07      	bge.n	8001d22 <__swhatbuf_r+0x22>
 8001d12:	2300      	movs	r3, #0
 8001d14:	602b      	str	r3, [r5, #0]
 8001d16:	89b3      	ldrh	r3, [r6, #12]
 8001d18:	061a      	lsls	r2, r3, #24
 8001d1a:	d410      	bmi.n	8001d3e <__swhatbuf_r+0x3e>
 8001d1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d20:	e00e      	b.n	8001d40 <__swhatbuf_r+0x40>
 8001d22:	466a      	mov	r2, sp
 8001d24:	f000 fc5e 	bl	80025e4 <_fstat_r>
 8001d28:	2800      	cmp	r0, #0
 8001d2a:	dbf2      	blt.n	8001d12 <__swhatbuf_r+0x12>
 8001d2c:	9a01      	ldr	r2, [sp, #4]
 8001d2e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001d32:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001d36:	425a      	negs	r2, r3
 8001d38:	415a      	adcs	r2, r3
 8001d3a:	602a      	str	r2, [r5, #0]
 8001d3c:	e7ee      	b.n	8001d1c <__swhatbuf_r+0x1c>
 8001d3e:	2340      	movs	r3, #64	; 0x40
 8001d40:	2000      	movs	r0, #0
 8001d42:	6023      	str	r3, [r4, #0]
 8001d44:	b016      	add	sp, #88	; 0x58
 8001d46:	bd70      	pop	{r4, r5, r6, pc}

08001d48 <__smakebuf_r>:
 8001d48:	898b      	ldrh	r3, [r1, #12]
 8001d4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001d4c:	079d      	lsls	r5, r3, #30
 8001d4e:	4606      	mov	r6, r0
 8001d50:	460c      	mov	r4, r1
 8001d52:	d507      	bpl.n	8001d64 <__smakebuf_r+0x1c>
 8001d54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001d58:	6023      	str	r3, [r4, #0]
 8001d5a:	6123      	str	r3, [r4, #16]
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	6163      	str	r3, [r4, #20]
 8001d60:	b002      	add	sp, #8
 8001d62:	bd70      	pop	{r4, r5, r6, pc}
 8001d64:	ab01      	add	r3, sp, #4
 8001d66:	466a      	mov	r2, sp
 8001d68:	f7ff ffca 	bl	8001d00 <__swhatbuf_r>
 8001d6c:	9900      	ldr	r1, [sp, #0]
 8001d6e:	4605      	mov	r5, r0
 8001d70:	4630      	mov	r0, r6
 8001d72:	f000 f879 	bl	8001e68 <_malloc_r>
 8001d76:	b948      	cbnz	r0, 8001d8c <__smakebuf_r+0x44>
 8001d78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d7c:	059a      	lsls	r2, r3, #22
 8001d7e:	d4ef      	bmi.n	8001d60 <__smakebuf_r+0x18>
 8001d80:	f023 0303 	bic.w	r3, r3, #3
 8001d84:	f043 0302 	orr.w	r3, r3, #2
 8001d88:	81a3      	strh	r3, [r4, #12]
 8001d8a:	e7e3      	b.n	8001d54 <__smakebuf_r+0xc>
 8001d8c:	4b0d      	ldr	r3, [pc, #52]	; (8001dc4 <__smakebuf_r+0x7c>)
 8001d8e:	62b3      	str	r3, [r6, #40]	; 0x28
 8001d90:	89a3      	ldrh	r3, [r4, #12]
 8001d92:	6020      	str	r0, [r4, #0]
 8001d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d98:	81a3      	strh	r3, [r4, #12]
 8001d9a:	9b00      	ldr	r3, [sp, #0]
 8001d9c:	6163      	str	r3, [r4, #20]
 8001d9e:	9b01      	ldr	r3, [sp, #4]
 8001da0:	6120      	str	r0, [r4, #16]
 8001da2:	b15b      	cbz	r3, 8001dbc <__smakebuf_r+0x74>
 8001da4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001da8:	4630      	mov	r0, r6
 8001daa:	f000 fc2d 	bl	8002608 <_isatty_r>
 8001dae:	b128      	cbz	r0, 8001dbc <__smakebuf_r+0x74>
 8001db0:	89a3      	ldrh	r3, [r4, #12]
 8001db2:	f023 0303 	bic.w	r3, r3, #3
 8001db6:	f043 0301 	orr.w	r3, r3, #1
 8001dba:	81a3      	strh	r3, [r4, #12]
 8001dbc:	89a0      	ldrh	r0, [r4, #12]
 8001dbe:	4305      	orrs	r5, r0
 8001dc0:	81a5      	strh	r5, [r4, #12]
 8001dc2:	e7cd      	b.n	8001d60 <__smakebuf_r+0x18>
 8001dc4:	08001b59 	.word	0x08001b59

08001dc8 <_free_r>:
 8001dc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001dca:	2900      	cmp	r1, #0
 8001dcc:	d048      	beq.n	8001e60 <_free_r+0x98>
 8001dce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001dd2:	9001      	str	r0, [sp, #4]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	f1a1 0404 	sub.w	r4, r1, #4
 8001dda:	bfb8      	it	lt
 8001ddc:	18e4      	addlt	r4, r4, r3
 8001dde:	f000 fc35 	bl	800264c <__malloc_lock>
 8001de2:	4a20      	ldr	r2, [pc, #128]	; (8001e64 <_free_r+0x9c>)
 8001de4:	9801      	ldr	r0, [sp, #4]
 8001de6:	6813      	ldr	r3, [r2, #0]
 8001de8:	4615      	mov	r5, r2
 8001dea:	b933      	cbnz	r3, 8001dfa <_free_r+0x32>
 8001dec:	6063      	str	r3, [r4, #4]
 8001dee:	6014      	str	r4, [r2, #0]
 8001df0:	b003      	add	sp, #12
 8001df2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001df6:	f000 bc2f 	b.w	8002658 <__malloc_unlock>
 8001dfa:	42a3      	cmp	r3, r4
 8001dfc:	d90b      	bls.n	8001e16 <_free_r+0x4e>
 8001dfe:	6821      	ldr	r1, [r4, #0]
 8001e00:	1862      	adds	r2, r4, r1
 8001e02:	4293      	cmp	r3, r2
 8001e04:	bf04      	itt	eq
 8001e06:	681a      	ldreq	r2, [r3, #0]
 8001e08:	685b      	ldreq	r3, [r3, #4]
 8001e0a:	6063      	str	r3, [r4, #4]
 8001e0c:	bf04      	itt	eq
 8001e0e:	1852      	addeq	r2, r2, r1
 8001e10:	6022      	streq	r2, [r4, #0]
 8001e12:	602c      	str	r4, [r5, #0]
 8001e14:	e7ec      	b.n	8001df0 <_free_r+0x28>
 8001e16:	461a      	mov	r2, r3
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	b10b      	cbz	r3, 8001e20 <_free_r+0x58>
 8001e1c:	42a3      	cmp	r3, r4
 8001e1e:	d9fa      	bls.n	8001e16 <_free_r+0x4e>
 8001e20:	6811      	ldr	r1, [r2, #0]
 8001e22:	1855      	adds	r5, r2, r1
 8001e24:	42a5      	cmp	r5, r4
 8001e26:	d10b      	bne.n	8001e40 <_free_r+0x78>
 8001e28:	6824      	ldr	r4, [r4, #0]
 8001e2a:	4421      	add	r1, r4
 8001e2c:	1854      	adds	r4, r2, r1
 8001e2e:	42a3      	cmp	r3, r4
 8001e30:	6011      	str	r1, [r2, #0]
 8001e32:	d1dd      	bne.n	8001df0 <_free_r+0x28>
 8001e34:	681c      	ldr	r4, [r3, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	6053      	str	r3, [r2, #4]
 8001e3a:	4421      	add	r1, r4
 8001e3c:	6011      	str	r1, [r2, #0]
 8001e3e:	e7d7      	b.n	8001df0 <_free_r+0x28>
 8001e40:	d902      	bls.n	8001e48 <_free_r+0x80>
 8001e42:	230c      	movs	r3, #12
 8001e44:	6003      	str	r3, [r0, #0]
 8001e46:	e7d3      	b.n	8001df0 <_free_r+0x28>
 8001e48:	6825      	ldr	r5, [r4, #0]
 8001e4a:	1961      	adds	r1, r4, r5
 8001e4c:	428b      	cmp	r3, r1
 8001e4e:	bf04      	itt	eq
 8001e50:	6819      	ldreq	r1, [r3, #0]
 8001e52:	685b      	ldreq	r3, [r3, #4]
 8001e54:	6063      	str	r3, [r4, #4]
 8001e56:	bf04      	itt	eq
 8001e58:	1949      	addeq	r1, r1, r5
 8001e5a:	6021      	streq	r1, [r4, #0]
 8001e5c:	6054      	str	r4, [r2, #4]
 8001e5e:	e7c7      	b.n	8001df0 <_free_r+0x28>
 8001e60:	b003      	add	sp, #12
 8001e62:	bd30      	pop	{r4, r5, pc}
 8001e64:	200000a0 	.word	0x200000a0

08001e68 <_malloc_r>:
 8001e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e6a:	1ccd      	adds	r5, r1, #3
 8001e6c:	f025 0503 	bic.w	r5, r5, #3
 8001e70:	3508      	adds	r5, #8
 8001e72:	2d0c      	cmp	r5, #12
 8001e74:	bf38      	it	cc
 8001e76:	250c      	movcc	r5, #12
 8001e78:	2d00      	cmp	r5, #0
 8001e7a:	4606      	mov	r6, r0
 8001e7c:	db01      	blt.n	8001e82 <_malloc_r+0x1a>
 8001e7e:	42a9      	cmp	r1, r5
 8001e80:	d903      	bls.n	8001e8a <_malloc_r+0x22>
 8001e82:	230c      	movs	r3, #12
 8001e84:	6033      	str	r3, [r6, #0]
 8001e86:	2000      	movs	r0, #0
 8001e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e8a:	f000 fbdf 	bl	800264c <__malloc_lock>
 8001e8e:	4921      	ldr	r1, [pc, #132]	; (8001f14 <_malloc_r+0xac>)
 8001e90:	680a      	ldr	r2, [r1, #0]
 8001e92:	4614      	mov	r4, r2
 8001e94:	b99c      	cbnz	r4, 8001ebe <_malloc_r+0x56>
 8001e96:	4f20      	ldr	r7, [pc, #128]	; (8001f18 <_malloc_r+0xb0>)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	b923      	cbnz	r3, 8001ea6 <_malloc_r+0x3e>
 8001e9c:	4621      	mov	r1, r4
 8001e9e:	4630      	mov	r0, r6
 8001ea0:	f000 fb2a 	bl	80024f8 <_sbrk_r>
 8001ea4:	6038      	str	r0, [r7, #0]
 8001ea6:	4629      	mov	r1, r5
 8001ea8:	4630      	mov	r0, r6
 8001eaa:	f000 fb25 	bl	80024f8 <_sbrk_r>
 8001eae:	1c43      	adds	r3, r0, #1
 8001eb0:	d123      	bne.n	8001efa <_malloc_r+0x92>
 8001eb2:	230c      	movs	r3, #12
 8001eb4:	6033      	str	r3, [r6, #0]
 8001eb6:	4630      	mov	r0, r6
 8001eb8:	f000 fbce 	bl	8002658 <__malloc_unlock>
 8001ebc:	e7e3      	b.n	8001e86 <_malloc_r+0x1e>
 8001ebe:	6823      	ldr	r3, [r4, #0]
 8001ec0:	1b5b      	subs	r3, r3, r5
 8001ec2:	d417      	bmi.n	8001ef4 <_malloc_r+0x8c>
 8001ec4:	2b0b      	cmp	r3, #11
 8001ec6:	d903      	bls.n	8001ed0 <_malloc_r+0x68>
 8001ec8:	6023      	str	r3, [r4, #0]
 8001eca:	441c      	add	r4, r3
 8001ecc:	6025      	str	r5, [r4, #0]
 8001ece:	e004      	b.n	8001eda <_malloc_r+0x72>
 8001ed0:	6863      	ldr	r3, [r4, #4]
 8001ed2:	42a2      	cmp	r2, r4
 8001ed4:	bf0c      	ite	eq
 8001ed6:	600b      	streq	r3, [r1, #0]
 8001ed8:	6053      	strne	r3, [r2, #4]
 8001eda:	4630      	mov	r0, r6
 8001edc:	f000 fbbc 	bl	8002658 <__malloc_unlock>
 8001ee0:	f104 000b 	add.w	r0, r4, #11
 8001ee4:	1d23      	adds	r3, r4, #4
 8001ee6:	f020 0007 	bic.w	r0, r0, #7
 8001eea:	1ac2      	subs	r2, r0, r3
 8001eec:	d0cc      	beq.n	8001e88 <_malloc_r+0x20>
 8001eee:	1a1b      	subs	r3, r3, r0
 8001ef0:	50a3      	str	r3, [r4, r2]
 8001ef2:	e7c9      	b.n	8001e88 <_malloc_r+0x20>
 8001ef4:	4622      	mov	r2, r4
 8001ef6:	6864      	ldr	r4, [r4, #4]
 8001ef8:	e7cc      	b.n	8001e94 <_malloc_r+0x2c>
 8001efa:	1cc4      	adds	r4, r0, #3
 8001efc:	f024 0403 	bic.w	r4, r4, #3
 8001f00:	42a0      	cmp	r0, r4
 8001f02:	d0e3      	beq.n	8001ecc <_malloc_r+0x64>
 8001f04:	1a21      	subs	r1, r4, r0
 8001f06:	4630      	mov	r0, r6
 8001f08:	f000 faf6 	bl	80024f8 <_sbrk_r>
 8001f0c:	3001      	adds	r0, #1
 8001f0e:	d1dd      	bne.n	8001ecc <_malloc_r+0x64>
 8001f10:	e7cf      	b.n	8001eb2 <_malloc_r+0x4a>
 8001f12:	bf00      	nop
 8001f14:	200000a0 	.word	0x200000a0
 8001f18:	200000a4 	.word	0x200000a4

08001f1c <__sfputc_r>:
 8001f1c:	6893      	ldr	r3, [r2, #8]
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	b410      	push	{r4}
 8001f24:	6093      	str	r3, [r2, #8]
 8001f26:	da08      	bge.n	8001f3a <__sfputc_r+0x1e>
 8001f28:	6994      	ldr	r4, [r2, #24]
 8001f2a:	42a3      	cmp	r3, r4
 8001f2c:	db01      	blt.n	8001f32 <__sfputc_r+0x16>
 8001f2e:	290a      	cmp	r1, #10
 8001f30:	d103      	bne.n	8001f3a <__sfputc_r+0x1e>
 8001f32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001f36:	f7ff bc69 	b.w	800180c <__swbuf_r>
 8001f3a:	6813      	ldr	r3, [r2, #0]
 8001f3c:	1c58      	adds	r0, r3, #1
 8001f3e:	6010      	str	r0, [r2, #0]
 8001f40:	7019      	strb	r1, [r3, #0]
 8001f42:	4608      	mov	r0, r1
 8001f44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001f48:	4770      	bx	lr

08001f4a <__sfputs_r>:
 8001f4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f4c:	4606      	mov	r6, r0
 8001f4e:	460f      	mov	r7, r1
 8001f50:	4614      	mov	r4, r2
 8001f52:	18d5      	adds	r5, r2, r3
 8001f54:	42ac      	cmp	r4, r5
 8001f56:	d101      	bne.n	8001f5c <__sfputs_r+0x12>
 8001f58:	2000      	movs	r0, #0
 8001f5a:	e007      	b.n	8001f6c <__sfputs_r+0x22>
 8001f5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001f60:	463a      	mov	r2, r7
 8001f62:	4630      	mov	r0, r6
 8001f64:	f7ff ffda 	bl	8001f1c <__sfputc_r>
 8001f68:	1c43      	adds	r3, r0, #1
 8001f6a:	d1f3      	bne.n	8001f54 <__sfputs_r+0xa>
 8001f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001f70 <_vfiprintf_r>:
 8001f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f74:	460d      	mov	r5, r1
 8001f76:	b09d      	sub	sp, #116	; 0x74
 8001f78:	4614      	mov	r4, r2
 8001f7a:	4698      	mov	r8, r3
 8001f7c:	4606      	mov	r6, r0
 8001f7e:	b118      	cbz	r0, 8001f88 <_vfiprintf_r+0x18>
 8001f80:	6983      	ldr	r3, [r0, #24]
 8001f82:	b90b      	cbnz	r3, 8001f88 <_vfiprintf_r+0x18>
 8001f84:	f7ff fe1c 	bl	8001bc0 <__sinit>
 8001f88:	4b89      	ldr	r3, [pc, #548]	; (80021b0 <_vfiprintf_r+0x240>)
 8001f8a:	429d      	cmp	r5, r3
 8001f8c:	d11b      	bne.n	8001fc6 <_vfiprintf_r+0x56>
 8001f8e:	6875      	ldr	r5, [r6, #4]
 8001f90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001f92:	07d9      	lsls	r1, r3, #31
 8001f94:	d405      	bmi.n	8001fa2 <_vfiprintf_r+0x32>
 8001f96:	89ab      	ldrh	r3, [r5, #12]
 8001f98:	059a      	lsls	r2, r3, #22
 8001f9a:	d402      	bmi.n	8001fa2 <_vfiprintf_r+0x32>
 8001f9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001f9e:	f7ff fead 	bl	8001cfc <__retarget_lock_acquire_recursive>
 8001fa2:	89ab      	ldrh	r3, [r5, #12]
 8001fa4:	071b      	lsls	r3, r3, #28
 8001fa6:	d501      	bpl.n	8001fac <_vfiprintf_r+0x3c>
 8001fa8:	692b      	ldr	r3, [r5, #16]
 8001faa:	b9eb      	cbnz	r3, 8001fe8 <_vfiprintf_r+0x78>
 8001fac:	4629      	mov	r1, r5
 8001fae:	4630      	mov	r0, r6
 8001fb0:	f7ff fc7e 	bl	80018b0 <__swsetup_r>
 8001fb4:	b1c0      	cbz	r0, 8001fe8 <_vfiprintf_r+0x78>
 8001fb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001fb8:	07dc      	lsls	r4, r3, #31
 8001fba:	d50e      	bpl.n	8001fda <_vfiprintf_r+0x6a>
 8001fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc0:	b01d      	add	sp, #116	; 0x74
 8001fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001fc6:	4b7b      	ldr	r3, [pc, #492]	; (80021b4 <_vfiprintf_r+0x244>)
 8001fc8:	429d      	cmp	r5, r3
 8001fca:	d101      	bne.n	8001fd0 <_vfiprintf_r+0x60>
 8001fcc:	68b5      	ldr	r5, [r6, #8]
 8001fce:	e7df      	b.n	8001f90 <_vfiprintf_r+0x20>
 8001fd0:	4b79      	ldr	r3, [pc, #484]	; (80021b8 <_vfiprintf_r+0x248>)
 8001fd2:	429d      	cmp	r5, r3
 8001fd4:	bf08      	it	eq
 8001fd6:	68f5      	ldreq	r5, [r6, #12]
 8001fd8:	e7da      	b.n	8001f90 <_vfiprintf_r+0x20>
 8001fda:	89ab      	ldrh	r3, [r5, #12]
 8001fdc:	0598      	lsls	r0, r3, #22
 8001fde:	d4ed      	bmi.n	8001fbc <_vfiprintf_r+0x4c>
 8001fe0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001fe2:	f7ff fe8c 	bl	8001cfe <__retarget_lock_release_recursive>
 8001fe6:	e7e9      	b.n	8001fbc <_vfiprintf_r+0x4c>
 8001fe8:	2300      	movs	r3, #0
 8001fea:	9309      	str	r3, [sp, #36]	; 0x24
 8001fec:	2320      	movs	r3, #32
 8001fee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001ff2:	f8cd 800c 	str.w	r8, [sp, #12]
 8001ff6:	2330      	movs	r3, #48	; 0x30
 8001ff8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80021bc <_vfiprintf_r+0x24c>
 8001ffc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002000:	f04f 0901 	mov.w	r9, #1
 8002004:	4623      	mov	r3, r4
 8002006:	469a      	mov	sl, r3
 8002008:	f813 2b01 	ldrb.w	r2, [r3], #1
 800200c:	b10a      	cbz	r2, 8002012 <_vfiprintf_r+0xa2>
 800200e:	2a25      	cmp	r2, #37	; 0x25
 8002010:	d1f9      	bne.n	8002006 <_vfiprintf_r+0x96>
 8002012:	ebba 0b04 	subs.w	fp, sl, r4
 8002016:	d00b      	beq.n	8002030 <_vfiprintf_r+0xc0>
 8002018:	465b      	mov	r3, fp
 800201a:	4622      	mov	r2, r4
 800201c:	4629      	mov	r1, r5
 800201e:	4630      	mov	r0, r6
 8002020:	f7ff ff93 	bl	8001f4a <__sfputs_r>
 8002024:	3001      	adds	r0, #1
 8002026:	f000 80aa 	beq.w	800217e <_vfiprintf_r+0x20e>
 800202a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800202c:	445a      	add	r2, fp
 800202e:	9209      	str	r2, [sp, #36]	; 0x24
 8002030:	f89a 3000 	ldrb.w	r3, [sl]
 8002034:	2b00      	cmp	r3, #0
 8002036:	f000 80a2 	beq.w	800217e <_vfiprintf_r+0x20e>
 800203a:	2300      	movs	r3, #0
 800203c:	f04f 32ff 	mov.w	r2, #4294967295
 8002040:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002044:	f10a 0a01 	add.w	sl, sl, #1
 8002048:	9304      	str	r3, [sp, #16]
 800204a:	9307      	str	r3, [sp, #28]
 800204c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002050:	931a      	str	r3, [sp, #104]	; 0x68
 8002052:	4654      	mov	r4, sl
 8002054:	2205      	movs	r2, #5
 8002056:	f814 1b01 	ldrb.w	r1, [r4], #1
 800205a:	4858      	ldr	r0, [pc, #352]	; (80021bc <_vfiprintf_r+0x24c>)
 800205c:	f7fe f8c8 	bl	80001f0 <memchr>
 8002060:	9a04      	ldr	r2, [sp, #16]
 8002062:	b9d8      	cbnz	r0, 800209c <_vfiprintf_r+0x12c>
 8002064:	06d1      	lsls	r1, r2, #27
 8002066:	bf44      	itt	mi
 8002068:	2320      	movmi	r3, #32
 800206a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800206e:	0713      	lsls	r3, r2, #28
 8002070:	bf44      	itt	mi
 8002072:	232b      	movmi	r3, #43	; 0x2b
 8002074:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002078:	f89a 3000 	ldrb.w	r3, [sl]
 800207c:	2b2a      	cmp	r3, #42	; 0x2a
 800207e:	d015      	beq.n	80020ac <_vfiprintf_r+0x13c>
 8002080:	9a07      	ldr	r2, [sp, #28]
 8002082:	4654      	mov	r4, sl
 8002084:	2000      	movs	r0, #0
 8002086:	f04f 0c0a 	mov.w	ip, #10
 800208a:	4621      	mov	r1, r4
 800208c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002090:	3b30      	subs	r3, #48	; 0x30
 8002092:	2b09      	cmp	r3, #9
 8002094:	d94e      	bls.n	8002134 <_vfiprintf_r+0x1c4>
 8002096:	b1b0      	cbz	r0, 80020c6 <_vfiprintf_r+0x156>
 8002098:	9207      	str	r2, [sp, #28]
 800209a:	e014      	b.n	80020c6 <_vfiprintf_r+0x156>
 800209c:	eba0 0308 	sub.w	r3, r0, r8
 80020a0:	fa09 f303 	lsl.w	r3, r9, r3
 80020a4:	4313      	orrs	r3, r2
 80020a6:	9304      	str	r3, [sp, #16]
 80020a8:	46a2      	mov	sl, r4
 80020aa:	e7d2      	b.n	8002052 <_vfiprintf_r+0xe2>
 80020ac:	9b03      	ldr	r3, [sp, #12]
 80020ae:	1d19      	adds	r1, r3, #4
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	9103      	str	r1, [sp, #12]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	bfbb      	ittet	lt
 80020b8:	425b      	neglt	r3, r3
 80020ba:	f042 0202 	orrlt.w	r2, r2, #2
 80020be:	9307      	strge	r3, [sp, #28]
 80020c0:	9307      	strlt	r3, [sp, #28]
 80020c2:	bfb8      	it	lt
 80020c4:	9204      	strlt	r2, [sp, #16]
 80020c6:	7823      	ldrb	r3, [r4, #0]
 80020c8:	2b2e      	cmp	r3, #46	; 0x2e
 80020ca:	d10c      	bne.n	80020e6 <_vfiprintf_r+0x176>
 80020cc:	7863      	ldrb	r3, [r4, #1]
 80020ce:	2b2a      	cmp	r3, #42	; 0x2a
 80020d0:	d135      	bne.n	800213e <_vfiprintf_r+0x1ce>
 80020d2:	9b03      	ldr	r3, [sp, #12]
 80020d4:	1d1a      	adds	r2, r3, #4
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	9203      	str	r2, [sp, #12]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	bfb8      	it	lt
 80020de:	f04f 33ff 	movlt.w	r3, #4294967295
 80020e2:	3402      	adds	r4, #2
 80020e4:	9305      	str	r3, [sp, #20]
 80020e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80021cc <_vfiprintf_r+0x25c>
 80020ea:	7821      	ldrb	r1, [r4, #0]
 80020ec:	2203      	movs	r2, #3
 80020ee:	4650      	mov	r0, sl
 80020f0:	f7fe f87e 	bl	80001f0 <memchr>
 80020f4:	b140      	cbz	r0, 8002108 <_vfiprintf_r+0x198>
 80020f6:	2340      	movs	r3, #64	; 0x40
 80020f8:	eba0 000a 	sub.w	r0, r0, sl
 80020fc:	fa03 f000 	lsl.w	r0, r3, r0
 8002100:	9b04      	ldr	r3, [sp, #16]
 8002102:	4303      	orrs	r3, r0
 8002104:	3401      	adds	r4, #1
 8002106:	9304      	str	r3, [sp, #16]
 8002108:	f814 1b01 	ldrb.w	r1, [r4], #1
 800210c:	482c      	ldr	r0, [pc, #176]	; (80021c0 <_vfiprintf_r+0x250>)
 800210e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002112:	2206      	movs	r2, #6
 8002114:	f7fe f86c 	bl	80001f0 <memchr>
 8002118:	2800      	cmp	r0, #0
 800211a:	d03f      	beq.n	800219c <_vfiprintf_r+0x22c>
 800211c:	4b29      	ldr	r3, [pc, #164]	; (80021c4 <_vfiprintf_r+0x254>)
 800211e:	bb1b      	cbnz	r3, 8002168 <_vfiprintf_r+0x1f8>
 8002120:	9b03      	ldr	r3, [sp, #12]
 8002122:	3307      	adds	r3, #7
 8002124:	f023 0307 	bic.w	r3, r3, #7
 8002128:	3308      	adds	r3, #8
 800212a:	9303      	str	r3, [sp, #12]
 800212c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800212e:	443b      	add	r3, r7
 8002130:	9309      	str	r3, [sp, #36]	; 0x24
 8002132:	e767      	b.n	8002004 <_vfiprintf_r+0x94>
 8002134:	fb0c 3202 	mla	r2, ip, r2, r3
 8002138:	460c      	mov	r4, r1
 800213a:	2001      	movs	r0, #1
 800213c:	e7a5      	b.n	800208a <_vfiprintf_r+0x11a>
 800213e:	2300      	movs	r3, #0
 8002140:	3401      	adds	r4, #1
 8002142:	9305      	str	r3, [sp, #20]
 8002144:	4619      	mov	r1, r3
 8002146:	f04f 0c0a 	mov.w	ip, #10
 800214a:	4620      	mov	r0, r4
 800214c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002150:	3a30      	subs	r2, #48	; 0x30
 8002152:	2a09      	cmp	r2, #9
 8002154:	d903      	bls.n	800215e <_vfiprintf_r+0x1ee>
 8002156:	2b00      	cmp	r3, #0
 8002158:	d0c5      	beq.n	80020e6 <_vfiprintf_r+0x176>
 800215a:	9105      	str	r1, [sp, #20]
 800215c:	e7c3      	b.n	80020e6 <_vfiprintf_r+0x176>
 800215e:	fb0c 2101 	mla	r1, ip, r1, r2
 8002162:	4604      	mov	r4, r0
 8002164:	2301      	movs	r3, #1
 8002166:	e7f0      	b.n	800214a <_vfiprintf_r+0x1da>
 8002168:	ab03      	add	r3, sp, #12
 800216a:	9300      	str	r3, [sp, #0]
 800216c:	462a      	mov	r2, r5
 800216e:	4b16      	ldr	r3, [pc, #88]	; (80021c8 <_vfiprintf_r+0x258>)
 8002170:	a904      	add	r1, sp, #16
 8002172:	4630      	mov	r0, r6
 8002174:	f3af 8000 	nop.w
 8002178:	4607      	mov	r7, r0
 800217a:	1c78      	adds	r0, r7, #1
 800217c:	d1d6      	bne.n	800212c <_vfiprintf_r+0x1bc>
 800217e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002180:	07d9      	lsls	r1, r3, #31
 8002182:	d405      	bmi.n	8002190 <_vfiprintf_r+0x220>
 8002184:	89ab      	ldrh	r3, [r5, #12]
 8002186:	059a      	lsls	r2, r3, #22
 8002188:	d402      	bmi.n	8002190 <_vfiprintf_r+0x220>
 800218a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800218c:	f7ff fdb7 	bl	8001cfe <__retarget_lock_release_recursive>
 8002190:	89ab      	ldrh	r3, [r5, #12]
 8002192:	065b      	lsls	r3, r3, #25
 8002194:	f53f af12 	bmi.w	8001fbc <_vfiprintf_r+0x4c>
 8002198:	9809      	ldr	r0, [sp, #36]	; 0x24
 800219a:	e711      	b.n	8001fc0 <_vfiprintf_r+0x50>
 800219c:	ab03      	add	r3, sp, #12
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	462a      	mov	r2, r5
 80021a2:	4b09      	ldr	r3, [pc, #36]	; (80021c8 <_vfiprintf_r+0x258>)
 80021a4:	a904      	add	r1, sp, #16
 80021a6:	4630      	mov	r0, r6
 80021a8:	f000 f880 	bl	80022ac <_printf_i>
 80021ac:	e7e4      	b.n	8002178 <_vfiprintf_r+0x208>
 80021ae:	bf00      	nop
 80021b0:	08002708 	.word	0x08002708
 80021b4:	08002728 	.word	0x08002728
 80021b8:	080026e8 	.word	0x080026e8
 80021bc:	08002748 	.word	0x08002748
 80021c0:	08002752 	.word	0x08002752
 80021c4:	00000000 	.word	0x00000000
 80021c8:	08001f4b 	.word	0x08001f4b
 80021cc:	0800274e 	.word	0x0800274e

080021d0 <_printf_common>:
 80021d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80021d4:	4616      	mov	r6, r2
 80021d6:	4699      	mov	r9, r3
 80021d8:	688a      	ldr	r2, [r1, #8]
 80021da:	690b      	ldr	r3, [r1, #16]
 80021dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80021e0:	4293      	cmp	r3, r2
 80021e2:	bfb8      	it	lt
 80021e4:	4613      	movlt	r3, r2
 80021e6:	6033      	str	r3, [r6, #0]
 80021e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80021ec:	4607      	mov	r7, r0
 80021ee:	460c      	mov	r4, r1
 80021f0:	b10a      	cbz	r2, 80021f6 <_printf_common+0x26>
 80021f2:	3301      	adds	r3, #1
 80021f4:	6033      	str	r3, [r6, #0]
 80021f6:	6823      	ldr	r3, [r4, #0]
 80021f8:	0699      	lsls	r1, r3, #26
 80021fa:	bf42      	ittt	mi
 80021fc:	6833      	ldrmi	r3, [r6, #0]
 80021fe:	3302      	addmi	r3, #2
 8002200:	6033      	strmi	r3, [r6, #0]
 8002202:	6825      	ldr	r5, [r4, #0]
 8002204:	f015 0506 	ands.w	r5, r5, #6
 8002208:	d106      	bne.n	8002218 <_printf_common+0x48>
 800220a:	f104 0a19 	add.w	sl, r4, #25
 800220e:	68e3      	ldr	r3, [r4, #12]
 8002210:	6832      	ldr	r2, [r6, #0]
 8002212:	1a9b      	subs	r3, r3, r2
 8002214:	42ab      	cmp	r3, r5
 8002216:	dc26      	bgt.n	8002266 <_printf_common+0x96>
 8002218:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800221c:	1e13      	subs	r3, r2, #0
 800221e:	6822      	ldr	r2, [r4, #0]
 8002220:	bf18      	it	ne
 8002222:	2301      	movne	r3, #1
 8002224:	0692      	lsls	r2, r2, #26
 8002226:	d42b      	bmi.n	8002280 <_printf_common+0xb0>
 8002228:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800222c:	4649      	mov	r1, r9
 800222e:	4638      	mov	r0, r7
 8002230:	47c0      	blx	r8
 8002232:	3001      	adds	r0, #1
 8002234:	d01e      	beq.n	8002274 <_printf_common+0xa4>
 8002236:	6823      	ldr	r3, [r4, #0]
 8002238:	68e5      	ldr	r5, [r4, #12]
 800223a:	6832      	ldr	r2, [r6, #0]
 800223c:	f003 0306 	and.w	r3, r3, #6
 8002240:	2b04      	cmp	r3, #4
 8002242:	bf08      	it	eq
 8002244:	1aad      	subeq	r5, r5, r2
 8002246:	68a3      	ldr	r3, [r4, #8]
 8002248:	6922      	ldr	r2, [r4, #16]
 800224a:	bf0c      	ite	eq
 800224c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002250:	2500      	movne	r5, #0
 8002252:	4293      	cmp	r3, r2
 8002254:	bfc4      	itt	gt
 8002256:	1a9b      	subgt	r3, r3, r2
 8002258:	18ed      	addgt	r5, r5, r3
 800225a:	2600      	movs	r6, #0
 800225c:	341a      	adds	r4, #26
 800225e:	42b5      	cmp	r5, r6
 8002260:	d11a      	bne.n	8002298 <_printf_common+0xc8>
 8002262:	2000      	movs	r0, #0
 8002264:	e008      	b.n	8002278 <_printf_common+0xa8>
 8002266:	2301      	movs	r3, #1
 8002268:	4652      	mov	r2, sl
 800226a:	4649      	mov	r1, r9
 800226c:	4638      	mov	r0, r7
 800226e:	47c0      	blx	r8
 8002270:	3001      	adds	r0, #1
 8002272:	d103      	bne.n	800227c <_printf_common+0xac>
 8002274:	f04f 30ff 	mov.w	r0, #4294967295
 8002278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800227c:	3501      	adds	r5, #1
 800227e:	e7c6      	b.n	800220e <_printf_common+0x3e>
 8002280:	18e1      	adds	r1, r4, r3
 8002282:	1c5a      	adds	r2, r3, #1
 8002284:	2030      	movs	r0, #48	; 0x30
 8002286:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800228a:	4422      	add	r2, r4
 800228c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002290:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002294:	3302      	adds	r3, #2
 8002296:	e7c7      	b.n	8002228 <_printf_common+0x58>
 8002298:	2301      	movs	r3, #1
 800229a:	4622      	mov	r2, r4
 800229c:	4649      	mov	r1, r9
 800229e:	4638      	mov	r0, r7
 80022a0:	47c0      	blx	r8
 80022a2:	3001      	adds	r0, #1
 80022a4:	d0e6      	beq.n	8002274 <_printf_common+0xa4>
 80022a6:	3601      	adds	r6, #1
 80022a8:	e7d9      	b.n	800225e <_printf_common+0x8e>
	...

080022ac <_printf_i>:
 80022ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80022b0:	460c      	mov	r4, r1
 80022b2:	4691      	mov	r9, r2
 80022b4:	7e27      	ldrb	r7, [r4, #24]
 80022b6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80022b8:	2f78      	cmp	r7, #120	; 0x78
 80022ba:	4680      	mov	r8, r0
 80022bc:	469a      	mov	sl, r3
 80022be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80022c2:	d807      	bhi.n	80022d4 <_printf_i+0x28>
 80022c4:	2f62      	cmp	r7, #98	; 0x62
 80022c6:	d80a      	bhi.n	80022de <_printf_i+0x32>
 80022c8:	2f00      	cmp	r7, #0
 80022ca:	f000 80d8 	beq.w	800247e <_printf_i+0x1d2>
 80022ce:	2f58      	cmp	r7, #88	; 0x58
 80022d0:	f000 80a3 	beq.w	800241a <_printf_i+0x16e>
 80022d4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80022d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80022dc:	e03a      	b.n	8002354 <_printf_i+0xa8>
 80022de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80022e2:	2b15      	cmp	r3, #21
 80022e4:	d8f6      	bhi.n	80022d4 <_printf_i+0x28>
 80022e6:	a001      	add	r0, pc, #4	; (adr r0, 80022ec <_printf_i+0x40>)
 80022e8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80022ec:	08002345 	.word	0x08002345
 80022f0:	08002359 	.word	0x08002359
 80022f4:	080022d5 	.word	0x080022d5
 80022f8:	080022d5 	.word	0x080022d5
 80022fc:	080022d5 	.word	0x080022d5
 8002300:	080022d5 	.word	0x080022d5
 8002304:	08002359 	.word	0x08002359
 8002308:	080022d5 	.word	0x080022d5
 800230c:	080022d5 	.word	0x080022d5
 8002310:	080022d5 	.word	0x080022d5
 8002314:	080022d5 	.word	0x080022d5
 8002318:	08002465 	.word	0x08002465
 800231c:	08002389 	.word	0x08002389
 8002320:	08002447 	.word	0x08002447
 8002324:	080022d5 	.word	0x080022d5
 8002328:	080022d5 	.word	0x080022d5
 800232c:	08002487 	.word	0x08002487
 8002330:	080022d5 	.word	0x080022d5
 8002334:	08002389 	.word	0x08002389
 8002338:	080022d5 	.word	0x080022d5
 800233c:	080022d5 	.word	0x080022d5
 8002340:	0800244f 	.word	0x0800244f
 8002344:	680b      	ldr	r3, [r1, #0]
 8002346:	1d1a      	adds	r2, r3, #4
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	600a      	str	r2, [r1, #0]
 800234c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002350:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002354:	2301      	movs	r3, #1
 8002356:	e0a3      	b.n	80024a0 <_printf_i+0x1f4>
 8002358:	6825      	ldr	r5, [r4, #0]
 800235a:	6808      	ldr	r0, [r1, #0]
 800235c:	062e      	lsls	r6, r5, #24
 800235e:	f100 0304 	add.w	r3, r0, #4
 8002362:	d50a      	bpl.n	800237a <_printf_i+0xce>
 8002364:	6805      	ldr	r5, [r0, #0]
 8002366:	600b      	str	r3, [r1, #0]
 8002368:	2d00      	cmp	r5, #0
 800236a:	da03      	bge.n	8002374 <_printf_i+0xc8>
 800236c:	232d      	movs	r3, #45	; 0x2d
 800236e:	426d      	negs	r5, r5
 8002370:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002374:	485e      	ldr	r0, [pc, #376]	; (80024f0 <_printf_i+0x244>)
 8002376:	230a      	movs	r3, #10
 8002378:	e019      	b.n	80023ae <_printf_i+0x102>
 800237a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800237e:	6805      	ldr	r5, [r0, #0]
 8002380:	600b      	str	r3, [r1, #0]
 8002382:	bf18      	it	ne
 8002384:	b22d      	sxthne	r5, r5
 8002386:	e7ef      	b.n	8002368 <_printf_i+0xbc>
 8002388:	680b      	ldr	r3, [r1, #0]
 800238a:	6825      	ldr	r5, [r4, #0]
 800238c:	1d18      	adds	r0, r3, #4
 800238e:	6008      	str	r0, [r1, #0]
 8002390:	0628      	lsls	r0, r5, #24
 8002392:	d501      	bpl.n	8002398 <_printf_i+0xec>
 8002394:	681d      	ldr	r5, [r3, #0]
 8002396:	e002      	b.n	800239e <_printf_i+0xf2>
 8002398:	0669      	lsls	r1, r5, #25
 800239a:	d5fb      	bpl.n	8002394 <_printf_i+0xe8>
 800239c:	881d      	ldrh	r5, [r3, #0]
 800239e:	4854      	ldr	r0, [pc, #336]	; (80024f0 <_printf_i+0x244>)
 80023a0:	2f6f      	cmp	r7, #111	; 0x6f
 80023a2:	bf0c      	ite	eq
 80023a4:	2308      	moveq	r3, #8
 80023a6:	230a      	movne	r3, #10
 80023a8:	2100      	movs	r1, #0
 80023aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80023ae:	6866      	ldr	r6, [r4, #4]
 80023b0:	60a6      	str	r6, [r4, #8]
 80023b2:	2e00      	cmp	r6, #0
 80023b4:	bfa2      	ittt	ge
 80023b6:	6821      	ldrge	r1, [r4, #0]
 80023b8:	f021 0104 	bicge.w	r1, r1, #4
 80023bc:	6021      	strge	r1, [r4, #0]
 80023be:	b90d      	cbnz	r5, 80023c4 <_printf_i+0x118>
 80023c0:	2e00      	cmp	r6, #0
 80023c2:	d04d      	beq.n	8002460 <_printf_i+0x1b4>
 80023c4:	4616      	mov	r6, r2
 80023c6:	fbb5 f1f3 	udiv	r1, r5, r3
 80023ca:	fb03 5711 	mls	r7, r3, r1, r5
 80023ce:	5dc7      	ldrb	r7, [r0, r7]
 80023d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80023d4:	462f      	mov	r7, r5
 80023d6:	42bb      	cmp	r3, r7
 80023d8:	460d      	mov	r5, r1
 80023da:	d9f4      	bls.n	80023c6 <_printf_i+0x11a>
 80023dc:	2b08      	cmp	r3, #8
 80023de:	d10b      	bne.n	80023f8 <_printf_i+0x14c>
 80023e0:	6823      	ldr	r3, [r4, #0]
 80023e2:	07df      	lsls	r7, r3, #31
 80023e4:	d508      	bpl.n	80023f8 <_printf_i+0x14c>
 80023e6:	6923      	ldr	r3, [r4, #16]
 80023e8:	6861      	ldr	r1, [r4, #4]
 80023ea:	4299      	cmp	r1, r3
 80023ec:	bfde      	ittt	le
 80023ee:	2330      	movle	r3, #48	; 0x30
 80023f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80023f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80023f8:	1b92      	subs	r2, r2, r6
 80023fa:	6122      	str	r2, [r4, #16]
 80023fc:	f8cd a000 	str.w	sl, [sp]
 8002400:	464b      	mov	r3, r9
 8002402:	aa03      	add	r2, sp, #12
 8002404:	4621      	mov	r1, r4
 8002406:	4640      	mov	r0, r8
 8002408:	f7ff fee2 	bl	80021d0 <_printf_common>
 800240c:	3001      	adds	r0, #1
 800240e:	d14c      	bne.n	80024aa <_printf_i+0x1fe>
 8002410:	f04f 30ff 	mov.w	r0, #4294967295
 8002414:	b004      	add	sp, #16
 8002416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800241a:	4835      	ldr	r0, [pc, #212]	; (80024f0 <_printf_i+0x244>)
 800241c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002420:	6823      	ldr	r3, [r4, #0]
 8002422:	680e      	ldr	r6, [r1, #0]
 8002424:	061f      	lsls	r7, r3, #24
 8002426:	f856 5b04 	ldr.w	r5, [r6], #4
 800242a:	600e      	str	r6, [r1, #0]
 800242c:	d514      	bpl.n	8002458 <_printf_i+0x1ac>
 800242e:	07d9      	lsls	r1, r3, #31
 8002430:	bf44      	itt	mi
 8002432:	f043 0320 	orrmi.w	r3, r3, #32
 8002436:	6023      	strmi	r3, [r4, #0]
 8002438:	b91d      	cbnz	r5, 8002442 <_printf_i+0x196>
 800243a:	6823      	ldr	r3, [r4, #0]
 800243c:	f023 0320 	bic.w	r3, r3, #32
 8002440:	6023      	str	r3, [r4, #0]
 8002442:	2310      	movs	r3, #16
 8002444:	e7b0      	b.n	80023a8 <_printf_i+0xfc>
 8002446:	6823      	ldr	r3, [r4, #0]
 8002448:	f043 0320 	orr.w	r3, r3, #32
 800244c:	6023      	str	r3, [r4, #0]
 800244e:	2378      	movs	r3, #120	; 0x78
 8002450:	4828      	ldr	r0, [pc, #160]	; (80024f4 <_printf_i+0x248>)
 8002452:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002456:	e7e3      	b.n	8002420 <_printf_i+0x174>
 8002458:	065e      	lsls	r6, r3, #25
 800245a:	bf48      	it	mi
 800245c:	b2ad      	uxthmi	r5, r5
 800245e:	e7e6      	b.n	800242e <_printf_i+0x182>
 8002460:	4616      	mov	r6, r2
 8002462:	e7bb      	b.n	80023dc <_printf_i+0x130>
 8002464:	680b      	ldr	r3, [r1, #0]
 8002466:	6826      	ldr	r6, [r4, #0]
 8002468:	6960      	ldr	r0, [r4, #20]
 800246a:	1d1d      	adds	r5, r3, #4
 800246c:	600d      	str	r5, [r1, #0]
 800246e:	0635      	lsls	r5, r6, #24
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	d501      	bpl.n	8002478 <_printf_i+0x1cc>
 8002474:	6018      	str	r0, [r3, #0]
 8002476:	e002      	b.n	800247e <_printf_i+0x1d2>
 8002478:	0671      	lsls	r1, r6, #25
 800247a:	d5fb      	bpl.n	8002474 <_printf_i+0x1c8>
 800247c:	8018      	strh	r0, [r3, #0]
 800247e:	2300      	movs	r3, #0
 8002480:	6123      	str	r3, [r4, #16]
 8002482:	4616      	mov	r6, r2
 8002484:	e7ba      	b.n	80023fc <_printf_i+0x150>
 8002486:	680b      	ldr	r3, [r1, #0]
 8002488:	1d1a      	adds	r2, r3, #4
 800248a:	600a      	str	r2, [r1, #0]
 800248c:	681e      	ldr	r6, [r3, #0]
 800248e:	6862      	ldr	r2, [r4, #4]
 8002490:	2100      	movs	r1, #0
 8002492:	4630      	mov	r0, r6
 8002494:	f7fd feac 	bl	80001f0 <memchr>
 8002498:	b108      	cbz	r0, 800249e <_printf_i+0x1f2>
 800249a:	1b80      	subs	r0, r0, r6
 800249c:	6060      	str	r0, [r4, #4]
 800249e:	6863      	ldr	r3, [r4, #4]
 80024a0:	6123      	str	r3, [r4, #16]
 80024a2:	2300      	movs	r3, #0
 80024a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80024a8:	e7a8      	b.n	80023fc <_printf_i+0x150>
 80024aa:	6923      	ldr	r3, [r4, #16]
 80024ac:	4632      	mov	r2, r6
 80024ae:	4649      	mov	r1, r9
 80024b0:	4640      	mov	r0, r8
 80024b2:	47d0      	blx	sl
 80024b4:	3001      	adds	r0, #1
 80024b6:	d0ab      	beq.n	8002410 <_printf_i+0x164>
 80024b8:	6823      	ldr	r3, [r4, #0]
 80024ba:	079b      	lsls	r3, r3, #30
 80024bc:	d413      	bmi.n	80024e6 <_printf_i+0x23a>
 80024be:	68e0      	ldr	r0, [r4, #12]
 80024c0:	9b03      	ldr	r3, [sp, #12]
 80024c2:	4298      	cmp	r0, r3
 80024c4:	bfb8      	it	lt
 80024c6:	4618      	movlt	r0, r3
 80024c8:	e7a4      	b.n	8002414 <_printf_i+0x168>
 80024ca:	2301      	movs	r3, #1
 80024cc:	4632      	mov	r2, r6
 80024ce:	4649      	mov	r1, r9
 80024d0:	4640      	mov	r0, r8
 80024d2:	47d0      	blx	sl
 80024d4:	3001      	adds	r0, #1
 80024d6:	d09b      	beq.n	8002410 <_printf_i+0x164>
 80024d8:	3501      	adds	r5, #1
 80024da:	68e3      	ldr	r3, [r4, #12]
 80024dc:	9903      	ldr	r1, [sp, #12]
 80024de:	1a5b      	subs	r3, r3, r1
 80024e0:	42ab      	cmp	r3, r5
 80024e2:	dcf2      	bgt.n	80024ca <_printf_i+0x21e>
 80024e4:	e7eb      	b.n	80024be <_printf_i+0x212>
 80024e6:	2500      	movs	r5, #0
 80024e8:	f104 0619 	add.w	r6, r4, #25
 80024ec:	e7f5      	b.n	80024da <_printf_i+0x22e>
 80024ee:	bf00      	nop
 80024f0:	08002759 	.word	0x08002759
 80024f4:	0800276a 	.word	0x0800276a

080024f8 <_sbrk_r>:
 80024f8:	b538      	push	{r3, r4, r5, lr}
 80024fa:	4d06      	ldr	r5, [pc, #24]	; (8002514 <_sbrk_r+0x1c>)
 80024fc:	2300      	movs	r3, #0
 80024fe:	4604      	mov	r4, r0
 8002500:	4608      	mov	r0, r1
 8002502:	602b      	str	r3, [r5, #0]
 8002504:	f7fe f89c 	bl	8000640 <_sbrk>
 8002508:	1c43      	adds	r3, r0, #1
 800250a:	d102      	bne.n	8002512 <_sbrk_r+0x1a>
 800250c:	682b      	ldr	r3, [r5, #0]
 800250e:	b103      	cbz	r3, 8002512 <_sbrk_r+0x1a>
 8002510:	6023      	str	r3, [r4, #0]
 8002512:	bd38      	pop	{r3, r4, r5, pc}
 8002514:	200000fc 	.word	0x200000fc

08002518 <__sread>:
 8002518:	b510      	push	{r4, lr}
 800251a:	460c      	mov	r4, r1
 800251c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002520:	f000 f8a0 	bl	8002664 <_read_r>
 8002524:	2800      	cmp	r0, #0
 8002526:	bfab      	itete	ge
 8002528:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800252a:	89a3      	ldrhlt	r3, [r4, #12]
 800252c:	181b      	addge	r3, r3, r0
 800252e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002532:	bfac      	ite	ge
 8002534:	6563      	strge	r3, [r4, #84]	; 0x54
 8002536:	81a3      	strhlt	r3, [r4, #12]
 8002538:	bd10      	pop	{r4, pc}

0800253a <__swrite>:
 800253a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800253e:	461f      	mov	r7, r3
 8002540:	898b      	ldrh	r3, [r1, #12]
 8002542:	05db      	lsls	r3, r3, #23
 8002544:	4605      	mov	r5, r0
 8002546:	460c      	mov	r4, r1
 8002548:	4616      	mov	r6, r2
 800254a:	d505      	bpl.n	8002558 <__swrite+0x1e>
 800254c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002550:	2302      	movs	r3, #2
 8002552:	2200      	movs	r2, #0
 8002554:	f000 f868 	bl	8002628 <_lseek_r>
 8002558:	89a3      	ldrh	r3, [r4, #12]
 800255a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800255e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002562:	81a3      	strh	r3, [r4, #12]
 8002564:	4632      	mov	r2, r6
 8002566:	463b      	mov	r3, r7
 8002568:	4628      	mov	r0, r5
 800256a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800256e:	f000 b817 	b.w	80025a0 <_write_r>

08002572 <__sseek>:
 8002572:	b510      	push	{r4, lr}
 8002574:	460c      	mov	r4, r1
 8002576:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800257a:	f000 f855 	bl	8002628 <_lseek_r>
 800257e:	1c43      	adds	r3, r0, #1
 8002580:	89a3      	ldrh	r3, [r4, #12]
 8002582:	bf15      	itete	ne
 8002584:	6560      	strne	r0, [r4, #84]	; 0x54
 8002586:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800258a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800258e:	81a3      	strheq	r3, [r4, #12]
 8002590:	bf18      	it	ne
 8002592:	81a3      	strhne	r3, [r4, #12]
 8002594:	bd10      	pop	{r4, pc}

08002596 <__sclose>:
 8002596:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800259a:	f000 b813 	b.w	80025c4 <_close_r>
	...

080025a0 <_write_r>:
 80025a0:	b538      	push	{r3, r4, r5, lr}
 80025a2:	4d07      	ldr	r5, [pc, #28]	; (80025c0 <_write_r+0x20>)
 80025a4:	4604      	mov	r4, r0
 80025a6:	4608      	mov	r0, r1
 80025a8:	4611      	mov	r1, r2
 80025aa:	2200      	movs	r2, #0
 80025ac:	602a      	str	r2, [r5, #0]
 80025ae:	461a      	mov	r2, r3
 80025b0:	f7fd fff5 	bl	800059e <_write>
 80025b4:	1c43      	adds	r3, r0, #1
 80025b6:	d102      	bne.n	80025be <_write_r+0x1e>
 80025b8:	682b      	ldr	r3, [r5, #0]
 80025ba:	b103      	cbz	r3, 80025be <_write_r+0x1e>
 80025bc:	6023      	str	r3, [r4, #0]
 80025be:	bd38      	pop	{r3, r4, r5, pc}
 80025c0:	200000fc 	.word	0x200000fc

080025c4 <_close_r>:
 80025c4:	b538      	push	{r3, r4, r5, lr}
 80025c6:	4d06      	ldr	r5, [pc, #24]	; (80025e0 <_close_r+0x1c>)
 80025c8:	2300      	movs	r3, #0
 80025ca:	4604      	mov	r4, r0
 80025cc:	4608      	mov	r0, r1
 80025ce:	602b      	str	r3, [r5, #0]
 80025d0:	f7fe f801 	bl	80005d6 <_close>
 80025d4:	1c43      	adds	r3, r0, #1
 80025d6:	d102      	bne.n	80025de <_close_r+0x1a>
 80025d8:	682b      	ldr	r3, [r5, #0]
 80025da:	b103      	cbz	r3, 80025de <_close_r+0x1a>
 80025dc:	6023      	str	r3, [r4, #0]
 80025de:	bd38      	pop	{r3, r4, r5, pc}
 80025e0:	200000fc 	.word	0x200000fc

080025e4 <_fstat_r>:
 80025e4:	b538      	push	{r3, r4, r5, lr}
 80025e6:	4d07      	ldr	r5, [pc, #28]	; (8002604 <_fstat_r+0x20>)
 80025e8:	2300      	movs	r3, #0
 80025ea:	4604      	mov	r4, r0
 80025ec:	4608      	mov	r0, r1
 80025ee:	4611      	mov	r1, r2
 80025f0:	602b      	str	r3, [r5, #0]
 80025f2:	f7fd fffc 	bl	80005ee <_fstat>
 80025f6:	1c43      	adds	r3, r0, #1
 80025f8:	d102      	bne.n	8002600 <_fstat_r+0x1c>
 80025fa:	682b      	ldr	r3, [r5, #0]
 80025fc:	b103      	cbz	r3, 8002600 <_fstat_r+0x1c>
 80025fe:	6023      	str	r3, [r4, #0]
 8002600:	bd38      	pop	{r3, r4, r5, pc}
 8002602:	bf00      	nop
 8002604:	200000fc 	.word	0x200000fc

08002608 <_isatty_r>:
 8002608:	b538      	push	{r3, r4, r5, lr}
 800260a:	4d06      	ldr	r5, [pc, #24]	; (8002624 <_isatty_r+0x1c>)
 800260c:	2300      	movs	r3, #0
 800260e:	4604      	mov	r4, r0
 8002610:	4608      	mov	r0, r1
 8002612:	602b      	str	r3, [r5, #0]
 8002614:	f7fd fffb 	bl	800060e <_isatty>
 8002618:	1c43      	adds	r3, r0, #1
 800261a:	d102      	bne.n	8002622 <_isatty_r+0x1a>
 800261c:	682b      	ldr	r3, [r5, #0]
 800261e:	b103      	cbz	r3, 8002622 <_isatty_r+0x1a>
 8002620:	6023      	str	r3, [r4, #0]
 8002622:	bd38      	pop	{r3, r4, r5, pc}
 8002624:	200000fc 	.word	0x200000fc

08002628 <_lseek_r>:
 8002628:	b538      	push	{r3, r4, r5, lr}
 800262a:	4d07      	ldr	r5, [pc, #28]	; (8002648 <_lseek_r+0x20>)
 800262c:	4604      	mov	r4, r0
 800262e:	4608      	mov	r0, r1
 8002630:	4611      	mov	r1, r2
 8002632:	2200      	movs	r2, #0
 8002634:	602a      	str	r2, [r5, #0]
 8002636:	461a      	mov	r2, r3
 8002638:	f7fd fff4 	bl	8000624 <_lseek>
 800263c:	1c43      	adds	r3, r0, #1
 800263e:	d102      	bne.n	8002646 <_lseek_r+0x1e>
 8002640:	682b      	ldr	r3, [r5, #0]
 8002642:	b103      	cbz	r3, 8002646 <_lseek_r+0x1e>
 8002644:	6023      	str	r3, [r4, #0]
 8002646:	bd38      	pop	{r3, r4, r5, pc}
 8002648:	200000fc 	.word	0x200000fc

0800264c <__malloc_lock>:
 800264c:	4801      	ldr	r0, [pc, #4]	; (8002654 <__malloc_lock+0x8>)
 800264e:	f7ff bb55 	b.w	8001cfc <__retarget_lock_acquire_recursive>
 8002652:	bf00      	nop
 8002654:	200000f4 	.word	0x200000f4

08002658 <__malloc_unlock>:
 8002658:	4801      	ldr	r0, [pc, #4]	; (8002660 <__malloc_unlock+0x8>)
 800265a:	f7ff bb50 	b.w	8001cfe <__retarget_lock_release_recursive>
 800265e:	bf00      	nop
 8002660:	200000f4 	.word	0x200000f4

08002664 <_read_r>:
 8002664:	b538      	push	{r3, r4, r5, lr}
 8002666:	4d07      	ldr	r5, [pc, #28]	; (8002684 <_read_r+0x20>)
 8002668:	4604      	mov	r4, r0
 800266a:	4608      	mov	r0, r1
 800266c:	4611      	mov	r1, r2
 800266e:	2200      	movs	r2, #0
 8002670:	602a      	str	r2, [r5, #0]
 8002672:	461a      	mov	r2, r3
 8002674:	f7fd ff76 	bl	8000564 <_read>
 8002678:	1c43      	adds	r3, r0, #1
 800267a:	d102      	bne.n	8002682 <_read_r+0x1e>
 800267c:	682b      	ldr	r3, [r5, #0]
 800267e:	b103      	cbz	r3, 8002682 <_read_r+0x1e>
 8002680:	6023      	str	r3, [r4, #0]
 8002682:	bd38      	pop	{r3, r4, r5, pc}
 8002684:	200000fc 	.word	0x200000fc

08002688 <_init>:
 8002688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800268a:	bf00      	nop
 800268c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800268e:	bc08      	pop	{r3}
 8002690:	469e      	mov	lr, r3
 8002692:	4770      	bx	lr

08002694 <_fini>:
 8002694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002696:	bf00      	nop
 8002698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800269a:	bc08      	pop	{r3}
 800269c:	469e      	mov	lr, r3
 800269e:	4770      	bx	lr
