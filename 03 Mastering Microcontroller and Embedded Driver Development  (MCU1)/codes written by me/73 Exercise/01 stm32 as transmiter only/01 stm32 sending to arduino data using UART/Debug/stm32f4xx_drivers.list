
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d34  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000edc  08000edc  00020418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000edc  08000edc  00020418  2**0
                  CONTENTS
  4 .ARM          00000000  08000edc  08000edc  00020418  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000edc  08000edc  00020418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000edc  08000edc  00010edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ee0  08000ee0  00010ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000418  20000000  08000ee4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020418  2**0
                  CONTENTS
 10 .bss          00000040  20000418  20000418  00020418  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000458  20000458  00020418  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020418  2**0
                  CONTENTS, READONLY
 13 .debug_info   000020a6  00000000  00000000  00020448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000633  00000000  00000000  000224ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000198  00000000  00000000  00022b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000150  00000000  00000000  00022cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002d18  00000000  00000000  00022e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000020c3  00000000  00000000  00025b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000ba93  00000000  00000000  00027beb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0003367e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000057c  00000000  00000000  000336d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000418 	.word	0x20000418
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000ec4 	.word	0x08000ec4

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	2000041c 	.word	0x2000041c
 80001e4:	08000ec4 	.word	0x08000ec4

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <USART2_Init>:
char msg[1024] = "UART Tx testing...\n\r";

USART_Handle_t usart2_handle;

void USART2_Init(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0
	usart2_handle.pUSARTx = USART2;
 80001fc:	4b0d      	ldr	r3, [pc, #52]	; (8000234 <USART2_Init+0x3c>)
 80001fe:	4a0e      	ldr	r2, [pc, #56]	; (8000238 <USART2_Init+0x40>)
 8000200:	601a      	str	r2, [r3, #0]
	usart2_handle.USART_Config.USART_Baud = USART_STD_BAUD_115200;
 8000202:	4b0c      	ldr	r3, [pc, #48]	; (8000234 <USART2_Init+0x3c>)
 8000204:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000208:	609a      	str	r2, [r3, #8]
	usart2_handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 800020a:	4b0a      	ldr	r3, [pc, #40]	; (8000234 <USART2_Init+0x3c>)
 800020c:	2200      	movs	r2, #0
 800020e:	73da      	strb	r2, [r3, #15]
	usart2_handle.USART_Config.USART_Mode = USART_MODE_ONLY_TX;
 8000210:	4b08      	ldr	r3, [pc, #32]	; (8000234 <USART2_Init+0x3c>)
 8000212:	2200      	movs	r2, #0
 8000214:	711a      	strb	r2, [r3, #4]
	usart2_handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 8000216:	4b07      	ldr	r3, [pc, #28]	; (8000234 <USART2_Init+0x3c>)
 8000218:	2200      	movs	r2, #0
 800021a:	731a      	strb	r2, [r3, #12]
	usart2_handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 800021c:	4b05      	ldr	r3, [pc, #20]	; (8000234 <USART2_Init+0x3c>)
 800021e:	2200      	movs	r2, #0
 8000220:	735a      	strb	r2, [r3, #13]
	usart2_handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 8000222:	4b04      	ldr	r3, [pc, #16]	; (8000234 <USART2_Init+0x3c>)
 8000224:	2200      	movs	r2, #0
 8000226:	739a      	strb	r2, [r3, #14]
	USART_Init(&usart2_handle);
 8000228:	4802      	ldr	r0, [pc, #8]	; (8000234 <USART2_Init+0x3c>)
 800022a:	f000 f95f 	bl	80004ec <USART_Init>
}
 800022e:	bf00      	nop
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop
 8000234:	20000434 	.word	0x20000434
 8000238:	40004400 	.word	0x40004400

0800023c <USART2_GPIOInit>:

void USART2_GPIOInit(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b084      	sub	sp, #16
 8000240:	af00      	add	r7, sp, #0
	GPIO_Handle_t usart_gpios;

	usart_gpios.pGPIOx = GPIOA;
 8000242:	4b0e      	ldr	r3, [pc, #56]	; (800027c <USART2_GPIOInit+0x40>)
 8000244:	607b      	str	r3, [r7, #4]
	usart_gpios.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000246:	2302      	movs	r3, #2
 8000248:	727b      	strb	r3, [r7, #9]
	usart_gpios.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800024a:	2300      	movs	r3, #0
 800024c:	733b      	strb	r3, [r7, #12]
	usart_gpios.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 800024e:	2301      	movs	r3, #1
 8000250:	72fb      	strb	r3, [r7, #11]
	usart_gpios.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000252:	2302      	movs	r3, #2
 8000254:	72bb      	strb	r3, [r7, #10]
	usart_gpios.GPIO_PinConfig.GPIO_PinAltFunMode =7;
 8000256:	2307      	movs	r3, #7
 8000258:	737b      	strb	r3, [r7, #13]

	//USART2 TX
	usart_gpios.GPIO_PinConfig.GPIO_PinNumber  = GPIO_PIN_NO_2;
 800025a:	2302      	movs	r3, #2
 800025c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 800025e:	1d3b      	adds	r3, r7, #4
 8000260:	4618      	mov	r0, r3
 8000262:	f000 fb9f 	bl	80009a4 <GPIO_Init>

	//USART2 RX
	usart_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 8000266:	2303      	movs	r3, #3
 8000268:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 800026a:	1d3b      	adds	r3, r7, #4
 800026c:	4618      	mov	r0, r3
 800026e:	f000 fb99 	bl	80009a4 <GPIO_Init>


}
 8000272:	bf00      	nop
 8000274:	3710      	adds	r7, #16
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	40020000 	.word	0x40020000

08000280 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b086      	sub	sp, #24
 8000284:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn,GpioLed;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOA;
 8000286:	4b13      	ldr	r3, [pc, #76]	; (80002d4 <GPIO_ButtonInit+0x54>)
 8000288:	60fb      	str	r3, [r7, #12]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 800028a:	2300      	movs	r3, #0
 800028c:	743b      	strb	r3, [r7, #16]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 800028e:	2300      	movs	r3, #0
 8000290:	747b      	strb	r3, [r7, #17]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000292:	2302      	movs	r3, #2
 8000294:	74bb      	strb	r3, [r7, #18]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000296:	2300      	movs	r3, #0
 8000298:	74fb      	strb	r3, [r7, #19]

	GPIO_Init(&GPIOBtn);
 800029a:	f107 030c 	add.w	r3, r7, #12
 800029e:	4618      	mov	r0, r3
 80002a0:	f000 fb80 	bl	80009a4 <GPIO_Init>

	//this is led gpio configuration
	GpioLed.pGPIOx = GPIOD;
 80002a4:	4b0c      	ldr	r3, [pc, #48]	; (80002d8 <GPIO_ButtonInit+0x58>)
 80002a6:	603b      	str	r3, [r7, #0]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 80002a8:	230c      	movs	r3, #12
 80002aa:	713b      	strb	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80002ac:	2301      	movs	r3, #1
 80002ae:	717b      	strb	r3, [r7, #5]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002b0:	2302      	movs	r3, #2
 80002b2:	71bb      	strb	r3, [r7, #6]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OP;
 80002b4:	2301      	movs	r3, #1
 80002b6:	723b      	strb	r3, [r7, #8]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002b8:	2300      	movs	r3, #0
 80002ba:	71fb      	strb	r3, [r7, #7]

	GPIO_PeripheralClockControl(GPIOD,ENABLE);
 80002bc:	2101      	movs	r1, #1
 80002be:	4806      	ldr	r0, [pc, #24]	; (80002d8 <GPIO_ButtonInit+0x58>)
 80002c0:	f000 fa88 	bl	80007d4 <GPIO_PeripheralClockControl>

	GPIO_Init(&GpioLed);
 80002c4:	463b      	mov	r3, r7
 80002c6:	4618      	mov	r0, r3
 80002c8:	f000 fb6c 	bl	80009a4 <GPIO_Init>

}
 80002cc:	bf00      	nop
 80002ce:	3718      	adds	r7, #24
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	40020000 	.word	0x40020000
 80002d8:	40020c00 	.word	0x40020c00

080002dc <delay>:

void delay(void)
{
 80002dc:	b480      	push	{r7}
 80002de:	b083      	sub	sp, #12
 80002e0:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 80002e2:	2300      	movs	r3, #0
 80002e4:	607b      	str	r3, [r7, #4]
 80002e6:	e002      	b.n	80002ee <delay+0x12>
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	3301      	adds	r3, #1
 80002ec:	607b      	str	r3, [r7, #4]
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	4a04      	ldr	r2, [pc, #16]	; (8000304 <delay+0x28>)
 80002f2:	4293      	cmp	r3, r2
 80002f4:	d9f8      	bls.n	80002e8 <delay+0xc>
}
 80002f6:	bf00      	nop
 80002f8:	bf00      	nop
 80002fa:	370c      	adds	r7, #12
 80002fc:	46bd      	mov	sp, r7
 80002fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000302:	4770      	bx	lr
 8000304:	0003d08f 	.word	0x0003d08f

08000308 <main>:


int main(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0

	GPIO_ButtonInit();
 800030c:	f7ff ffb8 	bl	8000280 <GPIO_ButtonInit>

	USART2_GPIOInit();
 8000310:	f7ff ff94 	bl	800023c <USART2_GPIOInit>

    USART2_Init();
 8000314:	f7ff ff70 	bl	80001f8 <USART2_Init>

    USART_PeripheralControl(USART2,ENABLE);
 8000318:	2101      	movs	r1, #1
 800031a:	480b      	ldr	r0, [pc, #44]	; (8000348 <main+0x40>)
 800031c:	f000 f9b7 	bl	800068e <USART_PeripheralControl>

    while(1)
    {
		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 8000320:	bf00      	nop
 8000322:	2100      	movs	r1, #0
 8000324:	4809      	ldr	r0, [pc, #36]	; (800034c <main+0x44>)
 8000326:	f000 fcd5 	bl	8000cd4 <GPIO_ReadFromInputPin>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d0f8      	beq.n	8000322 <main+0x1a>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 8000330:	f7ff ffd4 	bl	80002dc <delay>

		USART_SendData(&usart2_handle,(uint8_t*)msg,strlen(msg));
 8000334:	4806      	ldr	r0, [pc, #24]	; (8000350 <main+0x48>)
 8000336:	f7ff ff57 	bl	80001e8 <strlen>
 800033a:	4603      	mov	r3, r0
 800033c:	461a      	mov	r2, r3
 800033e:	4904      	ldr	r1, [pc, #16]	; (8000350 <main+0x48>)
 8000340:	4804      	ldr	r0, [pc, #16]	; (8000354 <main+0x4c>)
 8000342:	f000 f956 	bl	80005f2 <USART_SendData>
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 8000346:	e7eb      	b.n	8000320 <main+0x18>
 8000348:	40004400 	.word	0x40004400
 800034c:	40020000 	.word	0x40020000
 8000350:	20000000 	.word	0x20000000
 8000354:	20000434 	.word	0x20000434

08000358 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000358:	480d      	ldr	r0, [pc, #52]	; (8000390 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800035a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800035c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000360:	480c      	ldr	r0, [pc, #48]	; (8000394 <LoopForever+0x6>)
  ldr r1, =_edata
 8000362:	490d      	ldr	r1, [pc, #52]	; (8000398 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000364:	4a0d      	ldr	r2, [pc, #52]	; (800039c <LoopForever+0xe>)
  movs r3, #0
 8000366:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000368:	e002      	b.n	8000370 <LoopCopyDataInit>

0800036a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800036a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800036c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800036e:	3304      	adds	r3, #4

08000370 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000370:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000372:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000374:	d3f9      	bcc.n	800036a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000376:	4a0a      	ldr	r2, [pc, #40]	; (80003a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000378:	4c0a      	ldr	r4, [pc, #40]	; (80003a4 <LoopForever+0x16>)
  movs r3, #0
 800037a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800037c:	e001      	b.n	8000382 <LoopFillZerobss>

0800037e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800037e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000380:	3204      	adds	r2, #4

08000382 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000382:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000384:	d3fb      	bcc.n	800037e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000386:	f000 fd79 	bl	8000e7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800038a:	f7ff ffbd 	bl	8000308 <main>

0800038e <LoopForever>:

LoopForever:
    b LoopForever
 800038e:	e7fe      	b.n	800038e <LoopForever>
  ldr   r0, =_estack
 8000390:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000394:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000398:	20000418 	.word	0x20000418
  ldr r2, =_sidata
 800039c:	08000ee4 	.word	0x08000ee4
  ldr r2, =_sbss
 80003a0:	20000418 	.word	0x20000418
  ldr r4, =_ebss
 80003a4:	20000458 	.word	0x20000458

080003a8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003a8:	e7fe      	b.n	80003a8 <ADC_IRQHandler>
	...

080003ac <USART_PeriClockControl>:
 *
 *@Note					-
 *
 */
void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 80003ac:	b480      	push	{r7}
 80003ae:	b083      	sub	sp, #12
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
 80003b4:	460b      	mov	r3, r1
 80003b6:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80003b8:	78fb      	ldrb	r3, [r7, #3]
 80003ba:	2b01      	cmp	r3, #1
 80003bc:	d141      	bne.n	8000442 <USART_PeriClockControl+0x96>
	{
		if(pUSARTx == USART1)
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	4a43      	ldr	r2, [pc, #268]	; (80004d0 <USART_PeriClockControl+0x124>)
 80003c2:	4293      	cmp	r3, r2
 80003c4:	d106      	bne.n	80003d4 <USART_PeriClockControl+0x28>
		{
			USART1_PCLK_EN();
 80003c6:	4b43      	ldr	r3, [pc, #268]	; (80004d4 <USART_PeriClockControl+0x128>)
 80003c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80003ca:	4a42      	ldr	r2, [pc, #264]	; (80004d4 <USART_PeriClockControl+0x128>)
 80003cc:	f043 0310 	orr.w	r3, r3, #16
 80003d0:	6453      	str	r3, [r2, #68]	; 0x44
		else if(pUSARTx == USART6)
		{
			USART6_PCLK_DI();
		}
	}
}
 80003d2:	e077      	b.n	80004c4 <USART_PeriClockControl+0x118>
		else if(pUSARTx == USART2)
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	4a40      	ldr	r2, [pc, #256]	; (80004d8 <USART_PeriClockControl+0x12c>)
 80003d8:	4293      	cmp	r3, r2
 80003da:	d106      	bne.n	80003ea <USART_PeriClockControl+0x3e>
			USART2_PCLK_EN();
 80003dc:	4b3d      	ldr	r3, [pc, #244]	; (80004d4 <USART_PeriClockControl+0x128>)
 80003de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003e0:	4a3c      	ldr	r2, [pc, #240]	; (80004d4 <USART_PeriClockControl+0x128>)
 80003e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003e6:	6413      	str	r3, [r2, #64]	; 0x40
}
 80003e8:	e06c      	b.n	80004c4 <USART_PeriClockControl+0x118>
		else if(pUSARTx == USART3)
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	4a3b      	ldr	r2, [pc, #236]	; (80004dc <USART_PeriClockControl+0x130>)
 80003ee:	4293      	cmp	r3, r2
 80003f0:	d106      	bne.n	8000400 <USART_PeriClockControl+0x54>
			USART3_PCLK_EN();
 80003f2:	4b38      	ldr	r3, [pc, #224]	; (80004d4 <USART_PeriClockControl+0x128>)
 80003f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003f6:	4a37      	ldr	r2, [pc, #220]	; (80004d4 <USART_PeriClockControl+0x128>)
 80003f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003fc:	6413      	str	r3, [r2, #64]	; 0x40
}
 80003fe:	e061      	b.n	80004c4 <USART_PeriClockControl+0x118>
		else if(pUSARTx == UART4)
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	4a37      	ldr	r2, [pc, #220]	; (80004e0 <USART_PeriClockControl+0x134>)
 8000404:	4293      	cmp	r3, r2
 8000406:	d106      	bne.n	8000416 <USART_PeriClockControl+0x6a>
			UART4_PCLK_EN();
 8000408:	4b32      	ldr	r3, [pc, #200]	; (80004d4 <USART_PeriClockControl+0x128>)
 800040a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800040c:	4a31      	ldr	r2, [pc, #196]	; (80004d4 <USART_PeriClockControl+0x128>)
 800040e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000412:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000414:	e056      	b.n	80004c4 <USART_PeriClockControl+0x118>
		else if(pUSARTx == UART5)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	4a32      	ldr	r2, [pc, #200]	; (80004e4 <USART_PeriClockControl+0x138>)
 800041a:	4293      	cmp	r3, r2
 800041c:	d106      	bne.n	800042c <USART_PeriClockControl+0x80>
			UART5_PCLK_EN();
 800041e:	4b2d      	ldr	r3, [pc, #180]	; (80004d4 <USART_PeriClockControl+0x128>)
 8000420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000422:	4a2c      	ldr	r2, [pc, #176]	; (80004d4 <USART_PeriClockControl+0x128>)
 8000424:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000428:	6413      	str	r3, [r2, #64]	; 0x40
}
 800042a:	e04b      	b.n	80004c4 <USART_PeriClockControl+0x118>
		else if(pUSARTx == USART6)
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	4a2e      	ldr	r2, [pc, #184]	; (80004e8 <USART_PeriClockControl+0x13c>)
 8000430:	4293      	cmp	r3, r2
 8000432:	d147      	bne.n	80004c4 <USART_PeriClockControl+0x118>
			USART6_PCLK_EN();
 8000434:	4b27      	ldr	r3, [pc, #156]	; (80004d4 <USART_PeriClockControl+0x128>)
 8000436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000438:	4a26      	ldr	r2, [pc, #152]	; (80004d4 <USART_PeriClockControl+0x128>)
 800043a:	f043 0320 	orr.w	r3, r3, #32
 800043e:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000440:	e040      	b.n	80004c4 <USART_PeriClockControl+0x118>
		if(pUSARTx == USART1)
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	4a22      	ldr	r2, [pc, #136]	; (80004d0 <USART_PeriClockControl+0x124>)
 8000446:	4293      	cmp	r3, r2
 8000448:	d106      	bne.n	8000458 <USART_PeriClockControl+0xac>
			USART1_PCLK_DI();
 800044a:	4b22      	ldr	r3, [pc, #136]	; (80004d4 <USART_PeriClockControl+0x128>)
 800044c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800044e:	4a21      	ldr	r2, [pc, #132]	; (80004d4 <USART_PeriClockControl+0x128>)
 8000450:	f023 0310 	bic.w	r3, r3, #16
 8000454:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000456:	e035      	b.n	80004c4 <USART_PeriClockControl+0x118>
		else if(pUSARTx == USART2)
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	4a1f      	ldr	r2, [pc, #124]	; (80004d8 <USART_PeriClockControl+0x12c>)
 800045c:	4293      	cmp	r3, r2
 800045e:	d106      	bne.n	800046e <USART_PeriClockControl+0xc2>
			USART2_PCLK_DI();
 8000460:	4b1c      	ldr	r3, [pc, #112]	; (80004d4 <USART_PeriClockControl+0x128>)
 8000462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000464:	4a1b      	ldr	r2, [pc, #108]	; (80004d4 <USART_PeriClockControl+0x128>)
 8000466:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800046a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800046c:	e02a      	b.n	80004c4 <USART_PeriClockControl+0x118>
		else if(pUSARTx == USART3)
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	4a1a      	ldr	r2, [pc, #104]	; (80004dc <USART_PeriClockControl+0x130>)
 8000472:	4293      	cmp	r3, r2
 8000474:	d106      	bne.n	8000484 <USART_PeriClockControl+0xd8>
			USART3_PCLK_DI();
 8000476:	4b17      	ldr	r3, [pc, #92]	; (80004d4 <USART_PeriClockControl+0x128>)
 8000478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800047a:	4a16      	ldr	r2, [pc, #88]	; (80004d4 <USART_PeriClockControl+0x128>)
 800047c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000480:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000482:	e01f      	b.n	80004c4 <USART_PeriClockControl+0x118>
		else if(pUSARTx == UART4)
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	4a16      	ldr	r2, [pc, #88]	; (80004e0 <USART_PeriClockControl+0x134>)
 8000488:	4293      	cmp	r3, r2
 800048a:	d106      	bne.n	800049a <USART_PeriClockControl+0xee>
			UART4_PCLK_DI();
 800048c:	4b11      	ldr	r3, [pc, #68]	; (80004d4 <USART_PeriClockControl+0x128>)
 800048e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000490:	4a10      	ldr	r2, [pc, #64]	; (80004d4 <USART_PeriClockControl+0x128>)
 8000492:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8000496:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000498:	e014      	b.n	80004c4 <USART_PeriClockControl+0x118>
		else if(pUSARTx == UART5)
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	4a11      	ldr	r2, [pc, #68]	; (80004e4 <USART_PeriClockControl+0x138>)
 800049e:	4293      	cmp	r3, r2
 80004a0:	d106      	bne.n	80004b0 <USART_PeriClockControl+0x104>
			UART5_PCLK_DI();
 80004a2:	4b0c      	ldr	r3, [pc, #48]	; (80004d4 <USART_PeriClockControl+0x128>)
 80004a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004a6:	4a0b      	ldr	r2, [pc, #44]	; (80004d4 <USART_PeriClockControl+0x128>)
 80004a8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80004ac:	6413      	str	r3, [r2, #64]	; 0x40
}
 80004ae:	e009      	b.n	80004c4 <USART_PeriClockControl+0x118>
		else if(pUSARTx == USART6)
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	4a0d      	ldr	r2, [pc, #52]	; (80004e8 <USART_PeriClockControl+0x13c>)
 80004b4:	4293      	cmp	r3, r2
 80004b6:	d105      	bne.n	80004c4 <USART_PeriClockControl+0x118>
			USART6_PCLK_DI();
 80004b8:	4b06      	ldr	r3, [pc, #24]	; (80004d4 <USART_PeriClockControl+0x128>)
 80004ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004bc:	4a05      	ldr	r2, [pc, #20]	; (80004d4 <USART_PeriClockControl+0x128>)
 80004be:	f023 0320 	bic.w	r3, r3, #32
 80004c2:	6453      	str	r3, [r2, #68]	; 0x44
}
 80004c4:	bf00      	nop
 80004c6:	370c      	adds	r7, #12
 80004c8:	46bd      	mov	sp, r7
 80004ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ce:	4770      	bx	lr
 80004d0:	40011000 	.word	0x40011000
 80004d4:	40023800 	.word	0x40023800
 80004d8:	40004400 	.word	0x40004400
 80004dc:	40004800 	.word	0x40004800
 80004e0:	40004c00 	.word	0x40004c00
 80004e4:	40005000 	.word	0x40005000
 80004e8:	40011400 	.word	0x40011400

080004ec <USART_Init>:
 *
 *@Note					-
 *
 */
void USART_Init(USART_Handle_t *pUSARTHandle)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
	//Temporary variable
	uint32_t tempreg=0;
 80004f4:	2300      	movs	r3, #0
 80004f6:	60fb      	str	r3, [r7, #12]

/******************************** Configuration of CR1******************************************/

	//Implement the code to enable the Clock for given USART peripheral
	 USART_PeriClockControl(pUSARTHandle->pUSARTx, ENABLE);
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	2101      	movs	r1, #1
 80004fe:	4618      	mov	r0, r3
 8000500:	f7ff ff54 	bl	80003ac <USART_PeriClockControl>

	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	if ( pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	791b      	ldrb	r3, [r3, #4]
 8000508:	2b01      	cmp	r3, #1
 800050a:	d104      	bne.n	8000516 <USART_Init+0x2a>
	{
		//Implement the code to enable the Receiver bit field
		tempreg|= (1 << USART_CR1_RE);
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	f043 0304 	orr.w	r3, r3, #4
 8000512:	60fb      	str	r3, [r7, #12]
 8000514:	e010      	b.n	8000538 <USART_Init+0x4c>
	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	791b      	ldrb	r3, [r3, #4]
 800051a:	2b00      	cmp	r3, #0
 800051c:	d104      	bne.n	8000528 <USART_Init+0x3c>
	{
		//Implement the code to enable the Transmitter bit field
		tempreg |= ( 1 << USART_CR1_TE );
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	f043 0308 	orr.w	r3, r3, #8
 8000524:	60fb      	str	r3, [r7, #12]
 8000526:	e007      	b.n	8000538 <USART_Init+0x4c>

	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	791b      	ldrb	r3, [r3, #4]
 800052c:	2b02      	cmp	r3, #2
 800052e:	d103      	bne.n	8000538 <USART_Init+0x4c>
	{
		//Implement the code to enable the both Transmitter and Receiver bit fields
		tempreg |= ( ( 1 << USART_CR1_RE) | ( 1 << USART_CR1_TE) );
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	f043 030c 	orr.w	r3, r3, #12
 8000536:	60fb      	str	r3, [r7, #12]
	}

    //Implement the code to configure the Word length configuration item
	tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M ;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	7b5b      	ldrb	r3, [r3, #13]
 800053c:	031b      	lsls	r3, r3, #12
 800053e:	461a      	mov	r2, r3
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	4313      	orrs	r3, r2
 8000544:	60fb      	str	r3, [r7, #12]


    //Configuration of parity control bit fields
	if ( pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	7b9b      	ldrb	r3, [r3, #14]
 800054a:	2b01      	cmp	r3, #1
 800054c:	d104      	bne.n	8000558 <USART_Init+0x6c>
	{
		//Implement the code to enale the parity control
		tempreg |= ( 1 << USART_CR1_PCE);
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000554:	60fb      	str	r3, [r7, #12]
 8000556:	e00b      	b.n	8000570 <USART_Init+0x84>

		//Implement the code to enable EVEN parity
		//Not required because by default EVEN parity will be selected once you enable the parity control

	}else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD )
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	7b9b      	ldrb	r3, [r3, #14]
 800055c:	2b02      	cmp	r3, #2
 800055e:	d107      	bne.n	8000570 <USART_Init+0x84>
	{
		//Implement the code to enable the parity control
	    tempreg |= ( 1 << USART_CR1_PCE);
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000566:	60fb      	str	r3, [r7, #12]

	    //Implement the code to enable ODD parity
	    tempreg |= ( 1 << USART_CR1_PS);
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800056e:	60fb      	str	r3, [r7, #12]

	}

   //Program the CR1 register
	pUSARTHandle->pUSARTx->CR1 = tempreg;
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	68fa      	ldr	r2, [r7, #12]
 8000576:	60da      	str	r2, [r3, #12]

/******************************** Configuration of CR2******************************************/

	tempreg=0;
 8000578:	2300      	movs	r3, #0
 800057a:	60fb      	str	r3, [r7, #12]

	//Implement the code to configure the number of stop bits inserted during USART frame transmission
	tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	7b1b      	ldrb	r3, [r3, #12]
 8000580:	031b      	lsls	r3, r3, #12
 8000582:	461a      	mov	r2, r3
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	4313      	orrs	r3, r2
 8000588:	60fb      	str	r3, [r7, #12]

	//Program the CR2 register
	pUSARTHandle->pUSARTx->CR2 = tempreg;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	68fa      	ldr	r2, [r7, #12]
 8000590:	611a      	str	r2, [r3, #16]

/******************************** Configuration of CR3******************************************/

	tempreg=0;
 8000592:	2300      	movs	r3, #0
 8000594:	60fb      	str	r3, [r7, #12]

	//Configuration of USART hardware flow control
	if ( pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	7bdb      	ldrb	r3, [r3, #15]
 800059a:	2b01      	cmp	r3, #1
 800059c:	d104      	bne.n	80005a8 <USART_Init+0xbc>
	{
		//Implement the code to enable CTS flow control
		tempreg |= ( 1 << USART_CR3_CTSE);
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005a4:	60fb      	str	r3, [r7, #12]
 80005a6:	e014      	b.n	80005d2 <USART_Init+0xe6>


	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	7bdb      	ldrb	r3, [r3, #15]
 80005ac:	2b02      	cmp	r3, #2
 80005ae:	d104      	bne.n	80005ba <USART_Init+0xce>
	{
		//Implement the code to enable RTS flow control
		tempreg |= ( 1 << USART_CR3_RTSE);
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	e00b      	b.n	80005d2 <USART_Init+0xe6>

	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	7bdb      	ldrb	r3, [r3, #15]
 80005be:	2b03      	cmp	r3, #3
 80005c0:	d107      	bne.n	80005d2 <USART_Init+0xe6>
	{
		//Implement the code to enable both CTS and RTS Flow control
		tempreg |= ( 1 << USART_CR3_CTSE);
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005c8:	60fb      	str	r3, [r7, #12]
		tempreg |= ( 1 << USART_CR3_RTSE);
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005d0:	60fb      	str	r3, [r7, #12]
	}


	pUSARTHandle->pUSARTx->CR3 = tempreg;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	68fa      	ldr	r2, [r7, #12]
 80005d8:	615a      	str	r2, [r3, #20]

/******************************** Configuration of BRR(Baudrate register)******************************************/

	//Implement the code to configure the baud rate
	//We will cover this in the lecture. No action required here
	USART_SetBaudRate(pUSARTHandle->pUSARTx, pUSARTHandle->USART_Config.USART_Baud);
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	689b      	ldr	r3, [r3, #8]
 80005e2:	4619      	mov	r1, r3
 80005e4:	4610      	mov	r0, r2
 80005e6:	f000 f883 	bl	80006f0 <USART_SetBaudRate>

}
 80005ea:	bf00      	nop
 80005ec:	3710      	adds	r7, #16
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}

080005f2 <USART_SendData>:
 *
 *@Note					-
 *
 */
void USART_SendData(USART_Handle_t *pUSARTHandle,uint8_t *pTxBuffer, uint32_t Len)
{
 80005f2:	b580      	push	{r7, lr}
 80005f4:	b086      	sub	sp, #24
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	60f8      	str	r0, [r7, #12]
 80005fa:	60b9      	str	r1, [r7, #8]
 80005fc:	607a      	str	r2, [r7, #4]
	uint16_t *pdata;
   //Loop over until "Len" number of bytes are transferred
	for(uint32_t i = 0 ; i < Len; i++)
 80005fe:	2300      	movs	r3, #0
 8000600:	617b      	str	r3, [r7, #20]
 8000602:	e031      	b.n	8000668 <USART_SendData+0x76>
	{
		//Implement the code to wait until TXE flag is set in the SR
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TXE));
 8000604:	bf00      	nop
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	2180      	movs	r1, #128	; 0x80
 800060c:	4618      	mov	r0, r3
 800060e:	f000 f85a 	bl	80006c6 <USART_GetFlagStatus>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d0f6      	beq.n	8000606 <USART_SendData+0x14>

         //Check the USART_WordLength item for 9BIT or 8BIT in a frame
		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	7b5b      	ldrb	r3, [r3, #13]
 800061c:	2b01      	cmp	r3, #1
 800061e:	d118      	bne.n	8000652 <USART_SendData+0x60>
		{
			//if 9BIT, load the DR with 2bytes masking the bits other than first 9 bits
			pdata = (uint16_t*) pTxBuffer;
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 8000624:	693b      	ldr	r3, [r7, #16]
 8000626:	881b      	ldrh	r3, [r3, #0]
 8000628:	461a      	mov	r2, r3
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000632:	605a      	str	r2, [r3, #4]

			//check for USART_ParityControl
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	7b9b      	ldrb	r3, [r3, #14]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d106      	bne.n	800064a <USART_SendData+0x58>
			{
				//No parity is used in this transfer. so, 9bits of user data will be sent
				//Implement the code to increment pTxBuffer twice
				pTxBuffer++;
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	3301      	adds	r3, #1
 8000640:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 8000642:	68bb      	ldr	r3, [r7, #8]
 8000644:	3301      	adds	r3, #1
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	e00b      	b.n	8000662 <USART_SendData+0x70>
			}
			else
			{
				//Parity bit is used in this transfer . so , 8bits of user data will be sent
				//The 9th bit will be replaced by parity bit by the hardware
				pTxBuffer++;
 800064a:	68bb      	ldr	r3, [r7, #8]
 800064c:	3301      	adds	r3, #1
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	e007      	b.n	8000662 <USART_SendData+0x70>
			}
		}
		else
		{
			//This is 8bit data transfer
			pUSARTHandle->pUSARTx->DR = (*pTxBuffer  & (uint8_t)0xFF);
 8000652:	68bb      	ldr	r3, [r7, #8]
 8000654:	781a      	ldrb	r2, [r3, #0]
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	605a      	str	r2, [r3, #4]

			//Implement the code to increment the buffer address
			pTxBuffer++;
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	3301      	adds	r3, #1
 8000660:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 8000662:	697b      	ldr	r3, [r7, #20]
 8000664:	3301      	adds	r3, #1
 8000666:	617b      	str	r3, [r7, #20]
 8000668:	697a      	ldr	r2, [r7, #20]
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	429a      	cmp	r2, r3
 800066e:	d3c9      	bcc.n	8000604 <USART_SendData+0x12>
		}
	}

	//Implement the code to wait till TC flag is set in the SR
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TC));
 8000670:	bf00      	nop
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	2140      	movs	r1, #64	; 0x40
 8000678:	4618      	mov	r0, r3
 800067a:	f000 f824 	bl	80006c6 <USART_GetFlagStatus>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d0f6      	beq.n	8000672 <USART_SendData+0x80>
}
 8000684:	bf00      	nop
 8000686:	bf00      	nop
 8000688:	3718      	adds	r7, #24
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}

0800068e <USART_PeripheralControl>:
 *
 *@Note					-
 *
 */
void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnOrDi)
{
 800068e:	b480      	push	{r7}
 8000690:	b083      	sub	sp, #12
 8000692:	af00      	add	r7, sp, #0
 8000694:	6078      	str	r0, [r7, #4]
 8000696:	460b      	mov	r3, r1
 8000698:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 800069a:	78fb      	ldrb	r3, [r7, #3]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d106      	bne.n	80006ae <USART_PeripheralControl+0x20>
	{
		pUSARTx->CR1 |= (1 << USART_CR1_UE);
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	68db      	ldr	r3, [r3, #12]
 80006a4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	60da      	str	r2, [r3, #12]
	}
	else
	{
		pUSARTx->CR1 &= ~(1 << USART_CR1_UE);
	}
}
 80006ac:	e005      	b.n	80006ba <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &= ~(1 << USART_CR1_UE);
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	68db      	ldr	r3, [r3, #12]
 80006b2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	60da      	str	r2, [r3, #12]
}
 80006ba:	bf00      	nop
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr

080006c6 <USART_GetFlagStatus>:
 *
 *@Note					-
 *
 */
uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx , uint32_t FlagName)
{
 80006c6:	b480      	push	{r7}
 80006c8:	b083      	sub	sp, #12
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
 80006ce:	6039      	str	r1, [r7, #0]
	if(pUSARTx->SR & FlagName)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681a      	ldr	r2, [r3, #0]
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	4013      	ands	r3, r2
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <USART_GetFlagStatus+0x1a>
		return FLAG_SET;
 80006dc:	2301      	movs	r3, #1
 80006de:	e000      	b.n	80006e2 <USART_GetFlagStatus+0x1c>
	else
		return FLAG_RESET;
 80006e0:	2300      	movs	r3, #0
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
	...

080006f0 <USART_SetBaudRate>:
 *
 * @Note              -  Resolve all the TODOs

 */
void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b088      	sub	sp, #32
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	6039      	str	r1, [r7, #0]
	uint32_t usartdiv;

	//variables to hold Mantissa and Fraction values
	uint32_t M_part,F_part;

  uint32_t tempreg=0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	613b      	str	r3, [r7, #16]

  //Get the value of APB bus clock in to the variable PCLKx
  if(pUSARTx == USART1 || pUSARTx == USART6)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	4a31      	ldr	r2, [pc, #196]	; (80007c8 <USART_SetBaudRate+0xd8>)
 8000702:	4293      	cmp	r3, r2
 8000704:	d003      	beq.n	800070e <USART_SetBaudRate+0x1e>
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	4a30      	ldr	r2, [pc, #192]	; (80007cc <USART_SetBaudRate+0xdc>)
 800070a:	4293      	cmp	r3, r2
 800070c:	d103      	bne.n	8000716 <USART_SetBaudRate+0x26>
  {
	   //USART1 and USART6 are hanging on APB2 bus
	   PCLKx = RCC_GetPCLK2Value();
 800070e:	f000 fb5b 	bl	8000dc8 <RCC_GetPCLK2Value>
 8000712:	61f8      	str	r0, [r7, #28]
 8000714:	e002      	b.n	800071c <USART_SetBaudRate+0x2c>
  }else
  {
	   PCLKx = RCC_GetPCLK1Value();
 8000716:	f000 fafd 	bl	8000d14 <RCC_GetPCLK1Value>
 800071a:	61f8      	str	r0, [r7, #28]
  }

  //Check for OVER8 configuration bit
  if(pUSARTx->CR1 & (1 << USART_CR1_OVER8))
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	68db      	ldr	r3, [r3, #12]
 8000720:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000724:	2b00      	cmp	r3, #0
 8000726:	d00b      	beq.n	8000740 <USART_SetBaudRate+0x50>
  {
	   //OVER8 = 1 , over sampling by 8
	   usartdiv = ((25 * PCLKx) / (2 *BaudRate));
 8000728:	69fa      	ldr	r2, [r7, #28]
 800072a:	4613      	mov	r3, r2
 800072c:	009b      	lsls	r3, r3, #2
 800072e:	4413      	add	r3, r2
 8000730:	009a      	lsls	r2, r3, #2
 8000732:	441a      	add	r2, r3
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	005b      	lsls	r3, r3, #1
 8000738:	fbb2 f3f3 	udiv	r3, r2, r3
 800073c:	61bb      	str	r3, [r7, #24]
 800073e:	e00a      	b.n	8000756 <USART_SetBaudRate+0x66>
  }else
  {
	   //over sampling by 16
	  usartdiv = ((25 * PCLKx) / (4 *BaudRate));
 8000740:	69fa      	ldr	r2, [r7, #28]
 8000742:	4613      	mov	r3, r2
 8000744:	009b      	lsls	r3, r3, #2
 8000746:	4413      	add	r3, r2
 8000748:	009a      	lsls	r2, r3, #2
 800074a:	441a      	add	r2, r3
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	009b      	lsls	r3, r3, #2
 8000750:	fbb2 f3f3 	udiv	r3, r2, r3
 8000754:	61bb      	str	r3, [r7, #24]
  }

  //Calculate the Mantissa part
  M_part = usartdiv/100;
 8000756:	69bb      	ldr	r3, [r7, #24]
 8000758:	4a1d      	ldr	r2, [pc, #116]	; (80007d0 <USART_SetBaudRate+0xe0>)
 800075a:	fba2 2303 	umull	r2, r3, r2, r3
 800075e:	095b      	lsrs	r3, r3, #5
 8000760:	60fb      	str	r3, [r7, #12]

  //Place the Mantissa part in appropriate bit position . refer USART_BRR
  tempreg |= M_part << 4;
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	011b      	lsls	r3, r3, #4
 8000766:	693a      	ldr	r2, [r7, #16]
 8000768:	4313      	orrs	r3, r2
 800076a:	613b      	str	r3, [r7, #16]

  //Extract the fraction part
  F_part = (usartdiv - (M_part * 100));
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	2264      	movs	r2, #100	; 0x64
 8000770:	fb02 f303 	mul.w	r3, r2, r3
 8000774:	69ba      	ldr	r2, [r7, #24]
 8000776:	1ad3      	subs	r3, r2, r3
 8000778:	617b      	str	r3, [r7, #20]

  //Calculate the final fractional
  if(pUSARTx->CR1 & ( 1 << USART_CR1_OVER8))
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	68db      	ldr	r3, [r3, #12]
 800077e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000782:	2b00      	cmp	r3, #0
 8000784:	d00a      	beq.n	800079c <USART_SetBaudRate+0xac>
   {
	  //OVER8 = 1 , over sampling by 8
	  F_part = ((( F_part * 8)+ 50) / 100)& ((uint8_t)0x07);
 8000786:	697b      	ldr	r3, [r7, #20]
 8000788:	00db      	lsls	r3, r3, #3
 800078a:	3332      	adds	r3, #50	; 0x32
 800078c:	4a10      	ldr	r2, [pc, #64]	; (80007d0 <USART_SetBaudRate+0xe0>)
 800078e:	fba2 2303 	umull	r2, r3, r2, r3
 8000792:	095b      	lsrs	r3, r3, #5
 8000794:	f003 0307 	and.w	r3, r3, #7
 8000798:	617b      	str	r3, [r7, #20]
 800079a:	e009      	b.n	80007b0 <USART_SetBaudRate+0xc0>

   }else
   {
	   //over sampling by 16
	   F_part = ((( F_part * 16)+ 50) / 100) & ((uint8_t)0x0F);
 800079c:	697b      	ldr	r3, [r7, #20]
 800079e:	011b      	lsls	r3, r3, #4
 80007a0:	3332      	adds	r3, #50	; 0x32
 80007a2:	4a0b      	ldr	r2, [pc, #44]	; (80007d0 <USART_SetBaudRate+0xe0>)
 80007a4:	fba2 2303 	umull	r2, r3, r2, r3
 80007a8:	095b      	lsrs	r3, r3, #5
 80007aa:	f003 030f 	and.w	r3, r3, #15
 80007ae:	617b      	str	r3, [r7, #20]

   }

  //Place the fractional part in appropriate bit position . refer USART_BRR
  tempreg |= F_part;
 80007b0:	693a      	ldr	r2, [r7, #16]
 80007b2:	697b      	ldr	r3, [r7, #20]
 80007b4:	4313      	orrs	r3, r2
 80007b6:	613b      	str	r3, [r7, #16]

  //copy the value of tempreg in to BRR register
  pUSARTx->BRR = tempreg;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	693a      	ldr	r2, [r7, #16]
 80007bc:	609a      	str	r2, [r3, #8]
}
 80007be:	bf00      	nop
 80007c0:	3720      	adds	r7, #32
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40011000 	.word	0x40011000
 80007cc:	40011400 	.word	0x40011400
 80007d0:	51eb851f 	.word	0x51eb851f

080007d4 <GPIO_PeripheralClockControl>:
 *
 *@Note					- none
 *
 */
void GPIO_PeripheralClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	460b      	mov	r3, r1
 80007de:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80007e0:	78fb      	ldrb	r3, [r7, #3]
 80007e2:	2b01      	cmp	r3, #1
 80007e4:	d162      	bne.n	80008ac <GPIO_PeripheralClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4a64      	ldr	r2, [pc, #400]	; (800097c <GPIO_PeripheralClockControl+0x1a8>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d106      	bne.n	80007fc <GPIO_PeripheralClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80007ee:	4b64      	ldr	r3, [pc, #400]	; (8000980 <GPIO_PeripheralClockControl+0x1ac>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a63      	ldr	r2, [pc, #396]	; (8000980 <GPIO_PeripheralClockControl+0x1ac>)
 80007f4:	f043 0301 	orr.w	r3, r3, #1
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
		else if(pGPIOx == GPIOI)
		{
			GPIOI_PCLK_DI();
		}
	}
}
 80007fa:	e0b9      	b.n	8000970 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	4a61      	ldr	r2, [pc, #388]	; (8000984 <GPIO_PeripheralClockControl+0x1b0>)
 8000800:	4293      	cmp	r3, r2
 8000802:	d106      	bne.n	8000812 <GPIO_PeripheralClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000804:	4b5e      	ldr	r3, [pc, #376]	; (8000980 <GPIO_PeripheralClockControl+0x1ac>)
 8000806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000808:	4a5d      	ldr	r2, [pc, #372]	; (8000980 <GPIO_PeripheralClockControl+0x1ac>)
 800080a:	f043 0302 	orr.w	r3, r3, #2
 800080e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000810:	e0ae      	b.n	8000970 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	4a5c      	ldr	r2, [pc, #368]	; (8000988 <GPIO_PeripheralClockControl+0x1b4>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d106      	bne.n	8000828 <GPIO_PeripheralClockControl+0x54>
			GPIOC_PCLK_EN();
 800081a:	4b59      	ldr	r3, [pc, #356]	; (8000980 <GPIO_PeripheralClockControl+0x1ac>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a58      	ldr	r2, [pc, #352]	; (8000980 <GPIO_PeripheralClockControl+0x1ac>)
 8000820:	f043 0304 	orr.w	r3, r3, #4
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000826:	e0a3      	b.n	8000970 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	4a58      	ldr	r2, [pc, #352]	; (800098c <GPIO_PeripheralClockControl+0x1b8>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d106      	bne.n	800083e <GPIO_PeripheralClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000830:	4b53      	ldr	r3, [pc, #332]	; (8000980 <GPIO_PeripheralClockControl+0x1ac>)
 8000832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000834:	4a52      	ldr	r2, [pc, #328]	; (8000980 <GPIO_PeripheralClockControl+0x1ac>)
 8000836:	f043 0308 	orr.w	r3, r3, #8
 800083a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800083c:	e098      	b.n	8000970 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	4a53      	ldr	r2, [pc, #332]	; (8000990 <GPIO_PeripheralClockControl+0x1bc>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d106      	bne.n	8000854 <GPIO_PeripheralClockControl+0x80>
			GPIOE_PCLK_EN();
 8000846:	4b4e      	ldr	r3, [pc, #312]	; (8000980 <GPIO_PeripheralClockControl+0x1ac>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a4d      	ldr	r2, [pc, #308]	; (8000980 <GPIO_PeripheralClockControl+0x1ac>)
 800084c:	f043 0310 	orr.w	r3, r3, #16
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000852:	e08d      	b.n	8000970 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	4a4f      	ldr	r2, [pc, #316]	; (8000994 <GPIO_PeripheralClockControl+0x1c0>)
 8000858:	4293      	cmp	r3, r2
 800085a:	d106      	bne.n	800086a <GPIO_PeripheralClockControl+0x96>
			GPIOF_PCLK_EN();
 800085c:	4b48      	ldr	r3, [pc, #288]	; (8000980 <GPIO_PeripheralClockControl+0x1ac>)
 800085e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000860:	4a47      	ldr	r2, [pc, #284]	; (8000980 <GPIO_PeripheralClockControl+0x1ac>)
 8000862:	f043 0320 	orr.w	r3, r3, #32
 8000866:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000868:	e082      	b.n	8000970 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	4a4a      	ldr	r2, [pc, #296]	; (8000998 <GPIO_PeripheralClockControl+0x1c4>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d106      	bne.n	8000880 <GPIO_PeripheralClockControl+0xac>
			GPIOG_PCLK_EN();
 8000872:	4b43      	ldr	r3, [pc, #268]	; (8000980 <GPIO_PeripheralClockControl+0x1ac>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a42      	ldr	r2, [pc, #264]	; (8000980 <GPIO_PeripheralClockControl+0x1ac>)
 8000878:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800087e:	e077      	b.n	8000970 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	4a46      	ldr	r2, [pc, #280]	; (800099c <GPIO_PeripheralClockControl+0x1c8>)
 8000884:	4293      	cmp	r3, r2
 8000886:	d106      	bne.n	8000896 <GPIO_PeripheralClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000888:	4b3d      	ldr	r3, [pc, #244]	; (8000980 <GPIO_PeripheralClockControl+0x1ac>)
 800088a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088c:	4a3c      	ldr	r2, [pc, #240]	; (8000980 <GPIO_PeripheralClockControl+0x1ac>)
 800088e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000892:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000894:	e06c      	b.n	8000970 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	4a41      	ldr	r2, [pc, #260]	; (80009a0 <GPIO_PeripheralClockControl+0x1cc>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d168      	bne.n	8000970 <GPIO_PeripheralClockControl+0x19c>
			GPIOI_PCLK_EN();
 800089e:	4b38      	ldr	r3, [pc, #224]	; (8000980 <GPIO_PeripheralClockControl+0x1ac>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a37      	ldr	r2, [pc, #220]	; (8000980 <GPIO_PeripheralClockControl+0x1ac>)
 80008a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008aa:	e061      	b.n	8000970 <GPIO_PeripheralClockControl+0x19c>
		if(pGPIOx == GPIOA)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	4a33      	ldr	r2, [pc, #204]	; (800097c <GPIO_PeripheralClockControl+0x1a8>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d106      	bne.n	80008c2 <GPIO_PeripheralClockControl+0xee>
			GPIOA_PCLK_DI();
 80008b4:	4b32      	ldr	r3, [pc, #200]	; (8000980 <GPIO_PeripheralClockControl+0x1ac>)
 80008b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b8:	4a31      	ldr	r2, [pc, #196]	; (8000980 <GPIO_PeripheralClockControl+0x1ac>)
 80008ba:	f023 0301 	bic.w	r3, r3, #1
 80008be:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008c0:	e056      	b.n	8000970 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	4a2f      	ldr	r2, [pc, #188]	; (8000984 <GPIO_PeripheralClockControl+0x1b0>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d106      	bne.n	80008d8 <GPIO_PeripheralClockControl+0x104>
			GPIOB_PCLK_DI();
 80008ca:	4b2d      	ldr	r3, [pc, #180]	; (8000980 <GPIO_PeripheralClockControl+0x1ac>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a2c      	ldr	r2, [pc, #176]	; (8000980 <GPIO_PeripheralClockControl+0x1ac>)
 80008d0:	f023 0302 	bic.w	r3, r3, #2
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008d6:	e04b      	b.n	8000970 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	4a2b      	ldr	r2, [pc, #172]	; (8000988 <GPIO_PeripheralClockControl+0x1b4>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d106      	bne.n	80008ee <GPIO_PeripheralClockControl+0x11a>
			GPIOC_PCLK_DI();
 80008e0:	4b27      	ldr	r3, [pc, #156]	; (8000980 <GPIO_PeripheralClockControl+0x1ac>)
 80008e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e4:	4a26      	ldr	r2, [pc, #152]	; (8000980 <GPIO_PeripheralClockControl+0x1ac>)
 80008e6:	f023 0304 	bic.w	r3, r3, #4
 80008ea:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008ec:	e040      	b.n	8000970 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4a26      	ldr	r2, [pc, #152]	; (800098c <GPIO_PeripheralClockControl+0x1b8>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d106      	bne.n	8000904 <GPIO_PeripheralClockControl+0x130>
			GPIOD_PCLK_DI();
 80008f6:	4b22      	ldr	r3, [pc, #136]	; (8000980 <GPIO_PeripheralClockControl+0x1ac>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a21      	ldr	r2, [pc, #132]	; (8000980 <GPIO_PeripheralClockControl+0x1ac>)
 80008fc:	f023 0308 	bic.w	r3, r3, #8
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000902:	e035      	b.n	8000970 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	4a22      	ldr	r2, [pc, #136]	; (8000990 <GPIO_PeripheralClockControl+0x1bc>)
 8000908:	4293      	cmp	r3, r2
 800090a:	d106      	bne.n	800091a <GPIO_PeripheralClockControl+0x146>
			GPIOE_PCLK_DI();
 800090c:	4b1c      	ldr	r3, [pc, #112]	; (8000980 <GPIO_PeripheralClockControl+0x1ac>)
 800090e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000910:	4a1b      	ldr	r2, [pc, #108]	; (8000980 <GPIO_PeripheralClockControl+0x1ac>)
 8000912:	f023 0310 	bic.w	r3, r3, #16
 8000916:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000918:	e02a      	b.n	8000970 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4a1d      	ldr	r2, [pc, #116]	; (8000994 <GPIO_PeripheralClockControl+0x1c0>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d106      	bne.n	8000930 <GPIO_PeripheralClockControl+0x15c>
			GPIOF_PCLK_DI();
 8000922:	4b17      	ldr	r3, [pc, #92]	; (8000980 <GPIO_PeripheralClockControl+0x1ac>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a16      	ldr	r2, [pc, #88]	; (8000980 <GPIO_PeripheralClockControl+0x1ac>)
 8000928:	f023 0320 	bic.w	r3, r3, #32
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800092e:	e01f      	b.n	8000970 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	4a19      	ldr	r2, [pc, #100]	; (8000998 <GPIO_PeripheralClockControl+0x1c4>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d106      	bne.n	8000946 <GPIO_PeripheralClockControl+0x172>
			GPIOG_PCLK_DI();
 8000938:	4b11      	ldr	r3, [pc, #68]	; (8000980 <GPIO_PeripheralClockControl+0x1ac>)
 800093a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093c:	4a10      	ldr	r2, [pc, #64]	; (8000980 <GPIO_PeripheralClockControl+0x1ac>)
 800093e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000942:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000944:	e014      	b.n	8000970 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4a14      	ldr	r2, [pc, #80]	; (800099c <GPIO_PeripheralClockControl+0x1c8>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d106      	bne.n	800095c <GPIO_PeripheralClockControl+0x188>
			GPIOH_PCLK_DI();
 800094e:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <GPIO_PeripheralClockControl+0x1ac>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a0b      	ldr	r2, [pc, #44]	; (8000980 <GPIO_PeripheralClockControl+0x1ac>)
 8000954:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
}
 800095a:	e009      	b.n	8000970 <GPIO_PeripheralClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	4a10      	ldr	r2, [pc, #64]	; (80009a0 <GPIO_PeripheralClockControl+0x1cc>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d105      	bne.n	8000970 <GPIO_PeripheralClockControl+0x19c>
			GPIOI_PCLK_DI();
 8000964:	4b06      	ldr	r3, [pc, #24]	; (8000980 <GPIO_PeripheralClockControl+0x1ac>)
 8000966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000968:	4a05      	ldr	r2, [pc, #20]	; (8000980 <GPIO_PeripheralClockControl+0x1ac>)
 800096a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800096e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000970:	bf00      	nop
 8000972:	370c      	adds	r7, #12
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr
 800097c:	40020000 	.word	0x40020000
 8000980:	40023800 	.word	0x40023800
 8000984:	40020400 	.word	0x40020400
 8000988:	40020800 	.word	0x40020800
 800098c:	40020c00 	.word	0x40020c00
 8000990:	40021000 	.word	0x40021000
 8000994:	40021400 	.word	0x40021400
 8000998:	40021800 	.word	0x40021800
 800099c:	40021c00 	.word	0x40021c00
 80009a0:	40022000 	.word	0x40022000

080009a4 <GPIO_Init>:

/*
 * Init and De-init
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b086      	sub	sp, #24
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0; // temp register
 80009ac:	2300      	movs	r3, #0
 80009ae:	617b      	str	r3, [r7, #20]

	// enable the peripheral clock
	GPIO_PeripheralClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	2101      	movs	r1, #1
 80009b6:	4618      	mov	r0, r3
 80009b8:	f7ff ff0c 	bl	80007d4 <GPIO_PeripheralClockControl>

	// 1. configure the mode of gpio pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	795b      	ldrb	r3, [r3, #5]
 80009c0:	2b03      	cmp	r3, #3
 80009c2:	d820      	bhi.n	8000a06 <GPIO_Init+0x62>
	{
		// the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	795b      	ldrb	r3, [r3, #5]
 80009c8:	461a      	mov	r2, r3
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	791b      	ldrb	r3, [r3, #4]
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	fa02 f303 	lsl.w	r3, r2, r3
 80009d4:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clear
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	791b      	ldrb	r3, [r3, #4]
 80009e0:	005b      	lsls	r3, r3, #1
 80009e2:	2103      	movs	r1, #3
 80009e4:	fa01 f303 	lsl.w	r3, r1, r3
 80009e8:	43db      	mvns	r3, r3
 80009ea:	4619      	mov	r1, r3
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	400a      	ands	r2, r1
 80009f2:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;	// setting
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	6819      	ldr	r1, [r3, #0]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	697a      	ldr	r2, [r7, #20]
 8000a00:	430a      	orrs	r2, r1
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	e0c1      	b.n	8000b8a <GPIO_Init+0x1e6>

	}
	else
	{
		// this part will code later (interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	795b      	ldrb	r3, [r3, #5]
 8000a0a:	2b04      	cmp	r3, #4
 8000a0c:	d117      	bne.n	8000a3e <GPIO_Init+0x9a>
		{
			// 1. configure the FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a0e:	4b47      	ldr	r3, [pc, #284]	; (8000b2c <GPIO_Init+0x188>)
 8000a10:	68db      	ldr	r3, [r3, #12]
 8000a12:	687a      	ldr	r2, [r7, #4]
 8000a14:	7912      	ldrb	r2, [r2, #4]
 8000a16:	4611      	mov	r1, r2
 8000a18:	2201      	movs	r2, #1
 8000a1a:	408a      	lsls	r2, r1
 8000a1c:	4611      	mov	r1, r2
 8000a1e:	4a43      	ldr	r2, [pc, #268]	; (8000b2c <GPIO_Init+0x188>)
 8000a20:	430b      	orrs	r3, r1
 8000a22:	60d3      	str	r3, [r2, #12]
			// Clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a24:	4b41      	ldr	r3, [pc, #260]	; (8000b2c <GPIO_Init+0x188>)
 8000a26:	689b      	ldr	r3, [r3, #8]
 8000a28:	687a      	ldr	r2, [r7, #4]
 8000a2a:	7912      	ldrb	r2, [r2, #4]
 8000a2c:	4611      	mov	r1, r2
 8000a2e:	2201      	movs	r2, #1
 8000a30:	408a      	lsls	r2, r1
 8000a32:	43d2      	mvns	r2, r2
 8000a34:	4611      	mov	r1, r2
 8000a36:	4a3d      	ldr	r2, [pc, #244]	; (8000b2c <GPIO_Init+0x188>)
 8000a38:	400b      	ands	r3, r1
 8000a3a:	6093      	str	r3, [r2, #8]
 8000a3c:	e035      	b.n	8000aaa <GPIO_Init+0x106>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	795b      	ldrb	r3, [r3, #5]
 8000a42:	2b05      	cmp	r3, #5
 8000a44:	d117      	bne.n	8000a76 <GPIO_Init+0xd2>
		{
			// 1. configure the RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a46:	4b39      	ldr	r3, [pc, #228]	; (8000b2c <GPIO_Init+0x188>)
 8000a48:	689b      	ldr	r3, [r3, #8]
 8000a4a:	687a      	ldr	r2, [r7, #4]
 8000a4c:	7912      	ldrb	r2, [r2, #4]
 8000a4e:	4611      	mov	r1, r2
 8000a50:	2201      	movs	r2, #1
 8000a52:	408a      	lsls	r2, r1
 8000a54:	4611      	mov	r1, r2
 8000a56:	4a35      	ldr	r2, [pc, #212]	; (8000b2c <GPIO_Init+0x188>)
 8000a58:	430b      	orrs	r3, r1
 8000a5a:	6093      	str	r3, [r2, #8]
			// Clear the corresponding FTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a5c:	4b33      	ldr	r3, [pc, #204]	; (8000b2c <GPIO_Init+0x188>)
 8000a5e:	68db      	ldr	r3, [r3, #12]
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	7912      	ldrb	r2, [r2, #4]
 8000a64:	4611      	mov	r1, r2
 8000a66:	2201      	movs	r2, #1
 8000a68:	408a      	lsls	r2, r1
 8000a6a:	43d2      	mvns	r2, r2
 8000a6c:	4611      	mov	r1, r2
 8000a6e:	4a2f      	ldr	r2, [pc, #188]	; (8000b2c <GPIO_Init+0x188>)
 8000a70:	400b      	ands	r3, r1
 8000a72:	60d3      	str	r3, [r2, #12]
 8000a74:	e019      	b.n	8000aaa <GPIO_Init+0x106>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	795b      	ldrb	r3, [r3, #5]
 8000a7a:	2b06      	cmp	r3, #6
 8000a7c:	d115      	bne.n	8000aaa <GPIO_Init+0x106>
		{
			// 1. configure both FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a7e:	4b2b      	ldr	r3, [pc, #172]	; (8000b2c <GPIO_Init+0x188>)
 8000a80:	68db      	ldr	r3, [r3, #12]
 8000a82:	687a      	ldr	r2, [r7, #4]
 8000a84:	7912      	ldrb	r2, [r2, #4]
 8000a86:	4611      	mov	r1, r2
 8000a88:	2201      	movs	r2, #1
 8000a8a:	408a      	lsls	r2, r1
 8000a8c:	4611      	mov	r1, r2
 8000a8e:	4a27      	ldr	r2, [pc, #156]	; (8000b2c <GPIO_Init+0x188>)
 8000a90:	430b      	orrs	r3, r1
 8000a92:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a94:	4b25      	ldr	r3, [pc, #148]	; (8000b2c <GPIO_Init+0x188>)
 8000a96:	689b      	ldr	r3, [r3, #8]
 8000a98:	687a      	ldr	r2, [r7, #4]
 8000a9a:	7912      	ldrb	r2, [r2, #4]
 8000a9c:	4611      	mov	r1, r2
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	408a      	lsls	r2, r1
 8000aa2:	4611      	mov	r1, r2
 8000aa4:	4a21      	ldr	r2, [pc, #132]	; (8000b2c <GPIO_Init+0x188>)
 8000aa6:	430b      	orrs	r3, r1
 8000aa8:	6093      	str	r3, [r2, #8]
		}

		// 2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	791b      	ldrb	r3, [r3, #4]
 8000aae:	089b      	lsrs	r3, r3, #2
 8000ab0:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	791b      	ldrb	r3, [r3, #4]
 8000ab6:	f003 0303 	and.w	r3, r3, #3
 8000aba:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a1b      	ldr	r2, [pc, #108]	; (8000b30 <GPIO_Init+0x18c>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d044      	beq.n	8000b50 <GPIO_Init+0x1ac>
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a1a      	ldr	r2, [pc, #104]	; (8000b34 <GPIO_Init+0x190>)
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d02b      	beq.n	8000b28 <GPIO_Init+0x184>
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a18      	ldr	r2, [pc, #96]	; (8000b38 <GPIO_Init+0x194>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d024      	beq.n	8000b24 <GPIO_Init+0x180>
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4a17      	ldr	r2, [pc, #92]	; (8000b3c <GPIO_Init+0x198>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d01d      	beq.n	8000b20 <GPIO_Init+0x17c>
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a15      	ldr	r2, [pc, #84]	; (8000b40 <GPIO_Init+0x19c>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d016      	beq.n	8000b1c <GPIO_Init+0x178>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4a14      	ldr	r2, [pc, #80]	; (8000b44 <GPIO_Init+0x1a0>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d00f      	beq.n	8000b18 <GPIO_Init+0x174>
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a12      	ldr	r2, [pc, #72]	; (8000b48 <GPIO_Init+0x1a4>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d008      	beq.n	8000b14 <GPIO_Init+0x170>
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a11      	ldr	r2, [pc, #68]	; (8000b4c <GPIO_Init+0x1a8>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d101      	bne.n	8000b10 <GPIO_Init+0x16c>
 8000b0c:	2307      	movs	r3, #7
 8000b0e:	e020      	b.n	8000b52 <GPIO_Init+0x1ae>
 8000b10:	2308      	movs	r3, #8
 8000b12:	e01e      	b.n	8000b52 <GPIO_Init+0x1ae>
 8000b14:	2306      	movs	r3, #6
 8000b16:	e01c      	b.n	8000b52 <GPIO_Init+0x1ae>
 8000b18:	2305      	movs	r3, #5
 8000b1a:	e01a      	b.n	8000b52 <GPIO_Init+0x1ae>
 8000b1c:	2304      	movs	r3, #4
 8000b1e:	e018      	b.n	8000b52 <GPIO_Init+0x1ae>
 8000b20:	2303      	movs	r3, #3
 8000b22:	e016      	b.n	8000b52 <GPIO_Init+0x1ae>
 8000b24:	2302      	movs	r3, #2
 8000b26:	e014      	b.n	8000b52 <GPIO_Init+0x1ae>
 8000b28:	2301      	movs	r3, #1
 8000b2a:	e012      	b.n	8000b52 <GPIO_Init+0x1ae>
 8000b2c:	40013c00 	.word	0x40013c00
 8000b30:	40020000 	.word	0x40020000
 8000b34:	40020400 	.word	0x40020400
 8000b38:	40020800 	.word	0x40020800
 8000b3c:	40020c00 	.word	0x40020c00
 8000b40:	40021000 	.word	0x40021000
 8000b44:	40021400 	.word	0x40021400
 8000b48:	40021800 	.word	0x40021800
 8000b4c:	40021c00 	.word	0x40021c00
 8000b50:	2300      	movs	r3, #0
 8000b52:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000b54:	4b5c      	ldr	r3, [pc, #368]	; (8000cc8 <GPIO_Init+0x324>)
 8000b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b58:	4a5b      	ldr	r2, [pc, #364]	; (8000cc8 <GPIO_Init+0x324>)
 8000b5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b5e:	6453      	str	r3, [r2, #68]	; 0x44
		SYS_CFG->EXTICR[temp1] = portcode << (temp2 * 4);
 8000b60:	7c7a      	ldrb	r2, [r7, #17]
 8000b62:	7cbb      	ldrb	r3, [r7, #18]
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	fa02 f103 	lsl.w	r1, r2, r3
 8000b6a:	4a58      	ldr	r2, [pc, #352]	; (8000ccc <GPIO_Init+0x328>)
 8000b6c:	7cfb      	ldrb	r3, [r7, #19]
 8000b6e:	3302      	adds	r3, #2
 8000b70:	f842 1023 	str.w	r1, [r2, r3, lsl #2]


		// 3. enable the exti interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b74:	4b56      	ldr	r3, [pc, #344]	; (8000cd0 <GPIO_Init+0x32c>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	687a      	ldr	r2, [r7, #4]
 8000b7a:	7912      	ldrb	r2, [r2, #4]
 8000b7c:	4611      	mov	r1, r2
 8000b7e:	2201      	movs	r2, #1
 8000b80:	408a      	lsls	r2, r1
 8000b82:	4611      	mov	r1, r2
 8000b84:	4a52      	ldr	r2, [pc, #328]	; (8000cd0 <GPIO_Init+0x32c>)
 8000b86:	430b      	orrs	r3, r1
 8000b88:	6013      	str	r3, [r2, #0]
	}

	// 2. configure the speed
	temp = 0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	799b      	ldrb	r3, [r3, #6]
 8000b92:	461a      	mov	r2, r3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	791b      	ldrb	r3, [r3, #4]
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clear
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	689a      	ldr	r2, [r3, #8]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	791b      	ldrb	r3, [r3, #4]
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	2103      	movs	r1, #3
 8000bae:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb2:	43db      	mvns	r3, r3
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	400a      	ands	r2, r1
 8000bbc:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;	// setting
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	6899      	ldr	r1, [r3, #8]
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	697a      	ldr	r2, [r7, #20]
 8000bca:	430a      	orrs	r2, r1
 8000bcc:	609a      	str	r2, [r3, #8]

	// 3. configure the pupd settings
	temp = 0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	79db      	ldrb	r3, [r3, #7]
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	791b      	ldrb	r3, [r3, #4]
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	fa02 f303 	lsl.w	r3, r2, r3
 8000be2:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clear
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	68da      	ldr	r2, [r3, #12]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	791b      	ldrb	r3, [r3, #4]
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	2103      	movs	r1, #3
 8000bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf6:	43db      	mvns	r3, r3
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	400a      	ands	r2, r1
 8000c00:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;	// setting
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	68d9      	ldr	r1, [r3, #12]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	697a      	ldr	r2, [r7, #20]
 8000c0e:	430a      	orrs	r2, r1
 8000c10:	60da      	str	r2, [r3, #12]


	// 4. configure the optype
	temp = 0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	7a1b      	ldrb	r3, [r3, #8]
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	791b      	ldrb	r3, [r3, #4]
 8000c20:	fa02 f303 	lsl.w	r3, r2, r3
 8000c24:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x01 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clear
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	685a      	ldr	r2, [r3, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	791b      	ldrb	r3, [r3, #4]
 8000c30:	4619      	mov	r1, r3
 8000c32:	2301      	movs	r3, #1
 8000c34:	408b      	lsls	r3, r1
 8000c36:	43db      	mvns	r3, r3
 8000c38:	4619      	mov	r1, r3
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	400a      	ands	r2, r1
 8000c40:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;	// setting
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	6859      	ldr	r1, [r3, #4]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	697a      	ldr	r2, [r7, #20]
 8000c4e:	430a      	orrs	r2, r1
 8000c50:	605a      	str	r2, [r3, #4]

	// 5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	795b      	ldrb	r3, [r3, #5]
 8000c56:	2b02      	cmp	r3, #2
 8000c58:	d131      	bne.n	8000cbe <GPIO_Init+0x31a>
	{
		// configure the alt function register
		uint8_t temp1,temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	791b      	ldrb	r3, [r3, #4]
 8000c5e:	08db      	lsrs	r3, r3, #3
 8000c60:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	791b      	ldrb	r3, [r3, #4]
 8000c66:	f003 0307 	and.w	r3, r3, #7
 8000c6a:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2)); // clearing
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	7c3a      	ldrb	r2, [r7, #16]
 8000c72:	3208      	adds	r2, #8
 8000c74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000c78:	7bfb      	ldrb	r3, [r7, #15]
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	220f      	movs	r2, #15
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	43db      	mvns	r3, r3
 8000c84:	4618      	mov	r0, r3
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	7c3a      	ldrb	r2, [r7, #16]
 8000c8c:	4001      	ands	r1, r0
 8000c8e:	3208      	adds	r2, #8
 8000c90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2); // setting
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	7c3a      	ldrb	r2, [r7, #16]
 8000c9a:	3208      	adds	r2, #8
 8000c9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	7a5b      	ldrb	r3, [r3, #9]
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	7bfb      	ldrb	r3, [r7, #15]
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	4618      	mov	r0, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	7c3a      	ldrb	r2, [r7, #16]
 8000cb6:	4301      	orrs	r1, r0
 8000cb8:	3208      	adds	r2, #8
 8000cba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8000cbe:	bf00      	nop
 8000cc0:	3718      	adds	r7, #24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40023800 	.word	0x40023800
 8000ccc:	40013800 	.word	0x40013800
 8000cd0:	40013c00 	.word	0x40013c00

08000cd4 <GPIO_ReadFromInputPin>:

/*
 * Data read and write
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	460b      	mov	r3, r1
 8000cde:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	691a      	ldr	r2, [r3, #16]
 8000ce4:	78fb      	ldrb	r3, [r7, #3]
 8000ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	f003 0301 	and.w	r3, r3, #1
 8000cf0:	73fb      	strb	r3, [r7, #15]
	return value;
 8000cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3714      	adds	r7, #20
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <RCC_GETPLLOutputClock>:

uint16_t AHB_PreScalar[8] = {2, 4, 8, 16, 64, 128, 256, 512};
uint16_t APB1_PreScalar[4] = {2, 4, 8, 16};

uint32_t RCC_GETPLLOutputClock(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
	return 160000000; // dummy value to be implemented
 8000d04:	4b02      	ldr	r3, [pc, #8]	; (8000d10 <RCC_GETPLLOutputClock+0x10>)
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	09896800 	.word	0x09896800

08000d14 <RCC_GetPCLK1Value>:


uint32_t RCC_GetPCLK1Value(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
	uint32_t pclk1, SystemClk;

	uint8_t clkSrc, temp, ahbp, apb1;
	clkSrc = ((RCC->CFGR >> 2) & 0x03);
 8000d1a:	4b26      	ldr	r3, [pc, #152]	; (8000db4 <RCC_GetPCLK1Value+0xa0>)
 8000d1c:	689b      	ldr	r3, [r3, #8]
 8000d1e:	089b      	lsrs	r3, r3, #2
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	f003 0303 	and.w	r3, r3, #3
 8000d26:	727b      	strb	r3, [r7, #9]

	if(clkSrc == 0)
 8000d28:	7a7b      	ldrb	r3, [r7, #9]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d102      	bne.n	8000d34 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 8000d2e:	4b22      	ldr	r3, [pc, #136]	; (8000db8 <RCC_GetPCLK1Value+0xa4>)
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	e00b      	b.n	8000d4c <RCC_GetPCLK1Value+0x38>
	}
	else if(clkSrc == 1)
 8000d34:	7a7b      	ldrb	r3, [r7, #9]
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d102      	bne.n	8000d40 <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 8000d3a:	4b20      	ldr	r3, [pc, #128]	; (8000dbc <RCC_GetPCLK1Value+0xa8>)
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	e005      	b.n	8000d4c <RCC_GetPCLK1Value+0x38>
	}
	else if(clkSrc == 2)
 8000d40:	7a7b      	ldrb	r3, [r7, #9]
 8000d42:	2b02      	cmp	r3, #2
 8000d44:	d102      	bne.n	8000d4c <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GETPLLOutputClock();
 8000d46:	f7ff ffdb 	bl	8000d00 <RCC_GETPLLOutputClock>
 8000d4a:	60f8      	str	r0, [r7, #12]
	}

	// ahbp
	temp = ((RCC->CFGR >> 4) & 0xF);
 8000d4c:	4b19      	ldr	r3, [pc, #100]	; (8000db4 <RCC_GetPCLK1Value+0xa0>)
 8000d4e:	689b      	ldr	r3, [r3, #8]
 8000d50:	091b      	lsrs	r3, r3, #4
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	f003 030f 	and.w	r3, r3, #15
 8000d58:	723b      	strb	r3, [r7, #8]
	if(temp < 8)
 8000d5a:	7a3b      	ldrb	r3, [r7, #8]
 8000d5c:	2b07      	cmp	r3, #7
 8000d5e:	d802      	bhi.n	8000d66 <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 8000d60:	2301      	movs	r3, #1
 8000d62:	72fb      	strb	r3, [r7, #11]
 8000d64:	e005      	b.n	8000d72 <RCC_GetPCLK1Value+0x5e>
	}
	else
	{
		ahbp = AHB_PreScalar[temp - 8];
 8000d66:	7a3b      	ldrb	r3, [r7, #8]
 8000d68:	3b08      	subs	r3, #8
 8000d6a:	4a15      	ldr	r2, [pc, #84]	; (8000dc0 <RCC_GetPCLK1Value+0xac>)
 8000d6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d70:	72fb      	strb	r3, [r7, #11]
	}

	// apb1
	temp = ((RCC->CFGR >> 10) & 0x7);
 8000d72:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <RCC_GetPCLK1Value+0xa0>)
 8000d74:	689b      	ldr	r3, [r3, #8]
 8000d76:	0a9b      	lsrs	r3, r3, #10
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	f003 0307 	and.w	r3, r3, #7
 8000d7e:	723b      	strb	r3, [r7, #8]
	if(temp < 4)
 8000d80:	7a3b      	ldrb	r3, [r7, #8]
 8000d82:	2b03      	cmp	r3, #3
 8000d84:	d802      	bhi.n	8000d8c <RCC_GetPCLK1Value+0x78>
	{
		apb1 = 1;
 8000d86:	2301      	movs	r3, #1
 8000d88:	72bb      	strb	r3, [r7, #10]
 8000d8a:	e005      	b.n	8000d98 <RCC_GetPCLK1Value+0x84>
	}
	else
	{
		apb1 = APB1_PreScalar[temp - 4];
 8000d8c:	7a3b      	ldrb	r3, [r7, #8]
 8000d8e:	3b04      	subs	r3, #4
 8000d90:	4a0c      	ldr	r2, [pc, #48]	; (8000dc4 <RCC_GetPCLK1Value+0xb0>)
 8000d92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d96:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = (SystemClk / ahbp) / apb1;
 8000d98:	7afb      	ldrb	r3, [r7, #11]
 8000d9a:	68fa      	ldr	r2, [r7, #12]
 8000d9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000da0:	7abb      	ldrb	r3, [r7, #10]
 8000da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000da6:	607b      	str	r3, [r7, #4]

	return pclk1;
 8000da8:	687b      	ldr	r3, [r7, #4]
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3710      	adds	r7, #16
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40023800 	.word	0x40023800
 8000db8:	00f42400 	.word	0x00f42400
 8000dbc:	007a1200 	.word	0x007a1200
 8000dc0:	20000400 	.word	0x20000400
 8000dc4:	20000410 	.word	0x20000410

08000dc8 <RCC_GetPCLK2Value>:

uint32_t RCC_GetPCLK2Value(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
	uint32_t pclk2, SystemClk;

	uint8_t clkSrc, temp, ahbp, apb2;
	clkSrc = ((RCC->CFGR >> 2) & 0x03);
 8000dce:	4b26      	ldr	r3, [pc, #152]	; (8000e68 <RCC_GetPCLK2Value+0xa0>)
 8000dd0:	689b      	ldr	r3, [r3, #8]
 8000dd2:	089b      	lsrs	r3, r3, #2
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	f003 0303 	and.w	r3, r3, #3
 8000dda:	727b      	strb	r3, [r7, #9]

	if(clkSrc == 0)
 8000ddc:	7a7b      	ldrb	r3, [r7, #9]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d102      	bne.n	8000de8 <RCC_GetPCLK2Value+0x20>
	{
		SystemClk = 16000000;
 8000de2:	4b22      	ldr	r3, [pc, #136]	; (8000e6c <RCC_GetPCLK2Value+0xa4>)
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	e00b      	b.n	8000e00 <RCC_GetPCLK2Value+0x38>
	}
	else if(clkSrc == 1)
 8000de8:	7a7b      	ldrb	r3, [r7, #9]
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d102      	bne.n	8000df4 <RCC_GetPCLK2Value+0x2c>
	{
		SystemClk = 8000000;
 8000dee:	4b20      	ldr	r3, [pc, #128]	; (8000e70 <RCC_GetPCLK2Value+0xa8>)
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	e005      	b.n	8000e00 <RCC_GetPCLK2Value+0x38>
	}
	else if(clkSrc == 2)
 8000df4:	7a7b      	ldrb	r3, [r7, #9]
 8000df6:	2b02      	cmp	r3, #2
 8000df8:	d102      	bne.n	8000e00 <RCC_GetPCLK2Value+0x38>
	{
		SystemClk = RCC_GETPLLOutputClock();
 8000dfa:	f7ff ff81 	bl	8000d00 <RCC_GETPLLOutputClock>
 8000dfe:	60f8      	str	r0, [r7, #12]
	}

	// ahbp
	temp = ((RCC->CFGR >> 4) & 0xF);
 8000e00:	4b19      	ldr	r3, [pc, #100]	; (8000e68 <RCC_GetPCLK2Value+0xa0>)
 8000e02:	689b      	ldr	r3, [r3, #8]
 8000e04:	091b      	lsrs	r3, r3, #4
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	f003 030f 	and.w	r3, r3, #15
 8000e0c:	723b      	strb	r3, [r7, #8]
	if(temp < 8)
 8000e0e:	7a3b      	ldrb	r3, [r7, #8]
 8000e10:	2b07      	cmp	r3, #7
 8000e12:	d802      	bhi.n	8000e1a <RCC_GetPCLK2Value+0x52>
	{
		ahbp = 1;
 8000e14:	2301      	movs	r3, #1
 8000e16:	72fb      	strb	r3, [r7, #11]
 8000e18:	e005      	b.n	8000e26 <RCC_GetPCLK2Value+0x5e>
	}
	else
	{
		ahbp = AHB_PreScalar[temp - 8];
 8000e1a:	7a3b      	ldrb	r3, [r7, #8]
 8000e1c:	3b08      	subs	r3, #8
 8000e1e:	4a15      	ldr	r2, [pc, #84]	; (8000e74 <RCC_GetPCLK2Value+0xac>)
 8000e20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e24:	72fb      	strb	r3, [r7, #11]
	}

	// apb2
	temp = ((RCC->CFGR >> 13) & 0x7);
 8000e26:	4b10      	ldr	r3, [pc, #64]	; (8000e68 <RCC_GetPCLK2Value+0xa0>)
 8000e28:	689b      	ldr	r3, [r3, #8]
 8000e2a:	0b5b      	lsrs	r3, r3, #13
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	f003 0307 	and.w	r3, r3, #7
 8000e32:	723b      	strb	r3, [r7, #8]
	if(temp < 4)
 8000e34:	7a3b      	ldrb	r3, [r7, #8]
 8000e36:	2b03      	cmp	r3, #3
 8000e38:	d802      	bhi.n	8000e40 <RCC_GetPCLK2Value+0x78>
	{
		apb2 = 1;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	72bb      	strb	r3, [r7, #10]
 8000e3e:	e005      	b.n	8000e4c <RCC_GetPCLK2Value+0x84>
	}
	else
	{
		apb2 = APB1_PreScalar[temp - 4];
 8000e40:	7a3b      	ldrb	r3, [r7, #8]
 8000e42:	3b04      	subs	r3, #4
 8000e44:	4a0c      	ldr	r2, [pc, #48]	; (8000e78 <RCC_GetPCLK2Value+0xb0>)
 8000e46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e4a:	72bb      	strb	r3, [r7, #10]
	}

	pclk2 = (SystemClk / ahbp) / apb2;
 8000e4c:	7afb      	ldrb	r3, [r7, #11]
 8000e4e:	68fa      	ldr	r2, [r7, #12]
 8000e50:	fbb2 f2f3 	udiv	r2, r2, r3
 8000e54:	7abb      	ldrb	r3, [r7, #10]
 8000e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e5a:	607b      	str	r3, [r7, #4]

	return pclk2;
 8000e5c:	687b      	ldr	r3, [r7, #4]
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3710      	adds	r7, #16
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40023800 	.word	0x40023800
 8000e6c:	00f42400 	.word	0x00f42400
 8000e70:	007a1200 	.word	0x007a1200
 8000e74:	20000400 	.word	0x20000400
 8000e78:	20000410 	.word	0x20000410

08000e7c <__libc_init_array>:
 8000e7c:	b570      	push	{r4, r5, r6, lr}
 8000e7e:	4d0d      	ldr	r5, [pc, #52]	; (8000eb4 <__libc_init_array+0x38>)
 8000e80:	4c0d      	ldr	r4, [pc, #52]	; (8000eb8 <__libc_init_array+0x3c>)
 8000e82:	1b64      	subs	r4, r4, r5
 8000e84:	10a4      	asrs	r4, r4, #2
 8000e86:	2600      	movs	r6, #0
 8000e88:	42a6      	cmp	r6, r4
 8000e8a:	d109      	bne.n	8000ea0 <__libc_init_array+0x24>
 8000e8c:	4d0b      	ldr	r5, [pc, #44]	; (8000ebc <__libc_init_array+0x40>)
 8000e8e:	4c0c      	ldr	r4, [pc, #48]	; (8000ec0 <__libc_init_array+0x44>)
 8000e90:	f000 f818 	bl	8000ec4 <_init>
 8000e94:	1b64      	subs	r4, r4, r5
 8000e96:	10a4      	asrs	r4, r4, #2
 8000e98:	2600      	movs	r6, #0
 8000e9a:	42a6      	cmp	r6, r4
 8000e9c:	d105      	bne.n	8000eaa <__libc_init_array+0x2e>
 8000e9e:	bd70      	pop	{r4, r5, r6, pc}
 8000ea0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ea4:	4798      	blx	r3
 8000ea6:	3601      	adds	r6, #1
 8000ea8:	e7ee      	b.n	8000e88 <__libc_init_array+0xc>
 8000eaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8000eae:	4798      	blx	r3
 8000eb0:	3601      	adds	r6, #1
 8000eb2:	e7f2      	b.n	8000e9a <__libc_init_array+0x1e>
 8000eb4:	08000edc 	.word	0x08000edc
 8000eb8:	08000edc 	.word	0x08000edc
 8000ebc:	08000edc 	.word	0x08000edc
 8000ec0:	08000ee0 	.word	0x08000ee0

08000ec4 <_init>:
 8000ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ec6:	bf00      	nop
 8000ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eca:	bc08      	pop	{r3}
 8000ecc:	469e      	mov	lr, r3
 8000ece:	4770      	bx	lr

08000ed0 <_fini>:
 8000ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ed2:	bf00      	nop
 8000ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ed6:	bc08      	pop	{r3}
 8000ed8:	469e      	mov	lr, r3
 8000eda:	4770      	bx	lr
