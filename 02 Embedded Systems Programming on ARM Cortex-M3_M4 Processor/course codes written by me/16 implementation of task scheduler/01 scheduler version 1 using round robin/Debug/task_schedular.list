
task_schedular.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001058  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08001200  08001200  00011200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080012c4  080012c4  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080012c4  080012c4  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080012c4  080012c4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080012c4  080012c4  000112c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080012c8  080012c8  000112c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080012cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          0000004c  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000c0  200000c0  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002786  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000079e  00000000  00000000  0002282a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001e0  00000000  00000000  00022fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000198  00000000  00000000  000231a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002d30  00000000  00000000  00023340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000019b4  00000000  00000000  00026070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009c34  00000000  00000000  00027a24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00031658  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000cbc  00000000  00000000  000316ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000074 	.word	0x20000074
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080011e8 	.word	0x080011e8

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000078 	.word	0x20000078
 80001e4:	080011e8 	.word	0x080011e8

080001e8 <delay>:
#include "led.h"



void delay(uint32_t count)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b085      	sub	sp, #20
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
  for(uint32_t i = 0 ; i < count ; i++);
 80001f0:	2300      	movs	r3, #0
 80001f2:	60fb      	str	r3, [r7, #12]
 80001f4:	e002      	b.n	80001fc <delay+0x14>
 80001f6:	68fb      	ldr	r3, [r7, #12]
 80001f8:	3301      	adds	r3, #1
 80001fa:	60fb      	str	r3, [r7, #12]
 80001fc:	68fa      	ldr	r2, [r7, #12]
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	429a      	cmp	r2, r3
 8000202:	d3f8      	bcc.n	80001f6 <delay+0xe>
}
 8000204:	bf00      	nop
 8000206:	bf00      	nop
 8000208:	3714      	adds	r7, #20
 800020a:	46bd      	mov	sp, r7
 800020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000210:	4770      	bx	lr
	...

08000214 <led_init_all>:

void led_init_all(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b082      	sub	sp, #8
 8000218:	af00      	add	r7, sp, #0

	uint32_t *pRccAhb1enr = (uint32_t*)0x40023830;
 800021a:	4b19      	ldr	r3, [pc, #100]	; (8000280 <led_init_all+0x6c>)
 800021c:	607b      	str	r3, [r7, #4]
	uint32_t *pGpiodModeReg = (uint32_t*)0x40020C00;
 800021e:	4b19      	ldr	r3, [pc, #100]	; (8000284 <led_init_all+0x70>)
 8000220:	603b      	str	r3, [r7, #0]


	*pRccAhb1enr |= ( 1 << 3);
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	f043 0208 	orr.w	r2, r3, #8
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	601a      	str	r2, [r3, #0]
	//configure LED_GREEN
	*pGpiodModeReg |= ( 1 << (2 * LED_GREEN));
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8000236:	683b      	ldr	r3, [r7, #0]
 8000238:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_ORANGE));
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8000242:	683b      	ldr	r3, [r7, #0]
 8000244:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_RED));
 8000246:	683b      	ldr	r3, [r7, #0]
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_BLUE));
 8000252:	683b      	ldr	r3, [r7, #0]
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800025a:	683b      	ldr	r3, [r7, #0]
 800025c:	601a      	str	r2, [r3, #0]
	*pGpioOpTypeReg |= ( 1 << (2 * LED_ORANGE));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_RED));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_BLUE));
#endif

    led_off(LED_GREEN);
 800025e:	200c      	movs	r0, #12
 8000260:	f000 f82a 	bl	80002b8 <led_off>
    led_off(LED_ORANGE);
 8000264:	200d      	movs	r0, #13
 8000266:	f000 f827 	bl	80002b8 <led_off>
    led_off(LED_RED);
 800026a:	200e      	movs	r0, #14
 800026c:	f000 f824 	bl	80002b8 <led_off>
    led_off(LED_BLUE);
 8000270:	200f      	movs	r0, #15
 8000272:	f000 f821 	bl	80002b8 <led_off>



}
 8000276:	bf00      	nop
 8000278:	3708      	adds	r7, #8
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	40023830 	.word	0x40023830
 8000284:	40020c00 	.word	0x40020c00

08000288 <led_on>:

void led_on(uint8_t led_no)
{
 8000288:	b480      	push	{r7}
 800028a:	b085      	sub	sp, #20
 800028c:	af00      	add	r7, sp, #0
 800028e:	4603      	mov	r3, r0
 8000290:	71fb      	strb	r3, [r7, #7]
  uint32_t *pGpiodDataReg = (uint32_t*)0x40020C14;
 8000292:	4b08      	ldr	r3, [pc, #32]	; (80002b4 <led_on+0x2c>)
 8000294:	60fb      	str	r3, [r7, #12]
  *pGpiodDataReg |= ( 1 << led_no);
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	79fa      	ldrb	r2, [r7, #7]
 800029c:	2101      	movs	r1, #1
 800029e:	fa01 f202 	lsl.w	r2, r1, r2
 80002a2:	431a      	orrs	r2, r3
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	601a      	str	r2, [r3, #0]

}
 80002a8:	bf00      	nop
 80002aa:	3714      	adds	r7, #20
 80002ac:	46bd      	mov	sp, r7
 80002ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b2:	4770      	bx	lr
 80002b4:	40020c14 	.word	0x40020c14

080002b8 <led_off>:

void led_off(uint8_t led_no)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b085      	sub	sp, #20
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	71fb      	strb	r3, [r7, #7]
	  uint32_t *pGpiodDataReg = (uint32_t*)0x40020C14;
 80002c2:	4b09      	ldr	r3, [pc, #36]	; (80002e8 <led_off+0x30>)
 80002c4:	60fb      	str	r3, [r7, #12]
	  *pGpiodDataReg &= ~( 1 << led_no);
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	79fa      	ldrb	r2, [r7, #7]
 80002cc:	2101      	movs	r1, #1
 80002ce:	fa01 f202 	lsl.w	r2, r1, r2
 80002d2:	43d2      	mvns	r2, r2
 80002d4:	401a      	ands	r2, r3
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	601a      	str	r2, [r3, #0]

}
 80002da:	bf00      	nop
 80002dc:	3714      	adds	r7, #20
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	40020c14 	.word	0x40020c14

080002ec <main>:
uint32_t psp_of_task[MAX_TASK] = {T1_STACK_START, T2_STACK_START, T3_STACK_START, T4_STACK_START};
uint32_t task_handlers[MAX_TASK];
uint8_t current_task = 0; // task1 is running

int main(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	enable_processor_faults();
 80002f0:	f000 f90e 	bl	8000510 <enable_processor_faults>

	init_scheduler_stack(SCHED_STACK_START);
 80002f4:	480d      	ldr	r0, [pc, #52]	; (800032c <main+0x40>)
 80002f6:	f000 f89d 	bl	8000434 <init_scheduler_stack>

	task_handlers[0] = (uint32_t)task1_handler;
 80002fa:	4a0d      	ldr	r2, [pc, #52]	; (8000330 <main+0x44>)
 80002fc:	4b0d      	ldr	r3, [pc, #52]	; (8000334 <main+0x48>)
 80002fe:	601a      	str	r2, [r3, #0]
	task_handlers[1] = (uint32_t)task2_handler;
 8000300:	4a0d      	ldr	r2, [pc, #52]	; (8000338 <main+0x4c>)
 8000302:	4b0c      	ldr	r3, [pc, #48]	; (8000334 <main+0x48>)
 8000304:	605a      	str	r2, [r3, #4]
	task_handlers[2] = (uint32_t)task3_handler;
 8000306:	4a0d      	ldr	r2, [pc, #52]	; (800033c <main+0x50>)
 8000308:	4b0a      	ldr	r3, [pc, #40]	; (8000334 <main+0x48>)
 800030a:	609a      	str	r2, [r3, #8]
	task_handlers[3] = (uint32_t)task4_handler;
 800030c:	4a0c      	ldr	r2, [pc, #48]	; (8000340 <main+0x54>)
 800030e:	4b09      	ldr	r3, [pc, #36]	; (8000334 <main+0x48>)
 8000310:	60da      	str	r2, [r3, #12]

	init_task_stack();
 8000312:	f000 f895 	bl	8000440 <init_task_stack>

	led_init_all();
 8000316:	f7ff ff7d 	bl	8000214 <led_init_all>

	init_systick_timer(TICK_HZ);
 800031a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800031e:	f000 f851 	bl	80003c4 <init_systick_timer>

	switch_sp_to_psp();
 8000322:	f000 f953 	bl	80005cc <switch_sp_to_psp>

	task1_handler();
 8000326:	f000 f825 	bl	8000374 <task1_handler>

    /* Loop forever */
	for(;;);
 800032a:	e7fe      	b.n	800032a <main+0x3e>
 800032c:	2001f000 	.word	0x2001f000
 8000330:	08000375 	.word	0x08000375
 8000334:	200000a0 	.word	0x200000a0
 8000338:	08000389 	.word	0x08000389
 800033c:	0800039d 	.word	0x0800039d
 8000340:	080003b1 	.word	0x080003b1

08000344 <software_delay>:
}

void software_delay(uint8_t led_no, uint32_t count_delay)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b082      	sub	sp, #8
 8000348:	af00      	add	r7, sp, #0
 800034a:	4603      	mov	r3, r0
 800034c:	6039      	str	r1, [r7, #0]
 800034e:	71fb      	strb	r3, [r7, #7]
	led_on(led_no);
 8000350:	79fb      	ldrb	r3, [r7, #7]
 8000352:	4618      	mov	r0, r3
 8000354:	f7ff ff98 	bl	8000288 <led_on>
	delay(count_delay);
 8000358:	6838      	ldr	r0, [r7, #0]
 800035a:	f7ff ff45 	bl	80001e8 <delay>
	led_off(led_no);
 800035e:	79fb      	ldrb	r3, [r7, #7]
 8000360:	4618      	mov	r0, r3
 8000362:	f7ff ffa9 	bl	80002b8 <led_off>
	delay(count_delay);
 8000366:	6838      	ldr	r0, [r7, #0]
 8000368:	f7ff ff3e 	bl	80001e8 <delay>
}
 800036c:	bf00      	nop
 800036e:	3708      	adds	r7, #8
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}

08000374 <task1_handler>:

void task1_handler(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
	while(1)
	{
		software_delay(LED_GREEN,DELAY_COUNT_1S);
 8000378:	4902      	ldr	r1, [pc, #8]	; (8000384 <task1_handler+0x10>)
 800037a:	200c      	movs	r0, #12
 800037c:	f7ff ffe2 	bl	8000344 <software_delay>
 8000380:	e7fa      	b.n	8000378 <task1_handler+0x4>
 8000382:	bf00      	nop
 8000384:	001312d0 	.word	0x001312d0

08000388 <task2_handler>:
	}
}

void task2_handler(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
	while(1)
	{
		software_delay(LED_ORANGE,DELAY_COUNT_500MS);
 800038c:	4902      	ldr	r1, [pc, #8]	; (8000398 <task2_handler+0x10>)
 800038e:	200d      	movs	r0, #13
 8000390:	f7ff ffd8 	bl	8000344 <software_delay>
 8000394:	e7fa      	b.n	800038c <task2_handler+0x4>
 8000396:	bf00      	nop
 8000398:	00098968 	.word	0x00098968

0800039c <task3_handler>:
	}
}

void task3_handler(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
	while(1)
	{
		software_delay(LED_BLUE,DELAY_COUNT_250MS);
 80003a0:	4902      	ldr	r1, [pc, #8]	; (80003ac <task3_handler+0x10>)
 80003a2:	200f      	movs	r0, #15
 80003a4:	f7ff ffce 	bl	8000344 <software_delay>
 80003a8:	e7fa      	b.n	80003a0 <task3_handler+0x4>
 80003aa:	bf00      	nop
 80003ac:	0004c4b4 	.word	0x0004c4b4

080003b0 <task4_handler>:
	}
}

void task4_handler(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
	while(1)
	{
		software_delay(LED_RED,DELAY_COUNT_125MS);
 80003b4:	4902      	ldr	r1, [pc, #8]	; (80003c0 <task4_handler+0x10>)
 80003b6:	200e      	movs	r0, #14
 80003b8:	f7ff ffc4 	bl	8000344 <software_delay>
 80003bc:	e7fa      	b.n	80003b4 <task4_handler+0x4>
 80003be:	bf00      	nop
 80003c0:	0002625a 	.word	0x0002625a

080003c4 <init_systick_timer>:
	}
}

void init_systick_timer(uint32_t tick_hz)
{
 80003c4:	b480      	push	{r7}
 80003c6:	b087      	sub	sp, #28
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
	uint32_t count_value = (SYSTICK_TIM_CLK / tick_hz) - 1;
 80003cc:	4a16      	ldr	r2, [pc, #88]	; (8000428 <init_systick_timer+0x64>)
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80003d4:	3b01      	subs	r3, #1
 80003d6:	617b      	str	r3, [r7, #20]
	uint32_t *pSRVR = (uint32_t*) SYST_RVR;
 80003d8:	4b14      	ldr	r3, [pc, #80]	; (800042c <init_systick_timer+0x68>)
 80003da:	613b      	str	r3, [r7, #16]
	uint32_t *pSCSR = (uint32_t*) SYST_CSR;
 80003dc:	4b14      	ldr	r3, [pc, #80]	; (8000430 <init_systick_timer+0x6c>)
 80003de:	60fb      	str	r3, [r7, #12]

	// clear the value of SVR
	*pSRVR &= ~(0x00FFFFFF);
 80003e0:	693b      	ldr	r3, [r7, #16]
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 80003e8:	693b      	ldr	r3, [r7, #16]
 80003ea:	601a      	str	r2, [r3, #0]

	// load the value into SVR
	*pSRVR |= count_value;
 80003ec:	693b      	ldr	r3, [r7, #16]
 80003ee:	681a      	ldr	r2, [r3, #0]
 80003f0:	697b      	ldr	r3, [r7, #20]
 80003f2:	431a      	orrs	r2, r3
 80003f4:	693b      	ldr	r3, [r7, #16]
 80003f6:	601a      	str	r2, [r3, #0]

	// do some settings
	*pSCSR |= (1 << 1); // enable the systic exception request
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	f043 0202 	orr.w	r2, r3, #2
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	601a      	str	r2, [r3, #0]
	*pSCSR |= (1 << 2); // indicates the clock source, processor clock source
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	f043 0204 	orr.w	r2, r3, #4
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	601a      	str	r2, [r3, #0]

	// enable the systic
	*pSCSR |= (1 << 0); // enable the counter
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	f043 0201 	orr.w	r2, r3, #1
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	601a      	str	r2, [r3, #0]

}
 800041c:	bf00      	nop
 800041e:	371c      	adds	r7, #28
 8000420:	46bd      	mov	sp, r7
 8000422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000426:	4770      	bx	lr
 8000428:	00f42400 	.word	0x00f42400
 800042c:	e000e014 	.word	0xe000e014
 8000430:	e000e010 	.word	0xe000e010

08000434 <init_scheduler_stack>:

__attribute__((naked)) void init_scheduler_stack(uint32_t sched_top_of_stack)
{
 8000434:	4603      	mov	r3, r0
	//__asm volatile("MSR MSP,R0");
	__asm volatile("MSR MSP,%0": :"r"(sched_top_of_stack));
 8000436:	f383 8808 	msr	MSP, r3
	__asm volatile("BX LR");
 800043a:	4770      	bx	lr
}
 800043c:	bf00      	nop
	...

08000440 <init_task_stack>:


void init_task_stack(void)
{
 8000440:	b480      	push	{r7}
 8000442:	b085      	sub	sp, #20
 8000444:	af00      	add	r7, sp, #0
	uint32_t *pPSP;
	for(int i = 0; i < MAX_TASK; i++)
 8000446:	2300      	movs	r3, #0
 8000448:	60bb      	str	r3, [r7, #8]
 800044a:	e032      	b.n	80004b2 <init_task_stack+0x72>
	{
		pPSP = (uint32_t*)psp_of_task[i];
 800044c:	4a1e      	ldr	r2, [pc, #120]	; (80004c8 <init_task_stack+0x88>)
 800044e:	68bb      	ldr	r3, [r7, #8]
 8000450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000454:	60fb      	str	r3, [r7, #12]

		pPSP--;	// PSR
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	3b04      	subs	r3, #4
 800045a:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_XPSR; // 0x01000000
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000462:	601a      	str	r2, [r3, #0]

		pPSP--;	// PC
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	3b04      	subs	r3, #4
 8000468:	60fb      	str	r3, [r7, #12]
		*pPSP = task_handlers[i];
 800046a:	4a18      	ldr	r2, [pc, #96]	; (80004cc <init_task_stack+0x8c>)
 800046c:	68bb      	ldr	r3, [r7, #8]
 800046e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	601a      	str	r2, [r3, #0]

		pPSP--; //LR
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	3b04      	subs	r3, #4
 800047a:	60fb      	str	r3, [r7, #12]
		*pPSP = 0xFFFFFFFD;
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	f06f 0202 	mvn.w	r2, #2
 8000482:	601a      	str	r2, [r3, #0]

		for(int j = 0; j < 13; j++)
 8000484:	2300      	movs	r3, #0
 8000486:	607b      	str	r3, [r7, #4]
 8000488:	e008      	b.n	800049c <init_task_stack+0x5c>
		{
			pPSP--; // for general purpose registers
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	3b04      	subs	r3, #4
 800048e:	60fb      	str	r3, [r7, #12]
			*pPSP = 0;
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	2200      	movs	r2, #0
 8000494:	601a      	str	r2, [r3, #0]
		for(int j = 0; j < 13; j++)
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	3301      	adds	r3, #1
 800049a:	607b      	str	r3, [r7, #4]
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	2b0c      	cmp	r3, #12
 80004a0:	ddf3      	ble.n	800048a <init_task_stack+0x4a>
		}

		psp_of_task[i] = (uint32_t)pPSP;
 80004a2:	68fa      	ldr	r2, [r7, #12]
 80004a4:	4908      	ldr	r1, [pc, #32]	; (80004c8 <init_task_stack+0x88>)
 80004a6:	68bb      	ldr	r3, [r7, #8]
 80004a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < MAX_TASK; i++)
 80004ac:	68bb      	ldr	r3, [r7, #8]
 80004ae:	3301      	adds	r3, #1
 80004b0:	60bb      	str	r3, [r7, #8]
 80004b2:	68bb      	ldr	r3, [r7, #8]
 80004b4:	2b03      	cmp	r3, #3
 80004b6:	ddc9      	ble.n	800044c <init_task_stack+0xc>

	}
}
 80004b8:	bf00      	nop
 80004ba:	bf00      	nop
 80004bc:	3714      	adds	r7, #20
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop
 80004c8:	20000000 	.word	0x20000000
 80004cc:	200000a0 	.word	0x200000a0

080004d0 <HardFault_Handler>:

void HardFault_Handler(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	printf("Exception : HardFault\n");
 80004d4:	4801      	ldr	r0, [pc, #4]	; (80004dc <HardFault_Handler+0xc>)
 80004d6:	f000 fa2f 	bl	8000938 <puts>
	while(1);
 80004da:	e7fe      	b.n	80004da <HardFault_Handler+0xa>
 80004dc:	08001200 	.word	0x08001200

080004e0 <MemManage_Handler>:
}
void MemManage_Handler(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
	printf("Exception : MemManage\n");
 80004e4:	4801      	ldr	r0, [pc, #4]	; (80004ec <MemManage_Handler+0xc>)
 80004e6:	f000 fa27 	bl	8000938 <puts>
	while(1);
 80004ea:	e7fe      	b.n	80004ea <MemManage_Handler+0xa>
 80004ec:	08001218 	.word	0x08001218

080004f0 <BusFault_Handler>:
}
void BusFault_Handler(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
	printf("Exception : BusFault\n");
 80004f4:	4801      	ldr	r0, [pc, #4]	; (80004fc <BusFault_Handler+0xc>)
 80004f6:	f000 fa1f 	bl	8000938 <puts>
	while(1);
 80004fa:	e7fe      	b.n	80004fa <BusFault_Handler+0xa>
 80004fc:	08001230 	.word	0x08001230

08000500 <UsageFault_Handler>:
}

void UsageFault_Handler(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
	printf("Exception : UsageFault\n");
 8000504:	4801      	ldr	r0, [pc, #4]	; (800050c <UsageFault_Handler+0xc>)
 8000506:	f000 fa17 	bl	8000938 <puts>
	while(1);
 800050a:	e7fe      	b.n	800050a <UsageFault_Handler+0xa>
 800050c:	08001248 	.word	0x08001248

08000510 <enable_processor_faults>:
}


void enable_processor_faults(void)
{
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
	// 1.enable all configurable exceptions like usage fault, mem manage fault, and bus fault
	uint32_t *pSHCSR = (uint32_t*)0xE000ED24;
 8000516:	4b0d      	ldr	r3, [pc, #52]	; (800054c <enable_processor_faults+0x3c>)
 8000518:	607b      	str	r3, [r7, #4]

	*pSHCSR |= (1 << 16); // mem manage
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1 << 17); // bus fault
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1 << 18); // usage fault
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	601a      	str	r2, [r3, #0]

}
 800053e:	bf00      	nop
 8000540:	370c      	adds	r7, #12
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	e000ed24 	.word	0xe000ed24

08000550 <update_next_task>:

void update_next_task(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
	current_task++;
 8000554:	4b08      	ldr	r3, [pc, #32]	; (8000578 <update_next_task+0x28>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	3301      	adds	r3, #1
 800055a:	b2da      	uxtb	r2, r3
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <update_next_task+0x28>)
 800055e:	701a      	strb	r2, [r3, #0]
	current_task %= MAX_TASK;
 8000560:	4b05      	ldr	r3, [pc, #20]	; (8000578 <update_next_task+0x28>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	f003 0303 	and.w	r3, r3, #3
 8000568:	b2da      	uxtb	r2, r3
 800056a:	4b03      	ldr	r3, [pc, #12]	; (8000578 <update_next_task+0x28>)
 800056c:	701a      	strb	r2, [r3, #0]
}
 800056e:	bf00      	nop
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr
 8000578:	20000090 	.word	0x20000090

0800057c <get_psp_value>:

uint32_t get_psp_value(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
	return psp_of_task[current_task];
 8000580:	4b05      	ldr	r3, [pc, #20]	; (8000598 <get_psp_value+0x1c>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	461a      	mov	r2, r3
 8000586:	4b05      	ldr	r3, [pc, #20]	; (800059c <get_psp_value+0x20>)
 8000588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 800058c:	4618      	mov	r0, r3
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	20000090 	.word	0x20000090
 800059c:	20000000 	.word	0x20000000

080005a0 <save_psp_value>:

void save_psp_value(uint32_t current_psp_value)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	psp_of_task[current_task] = current_psp_value;
 80005a8:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <save_psp_value+0x24>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	4619      	mov	r1, r3
 80005ae:	4a06      	ldr	r2, [pc, #24]	; (80005c8 <save_psp_value+0x28>)
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 80005b6:	bf00      	nop
 80005b8:	370c      	adds	r7, #12
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	20000090 	.word	0x20000090
 80005c8:	20000000 	.word	0x20000000

080005cc <switch_sp_to_psp>:
__attribute__((naked)) void switch_sp_to_psp(void)
{
	// 1. initialize the PSP with TASK1 stack start address

	// get the value of psp of current task
	__asm volatile("PUSH {LR}");	// preserve LR which connects back to main()
 80005cc:	b500      	push	{lr}
	__asm volatile("BL get_psp_value");
 80005ce:	f7ff ffd5 	bl	800057c <get_psp_value>
	__asm volatile("MSR PSP,R0");	// the return value will be stored in R0 , initialize psp
 80005d2:	f380 8809 	msr	PSP, r0
	__asm volatile("POP {LR}"); 	// pops back LR value
 80005d6:	f85d eb04 	ldr.w	lr, [sp], #4

	// 2. change SP to PSP using CONTROL register
	__asm volatile("MOV R0,#0x02");
 80005da:	f04f 0002 	mov.w	r0, #2
	__asm volatile("MSR CONTROL,R0");
 80005de:	f380 8814 	msr	CONTROL, r0
	__asm volatile("BX LR");
 80005e2:	4770      	bx	lr

}
 80005e4:	bf00      	nop

080005e6 <SysTick_Handler>:
__attribute__((naked)) void SysTick_Handler(void)
{
	/*save the context of current task*/

	// 1. get the current running task's PSP value
	__asm volatile("MRS R0,PSP");
 80005e6:	f3ef 8009 	mrs	r0, PSP

	// 2. Using that PSP value store SF2 (R4 to R11)
	__asm volatile("STMDB R0!,{R4-R11}");
 80005ea:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	__asm volatile("PUSH {LR}");
 80005ee:	b500      	push	{lr}

	// 3. Save the current value of PSP
	__asm volatile("BL save_psp_value");
 80005f0:	f7ff ffd6 	bl	80005a0 <save_psp_value>

	/*Retrieve the context of next task*/

	// 1. Decide next task to run
	__asm volatile("BL update_next_task");
 80005f4:	f7ff ffac 	bl	8000550 <update_next_task>

	// 2. get its past PSP value
	__asm volatile("BL get_psp_value");
 80005f8:	f7ff ffc0 	bl	800057c <get_psp_value>

	// 3. Using that PSP value retrieve SF2 (R4 to R11)
	__asm volatile("LDMIA R0!,{R4-R11}");
 80005fc:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	// 4. Update PSP and exit
	__asm volatile("MSR PSP,R0");
 8000600:	f380 8809 	msr	PSP, r0

	__asm volatile("POP {LR}");
 8000604:	f85d eb04 	ldr.w	lr, [sp], #4

	__asm volatile("BX LR");
 8000608:	4770      	bx	lr

}
 800060a:	bf00      	nop

0800060c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000616:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <ITM_SendChar+0x48>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4a0e      	ldr	r2, [pc, #56]	; (8000654 <ITM_SendChar+0x48>)
 800061c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000620:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000622:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <ITM_SendChar+0x4c>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4a0c      	ldr	r2, [pc, #48]	; (8000658 <ITM_SendChar+0x4c>)
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800062e:	bf00      	nop
 8000630:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	f003 0301 	and.w	r3, r3, #1
 800063a:	2b00      	cmp	r3, #0
 800063c:	d0f8      	beq.n	8000630 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800063e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	6013      	str	r3, [r2, #0]
}
 8000646:	bf00      	nop
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	e000edfc 	.word	0xe000edfc
 8000658:	e0000e00 	.word	0xe0000e00

0800065c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b086      	sub	sp, #24
 8000660:	af00      	add	r7, sp, #0
 8000662:	60f8      	str	r0, [r7, #12]
 8000664:	60b9      	str	r1, [r7, #8]
 8000666:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000668:	2300      	movs	r3, #0
 800066a:	617b      	str	r3, [r7, #20]
 800066c:	e00a      	b.n	8000684 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800066e:	f3af 8000 	nop.w
 8000672:	4601      	mov	r1, r0
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	1c5a      	adds	r2, r3, #1
 8000678:	60ba      	str	r2, [r7, #8]
 800067a:	b2ca      	uxtb	r2, r1
 800067c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	3301      	adds	r3, #1
 8000682:	617b      	str	r3, [r7, #20]
 8000684:	697a      	ldr	r2, [r7, #20]
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	429a      	cmp	r2, r3
 800068a:	dbf0      	blt.n	800066e <_read+0x12>
	}

return len;
 800068c:	687b      	ldr	r3, [r7, #4]
}
 800068e:	4618      	mov	r0, r3
 8000690:	3718      	adds	r7, #24
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}

08000696 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000696:	b580      	push	{r7, lr}
 8000698:	b086      	sub	sp, #24
 800069a:	af00      	add	r7, sp, #0
 800069c:	60f8      	str	r0, [r7, #12]
 800069e:	60b9      	str	r1, [r7, #8]
 80006a0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006a2:	2300      	movs	r3, #0
 80006a4:	617b      	str	r3, [r7, #20]
 80006a6:	e009      	b.n	80006bc <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	1c5a      	adds	r2, r3, #1
 80006ac:	60ba      	str	r2, [r7, #8]
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff ffab 	bl	800060c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006b6:	697b      	ldr	r3, [r7, #20]
 80006b8:	3301      	adds	r3, #1
 80006ba:	617b      	str	r3, [r7, #20]
 80006bc:	697a      	ldr	r2, [r7, #20]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	dbf1      	blt.n	80006a8 <_write+0x12>
	}
	return len;
 80006c4:	687b      	ldr	r3, [r7, #4]
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	3718      	adds	r7, #24
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}

080006ce <_close>:

int _close(int file)
{
 80006ce:	b480      	push	{r7}
 80006d0:	b083      	sub	sp, #12
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	6078      	str	r0, [r7, #4]
	return -1;
 80006d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006da:	4618      	mov	r0, r3
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr

080006e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006e6:	b480      	push	{r7}
 80006e8:	b083      	sub	sp, #12
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	6078      	str	r0, [r7, #4]
 80006ee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006f6:	605a      	str	r2, [r3, #4]
	return 0;
 80006f8:	2300      	movs	r3, #0
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr

08000706 <_isatty>:

int _isatty(int file)
{
 8000706:	b480      	push	{r7}
 8000708:	b083      	sub	sp, #12
 800070a:	af00      	add	r7, sp, #0
 800070c:	6078      	str	r0, [r7, #4]
	return 1;
 800070e:	2301      	movs	r3, #1
}
 8000710:	4618      	mov	r0, r3
 8000712:	370c      	adds	r7, #12
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr

0800071c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800071c:	b480      	push	{r7}
 800071e:	b085      	sub	sp, #20
 8000720:	af00      	add	r7, sp, #0
 8000722:	60f8      	str	r0, [r7, #12]
 8000724:	60b9      	str	r1, [r7, #8]
 8000726:	607a      	str	r2, [r7, #4]
	return 0;
 8000728:	2300      	movs	r3, #0
}
 800072a:	4618      	mov	r0, r3
 800072c:	3714      	adds	r7, #20
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
	...

08000738 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b086      	sub	sp, #24
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000740:	4a14      	ldr	r2, [pc, #80]	; (8000794 <_sbrk+0x5c>)
 8000742:	4b15      	ldr	r3, [pc, #84]	; (8000798 <_sbrk+0x60>)
 8000744:	1ad3      	subs	r3, r2, r3
 8000746:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000748:	697b      	ldr	r3, [r7, #20]
 800074a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800074c:	4b13      	ldr	r3, [pc, #76]	; (800079c <_sbrk+0x64>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d102      	bne.n	800075a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000754:	4b11      	ldr	r3, [pc, #68]	; (800079c <_sbrk+0x64>)
 8000756:	4a12      	ldr	r2, [pc, #72]	; (80007a0 <_sbrk+0x68>)
 8000758:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800075a:	4b10      	ldr	r3, [pc, #64]	; (800079c <_sbrk+0x64>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	4413      	add	r3, r2
 8000762:	693a      	ldr	r2, [r7, #16]
 8000764:	429a      	cmp	r2, r3
 8000766:	d207      	bcs.n	8000778 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000768:	f000 f846 	bl	80007f8 <__errno>
 800076c:	4603      	mov	r3, r0
 800076e:	220c      	movs	r2, #12
 8000770:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000772:	f04f 33ff 	mov.w	r3, #4294967295
 8000776:	e009      	b.n	800078c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000778:	4b08      	ldr	r3, [pc, #32]	; (800079c <_sbrk+0x64>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800077e:	4b07      	ldr	r3, [pc, #28]	; (800079c <_sbrk+0x64>)
 8000780:	681a      	ldr	r2, [r3, #0]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	4413      	add	r3, r2
 8000786:	4a05      	ldr	r2, [pc, #20]	; (800079c <_sbrk+0x64>)
 8000788:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800078a:	68fb      	ldr	r3, [r7, #12]
}
 800078c:	4618      	mov	r0, r3
 800078e:	3718      	adds	r7, #24
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20020000 	.word	0x20020000
 8000798:	00000400 	.word	0x00000400
 800079c:	20000094 	.word	0x20000094
 80007a0:	200000c0 	.word	0x200000c0

080007a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007a4:	480d      	ldr	r0, [pc, #52]	; (80007dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007a6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80007a8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007ac:	480c      	ldr	r0, [pc, #48]	; (80007e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80007ae:	490d      	ldr	r1, [pc, #52]	; (80007e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007b0:	4a0d      	ldr	r2, [pc, #52]	; (80007e8 <LoopForever+0xe>)
  movs r3, #0
 80007b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007b4:	e002      	b.n	80007bc <LoopCopyDataInit>

080007b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ba:	3304      	adds	r3, #4

080007bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007c0:	d3f9      	bcc.n	80007b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007c2:	4a0a      	ldr	r2, [pc, #40]	; (80007ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80007c4:	4c0a      	ldr	r4, [pc, #40]	; (80007f0 <LoopForever+0x16>)
  movs r3, #0
 80007c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007c8:	e001      	b.n	80007ce <LoopFillZerobss>

080007ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007cc:	3204      	adds	r2, #4

080007ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007d0:	d3fb      	bcc.n	80007ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007d2:	f000 f817 	bl	8000804 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007d6:	f7ff fd89 	bl	80002ec <main>

080007da <LoopForever>:

LoopForever:
    b LoopForever
 80007da:	e7fe      	b.n	80007da <LoopForever>
  ldr   r0, =_estack
 80007dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007e4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80007e8:	080012cc 	.word	0x080012cc
  ldr r2, =_sbss
 80007ec:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80007f0:	200000c0 	.word	0x200000c0

080007f4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007f4:	e7fe      	b.n	80007f4 <ADC_IRQHandler>
	...

080007f8 <__errno>:
 80007f8:	4b01      	ldr	r3, [pc, #4]	; (8000800 <__errno+0x8>)
 80007fa:	6818      	ldr	r0, [r3, #0]
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	20000010 	.word	0x20000010

08000804 <__libc_init_array>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	4d0d      	ldr	r5, [pc, #52]	; (800083c <__libc_init_array+0x38>)
 8000808:	4c0d      	ldr	r4, [pc, #52]	; (8000840 <__libc_init_array+0x3c>)
 800080a:	1b64      	subs	r4, r4, r5
 800080c:	10a4      	asrs	r4, r4, #2
 800080e:	2600      	movs	r6, #0
 8000810:	42a6      	cmp	r6, r4
 8000812:	d109      	bne.n	8000828 <__libc_init_array+0x24>
 8000814:	4d0b      	ldr	r5, [pc, #44]	; (8000844 <__libc_init_array+0x40>)
 8000816:	4c0c      	ldr	r4, [pc, #48]	; (8000848 <__libc_init_array+0x44>)
 8000818:	f000 fce6 	bl	80011e8 <_init>
 800081c:	1b64      	subs	r4, r4, r5
 800081e:	10a4      	asrs	r4, r4, #2
 8000820:	2600      	movs	r6, #0
 8000822:	42a6      	cmp	r6, r4
 8000824:	d105      	bne.n	8000832 <__libc_init_array+0x2e>
 8000826:	bd70      	pop	{r4, r5, r6, pc}
 8000828:	f855 3b04 	ldr.w	r3, [r5], #4
 800082c:	4798      	blx	r3
 800082e:	3601      	adds	r6, #1
 8000830:	e7ee      	b.n	8000810 <__libc_init_array+0xc>
 8000832:	f855 3b04 	ldr.w	r3, [r5], #4
 8000836:	4798      	blx	r3
 8000838:	3601      	adds	r6, #1
 800083a:	e7f2      	b.n	8000822 <__libc_init_array+0x1e>
 800083c:	080012c4 	.word	0x080012c4
 8000840:	080012c4 	.word	0x080012c4
 8000844:	080012c4 	.word	0x080012c4
 8000848:	080012c8 	.word	0x080012c8

0800084c <memset>:
 800084c:	4402      	add	r2, r0
 800084e:	4603      	mov	r3, r0
 8000850:	4293      	cmp	r3, r2
 8000852:	d100      	bne.n	8000856 <memset+0xa>
 8000854:	4770      	bx	lr
 8000856:	f803 1b01 	strb.w	r1, [r3], #1
 800085a:	e7f9      	b.n	8000850 <memset+0x4>

0800085c <_puts_r>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	460e      	mov	r6, r1
 8000860:	4605      	mov	r5, r0
 8000862:	b118      	cbz	r0, 800086c <_puts_r+0x10>
 8000864:	6983      	ldr	r3, [r0, #24]
 8000866:	b90b      	cbnz	r3, 800086c <_puts_r+0x10>
 8000868:	f000 fa48 	bl	8000cfc <__sinit>
 800086c:	69ab      	ldr	r3, [r5, #24]
 800086e:	68ac      	ldr	r4, [r5, #8]
 8000870:	b913      	cbnz	r3, 8000878 <_puts_r+0x1c>
 8000872:	4628      	mov	r0, r5
 8000874:	f000 fa42 	bl	8000cfc <__sinit>
 8000878:	4b2c      	ldr	r3, [pc, #176]	; (800092c <_puts_r+0xd0>)
 800087a:	429c      	cmp	r4, r3
 800087c:	d120      	bne.n	80008c0 <_puts_r+0x64>
 800087e:	686c      	ldr	r4, [r5, #4]
 8000880:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000882:	07db      	lsls	r3, r3, #31
 8000884:	d405      	bmi.n	8000892 <_puts_r+0x36>
 8000886:	89a3      	ldrh	r3, [r4, #12]
 8000888:	0598      	lsls	r0, r3, #22
 800088a:	d402      	bmi.n	8000892 <_puts_r+0x36>
 800088c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800088e:	f000 fad3 	bl	8000e38 <__retarget_lock_acquire_recursive>
 8000892:	89a3      	ldrh	r3, [r4, #12]
 8000894:	0719      	lsls	r1, r3, #28
 8000896:	d51d      	bpl.n	80008d4 <_puts_r+0x78>
 8000898:	6923      	ldr	r3, [r4, #16]
 800089a:	b1db      	cbz	r3, 80008d4 <_puts_r+0x78>
 800089c:	3e01      	subs	r6, #1
 800089e:	68a3      	ldr	r3, [r4, #8]
 80008a0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80008a4:	3b01      	subs	r3, #1
 80008a6:	60a3      	str	r3, [r4, #8]
 80008a8:	bb39      	cbnz	r1, 80008fa <_puts_r+0x9e>
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	da38      	bge.n	8000920 <_puts_r+0xc4>
 80008ae:	4622      	mov	r2, r4
 80008b0:	210a      	movs	r1, #10
 80008b2:	4628      	mov	r0, r5
 80008b4:	f000 f848 	bl	8000948 <__swbuf_r>
 80008b8:	3001      	adds	r0, #1
 80008ba:	d011      	beq.n	80008e0 <_puts_r+0x84>
 80008bc:	250a      	movs	r5, #10
 80008be:	e011      	b.n	80008e4 <_puts_r+0x88>
 80008c0:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <_puts_r+0xd4>)
 80008c2:	429c      	cmp	r4, r3
 80008c4:	d101      	bne.n	80008ca <_puts_r+0x6e>
 80008c6:	68ac      	ldr	r4, [r5, #8]
 80008c8:	e7da      	b.n	8000880 <_puts_r+0x24>
 80008ca:	4b1a      	ldr	r3, [pc, #104]	; (8000934 <_puts_r+0xd8>)
 80008cc:	429c      	cmp	r4, r3
 80008ce:	bf08      	it	eq
 80008d0:	68ec      	ldreq	r4, [r5, #12]
 80008d2:	e7d5      	b.n	8000880 <_puts_r+0x24>
 80008d4:	4621      	mov	r1, r4
 80008d6:	4628      	mov	r0, r5
 80008d8:	f000 f888 	bl	80009ec <__swsetup_r>
 80008dc:	2800      	cmp	r0, #0
 80008de:	d0dd      	beq.n	800089c <_puts_r+0x40>
 80008e0:	f04f 35ff 	mov.w	r5, #4294967295
 80008e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80008e6:	07da      	lsls	r2, r3, #31
 80008e8:	d405      	bmi.n	80008f6 <_puts_r+0x9a>
 80008ea:	89a3      	ldrh	r3, [r4, #12]
 80008ec:	059b      	lsls	r3, r3, #22
 80008ee:	d402      	bmi.n	80008f6 <_puts_r+0x9a>
 80008f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80008f2:	f000 faa2 	bl	8000e3a <__retarget_lock_release_recursive>
 80008f6:	4628      	mov	r0, r5
 80008f8:	bd70      	pop	{r4, r5, r6, pc}
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	da04      	bge.n	8000908 <_puts_r+0xac>
 80008fe:	69a2      	ldr	r2, [r4, #24]
 8000900:	429a      	cmp	r2, r3
 8000902:	dc06      	bgt.n	8000912 <_puts_r+0xb6>
 8000904:	290a      	cmp	r1, #10
 8000906:	d004      	beq.n	8000912 <_puts_r+0xb6>
 8000908:	6823      	ldr	r3, [r4, #0]
 800090a:	1c5a      	adds	r2, r3, #1
 800090c:	6022      	str	r2, [r4, #0]
 800090e:	7019      	strb	r1, [r3, #0]
 8000910:	e7c5      	b.n	800089e <_puts_r+0x42>
 8000912:	4622      	mov	r2, r4
 8000914:	4628      	mov	r0, r5
 8000916:	f000 f817 	bl	8000948 <__swbuf_r>
 800091a:	3001      	adds	r0, #1
 800091c:	d1bf      	bne.n	800089e <_puts_r+0x42>
 800091e:	e7df      	b.n	80008e0 <_puts_r+0x84>
 8000920:	6823      	ldr	r3, [r4, #0]
 8000922:	250a      	movs	r5, #10
 8000924:	1c5a      	adds	r2, r3, #1
 8000926:	6022      	str	r2, [r4, #0]
 8000928:	701d      	strb	r5, [r3, #0]
 800092a:	e7db      	b.n	80008e4 <_puts_r+0x88>
 800092c:	08001284 	.word	0x08001284
 8000930:	080012a4 	.word	0x080012a4
 8000934:	08001264 	.word	0x08001264

08000938 <puts>:
 8000938:	4b02      	ldr	r3, [pc, #8]	; (8000944 <puts+0xc>)
 800093a:	4601      	mov	r1, r0
 800093c:	6818      	ldr	r0, [r3, #0]
 800093e:	f7ff bf8d 	b.w	800085c <_puts_r>
 8000942:	bf00      	nop
 8000944:	20000010 	.word	0x20000010

08000948 <__swbuf_r>:
 8000948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800094a:	460e      	mov	r6, r1
 800094c:	4614      	mov	r4, r2
 800094e:	4605      	mov	r5, r0
 8000950:	b118      	cbz	r0, 800095a <__swbuf_r+0x12>
 8000952:	6983      	ldr	r3, [r0, #24]
 8000954:	b90b      	cbnz	r3, 800095a <__swbuf_r+0x12>
 8000956:	f000 f9d1 	bl	8000cfc <__sinit>
 800095a:	4b21      	ldr	r3, [pc, #132]	; (80009e0 <__swbuf_r+0x98>)
 800095c:	429c      	cmp	r4, r3
 800095e:	d12b      	bne.n	80009b8 <__swbuf_r+0x70>
 8000960:	686c      	ldr	r4, [r5, #4]
 8000962:	69a3      	ldr	r3, [r4, #24]
 8000964:	60a3      	str	r3, [r4, #8]
 8000966:	89a3      	ldrh	r3, [r4, #12]
 8000968:	071a      	lsls	r2, r3, #28
 800096a:	d52f      	bpl.n	80009cc <__swbuf_r+0x84>
 800096c:	6923      	ldr	r3, [r4, #16]
 800096e:	b36b      	cbz	r3, 80009cc <__swbuf_r+0x84>
 8000970:	6923      	ldr	r3, [r4, #16]
 8000972:	6820      	ldr	r0, [r4, #0]
 8000974:	1ac0      	subs	r0, r0, r3
 8000976:	6963      	ldr	r3, [r4, #20]
 8000978:	b2f6      	uxtb	r6, r6
 800097a:	4283      	cmp	r3, r0
 800097c:	4637      	mov	r7, r6
 800097e:	dc04      	bgt.n	800098a <__swbuf_r+0x42>
 8000980:	4621      	mov	r1, r4
 8000982:	4628      	mov	r0, r5
 8000984:	f000 f926 	bl	8000bd4 <_fflush_r>
 8000988:	bb30      	cbnz	r0, 80009d8 <__swbuf_r+0x90>
 800098a:	68a3      	ldr	r3, [r4, #8]
 800098c:	3b01      	subs	r3, #1
 800098e:	60a3      	str	r3, [r4, #8]
 8000990:	6823      	ldr	r3, [r4, #0]
 8000992:	1c5a      	adds	r2, r3, #1
 8000994:	6022      	str	r2, [r4, #0]
 8000996:	701e      	strb	r6, [r3, #0]
 8000998:	6963      	ldr	r3, [r4, #20]
 800099a:	3001      	adds	r0, #1
 800099c:	4283      	cmp	r3, r0
 800099e:	d004      	beq.n	80009aa <__swbuf_r+0x62>
 80009a0:	89a3      	ldrh	r3, [r4, #12]
 80009a2:	07db      	lsls	r3, r3, #31
 80009a4:	d506      	bpl.n	80009b4 <__swbuf_r+0x6c>
 80009a6:	2e0a      	cmp	r6, #10
 80009a8:	d104      	bne.n	80009b4 <__swbuf_r+0x6c>
 80009aa:	4621      	mov	r1, r4
 80009ac:	4628      	mov	r0, r5
 80009ae:	f000 f911 	bl	8000bd4 <_fflush_r>
 80009b2:	b988      	cbnz	r0, 80009d8 <__swbuf_r+0x90>
 80009b4:	4638      	mov	r0, r7
 80009b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009b8:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <__swbuf_r+0x9c>)
 80009ba:	429c      	cmp	r4, r3
 80009bc:	d101      	bne.n	80009c2 <__swbuf_r+0x7a>
 80009be:	68ac      	ldr	r4, [r5, #8]
 80009c0:	e7cf      	b.n	8000962 <__swbuf_r+0x1a>
 80009c2:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <__swbuf_r+0xa0>)
 80009c4:	429c      	cmp	r4, r3
 80009c6:	bf08      	it	eq
 80009c8:	68ec      	ldreq	r4, [r5, #12]
 80009ca:	e7ca      	b.n	8000962 <__swbuf_r+0x1a>
 80009cc:	4621      	mov	r1, r4
 80009ce:	4628      	mov	r0, r5
 80009d0:	f000 f80c 	bl	80009ec <__swsetup_r>
 80009d4:	2800      	cmp	r0, #0
 80009d6:	d0cb      	beq.n	8000970 <__swbuf_r+0x28>
 80009d8:	f04f 37ff 	mov.w	r7, #4294967295
 80009dc:	e7ea      	b.n	80009b4 <__swbuf_r+0x6c>
 80009de:	bf00      	nop
 80009e0:	08001284 	.word	0x08001284
 80009e4:	080012a4 	.word	0x080012a4
 80009e8:	08001264 	.word	0x08001264

080009ec <__swsetup_r>:
 80009ec:	4b32      	ldr	r3, [pc, #200]	; (8000ab8 <__swsetup_r+0xcc>)
 80009ee:	b570      	push	{r4, r5, r6, lr}
 80009f0:	681d      	ldr	r5, [r3, #0]
 80009f2:	4606      	mov	r6, r0
 80009f4:	460c      	mov	r4, r1
 80009f6:	b125      	cbz	r5, 8000a02 <__swsetup_r+0x16>
 80009f8:	69ab      	ldr	r3, [r5, #24]
 80009fa:	b913      	cbnz	r3, 8000a02 <__swsetup_r+0x16>
 80009fc:	4628      	mov	r0, r5
 80009fe:	f000 f97d 	bl	8000cfc <__sinit>
 8000a02:	4b2e      	ldr	r3, [pc, #184]	; (8000abc <__swsetup_r+0xd0>)
 8000a04:	429c      	cmp	r4, r3
 8000a06:	d10f      	bne.n	8000a28 <__swsetup_r+0x3c>
 8000a08:	686c      	ldr	r4, [r5, #4]
 8000a0a:	89a3      	ldrh	r3, [r4, #12]
 8000a0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000a10:	0719      	lsls	r1, r3, #28
 8000a12:	d42c      	bmi.n	8000a6e <__swsetup_r+0x82>
 8000a14:	06dd      	lsls	r5, r3, #27
 8000a16:	d411      	bmi.n	8000a3c <__swsetup_r+0x50>
 8000a18:	2309      	movs	r3, #9
 8000a1a:	6033      	str	r3, [r6, #0]
 8000a1c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000a20:	81a3      	strh	r3, [r4, #12]
 8000a22:	f04f 30ff 	mov.w	r0, #4294967295
 8000a26:	e03e      	b.n	8000aa6 <__swsetup_r+0xba>
 8000a28:	4b25      	ldr	r3, [pc, #148]	; (8000ac0 <__swsetup_r+0xd4>)
 8000a2a:	429c      	cmp	r4, r3
 8000a2c:	d101      	bne.n	8000a32 <__swsetup_r+0x46>
 8000a2e:	68ac      	ldr	r4, [r5, #8]
 8000a30:	e7eb      	b.n	8000a0a <__swsetup_r+0x1e>
 8000a32:	4b24      	ldr	r3, [pc, #144]	; (8000ac4 <__swsetup_r+0xd8>)
 8000a34:	429c      	cmp	r4, r3
 8000a36:	bf08      	it	eq
 8000a38:	68ec      	ldreq	r4, [r5, #12]
 8000a3a:	e7e6      	b.n	8000a0a <__swsetup_r+0x1e>
 8000a3c:	0758      	lsls	r0, r3, #29
 8000a3e:	d512      	bpl.n	8000a66 <__swsetup_r+0x7a>
 8000a40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000a42:	b141      	cbz	r1, 8000a56 <__swsetup_r+0x6a>
 8000a44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000a48:	4299      	cmp	r1, r3
 8000a4a:	d002      	beq.n	8000a52 <__swsetup_r+0x66>
 8000a4c:	4630      	mov	r0, r6
 8000a4e:	f000 fa59 	bl	8000f04 <_free_r>
 8000a52:	2300      	movs	r3, #0
 8000a54:	6363      	str	r3, [r4, #52]	; 0x34
 8000a56:	89a3      	ldrh	r3, [r4, #12]
 8000a58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000a5c:	81a3      	strh	r3, [r4, #12]
 8000a5e:	2300      	movs	r3, #0
 8000a60:	6063      	str	r3, [r4, #4]
 8000a62:	6923      	ldr	r3, [r4, #16]
 8000a64:	6023      	str	r3, [r4, #0]
 8000a66:	89a3      	ldrh	r3, [r4, #12]
 8000a68:	f043 0308 	orr.w	r3, r3, #8
 8000a6c:	81a3      	strh	r3, [r4, #12]
 8000a6e:	6923      	ldr	r3, [r4, #16]
 8000a70:	b94b      	cbnz	r3, 8000a86 <__swsetup_r+0x9a>
 8000a72:	89a3      	ldrh	r3, [r4, #12]
 8000a74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000a78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a7c:	d003      	beq.n	8000a86 <__swsetup_r+0x9a>
 8000a7e:	4621      	mov	r1, r4
 8000a80:	4630      	mov	r0, r6
 8000a82:	f000 f9ff 	bl	8000e84 <__smakebuf_r>
 8000a86:	89a0      	ldrh	r0, [r4, #12]
 8000a88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000a8c:	f010 0301 	ands.w	r3, r0, #1
 8000a90:	d00a      	beq.n	8000aa8 <__swsetup_r+0xbc>
 8000a92:	2300      	movs	r3, #0
 8000a94:	60a3      	str	r3, [r4, #8]
 8000a96:	6963      	ldr	r3, [r4, #20]
 8000a98:	425b      	negs	r3, r3
 8000a9a:	61a3      	str	r3, [r4, #24]
 8000a9c:	6923      	ldr	r3, [r4, #16]
 8000a9e:	b943      	cbnz	r3, 8000ab2 <__swsetup_r+0xc6>
 8000aa0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000aa4:	d1ba      	bne.n	8000a1c <__swsetup_r+0x30>
 8000aa6:	bd70      	pop	{r4, r5, r6, pc}
 8000aa8:	0781      	lsls	r1, r0, #30
 8000aaa:	bf58      	it	pl
 8000aac:	6963      	ldrpl	r3, [r4, #20]
 8000aae:	60a3      	str	r3, [r4, #8]
 8000ab0:	e7f4      	b.n	8000a9c <__swsetup_r+0xb0>
 8000ab2:	2000      	movs	r0, #0
 8000ab4:	e7f7      	b.n	8000aa6 <__swsetup_r+0xba>
 8000ab6:	bf00      	nop
 8000ab8:	20000010 	.word	0x20000010
 8000abc:	08001284 	.word	0x08001284
 8000ac0:	080012a4 	.word	0x080012a4
 8000ac4:	08001264 	.word	0x08001264

08000ac8 <__sflush_r>:
 8000ac8:	898a      	ldrh	r2, [r1, #12]
 8000aca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ace:	4605      	mov	r5, r0
 8000ad0:	0710      	lsls	r0, r2, #28
 8000ad2:	460c      	mov	r4, r1
 8000ad4:	d458      	bmi.n	8000b88 <__sflush_r+0xc0>
 8000ad6:	684b      	ldr	r3, [r1, #4]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	dc05      	bgt.n	8000ae8 <__sflush_r+0x20>
 8000adc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	dc02      	bgt.n	8000ae8 <__sflush_r+0x20>
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ae8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000aea:	2e00      	cmp	r6, #0
 8000aec:	d0f9      	beq.n	8000ae2 <__sflush_r+0x1a>
 8000aee:	2300      	movs	r3, #0
 8000af0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000af4:	682f      	ldr	r7, [r5, #0]
 8000af6:	602b      	str	r3, [r5, #0]
 8000af8:	d032      	beq.n	8000b60 <__sflush_r+0x98>
 8000afa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000afc:	89a3      	ldrh	r3, [r4, #12]
 8000afe:	075a      	lsls	r2, r3, #29
 8000b00:	d505      	bpl.n	8000b0e <__sflush_r+0x46>
 8000b02:	6863      	ldr	r3, [r4, #4]
 8000b04:	1ac0      	subs	r0, r0, r3
 8000b06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000b08:	b10b      	cbz	r3, 8000b0e <__sflush_r+0x46>
 8000b0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b0c:	1ac0      	subs	r0, r0, r3
 8000b0e:	2300      	movs	r3, #0
 8000b10:	4602      	mov	r2, r0
 8000b12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000b14:	6a21      	ldr	r1, [r4, #32]
 8000b16:	4628      	mov	r0, r5
 8000b18:	47b0      	blx	r6
 8000b1a:	1c43      	adds	r3, r0, #1
 8000b1c:	89a3      	ldrh	r3, [r4, #12]
 8000b1e:	d106      	bne.n	8000b2e <__sflush_r+0x66>
 8000b20:	6829      	ldr	r1, [r5, #0]
 8000b22:	291d      	cmp	r1, #29
 8000b24:	d82c      	bhi.n	8000b80 <__sflush_r+0xb8>
 8000b26:	4a2a      	ldr	r2, [pc, #168]	; (8000bd0 <__sflush_r+0x108>)
 8000b28:	40ca      	lsrs	r2, r1
 8000b2a:	07d6      	lsls	r6, r2, #31
 8000b2c:	d528      	bpl.n	8000b80 <__sflush_r+0xb8>
 8000b2e:	2200      	movs	r2, #0
 8000b30:	6062      	str	r2, [r4, #4]
 8000b32:	04d9      	lsls	r1, r3, #19
 8000b34:	6922      	ldr	r2, [r4, #16]
 8000b36:	6022      	str	r2, [r4, #0]
 8000b38:	d504      	bpl.n	8000b44 <__sflush_r+0x7c>
 8000b3a:	1c42      	adds	r2, r0, #1
 8000b3c:	d101      	bne.n	8000b42 <__sflush_r+0x7a>
 8000b3e:	682b      	ldr	r3, [r5, #0]
 8000b40:	b903      	cbnz	r3, 8000b44 <__sflush_r+0x7c>
 8000b42:	6560      	str	r0, [r4, #84]	; 0x54
 8000b44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000b46:	602f      	str	r7, [r5, #0]
 8000b48:	2900      	cmp	r1, #0
 8000b4a:	d0ca      	beq.n	8000ae2 <__sflush_r+0x1a>
 8000b4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000b50:	4299      	cmp	r1, r3
 8000b52:	d002      	beq.n	8000b5a <__sflush_r+0x92>
 8000b54:	4628      	mov	r0, r5
 8000b56:	f000 f9d5 	bl	8000f04 <_free_r>
 8000b5a:	2000      	movs	r0, #0
 8000b5c:	6360      	str	r0, [r4, #52]	; 0x34
 8000b5e:	e7c1      	b.n	8000ae4 <__sflush_r+0x1c>
 8000b60:	6a21      	ldr	r1, [r4, #32]
 8000b62:	2301      	movs	r3, #1
 8000b64:	4628      	mov	r0, r5
 8000b66:	47b0      	blx	r6
 8000b68:	1c41      	adds	r1, r0, #1
 8000b6a:	d1c7      	bne.n	8000afc <__sflush_r+0x34>
 8000b6c:	682b      	ldr	r3, [r5, #0]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d0c4      	beq.n	8000afc <__sflush_r+0x34>
 8000b72:	2b1d      	cmp	r3, #29
 8000b74:	d001      	beq.n	8000b7a <__sflush_r+0xb2>
 8000b76:	2b16      	cmp	r3, #22
 8000b78:	d101      	bne.n	8000b7e <__sflush_r+0xb6>
 8000b7a:	602f      	str	r7, [r5, #0]
 8000b7c:	e7b1      	b.n	8000ae2 <__sflush_r+0x1a>
 8000b7e:	89a3      	ldrh	r3, [r4, #12]
 8000b80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b84:	81a3      	strh	r3, [r4, #12]
 8000b86:	e7ad      	b.n	8000ae4 <__sflush_r+0x1c>
 8000b88:	690f      	ldr	r7, [r1, #16]
 8000b8a:	2f00      	cmp	r7, #0
 8000b8c:	d0a9      	beq.n	8000ae2 <__sflush_r+0x1a>
 8000b8e:	0793      	lsls	r3, r2, #30
 8000b90:	680e      	ldr	r6, [r1, #0]
 8000b92:	bf08      	it	eq
 8000b94:	694b      	ldreq	r3, [r1, #20]
 8000b96:	600f      	str	r7, [r1, #0]
 8000b98:	bf18      	it	ne
 8000b9a:	2300      	movne	r3, #0
 8000b9c:	eba6 0807 	sub.w	r8, r6, r7
 8000ba0:	608b      	str	r3, [r1, #8]
 8000ba2:	f1b8 0f00 	cmp.w	r8, #0
 8000ba6:	dd9c      	ble.n	8000ae2 <__sflush_r+0x1a>
 8000ba8:	6a21      	ldr	r1, [r4, #32]
 8000baa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000bac:	4643      	mov	r3, r8
 8000bae:	463a      	mov	r2, r7
 8000bb0:	4628      	mov	r0, r5
 8000bb2:	47b0      	blx	r6
 8000bb4:	2800      	cmp	r0, #0
 8000bb6:	dc06      	bgt.n	8000bc6 <__sflush_r+0xfe>
 8000bb8:	89a3      	ldrh	r3, [r4, #12]
 8000bba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bbe:	81a3      	strh	r3, [r4, #12]
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	e78e      	b.n	8000ae4 <__sflush_r+0x1c>
 8000bc6:	4407      	add	r7, r0
 8000bc8:	eba8 0800 	sub.w	r8, r8, r0
 8000bcc:	e7e9      	b.n	8000ba2 <__sflush_r+0xda>
 8000bce:	bf00      	nop
 8000bd0:	20400001 	.word	0x20400001

08000bd4 <_fflush_r>:
 8000bd4:	b538      	push	{r3, r4, r5, lr}
 8000bd6:	690b      	ldr	r3, [r1, #16]
 8000bd8:	4605      	mov	r5, r0
 8000bda:	460c      	mov	r4, r1
 8000bdc:	b913      	cbnz	r3, 8000be4 <_fflush_r+0x10>
 8000bde:	2500      	movs	r5, #0
 8000be0:	4628      	mov	r0, r5
 8000be2:	bd38      	pop	{r3, r4, r5, pc}
 8000be4:	b118      	cbz	r0, 8000bee <_fflush_r+0x1a>
 8000be6:	6983      	ldr	r3, [r0, #24]
 8000be8:	b90b      	cbnz	r3, 8000bee <_fflush_r+0x1a>
 8000bea:	f000 f887 	bl	8000cfc <__sinit>
 8000bee:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <_fflush_r+0x6c>)
 8000bf0:	429c      	cmp	r4, r3
 8000bf2:	d11b      	bne.n	8000c2c <_fflush_r+0x58>
 8000bf4:	686c      	ldr	r4, [r5, #4]
 8000bf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d0ef      	beq.n	8000bde <_fflush_r+0xa>
 8000bfe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000c00:	07d0      	lsls	r0, r2, #31
 8000c02:	d404      	bmi.n	8000c0e <_fflush_r+0x3a>
 8000c04:	0599      	lsls	r1, r3, #22
 8000c06:	d402      	bmi.n	8000c0e <_fflush_r+0x3a>
 8000c08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000c0a:	f000 f915 	bl	8000e38 <__retarget_lock_acquire_recursive>
 8000c0e:	4628      	mov	r0, r5
 8000c10:	4621      	mov	r1, r4
 8000c12:	f7ff ff59 	bl	8000ac8 <__sflush_r>
 8000c16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000c18:	07da      	lsls	r2, r3, #31
 8000c1a:	4605      	mov	r5, r0
 8000c1c:	d4e0      	bmi.n	8000be0 <_fflush_r+0xc>
 8000c1e:	89a3      	ldrh	r3, [r4, #12]
 8000c20:	059b      	lsls	r3, r3, #22
 8000c22:	d4dd      	bmi.n	8000be0 <_fflush_r+0xc>
 8000c24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000c26:	f000 f908 	bl	8000e3a <__retarget_lock_release_recursive>
 8000c2a:	e7d9      	b.n	8000be0 <_fflush_r+0xc>
 8000c2c:	4b05      	ldr	r3, [pc, #20]	; (8000c44 <_fflush_r+0x70>)
 8000c2e:	429c      	cmp	r4, r3
 8000c30:	d101      	bne.n	8000c36 <_fflush_r+0x62>
 8000c32:	68ac      	ldr	r4, [r5, #8]
 8000c34:	e7df      	b.n	8000bf6 <_fflush_r+0x22>
 8000c36:	4b04      	ldr	r3, [pc, #16]	; (8000c48 <_fflush_r+0x74>)
 8000c38:	429c      	cmp	r4, r3
 8000c3a:	bf08      	it	eq
 8000c3c:	68ec      	ldreq	r4, [r5, #12]
 8000c3e:	e7da      	b.n	8000bf6 <_fflush_r+0x22>
 8000c40:	08001284 	.word	0x08001284
 8000c44:	080012a4 	.word	0x080012a4
 8000c48:	08001264 	.word	0x08001264

08000c4c <std>:
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	b510      	push	{r4, lr}
 8000c50:	4604      	mov	r4, r0
 8000c52:	e9c0 3300 	strd	r3, r3, [r0]
 8000c56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000c5a:	6083      	str	r3, [r0, #8]
 8000c5c:	8181      	strh	r1, [r0, #12]
 8000c5e:	6643      	str	r3, [r0, #100]	; 0x64
 8000c60:	81c2      	strh	r2, [r0, #14]
 8000c62:	6183      	str	r3, [r0, #24]
 8000c64:	4619      	mov	r1, r3
 8000c66:	2208      	movs	r2, #8
 8000c68:	305c      	adds	r0, #92	; 0x5c
 8000c6a:	f7ff fdef 	bl	800084c <memset>
 8000c6e:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <std+0x38>)
 8000c70:	6263      	str	r3, [r4, #36]	; 0x24
 8000c72:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <std+0x3c>)
 8000c74:	62a3      	str	r3, [r4, #40]	; 0x28
 8000c76:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <std+0x40>)
 8000c78:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000c7a:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <std+0x44>)
 8000c7c:	6224      	str	r4, [r4, #32]
 8000c7e:	6323      	str	r3, [r4, #48]	; 0x30
 8000c80:	bd10      	pop	{r4, pc}
 8000c82:	bf00      	nop
 8000c84:	08001079 	.word	0x08001079
 8000c88:	0800109b 	.word	0x0800109b
 8000c8c:	080010d3 	.word	0x080010d3
 8000c90:	080010f7 	.word	0x080010f7

08000c94 <_cleanup_r>:
 8000c94:	4901      	ldr	r1, [pc, #4]	; (8000c9c <_cleanup_r+0x8>)
 8000c96:	f000 b8af 	b.w	8000df8 <_fwalk_reent>
 8000c9a:	bf00      	nop
 8000c9c:	08000bd5 	.word	0x08000bd5

08000ca0 <__sfmoreglue>:
 8000ca0:	b570      	push	{r4, r5, r6, lr}
 8000ca2:	1e4a      	subs	r2, r1, #1
 8000ca4:	2568      	movs	r5, #104	; 0x68
 8000ca6:	4355      	muls	r5, r2
 8000ca8:	460e      	mov	r6, r1
 8000caa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000cae:	f000 f979 	bl	8000fa4 <_malloc_r>
 8000cb2:	4604      	mov	r4, r0
 8000cb4:	b140      	cbz	r0, 8000cc8 <__sfmoreglue+0x28>
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	e9c0 1600 	strd	r1, r6, [r0]
 8000cbc:	300c      	adds	r0, #12
 8000cbe:	60a0      	str	r0, [r4, #8]
 8000cc0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000cc4:	f7ff fdc2 	bl	800084c <memset>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	bd70      	pop	{r4, r5, r6, pc}

08000ccc <__sfp_lock_acquire>:
 8000ccc:	4801      	ldr	r0, [pc, #4]	; (8000cd4 <__sfp_lock_acquire+0x8>)
 8000cce:	f000 b8b3 	b.w	8000e38 <__retarget_lock_acquire_recursive>
 8000cd2:	bf00      	nop
 8000cd4:	200000b8 	.word	0x200000b8

08000cd8 <__sfp_lock_release>:
 8000cd8:	4801      	ldr	r0, [pc, #4]	; (8000ce0 <__sfp_lock_release+0x8>)
 8000cda:	f000 b8ae 	b.w	8000e3a <__retarget_lock_release_recursive>
 8000cde:	bf00      	nop
 8000ce0:	200000b8 	.word	0x200000b8

08000ce4 <__sinit_lock_acquire>:
 8000ce4:	4801      	ldr	r0, [pc, #4]	; (8000cec <__sinit_lock_acquire+0x8>)
 8000ce6:	f000 b8a7 	b.w	8000e38 <__retarget_lock_acquire_recursive>
 8000cea:	bf00      	nop
 8000cec:	200000b3 	.word	0x200000b3

08000cf0 <__sinit_lock_release>:
 8000cf0:	4801      	ldr	r0, [pc, #4]	; (8000cf8 <__sinit_lock_release+0x8>)
 8000cf2:	f000 b8a2 	b.w	8000e3a <__retarget_lock_release_recursive>
 8000cf6:	bf00      	nop
 8000cf8:	200000b3 	.word	0x200000b3

08000cfc <__sinit>:
 8000cfc:	b510      	push	{r4, lr}
 8000cfe:	4604      	mov	r4, r0
 8000d00:	f7ff fff0 	bl	8000ce4 <__sinit_lock_acquire>
 8000d04:	69a3      	ldr	r3, [r4, #24]
 8000d06:	b11b      	cbz	r3, 8000d10 <__sinit+0x14>
 8000d08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d0c:	f7ff bff0 	b.w	8000cf0 <__sinit_lock_release>
 8000d10:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000d14:	6523      	str	r3, [r4, #80]	; 0x50
 8000d16:	4b13      	ldr	r3, [pc, #76]	; (8000d64 <__sinit+0x68>)
 8000d18:	4a13      	ldr	r2, [pc, #76]	; (8000d68 <__sinit+0x6c>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	62a2      	str	r2, [r4, #40]	; 0x28
 8000d1e:	42a3      	cmp	r3, r4
 8000d20:	bf04      	itt	eq
 8000d22:	2301      	moveq	r3, #1
 8000d24:	61a3      	streq	r3, [r4, #24]
 8000d26:	4620      	mov	r0, r4
 8000d28:	f000 f820 	bl	8000d6c <__sfp>
 8000d2c:	6060      	str	r0, [r4, #4]
 8000d2e:	4620      	mov	r0, r4
 8000d30:	f000 f81c 	bl	8000d6c <__sfp>
 8000d34:	60a0      	str	r0, [r4, #8]
 8000d36:	4620      	mov	r0, r4
 8000d38:	f000 f818 	bl	8000d6c <__sfp>
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	60e0      	str	r0, [r4, #12]
 8000d40:	2104      	movs	r1, #4
 8000d42:	6860      	ldr	r0, [r4, #4]
 8000d44:	f7ff ff82 	bl	8000c4c <std>
 8000d48:	68a0      	ldr	r0, [r4, #8]
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	2109      	movs	r1, #9
 8000d4e:	f7ff ff7d 	bl	8000c4c <std>
 8000d52:	68e0      	ldr	r0, [r4, #12]
 8000d54:	2202      	movs	r2, #2
 8000d56:	2112      	movs	r1, #18
 8000d58:	f7ff ff78 	bl	8000c4c <std>
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	61a3      	str	r3, [r4, #24]
 8000d60:	e7d2      	b.n	8000d08 <__sinit+0xc>
 8000d62:	bf00      	nop
 8000d64:	08001260 	.word	0x08001260
 8000d68:	08000c95 	.word	0x08000c95

08000d6c <__sfp>:
 8000d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d6e:	4607      	mov	r7, r0
 8000d70:	f7ff ffac 	bl	8000ccc <__sfp_lock_acquire>
 8000d74:	4b1e      	ldr	r3, [pc, #120]	; (8000df0 <__sfp+0x84>)
 8000d76:	681e      	ldr	r6, [r3, #0]
 8000d78:	69b3      	ldr	r3, [r6, #24]
 8000d7a:	b913      	cbnz	r3, 8000d82 <__sfp+0x16>
 8000d7c:	4630      	mov	r0, r6
 8000d7e:	f7ff ffbd 	bl	8000cfc <__sinit>
 8000d82:	3648      	adds	r6, #72	; 0x48
 8000d84:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000d88:	3b01      	subs	r3, #1
 8000d8a:	d503      	bpl.n	8000d94 <__sfp+0x28>
 8000d8c:	6833      	ldr	r3, [r6, #0]
 8000d8e:	b30b      	cbz	r3, 8000dd4 <__sfp+0x68>
 8000d90:	6836      	ldr	r6, [r6, #0]
 8000d92:	e7f7      	b.n	8000d84 <__sfp+0x18>
 8000d94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000d98:	b9d5      	cbnz	r5, 8000dd0 <__sfp+0x64>
 8000d9a:	4b16      	ldr	r3, [pc, #88]	; (8000df4 <__sfp+0x88>)
 8000d9c:	60e3      	str	r3, [r4, #12]
 8000d9e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000da2:	6665      	str	r5, [r4, #100]	; 0x64
 8000da4:	f000 f847 	bl	8000e36 <__retarget_lock_init_recursive>
 8000da8:	f7ff ff96 	bl	8000cd8 <__sfp_lock_release>
 8000dac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000db0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000db4:	6025      	str	r5, [r4, #0]
 8000db6:	61a5      	str	r5, [r4, #24]
 8000db8:	2208      	movs	r2, #8
 8000dba:	4629      	mov	r1, r5
 8000dbc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000dc0:	f7ff fd44 	bl	800084c <memset>
 8000dc4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000dc8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000dcc:	4620      	mov	r0, r4
 8000dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000dd0:	3468      	adds	r4, #104	; 0x68
 8000dd2:	e7d9      	b.n	8000d88 <__sfp+0x1c>
 8000dd4:	2104      	movs	r1, #4
 8000dd6:	4638      	mov	r0, r7
 8000dd8:	f7ff ff62 	bl	8000ca0 <__sfmoreglue>
 8000ddc:	4604      	mov	r4, r0
 8000dde:	6030      	str	r0, [r6, #0]
 8000de0:	2800      	cmp	r0, #0
 8000de2:	d1d5      	bne.n	8000d90 <__sfp+0x24>
 8000de4:	f7ff ff78 	bl	8000cd8 <__sfp_lock_release>
 8000de8:	230c      	movs	r3, #12
 8000dea:	603b      	str	r3, [r7, #0]
 8000dec:	e7ee      	b.n	8000dcc <__sfp+0x60>
 8000dee:	bf00      	nop
 8000df0:	08001260 	.word	0x08001260
 8000df4:	ffff0001 	.word	0xffff0001

08000df8 <_fwalk_reent>:
 8000df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000dfc:	4606      	mov	r6, r0
 8000dfe:	4688      	mov	r8, r1
 8000e00:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000e04:	2700      	movs	r7, #0
 8000e06:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000e0a:	f1b9 0901 	subs.w	r9, r9, #1
 8000e0e:	d505      	bpl.n	8000e1c <_fwalk_reent+0x24>
 8000e10:	6824      	ldr	r4, [r4, #0]
 8000e12:	2c00      	cmp	r4, #0
 8000e14:	d1f7      	bne.n	8000e06 <_fwalk_reent+0xe>
 8000e16:	4638      	mov	r0, r7
 8000e18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000e1c:	89ab      	ldrh	r3, [r5, #12]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d907      	bls.n	8000e32 <_fwalk_reent+0x3a>
 8000e22:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000e26:	3301      	adds	r3, #1
 8000e28:	d003      	beq.n	8000e32 <_fwalk_reent+0x3a>
 8000e2a:	4629      	mov	r1, r5
 8000e2c:	4630      	mov	r0, r6
 8000e2e:	47c0      	blx	r8
 8000e30:	4307      	orrs	r7, r0
 8000e32:	3568      	adds	r5, #104	; 0x68
 8000e34:	e7e9      	b.n	8000e0a <_fwalk_reent+0x12>

08000e36 <__retarget_lock_init_recursive>:
 8000e36:	4770      	bx	lr

08000e38 <__retarget_lock_acquire_recursive>:
 8000e38:	4770      	bx	lr

08000e3a <__retarget_lock_release_recursive>:
 8000e3a:	4770      	bx	lr

08000e3c <__swhatbuf_r>:
 8000e3c:	b570      	push	{r4, r5, r6, lr}
 8000e3e:	460e      	mov	r6, r1
 8000e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e44:	2900      	cmp	r1, #0
 8000e46:	b096      	sub	sp, #88	; 0x58
 8000e48:	4614      	mov	r4, r2
 8000e4a:	461d      	mov	r5, r3
 8000e4c:	da07      	bge.n	8000e5e <__swhatbuf_r+0x22>
 8000e4e:	2300      	movs	r3, #0
 8000e50:	602b      	str	r3, [r5, #0]
 8000e52:	89b3      	ldrh	r3, [r6, #12]
 8000e54:	061a      	lsls	r2, r3, #24
 8000e56:	d410      	bmi.n	8000e7a <__swhatbuf_r+0x3e>
 8000e58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e5c:	e00e      	b.n	8000e7c <__swhatbuf_r+0x40>
 8000e5e:	466a      	mov	r2, sp
 8000e60:	f000 f970 	bl	8001144 <_fstat_r>
 8000e64:	2800      	cmp	r0, #0
 8000e66:	dbf2      	blt.n	8000e4e <__swhatbuf_r+0x12>
 8000e68:	9a01      	ldr	r2, [sp, #4]
 8000e6a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000e6e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000e72:	425a      	negs	r2, r3
 8000e74:	415a      	adcs	r2, r3
 8000e76:	602a      	str	r2, [r5, #0]
 8000e78:	e7ee      	b.n	8000e58 <__swhatbuf_r+0x1c>
 8000e7a:	2340      	movs	r3, #64	; 0x40
 8000e7c:	2000      	movs	r0, #0
 8000e7e:	6023      	str	r3, [r4, #0]
 8000e80:	b016      	add	sp, #88	; 0x58
 8000e82:	bd70      	pop	{r4, r5, r6, pc}

08000e84 <__smakebuf_r>:
 8000e84:	898b      	ldrh	r3, [r1, #12]
 8000e86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000e88:	079d      	lsls	r5, r3, #30
 8000e8a:	4606      	mov	r6, r0
 8000e8c:	460c      	mov	r4, r1
 8000e8e:	d507      	bpl.n	8000ea0 <__smakebuf_r+0x1c>
 8000e90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000e94:	6023      	str	r3, [r4, #0]
 8000e96:	6123      	str	r3, [r4, #16]
 8000e98:	2301      	movs	r3, #1
 8000e9a:	6163      	str	r3, [r4, #20]
 8000e9c:	b002      	add	sp, #8
 8000e9e:	bd70      	pop	{r4, r5, r6, pc}
 8000ea0:	ab01      	add	r3, sp, #4
 8000ea2:	466a      	mov	r2, sp
 8000ea4:	f7ff ffca 	bl	8000e3c <__swhatbuf_r>
 8000ea8:	9900      	ldr	r1, [sp, #0]
 8000eaa:	4605      	mov	r5, r0
 8000eac:	4630      	mov	r0, r6
 8000eae:	f000 f879 	bl	8000fa4 <_malloc_r>
 8000eb2:	b948      	cbnz	r0, 8000ec8 <__smakebuf_r+0x44>
 8000eb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000eb8:	059a      	lsls	r2, r3, #22
 8000eba:	d4ef      	bmi.n	8000e9c <__smakebuf_r+0x18>
 8000ebc:	f023 0303 	bic.w	r3, r3, #3
 8000ec0:	f043 0302 	orr.w	r3, r3, #2
 8000ec4:	81a3      	strh	r3, [r4, #12]
 8000ec6:	e7e3      	b.n	8000e90 <__smakebuf_r+0xc>
 8000ec8:	4b0d      	ldr	r3, [pc, #52]	; (8000f00 <__smakebuf_r+0x7c>)
 8000eca:	62b3      	str	r3, [r6, #40]	; 0x28
 8000ecc:	89a3      	ldrh	r3, [r4, #12]
 8000ece:	6020      	str	r0, [r4, #0]
 8000ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ed4:	81a3      	strh	r3, [r4, #12]
 8000ed6:	9b00      	ldr	r3, [sp, #0]
 8000ed8:	6163      	str	r3, [r4, #20]
 8000eda:	9b01      	ldr	r3, [sp, #4]
 8000edc:	6120      	str	r0, [r4, #16]
 8000ede:	b15b      	cbz	r3, 8000ef8 <__smakebuf_r+0x74>
 8000ee0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000ee4:	4630      	mov	r0, r6
 8000ee6:	f000 f93f 	bl	8001168 <_isatty_r>
 8000eea:	b128      	cbz	r0, 8000ef8 <__smakebuf_r+0x74>
 8000eec:	89a3      	ldrh	r3, [r4, #12]
 8000eee:	f023 0303 	bic.w	r3, r3, #3
 8000ef2:	f043 0301 	orr.w	r3, r3, #1
 8000ef6:	81a3      	strh	r3, [r4, #12]
 8000ef8:	89a0      	ldrh	r0, [r4, #12]
 8000efa:	4305      	orrs	r5, r0
 8000efc:	81a5      	strh	r5, [r4, #12]
 8000efe:	e7cd      	b.n	8000e9c <__smakebuf_r+0x18>
 8000f00:	08000c95 	.word	0x08000c95

08000f04 <_free_r>:
 8000f04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000f06:	2900      	cmp	r1, #0
 8000f08:	d048      	beq.n	8000f9c <_free_r+0x98>
 8000f0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000f0e:	9001      	str	r0, [sp, #4]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	f1a1 0404 	sub.w	r4, r1, #4
 8000f16:	bfb8      	it	lt
 8000f18:	18e4      	addlt	r4, r4, r3
 8000f1a:	f000 f947 	bl	80011ac <__malloc_lock>
 8000f1e:	4a20      	ldr	r2, [pc, #128]	; (8000fa0 <_free_r+0x9c>)
 8000f20:	9801      	ldr	r0, [sp, #4]
 8000f22:	6813      	ldr	r3, [r2, #0]
 8000f24:	4615      	mov	r5, r2
 8000f26:	b933      	cbnz	r3, 8000f36 <_free_r+0x32>
 8000f28:	6063      	str	r3, [r4, #4]
 8000f2a:	6014      	str	r4, [r2, #0]
 8000f2c:	b003      	add	sp, #12
 8000f2e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000f32:	f000 b941 	b.w	80011b8 <__malloc_unlock>
 8000f36:	42a3      	cmp	r3, r4
 8000f38:	d90b      	bls.n	8000f52 <_free_r+0x4e>
 8000f3a:	6821      	ldr	r1, [r4, #0]
 8000f3c:	1862      	adds	r2, r4, r1
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	bf04      	itt	eq
 8000f42:	681a      	ldreq	r2, [r3, #0]
 8000f44:	685b      	ldreq	r3, [r3, #4]
 8000f46:	6063      	str	r3, [r4, #4]
 8000f48:	bf04      	itt	eq
 8000f4a:	1852      	addeq	r2, r2, r1
 8000f4c:	6022      	streq	r2, [r4, #0]
 8000f4e:	602c      	str	r4, [r5, #0]
 8000f50:	e7ec      	b.n	8000f2c <_free_r+0x28>
 8000f52:	461a      	mov	r2, r3
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	b10b      	cbz	r3, 8000f5c <_free_r+0x58>
 8000f58:	42a3      	cmp	r3, r4
 8000f5a:	d9fa      	bls.n	8000f52 <_free_r+0x4e>
 8000f5c:	6811      	ldr	r1, [r2, #0]
 8000f5e:	1855      	adds	r5, r2, r1
 8000f60:	42a5      	cmp	r5, r4
 8000f62:	d10b      	bne.n	8000f7c <_free_r+0x78>
 8000f64:	6824      	ldr	r4, [r4, #0]
 8000f66:	4421      	add	r1, r4
 8000f68:	1854      	adds	r4, r2, r1
 8000f6a:	42a3      	cmp	r3, r4
 8000f6c:	6011      	str	r1, [r2, #0]
 8000f6e:	d1dd      	bne.n	8000f2c <_free_r+0x28>
 8000f70:	681c      	ldr	r4, [r3, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	6053      	str	r3, [r2, #4]
 8000f76:	4421      	add	r1, r4
 8000f78:	6011      	str	r1, [r2, #0]
 8000f7a:	e7d7      	b.n	8000f2c <_free_r+0x28>
 8000f7c:	d902      	bls.n	8000f84 <_free_r+0x80>
 8000f7e:	230c      	movs	r3, #12
 8000f80:	6003      	str	r3, [r0, #0]
 8000f82:	e7d3      	b.n	8000f2c <_free_r+0x28>
 8000f84:	6825      	ldr	r5, [r4, #0]
 8000f86:	1961      	adds	r1, r4, r5
 8000f88:	428b      	cmp	r3, r1
 8000f8a:	bf04      	itt	eq
 8000f8c:	6819      	ldreq	r1, [r3, #0]
 8000f8e:	685b      	ldreq	r3, [r3, #4]
 8000f90:	6063      	str	r3, [r4, #4]
 8000f92:	bf04      	itt	eq
 8000f94:	1949      	addeq	r1, r1, r5
 8000f96:	6021      	streq	r1, [r4, #0]
 8000f98:	6054      	str	r4, [r2, #4]
 8000f9a:	e7c7      	b.n	8000f2c <_free_r+0x28>
 8000f9c:	b003      	add	sp, #12
 8000f9e:	bd30      	pop	{r4, r5, pc}
 8000fa0:	20000098 	.word	0x20000098

08000fa4 <_malloc_r>:
 8000fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fa6:	1ccd      	adds	r5, r1, #3
 8000fa8:	f025 0503 	bic.w	r5, r5, #3
 8000fac:	3508      	adds	r5, #8
 8000fae:	2d0c      	cmp	r5, #12
 8000fb0:	bf38      	it	cc
 8000fb2:	250c      	movcc	r5, #12
 8000fb4:	2d00      	cmp	r5, #0
 8000fb6:	4606      	mov	r6, r0
 8000fb8:	db01      	blt.n	8000fbe <_malloc_r+0x1a>
 8000fba:	42a9      	cmp	r1, r5
 8000fbc:	d903      	bls.n	8000fc6 <_malloc_r+0x22>
 8000fbe:	230c      	movs	r3, #12
 8000fc0:	6033      	str	r3, [r6, #0]
 8000fc2:	2000      	movs	r0, #0
 8000fc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000fc6:	f000 f8f1 	bl	80011ac <__malloc_lock>
 8000fca:	4921      	ldr	r1, [pc, #132]	; (8001050 <_malloc_r+0xac>)
 8000fcc:	680a      	ldr	r2, [r1, #0]
 8000fce:	4614      	mov	r4, r2
 8000fd0:	b99c      	cbnz	r4, 8000ffa <_malloc_r+0x56>
 8000fd2:	4f20      	ldr	r7, [pc, #128]	; (8001054 <_malloc_r+0xb0>)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	b923      	cbnz	r3, 8000fe2 <_malloc_r+0x3e>
 8000fd8:	4621      	mov	r1, r4
 8000fda:	4630      	mov	r0, r6
 8000fdc:	f000 f83c 	bl	8001058 <_sbrk_r>
 8000fe0:	6038      	str	r0, [r7, #0]
 8000fe2:	4629      	mov	r1, r5
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	f000 f837 	bl	8001058 <_sbrk_r>
 8000fea:	1c43      	adds	r3, r0, #1
 8000fec:	d123      	bne.n	8001036 <_malloc_r+0x92>
 8000fee:	230c      	movs	r3, #12
 8000ff0:	6033      	str	r3, [r6, #0]
 8000ff2:	4630      	mov	r0, r6
 8000ff4:	f000 f8e0 	bl	80011b8 <__malloc_unlock>
 8000ff8:	e7e3      	b.n	8000fc2 <_malloc_r+0x1e>
 8000ffa:	6823      	ldr	r3, [r4, #0]
 8000ffc:	1b5b      	subs	r3, r3, r5
 8000ffe:	d417      	bmi.n	8001030 <_malloc_r+0x8c>
 8001000:	2b0b      	cmp	r3, #11
 8001002:	d903      	bls.n	800100c <_malloc_r+0x68>
 8001004:	6023      	str	r3, [r4, #0]
 8001006:	441c      	add	r4, r3
 8001008:	6025      	str	r5, [r4, #0]
 800100a:	e004      	b.n	8001016 <_malloc_r+0x72>
 800100c:	6863      	ldr	r3, [r4, #4]
 800100e:	42a2      	cmp	r2, r4
 8001010:	bf0c      	ite	eq
 8001012:	600b      	streq	r3, [r1, #0]
 8001014:	6053      	strne	r3, [r2, #4]
 8001016:	4630      	mov	r0, r6
 8001018:	f000 f8ce 	bl	80011b8 <__malloc_unlock>
 800101c:	f104 000b 	add.w	r0, r4, #11
 8001020:	1d23      	adds	r3, r4, #4
 8001022:	f020 0007 	bic.w	r0, r0, #7
 8001026:	1ac2      	subs	r2, r0, r3
 8001028:	d0cc      	beq.n	8000fc4 <_malloc_r+0x20>
 800102a:	1a1b      	subs	r3, r3, r0
 800102c:	50a3      	str	r3, [r4, r2]
 800102e:	e7c9      	b.n	8000fc4 <_malloc_r+0x20>
 8001030:	4622      	mov	r2, r4
 8001032:	6864      	ldr	r4, [r4, #4]
 8001034:	e7cc      	b.n	8000fd0 <_malloc_r+0x2c>
 8001036:	1cc4      	adds	r4, r0, #3
 8001038:	f024 0403 	bic.w	r4, r4, #3
 800103c:	42a0      	cmp	r0, r4
 800103e:	d0e3      	beq.n	8001008 <_malloc_r+0x64>
 8001040:	1a21      	subs	r1, r4, r0
 8001042:	4630      	mov	r0, r6
 8001044:	f000 f808 	bl	8001058 <_sbrk_r>
 8001048:	3001      	adds	r0, #1
 800104a:	d1dd      	bne.n	8001008 <_malloc_r+0x64>
 800104c:	e7cf      	b.n	8000fee <_malloc_r+0x4a>
 800104e:	bf00      	nop
 8001050:	20000098 	.word	0x20000098
 8001054:	2000009c 	.word	0x2000009c

08001058 <_sbrk_r>:
 8001058:	b538      	push	{r3, r4, r5, lr}
 800105a:	4d06      	ldr	r5, [pc, #24]	; (8001074 <_sbrk_r+0x1c>)
 800105c:	2300      	movs	r3, #0
 800105e:	4604      	mov	r4, r0
 8001060:	4608      	mov	r0, r1
 8001062:	602b      	str	r3, [r5, #0]
 8001064:	f7ff fb68 	bl	8000738 <_sbrk>
 8001068:	1c43      	adds	r3, r0, #1
 800106a:	d102      	bne.n	8001072 <_sbrk_r+0x1a>
 800106c:	682b      	ldr	r3, [r5, #0]
 800106e:	b103      	cbz	r3, 8001072 <_sbrk_r+0x1a>
 8001070:	6023      	str	r3, [r4, #0]
 8001072:	bd38      	pop	{r3, r4, r5, pc}
 8001074:	200000bc 	.word	0x200000bc

08001078 <__sread>:
 8001078:	b510      	push	{r4, lr}
 800107a:	460c      	mov	r4, r1
 800107c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001080:	f000 f8a0 	bl	80011c4 <_read_r>
 8001084:	2800      	cmp	r0, #0
 8001086:	bfab      	itete	ge
 8001088:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800108a:	89a3      	ldrhlt	r3, [r4, #12]
 800108c:	181b      	addge	r3, r3, r0
 800108e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001092:	bfac      	ite	ge
 8001094:	6563      	strge	r3, [r4, #84]	; 0x54
 8001096:	81a3      	strhlt	r3, [r4, #12]
 8001098:	bd10      	pop	{r4, pc}

0800109a <__swrite>:
 800109a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800109e:	461f      	mov	r7, r3
 80010a0:	898b      	ldrh	r3, [r1, #12]
 80010a2:	05db      	lsls	r3, r3, #23
 80010a4:	4605      	mov	r5, r0
 80010a6:	460c      	mov	r4, r1
 80010a8:	4616      	mov	r6, r2
 80010aa:	d505      	bpl.n	80010b8 <__swrite+0x1e>
 80010ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010b0:	2302      	movs	r3, #2
 80010b2:	2200      	movs	r2, #0
 80010b4:	f000 f868 	bl	8001188 <_lseek_r>
 80010b8:	89a3      	ldrh	r3, [r4, #12]
 80010ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80010be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80010c2:	81a3      	strh	r3, [r4, #12]
 80010c4:	4632      	mov	r2, r6
 80010c6:	463b      	mov	r3, r7
 80010c8:	4628      	mov	r0, r5
 80010ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80010ce:	f000 b817 	b.w	8001100 <_write_r>

080010d2 <__sseek>:
 80010d2:	b510      	push	{r4, lr}
 80010d4:	460c      	mov	r4, r1
 80010d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010da:	f000 f855 	bl	8001188 <_lseek_r>
 80010de:	1c43      	adds	r3, r0, #1
 80010e0:	89a3      	ldrh	r3, [r4, #12]
 80010e2:	bf15      	itete	ne
 80010e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80010e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80010ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80010ee:	81a3      	strheq	r3, [r4, #12]
 80010f0:	bf18      	it	ne
 80010f2:	81a3      	strhne	r3, [r4, #12]
 80010f4:	bd10      	pop	{r4, pc}

080010f6 <__sclose>:
 80010f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010fa:	f000 b813 	b.w	8001124 <_close_r>
	...

08001100 <_write_r>:
 8001100:	b538      	push	{r3, r4, r5, lr}
 8001102:	4d07      	ldr	r5, [pc, #28]	; (8001120 <_write_r+0x20>)
 8001104:	4604      	mov	r4, r0
 8001106:	4608      	mov	r0, r1
 8001108:	4611      	mov	r1, r2
 800110a:	2200      	movs	r2, #0
 800110c:	602a      	str	r2, [r5, #0]
 800110e:	461a      	mov	r2, r3
 8001110:	f7ff fac1 	bl	8000696 <_write>
 8001114:	1c43      	adds	r3, r0, #1
 8001116:	d102      	bne.n	800111e <_write_r+0x1e>
 8001118:	682b      	ldr	r3, [r5, #0]
 800111a:	b103      	cbz	r3, 800111e <_write_r+0x1e>
 800111c:	6023      	str	r3, [r4, #0]
 800111e:	bd38      	pop	{r3, r4, r5, pc}
 8001120:	200000bc 	.word	0x200000bc

08001124 <_close_r>:
 8001124:	b538      	push	{r3, r4, r5, lr}
 8001126:	4d06      	ldr	r5, [pc, #24]	; (8001140 <_close_r+0x1c>)
 8001128:	2300      	movs	r3, #0
 800112a:	4604      	mov	r4, r0
 800112c:	4608      	mov	r0, r1
 800112e:	602b      	str	r3, [r5, #0]
 8001130:	f7ff facd 	bl	80006ce <_close>
 8001134:	1c43      	adds	r3, r0, #1
 8001136:	d102      	bne.n	800113e <_close_r+0x1a>
 8001138:	682b      	ldr	r3, [r5, #0]
 800113a:	b103      	cbz	r3, 800113e <_close_r+0x1a>
 800113c:	6023      	str	r3, [r4, #0]
 800113e:	bd38      	pop	{r3, r4, r5, pc}
 8001140:	200000bc 	.word	0x200000bc

08001144 <_fstat_r>:
 8001144:	b538      	push	{r3, r4, r5, lr}
 8001146:	4d07      	ldr	r5, [pc, #28]	; (8001164 <_fstat_r+0x20>)
 8001148:	2300      	movs	r3, #0
 800114a:	4604      	mov	r4, r0
 800114c:	4608      	mov	r0, r1
 800114e:	4611      	mov	r1, r2
 8001150:	602b      	str	r3, [r5, #0]
 8001152:	f7ff fac8 	bl	80006e6 <_fstat>
 8001156:	1c43      	adds	r3, r0, #1
 8001158:	d102      	bne.n	8001160 <_fstat_r+0x1c>
 800115a:	682b      	ldr	r3, [r5, #0]
 800115c:	b103      	cbz	r3, 8001160 <_fstat_r+0x1c>
 800115e:	6023      	str	r3, [r4, #0]
 8001160:	bd38      	pop	{r3, r4, r5, pc}
 8001162:	bf00      	nop
 8001164:	200000bc 	.word	0x200000bc

08001168 <_isatty_r>:
 8001168:	b538      	push	{r3, r4, r5, lr}
 800116a:	4d06      	ldr	r5, [pc, #24]	; (8001184 <_isatty_r+0x1c>)
 800116c:	2300      	movs	r3, #0
 800116e:	4604      	mov	r4, r0
 8001170:	4608      	mov	r0, r1
 8001172:	602b      	str	r3, [r5, #0]
 8001174:	f7ff fac7 	bl	8000706 <_isatty>
 8001178:	1c43      	adds	r3, r0, #1
 800117a:	d102      	bne.n	8001182 <_isatty_r+0x1a>
 800117c:	682b      	ldr	r3, [r5, #0]
 800117e:	b103      	cbz	r3, 8001182 <_isatty_r+0x1a>
 8001180:	6023      	str	r3, [r4, #0]
 8001182:	bd38      	pop	{r3, r4, r5, pc}
 8001184:	200000bc 	.word	0x200000bc

08001188 <_lseek_r>:
 8001188:	b538      	push	{r3, r4, r5, lr}
 800118a:	4d07      	ldr	r5, [pc, #28]	; (80011a8 <_lseek_r+0x20>)
 800118c:	4604      	mov	r4, r0
 800118e:	4608      	mov	r0, r1
 8001190:	4611      	mov	r1, r2
 8001192:	2200      	movs	r2, #0
 8001194:	602a      	str	r2, [r5, #0]
 8001196:	461a      	mov	r2, r3
 8001198:	f7ff fac0 	bl	800071c <_lseek>
 800119c:	1c43      	adds	r3, r0, #1
 800119e:	d102      	bne.n	80011a6 <_lseek_r+0x1e>
 80011a0:	682b      	ldr	r3, [r5, #0]
 80011a2:	b103      	cbz	r3, 80011a6 <_lseek_r+0x1e>
 80011a4:	6023      	str	r3, [r4, #0]
 80011a6:	bd38      	pop	{r3, r4, r5, pc}
 80011a8:	200000bc 	.word	0x200000bc

080011ac <__malloc_lock>:
 80011ac:	4801      	ldr	r0, [pc, #4]	; (80011b4 <__malloc_lock+0x8>)
 80011ae:	f7ff be43 	b.w	8000e38 <__retarget_lock_acquire_recursive>
 80011b2:	bf00      	nop
 80011b4:	200000b4 	.word	0x200000b4

080011b8 <__malloc_unlock>:
 80011b8:	4801      	ldr	r0, [pc, #4]	; (80011c0 <__malloc_unlock+0x8>)
 80011ba:	f7ff be3e 	b.w	8000e3a <__retarget_lock_release_recursive>
 80011be:	bf00      	nop
 80011c0:	200000b4 	.word	0x200000b4

080011c4 <_read_r>:
 80011c4:	b538      	push	{r3, r4, r5, lr}
 80011c6:	4d07      	ldr	r5, [pc, #28]	; (80011e4 <_read_r+0x20>)
 80011c8:	4604      	mov	r4, r0
 80011ca:	4608      	mov	r0, r1
 80011cc:	4611      	mov	r1, r2
 80011ce:	2200      	movs	r2, #0
 80011d0:	602a      	str	r2, [r5, #0]
 80011d2:	461a      	mov	r2, r3
 80011d4:	f7ff fa42 	bl	800065c <_read>
 80011d8:	1c43      	adds	r3, r0, #1
 80011da:	d102      	bne.n	80011e2 <_read_r+0x1e>
 80011dc:	682b      	ldr	r3, [r5, #0]
 80011de:	b103      	cbz	r3, 80011e2 <_read_r+0x1e>
 80011e0:	6023      	str	r3, [r4, #0]
 80011e2:	bd38      	pop	{r3, r4, r5, pc}
 80011e4:	200000bc 	.word	0x200000bc

080011e8 <_init>:
 80011e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011ea:	bf00      	nop
 80011ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011ee:	bc08      	pop	{r3}
 80011f0:	469e      	mov	lr, r3
 80011f2:	4770      	bx	lr

080011f4 <_fini>:
 80011f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011f6:	bf00      	nop
 80011f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011fa:	bc08      	pop	{r3}
 80011fc:	469e      	mov	lr, r3
 80011fe:	4770      	bx	lr
