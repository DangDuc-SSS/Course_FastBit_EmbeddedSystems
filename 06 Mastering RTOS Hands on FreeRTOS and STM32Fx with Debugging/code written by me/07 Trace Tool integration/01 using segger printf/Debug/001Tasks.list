
001Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bfc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08005d8c  08005d8c  00015d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f1c  08005f1c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08005f1c  08005f1c  00015f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f24  08005f24  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f24  08005f24  00015f24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f28  08005f28  00015f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005f2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00014428  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200144a0  200144a0  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015910  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002afd  00000000  00000000  000359b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010c0  00000000  00000000  000384b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f68  00000000  00000000  00039578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002328b  00000000  00000000  0003a4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012a51  00000000  00000000  0005d76b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d67a9  00000000  00000000  000701bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00146965  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004990  00000000  00000000  001469b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005d74 	.word	0x08005d74

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08005d74 	.word	0x08005d74

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	200143e8 	.word	0x200143e8
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b96e 	b.w	8000604 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468c      	mov	ip, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	f040 8083 	bne.w	8000456 <__udivmoddi4+0x116>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d947      	bls.n	80003e6 <__udivmoddi4+0xa6>
 8000356:	fab2 f282 	clz	r2, r2
 800035a:	b142      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035c:	f1c2 0020 	rsb	r0, r2, #32
 8000360:	fa24 f000 	lsr.w	r0, r4, r0
 8000364:	4091      	lsls	r1, r2
 8000366:	4097      	lsls	r7, r2
 8000368:	ea40 0c01 	orr.w	ip, r0, r1
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbbc f6f8 	udiv	r6, ip, r8
 8000378:	fa1f fe87 	uxth.w	lr, r7
 800037c:	fb08 c116 	mls	r1, r8, r6, ip
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f10e 	mul.w	r1, r6, lr
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000392:	f080 8119 	bcs.w	80005c8 <__udivmoddi4+0x288>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8116 	bls.w	80005c8 <__udivmoddi4+0x288>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003b4:	45a6      	cmp	lr, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80003be:	f080 8105 	bcs.w	80005cc <__udivmoddi4+0x28c>
 80003c2:	45a6      	cmp	lr, r4
 80003c4:	f240 8102 	bls.w	80005cc <__udivmoddi4+0x28c>
 80003c8:	3802      	subs	r0, #2
 80003ca:	443c      	add	r4, r7
 80003cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d0:	eba4 040e 	sub.w	r4, r4, lr
 80003d4:	2600      	movs	r6, #0
 80003d6:	b11d      	cbz	r5, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c5 4300 	strd	r4, r3, [r5]
 80003e0:	4631      	mov	r1, r6
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	b902      	cbnz	r2, 80003ea <__udivmoddi4+0xaa>
 80003e8:	deff      	udf	#255	; 0xff
 80003ea:	fab2 f282 	clz	r2, r2
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	d150      	bne.n	8000494 <__udivmoddi4+0x154>
 80003f2:	1bcb      	subs	r3, r1, r7
 80003f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f8:	fa1f f887 	uxth.w	r8, r7
 80003fc:	2601      	movs	r6, #1
 80003fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000402:	0c21      	lsrs	r1, r4, #16
 8000404:	fb0e 331c 	mls	r3, lr, ip, r3
 8000408:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800040c:	fb08 f30c 	mul.w	r3, r8, ip
 8000410:	428b      	cmp	r3, r1
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000414:	1879      	adds	r1, r7, r1
 8000416:	f10c 30ff 	add.w	r0, ip, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0xe2>
 800041c:	428b      	cmp	r3, r1
 800041e:	f200 80e9 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 8000422:	4684      	mov	ip, r0
 8000424:	1ac9      	subs	r1, r1, r3
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb1 f0fe 	udiv	r0, r1, lr
 800042c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000430:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000434:	fb08 f800 	mul.w	r8, r8, r0
 8000438:	45a0      	cmp	r8, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x10c>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x10a>
 8000444:	45a0      	cmp	r8, r4
 8000446:	f200 80d9 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 0408 	sub.w	r4, r4, r8
 8000450:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000454:	e7bf      	b.n	80003d6 <__udivmoddi4+0x96>
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0x12e>
 800045a:	2d00      	cmp	r5, #0
 800045c:	f000 80b1 	beq.w	80005c2 <__udivmoddi4+0x282>
 8000460:	2600      	movs	r6, #0
 8000462:	e9c5 0100 	strd	r0, r1, [r5]
 8000466:	4630      	mov	r0, r6
 8000468:	4631      	mov	r1, r6
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f683 	clz	r6, r3
 8000472:	2e00      	cmp	r6, #0
 8000474:	d14a      	bne.n	800050c <__udivmoddi4+0x1cc>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0x140>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80b8 	bhi.w	80005f0 <__udivmoddi4+0x2b0>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0103 	sbc.w	r1, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	468c      	mov	ip, r1
 800048a:	2d00      	cmp	r5, #0
 800048c:	d0a8      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800048e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000492:	e7a5      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000494:	f1c2 0320 	rsb	r3, r2, #32
 8000498:	fa20 f603 	lsr.w	r6, r0, r3
 800049c:	4097      	lsls	r7, r2
 800049e:	fa01 f002 	lsl.w	r0, r1, r2
 80004a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a6:	40d9      	lsrs	r1, r3
 80004a8:	4330      	orrs	r0, r6
 80004aa:	0c03      	lsrs	r3, r0, #16
 80004ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80004b0:	fa1f f887 	uxth.w	r8, r7
 80004b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb06 f108 	mul.w	r1, r6, r8
 80004c0:	4299      	cmp	r1, r3
 80004c2:	fa04 f402 	lsl.w	r4, r4, r2
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x19c>
 80004c8:	18fb      	adds	r3, r7, r3
 80004ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ce:	f080 808d 	bcs.w	80005ec <__udivmoddi4+0x2ac>
 80004d2:	4299      	cmp	r1, r3
 80004d4:	f240 808a 	bls.w	80005ec <__udivmoddi4+0x2ac>
 80004d8:	3e02      	subs	r6, #2
 80004da:	443b      	add	r3, r7
 80004dc:	1a5b      	subs	r3, r3, r1
 80004de:	b281      	uxth	r1, r0
 80004e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ec:	fb00 f308 	mul.w	r3, r0, r8
 80004f0:	428b      	cmp	r3, r1
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x1c4>
 80004f4:	1879      	adds	r1, r7, r1
 80004f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004fa:	d273      	bcs.n	80005e4 <__udivmoddi4+0x2a4>
 80004fc:	428b      	cmp	r3, r1
 80004fe:	d971      	bls.n	80005e4 <__udivmoddi4+0x2a4>
 8000500:	3802      	subs	r0, #2
 8000502:	4439      	add	r1, r7
 8000504:	1acb      	subs	r3, r1, r3
 8000506:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800050a:	e778      	b.n	80003fe <__udivmoddi4+0xbe>
 800050c:	f1c6 0c20 	rsb	ip, r6, #32
 8000510:	fa03 f406 	lsl.w	r4, r3, r6
 8000514:	fa22 f30c 	lsr.w	r3, r2, ip
 8000518:	431c      	orrs	r4, r3
 800051a:	fa20 f70c 	lsr.w	r7, r0, ip
 800051e:	fa01 f306 	lsl.w	r3, r1, r6
 8000522:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000526:	fa21 f10c 	lsr.w	r1, r1, ip
 800052a:	431f      	orrs	r7, r3
 800052c:	0c3b      	lsrs	r3, r7, #16
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fa1f f884 	uxth.w	r8, r4
 8000536:	fb0e 1119 	mls	r1, lr, r9, r1
 800053a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800053e:	fb09 fa08 	mul.w	sl, r9, r8
 8000542:	458a      	cmp	sl, r1
 8000544:	fa02 f206 	lsl.w	r2, r2, r6
 8000548:	fa00 f306 	lsl.w	r3, r0, r6
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x220>
 800054e:	1861      	adds	r1, r4, r1
 8000550:	f109 30ff 	add.w	r0, r9, #4294967295
 8000554:	d248      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 8000556:	458a      	cmp	sl, r1
 8000558:	d946      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4421      	add	r1, r4
 8000560:	eba1 010a 	sub.w	r1, r1, sl
 8000564:	b2bf      	uxth	r7, r7
 8000566:	fbb1 f0fe 	udiv	r0, r1, lr
 800056a:	fb0e 1110 	mls	r1, lr, r0, r1
 800056e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000572:	fb00 f808 	mul.w	r8, r0, r8
 8000576:	45b8      	cmp	r8, r7
 8000578:	d907      	bls.n	800058a <__udivmoddi4+0x24a>
 800057a:	19e7      	adds	r7, r4, r7
 800057c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000580:	d22e      	bcs.n	80005e0 <__udivmoddi4+0x2a0>
 8000582:	45b8      	cmp	r8, r7
 8000584:	d92c      	bls.n	80005e0 <__udivmoddi4+0x2a0>
 8000586:	3802      	subs	r0, #2
 8000588:	4427      	add	r7, r4
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	eba7 0708 	sub.w	r7, r7, r8
 8000592:	fba0 8902 	umull	r8, r9, r0, r2
 8000596:	454f      	cmp	r7, r9
 8000598:	46c6      	mov	lr, r8
 800059a:	4649      	mov	r1, r9
 800059c:	d31a      	bcc.n	80005d4 <__udivmoddi4+0x294>
 800059e:	d017      	beq.n	80005d0 <__udivmoddi4+0x290>
 80005a0:	b15d      	cbz	r5, 80005ba <__udivmoddi4+0x27a>
 80005a2:	ebb3 020e 	subs.w	r2, r3, lr
 80005a6:	eb67 0701 	sbc.w	r7, r7, r1
 80005aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005ae:	40f2      	lsrs	r2, r6
 80005b0:	ea4c 0202 	orr.w	r2, ip, r2
 80005b4:	40f7      	lsrs	r7, r6
 80005b6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ba:	2600      	movs	r6, #0
 80005bc:	4631      	mov	r1, r6
 80005be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c2:	462e      	mov	r6, r5
 80005c4:	4628      	mov	r0, r5
 80005c6:	e70b      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005c8:	4606      	mov	r6, r0
 80005ca:	e6e9      	b.n	80003a0 <__udivmoddi4+0x60>
 80005cc:	4618      	mov	r0, r3
 80005ce:	e6fd      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d0:	4543      	cmp	r3, r8
 80005d2:	d2e5      	bcs.n	80005a0 <__udivmoddi4+0x260>
 80005d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d8:	eb69 0104 	sbc.w	r1, r9, r4
 80005dc:	3801      	subs	r0, #1
 80005de:	e7df      	b.n	80005a0 <__udivmoddi4+0x260>
 80005e0:	4608      	mov	r0, r1
 80005e2:	e7d2      	b.n	800058a <__udivmoddi4+0x24a>
 80005e4:	4660      	mov	r0, ip
 80005e6:	e78d      	b.n	8000504 <__udivmoddi4+0x1c4>
 80005e8:	4681      	mov	r9, r0
 80005ea:	e7b9      	b.n	8000560 <__udivmoddi4+0x220>
 80005ec:	4666      	mov	r6, ip
 80005ee:	e775      	b.n	80004dc <__udivmoddi4+0x19c>
 80005f0:	4630      	mov	r0, r6
 80005f2:	e74a      	b.n	800048a <__udivmoddi4+0x14a>
 80005f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f8:	4439      	add	r1, r7
 80005fa:	e713      	b.n	8000424 <__udivmoddi4+0xe4>
 80005fc:	3802      	subs	r0, #2
 80005fe:	443c      	add	r4, r7
 8000600:	e724      	b.n	800044c <__udivmoddi4+0x10c>
 8000602:	bf00      	nop

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b088      	sub	sp, #32
 800060c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060e:	f000 fb4d 	bl	8000cac <HAL_Init>

  /* USER CODE BEGIN Init */

  // Enable the CYCCNT counter
  DWT_CTRL |= (1 << 0);
 8000612:	4b22      	ldr	r3, [pc, #136]	; (800069c <main+0x94>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4a21      	ldr	r2, [pc, #132]	; (800069c <main+0x94>)
 8000618:	f043 0301 	orr.w	r3, r3, #1
 800061c:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 800061e:	f002 ffa1 	bl	8003564 <SEGGER_SYSVIEW_Conf>

  SEGGER_SYSVIEW_Start();
 8000622:	f004 f9c1 	bl	80049a8 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(task1_handler, "Task-1", 200, "Hello World from Task-1", 2, &task1_handle);
 8000626:	f107 0308 	add.w	r3, r7, #8
 800062a:	9301      	str	r3, [sp, #4]
 800062c:	2302      	movs	r3, #2
 800062e:	9300      	str	r3, [sp, #0]
 8000630:	4b1b      	ldr	r3, [pc, #108]	; (80006a0 <main+0x98>)
 8000632:	22c8      	movs	r2, #200	; 0xc8
 8000634:	491b      	ldr	r1, [pc, #108]	; (80006a4 <main+0x9c>)
 8000636:	481c      	ldr	r0, [pc, #112]	; (80006a8 <main+0xa0>)
 8000638:	f001 fda9 	bl	800218e <xTaskCreate>
 800063c:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 800063e:	697b      	ldr	r3, [r7, #20]
 8000640:	2b01      	cmp	r3, #1
 8000642:	d00a      	beq.n	800065a <main+0x52>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000648:	f383 8811 	msr	BASEPRI, r3
 800064c:	f3bf 8f6f 	isb	sy
 8000650:	f3bf 8f4f 	dsb	sy
 8000654:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000656:	bf00      	nop
 8000658:	e7fe      	b.n	8000658 <main+0x50>

  status = xTaskCreate(task2_handler, "Task-2", 200, "Hello World from Task-2", 2, &task2_handle);
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	9301      	str	r3, [sp, #4]
 800065e:	2302      	movs	r3, #2
 8000660:	9300      	str	r3, [sp, #0]
 8000662:	4b12      	ldr	r3, [pc, #72]	; (80006ac <main+0xa4>)
 8000664:	22c8      	movs	r2, #200	; 0xc8
 8000666:	4912      	ldr	r1, [pc, #72]	; (80006b0 <main+0xa8>)
 8000668:	4812      	ldr	r0, [pc, #72]	; (80006b4 <main+0xac>)
 800066a:	f001 fd90 	bl	800218e <xTaskCreate>
 800066e:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d00a      	beq.n	800068c <main+0x84>
        __asm volatile
 8000676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800067a:	f383 8811 	msr	BASEPRI, r3
 800067e:	f3bf 8f6f 	isb	sy
 8000682:	f3bf 8f4f 	dsb	sy
 8000686:	60fb      	str	r3, [r7, #12]
    }
 8000688:	bf00      	nop
 800068a:	e7fe      	b.n	800068a <main+0x82>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800068c:	f000 f814 	bl	80006b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000690:	f000 f87c 	bl	800078c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  // start the freeRTOS schedular
  vTaskStartScheduler();
 8000694:	f001 ff06 	bl	80024a4 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000698:	e7fe      	b.n	8000698 <main+0x90>
 800069a:	bf00      	nop
 800069c:	e0001000 	.word	0xe0001000
 80006a0:	08005d8c 	.word	0x08005d8c
 80006a4:	08005da4 	.word	0x08005da4
 80006a8:	08000a49 	.word	0x08000a49
 80006ac:	08005dac 	.word	0x08005dac
 80006b0:	08005dc4 	.word	0x08005dc4
 80006b4:	08000a85 	.word	0x08000a85

080006b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b094      	sub	sp, #80	; 0x50
 80006bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006be:	f107 0320 	add.w	r3, r7, #32
 80006c2:	2230      	movs	r2, #48	; 0x30
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f004 ff1e 	bl	8005508 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006cc:	f107 030c 	add.w	r3, r7, #12
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006dc:	2300      	movs	r3, #0
 80006de:	60bb      	str	r3, [r7, #8]
 80006e0:	4b28      	ldr	r3, [pc, #160]	; (8000784 <SystemClock_Config+0xcc>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e4:	4a27      	ldr	r2, [pc, #156]	; (8000784 <SystemClock_Config+0xcc>)
 80006e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ea:	6413      	str	r3, [r2, #64]	; 0x40
 80006ec:	4b25      	ldr	r3, [pc, #148]	; (8000784 <SystemClock_Config+0xcc>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f8:	2300      	movs	r3, #0
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	4b22      	ldr	r3, [pc, #136]	; (8000788 <SystemClock_Config+0xd0>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a21      	ldr	r2, [pc, #132]	; (8000788 <SystemClock_Config+0xd0>)
 8000702:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000706:	6013      	str	r3, [r2, #0]
 8000708:	4b1f      	ldr	r3, [pc, #124]	; (8000788 <SystemClock_Config+0xd0>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000714:	2302      	movs	r3, #2
 8000716:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000718:	2301      	movs	r3, #1
 800071a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800071c:	2310      	movs	r3, #16
 800071e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000720:	2302      	movs	r3, #2
 8000722:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000724:	2300      	movs	r3, #0
 8000726:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000728:	2308      	movs	r3, #8
 800072a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 800072c:	2332      	movs	r3, #50	; 0x32
 800072e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000730:	2304      	movs	r3, #4
 8000732:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000734:	2307      	movs	r3, #7
 8000736:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000738:	f107 0320 	add.w	r3, r7, #32
 800073c:	4618      	mov	r0, r3
 800073e:	f000 fd8f 	bl	8001260 <HAL_RCC_OscConfig>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000748:	f000 f9cc 	bl	8000ae4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074c:	230f      	movs	r3, #15
 800074e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000750:	2302      	movs	r3, #2
 8000752:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000754:	2300      	movs	r3, #0
 8000756:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000758:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800075c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800075e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000762:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000764:	f107 030c 	add.w	r3, r7, #12
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f000 fff0 	bl	8001750 <HAL_RCC_ClockConfig>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000776:	f000 f9b5 	bl	8000ae4 <Error_Handler>
  }
}
 800077a:	bf00      	nop
 800077c:	3750      	adds	r7, #80	; 0x50
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40023800 	.word	0x40023800
 8000788:	40007000 	.word	0x40007000

0800078c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08c      	sub	sp, #48	; 0x30
 8000790:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]
 800079e:	60da      	str	r2, [r3, #12]
 80007a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	61bb      	str	r3, [r7, #24]
 80007a6:	4ba2      	ldr	r3, [pc, #648]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4aa1      	ldr	r2, [pc, #644]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 80007ac:	f043 0310 	orr.w	r3, r3, #16
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b9f      	ldr	r3, [pc, #636]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0310 	and.w	r3, r3, #16
 80007ba:	61bb      	str	r3, [r7, #24]
 80007bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	617b      	str	r3, [r7, #20]
 80007c2:	4b9b      	ldr	r3, [pc, #620]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a9a      	ldr	r2, [pc, #616]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 80007c8:	f043 0304 	orr.w	r3, r3, #4
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b98      	ldr	r3, [pc, #608]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0304 	and.w	r3, r3, #4
 80007d6:	617b      	str	r3, [r7, #20]
 80007d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
 80007de:	4b94      	ldr	r3, [pc, #592]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a93      	ldr	r2, [pc, #588]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 80007e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b91      	ldr	r3, [pc, #580]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007f2:	613b      	str	r3, [r7, #16]
 80007f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	4b8d      	ldr	r3, [pc, #564]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a8c      	ldr	r2, [pc, #560]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b8a      	ldr	r3, [pc, #552]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	60bb      	str	r3, [r7, #8]
 8000816:	4b86      	ldr	r3, [pc, #536]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a85      	ldr	r2, [pc, #532]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b83      	ldr	r3, [pc, #524]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	4b7f      	ldr	r3, [pc, #508]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a7e      	ldr	r2, [pc, #504]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 8000838:	f043 0308 	orr.w	r3, r3, #8
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b7c      	ldr	r3, [pc, #496]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0308 	and.w	r3, r3, #8
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	2108      	movs	r1, #8
 800084e:	4879      	ldr	r0, [pc, #484]	; (8000a34 <MX_GPIO_Init+0x2a8>)
 8000850:	f000 fcec 	bl	800122c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000854:	2201      	movs	r2, #1
 8000856:	2101      	movs	r1, #1
 8000858:	4877      	ldr	r0, [pc, #476]	; (8000a38 <MX_GPIO_Init+0x2ac>)
 800085a:	f000 fce7 	bl	800122c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800085e:	2200      	movs	r2, #0
 8000860:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000864:	4875      	ldr	r0, [pc, #468]	; (8000a3c <MX_GPIO_Init+0x2b0>)
 8000866:	f000 fce1 	bl	800122c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800086a:	2308      	movs	r3, #8
 800086c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086e:	2301      	movs	r3, #1
 8000870:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000876:	2300      	movs	r3, #0
 8000878:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800087a:	f107 031c 	add.w	r3, r7, #28
 800087e:	4619      	mov	r1, r3
 8000880:	486c      	ldr	r0, [pc, #432]	; (8000a34 <MX_GPIO_Init+0x2a8>)
 8000882:	f000 fb37 	bl	8000ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000886:	2301      	movs	r3, #1
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088a:	2301      	movs	r3, #1
 800088c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000892:	2300      	movs	r3, #0
 8000894:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	4619      	mov	r1, r3
 800089c:	4866      	ldr	r0, [pc, #408]	; (8000a38 <MX_GPIO_Init+0x2ac>)
 800089e:	f000 fb29 	bl	8000ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008a2:	2308      	movs	r3, #8
 80008a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a6:	2302      	movs	r3, #2
 80008a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ae:	2300      	movs	r3, #0
 80008b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008b2:	2305      	movs	r3, #5
 80008b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	4619      	mov	r1, r3
 80008bc:	485e      	ldr	r0, [pc, #376]	; (8000a38 <MX_GPIO_Init+0x2ac>)
 80008be:	f000 fb19 	bl	8000ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008c2:	2301      	movs	r3, #1
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008c6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008d0:	f107 031c 	add.w	r3, r7, #28
 80008d4:	4619      	mov	r1, r3
 80008d6:	485a      	ldr	r0, [pc, #360]	; (8000a40 <MX_GPIO_Init+0x2b4>)
 80008d8:	f000 fb0c 	bl	8000ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008dc:	2310      	movs	r3, #16
 80008de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e0:	2302      	movs	r3, #2
 80008e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e8:	2300      	movs	r3, #0
 80008ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008ec:	2306      	movs	r3, #6
 80008ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008f0:	f107 031c 	add.w	r3, r7, #28
 80008f4:	4619      	mov	r1, r3
 80008f6:	4852      	ldr	r0, [pc, #328]	; (8000a40 <MX_GPIO_Init+0x2b4>)
 80008f8:	f000 fafc 	bl	8000ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80008fc:	23e0      	movs	r3, #224	; 0xe0
 80008fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000900:	2302      	movs	r3, #2
 8000902:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000908:	2300      	movs	r3, #0
 800090a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800090c:	2305      	movs	r3, #5
 800090e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000910:	f107 031c 	add.w	r3, r7, #28
 8000914:	4619      	mov	r1, r3
 8000916:	484a      	ldr	r0, [pc, #296]	; (8000a40 <MX_GPIO_Init+0x2b4>)
 8000918:	f000 faec 	bl	8000ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800091c:	2304      	movs	r3, #4
 800091e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000920:	2300      	movs	r3, #0
 8000922:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000928:	f107 031c 	add.w	r3, r7, #28
 800092c:	4619      	mov	r1, r3
 800092e:	4845      	ldr	r0, [pc, #276]	; (8000a44 <MX_GPIO_Init+0x2b8>)
 8000930:	f000 fae0 	bl	8000ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000934:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093a:	2302      	movs	r3, #2
 800093c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000942:	2300      	movs	r3, #0
 8000944:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000946:	2305      	movs	r3, #5
 8000948:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800094a:	f107 031c 	add.w	r3, r7, #28
 800094e:	4619      	mov	r1, r3
 8000950:	483c      	ldr	r0, [pc, #240]	; (8000a44 <MX_GPIO_Init+0x2b8>)
 8000952:	f000 facf 	bl	8000ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000956:	f24f 0310 	movw	r3, #61456	; 0xf010
 800095a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095c:	2301      	movs	r3, #1
 800095e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000964:	2300      	movs	r3, #0
 8000966:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000968:	f107 031c 	add.w	r3, r7, #28
 800096c:	4619      	mov	r1, r3
 800096e:	4833      	ldr	r0, [pc, #204]	; (8000a3c <MX_GPIO_Init+0x2b0>)
 8000970:	f000 fac0 	bl	8000ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000974:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097a:	2302      	movs	r3, #2
 800097c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000986:	2306      	movs	r3, #6
 8000988:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4619      	mov	r1, r3
 8000990:	4829      	ldr	r0, [pc, #164]	; (8000a38 <MX_GPIO_Init+0x2ac>)
 8000992:	f000 faaf 	bl	8000ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000996:	f44f 7300 	mov.w	r3, #512	; 0x200
 800099a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800099c:	2300      	movs	r3, #0
 800099e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80009a4:	f107 031c 	add.w	r3, r7, #28
 80009a8:	4619      	mov	r1, r3
 80009aa:	4825      	ldr	r0, [pc, #148]	; (8000a40 <MX_GPIO_Init+0x2b4>)
 80009ac:	f000 faa2 	bl	8000ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80009b0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80009b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b6:	2302      	movs	r3, #2
 80009b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009be:	2300      	movs	r3, #0
 80009c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009c2:	230a      	movs	r3, #10
 80009c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	4619      	mov	r1, r3
 80009cc:	481c      	ldr	r0, [pc, #112]	; (8000a40 <MX_GPIO_Init+0x2b4>)
 80009ce:	f000 fa91 	bl	8000ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009d2:	2320      	movs	r3, #32
 80009d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d6:	2300      	movs	r3, #0
 80009d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	4619      	mov	r1, r3
 80009e4:	4815      	ldr	r0, [pc, #84]	; (8000a3c <MX_GPIO_Init+0x2b0>)
 80009e6:	f000 fa85 	bl	8000ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009ea:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009f0:	2312      	movs	r3, #18
 80009f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f8:	2300      	movs	r3, #0
 80009fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009fc:	2304      	movs	r3, #4
 80009fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a00:	f107 031c 	add.w	r3, r7, #28
 8000a04:	4619      	mov	r1, r3
 8000a06:	480f      	ldr	r0, [pc, #60]	; (8000a44 <MX_GPIO_Init+0x2b8>)
 8000a08:	f000 fa74 	bl	8000ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a10:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4804      	ldr	r0, [pc, #16]	; (8000a34 <MX_GPIO_Init+0x2a8>)
 8000a22:	f000 fa67 	bl	8000ef4 <HAL_GPIO_Init>

}
 8000a26:	bf00      	nop
 8000a28:	3730      	adds	r7, #48	; 0x30
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40023800 	.word	0x40023800
 8000a34:	40021000 	.word	0x40021000
 8000a38:	40020800 	.word	0x40020800
 8000a3c:	40020c00 	.word	0x40020c00
 8000a40:	40020000 	.word	0x40020000
 8000a44:	40020400 	.word	0x40020400

08000a48 <task1_handler>:

/* USER CODE BEGIN 4 */

static void task1_handler(void *parameters)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b09c      	sub	sp, #112	; 0x70
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]

	while(1)
	{
		//printf("%s\n", (char*)parameters);

		sprintf(msg, 100, "%s\n", (char*)parameters);
 8000a50:	f107 000c 	add.w	r0, r7, #12
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4a09      	ldr	r2, [pc, #36]	; (8000a7c <task1_handler+0x34>)
 8000a58:	2164      	movs	r1, #100	; 0x64
 8000a5a:	f004 fd5d 	bl	8005518 <siprintf>

		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000a5e:	f107 030c 	add.w	r3, r7, #12
 8000a62:	4618      	mov	r0, r3
 8000a64:	f004 fca0 	bl	80053a8 <SEGGER_SYSVIEW_PrintfTarget>

		taskYIELD();
 8000a68:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <task1_handler+0x38>)
 8000a6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	f3bf 8f4f 	dsb	sy
 8000a74:	f3bf 8f6f 	isb	sy
		sprintf(msg, 100, "%s\n", (char*)parameters);
 8000a78:	e7ea      	b.n	8000a50 <task1_handler+0x8>
 8000a7a:	bf00      	nop
 8000a7c:	08005dcc 	.word	0x08005dcc
 8000a80:	e000ed04 	.word	0xe000ed04

08000a84 <task2_handler>:
	}
}

static void task2_handler(void *parameters)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b09c      	sub	sp, #112	; 0x70
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]

	while(1)
	{
		//printf("%s\n", (char*)parameters);

		sprintf(msg, 100, "%s\n", (char*)parameters);
 8000a8c:	f107 000c 	add.w	r0, r7, #12
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	4a09      	ldr	r2, [pc, #36]	; (8000ab8 <task2_handler+0x34>)
 8000a94:	2164      	movs	r1, #100	; 0x64
 8000a96:	f004 fd3f 	bl	8005518 <siprintf>

		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000a9a:	f107 030c 	add.w	r3, r7, #12
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f004 fc82 	bl	80053a8 <SEGGER_SYSVIEW_PrintfTarget>

		taskYIELD();
 8000aa4:	4b05      	ldr	r3, [pc, #20]	; (8000abc <task2_handler+0x38>)
 8000aa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	f3bf 8f4f 	dsb	sy
 8000ab0:	f3bf 8f6f 	isb	sy
		sprintf(msg, 100, "%s\n", (char*)parameters);
 8000ab4:	e7ea      	b.n	8000a8c <task2_handler+0x8>
 8000ab6:	bf00      	nop
 8000ab8:	08005dcc 	.word	0x08005dcc
 8000abc:	e000ed04 	.word	0xe000ed04

08000ac0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a04      	ldr	r2, [pc, #16]	; (8000ae0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d101      	bne.n	8000ad6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ad2:	f000 f90d 	bl	8000cf0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40001000 	.word	0x40001000

08000ae4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae8:	b672      	cpsid	i
}
 8000aea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aec:	e7fe      	b.n	8000aec <Error_Handler+0x8>
	...

08000af0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	607b      	str	r3, [r7, #4]
 8000afa:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <HAL_MspInit+0x4c>)
 8000afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afe:	4a0f      	ldr	r2, [pc, #60]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b04:	6453      	str	r3, [r2, #68]	; 0x44
 8000b06:	4b0d      	ldr	r3, [pc, #52]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	603b      	str	r3, [r7, #0]
 8000b16:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1a:	4a08      	ldr	r2, [pc, #32]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b20:	6413      	str	r3, [r2, #64]	; 0x40
 8000b22:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b2a:	603b      	str	r3, [r7, #0]
 8000b2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 8000b2e:	f002 f963 	bl	8002df8 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40023800 	.word	0x40023800

08000b40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08c      	sub	sp, #48	; 0x30
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000b50:	2200      	movs	r2, #0
 8000b52:	6879      	ldr	r1, [r7, #4]
 8000b54:	2036      	movs	r0, #54	; 0x36
 8000b56:	f000 f9a3 	bl	8000ea0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b5a:	2036      	movs	r0, #54	; 0x36
 8000b5c:	f000 f9bc 	bl	8000ed8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b60:	2300      	movs	r3, #0
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	4b1f      	ldr	r3, [pc, #124]	; (8000be4 <HAL_InitTick+0xa4>)
 8000b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b68:	4a1e      	ldr	r2, [pc, #120]	; (8000be4 <HAL_InitTick+0xa4>)
 8000b6a:	f043 0310 	orr.w	r3, r3, #16
 8000b6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b70:	4b1c      	ldr	r3, [pc, #112]	; (8000be4 <HAL_InitTick+0xa4>)
 8000b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b74:	f003 0310 	and.w	r3, r3, #16
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b7c:	f107 0210 	add.w	r2, r7, #16
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	4611      	mov	r1, r2
 8000b86:	4618      	mov	r0, r3
 8000b88:	f000 ffca 	bl	8001b20 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000b8c:	f000 ffb4 	bl	8001af8 <HAL_RCC_GetPCLK1Freq>
 8000b90:	4603      	mov	r3, r0
 8000b92:	005b      	lsls	r3, r3, #1
 8000b94:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b98:	4a13      	ldr	r2, [pc, #76]	; (8000be8 <HAL_InitTick+0xa8>)
 8000b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b9e:	0c9b      	lsrs	r3, r3, #18
 8000ba0:	3b01      	subs	r3, #1
 8000ba2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ba4:	4b11      	ldr	r3, [pc, #68]	; (8000bec <HAL_InitTick+0xac>)
 8000ba6:	4a12      	ldr	r2, [pc, #72]	; (8000bf0 <HAL_InitTick+0xb0>)
 8000ba8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000baa:	4b10      	ldr	r3, [pc, #64]	; (8000bec <HAL_InitTick+0xac>)
 8000bac:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bb0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000bb2:	4a0e      	ldr	r2, [pc, #56]	; (8000bec <HAL_InitTick+0xac>)
 8000bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bb6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000bb8:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <HAL_InitTick+0xac>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bbe:	4b0b      	ldr	r3, [pc, #44]	; (8000bec <HAL_InitTick+0xac>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000bc4:	4809      	ldr	r0, [pc, #36]	; (8000bec <HAL_InitTick+0xac>)
 8000bc6:	f000 ffdd 	bl	8001b84 <HAL_TIM_Base_Init>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d104      	bne.n	8000bda <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000bd0:	4806      	ldr	r0, [pc, #24]	; (8000bec <HAL_InitTick+0xac>)
 8000bd2:	f001 f831 	bl	8001c38 <HAL_TIM_Base_Start_IT>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	e000      	b.n	8000bdc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3730      	adds	r7, #48	; 0x30
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40023800 	.word	0x40023800
 8000be8:	431bde83 	.word	0x431bde83
 8000bec:	2001439c 	.word	0x2001439c
 8000bf0:	40001000 	.word	0x40001000

08000bf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <NMI_Handler+0x4>

08000bfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bfe:	e7fe      	b.n	8000bfe <HardFault_Handler+0x4>

08000c00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <MemManage_Handler+0x4>

08000c06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c0a:	e7fe      	b.n	8000c0a <BusFault_Handler+0x4>

08000c0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <UsageFault_Handler+0x4>

08000c12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c24:	4802      	ldr	r0, [pc, #8]	; (8000c30 <TIM6_DAC_IRQHandler+0x10>)
 8000c26:	f001 f877 	bl	8001d18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	2001439c 	.word	0x2001439c

08000c34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <SystemInit+0x20>)
 8000c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c3e:	4a05      	ldr	r2, [pc, #20]	; (8000c54 <SystemInit+0x20>)
 8000c40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c5c:	480d      	ldr	r0, [pc, #52]	; (8000c94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c5e:	490e      	ldr	r1, [pc, #56]	; (8000c98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c60:	4a0e      	ldr	r2, [pc, #56]	; (8000c9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c64:	e002      	b.n	8000c6c <LoopCopyDataInit>

08000c66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c6a:	3304      	adds	r3, #4

08000c6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c70:	d3f9      	bcc.n	8000c66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c72:	4a0b      	ldr	r2, [pc, #44]	; (8000ca0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c74:	4c0b      	ldr	r4, [pc, #44]	; (8000ca4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c78:	e001      	b.n	8000c7e <LoopFillZerobss>

08000c7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c7c:	3204      	adds	r2, #4

08000c7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c80:	d3fb      	bcc.n	8000c7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c82:	f7ff ffd7 	bl	8000c34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c86:	f004 fbff 	bl	8005488 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c8a:	f7ff fcbd 	bl	8000608 <main>
  bx  lr    
 8000c8e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c98:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000c9c:	08005f2c 	.word	0x08005f2c
  ldr r2, =_sbss
 8000ca0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000ca4:	200144a0 	.word	0x200144a0

08000ca8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ca8:	e7fe      	b.n	8000ca8 <ADC_IRQHandler>
	...

08000cac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cb0:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <HAL_Init+0x40>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a0d      	ldr	r2, [pc, #52]	; (8000cec <HAL_Init+0x40>)
 8000cb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cbc:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <HAL_Init+0x40>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a0a      	ldr	r2, [pc, #40]	; (8000cec <HAL_Init+0x40>)
 8000cc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cc8:	4b08      	ldr	r3, [pc, #32]	; (8000cec <HAL_Init+0x40>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a07      	ldr	r2, [pc, #28]	; (8000cec <HAL_Init+0x40>)
 8000cce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cd4:	2003      	movs	r0, #3
 8000cd6:	f000 f8d8 	bl	8000e8a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cda:	2000      	movs	r0, #0
 8000cdc:	f7ff ff30 	bl	8000b40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ce0:	f7ff ff06 	bl	8000af0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40023c00 	.word	0x40023c00

08000cf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <HAL_IncTick+0x20>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <HAL_IncTick+0x24>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4413      	add	r3, r2
 8000d00:	4a04      	ldr	r2, [pc, #16]	; (8000d14 <HAL_IncTick+0x24>)
 8000d02:	6013      	str	r3, [r2, #0]
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	20000008 	.word	0x20000008
 8000d14:	200143e4 	.word	0x200143e4

08000d18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d1c:	4b03      	ldr	r3, [pc, #12]	; (8000d2c <HAL_GetTick+0x14>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	200143e4 	.word	0x200143e4

08000d30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	f003 0307 	and.w	r3, r3, #7
 8000d3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d40:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <__NVIC_SetPriorityGrouping+0x44>)
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d46:	68ba      	ldr	r2, [r7, #8]
 8000d48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d62:	4a04      	ldr	r2, [pc, #16]	; (8000d74 <__NVIC_SetPriorityGrouping+0x44>)
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	60d3      	str	r3, [r2, #12]
}
 8000d68:	bf00      	nop
 8000d6a:	3714      	adds	r7, #20
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d7c:	4b04      	ldr	r3, [pc, #16]	; (8000d90 <__NVIC_GetPriorityGrouping+0x18>)
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	0a1b      	lsrs	r3, r3, #8
 8000d82:	f003 0307 	and.w	r3, r3, #7
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	db0b      	blt.n	8000dbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000da6:	79fb      	ldrb	r3, [r7, #7]
 8000da8:	f003 021f 	and.w	r2, r3, #31
 8000dac:	4907      	ldr	r1, [pc, #28]	; (8000dcc <__NVIC_EnableIRQ+0x38>)
 8000dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db2:	095b      	lsrs	r3, r3, #5
 8000db4:	2001      	movs	r0, #1
 8000db6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dbe:	bf00      	nop
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	e000e100 	.word	0xe000e100

08000dd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	6039      	str	r1, [r7, #0]
 8000dda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	db0a      	blt.n	8000dfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	b2da      	uxtb	r2, r3
 8000de8:	490c      	ldr	r1, [pc, #48]	; (8000e1c <__NVIC_SetPriority+0x4c>)
 8000dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dee:	0112      	lsls	r2, r2, #4
 8000df0:	b2d2      	uxtb	r2, r2
 8000df2:	440b      	add	r3, r1
 8000df4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000df8:	e00a      	b.n	8000e10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	4908      	ldr	r1, [pc, #32]	; (8000e20 <__NVIC_SetPriority+0x50>)
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	f003 030f 	and.w	r3, r3, #15
 8000e06:	3b04      	subs	r3, #4
 8000e08:	0112      	lsls	r2, r2, #4
 8000e0a:	b2d2      	uxtb	r2, r2
 8000e0c:	440b      	add	r3, r1
 8000e0e:	761a      	strb	r2, [r3, #24]
}
 8000e10:	bf00      	nop
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	e000e100 	.word	0xe000e100
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b089      	sub	sp, #36	; 0x24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	f003 0307 	and.w	r3, r3, #7
 8000e36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	f1c3 0307 	rsb	r3, r3, #7
 8000e3e:	2b04      	cmp	r3, #4
 8000e40:	bf28      	it	cs
 8000e42:	2304      	movcs	r3, #4
 8000e44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	3304      	adds	r3, #4
 8000e4a:	2b06      	cmp	r3, #6
 8000e4c:	d902      	bls.n	8000e54 <NVIC_EncodePriority+0x30>
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	3b03      	subs	r3, #3
 8000e52:	e000      	b.n	8000e56 <NVIC_EncodePriority+0x32>
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e58:	f04f 32ff 	mov.w	r2, #4294967295
 8000e5c:	69bb      	ldr	r3, [r7, #24]
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	43da      	mvns	r2, r3
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	401a      	ands	r2, r3
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	fa01 f303 	lsl.w	r3, r1, r3
 8000e76:	43d9      	mvns	r1, r3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e7c:	4313      	orrs	r3, r2
         );
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3724      	adds	r7, #36	; 0x24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr

08000e8a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b082      	sub	sp, #8
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f7ff ff4c 	bl	8000d30 <__NVIC_SetPriorityGrouping>
}
 8000e98:	bf00      	nop
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
 8000eac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eb2:	f7ff ff61 	bl	8000d78 <__NVIC_GetPriorityGrouping>
 8000eb6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	68b9      	ldr	r1, [r7, #8]
 8000ebc:	6978      	ldr	r0, [r7, #20]
 8000ebe:	f7ff ffb1 	bl	8000e24 <NVIC_EncodePriority>
 8000ec2:	4602      	mov	r2, r0
 8000ec4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ec8:	4611      	mov	r1, r2
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff ff80 	bl	8000dd0 <__NVIC_SetPriority>
}
 8000ed0:	bf00      	nop
 8000ed2:	3718      	adds	r7, #24
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff ff54 	bl	8000d94 <__NVIC_EnableIRQ>
}
 8000eec:	bf00      	nop
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b089      	sub	sp, #36	; 0x24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000efe:	2300      	movs	r3, #0
 8000f00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f02:	2300      	movs	r3, #0
 8000f04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f06:	2300      	movs	r3, #0
 8000f08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61fb      	str	r3, [r7, #28]
 8000f0e:	e16b      	b.n	80011e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f10:	2201      	movs	r2, #1
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	697a      	ldr	r2, [r7, #20]
 8000f20:	4013      	ands	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	f040 815a 	bne.w	80011e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f003 0303 	and.w	r3, r3, #3
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d005      	beq.n	8000f46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	d130      	bne.n	8000fa8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	2203      	movs	r2, #3
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	43db      	mvns	r3, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	68da      	ldr	r2, [r3, #12]
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	43db      	mvns	r3, r3
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	091b      	lsrs	r3, r3, #4
 8000f92:	f003 0201 	and.w	r2, r3, #1
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f003 0303 	and.w	r3, r3, #3
 8000fb0:	2b03      	cmp	r3, #3
 8000fb2:	d017      	beq.n	8000fe4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	2203      	movs	r2, #3
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	689a      	ldr	r2, [r3, #8]
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f003 0303 	and.w	r3, r3, #3
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	d123      	bne.n	8001038 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	08da      	lsrs	r2, r3, #3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	3208      	adds	r2, #8
 8000ff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	f003 0307 	and.w	r3, r3, #7
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	220f      	movs	r2, #15
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	43db      	mvns	r3, r3
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	4013      	ands	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	691a      	ldr	r2, [r3, #16]
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	4313      	orrs	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	08da      	lsrs	r2, r3, #3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	3208      	adds	r2, #8
 8001032:	69b9      	ldr	r1, [r7, #24]
 8001034:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	2203      	movs	r2, #3
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	43db      	mvns	r3, r3
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4013      	ands	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f003 0203 	and.w	r2, r3, #3
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	4313      	orrs	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001074:	2b00      	cmp	r3, #0
 8001076:	f000 80b4 	beq.w	80011e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	4b60      	ldr	r3, [pc, #384]	; (8001200 <HAL_GPIO_Init+0x30c>)
 8001080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001082:	4a5f      	ldr	r2, [pc, #380]	; (8001200 <HAL_GPIO_Init+0x30c>)
 8001084:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001088:	6453      	str	r3, [r2, #68]	; 0x44
 800108a:	4b5d      	ldr	r3, [pc, #372]	; (8001200 <HAL_GPIO_Init+0x30c>)
 800108c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001096:	4a5b      	ldr	r2, [pc, #364]	; (8001204 <HAL_GPIO_Init+0x310>)
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	089b      	lsrs	r3, r3, #2
 800109c:	3302      	adds	r3, #2
 800109e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	f003 0303 	and.w	r3, r3, #3
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	220f      	movs	r2, #15
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43db      	mvns	r3, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4013      	ands	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a52      	ldr	r2, [pc, #328]	; (8001208 <HAL_GPIO_Init+0x314>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d02b      	beq.n	800111a <HAL_GPIO_Init+0x226>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a51      	ldr	r2, [pc, #324]	; (800120c <HAL_GPIO_Init+0x318>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d025      	beq.n	8001116 <HAL_GPIO_Init+0x222>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a50      	ldr	r2, [pc, #320]	; (8001210 <HAL_GPIO_Init+0x31c>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d01f      	beq.n	8001112 <HAL_GPIO_Init+0x21e>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a4f      	ldr	r2, [pc, #316]	; (8001214 <HAL_GPIO_Init+0x320>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d019      	beq.n	800110e <HAL_GPIO_Init+0x21a>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a4e      	ldr	r2, [pc, #312]	; (8001218 <HAL_GPIO_Init+0x324>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d013      	beq.n	800110a <HAL_GPIO_Init+0x216>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a4d      	ldr	r2, [pc, #308]	; (800121c <HAL_GPIO_Init+0x328>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d00d      	beq.n	8001106 <HAL_GPIO_Init+0x212>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a4c      	ldr	r2, [pc, #304]	; (8001220 <HAL_GPIO_Init+0x32c>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d007      	beq.n	8001102 <HAL_GPIO_Init+0x20e>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a4b      	ldr	r2, [pc, #300]	; (8001224 <HAL_GPIO_Init+0x330>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d101      	bne.n	80010fe <HAL_GPIO_Init+0x20a>
 80010fa:	2307      	movs	r3, #7
 80010fc:	e00e      	b.n	800111c <HAL_GPIO_Init+0x228>
 80010fe:	2308      	movs	r3, #8
 8001100:	e00c      	b.n	800111c <HAL_GPIO_Init+0x228>
 8001102:	2306      	movs	r3, #6
 8001104:	e00a      	b.n	800111c <HAL_GPIO_Init+0x228>
 8001106:	2305      	movs	r3, #5
 8001108:	e008      	b.n	800111c <HAL_GPIO_Init+0x228>
 800110a:	2304      	movs	r3, #4
 800110c:	e006      	b.n	800111c <HAL_GPIO_Init+0x228>
 800110e:	2303      	movs	r3, #3
 8001110:	e004      	b.n	800111c <HAL_GPIO_Init+0x228>
 8001112:	2302      	movs	r3, #2
 8001114:	e002      	b.n	800111c <HAL_GPIO_Init+0x228>
 8001116:	2301      	movs	r3, #1
 8001118:	e000      	b.n	800111c <HAL_GPIO_Init+0x228>
 800111a:	2300      	movs	r3, #0
 800111c:	69fa      	ldr	r2, [r7, #28]
 800111e:	f002 0203 	and.w	r2, r2, #3
 8001122:	0092      	lsls	r2, r2, #2
 8001124:	4093      	lsls	r3, r2
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4313      	orrs	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800112c:	4935      	ldr	r1, [pc, #212]	; (8001204 <HAL_GPIO_Init+0x310>)
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	089b      	lsrs	r3, r3, #2
 8001132:	3302      	adds	r3, #2
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800113a:	4b3b      	ldr	r3, [pc, #236]	; (8001228 <HAL_GPIO_Init+0x334>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	43db      	mvns	r3, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4013      	ands	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d003      	beq.n	800115e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	4313      	orrs	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800115e:	4a32      	ldr	r2, [pc, #200]	; (8001228 <HAL_GPIO_Init+0x334>)
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001164:	4b30      	ldr	r3, [pc, #192]	; (8001228 <HAL_GPIO_Init+0x334>)
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	43db      	mvns	r3, r3
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4013      	ands	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117c:	2b00      	cmp	r3, #0
 800117e:	d003      	beq.n	8001188 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	4313      	orrs	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001188:	4a27      	ldr	r2, [pc, #156]	; (8001228 <HAL_GPIO_Init+0x334>)
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800118e:	4b26      	ldr	r3, [pc, #152]	; (8001228 <HAL_GPIO_Init+0x334>)
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	43db      	mvns	r3, r3
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	4013      	ands	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d003      	beq.n	80011b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011b2:	4a1d      	ldr	r2, [pc, #116]	; (8001228 <HAL_GPIO_Init+0x334>)
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011b8:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <HAL_GPIO_Init+0x334>)
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	43db      	mvns	r3, r3
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4013      	ands	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d003      	beq.n	80011dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	4313      	orrs	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011dc:	4a12      	ldr	r2, [pc, #72]	; (8001228 <HAL_GPIO_Init+0x334>)
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3301      	adds	r3, #1
 80011e6:	61fb      	str	r3, [r7, #28]
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	2b0f      	cmp	r3, #15
 80011ec:	f67f ae90 	bls.w	8000f10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011f0:	bf00      	nop
 80011f2:	bf00      	nop
 80011f4:	3724      	adds	r7, #36	; 0x24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	40023800 	.word	0x40023800
 8001204:	40013800 	.word	0x40013800
 8001208:	40020000 	.word	0x40020000
 800120c:	40020400 	.word	0x40020400
 8001210:	40020800 	.word	0x40020800
 8001214:	40020c00 	.word	0x40020c00
 8001218:	40021000 	.word	0x40021000
 800121c:	40021400 	.word	0x40021400
 8001220:	40021800 	.word	0x40021800
 8001224:	40021c00 	.word	0x40021c00
 8001228:	40013c00 	.word	0x40013c00

0800122c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	460b      	mov	r3, r1
 8001236:	807b      	strh	r3, [r7, #2]
 8001238:	4613      	mov	r3, r2
 800123a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800123c:	787b      	ldrb	r3, [r7, #1]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d003      	beq.n	800124a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001242:	887a      	ldrh	r2, [r7, #2]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001248:	e003      	b.n	8001252 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800124a:	887b      	ldrh	r3, [r7, #2]
 800124c:	041a      	lsls	r2, r3, #16
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	619a      	str	r2, [r3, #24]
}
 8001252:	bf00      	nop
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
	...

08001260 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d101      	bne.n	8001272 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e264      	b.n	800173c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	2b00      	cmp	r3, #0
 800127c:	d075      	beq.n	800136a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800127e:	4ba3      	ldr	r3, [pc, #652]	; (800150c <HAL_RCC_OscConfig+0x2ac>)
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	f003 030c 	and.w	r3, r3, #12
 8001286:	2b04      	cmp	r3, #4
 8001288:	d00c      	beq.n	80012a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800128a:	4ba0      	ldr	r3, [pc, #640]	; (800150c <HAL_RCC_OscConfig+0x2ac>)
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001292:	2b08      	cmp	r3, #8
 8001294:	d112      	bne.n	80012bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001296:	4b9d      	ldr	r3, [pc, #628]	; (800150c <HAL_RCC_OscConfig+0x2ac>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800129e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012a2:	d10b      	bne.n	80012bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012a4:	4b99      	ldr	r3, [pc, #612]	; (800150c <HAL_RCC_OscConfig+0x2ac>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d05b      	beq.n	8001368 <HAL_RCC_OscConfig+0x108>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d157      	bne.n	8001368 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	e23f      	b.n	800173c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012c4:	d106      	bne.n	80012d4 <HAL_RCC_OscConfig+0x74>
 80012c6:	4b91      	ldr	r3, [pc, #580]	; (800150c <HAL_RCC_OscConfig+0x2ac>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a90      	ldr	r2, [pc, #576]	; (800150c <HAL_RCC_OscConfig+0x2ac>)
 80012cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012d0:	6013      	str	r3, [r2, #0]
 80012d2:	e01d      	b.n	8001310 <HAL_RCC_OscConfig+0xb0>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012dc:	d10c      	bne.n	80012f8 <HAL_RCC_OscConfig+0x98>
 80012de:	4b8b      	ldr	r3, [pc, #556]	; (800150c <HAL_RCC_OscConfig+0x2ac>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a8a      	ldr	r2, [pc, #552]	; (800150c <HAL_RCC_OscConfig+0x2ac>)
 80012e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012e8:	6013      	str	r3, [r2, #0]
 80012ea:	4b88      	ldr	r3, [pc, #544]	; (800150c <HAL_RCC_OscConfig+0x2ac>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a87      	ldr	r2, [pc, #540]	; (800150c <HAL_RCC_OscConfig+0x2ac>)
 80012f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012f4:	6013      	str	r3, [r2, #0]
 80012f6:	e00b      	b.n	8001310 <HAL_RCC_OscConfig+0xb0>
 80012f8:	4b84      	ldr	r3, [pc, #528]	; (800150c <HAL_RCC_OscConfig+0x2ac>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a83      	ldr	r2, [pc, #524]	; (800150c <HAL_RCC_OscConfig+0x2ac>)
 80012fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001302:	6013      	str	r3, [r2, #0]
 8001304:	4b81      	ldr	r3, [pc, #516]	; (800150c <HAL_RCC_OscConfig+0x2ac>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a80      	ldr	r2, [pc, #512]	; (800150c <HAL_RCC_OscConfig+0x2ac>)
 800130a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800130e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d013      	beq.n	8001340 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001318:	f7ff fcfe 	bl	8000d18 <HAL_GetTick>
 800131c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800131e:	e008      	b.n	8001332 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001320:	f7ff fcfa 	bl	8000d18 <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b64      	cmp	r3, #100	; 0x64
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e204      	b.n	800173c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001332:	4b76      	ldr	r3, [pc, #472]	; (800150c <HAL_RCC_OscConfig+0x2ac>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d0f0      	beq.n	8001320 <HAL_RCC_OscConfig+0xc0>
 800133e:	e014      	b.n	800136a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001340:	f7ff fcea 	bl	8000d18 <HAL_GetTick>
 8001344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001346:	e008      	b.n	800135a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001348:	f7ff fce6 	bl	8000d18 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b64      	cmp	r3, #100	; 0x64
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e1f0      	b.n	800173c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800135a:	4b6c      	ldr	r3, [pc, #432]	; (800150c <HAL_RCC_OscConfig+0x2ac>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d1f0      	bne.n	8001348 <HAL_RCC_OscConfig+0xe8>
 8001366:	e000      	b.n	800136a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001368:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	2b00      	cmp	r3, #0
 8001374:	d063      	beq.n	800143e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001376:	4b65      	ldr	r3, [pc, #404]	; (800150c <HAL_RCC_OscConfig+0x2ac>)
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	f003 030c 	and.w	r3, r3, #12
 800137e:	2b00      	cmp	r3, #0
 8001380:	d00b      	beq.n	800139a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001382:	4b62      	ldr	r3, [pc, #392]	; (800150c <HAL_RCC_OscConfig+0x2ac>)
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800138a:	2b08      	cmp	r3, #8
 800138c:	d11c      	bne.n	80013c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800138e:	4b5f      	ldr	r3, [pc, #380]	; (800150c <HAL_RCC_OscConfig+0x2ac>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d116      	bne.n	80013c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800139a:	4b5c      	ldr	r3, [pc, #368]	; (800150c <HAL_RCC_OscConfig+0x2ac>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d005      	beq.n	80013b2 <HAL_RCC_OscConfig+0x152>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	68db      	ldr	r3, [r3, #12]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d001      	beq.n	80013b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e1c4      	b.n	800173c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b2:	4b56      	ldr	r3, [pc, #344]	; (800150c <HAL_RCC_OscConfig+0x2ac>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	691b      	ldr	r3, [r3, #16]
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	4952      	ldr	r1, [pc, #328]	; (800150c <HAL_RCC_OscConfig+0x2ac>)
 80013c2:	4313      	orrs	r3, r2
 80013c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013c6:	e03a      	b.n	800143e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d020      	beq.n	8001412 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013d0:	4b4f      	ldr	r3, [pc, #316]	; (8001510 <HAL_RCC_OscConfig+0x2b0>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d6:	f7ff fc9f 	bl	8000d18 <HAL_GetTick>
 80013da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013dc:	e008      	b.n	80013f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013de:	f7ff fc9b 	bl	8000d18 <HAL_GetTick>
 80013e2:	4602      	mov	r2, r0
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d901      	bls.n	80013f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e1a5      	b.n	800173c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013f0:	4b46      	ldr	r3, [pc, #280]	; (800150c <HAL_RCC_OscConfig+0x2ac>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 0302 	and.w	r3, r3, #2
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d0f0      	beq.n	80013de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013fc:	4b43      	ldr	r3, [pc, #268]	; (800150c <HAL_RCC_OscConfig+0x2ac>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	691b      	ldr	r3, [r3, #16]
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	4940      	ldr	r1, [pc, #256]	; (800150c <HAL_RCC_OscConfig+0x2ac>)
 800140c:	4313      	orrs	r3, r2
 800140e:	600b      	str	r3, [r1, #0]
 8001410:	e015      	b.n	800143e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001412:	4b3f      	ldr	r3, [pc, #252]	; (8001510 <HAL_RCC_OscConfig+0x2b0>)
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001418:	f7ff fc7e 	bl	8000d18 <HAL_GetTick>
 800141c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800141e:	e008      	b.n	8001432 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001420:	f7ff fc7a 	bl	8000d18 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b02      	cmp	r3, #2
 800142c:	d901      	bls.n	8001432 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e184      	b.n	800173c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001432:	4b36      	ldr	r3, [pc, #216]	; (800150c <HAL_RCC_OscConfig+0x2ac>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	2b00      	cmp	r3, #0
 800143c:	d1f0      	bne.n	8001420 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0308 	and.w	r3, r3, #8
 8001446:	2b00      	cmp	r3, #0
 8001448:	d030      	beq.n	80014ac <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	695b      	ldr	r3, [r3, #20]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d016      	beq.n	8001480 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001452:	4b30      	ldr	r3, [pc, #192]	; (8001514 <HAL_RCC_OscConfig+0x2b4>)
 8001454:	2201      	movs	r2, #1
 8001456:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001458:	f7ff fc5e 	bl	8000d18 <HAL_GetTick>
 800145c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800145e:	e008      	b.n	8001472 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001460:	f7ff fc5a 	bl	8000d18 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b02      	cmp	r3, #2
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e164      	b.n	800173c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001472:	4b26      	ldr	r3, [pc, #152]	; (800150c <HAL_RCC_OscConfig+0x2ac>)
 8001474:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d0f0      	beq.n	8001460 <HAL_RCC_OscConfig+0x200>
 800147e:	e015      	b.n	80014ac <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001480:	4b24      	ldr	r3, [pc, #144]	; (8001514 <HAL_RCC_OscConfig+0x2b4>)
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001486:	f7ff fc47 	bl	8000d18 <HAL_GetTick>
 800148a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800148c:	e008      	b.n	80014a0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800148e:	f7ff fc43 	bl	8000d18 <HAL_GetTick>
 8001492:	4602      	mov	r2, r0
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	2b02      	cmp	r3, #2
 800149a:	d901      	bls.n	80014a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800149c:	2303      	movs	r3, #3
 800149e:	e14d      	b.n	800173c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014a0:	4b1a      	ldr	r3, [pc, #104]	; (800150c <HAL_RCC_OscConfig+0x2ac>)
 80014a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1f0      	bne.n	800148e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0304 	and.w	r3, r3, #4
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	f000 80a0 	beq.w	80015fa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014ba:	2300      	movs	r3, #0
 80014bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014be:	4b13      	ldr	r3, [pc, #76]	; (800150c <HAL_RCC_OscConfig+0x2ac>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d10f      	bne.n	80014ea <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	60bb      	str	r3, [r7, #8]
 80014ce:	4b0f      	ldr	r3, [pc, #60]	; (800150c <HAL_RCC_OscConfig+0x2ac>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	4a0e      	ldr	r2, [pc, #56]	; (800150c <HAL_RCC_OscConfig+0x2ac>)
 80014d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d8:	6413      	str	r3, [r2, #64]	; 0x40
 80014da:	4b0c      	ldr	r3, [pc, #48]	; (800150c <HAL_RCC_OscConfig+0x2ac>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e2:	60bb      	str	r3, [r7, #8]
 80014e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014e6:	2301      	movs	r3, #1
 80014e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ea:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <HAL_RCC_OscConfig+0x2b8>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d121      	bne.n	800153a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014f6:	4b08      	ldr	r3, [pc, #32]	; (8001518 <HAL_RCC_OscConfig+0x2b8>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a07      	ldr	r2, [pc, #28]	; (8001518 <HAL_RCC_OscConfig+0x2b8>)
 80014fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001500:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001502:	f7ff fc09 	bl	8000d18 <HAL_GetTick>
 8001506:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001508:	e011      	b.n	800152e <HAL_RCC_OscConfig+0x2ce>
 800150a:	bf00      	nop
 800150c:	40023800 	.word	0x40023800
 8001510:	42470000 	.word	0x42470000
 8001514:	42470e80 	.word	0x42470e80
 8001518:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800151c:	f7ff fbfc 	bl	8000d18 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b02      	cmp	r3, #2
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e106      	b.n	800173c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800152e:	4b85      	ldr	r3, [pc, #532]	; (8001744 <HAL_RCC_OscConfig+0x4e4>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001536:	2b00      	cmp	r3, #0
 8001538:	d0f0      	beq.n	800151c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d106      	bne.n	8001550 <HAL_RCC_OscConfig+0x2f0>
 8001542:	4b81      	ldr	r3, [pc, #516]	; (8001748 <HAL_RCC_OscConfig+0x4e8>)
 8001544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001546:	4a80      	ldr	r2, [pc, #512]	; (8001748 <HAL_RCC_OscConfig+0x4e8>)
 8001548:	f043 0301 	orr.w	r3, r3, #1
 800154c:	6713      	str	r3, [r2, #112]	; 0x70
 800154e:	e01c      	b.n	800158a <HAL_RCC_OscConfig+0x32a>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	2b05      	cmp	r3, #5
 8001556:	d10c      	bne.n	8001572 <HAL_RCC_OscConfig+0x312>
 8001558:	4b7b      	ldr	r3, [pc, #492]	; (8001748 <HAL_RCC_OscConfig+0x4e8>)
 800155a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800155c:	4a7a      	ldr	r2, [pc, #488]	; (8001748 <HAL_RCC_OscConfig+0x4e8>)
 800155e:	f043 0304 	orr.w	r3, r3, #4
 8001562:	6713      	str	r3, [r2, #112]	; 0x70
 8001564:	4b78      	ldr	r3, [pc, #480]	; (8001748 <HAL_RCC_OscConfig+0x4e8>)
 8001566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001568:	4a77      	ldr	r2, [pc, #476]	; (8001748 <HAL_RCC_OscConfig+0x4e8>)
 800156a:	f043 0301 	orr.w	r3, r3, #1
 800156e:	6713      	str	r3, [r2, #112]	; 0x70
 8001570:	e00b      	b.n	800158a <HAL_RCC_OscConfig+0x32a>
 8001572:	4b75      	ldr	r3, [pc, #468]	; (8001748 <HAL_RCC_OscConfig+0x4e8>)
 8001574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001576:	4a74      	ldr	r2, [pc, #464]	; (8001748 <HAL_RCC_OscConfig+0x4e8>)
 8001578:	f023 0301 	bic.w	r3, r3, #1
 800157c:	6713      	str	r3, [r2, #112]	; 0x70
 800157e:	4b72      	ldr	r3, [pc, #456]	; (8001748 <HAL_RCC_OscConfig+0x4e8>)
 8001580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001582:	4a71      	ldr	r2, [pc, #452]	; (8001748 <HAL_RCC_OscConfig+0x4e8>)
 8001584:	f023 0304 	bic.w	r3, r3, #4
 8001588:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d015      	beq.n	80015be <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001592:	f7ff fbc1 	bl	8000d18 <HAL_GetTick>
 8001596:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001598:	e00a      	b.n	80015b0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800159a:	f7ff fbbd 	bl	8000d18 <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e0c5      	b.n	800173c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015b0:	4b65      	ldr	r3, [pc, #404]	; (8001748 <HAL_RCC_OscConfig+0x4e8>)
 80015b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b4:	f003 0302 	and.w	r3, r3, #2
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d0ee      	beq.n	800159a <HAL_RCC_OscConfig+0x33a>
 80015bc:	e014      	b.n	80015e8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015be:	f7ff fbab 	bl	8000d18 <HAL_GetTick>
 80015c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015c4:	e00a      	b.n	80015dc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015c6:	f7ff fba7 	bl	8000d18 <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e0af      	b.n	800173c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015dc:	4b5a      	ldr	r3, [pc, #360]	; (8001748 <HAL_RCC_OscConfig+0x4e8>)
 80015de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e0:	f003 0302 	and.w	r3, r3, #2
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d1ee      	bne.n	80015c6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015e8:	7dfb      	ldrb	r3, [r7, #23]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d105      	bne.n	80015fa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015ee:	4b56      	ldr	r3, [pc, #344]	; (8001748 <HAL_RCC_OscConfig+0x4e8>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f2:	4a55      	ldr	r2, [pc, #340]	; (8001748 <HAL_RCC_OscConfig+0x4e8>)
 80015f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	699b      	ldr	r3, [r3, #24]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f000 809b 	beq.w	800173a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001604:	4b50      	ldr	r3, [pc, #320]	; (8001748 <HAL_RCC_OscConfig+0x4e8>)
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	f003 030c 	and.w	r3, r3, #12
 800160c:	2b08      	cmp	r3, #8
 800160e:	d05c      	beq.n	80016ca <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	2b02      	cmp	r3, #2
 8001616:	d141      	bne.n	800169c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001618:	4b4c      	ldr	r3, [pc, #304]	; (800174c <HAL_RCC_OscConfig+0x4ec>)
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161e:	f7ff fb7b 	bl	8000d18 <HAL_GetTick>
 8001622:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001624:	e008      	b.n	8001638 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001626:	f7ff fb77 	bl	8000d18 <HAL_GetTick>
 800162a:	4602      	mov	r2, r0
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d901      	bls.n	8001638 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e081      	b.n	800173c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001638:	4b43      	ldr	r3, [pc, #268]	; (8001748 <HAL_RCC_OscConfig+0x4e8>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d1f0      	bne.n	8001626 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	69da      	ldr	r2, [r3, #28]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6a1b      	ldr	r3, [r3, #32]
 800164c:	431a      	orrs	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001652:	019b      	lsls	r3, r3, #6
 8001654:	431a      	orrs	r2, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800165a:	085b      	lsrs	r3, r3, #1
 800165c:	3b01      	subs	r3, #1
 800165e:	041b      	lsls	r3, r3, #16
 8001660:	431a      	orrs	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001666:	061b      	lsls	r3, r3, #24
 8001668:	4937      	ldr	r1, [pc, #220]	; (8001748 <HAL_RCC_OscConfig+0x4e8>)
 800166a:	4313      	orrs	r3, r2
 800166c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800166e:	4b37      	ldr	r3, [pc, #220]	; (800174c <HAL_RCC_OscConfig+0x4ec>)
 8001670:	2201      	movs	r2, #1
 8001672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001674:	f7ff fb50 	bl	8000d18 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800167c:	f7ff fb4c 	bl	8000d18 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e056      	b.n	800173c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800168e:	4b2e      	ldr	r3, [pc, #184]	; (8001748 <HAL_RCC_OscConfig+0x4e8>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d0f0      	beq.n	800167c <HAL_RCC_OscConfig+0x41c>
 800169a:	e04e      	b.n	800173a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800169c:	4b2b      	ldr	r3, [pc, #172]	; (800174c <HAL_RCC_OscConfig+0x4ec>)
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a2:	f7ff fb39 	bl	8000d18 <HAL_GetTick>
 80016a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016a8:	e008      	b.n	80016bc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016aa:	f7ff fb35 	bl	8000d18 <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d901      	bls.n	80016bc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e03f      	b.n	800173c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016bc:	4b22      	ldr	r3, [pc, #136]	; (8001748 <HAL_RCC_OscConfig+0x4e8>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1f0      	bne.n	80016aa <HAL_RCC_OscConfig+0x44a>
 80016c8:	e037      	b.n	800173a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	699b      	ldr	r3, [r3, #24]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d101      	bne.n	80016d6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e032      	b.n	800173c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016d6:	4b1c      	ldr	r3, [pc, #112]	; (8001748 <HAL_RCC_OscConfig+0x4e8>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d028      	beq.n	8001736 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d121      	bne.n	8001736 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d11a      	bne.n	8001736 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001700:	68fa      	ldr	r2, [r7, #12]
 8001702:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001706:	4013      	ands	r3, r2
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800170c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800170e:	4293      	cmp	r3, r2
 8001710:	d111      	bne.n	8001736 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800171c:	085b      	lsrs	r3, r3, #1
 800171e:	3b01      	subs	r3, #1
 8001720:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001722:	429a      	cmp	r2, r3
 8001724:	d107      	bne.n	8001736 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001730:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001732:	429a      	cmp	r2, r3
 8001734:	d001      	beq.n	800173a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e000      	b.n	800173c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800173a:	2300      	movs	r3, #0
}
 800173c:	4618      	mov	r0, r3
 800173e:	3718      	adds	r7, #24
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40007000 	.word	0x40007000
 8001748:	40023800 	.word	0x40023800
 800174c:	42470060 	.word	0x42470060

08001750 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d101      	bne.n	8001764 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e0cc      	b.n	80018fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001764:	4b68      	ldr	r3, [pc, #416]	; (8001908 <HAL_RCC_ClockConfig+0x1b8>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0307 	and.w	r3, r3, #7
 800176c:	683a      	ldr	r2, [r7, #0]
 800176e:	429a      	cmp	r2, r3
 8001770:	d90c      	bls.n	800178c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001772:	4b65      	ldr	r3, [pc, #404]	; (8001908 <HAL_RCC_ClockConfig+0x1b8>)
 8001774:	683a      	ldr	r2, [r7, #0]
 8001776:	b2d2      	uxtb	r2, r2
 8001778:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800177a:	4b63      	ldr	r3, [pc, #396]	; (8001908 <HAL_RCC_ClockConfig+0x1b8>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	683a      	ldr	r2, [r7, #0]
 8001784:	429a      	cmp	r2, r3
 8001786:	d001      	beq.n	800178c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e0b8      	b.n	80018fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0302 	and.w	r3, r3, #2
 8001794:	2b00      	cmp	r3, #0
 8001796:	d020      	beq.n	80017da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0304 	and.w	r3, r3, #4
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d005      	beq.n	80017b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017a4:	4b59      	ldr	r3, [pc, #356]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	4a58      	ldr	r2, [pc, #352]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80017aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0308 	and.w	r3, r3, #8
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d005      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017bc:	4b53      	ldr	r3, [pc, #332]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	4a52      	ldr	r2, [pc, #328]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80017c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017c8:	4b50      	ldr	r3, [pc, #320]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	494d      	ldr	r1, [pc, #308]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80017d6:	4313      	orrs	r3, r2
 80017d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d044      	beq.n	8001870 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d107      	bne.n	80017fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ee:	4b47      	ldr	r3, [pc, #284]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d119      	bne.n	800182e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e07f      	b.n	80018fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	2b02      	cmp	r3, #2
 8001804:	d003      	beq.n	800180e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800180a:	2b03      	cmp	r3, #3
 800180c:	d107      	bne.n	800181e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800180e:	4b3f      	ldr	r3, [pc, #252]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d109      	bne.n	800182e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e06f      	b.n	80018fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800181e:	4b3b      	ldr	r3, [pc, #236]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d101      	bne.n	800182e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e067      	b.n	80018fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800182e:	4b37      	ldr	r3, [pc, #220]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f023 0203 	bic.w	r2, r3, #3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	4934      	ldr	r1, [pc, #208]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 800183c:	4313      	orrs	r3, r2
 800183e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001840:	f7ff fa6a 	bl	8000d18 <HAL_GetTick>
 8001844:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001846:	e00a      	b.n	800185e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001848:	f7ff fa66 	bl	8000d18 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	f241 3288 	movw	r2, #5000	; 0x1388
 8001856:	4293      	cmp	r3, r2
 8001858:	d901      	bls.n	800185e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e04f      	b.n	80018fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800185e:	4b2b      	ldr	r3, [pc, #172]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f003 020c 	and.w	r2, r3, #12
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	429a      	cmp	r2, r3
 800186e:	d1eb      	bne.n	8001848 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001870:	4b25      	ldr	r3, [pc, #148]	; (8001908 <HAL_RCC_ClockConfig+0x1b8>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0307 	and.w	r3, r3, #7
 8001878:	683a      	ldr	r2, [r7, #0]
 800187a:	429a      	cmp	r2, r3
 800187c:	d20c      	bcs.n	8001898 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800187e:	4b22      	ldr	r3, [pc, #136]	; (8001908 <HAL_RCC_ClockConfig+0x1b8>)
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	b2d2      	uxtb	r2, r2
 8001884:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001886:	4b20      	ldr	r3, [pc, #128]	; (8001908 <HAL_RCC_ClockConfig+0x1b8>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	683a      	ldr	r2, [r7, #0]
 8001890:	429a      	cmp	r2, r3
 8001892:	d001      	beq.n	8001898 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e032      	b.n	80018fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0304 	and.w	r3, r3, #4
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d008      	beq.n	80018b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018a4:	4b19      	ldr	r3, [pc, #100]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	4916      	ldr	r1, [pc, #88]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80018b2:	4313      	orrs	r3, r2
 80018b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0308 	and.w	r3, r3, #8
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d009      	beq.n	80018d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018c2:	4b12      	ldr	r3, [pc, #72]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	490e      	ldr	r1, [pc, #56]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80018d2:	4313      	orrs	r3, r2
 80018d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018d6:	f000 f821 	bl	800191c <HAL_RCC_GetSysClockFreq>
 80018da:	4602      	mov	r2, r0
 80018dc:	4b0b      	ldr	r3, [pc, #44]	; (800190c <HAL_RCC_ClockConfig+0x1bc>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	091b      	lsrs	r3, r3, #4
 80018e2:	f003 030f 	and.w	r3, r3, #15
 80018e6:	490a      	ldr	r1, [pc, #40]	; (8001910 <HAL_RCC_ClockConfig+0x1c0>)
 80018e8:	5ccb      	ldrb	r3, [r1, r3]
 80018ea:	fa22 f303 	lsr.w	r3, r2, r3
 80018ee:	4a09      	ldr	r2, [pc, #36]	; (8001914 <HAL_RCC_ClockConfig+0x1c4>)
 80018f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018f2:	4b09      	ldr	r3, [pc, #36]	; (8001918 <HAL_RCC_ClockConfig+0x1c8>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff f922 	bl	8000b40 <HAL_InitTick>

  return HAL_OK;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40023c00 	.word	0x40023c00
 800190c:	40023800 	.word	0x40023800
 8001910:	08005e98 	.word	0x08005e98
 8001914:	20000000 	.word	0x20000000
 8001918:	20000004 	.word	0x20000004

0800191c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800191c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001920:	b084      	sub	sp, #16
 8001922:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001924:	2300      	movs	r3, #0
 8001926:	607b      	str	r3, [r7, #4]
 8001928:	2300      	movs	r3, #0
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	2300      	movs	r3, #0
 800192e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001930:	2300      	movs	r3, #0
 8001932:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001934:	4b67      	ldr	r3, [pc, #412]	; (8001ad4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f003 030c 	and.w	r3, r3, #12
 800193c:	2b08      	cmp	r3, #8
 800193e:	d00d      	beq.n	800195c <HAL_RCC_GetSysClockFreq+0x40>
 8001940:	2b08      	cmp	r3, #8
 8001942:	f200 80bd 	bhi.w	8001ac0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001946:	2b00      	cmp	r3, #0
 8001948:	d002      	beq.n	8001950 <HAL_RCC_GetSysClockFreq+0x34>
 800194a:	2b04      	cmp	r3, #4
 800194c:	d003      	beq.n	8001956 <HAL_RCC_GetSysClockFreq+0x3a>
 800194e:	e0b7      	b.n	8001ac0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001950:	4b61      	ldr	r3, [pc, #388]	; (8001ad8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001952:	60bb      	str	r3, [r7, #8]
       break;
 8001954:	e0b7      	b.n	8001ac6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001956:	4b61      	ldr	r3, [pc, #388]	; (8001adc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001958:	60bb      	str	r3, [r7, #8]
      break;
 800195a:	e0b4      	b.n	8001ac6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800195c:	4b5d      	ldr	r3, [pc, #372]	; (8001ad4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001964:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001966:	4b5b      	ldr	r3, [pc, #364]	; (8001ad4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d04d      	beq.n	8001a0e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001972:	4b58      	ldr	r3, [pc, #352]	; (8001ad4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	099b      	lsrs	r3, r3, #6
 8001978:	461a      	mov	r2, r3
 800197a:	f04f 0300 	mov.w	r3, #0
 800197e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001982:	f04f 0100 	mov.w	r1, #0
 8001986:	ea02 0800 	and.w	r8, r2, r0
 800198a:	ea03 0901 	and.w	r9, r3, r1
 800198e:	4640      	mov	r0, r8
 8001990:	4649      	mov	r1, r9
 8001992:	f04f 0200 	mov.w	r2, #0
 8001996:	f04f 0300 	mov.w	r3, #0
 800199a:	014b      	lsls	r3, r1, #5
 800199c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80019a0:	0142      	lsls	r2, r0, #5
 80019a2:	4610      	mov	r0, r2
 80019a4:	4619      	mov	r1, r3
 80019a6:	ebb0 0008 	subs.w	r0, r0, r8
 80019aa:	eb61 0109 	sbc.w	r1, r1, r9
 80019ae:	f04f 0200 	mov.w	r2, #0
 80019b2:	f04f 0300 	mov.w	r3, #0
 80019b6:	018b      	lsls	r3, r1, #6
 80019b8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80019bc:	0182      	lsls	r2, r0, #6
 80019be:	1a12      	subs	r2, r2, r0
 80019c0:	eb63 0301 	sbc.w	r3, r3, r1
 80019c4:	f04f 0000 	mov.w	r0, #0
 80019c8:	f04f 0100 	mov.w	r1, #0
 80019cc:	00d9      	lsls	r1, r3, #3
 80019ce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80019d2:	00d0      	lsls	r0, r2, #3
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	eb12 0208 	adds.w	r2, r2, r8
 80019dc:	eb43 0309 	adc.w	r3, r3, r9
 80019e0:	f04f 0000 	mov.w	r0, #0
 80019e4:	f04f 0100 	mov.w	r1, #0
 80019e8:	0259      	lsls	r1, r3, #9
 80019ea:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80019ee:	0250      	lsls	r0, r2, #9
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	4610      	mov	r0, r2
 80019f6:	4619      	mov	r1, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	461a      	mov	r2, r3
 80019fc:	f04f 0300 	mov.w	r3, #0
 8001a00:	f7fe fc86 	bl	8000310 <__aeabi_uldivmod>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	4613      	mov	r3, r2
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	e04a      	b.n	8001aa4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a0e:	4b31      	ldr	r3, [pc, #196]	; (8001ad4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	099b      	lsrs	r3, r3, #6
 8001a14:	461a      	mov	r2, r3
 8001a16:	f04f 0300 	mov.w	r3, #0
 8001a1a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a1e:	f04f 0100 	mov.w	r1, #0
 8001a22:	ea02 0400 	and.w	r4, r2, r0
 8001a26:	ea03 0501 	and.w	r5, r3, r1
 8001a2a:	4620      	mov	r0, r4
 8001a2c:	4629      	mov	r1, r5
 8001a2e:	f04f 0200 	mov.w	r2, #0
 8001a32:	f04f 0300 	mov.w	r3, #0
 8001a36:	014b      	lsls	r3, r1, #5
 8001a38:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a3c:	0142      	lsls	r2, r0, #5
 8001a3e:	4610      	mov	r0, r2
 8001a40:	4619      	mov	r1, r3
 8001a42:	1b00      	subs	r0, r0, r4
 8001a44:	eb61 0105 	sbc.w	r1, r1, r5
 8001a48:	f04f 0200 	mov.w	r2, #0
 8001a4c:	f04f 0300 	mov.w	r3, #0
 8001a50:	018b      	lsls	r3, r1, #6
 8001a52:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a56:	0182      	lsls	r2, r0, #6
 8001a58:	1a12      	subs	r2, r2, r0
 8001a5a:	eb63 0301 	sbc.w	r3, r3, r1
 8001a5e:	f04f 0000 	mov.w	r0, #0
 8001a62:	f04f 0100 	mov.w	r1, #0
 8001a66:	00d9      	lsls	r1, r3, #3
 8001a68:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a6c:	00d0      	lsls	r0, r2, #3
 8001a6e:	4602      	mov	r2, r0
 8001a70:	460b      	mov	r3, r1
 8001a72:	1912      	adds	r2, r2, r4
 8001a74:	eb45 0303 	adc.w	r3, r5, r3
 8001a78:	f04f 0000 	mov.w	r0, #0
 8001a7c:	f04f 0100 	mov.w	r1, #0
 8001a80:	0299      	lsls	r1, r3, #10
 8001a82:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001a86:	0290      	lsls	r0, r2, #10
 8001a88:	4602      	mov	r2, r0
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	4610      	mov	r0, r2
 8001a8e:	4619      	mov	r1, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	461a      	mov	r2, r3
 8001a94:	f04f 0300 	mov.w	r3, #0
 8001a98:	f7fe fc3a 	bl	8000310 <__aeabi_uldivmod>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001aa4:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	0c1b      	lsrs	r3, r3, #16
 8001aaa:	f003 0303 	and.w	r3, r3, #3
 8001aae:	3301      	adds	r3, #1
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001ab4:	68fa      	ldr	r2, [r7, #12]
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001abc:	60bb      	str	r3, [r7, #8]
      break;
 8001abe:	e002      	b.n	8001ac6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ac0:	4b05      	ldr	r3, [pc, #20]	; (8001ad8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001ac2:	60bb      	str	r3, [r7, #8]
      break;
 8001ac4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ac6:	68bb      	ldr	r3, [r7, #8]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3710      	adds	r7, #16
 8001acc:	46bd      	mov	sp, r7
 8001ace:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	00f42400 	.word	0x00f42400
 8001adc:	007a1200 	.word	0x007a1200

08001ae0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ae4:	4b03      	ldr	r3, [pc, #12]	; (8001af4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	20000000 	.word	0x20000000

08001af8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001afc:	f7ff fff0 	bl	8001ae0 <HAL_RCC_GetHCLKFreq>
 8001b00:	4602      	mov	r2, r0
 8001b02:	4b05      	ldr	r3, [pc, #20]	; (8001b18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	0a9b      	lsrs	r3, r3, #10
 8001b08:	f003 0307 	and.w	r3, r3, #7
 8001b0c:	4903      	ldr	r1, [pc, #12]	; (8001b1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b0e:	5ccb      	ldrb	r3, [r1, r3]
 8001b10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	08005ea8 	.word	0x08005ea8

08001b20 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	220f      	movs	r2, #15
 8001b2e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b30:	4b12      	ldr	r3, [pc, #72]	; (8001b7c <HAL_RCC_GetClockConfig+0x5c>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f003 0203 	and.w	r2, r3, #3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b3c:	4b0f      	ldr	r3, [pc, #60]	; (8001b7c <HAL_RCC_GetClockConfig+0x5c>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b48:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <HAL_RCC_GetClockConfig+0x5c>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b54:	4b09      	ldr	r3, [pc, #36]	; (8001b7c <HAL_RCC_GetClockConfig+0x5c>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	08db      	lsrs	r3, r3, #3
 8001b5a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b62:	4b07      	ldr	r3, [pc, #28]	; (8001b80 <HAL_RCC_GetClockConfig+0x60>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0207 	and.w	r2, r3, #7
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	601a      	str	r2, [r3, #0]
}
 8001b6e:	bf00      	nop
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	40023c00 	.word	0x40023c00

08001b84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e041      	b.n	8001c1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d106      	bne.n	8001bb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 f839 	bl	8001c22 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2202      	movs	r2, #2
 8001bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	3304      	adds	r3, #4
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4610      	mov	r0, r2
 8001bc4:	f000 f9d8 	bl	8001f78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
	...

08001c38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d001      	beq.n	8001c50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e04e      	b.n	8001cee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2202      	movs	r2, #2
 8001c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	68da      	ldr	r2, [r3, #12]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f042 0201 	orr.w	r2, r2, #1
 8001c66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a23      	ldr	r2, [pc, #140]	; (8001cfc <HAL_TIM_Base_Start_IT+0xc4>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d022      	beq.n	8001cb8 <HAL_TIM_Base_Start_IT+0x80>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c7a:	d01d      	beq.n	8001cb8 <HAL_TIM_Base_Start_IT+0x80>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a1f      	ldr	r2, [pc, #124]	; (8001d00 <HAL_TIM_Base_Start_IT+0xc8>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d018      	beq.n	8001cb8 <HAL_TIM_Base_Start_IT+0x80>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a1e      	ldr	r2, [pc, #120]	; (8001d04 <HAL_TIM_Base_Start_IT+0xcc>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d013      	beq.n	8001cb8 <HAL_TIM_Base_Start_IT+0x80>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a1c      	ldr	r2, [pc, #112]	; (8001d08 <HAL_TIM_Base_Start_IT+0xd0>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d00e      	beq.n	8001cb8 <HAL_TIM_Base_Start_IT+0x80>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a1b      	ldr	r2, [pc, #108]	; (8001d0c <HAL_TIM_Base_Start_IT+0xd4>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d009      	beq.n	8001cb8 <HAL_TIM_Base_Start_IT+0x80>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a19      	ldr	r2, [pc, #100]	; (8001d10 <HAL_TIM_Base_Start_IT+0xd8>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d004      	beq.n	8001cb8 <HAL_TIM_Base_Start_IT+0x80>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a18      	ldr	r2, [pc, #96]	; (8001d14 <HAL_TIM_Base_Start_IT+0xdc>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d111      	bne.n	8001cdc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2b06      	cmp	r3, #6
 8001cc8:	d010      	beq.n	8001cec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f042 0201 	orr.w	r2, r2, #1
 8001cd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cda:	e007      	b.n	8001cec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f042 0201 	orr.w	r2, r2, #1
 8001cea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3714      	adds	r7, #20
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	40010000 	.word	0x40010000
 8001d00:	40000400 	.word	0x40000400
 8001d04:	40000800 	.word	0x40000800
 8001d08:	40000c00 	.word	0x40000c00
 8001d0c:	40010400 	.word	0x40010400
 8001d10:	40014000 	.word	0x40014000
 8001d14:	40001800 	.word	0x40001800

08001d18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d122      	bne.n	8001d74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d11b      	bne.n	8001d74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f06f 0202 	mvn.w	r2, #2
 8001d44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	f003 0303 	and.w	r3, r3, #3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d003      	beq.n	8001d62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 f8ee 	bl	8001f3c <HAL_TIM_IC_CaptureCallback>
 8001d60:	e005      	b.n	8001d6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 f8e0 	bl	8001f28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f000 f8f1 	bl	8001f50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	f003 0304 	and.w	r3, r3, #4
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	d122      	bne.n	8001dc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	f003 0304 	and.w	r3, r3, #4
 8001d8c:	2b04      	cmp	r3, #4
 8001d8e:	d11b      	bne.n	8001dc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f06f 0204 	mvn.w	r2, #4
 8001d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2202      	movs	r2, #2
 8001d9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	699b      	ldr	r3, [r3, #24]
 8001da6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d003      	beq.n	8001db6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 f8c4 	bl	8001f3c <HAL_TIM_IC_CaptureCallback>
 8001db4:	e005      	b.n	8001dc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 f8b6 	bl	8001f28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f000 f8c7 	bl	8001f50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	f003 0308 	and.w	r3, r3, #8
 8001dd2:	2b08      	cmp	r3, #8
 8001dd4:	d122      	bne.n	8001e1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	f003 0308 	and.w	r3, r3, #8
 8001de0:	2b08      	cmp	r3, #8
 8001de2:	d11b      	bne.n	8001e1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f06f 0208 	mvn.w	r2, #8
 8001dec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2204      	movs	r2, #4
 8001df2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	69db      	ldr	r3, [r3, #28]
 8001dfa:	f003 0303 	and.w	r3, r3, #3
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 f89a 	bl	8001f3c <HAL_TIM_IC_CaptureCallback>
 8001e08:	e005      	b.n	8001e16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 f88c 	bl	8001f28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f000 f89d 	bl	8001f50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	f003 0310 	and.w	r3, r3, #16
 8001e26:	2b10      	cmp	r3, #16
 8001e28:	d122      	bne.n	8001e70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	f003 0310 	and.w	r3, r3, #16
 8001e34:	2b10      	cmp	r3, #16
 8001e36:	d11b      	bne.n	8001e70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f06f 0210 	mvn.w	r2, #16
 8001e40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2208      	movs	r2, #8
 8001e46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d003      	beq.n	8001e5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f000 f870 	bl	8001f3c <HAL_TIM_IC_CaptureCallback>
 8001e5c:	e005      	b.n	8001e6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 f862 	bl	8001f28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f000 f873 	bl	8001f50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d10e      	bne.n	8001e9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d107      	bne.n	8001e9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f06f 0201 	mvn.w	r2, #1
 8001e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f7fe fe12 	bl	8000ac0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ea6:	2b80      	cmp	r3, #128	; 0x80
 8001ea8:	d10e      	bne.n	8001ec8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eb4:	2b80      	cmp	r3, #128	; 0x80
 8001eb6:	d107      	bne.n	8001ec8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 f902 	bl	80020cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	691b      	ldr	r3, [r3, #16]
 8001ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ed2:	2b40      	cmp	r3, #64	; 0x40
 8001ed4:	d10e      	bne.n	8001ef4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ee0:	2b40      	cmp	r3, #64	; 0x40
 8001ee2:	d107      	bne.n	8001ef4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001eec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 f838 	bl	8001f64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	f003 0320 	and.w	r3, r3, #32
 8001efe:	2b20      	cmp	r3, #32
 8001f00:	d10e      	bne.n	8001f20 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	f003 0320 	and.w	r3, r3, #32
 8001f0c:	2b20      	cmp	r3, #32
 8001f0e:	d107      	bne.n	8001f20 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f06f 0220 	mvn.w	r2, #32
 8001f18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f8cc 	bl	80020b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f20:	bf00      	nop
 8001f22:	3708      	adds	r7, #8
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4a40      	ldr	r2, [pc, #256]	; (800208c <TIM_Base_SetConfig+0x114>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d013      	beq.n	8001fb8 <TIM_Base_SetConfig+0x40>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f96:	d00f      	beq.n	8001fb8 <TIM_Base_SetConfig+0x40>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a3d      	ldr	r2, [pc, #244]	; (8002090 <TIM_Base_SetConfig+0x118>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d00b      	beq.n	8001fb8 <TIM_Base_SetConfig+0x40>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4a3c      	ldr	r2, [pc, #240]	; (8002094 <TIM_Base_SetConfig+0x11c>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d007      	beq.n	8001fb8 <TIM_Base_SetConfig+0x40>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a3b      	ldr	r2, [pc, #236]	; (8002098 <TIM_Base_SetConfig+0x120>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d003      	beq.n	8001fb8 <TIM_Base_SetConfig+0x40>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a3a      	ldr	r2, [pc, #232]	; (800209c <TIM_Base_SetConfig+0x124>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d108      	bne.n	8001fca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a2f      	ldr	r2, [pc, #188]	; (800208c <TIM_Base_SetConfig+0x114>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d02b      	beq.n	800202a <TIM_Base_SetConfig+0xb2>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fd8:	d027      	beq.n	800202a <TIM_Base_SetConfig+0xb2>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a2c      	ldr	r2, [pc, #176]	; (8002090 <TIM_Base_SetConfig+0x118>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d023      	beq.n	800202a <TIM_Base_SetConfig+0xb2>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a2b      	ldr	r2, [pc, #172]	; (8002094 <TIM_Base_SetConfig+0x11c>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d01f      	beq.n	800202a <TIM_Base_SetConfig+0xb2>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a2a      	ldr	r2, [pc, #168]	; (8002098 <TIM_Base_SetConfig+0x120>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d01b      	beq.n	800202a <TIM_Base_SetConfig+0xb2>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a29      	ldr	r2, [pc, #164]	; (800209c <TIM_Base_SetConfig+0x124>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d017      	beq.n	800202a <TIM_Base_SetConfig+0xb2>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a28      	ldr	r2, [pc, #160]	; (80020a0 <TIM_Base_SetConfig+0x128>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d013      	beq.n	800202a <TIM_Base_SetConfig+0xb2>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a27      	ldr	r2, [pc, #156]	; (80020a4 <TIM_Base_SetConfig+0x12c>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d00f      	beq.n	800202a <TIM_Base_SetConfig+0xb2>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a26      	ldr	r2, [pc, #152]	; (80020a8 <TIM_Base_SetConfig+0x130>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d00b      	beq.n	800202a <TIM_Base_SetConfig+0xb2>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a25      	ldr	r2, [pc, #148]	; (80020ac <TIM_Base_SetConfig+0x134>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d007      	beq.n	800202a <TIM_Base_SetConfig+0xb2>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a24      	ldr	r2, [pc, #144]	; (80020b0 <TIM_Base_SetConfig+0x138>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d003      	beq.n	800202a <TIM_Base_SetConfig+0xb2>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a23      	ldr	r2, [pc, #140]	; (80020b4 <TIM_Base_SetConfig+0x13c>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d108      	bne.n	800203c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002030:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	4313      	orrs	r3, r2
 800203a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	4313      	orrs	r3, r2
 8002048:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	689a      	ldr	r2, [r3, #8]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a0a      	ldr	r2, [pc, #40]	; (800208c <TIM_Base_SetConfig+0x114>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d003      	beq.n	8002070 <TIM_Base_SetConfig+0xf8>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a0c      	ldr	r2, [pc, #48]	; (800209c <TIM_Base_SetConfig+0x124>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d103      	bne.n	8002078 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	691a      	ldr	r2, [r3, #16]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	615a      	str	r2, [r3, #20]
}
 800207e:	bf00      	nop
 8002080:	3714      	adds	r7, #20
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	40010000 	.word	0x40010000
 8002090:	40000400 	.word	0x40000400
 8002094:	40000800 	.word	0x40000800
 8002098:	40000c00 	.word	0x40000c00
 800209c:	40010400 	.word	0x40010400
 80020a0:	40014000 	.word	0x40014000
 80020a4:	40014400 	.word	0x40014400
 80020a8:	40014800 	.word	0x40014800
 80020ac:	40001800 	.word	0x40001800
 80020b0:	40001c00 	.word	0x40001c00
 80020b4:	40002000 	.word	0x40002000

080020b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f103 0208 	add.w	r2, r3, #8
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f04f 32ff 	mov.w	r2, #4294967295
 80020f8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f103 0208 	add.w	r2, r3, #8
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f103 0208 	add.w	r2, r3, #8
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800212e:	bf00      	nop
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800213a:	b480      	push	{r7}
 800213c:	b085      	sub	sp, #20
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	6892      	ldr	r2, [r2, #8]
 8002150:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	6852      	ldr	r2, [r2, #4]
 800215a:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	429a      	cmp	r2, r3
 8002164:	d103      	bne.n	800216e <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	689a      	ldr	r2, [r3, #8]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	1e5a      	subs	r2, r3, #1
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
}
 8002182:	4618      	mov	r0, r3
 8002184:	3714      	adds	r7, #20
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr

0800218e <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800218e:	b580      	push	{r7, lr}
 8002190:	b08c      	sub	sp, #48	; 0x30
 8002192:	af04      	add	r7, sp, #16
 8002194:	60f8      	str	r0, [r7, #12]
 8002196:	60b9      	str	r1, [r7, #8]
 8002198:	603b      	str	r3, [r7, #0]
 800219a:	4613      	mov	r3, r2
 800219c:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800219e:	88fb      	ldrh	r3, [r7, #6]
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4618      	mov	r0, r3
 80021a4:	f000 ffd2 	bl	800314c <pvPortMalloc>
 80021a8:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d00e      	beq.n	80021ce <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80021b0:	2058      	movs	r0, #88	; 0x58
 80021b2:	f000 ffcb 	bl	800314c <pvPortMalloc>
 80021b6:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d003      	beq.n	80021c6 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	697a      	ldr	r2, [r7, #20]
 80021c2:	631a      	str	r2, [r3, #48]	; 0x30
 80021c4:	e005      	b.n	80021d2 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 80021c6:	6978      	ldr	r0, [r7, #20]
 80021c8:	f001 f8a0 	bl	800330c <vPortFree>
 80021cc:	e001      	b.n	80021d2 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80021ce:	2300      	movs	r3, #0
 80021d0:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d013      	beq.n	8002200 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80021d8:	88fa      	ldrh	r2, [r7, #6]
 80021da:	2300      	movs	r3, #0
 80021dc:	9303      	str	r3, [sp, #12]
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	9302      	str	r3, [sp, #8]
 80021e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021e4:	9301      	str	r3, [sp, #4]
 80021e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021e8:	9300      	str	r3, [sp, #0]
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	68b9      	ldr	r1, [r7, #8]
 80021ee:	68f8      	ldr	r0, [r7, #12]
 80021f0:	f000 f80e 	bl	8002210 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80021f4:	69f8      	ldr	r0, [r7, #28]
 80021f6:	f000 f8af 	bl	8002358 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80021fa:	2301      	movs	r3, #1
 80021fc:	61bb      	str	r3, [r7, #24]
 80021fe:	e002      	b.n	8002206 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002200:	f04f 33ff 	mov.w	r3, #4294967295
 8002204:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002206:	69bb      	ldr	r3, [r7, #24]
    }
 8002208:	4618      	mov	r0, r3
 800220a:	3720      	adds	r7, #32
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b088      	sub	sp, #32
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
 800221c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800221e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002220:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	461a      	mov	r2, r3
 8002228:	21a5      	movs	r1, #165	; 0xa5
 800222a:	f003 f96d 	bl	8005508 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800222e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002230:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002238:	3b01      	subs	r3, #1
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	4413      	add	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	f023 0307 	bic.w	r3, r3, #7
 8002246:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	f003 0307 	and.w	r3, r3, #7
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00a      	beq.n	8002268 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002256:	f383 8811 	msr	BASEPRI, r3
 800225a:	f3bf 8f6f 	isb	sy
 800225e:	f3bf 8f4f 	dsb	sy
 8002262:	617b      	str	r3, [r7, #20]
    }
 8002264:	bf00      	nop
 8002266:	e7fe      	b.n	8002266 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d01f      	beq.n	80022ae <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800226e:	2300      	movs	r3, #0
 8002270:	61fb      	str	r3, [r7, #28]
 8002272:	e012      	b.n	800229a <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002274:	68ba      	ldr	r2, [r7, #8]
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	4413      	add	r3, r2
 800227a:	7819      	ldrb	r1, [r3, #0]
 800227c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	4413      	add	r3, r2
 8002282:	3334      	adds	r3, #52	; 0x34
 8002284:	460a      	mov	r2, r1
 8002286:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002288:	68ba      	ldr	r2, [r7, #8]
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	4413      	add	r3, r2
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d006      	beq.n	80022a2 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	3301      	adds	r3, #1
 8002298:	61fb      	str	r3, [r7, #28]
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	2b09      	cmp	r3, #9
 800229e:	d9e9      	bls.n	8002274 <prvInitialiseNewTask+0x64>
 80022a0:	e000      	b.n	80022a4 <prvInitialiseNewTask+0x94>
            {
                break;
 80022a2:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80022a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80022ac:	e003      	b.n	80022b6 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80022ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80022b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022b8:	2b04      	cmp	r3, #4
 80022ba:	d90a      	bls.n	80022d2 <prvInitialiseNewTask+0xc2>
        __asm volatile
 80022bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022c0:	f383 8811 	msr	BASEPRI, r3
 80022c4:	f3bf 8f6f 	isb	sy
 80022c8:	f3bf 8f4f 	dsb	sy
 80022cc:	613b      	str	r3, [r7, #16]
    }
 80022ce:	bf00      	nop
 80022d0:	e7fe      	b.n	80022d0 <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80022d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d4:	2b04      	cmp	r3, #4
 80022d6:	d901      	bls.n	80022dc <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80022d8:	2304      	movs	r3, #4
 80022da:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80022dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022e0:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80022e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022e6:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80022e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ea:	2200      	movs	r2, #0
 80022ec:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80022ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f0:	3304      	adds	r3, #4
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff ff14 	bl	8002120 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80022f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022fa:	3318      	adds	r3, #24
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff ff0f 	bl	8002120 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002304:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002306:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800230a:	f1c3 0205 	rsb	r2, r3, #5
 800230e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002310:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002314:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002316:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800231a:	3350      	adds	r3, #80	; 0x50
 800231c:	2204      	movs	r2, #4
 800231e:	2100      	movs	r1, #0
 8002320:	4618      	mov	r0, r3
 8002322:	f003 f8f1 	bl	8005508 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002328:	3354      	adds	r3, #84	; 0x54
 800232a:	2201      	movs	r2, #1
 800232c:	2100      	movs	r1, #0
 800232e:	4618      	mov	r0, r3
 8002330:	f003 f8ea 	bl	8005508 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	68f9      	ldr	r1, [r7, #12]
 8002338:	69b8      	ldr	r0, [r7, #24]
 800233a:	f000 fc2f 	bl	8002b9c <pxPortInitialiseStack>
 800233e:	4602      	mov	r2, r0
 8002340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002342:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002346:	2b00      	cmp	r3, #0
 8002348:	d002      	beq.n	8002350 <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800234a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800234c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800234e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002350:	bf00      	nop
 8002352:	3720      	adds	r7, #32
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002358:	b5b0      	push	{r4, r5, r7, lr}
 800235a:	b086      	sub	sp, #24
 800235c:	af02      	add	r7, sp, #8
 800235e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002360:	f000 fdc8 	bl	8002ef4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002364:	4b49      	ldr	r3, [pc, #292]	; (800248c <prvAddNewTaskToReadyList+0x134>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	3301      	adds	r3, #1
 800236a:	4a48      	ldr	r2, [pc, #288]	; (800248c <prvAddNewTaskToReadyList+0x134>)
 800236c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800236e:	4b48      	ldr	r3, [pc, #288]	; (8002490 <prvAddNewTaskToReadyList+0x138>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d109      	bne.n	800238a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002376:	4a46      	ldr	r2, [pc, #280]	; (8002490 <prvAddNewTaskToReadyList+0x138>)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800237c:	4b43      	ldr	r3, [pc, #268]	; (800248c <prvAddNewTaskToReadyList+0x134>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d110      	bne.n	80023a6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002384:	f000 fb70 	bl	8002a68 <prvInitialiseTaskLists>
 8002388:	e00d      	b.n	80023a6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800238a:	4b42      	ldr	r3, [pc, #264]	; (8002494 <prvAddNewTaskToReadyList+0x13c>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d109      	bne.n	80023a6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002392:	4b3f      	ldr	r3, [pc, #252]	; (8002490 <prvAddNewTaskToReadyList+0x138>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239c:	429a      	cmp	r2, r3
 800239e:	d802      	bhi.n	80023a6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80023a0:	4a3b      	ldr	r2, [pc, #236]	; (8002490 <prvAddNewTaskToReadyList+0x138>)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80023a6:	4b3c      	ldr	r3, [pc, #240]	; (8002498 <prvAddNewTaskToReadyList+0x140>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	3301      	adds	r3, #1
 80023ac:	4a3a      	ldr	r2, [pc, #232]	; (8002498 <prvAddNewTaskToReadyList+0x140>)
 80023ae:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80023b0:	4b39      	ldr	r3, [pc, #228]	; (8002498 <prvAddNewTaskToReadyList+0x140>)
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d016      	beq.n	80023ec <prvAddNewTaskToReadyList+0x94>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f002 fe4f 	bl	8005064 <SEGGER_SYSVIEW_OnTaskCreate>
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	461d      	mov	r5, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	461c      	mov	r4, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	1ae3      	subs	r3, r4, r3
 80023e4:	9300      	str	r3, [sp, #0]
 80023e6:	462b      	mov	r3, r5
 80023e8:	f001 f956 	bl	8003698 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f002 febc 	bl	800516c <SEGGER_SYSVIEW_OnTaskStartReady>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f8:	2201      	movs	r2, #1
 80023fa:	409a      	lsls	r2, r3
 80023fc:	4b27      	ldr	r3, [pc, #156]	; (800249c <prvAddNewTaskToReadyList+0x144>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4313      	orrs	r3, r2
 8002402:	4a26      	ldr	r2, [pc, #152]	; (800249c <prvAddNewTaskToReadyList+0x144>)
 8002404:	6013      	str	r3, [r2, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800240a:	4925      	ldr	r1, [pc, #148]	; (80024a0 <prvAddNewTaskToReadyList+0x148>)
 800240c:	4613      	mov	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	4413      	add	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	440b      	add	r3, r1
 8002416:	3304      	adds	r3, #4
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	60fb      	str	r3, [r7, #12]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	609a      	str	r2, [r3, #8]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	689a      	ldr	r2, [r3, #8]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	60da      	str	r2, [r3, #12]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	3204      	adds	r2, #4
 8002432:	605a      	str	r2, [r3, #4]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	1d1a      	adds	r2, r3, #4
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	609a      	str	r2, [r3, #8]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002440:	4613      	mov	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4413      	add	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	4a15      	ldr	r2, [pc, #84]	; (80024a0 <prvAddNewTaskToReadyList+0x148>)
 800244a:	441a      	add	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	615a      	str	r2, [r3, #20]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002454:	4912      	ldr	r1, [pc, #72]	; (80024a0 <prvAddNewTaskToReadyList+0x148>)
 8002456:	4613      	mov	r3, r2
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	4413      	add	r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	440b      	add	r3, r1
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	1c59      	adds	r1, r3, #1
 8002464:	480e      	ldr	r0, [pc, #56]	; (80024a0 <prvAddNewTaskToReadyList+0x148>)
 8002466:	4613      	mov	r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	4413      	add	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	4403      	add	r3, r0
 8002470:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002472:	f000 fd6f 	bl	8002f54 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002476:	4b07      	ldr	r3, [pc, #28]	; (8002494 <prvAddNewTaskToReadyList+0x13c>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <prvAddNewTaskToReadyList+0x12a>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800247e:	4b04      	ldr	r3, [pc, #16]	; (8002490 <prvAddNewTaskToReadyList+0x138>)
 8002480:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002482:	bf00      	nop
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bdb0      	pop	{r4, r5, r7, pc}
 800248a:	bf00      	nop
 800248c:	2000016c 	.word	0x2000016c
 8002490:	20000094 	.word	0x20000094
 8002494:	20000178 	.word	0x20000178
 8002498:	20000188 	.word	0x20000188
 800249c:	20000174 	.word	0x20000174
 80024a0:	20000098 	.word	0x20000098

080024a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80024aa:	4b24      	ldr	r3, [pc, #144]	; (800253c <vTaskStartScheduler+0x98>)
 80024ac:	9301      	str	r3, [sp, #4]
 80024ae:	2300      	movs	r3, #0
 80024b0:	9300      	str	r3, [sp, #0]
 80024b2:	2300      	movs	r3, #0
 80024b4:	2282      	movs	r2, #130	; 0x82
 80024b6:	4922      	ldr	r1, [pc, #136]	; (8002540 <vTaskStartScheduler+0x9c>)
 80024b8:	4822      	ldr	r0, [pc, #136]	; (8002544 <vTaskStartScheduler+0xa0>)
 80024ba:	f7ff fe68 	bl	800218e <xTaskCreate>
 80024be:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d124      	bne.n	8002510 <vTaskStartScheduler+0x6c>
        __asm volatile
 80024c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ca:	f383 8811 	msr	BASEPRI, r3
 80024ce:	f3bf 8f6f 	isb	sy
 80024d2:	f3bf 8f4f 	dsb	sy
 80024d6:	60bb      	str	r3, [r7, #8]
    }
 80024d8:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80024da:	4b1b      	ldr	r3, [pc, #108]	; (8002548 <vTaskStartScheduler+0xa4>)
 80024dc:	f04f 32ff 	mov.w	r2, #4294967295
 80024e0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80024e2:	4b1a      	ldr	r3, [pc, #104]	; (800254c <vTaskStartScheduler+0xa8>)
 80024e4:	2201      	movs	r2, #1
 80024e6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80024e8:	4b19      	ldr	r3, [pc, #100]	; (8002550 <vTaskStartScheduler+0xac>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80024ee:	4b19      	ldr	r3, [pc, #100]	; (8002554 <vTaskStartScheduler+0xb0>)
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	4b12      	ldr	r3, [pc, #72]	; (800253c <vTaskStartScheduler+0x98>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d102      	bne.n	8002500 <vTaskStartScheduler+0x5c>
 80024fa:	f002 fd97 	bl	800502c <SEGGER_SYSVIEW_OnIdle>
 80024fe:	e004      	b.n	800250a <vTaskStartScheduler+0x66>
 8002500:	4b14      	ldr	r3, [pc, #80]	; (8002554 <vTaskStartScheduler+0xb0>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4618      	mov	r0, r3
 8002506:	f002 fdef 	bl	80050e8 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800250a:	f000 fbd3 	bl	8002cb4 <xPortStartScheduler>
 800250e:	e00e      	b.n	800252e <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002516:	d10a      	bne.n	800252e <vTaskStartScheduler+0x8a>
        __asm volatile
 8002518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800251c:	f383 8811 	msr	BASEPRI, r3
 8002520:	f3bf 8f6f 	isb	sy
 8002524:	f3bf 8f4f 	dsb	sy
 8002528:	607b      	str	r3, [r7, #4]
    }
 800252a:	bf00      	nop
 800252c:	e7fe      	b.n	800252c <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800252e:	4b0a      	ldr	r3, [pc, #40]	; (8002558 <vTaskStartScheduler+0xb4>)
 8002530:	681b      	ldr	r3, [r3, #0]
}
 8002532:	bf00      	nop
 8002534:	3710      	adds	r7, #16
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	20000190 	.word	0x20000190
 8002540:	08005dd0 	.word	0x08005dd0
 8002544:	08002a45 	.word	0x08002a45
 8002548:	2000018c 	.word	0x2000018c
 800254c:	20000178 	.word	0x20000178
 8002550:	20000170 	.word	0x20000170
 8002554:	20000094 	.word	0x20000094
 8002558:	2000000c 	.word	0x2000000c

0800255c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002560:	4b04      	ldr	r3, [pc, #16]	; (8002574 <vTaskSuspendAll+0x18>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	3301      	adds	r3, #1
 8002566:	4a03      	ldr	r2, [pc, #12]	; (8002574 <vTaskSuspendAll+0x18>)
 8002568:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800256a:	bf00      	nop
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	20000194 	.word	0x20000194

08002578 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b088      	sub	sp, #32
 800257c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800257e:	2300      	movs	r3, #0
 8002580:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002582:	2300      	movs	r3, #0
 8002584:	617b      	str	r3, [r7, #20]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002586:	4b6d      	ldr	r3, [pc, #436]	; (800273c <xTaskResumeAll+0x1c4>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d10a      	bne.n	80025a4 <xTaskResumeAll+0x2c>
        __asm volatile
 800258e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002592:	f383 8811 	msr	BASEPRI, r3
 8002596:	f3bf 8f6f 	isb	sy
 800259a:	f3bf 8f4f 	dsb	sy
 800259e:	607b      	str	r3, [r7, #4]
    }
 80025a0:	bf00      	nop
 80025a2:	e7fe      	b.n	80025a2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80025a4:	f000 fca6 	bl	8002ef4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80025a8:	4b64      	ldr	r3, [pc, #400]	; (800273c <xTaskResumeAll+0x1c4>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	3b01      	subs	r3, #1
 80025ae:	4a63      	ldr	r2, [pc, #396]	; (800273c <xTaskResumeAll+0x1c4>)
 80025b0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80025b2:	4b62      	ldr	r3, [pc, #392]	; (800273c <xTaskResumeAll+0x1c4>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f040 80b8 	bne.w	800272c <xTaskResumeAll+0x1b4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80025bc:	4b60      	ldr	r3, [pc, #384]	; (8002740 <xTaskResumeAll+0x1c8>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	f000 80b3 	beq.w	800272c <xTaskResumeAll+0x1b4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80025c6:	e08e      	b.n	80026e6 <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80025c8:	4b5e      	ldr	r3, [pc, #376]	; (8002744 <xTaskResumeAll+0x1cc>)
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d4:	613b      	str	r3, [r7, #16]
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	69db      	ldr	r3, [r3, #28]
 80025da:	69fa      	ldr	r2, [r7, #28]
 80025dc:	6a12      	ldr	r2, [r2, #32]
 80025de:	609a      	str	r2, [r3, #8]
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	69fa      	ldr	r2, [r7, #28]
 80025e6:	69d2      	ldr	r2, [r2, #28]
 80025e8:	605a      	str	r2, [r3, #4]
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	685a      	ldr	r2, [r3, #4]
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	3318      	adds	r3, #24
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d103      	bne.n	80025fe <xTaskResumeAll+0x86>
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	6a1a      	ldr	r2, [r3, #32]
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	605a      	str	r2, [r3, #4]
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	2200      	movs	r2, #0
 8002602:	629a      	str	r2, [r3, #40]	; 0x28
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	1e5a      	subs	r2, r3, #1
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	60fb      	str	r3, [r7, #12]
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	69fa      	ldr	r2, [r7, #28]
 800261a:	68d2      	ldr	r2, [r2, #12]
 800261c:	609a      	str	r2, [r3, #8]
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	69fa      	ldr	r2, [r7, #28]
 8002624:	6892      	ldr	r2, [r2, #8]
 8002626:	605a      	str	r2, [r3, #4]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	685a      	ldr	r2, [r3, #4]
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	3304      	adds	r3, #4
 8002630:	429a      	cmp	r2, r3
 8002632:	d103      	bne.n	800263c <xTaskResumeAll+0xc4>
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	68da      	ldr	r2, [r3, #12]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	605a      	str	r2, [r3, #4]
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	2200      	movs	r2, #0
 8002640:	615a      	str	r2, [r3, #20]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	1e5a      	subs	r2, r3, #1
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	4618      	mov	r0, r3
 8002650:	f002 fd8c 	bl	800516c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002658:	2201      	movs	r2, #1
 800265a:	409a      	lsls	r2, r3
 800265c:	4b3a      	ldr	r3, [pc, #232]	; (8002748 <xTaskResumeAll+0x1d0>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4313      	orrs	r3, r2
 8002662:	4a39      	ldr	r2, [pc, #228]	; (8002748 <xTaskResumeAll+0x1d0>)
 8002664:	6013      	str	r3, [r2, #0]
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800266a:	4938      	ldr	r1, [pc, #224]	; (800274c <xTaskResumeAll+0x1d4>)
 800266c:	4613      	mov	r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	4413      	add	r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	440b      	add	r3, r1
 8002676:	3304      	adds	r3, #4
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	60bb      	str	r3, [r7, #8]
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	68ba      	ldr	r2, [r7, #8]
 8002680:	609a      	str	r2, [r3, #8]
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	689a      	ldr	r2, [r3, #8]
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	60da      	str	r2, [r3, #12]
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	69fa      	ldr	r2, [r7, #28]
 8002690:	3204      	adds	r2, #4
 8002692:	605a      	str	r2, [r3, #4]
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	1d1a      	adds	r2, r3, #4
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	609a      	str	r2, [r3, #8]
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026a0:	4613      	mov	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	4413      	add	r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	4a28      	ldr	r2, [pc, #160]	; (800274c <xTaskResumeAll+0x1d4>)
 80026aa:	441a      	add	r2, r3
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	615a      	str	r2, [r3, #20]
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026b4:	4925      	ldr	r1, [pc, #148]	; (800274c <xTaskResumeAll+0x1d4>)
 80026b6:	4613      	mov	r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	4413      	add	r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	440b      	add	r3, r1
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	1c59      	adds	r1, r3, #1
 80026c4:	4821      	ldr	r0, [pc, #132]	; (800274c <xTaskResumeAll+0x1d4>)
 80026c6:	4613      	mov	r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	4413      	add	r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	4403      	add	r3, r0
 80026d0:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026d6:	4b1e      	ldr	r3, [pc, #120]	; (8002750 <xTaskResumeAll+0x1d8>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026dc:	429a      	cmp	r2, r3
 80026de:	d302      	bcc.n	80026e6 <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 80026e0:	4b1c      	ldr	r3, [pc, #112]	; (8002754 <xTaskResumeAll+0x1dc>)
 80026e2:	2201      	movs	r2, #1
 80026e4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80026e6:	4b17      	ldr	r3, [pc, #92]	; (8002744 <xTaskResumeAll+0x1cc>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	f47f af6c 	bne.w	80025c8 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80026f6:	f000 fa35 	bl	8002b64 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80026fa:	4b17      	ldr	r3, [pc, #92]	; (8002758 <xTaskResumeAll+0x1e0>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	61bb      	str	r3, [r7, #24]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d010      	beq.n	8002728 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002706:	f000 f83b 	bl	8002780 <xTaskIncrementTick>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d002      	beq.n	8002716 <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8002710:	4b10      	ldr	r3, [pc, #64]	; (8002754 <xTaskResumeAll+0x1dc>)
 8002712:	2201      	movs	r2, #1
 8002714:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	3b01      	subs	r3, #1
 800271a:	61bb      	str	r3, [r7, #24]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1f1      	bne.n	8002706 <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8002722:	4b0d      	ldr	r3, [pc, #52]	; (8002758 <xTaskResumeAll+0x1e0>)
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002728:	4b0a      	ldr	r3, [pc, #40]	; (8002754 <xTaskResumeAll+0x1dc>)
 800272a:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800272c:	f000 fc12 	bl	8002f54 <vPortExitCritical>

    return xAlreadyYielded;
 8002730:	697b      	ldr	r3, [r7, #20]
}
 8002732:	4618      	mov	r0, r3
 8002734:	3720      	adds	r7, #32
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	20000194 	.word	0x20000194
 8002740:	2000016c 	.word	0x2000016c
 8002744:	2000012c 	.word	0x2000012c
 8002748:	20000174 	.word	0x20000174
 800274c:	20000098 	.word	0x20000098
 8002750:	20000094 	.word	0x20000094
 8002754:	20000180 	.word	0x20000180
 8002758:	2000017c 	.word	0x2000017c

0800275c <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002762:	f000 fcb3 	bl	80030cc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002766:	2300      	movs	r3, #0
 8002768:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800276a:	4b04      	ldr	r3, [pc, #16]	; (800277c <xTaskGetTickCountFromISR+0x20>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002770:	683b      	ldr	r3, [r7, #0]
}
 8002772:	4618      	mov	r0, r3
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	20000170 	.word	0x20000170

08002780 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b08a      	sub	sp, #40	; 0x28
 8002784:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002786:	2300      	movs	r3, #0
 8002788:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800278a:	4b70      	ldr	r3, [pc, #448]	; (800294c <xTaskIncrementTick+0x1cc>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2b00      	cmp	r3, #0
 8002790:	f040 80d1 	bne.w	8002936 <xTaskIncrementTick+0x1b6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002794:	4b6e      	ldr	r3, [pc, #440]	; (8002950 <xTaskIncrementTick+0x1d0>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	3301      	adds	r3, #1
 800279a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800279c:	4a6c      	ldr	r2, [pc, #432]	; (8002950 <xTaskIncrementTick+0x1d0>)
 800279e:	6a3b      	ldr	r3, [r7, #32]
 80027a0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80027a2:	6a3b      	ldr	r3, [r7, #32]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d120      	bne.n	80027ea <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80027a8:	4b6a      	ldr	r3, [pc, #424]	; (8002954 <xTaskIncrementTick+0x1d4>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00a      	beq.n	80027c8 <xTaskIncrementTick+0x48>
        __asm volatile
 80027b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027b6:	f383 8811 	msr	BASEPRI, r3
 80027ba:	f3bf 8f6f 	isb	sy
 80027be:	f3bf 8f4f 	dsb	sy
 80027c2:	607b      	str	r3, [r7, #4]
    }
 80027c4:	bf00      	nop
 80027c6:	e7fe      	b.n	80027c6 <xTaskIncrementTick+0x46>
 80027c8:	4b62      	ldr	r3, [pc, #392]	; (8002954 <xTaskIncrementTick+0x1d4>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	61fb      	str	r3, [r7, #28]
 80027ce:	4b62      	ldr	r3, [pc, #392]	; (8002958 <xTaskIncrementTick+0x1d8>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a60      	ldr	r2, [pc, #384]	; (8002954 <xTaskIncrementTick+0x1d4>)
 80027d4:	6013      	str	r3, [r2, #0]
 80027d6:	4a60      	ldr	r2, [pc, #384]	; (8002958 <xTaskIncrementTick+0x1d8>)
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	6013      	str	r3, [r2, #0]
 80027dc:	4b5f      	ldr	r3, [pc, #380]	; (800295c <xTaskIncrementTick+0x1dc>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	3301      	adds	r3, #1
 80027e2:	4a5e      	ldr	r2, [pc, #376]	; (800295c <xTaskIncrementTick+0x1dc>)
 80027e4:	6013      	str	r3, [r2, #0]
 80027e6:	f000 f9bd 	bl	8002b64 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80027ea:	4b5d      	ldr	r3, [pc, #372]	; (8002960 <xTaskIncrementTick+0x1e0>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6a3a      	ldr	r2, [r7, #32]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	f0c0 80a5 	bcc.w	8002940 <xTaskIncrementTick+0x1c0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80027f6:	4b57      	ldr	r3, [pc, #348]	; (8002954 <xTaskIncrementTick+0x1d4>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d104      	bne.n	800280a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002800:	4b57      	ldr	r3, [pc, #348]	; (8002960 <xTaskIncrementTick+0x1e0>)
 8002802:	f04f 32ff 	mov.w	r2, #4294967295
 8002806:	601a      	str	r2, [r3, #0]
                    break;
 8002808:	e09a      	b.n	8002940 <xTaskIncrementTick+0x1c0>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800280a:	4b52      	ldr	r3, [pc, #328]	; (8002954 <xTaskIncrementTick+0x1d4>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800281a:	6a3a      	ldr	r2, [r7, #32]
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	429a      	cmp	r2, r3
 8002820:	d203      	bcs.n	800282a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002822:	4a4f      	ldr	r2, [pc, #316]	; (8002960 <xTaskIncrementTick+0x1e0>)
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002828:	e08a      	b.n	8002940 <xTaskIncrementTick+0x1c0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	613b      	str	r3, [r7, #16]
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	68d2      	ldr	r2, [r2, #12]
 8002838:	609a      	str	r2, [r3, #8]
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	6892      	ldr	r2, [r2, #8]
 8002842:	605a      	str	r2, [r3, #4]
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	685a      	ldr	r2, [r3, #4]
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	3304      	adds	r3, #4
 800284c:	429a      	cmp	r2, r3
 800284e:	d103      	bne.n	8002858 <xTaskIncrementTick+0xd8>
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	68da      	ldr	r2, [r3, #12]
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	605a      	str	r2, [r3, #4]
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	2200      	movs	r2, #0
 800285c:	615a      	str	r2, [r3, #20]
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	1e5a      	subs	r2, r3, #1
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286c:	2b00      	cmp	r3, #0
 800286e:	d01e      	beq.n	80028ae <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002874:	60fb      	str	r3, [r7, #12]
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	69db      	ldr	r3, [r3, #28]
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	6a12      	ldr	r2, [r2, #32]
 800287e:	609a      	str	r2, [r3, #8]
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	6a1b      	ldr	r3, [r3, #32]
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	69d2      	ldr	r2, [r2, #28]
 8002888:	605a      	str	r2, [r3, #4]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	685a      	ldr	r2, [r3, #4]
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	3318      	adds	r3, #24
 8002892:	429a      	cmp	r2, r3
 8002894:	d103      	bne.n	800289e <xTaskIncrementTick+0x11e>
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	6a1a      	ldr	r2, [r3, #32]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	605a      	str	r2, [r3, #4]
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	2200      	movs	r2, #0
 80028a2:	629a      	str	r2, [r3, #40]	; 0x28
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	1e5a      	subs	r2, r3, #1
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f002 fc5b 	bl	800516c <SEGGER_SYSVIEW_OnTaskStartReady>
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ba:	2201      	movs	r2, #1
 80028bc:	409a      	lsls	r2, r3
 80028be:	4b29      	ldr	r3, [pc, #164]	; (8002964 <xTaskIncrementTick+0x1e4>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	4a27      	ldr	r2, [pc, #156]	; (8002964 <xTaskIncrementTick+0x1e4>)
 80028c6:	6013      	str	r3, [r2, #0]
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028cc:	4926      	ldr	r1, [pc, #152]	; (8002968 <xTaskIncrementTick+0x1e8>)
 80028ce:	4613      	mov	r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	4413      	add	r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	440b      	add	r3, r1
 80028d8:	3304      	adds	r3, #4
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	60bb      	str	r3, [r7, #8]
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	68ba      	ldr	r2, [r7, #8]
 80028e2:	609a      	str	r2, [r3, #8]
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	689a      	ldr	r2, [r3, #8]
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	60da      	str	r2, [r3, #12]
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	3204      	adds	r2, #4
 80028f4:	605a      	str	r2, [r3, #4]
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	1d1a      	adds	r2, r3, #4
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	609a      	str	r2, [r3, #8]
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002902:	4613      	mov	r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	4413      	add	r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	4a17      	ldr	r2, [pc, #92]	; (8002968 <xTaskIncrementTick+0x1e8>)
 800290c:	441a      	add	r2, r3
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	615a      	str	r2, [r3, #20]
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002916:	4914      	ldr	r1, [pc, #80]	; (8002968 <xTaskIncrementTick+0x1e8>)
 8002918:	4613      	mov	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	4413      	add	r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	440b      	add	r3, r1
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	1c59      	adds	r1, r3, #1
 8002926:	4810      	ldr	r0, [pc, #64]	; (8002968 <xTaskIncrementTick+0x1e8>)
 8002928:	4613      	mov	r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	4413      	add	r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	4403      	add	r3, r0
 8002932:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002934:	e75f      	b.n	80027f6 <xTaskIncrementTick+0x76>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002936:	4b0d      	ldr	r3, [pc, #52]	; (800296c <xTaskIncrementTick+0x1ec>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	3301      	adds	r3, #1
 800293c:	4a0b      	ldr	r2, [pc, #44]	; (800296c <xTaskIncrementTick+0x1ec>)
 800293e:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002942:	4618      	mov	r0, r3
 8002944:	3728      	adds	r7, #40	; 0x28
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	20000194 	.word	0x20000194
 8002950:	20000170 	.word	0x20000170
 8002954:	20000124 	.word	0x20000124
 8002958:	20000128 	.word	0x20000128
 800295c:	20000184 	.word	0x20000184
 8002960:	2000018c 	.word	0x2000018c
 8002964:	20000174 	.word	0x20000174
 8002968:	20000098 	.word	0x20000098
 800296c:	2000017c 	.word	0x2000017c

08002970 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002976:	4b2d      	ldr	r3, [pc, #180]	; (8002a2c <vTaskSwitchContext+0xbc>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d003      	beq.n	8002986 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800297e:	4b2c      	ldr	r3, [pc, #176]	; (8002a30 <vTaskSwitchContext+0xc0>)
 8002980:	2201      	movs	r2, #1
 8002982:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002984:	e04d      	b.n	8002a22 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002986:	4b2a      	ldr	r3, [pc, #168]	; (8002a30 <vTaskSwitchContext+0xc0>)
 8002988:	2200      	movs	r2, #0
 800298a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800298c:	4b29      	ldr	r3, [pc, #164]	; (8002a34 <vTaskSwitchContext+0xc4>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	fab3 f383 	clz	r3, r3
 8002998:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800299a:	7afb      	ldrb	r3, [r7, #11]
 800299c:	f1c3 031f 	rsb	r3, r3, #31
 80029a0:	617b      	str	r3, [r7, #20]
 80029a2:	4925      	ldr	r1, [pc, #148]	; (8002a38 <vTaskSwitchContext+0xc8>)
 80029a4:	697a      	ldr	r2, [r7, #20]
 80029a6:	4613      	mov	r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	4413      	add	r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	440b      	add	r3, r1
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10a      	bne.n	80029cc <vTaskSwitchContext+0x5c>
        __asm volatile
 80029b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ba:	f383 8811 	msr	BASEPRI, r3
 80029be:	f3bf 8f6f 	isb	sy
 80029c2:	f3bf 8f4f 	dsb	sy
 80029c6:	607b      	str	r3, [r7, #4]
    }
 80029c8:	bf00      	nop
 80029ca:	e7fe      	b.n	80029ca <vTaskSwitchContext+0x5a>
 80029cc:	697a      	ldr	r2, [r7, #20]
 80029ce:	4613      	mov	r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	4413      	add	r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	4a18      	ldr	r2, [pc, #96]	; (8002a38 <vTaskSwitchContext+0xc8>)
 80029d8:	4413      	add	r3, r2
 80029da:	613b      	str	r3, [r7, #16]
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	685a      	ldr	r2, [r3, #4]
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	605a      	str	r2, [r3, #4]
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	685a      	ldr	r2, [r3, #4]
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	3308      	adds	r3, #8
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d104      	bne.n	80029fc <vTaskSwitchContext+0x8c>
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	685a      	ldr	r2, [r3, #4]
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	605a      	str	r2, [r3, #4]
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	4a0e      	ldr	r2, [pc, #56]	; (8002a3c <vTaskSwitchContext+0xcc>)
 8002a04:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002a06:	4b0d      	ldr	r3, [pc, #52]	; (8002a3c <vTaskSwitchContext+0xcc>)
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	4b0d      	ldr	r3, [pc, #52]	; (8002a40 <vTaskSwitchContext+0xd0>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d102      	bne.n	8002a18 <vTaskSwitchContext+0xa8>
 8002a12:	f002 fb0b 	bl	800502c <SEGGER_SYSVIEW_OnIdle>
}
 8002a16:	e004      	b.n	8002a22 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002a18:	4b08      	ldr	r3, [pc, #32]	; (8002a3c <vTaskSwitchContext+0xcc>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f002 fb63 	bl	80050e8 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002a22:	bf00      	nop
 8002a24:	3718      	adds	r7, #24
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	20000194 	.word	0x20000194
 8002a30:	20000180 	.word	0x20000180
 8002a34:	20000174 	.word	0x20000174
 8002a38:	20000098 	.word	0x20000098
 8002a3c:	20000094 	.word	0x20000094
 8002a40:	20000190 	.word	0x20000190

08002a44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002a4c:	f000 f84c 	bl	8002ae8 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 8002a50:	4b04      	ldr	r3, [pc, #16]	; (8002a64 <prvIdleTask+0x20>)
 8002a52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a56:	601a      	str	r2, [r3, #0]
 8002a58:	f3bf 8f4f 	dsb	sy
 8002a5c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002a60:	e7f4      	b.n	8002a4c <prvIdleTask+0x8>
 8002a62:	bf00      	nop
 8002a64:	e000ed04 	.word	0xe000ed04

08002a68 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002a6e:	2300      	movs	r3, #0
 8002a70:	607b      	str	r3, [r7, #4]
 8002a72:	e00c      	b.n	8002a8e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	4613      	mov	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	4413      	add	r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	4a12      	ldr	r2, [pc, #72]	; (8002ac8 <prvInitialiseTaskLists+0x60>)
 8002a80:	4413      	add	r3, r2
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7ff fb2c 	bl	80020e0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	607b      	str	r3, [r7, #4]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2b04      	cmp	r3, #4
 8002a92:	d9ef      	bls.n	8002a74 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002a94:	480d      	ldr	r0, [pc, #52]	; (8002acc <prvInitialiseTaskLists+0x64>)
 8002a96:	f7ff fb23 	bl	80020e0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002a9a:	480d      	ldr	r0, [pc, #52]	; (8002ad0 <prvInitialiseTaskLists+0x68>)
 8002a9c:	f7ff fb20 	bl	80020e0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002aa0:	480c      	ldr	r0, [pc, #48]	; (8002ad4 <prvInitialiseTaskLists+0x6c>)
 8002aa2:	f7ff fb1d 	bl	80020e0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002aa6:	480c      	ldr	r0, [pc, #48]	; (8002ad8 <prvInitialiseTaskLists+0x70>)
 8002aa8:	f7ff fb1a 	bl	80020e0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002aac:	480b      	ldr	r0, [pc, #44]	; (8002adc <prvInitialiseTaskLists+0x74>)
 8002aae:	f7ff fb17 	bl	80020e0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002ab2:	4b0b      	ldr	r3, [pc, #44]	; (8002ae0 <prvInitialiseTaskLists+0x78>)
 8002ab4:	4a05      	ldr	r2, [pc, #20]	; (8002acc <prvInitialiseTaskLists+0x64>)
 8002ab6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002ab8:	4b0a      	ldr	r3, [pc, #40]	; (8002ae4 <prvInitialiseTaskLists+0x7c>)
 8002aba:	4a05      	ldr	r2, [pc, #20]	; (8002ad0 <prvInitialiseTaskLists+0x68>)
 8002abc:	601a      	str	r2, [r3, #0]
}
 8002abe:	bf00      	nop
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	20000098 	.word	0x20000098
 8002acc:	200000fc 	.word	0x200000fc
 8002ad0:	20000110 	.word	0x20000110
 8002ad4:	2000012c 	.word	0x2000012c
 8002ad8:	20000140 	.word	0x20000140
 8002adc:	20000158 	.word	0x20000158
 8002ae0:	20000124 	.word	0x20000124
 8002ae4:	20000128 	.word	0x20000128

08002ae8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002aee:	e019      	b.n	8002b24 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002af0:	f000 fa00 	bl	8002ef4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002af4:	4b10      	ldr	r3, [pc, #64]	; (8002b38 <prvCheckTasksWaitingTermination+0x50>)
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	3304      	adds	r3, #4
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7ff fb1a 	bl	800213a <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002b06:	4b0d      	ldr	r3, [pc, #52]	; (8002b3c <prvCheckTasksWaitingTermination+0x54>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	4a0b      	ldr	r2, [pc, #44]	; (8002b3c <prvCheckTasksWaitingTermination+0x54>)
 8002b0e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002b10:	4b0b      	ldr	r3, [pc, #44]	; (8002b40 <prvCheckTasksWaitingTermination+0x58>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	3b01      	subs	r3, #1
 8002b16:	4a0a      	ldr	r2, [pc, #40]	; (8002b40 <prvCheckTasksWaitingTermination+0x58>)
 8002b18:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002b1a:	f000 fa1b 	bl	8002f54 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 f810 	bl	8002b44 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002b24:	4b06      	ldr	r3, [pc, #24]	; (8002b40 <prvCheckTasksWaitingTermination+0x58>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1e1      	bne.n	8002af0 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002b2c:	bf00      	nop
 8002b2e:	bf00      	nop
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	20000140 	.word	0x20000140
 8002b3c:	2000016c 	.word	0x2000016c
 8002b40:	20000154 	.word	0x20000154

08002b44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b50:	4618      	mov	r0, r3
 8002b52:	f000 fbdb 	bl	800330c <vPortFree>
                vPortFree( pxTCB );
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 fbd8 	bl	800330c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002b5c:	bf00      	nop
 8002b5e:	3708      	adds	r7, #8
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b68:	4b0a      	ldr	r3, [pc, #40]	; (8002b94 <prvResetNextTaskUnblockTime+0x30>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d104      	bne.n	8002b7c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002b72:	4b09      	ldr	r3, [pc, #36]	; (8002b98 <prvResetNextTaskUnblockTime+0x34>)
 8002b74:	f04f 32ff 	mov.w	r2, #4294967295
 8002b78:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002b7a:	e005      	b.n	8002b88 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002b7c:	4b05      	ldr	r3, [pc, #20]	; (8002b94 <prvResetNextTaskUnblockTime+0x30>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a04      	ldr	r2, [pc, #16]	; (8002b98 <prvResetNextTaskUnblockTime+0x34>)
 8002b86:	6013      	str	r3, [r2, #0]
}
 8002b88:	bf00      	nop
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	20000124 	.word	0x20000124
 8002b98:	2000018c 	.word	0x2000018c

08002b9c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b085      	sub	sp, #20
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	3b04      	subs	r3, #4
 8002bac:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002bb4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	3b04      	subs	r3, #4
 8002bba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	f023 0201 	bic.w	r2, r3, #1
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	3b04      	subs	r3, #4
 8002bca:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002bcc:	4a0c      	ldr	r2, [pc, #48]	; (8002c00 <pxPortInitialiseStack+0x64>)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	3b14      	subs	r3, #20
 8002bd6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	3b04      	subs	r3, #4
 8002be2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f06f 0202 	mvn.w	r2, #2
 8002bea:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	3b20      	subs	r3, #32
 8002bf0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3714      	adds	r7, #20
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr
 8002c00:	08002c05 	.word	0x08002c05

08002c04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002c04:	b480      	push	{r7}
 8002c06:	b085      	sub	sp, #20
 8002c08:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002c0e:	4b12      	ldr	r3, [pc, #72]	; (8002c58 <prvTaskExitError+0x54>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c16:	d00a      	beq.n	8002c2e <prvTaskExitError+0x2a>
        __asm volatile
 8002c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c1c:	f383 8811 	msr	BASEPRI, r3
 8002c20:	f3bf 8f6f 	isb	sy
 8002c24:	f3bf 8f4f 	dsb	sy
 8002c28:	60fb      	str	r3, [r7, #12]
    }
 8002c2a:	bf00      	nop
 8002c2c:	e7fe      	b.n	8002c2c <prvTaskExitError+0x28>
        __asm volatile
 8002c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c32:	f383 8811 	msr	BASEPRI, r3
 8002c36:	f3bf 8f6f 	isb	sy
 8002c3a:	f3bf 8f4f 	dsb	sy
 8002c3e:	60bb      	str	r3, [r7, #8]
    }
 8002c40:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002c42:	bf00      	nop
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d0fc      	beq.n	8002c44 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002c4a:	bf00      	nop
 8002c4c:	bf00      	nop
 8002c4e:	3714      	adds	r7, #20
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr
 8002c58:	20000010 	.word	0x20000010
 8002c5c:	00000000 	.word	0x00000000

08002c60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002c60:	4b07      	ldr	r3, [pc, #28]	; (8002c80 <pxCurrentTCBConst2>)
 8002c62:	6819      	ldr	r1, [r3, #0]
 8002c64:	6808      	ldr	r0, [r1, #0]
 8002c66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c6a:	f380 8809 	msr	PSP, r0
 8002c6e:	f3bf 8f6f 	isb	sy
 8002c72:	f04f 0000 	mov.w	r0, #0
 8002c76:	f380 8811 	msr	BASEPRI, r0
 8002c7a:	4770      	bx	lr
 8002c7c:	f3af 8000 	nop.w

08002c80 <pxCurrentTCBConst2>:
 8002c80:	20000094 	.word	0x20000094
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002c84:	bf00      	nop
 8002c86:	bf00      	nop

08002c88 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002c88:	4808      	ldr	r0, [pc, #32]	; (8002cac <prvPortStartFirstTask+0x24>)
 8002c8a:	6800      	ldr	r0, [r0, #0]
 8002c8c:	6800      	ldr	r0, [r0, #0]
 8002c8e:	f380 8808 	msr	MSP, r0
 8002c92:	f04f 0000 	mov.w	r0, #0
 8002c96:	f380 8814 	msr	CONTROL, r0
 8002c9a:	b662      	cpsie	i
 8002c9c:	b661      	cpsie	f
 8002c9e:	f3bf 8f4f 	dsb	sy
 8002ca2:	f3bf 8f6f 	isb	sy
 8002ca6:	df00      	svc	0
 8002ca8:	bf00      	nop
 8002caa:	0000      	.short	0x0000
 8002cac:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002cb0:	bf00      	nop
 8002cb2:	bf00      	nop

08002cb4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002cba:	4b46      	ldr	r3, [pc, #280]	; (8002dd4 <xPortStartScheduler+0x120>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a46      	ldr	r2, [pc, #280]	; (8002dd8 <xPortStartScheduler+0x124>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d10a      	bne.n	8002cda <xPortStartScheduler+0x26>
        __asm volatile
 8002cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cc8:	f383 8811 	msr	BASEPRI, r3
 8002ccc:	f3bf 8f6f 	isb	sy
 8002cd0:	f3bf 8f4f 	dsb	sy
 8002cd4:	613b      	str	r3, [r7, #16]
    }
 8002cd6:	bf00      	nop
 8002cd8:	e7fe      	b.n	8002cd8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002cda:	4b3e      	ldr	r3, [pc, #248]	; (8002dd4 <xPortStartScheduler+0x120>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a3f      	ldr	r2, [pc, #252]	; (8002ddc <xPortStartScheduler+0x128>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d10a      	bne.n	8002cfa <xPortStartScheduler+0x46>
        __asm volatile
 8002ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce8:	f383 8811 	msr	BASEPRI, r3
 8002cec:	f3bf 8f6f 	isb	sy
 8002cf0:	f3bf 8f4f 	dsb	sy
 8002cf4:	60fb      	str	r3, [r7, #12]
    }
 8002cf6:	bf00      	nop
 8002cf8:	e7fe      	b.n	8002cf8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002cfa:	4b39      	ldr	r3, [pc, #228]	; (8002de0 <xPortStartScheduler+0x12c>)
 8002cfc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	22ff      	movs	r2, #255	; 0xff
 8002d0a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002d14:	78fb      	ldrb	r3, [r7, #3]
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002d1c:	b2da      	uxtb	r2, r3
 8002d1e:	4b31      	ldr	r3, [pc, #196]	; (8002de4 <xPortStartScheduler+0x130>)
 8002d20:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002d22:	4b31      	ldr	r3, [pc, #196]	; (8002de8 <xPortStartScheduler+0x134>)
 8002d24:	2207      	movs	r2, #7
 8002d26:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002d28:	e009      	b.n	8002d3e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002d2a:	4b2f      	ldr	r3, [pc, #188]	; (8002de8 <xPortStartScheduler+0x134>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	4a2d      	ldr	r2, [pc, #180]	; (8002de8 <xPortStartScheduler+0x134>)
 8002d32:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002d34:	78fb      	ldrb	r3, [r7, #3]
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002d3e:	78fb      	ldrb	r3, [r7, #3]
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d46:	2b80      	cmp	r3, #128	; 0x80
 8002d48:	d0ef      	beq.n	8002d2a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002d4a:	4b27      	ldr	r3, [pc, #156]	; (8002de8 <xPortStartScheduler+0x134>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f1c3 0307 	rsb	r3, r3, #7
 8002d52:	2b04      	cmp	r3, #4
 8002d54:	d00a      	beq.n	8002d6c <xPortStartScheduler+0xb8>
        __asm volatile
 8002d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d5a:	f383 8811 	msr	BASEPRI, r3
 8002d5e:	f3bf 8f6f 	isb	sy
 8002d62:	f3bf 8f4f 	dsb	sy
 8002d66:	60bb      	str	r3, [r7, #8]
    }
 8002d68:	bf00      	nop
 8002d6a:	e7fe      	b.n	8002d6a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002d6c:	4b1e      	ldr	r3, [pc, #120]	; (8002de8 <xPortStartScheduler+0x134>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	021b      	lsls	r3, r3, #8
 8002d72:	4a1d      	ldr	r2, [pc, #116]	; (8002de8 <xPortStartScheduler+0x134>)
 8002d74:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002d76:	4b1c      	ldr	r3, [pc, #112]	; (8002de8 <xPortStartScheduler+0x134>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d7e:	4a1a      	ldr	r2, [pc, #104]	; (8002de8 <xPortStartScheduler+0x134>)
 8002d80:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	b2da      	uxtb	r2, r3
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002d8a:	4b18      	ldr	r3, [pc, #96]	; (8002dec <xPortStartScheduler+0x138>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a17      	ldr	r2, [pc, #92]	; (8002dec <xPortStartScheduler+0x138>)
 8002d90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d94:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002d96:	4b15      	ldr	r3, [pc, #84]	; (8002dec <xPortStartScheduler+0x138>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a14      	ldr	r2, [pc, #80]	; (8002dec <xPortStartScheduler+0x138>)
 8002d9c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002da0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002da2:	f000 f963 	bl	800306c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002da6:	4b12      	ldr	r3, [pc, #72]	; (8002df0 <xPortStartScheduler+0x13c>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002dac:	f000 f982 	bl	80030b4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002db0:	4b10      	ldr	r3, [pc, #64]	; (8002df4 <xPortStartScheduler+0x140>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a0f      	ldr	r2, [pc, #60]	; (8002df4 <xPortStartScheduler+0x140>)
 8002db6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002dba:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002dbc:	f7ff ff64 	bl	8002c88 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002dc0:	f7ff fdd6 	bl	8002970 <vTaskSwitchContext>
    prvTaskExitError();
 8002dc4:	f7ff ff1e 	bl	8002c04 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3718      	adds	r7, #24
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	e000ed00 	.word	0xe000ed00
 8002dd8:	410fc271 	.word	0x410fc271
 8002ddc:	410fc270 	.word	0x410fc270
 8002de0:	e000e400 	.word	0xe000e400
 8002de4:	20000198 	.word	0x20000198
 8002de8:	2000019c 	.word	0x2000019c
 8002dec:	e000ed20 	.word	0xe000ed20
 8002df0:	20000010 	.word	0x20000010
 8002df4:	e000ef34 	.word	0xe000ef34

08002df8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b087      	sub	sp, #28
 8002dfc:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002dfe:	4b37      	ldr	r3, [pc, #220]	; (8002edc <vInitPrioGroupValue+0xe4>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a37      	ldr	r2, [pc, #220]	; (8002ee0 <vInitPrioGroupValue+0xe8>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d10a      	bne.n	8002e1e <vInitPrioGroupValue+0x26>
        __asm volatile
 8002e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e0c:	f383 8811 	msr	BASEPRI, r3
 8002e10:	f3bf 8f6f 	isb	sy
 8002e14:	f3bf 8f4f 	dsb	sy
 8002e18:	613b      	str	r3, [r7, #16]
    }
 8002e1a:	bf00      	nop
 8002e1c:	e7fe      	b.n	8002e1c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002e1e:	4b2f      	ldr	r3, [pc, #188]	; (8002edc <vInitPrioGroupValue+0xe4>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a30      	ldr	r2, [pc, #192]	; (8002ee4 <vInitPrioGroupValue+0xec>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d10a      	bne.n	8002e3e <vInitPrioGroupValue+0x46>
        __asm volatile
 8002e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e2c:	f383 8811 	msr	BASEPRI, r3
 8002e30:	f3bf 8f6f 	isb	sy
 8002e34:	f3bf 8f4f 	dsb	sy
 8002e38:	60fb      	str	r3, [r7, #12]
    }
 8002e3a:	bf00      	nop
 8002e3c:	e7fe      	b.n	8002e3c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002e3e:	4b2a      	ldr	r3, [pc, #168]	; (8002ee8 <vInitPrioGroupValue+0xf0>)
 8002e40:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	22ff      	movs	r2, #255	; 0xff
 8002e4e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002e58:	78fb      	ldrb	r3, [r7, #3]
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002e60:	b2da      	uxtb	r2, r3
 8002e62:	4b22      	ldr	r3, [pc, #136]	; (8002eec <vInitPrioGroupValue+0xf4>)
 8002e64:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002e66:	4b22      	ldr	r3, [pc, #136]	; (8002ef0 <vInitPrioGroupValue+0xf8>)
 8002e68:	2207      	movs	r2, #7
 8002e6a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002e6c:	e009      	b.n	8002e82 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002e6e:	4b20      	ldr	r3, [pc, #128]	; (8002ef0 <vInitPrioGroupValue+0xf8>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	3b01      	subs	r3, #1
 8002e74:	4a1e      	ldr	r2, [pc, #120]	; (8002ef0 <vInitPrioGroupValue+0xf8>)
 8002e76:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002e78:	78fb      	ldrb	r3, [r7, #3]
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002e82:	78fb      	ldrb	r3, [r7, #3]
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e8a:	2b80      	cmp	r3, #128	; 0x80
 8002e8c:	d0ef      	beq.n	8002e6e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002e8e:	4b18      	ldr	r3, [pc, #96]	; (8002ef0 <vInitPrioGroupValue+0xf8>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f1c3 0307 	rsb	r3, r3, #7
 8002e96:	2b04      	cmp	r3, #4
 8002e98:	d00a      	beq.n	8002eb0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8002e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e9e:	f383 8811 	msr	BASEPRI, r3
 8002ea2:	f3bf 8f6f 	isb	sy
 8002ea6:	f3bf 8f4f 	dsb	sy
 8002eaa:	60bb      	str	r3, [r7, #8]
    }
 8002eac:	bf00      	nop
 8002eae:	e7fe      	b.n	8002eae <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002eb0:	4b0f      	ldr	r3, [pc, #60]	; (8002ef0 <vInitPrioGroupValue+0xf8>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	021b      	lsls	r3, r3, #8
 8002eb6:	4a0e      	ldr	r2, [pc, #56]	; (8002ef0 <vInitPrioGroupValue+0xf8>)
 8002eb8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002eba:	4b0d      	ldr	r3, [pc, #52]	; (8002ef0 <vInitPrioGroupValue+0xf8>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ec2:	4a0b      	ldr	r2, [pc, #44]	; (8002ef0 <vInitPrioGroupValue+0xf8>)
 8002ec4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	b2da      	uxtb	r2, r3
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8002ece:	bf00      	nop
 8002ed0:	371c      	adds	r7, #28
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	e000ed00 	.word	0xe000ed00
 8002ee0:	410fc271 	.word	0x410fc271
 8002ee4:	410fc270 	.word	0x410fc270
 8002ee8:	e000e400 	.word	0xe000e400
 8002eec:	20000198 	.word	0x20000198
 8002ef0:	2000019c 	.word	0x2000019c

08002ef4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
        __asm volatile
 8002efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002efe:	f383 8811 	msr	BASEPRI, r3
 8002f02:	f3bf 8f6f 	isb	sy
 8002f06:	f3bf 8f4f 	dsb	sy
 8002f0a:	607b      	str	r3, [r7, #4]
    }
 8002f0c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002f0e:	4b0f      	ldr	r3, [pc, #60]	; (8002f4c <vPortEnterCritical+0x58>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	3301      	adds	r3, #1
 8002f14:	4a0d      	ldr	r2, [pc, #52]	; (8002f4c <vPortEnterCritical+0x58>)
 8002f16:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002f18:	4b0c      	ldr	r3, [pc, #48]	; (8002f4c <vPortEnterCritical+0x58>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d10f      	bne.n	8002f40 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002f20:	4b0b      	ldr	r3, [pc, #44]	; (8002f50 <vPortEnterCritical+0x5c>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00a      	beq.n	8002f40 <vPortEnterCritical+0x4c>
        __asm volatile
 8002f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f2e:	f383 8811 	msr	BASEPRI, r3
 8002f32:	f3bf 8f6f 	isb	sy
 8002f36:	f3bf 8f4f 	dsb	sy
 8002f3a:	603b      	str	r3, [r7, #0]
    }
 8002f3c:	bf00      	nop
 8002f3e:	e7fe      	b.n	8002f3e <vPortEnterCritical+0x4a>
    }
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr
 8002f4c:	20000010 	.word	0x20000010
 8002f50:	e000ed04 	.word	0xe000ed04

08002f54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002f5a:	4b12      	ldr	r3, [pc, #72]	; (8002fa4 <vPortExitCritical+0x50>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10a      	bne.n	8002f78 <vPortExitCritical+0x24>
        __asm volatile
 8002f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f66:	f383 8811 	msr	BASEPRI, r3
 8002f6a:	f3bf 8f6f 	isb	sy
 8002f6e:	f3bf 8f4f 	dsb	sy
 8002f72:	607b      	str	r3, [r7, #4]
    }
 8002f74:	bf00      	nop
 8002f76:	e7fe      	b.n	8002f76 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002f78:	4b0a      	ldr	r3, [pc, #40]	; (8002fa4 <vPortExitCritical+0x50>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	4a09      	ldr	r2, [pc, #36]	; (8002fa4 <vPortExitCritical+0x50>)
 8002f80:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002f82:	4b08      	ldr	r3, [pc, #32]	; (8002fa4 <vPortExitCritical+0x50>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d105      	bne.n	8002f96 <vPortExitCritical+0x42>
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002f94:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002f96:	bf00      	nop
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	20000010 	.word	0x20000010
	...

08002fb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002fb0:	f3ef 8009 	mrs	r0, PSP
 8002fb4:	f3bf 8f6f 	isb	sy
 8002fb8:	4b15      	ldr	r3, [pc, #84]	; (8003010 <pxCurrentTCBConst>)
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	f01e 0f10 	tst.w	lr, #16
 8002fc0:	bf08      	it	eq
 8002fc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002fc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fca:	6010      	str	r0, [r2, #0]
 8002fcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002fd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002fd4:	f380 8811 	msr	BASEPRI, r0
 8002fd8:	f3bf 8f4f 	dsb	sy
 8002fdc:	f3bf 8f6f 	isb	sy
 8002fe0:	f7ff fcc6 	bl	8002970 <vTaskSwitchContext>
 8002fe4:	f04f 0000 	mov.w	r0, #0
 8002fe8:	f380 8811 	msr	BASEPRI, r0
 8002fec:	bc09      	pop	{r0, r3}
 8002fee:	6819      	ldr	r1, [r3, #0]
 8002ff0:	6808      	ldr	r0, [r1, #0]
 8002ff2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ff6:	f01e 0f10 	tst.w	lr, #16
 8002ffa:	bf08      	it	eq
 8002ffc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003000:	f380 8809 	msr	PSP, r0
 8003004:	f3bf 8f6f 	isb	sy
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	f3af 8000 	nop.w

08003010 <pxCurrentTCBConst>:
 8003010:	20000094 	.word	0x20000094
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003014:	bf00      	nop
 8003016:	bf00      	nop

08003018 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
        __asm volatile
 800301e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003022:	f383 8811 	msr	BASEPRI, r3
 8003026:	f3bf 8f6f 	isb	sy
 800302a:	f3bf 8f4f 	dsb	sy
 800302e:	607b      	str	r3, [r7, #4]
    }
 8003030:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003032:	f001 ff81 	bl	8004f38 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003036:	f7ff fba3 	bl	8002780 <xTaskIncrementTick>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d006      	beq.n	800304e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003040:	f001 ffd8 	bl	8004ff4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003044:	4b08      	ldr	r3, [pc, #32]	; (8003068 <SysTick_Handler+0x50>)
 8003046:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800304a:	601a      	str	r2, [r3, #0]
 800304c:	e001      	b.n	8003052 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800304e:	f001 ffb5 	bl	8004fbc <SEGGER_SYSVIEW_RecordExitISR>
 8003052:	2300      	movs	r3, #0
 8003054:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	f383 8811 	msr	BASEPRI, r3
    }
 800305c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800305e:	bf00      	nop
 8003060:	3708      	adds	r7, #8
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	e000ed04 	.word	0xe000ed04

0800306c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003070:	4b0b      	ldr	r3, [pc, #44]	; (80030a0 <vPortSetupTimerInterrupt+0x34>)
 8003072:	2200      	movs	r2, #0
 8003074:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003076:	4b0b      	ldr	r3, [pc, #44]	; (80030a4 <vPortSetupTimerInterrupt+0x38>)
 8003078:	2200      	movs	r2, #0
 800307a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800307c:	4b0a      	ldr	r3, [pc, #40]	; (80030a8 <vPortSetupTimerInterrupt+0x3c>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a0a      	ldr	r2, [pc, #40]	; (80030ac <vPortSetupTimerInterrupt+0x40>)
 8003082:	fba2 2303 	umull	r2, r3, r2, r3
 8003086:	099b      	lsrs	r3, r3, #6
 8003088:	4a09      	ldr	r2, [pc, #36]	; (80030b0 <vPortSetupTimerInterrupt+0x44>)
 800308a:	3b01      	subs	r3, #1
 800308c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800308e:	4b04      	ldr	r3, [pc, #16]	; (80030a0 <vPortSetupTimerInterrupt+0x34>)
 8003090:	2207      	movs	r2, #7
 8003092:	601a      	str	r2, [r3, #0]
}
 8003094:	bf00      	nop
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	e000e010 	.word	0xe000e010
 80030a4:	e000e018 	.word	0xe000e018
 80030a8:	20000000 	.word	0x20000000
 80030ac:	10624dd3 	.word	0x10624dd3
 80030b0:	e000e014 	.word	0xe000e014

080030b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80030b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80030c4 <vPortEnableVFP+0x10>
 80030b8:	6801      	ldr	r1, [r0, #0]
 80030ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80030be:	6001      	str	r1, [r0, #0]
 80030c0:	4770      	bx	lr
 80030c2:	0000      	.short	0x0000
 80030c4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80030c8:	bf00      	nop
 80030ca:	bf00      	nop

080030cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80030cc:	b480      	push	{r7}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80030d2:	f3ef 8305 	mrs	r3, IPSR
 80030d6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2b0f      	cmp	r3, #15
 80030dc:	d914      	bls.n	8003108 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80030de:	4a17      	ldr	r2, [pc, #92]	; (800313c <vPortValidateInterruptPriority+0x70>)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	4413      	add	r3, r2
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80030e8:	4b15      	ldr	r3, [pc, #84]	; (8003140 <vPortValidateInterruptPriority+0x74>)
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	7afa      	ldrb	r2, [r7, #11]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d20a      	bcs.n	8003108 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80030f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f6:	f383 8811 	msr	BASEPRI, r3
 80030fa:	f3bf 8f6f 	isb	sy
 80030fe:	f3bf 8f4f 	dsb	sy
 8003102:	607b      	str	r3, [r7, #4]
    }
 8003104:	bf00      	nop
 8003106:	e7fe      	b.n	8003106 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003108:	4b0e      	ldr	r3, [pc, #56]	; (8003144 <vPortValidateInterruptPriority+0x78>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003110:	4b0d      	ldr	r3, [pc, #52]	; (8003148 <vPortValidateInterruptPriority+0x7c>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	429a      	cmp	r2, r3
 8003116:	d90a      	bls.n	800312e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800311c:	f383 8811 	msr	BASEPRI, r3
 8003120:	f3bf 8f6f 	isb	sy
 8003124:	f3bf 8f4f 	dsb	sy
 8003128:	603b      	str	r3, [r7, #0]
    }
 800312a:	bf00      	nop
 800312c:	e7fe      	b.n	800312c <vPortValidateInterruptPriority+0x60>
    }
 800312e:	bf00      	nop
 8003130:	3714      	adds	r7, #20
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	e000e3f0 	.word	0xe000e3f0
 8003140:	20000198 	.word	0x20000198
 8003144:	e000ed0c 	.word	0xe000ed0c
 8003148:	2000019c 	.word	0x2000019c

0800314c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b08a      	sub	sp, #40	; 0x28
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003154:	2300      	movs	r3, #0
 8003156:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003158:	f7ff fa00 	bl	800255c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800315c:	4b65      	ldr	r3, [pc, #404]	; (80032f4 <pvPortMalloc+0x1a8>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d101      	bne.n	8003168 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003164:	f000 f934 	bl	80033d0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003168:	4b63      	ldr	r3, [pc, #396]	; (80032f8 <pvPortMalloc+0x1ac>)
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4013      	ands	r3, r2
 8003170:	2b00      	cmp	r3, #0
 8003172:	f040 80a7 	bne.w	80032c4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d02d      	beq.n	80031d8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800317c:	2208      	movs	r2, #8
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	429a      	cmp	r2, r3
 8003186:	d227      	bcs.n	80031d8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003188:	2208      	movs	r2, #8
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4413      	add	r3, r2
 800318e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f003 0307 	and.w	r3, r3, #7
 8003196:	2b00      	cmp	r3, #0
 8003198:	d021      	beq.n	80031de <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f023 0307 	bic.w	r3, r3, #7
 80031a0:	3308      	adds	r3, #8
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d214      	bcs.n	80031d2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f023 0307 	bic.w	r3, r3, #7
 80031ae:	3308      	adds	r3, #8
 80031b0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f003 0307 	and.w	r3, r3, #7
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d010      	beq.n	80031de <pvPortMalloc+0x92>
        __asm volatile
 80031bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c0:	f383 8811 	msr	BASEPRI, r3
 80031c4:	f3bf 8f6f 	isb	sy
 80031c8:	f3bf 8f4f 	dsb	sy
 80031cc:	617b      	str	r3, [r7, #20]
    }
 80031ce:	bf00      	nop
 80031d0:	e7fe      	b.n	80031d0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80031d2:	2300      	movs	r3, #0
 80031d4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80031d6:	e002      	b.n	80031de <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 80031d8:	2300      	movs	r3, #0
 80031da:	607b      	str	r3, [r7, #4]
 80031dc:	e000      	b.n	80031e0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80031de:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d06e      	beq.n	80032c4 <pvPortMalloc+0x178>
 80031e6:	4b45      	ldr	r3, [pc, #276]	; (80032fc <pvPortMalloc+0x1b0>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d869      	bhi.n	80032c4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80031f0:	4b43      	ldr	r3, [pc, #268]	; (8003300 <pvPortMalloc+0x1b4>)
 80031f2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80031f4:	4b42      	ldr	r3, [pc, #264]	; (8003300 <pvPortMalloc+0x1b4>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80031fa:	e004      	b.n	8003206 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80031fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fe:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	429a      	cmp	r2, r3
 800320e:	d903      	bls.n	8003218 <pvPortMalloc+0xcc>
 8003210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1f1      	bne.n	80031fc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003218:	4b36      	ldr	r3, [pc, #216]	; (80032f4 <pvPortMalloc+0x1a8>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800321e:	429a      	cmp	r2, r3
 8003220:	d050      	beq.n	80032c4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003222:	6a3b      	ldr	r3, [r7, #32]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2208      	movs	r2, #8
 8003228:	4413      	add	r3, r2
 800322a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800322c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	6a3b      	ldr	r3, [r7, #32]
 8003232:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003236:	685a      	ldr	r2, [r3, #4]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	1ad2      	subs	r2, r2, r3
 800323c:	2308      	movs	r3, #8
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	429a      	cmp	r2, r3
 8003242:	d91f      	bls.n	8003284 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4413      	add	r3, r2
 800324a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	f003 0307 	and.w	r3, r3, #7
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00a      	beq.n	800326c <pvPortMalloc+0x120>
        __asm volatile
 8003256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800325a:	f383 8811 	msr	BASEPRI, r3
 800325e:	f3bf 8f6f 	isb	sy
 8003262:	f3bf 8f4f 	dsb	sy
 8003266:	613b      	str	r3, [r7, #16]
    }
 8003268:	bf00      	nop
 800326a:	e7fe      	b.n	800326a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800326c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326e:	685a      	ldr	r2, [r3, #4]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	1ad2      	subs	r2, r2, r3
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800327e:	69b8      	ldr	r0, [r7, #24]
 8003280:	f000 f908 	bl	8003494 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003284:	4b1d      	ldr	r3, [pc, #116]	; (80032fc <pvPortMalloc+0x1b0>)
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	4a1b      	ldr	r2, [pc, #108]	; (80032fc <pvPortMalloc+0x1b0>)
 8003290:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003292:	4b1a      	ldr	r3, [pc, #104]	; (80032fc <pvPortMalloc+0x1b0>)
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	4b1b      	ldr	r3, [pc, #108]	; (8003304 <pvPortMalloc+0x1b8>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	429a      	cmp	r2, r3
 800329c:	d203      	bcs.n	80032a6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800329e:	4b17      	ldr	r3, [pc, #92]	; (80032fc <pvPortMalloc+0x1b0>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a18      	ldr	r2, [pc, #96]	; (8003304 <pvPortMalloc+0x1b8>)
 80032a4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80032a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a8:	685a      	ldr	r2, [r3, #4]
 80032aa:	4b13      	ldr	r3, [pc, #76]	; (80032f8 <pvPortMalloc+0x1ac>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	431a      	orrs	r2, r3
 80032b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80032b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b6:	2200      	movs	r2, #0
 80032b8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80032ba:	4b13      	ldr	r3, [pc, #76]	; (8003308 <pvPortMalloc+0x1bc>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	3301      	adds	r3, #1
 80032c0:	4a11      	ldr	r2, [pc, #68]	; (8003308 <pvPortMalloc+0x1bc>)
 80032c2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80032c4:	f7ff f958 	bl	8002578 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	f003 0307 	and.w	r3, r3, #7
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00a      	beq.n	80032e8 <pvPortMalloc+0x19c>
        __asm volatile
 80032d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032d6:	f383 8811 	msr	BASEPRI, r3
 80032da:	f3bf 8f6f 	isb	sy
 80032de:	f3bf 8f4f 	dsb	sy
 80032e2:	60fb      	str	r3, [r7, #12]
    }
 80032e4:	bf00      	nop
 80032e6:	e7fe      	b.n	80032e6 <pvPortMalloc+0x19a>
    return pvReturn;
 80032e8:	69fb      	ldr	r3, [r7, #28]
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3728      	adds	r7, #40	; 0x28
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	20012da8 	.word	0x20012da8
 80032f8:	20012dbc 	.word	0x20012dbc
 80032fc:	20012dac 	.word	0x20012dac
 8003300:	20012da0 	.word	0x20012da0
 8003304:	20012db0 	.word	0x20012db0
 8003308:	20012db4 	.word	0x20012db4

0800330c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b086      	sub	sp, #24
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d04d      	beq.n	80033ba <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800331e:	2308      	movs	r3, #8
 8003320:	425b      	negs	r3, r3
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	4413      	add	r3, r2
 8003326:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	685a      	ldr	r2, [r3, #4]
 8003330:	4b24      	ldr	r3, [pc, #144]	; (80033c4 <vPortFree+0xb8>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4013      	ands	r3, r2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d10a      	bne.n	8003350 <vPortFree+0x44>
        __asm volatile
 800333a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800333e:	f383 8811 	msr	BASEPRI, r3
 8003342:	f3bf 8f6f 	isb	sy
 8003346:	f3bf 8f4f 	dsb	sy
 800334a:	60fb      	str	r3, [r7, #12]
    }
 800334c:	bf00      	nop
 800334e:	e7fe      	b.n	800334e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d00a      	beq.n	800336e <vPortFree+0x62>
        __asm volatile
 8003358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800335c:	f383 8811 	msr	BASEPRI, r3
 8003360:	f3bf 8f6f 	isb	sy
 8003364:	f3bf 8f4f 	dsb	sy
 8003368:	60bb      	str	r3, [r7, #8]
    }
 800336a:	bf00      	nop
 800336c:	e7fe      	b.n	800336c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	685a      	ldr	r2, [r3, #4]
 8003372:	4b14      	ldr	r3, [pc, #80]	; (80033c4 <vPortFree+0xb8>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4013      	ands	r3, r2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d01e      	beq.n	80033ba <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d11a      	bne.n	80033ba <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	685a      	ldr	r2, [r3, #4]
 8003388:	4b0e      	ldr	r3, [pc, #56]	; (80033c4 <vPortFree+0xb8>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	43db      	mvns	r3, r3
 800338e:	401a      	ands	r2, r3
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003394:	f7ff f8e2 	bl	800255c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	4b0a      	ldr	r3, [pc, #40]	; (80033c8 <vPortFree+0xbc>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4413      	add	r3, r2
 80033a2:	4a09      	ldr	r2, [pc, #36]	; (80033c8 <vPortFree+0xbc>)
 80033a4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80033a6:	6938      	ldr	r0, [r7, #16]
 80033a8:	f000 f874 	bl	8003494 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80033ac:	4b07      	ldr	r3, [pc, #28]	; (80033cc <vPortFree+0xc0>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	3301      	adds	r3, #1
 80033b2:	4a06      	ldr	r2, [pc, #24]	; (80033cc <vPortFree+0xc0>)
 80033b4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80033b6:	f7ff f8df 	bl	8002578 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80033ba:	bf00      	nop
 80033bc:	3718      	adds	r7, #24
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	20012dbc 	.word	0x20012dbc
 80033c8:	20012dac 	.word	0x20012dac
 80033cc:	20012db8 	.word	0x20012db8

080033d0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80033d6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80033da:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80033dc:	4b27      	ldr	r3, [pc, #156]	; (800347c <prvHeapInit+0xac>)
 80033de:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f003 0307 	and.w	r3, r3, #7
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00c      	beq.n	8003404 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	3307      	adds	r3, #7
 80033ee:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f023 0307 	bic.w	r3, r3, #7
 80033f6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80033f8:	68ba      	ldr	r2, [r7, #8]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	4a1f      	ldr	r2, [pc, #124]	; (800347c <prvHeapInit+0xac>)
 8003400:	4413      	add	r3, r2
 8003402:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003408:	4a1d      	ldr	r2, [pc, #116]	; (8003480 <prvHeapInit+0xb0>)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800340e:	4b1c      	ldr	r3, [pc, #112]	; (8003480 <prvHeapInit+0xb0>)
 8003410:	2200      	movs	r2, #0
 8003412:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	68ba      	ldr	r2, [r7, #8]
 8003418:	4413      	add	r3, r2
 800341a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800341c:	2208      	movs	r2, #8
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	1a9b      	subs	r3, r3, r2
 8003422:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f023 0307 	bic.w	r3, r3, #7
 800342a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	4a15      	ldr	r2, [pc, #84]	; (8003484 <prvHeapInit+0xb4>)
 8003430:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003432:	4b14      	ldr	r3, [pc, #80]	; (8003484 <prvHeapInit+0xb4>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2200      	movs	r2, #0
 8003438:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800343a:	4b12      	ldr	r3, [pc, #72]	; (8003484 <prvHeapInit+0xb4>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2200      	movs	r2, #0
 8003440:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	1ad2      	subs	r2, r2, r3
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003450:	4b0c      	ldr	r3, [pc, #48]	; (8003484 <prvHeapInit+0xb4>)
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	4a0a      	ldr	r2, [pc, #40]	; (8003488 <prvHeapInit+0xb8>)
 800345e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	4a09      	ldr	r2, [pc, #36]	; (800348c <prvHeapInit+0xbc>)
 8003466:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003468:	4b09      	ldr	r3, [pc, #36]	; (8003490 <prvHeapInit+0xc0>)
 800346a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800346e:	601a      	str	r2, [r3, #0]
}
 8003470:	bf00      	nop
 8003472:	3714      	adds	r7, #20
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr
 800347c:	200001a0 	.word	0x200001a0
 8003480:	20012da0 	.word	0x20012da0
 8003484:	20012da8 	.word	0x20012da8
 8003488:	20012db0 	.word	0x20012db0
 800348c:	20012dac 	.word	0x20012dac
 8003490:	20012dbc 	.word	0x20012dbc

08003494 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800349c:	4b28      	ldr	r3, [pc, #160]	; (8003540 <prvInsertBlockIntoFreeList+0xac>)
 800349e:	60fb      	str	r3, [r7, #12]
 80034a0:	e002      	b.n	80034a8 <prvInsertBlockIntoFreeList+0x14>
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	60fb      	str	r3, [r7, #12]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d8f7      	bhi.n	80034a2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	68ba      	ldr	r2, [r7, #8]
 80034bc:	4413      	add	r3, r2
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d108      	bne.n	80034d6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	685a      	ldr	r2, [r3, #4]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	441a      	add	r2, r3
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	68ba      	ldr	r2, [r7, #8]
 80034e0:	441a      	add	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d118      	bne.n	800351c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	4b15      	ldr	r3, [pc, #84]	; (8003544 <prvInsertBlockIntoFreeList+0xb0>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d00d      	beq.n	8003512 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685a      	ldr	r2, [r3, #4]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	441a      	add	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	601a      	str	r2, [r3, #0]
 8003510:	e008      	b.n	8003524 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003512:	4b0c      	ldr	r3, [pc, #48]	; (8003544 <prvInsertBlockIntoFreeList+0xb0>)
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	e003      	b.n	8003524 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003524:	68fa      	ldr	r2, [r7, #12]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	429a      	cmp	r2, r3
 800352a:	d002      	beq.n	8003532 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003532:	bf00      	nop
 8003534:	3714      	adds	r7, #20
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	20012da0 	.word	0x20012da0
 8003544:	20012da8 	.word	0x20012da8

08003548 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003548:	b580      	push	{r7, lr}
 800354a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800354c:	4803      	ldr	r0, [pc, #12]	; (800355c <_cbSendSystemDesc+0x14>)
 800354e:	f001 fc9d 	bl	8004e8c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003552:	4803      	ldr	r0, [pc, #12]	; (8003560 <_cbSendSystemDesc+0x18>)
 8003554:	f001 fc9a 	bl	8004e8c <SEGGER_SYSVIEW_SendSysDesc>
}
 8003558:	bf00      	nop
 800355a:	bd80      	pop	{r7, pc}
 800355c:	08005dd8 	.word	0x08005dd8
 8003560:	08005e1c 	.word	0x08005e1c

08003564 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003568:	4b06      	ldr	r3, [pc, #24]	; (8003584 <SEGGER_SYSVIEW_Conf+0x20>)
 800356a:	6818      	ldr	r0, [r3, #0]
 800356c:	4b05      	ldr	r3, [pc, #20]	; (8003584 <SEGGER_SYSVIEW_Conf+0x20>)
 800356e:	6819      	ldr	r1, [r3, #0]
 8003570:	4b05      	ldr	r3, [pc, #20]	; (8003588 <SEGGER_SYSVIEW_Conf+0x24>)
 8003572:	4a06      	ldr	r2, [pc, #24]	; (800358c <SEGGER_SYSVIEW_Conf+0x28>)
 8003574:	f001 f910 	bl	8004798 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003578:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800357c:	f001 f950 	bl	8004820 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003580:	bf00      	nop
 8003582:	bd80      	pop	{r7, pc}
 8003584:	20000000 	.word	0x20000000
 8003588:	08003549 	.word	0x08003549
 800358c:	08005eb0 	.word	0x08005eb0

08003590 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003592:	b085      	sub	sp, #20
 8003594:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003596:	2300      	movs	r3, #0
 8003598:	607b      	str	r3, [r7, #4]
 800359a:	e033      	b.n	8003604 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800359c:	491e      	ldr	r1, [pc, #120]	; (8003618 <_cbSendTaskList+0x88>)
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	4613      	mov	r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	4413      	add	r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	440b      	add	r3, r1
 80035aa:	6818      	ldr	r0, [r3, #0]
 80035ac:	491a      	ldr	r1, [pc, #104]	; (8003618 <_cbSendTaskList+0x88>)
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	4613      	mov	r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	4413      	add	r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	440b      	add	r3, r1
 80035ba:	3304      	adds	r3, #4
 80035bc:	6819      	ldr	r1, [r3, #0]
 80035be:	4c16      	ldr	r4, [pc, #88]	; (8003618 <_cbSendTaskList+0x88>)
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	4613      	mov	r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	4413      	add	r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	4423      	add	r3, r4
 80035cc:	3308      	adds	r3, #8
 80035ce:	681c      	ldr	r4, [r3, #0]
 80035d0:	4d11      	ldr	r5, [pc, #68]	; (8003618 <_cbSendTaskList+0x88>)
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	4613      	mov	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	4413      	add	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	442b      	add	r3, r5
 80035de:	330c      	adds	r3, #12
 80035e0:	681d      	ldr	r5, [r3, #0]
 80035e2:	4e0d      	ldr	r6, [pc, #52]	; (8003618 <_cbSendTaskList+0x88>)
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	4613      	mov	r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	4413      	add	r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	4433      	add	r3, r6
 80035f0:	3310      	adds	r3, #16
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	9300      	str	r3, [sp, #0]
 80035f6:	462b      	mov	r3, r5
 80035f8:	4622      	mov	r2, r4
 80035fa:	f000 f8b5 	bl	8003768 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	3301      	adds	r3, #1
 8003602:	607b      	str	r3, [r7, #4]
 8003604:	4b05      	ldr	r3, [pc, #20]	; (800361c <_cbSendTaskList+0x8c>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	429a      	cmp	r2, r3
 800360c:	d3c6      	bcc.n	800359c <_cbSendTaskList+0xc>
  }
}
 800360e:	bf00      	nop
 8003610:	bf00      	nop
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003618:	20012dc0 	.word	0x20012dc0
 800361c:	20012e60 	.word	0x20012e60

08003620 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003620:	b5b0      	push	{r4, r5, r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003626:	f7ff f899 	bl	800275c <xTaskGetTickCountFromISR>
 800362a:	4603      	mov	r3, r0
 800362c:	461a      	mov	r2, r3
 800362e:	f04f 0300 	mov.w	r3, #0
 8003632:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003636:	e9d7 0100 	ldrd	r0, r1, [r7]
 800363a:	4602      	mov	r2, r0
 800363c:	460b      	mov	r3, r1
 800363e:	f04f 0400 	mov.w	r4, #0
 8003642:	f04f 0500 	mov.w	r5, #0
 8003646:	015d      	lsls	r5, r3, #5
 8003648:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800364c:	0154      	lsls	r4, r2, #5
 800364e:	4622      	mov	r2, r4
 8003650:	462b      	mov	r3, r5
 8003652:	1a12      	subs	r2, r2, r0
 8003654:	eb63 0301 	sbc.w	r3, r3, r1
 8003658:	f04f 0400 	mov.w	r4, #0
 800365c:	f04f 0500 	mov.w	r5, #0
 8003660:	009d      	lsls	r5, r3, #2
 8003662:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8003666:	0094      	lsls	r4, r2, #2
 8003668:	4622      	mov	r2, r4
 800366a:	462b      	mov	r3, r5
 800366c:	1812      	adds	r2, r2, r0
 800366e:	eb41 0303 	adc.w	r3, r1, r3
 8003672:	f04f 0000 	mov.w	r0, #0
 8003676:	f04f 0100 	mov.w	r1, #0
 800367a:	00d9      	lsls	r1, r3, #3
 800367c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003680:	00d0      	lsls	r0, r2, #3
 8003682:	4602      	mov	r2, r0
 8003684:	460b      	mov	r3, r1
 8003686:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 800368a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800368e:	4610      	mov	r0, r2
 8003690:	4619      	mov	r1, r3
 8003692:	3708      	adds	r7, #8
 8003694:	46bd      	mov	sp, r7
 8003696:	bdb0      	pop	{r4, r5, r7, pc}

08003698 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003698:	b580      	push	{r7, lr}
 800369a:	b086      	sub	sp, #24
 800369c:	af02      	add	r7, sp, #8
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
 80036a4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80036a6:	2205      	movs	r2, #5
 80036a8:	492b      	ldr	r1, [pc, #172]	; (8003758 <SYSVIEW_AddTask+0xc0>)
 80036aa:	68b8      	ldr	r0, [r7, #8]
 80036ac:	f001 ff10 	bl	80054d0 <memcmp>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d04b      	beq.n	800374e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80036b6:	4b29      	ldr	r3, [pc, #164]	; (800375c <SYSVIEW_AddTask+0xc4>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2b07      	cmp	r3, #7
 80036bc:	d903      	bls.n	80036c6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80036be:	4828      	ldr	r0, [pc, #160]	; (8003760 <SYSVIEW_AddTask+0xc8>)
 80036c0:	f001 fe86 	bl	80053d0 <SEGGER_SYSVIEW_Warn>
    return;
 80036c4:	e044      	b.n	8003750 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80036c6:	4b25      	ldr	r3, [pc, #148]	; (800375c <SYSVIEW_AddTask+0xc4>)
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	4926      	ldr	r1, [pc, #152]	; (8003764 <SYSVIEW_AddTask+0xcc>)
 80036cc:	4613      	mov	r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	4413      	add	r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	440b      	add	r3, r1
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80036da:	4b20      	ldr	r3, [pc, #128]	; (800375c <SYSVIEW_AddTask+0xc4>)
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	4921      	ldr	r1, [pc, #132]	; (8003764 <SYSVIEW_AddTask+0xcc>)
 80036e0:	4613      	mov	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	4413      	add	r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	440b      	add	r3, r1
 80036ea:	3304      	adds	r3, #4
 80036ec:	68ba      	ldr	r2, [r7, #8]
 80036ee:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80036f0:	4b1a      	ldr	r3, [pc, #104]	; (800375c <SYSVIEW_AddTask+0xc4>)
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	491b      	ldr	r1, [pc, #108]	; (8003764 <SYSVIEW_AddTask+0xcc>)
 80036f6:	4613      	mov	r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	4413      	add	r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	440b      	add	r3, r1
 8003700:	3308      	adds	r3, #8
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003706:	4b15      	ldr	r3, [pc, #84]	; (800375c <SYSVIEW_AddTask+0xc4>)
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	4916      	ldr	r1, [pc, #88]	; (8003764 <SYSVIEW_AddTask+0xcc>)
 800370c:	4613      	mov	r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	4413      	add	r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	440b      	add	r3, r1
 8003716:	330c      	adds	r3, #12
 8003718:	683a      	ldr	r2, [r7, #0]
 800371a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800371c:	4b0f      	ldr	r3, [pc, #60]	; (800375c <SYSVIEW_AddTask+0xc4>)
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	4910      	ldr	r1, [pc, #64]	; (8003764 <SYSVIEW_AddTask+0xcc>)
 8003722:	4613      	mov	r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	4413      	add	r3, r2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	440b      	add	r3, r1
 800372c:	3310      	adds	r3, #16
 800372e:	69ba      	ldr	r2, [r7, #24]
 8003730:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003732:	4b0a      	ldr	r3, [pc, #40]	; (800375c <SYSVIEW_AddTask+0xc4>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	3301      	adds	r3, #1
 8003738:	4a08      	ldr	r2, [pc, #32]	; (800375c <SYSVIEW_AddTask+0xc4>)
 800373a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	9300      	str	r3, [sp, #0]
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	68b9      	ldr	r1, [r7, #8]
 8003746:	68f8      	ldr	r0, [r7, #12]
 8003748:	f000 f80e 	bl	8003768 <SYSVIEW_SendTaskInfo>
 800374c:	e000      	b.n	8003750 <SYSVIEW_AddTask+0xb8>
    return;
 800374e:	bf00      	nop

}
 8003750:	3710      	adds	r7, #16
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	08005e2c 	.word	0x08005e2c
 800375c:	20012e60 	.word	0x20012e60
 8003760:	08005e34 	.word	0x08005e34
 8003764:	20012dc0 	.word	0x20012dc0

08003768 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003768:	b580      	push	{r7, lr}
 800376a:	b08a      	sub	sp, #40	; 0x28
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	607a      	str	r2, [r7, #4]
 8003774:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003776:	f107 0314 	add.w	r3, r7, #20
 800377a:	2214      	movs	r2, #20
 800377c:	2100      	movs	r1, #0
 800377e:	4618      	mov	r0, r3
 8003780:	f001 fec2 	bl	8005508 <memset>
  TaskInfo.TaskID     = TaskID;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003796:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003798:	f107 0314 	add.w	r3, r7, #20
 800379c:	4618      	mov	r0, r3
 800379e:	f001 fa7d 	bl	8004c9c <SEGGER_SYSVIEW_SendTaskInfo>
}
 80037a2:	bf00      	nop
 80037a4:	3728      	adds	r7, #40	; 0x28
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
	...

080037ac <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80037b2:	4b26      	ldr	r3, [pc, #152]	; (800384c <_DoInit+0xa0>)
 80037b4:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80037b6:	22a8      	movs	r2, #168	; 0xa8
 80037b8:	2100      	movs	r1, #0
 80037ba:	6838      	ldr	r0, [r7, #0]
 80037bc:	f001 fea4 	bl	8005508 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	2203      	movs	r2, #3
 80037c4:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	2203      	movs	r2, #3
 80037ca:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	4a20      	ldr	r2, [pc, #128]	; (8003850 <_DoInit+0xa4>)
 80037d0:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	4a1f      	ldr	r2, [pc, #124]	; (8003854 <_DoInit+0xa8>)
 80037d6:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037de:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	2200      	movs	r2, #0
 80037e4:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	2200      	movs	r2, #0
 80037ea:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	2200      	movs	r2, #0
 80037f0:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	4a16      	ldr	r2, [pc, #88]	; (8003850 <_DoInit+0xa4>)
 80037f6:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	4a17      	ldr	r2, [pc, #92]	; (8003858 <_DoInit+0xac>)
 80037fc:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	2210      	movs	r2, #16
 8003802:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	2200      	movs	r2, #0
 8003808:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	2200      	movs	r2, #0
 800380e:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	2200      	movs	r2, #0
 8003814:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003816:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800381a:	2300      	movs	r3, #0
 800381c:	607b      	str	r3, [r7, #4]
 800381e:	e00c      	b.n	800383a <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f1c3 030f 	rsb	r3, r3, #15
 8003826:	4a0d      	ldr	r2, [pc, #52]	; (800385c <_DoInit+0xb0>)
 8003828:	5cd1      	ldrb	r1, [r2, r3]
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4413      	add	r3, r2
 8003830:	460a      	mov	r2, r1
 8003832:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	3301      	adds	r3, #1
 8003838:	607b      	str	r3, [r7, #4]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2b0f      	cmp	r3, #15
 800383e:	d9ef      	bls.n	8003820 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003840:	f3bf 8f5f 	dmb	sy
}
 8003844:	bf00      	nop
 8003846:	3708      	adds	r7, #8
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	200143e8 	.word	0x200143e8
 8003850:	08005e84 	.word	0x08005e84
 8003854:	20012e64 	.word	0x20012e64
 8003858:	20013264 	.word	0x20013264
 800385c:	08005eb8 	.word	0x08005eb8

08003860 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003860:	b580      	push	{r7, lr}
 8003862:	b08c      	sub	sp, #48	; 0x30
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800386c:	4b3e      	ldr	r3, [pc, #248]	; (8003968 <SEGGER_RTT_ReadNoLock+0x108>)
 800386e:	623b      	str	r3, [r7, #32]
 8003870:	6a3b      	ldr	r3, [r7, #32]
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d101      	bne.n	800387e <SEGGER_RTT_ReadNoLock+0x1e>
 800387a:	f7ff ff97 	bl	80037ac <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	4613      	mov	r3, r2
 8003882:	005b      	lsls	r3, r3, #1
 8003884:	4413      	add	r3, r2
 8003886:	00db      	lsls	r3, r3, #3
 8003888:	3360      	adds	r3, #96	; 0x60
 800388a:	4a37      	ldr	r2, [pc, #220]	; (8003968 <SEGGER_RTT_ReadNoLock+0x108>)
 800388c:	4413      	add	r3, r2
 800388e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80038a0:	2300      	movs	r3, #0
 80038a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80038a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d92b      	bls.n	8003904 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	689a      	ldr	r2, [r3, #8]
 80038b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4293      	cmp	r3, r2
 80038bc:	bf28      	it	cs
 80038be:	4613      	movcs	r3, r2
 80038c0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	685a      	ldr	r2, [r3, #4]
 80038c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c8:	4413      	add	r3, r2
 80038ca:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80038cc:	697a      	ldr	r2, [r7, #20]
 80038ce:	6939      	ldr	r1, [r7, #16]
 80038d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80038d2:	f001 fe0b 	bl	80054ec <memcpy>
    NumBytesRead += NumBytesRem;
 80038d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	4413      	add	r3, r2
 80038dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80038de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	4413      	add	r3, r2
 80038e4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80038ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	4413      	add	r3, r2
 80038f4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d101      	bne.n	8003904 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003900:	2300      	movs	r3, #0
 8003902:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800390c:	697a      	ldr	r2, [r7, #20]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4293      	cmp	r3, r2
 8003912:	bf28      	it	cs
 8003914:	4613      	movcs	r3, r2
 8003916:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d019      	beq.n	8003952 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	685a      	ldr	r2, [r3, #4]
 8003922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003924:	4413      	add	r3, r2
 8003926:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003928:	697a      	ldr	r2, [r7, #20]
 800392a:	6939      	ldr	r1, [r7, #16]
 800392c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800392e:	f001 fddd 	bl	80054ec <memcpy>
    NumBytesRead += NumBytesRem;
 8003932:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	4413      	add	r3, r2
 8003938:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800393a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	4413      	add	r3, r2
 8003940:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800394a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	4413      	add	r3, r2
 8003950:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8003952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003954:	2b00      	cmp	r3, #0
 8003956:	d002      	beq.n	800395e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800395c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800395e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003960:	4618      	mov	r0, r3
 8003962:	3730      	adds	r7, #48	; 0x30
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	200143e8 	.word	0x200143e8

0800396c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800396c:	b580      	push	{r7, lr}
 800396e:	b088      	sub	sp, #32
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]
 8003978:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800397a:	4b3d      	ldr	r3, [pc, #244]	; (8003a70 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800397c:	61bb      	str	r3, [r7, #24]
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	b2db      	uxtb	r3, r3
 8003984:	2b00      	cmp	r3, #0
 8003986:	d101      	bne.n	800398c <SEGGER_RTT_AllocUpBuffer+0x20>
 8003988:	f7ff ff10 	bl	80037ac <_DoInit>
  SEGGER_RTT_LOCK();
 800398c:	f3ef 8311 	mrs	r3, BASEPRI
 8003990:	f04f 0120 	mov.w	r1, #32
 8003994:	f381 8811 	msr	BASEPRI, r1
 8003998:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800399a:	4b35      	ldr	r3, [pc, #212]	; (8003a70 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800399c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800399e:	2300      	movs	r3, #0
 80039a0:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80039a2:	6939      	ldr	r1, [r7, #16]
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	1c5a      	adds	r2, r3, #1
 80039a8:	4613      	mov	r3, r2
 80039aa:	005b      	lsls	r3, r3, #1
 80039ac:	4413      	add	r3, r2
 80039ae:	00db      	lsls	r3, r3, #3
 80039b0:	440b      	add	r3, r1
 80039b2:	3304      	adds	r3, #4
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d008      	beq.n	80039cc <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	3301      	adds	r3, #1
 80039be:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	69fa      	ldr	r2, [r7, #28]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	dbeb      	blt.n	80039a2 <SEGGER_RTT_AllocUpBuffer+0x36>
 80039ca:	e000      	b.n	80039ce <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80039cc:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	69fa      	ldr	r2, [r7, #28]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	da3f      	bge.n	8003a58 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80039d8:	6939      	ldr	r1, [r7, #16]
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	1c5a      	adds	r2, r3, #1
 80039de:	4613      	mov	r3, r2
 80039e0:	005b      	lsls	r3, r3, #1
 80039e2:	4413      	add	r3, r2
 80039e4:	00db      	lsls	r3, r3, #3
 80039e6:	440b      	add	r3, r1
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80039ec:	6939      	ldr	r1, [r7, #16]
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	1c5a      	adds	r2, r3, #1
 80039f2:	4613      	mov	r3, r2
 80039f4:	005b      	lsls	r3, r3, #1
 80039f6:	4413      	add	r3, r2
 80039f8:	00db      	lsls	r3, r3, #3
 80039fa:	440b      	add	r3, r1
 80039fc:	3304      	adds	r3, #4
 80039fe:	68ba      	ldr	r2, [r7, #8]
 8003a00:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003a02:	6939      	ldr	r1, [r7, #16]
 8003a04:	69fa      	ldr	r2, [r7, #28]
 8003a06:	4613      	mov	r3, r2
 8003a08:	005b      	lsls	r3, r3, #1
 8003a0a:	4413      	add	r3, r2
 8003a0c:	00db      	lsls	r3, r3, #3
 8003a0e:	440b      	add	r3, r1
 8003a10:	3320      	adds	r3, #32
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8003a16:	6939      	ldr	r1, [r7, #16]
 8003a18:	69fa      	ldr	r2, [r7, #28]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	005b      	lsls	r3, r3, #1
 8003a1e:	4413      	add	r3, r2
 8003a20:	00db      	lsls	r3, r3, #3
 8003a22:	440b      	add	r3, r1
 8003a24:	3328      	adds	r3, #40	; 0x28
 8003a26:	2200      	movs	r2, #0
 8003a28:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8003a2a:	6939      	ldr	r1, [r7, #16]
 8003a2c:	69fa      	ldr	r2, [r7, #28]
 8003a2e:	4613      	mov	r3, r2
 8003a30:	005b      	lsls	r3, r3, #1
 8003a32:	4413      	add	r3, r2
 8003a34:	00db      	lsls	r3, r3, #3
 8003a36:	440b      	add	r3, r1
 8003a38:	3324      	adds	r3, #36	; 0x24
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8003a3e:	6939      	ldr	r1, [r7, #16]
 8003a40:	69fa      	ldr	r2, [r7, #28]
 8003a42:	4613      	mov	r3, r2
 8003a44:	005b      	lsls	r3, r3, #1
 8003a46:	4413      	add	r3, r2
 8003a48:	00db      	lsls	r3, r3, #3
 8003a4a:	440b      	add	r3, r1
 8003a4c:	332c      	adds	r3, #44	; 0x2c
 8003a4e:	683a      	ldr	r2, [r7, #0]
 8003a50:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003a52:	f3bf 8f5f 	dmb	sy
 8003a56:	e002      	b.n	8003a5e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8003a58:	f04f 33ff 	mov.w	r3, #4294967295
 8003a5c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8003a64:	69fb      	ldr	r3, [r7, #28]
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3720      	adds	r7, #32
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	200143e8 	.word	0x200143e8

08003a74 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b08a      	sub	sp, #40	; 0x28
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]
 8003a80:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8003a82:	4b21      	ldr	r3, [pc, #132]	; (8003b08 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8003a84:	623b      	str	r3, [r7, #32]
 8003a86:	6a3b      	ldr	r3, [r7, #32]
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d101      	bne.n	8003a94 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8003a90:	f7ff fe8c 	bl	80037ac <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003a94:	4b1c      	ldr	r3, [pc, #112]	; (8003b08 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8003a96:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d82c      	bhi.n	8003af8 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8003a9e:	f3ef 8311 	mrs	r3, BASEPRI
 8003aa2:	f04f 0120 	mov.w	r1, #32
 8003aa6:	f381 8811 	msr	BASEPRI, r1
 8003aaa:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8003aac:	68fa      	ldr	r2, [r7, #12]
 8003aae:	4613      	mov	r3, r2
 8003ab0:	005b      	lsls	r3, r3, #1
 8003ab2:	4413      	add	r3, r2
 8003ab4:	00db      	lsls	r3, r3, #3
 8003ab6:	3360      	adds	r3, #96	; 0x60
 8003ab8:	69fa      	ldr	r2, [r7, #28]
 8003aba:	4413      	add	r3, r2
 8003abc:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00e      	beq.n	8003ae2 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	68ba      	ldr	r2, [r7, #8]
 8003ac8:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	683a      	ldr	r2, [r7, #0]
 8003ad4:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ae6:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003ae8:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003af2:	2300      	movs	r3, #0
 8003af4:	627b      	str	r3, [r7, #36]	; 0x24
 8003af6:	e002      	b.n	8003afe <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8003af8:	f04f 33ff 	mov.w	r3, #4294967295
 8003afc:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8003afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3728      	adds	r7, #40	; 0x28
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	200143e8 	.word	0x200143e8

08003b0c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003b0c:	b480      	push	{r7}
 8003b0e:	b087      	sub	sp, #28
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00f      	beq.n	8003b42 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8003b22:	e002      	b.n	8003b2a <_EncodeStr+0x1e>
      Len++;
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	3301      	adds	r3, #1
 8003b28:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8003b2a:	68ba      	ldr	r2, [r7, #8]
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	4413      	add	r3, r2
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1f6      	bne.n	8003b24 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d901      	bls.n	8003b42 <_EncodeStr+0x36>
      Len = Limit;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	2bfe      	cmp	r3, #254	; 0xfe
 8003b46:	d806      	bhi.n	8003b56 <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	1c5a      	adds	r2, r3, #1
 8003b4c:	60fa      	str	r2, [r7, #12]
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	b2d2      	uxtb	r2, r2
 8003b52:	701a      	strb	r2, [r3, #0]
 8003b54:	e011      	b.n	8003b7a <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	1c5a      	adds	r2, r3, #1
 8003b5a:	60fa      	str	r2, [r7, #12]
 8003b5c:	22ff      	movs	r2, #255	; 0xff
 8003b5e:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	1c5a      	adds	r2, r3, #1
 8003b64:	60fa      	str	r2, [r7, #12]
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	b2d2      	uxtb	r2, r2
 8003b6a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	0a19      	lsrs	r1, r3, #8
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	1c5a      	adds	r2, r3, #1
 8003b74:	60fa      	str	r2, [r7, #12]
 8003b76:	b2ca      	uxtb	r2, r1
 8003b78:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003b7e:	e00a      	b.n	8003b96 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8003b80:	68ba      	ldr	r2, [r7, #8]
 8003b82:	1c53      	adds	r3, r2, #1
 8003b84:	60bb      	str	r3, [r7, #8]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	1c59      	adds	r1, r3, #1
 8003b8a:	60f9      	str	r1, [r7, #12]
 8003b8c:	7812      	ldrb	r2, [r2, #0]
 8003b8e:	701a      	strb	r2, [r3, #0]
    n++;
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	3301      	adds	r3, #1
 8003b94:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003b96:	697a      	ldr	r2, [r7, #20]
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d3f0      	bcc.n	8003b80 <_EncodeStr+0x74>
  }
  return pPayload;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	371c      	adds	r7, #28
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	3307      	adds	r3, #7
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003bca:	4b35      	ldr	r3, [pc, #212]	; (8003ca0 <_HandleIncomingPacket+0xdc>)
 8003bcc:	7e1b      	ldrb	r3, [r3, #24]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	1cfb      	adds	r3, r7, #3
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	f7ff fe43 	bl	8003860 <SEGGER_RTT_ReadNoLock>
 8003bda:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d052      	beq.n	8003c88 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 8003be2:	78fb      	ldrb	r3, [r7, #3]
 8003be4:	2b80      	cmp	r3, #128	; 0x80
 8003be6:	d031      	beq.n	8003c4c <_HandleIncomingPacket+0x88>
 8003be8:	2b80      	cmp	r3, #128	; 0x80
 8003bea:	dc40      	bgt.n	8003c6e <_HandleIncomingPacket+0xaa>
 8003bec:	2b07      	cmp	r3, #7
 8003bee:	dc15      	bgt.n	8003c1c <_HandleIncomingPacket+0x58>
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	dd3c      	ble.n	8003c6e <_HandleIncomingPacket+0xaa>
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	2b06      	cmp	r3, #6
 8003bf8:	d839      	bhi.n	8003c6e <_HandleIncomingPacket+0xaa>
 8003bfa:	a201      	add	r2, pc, #4	; (adr r2, 8003c00 <_HandleIncomingPacket+0x3c>)
 8003bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c00:	08003c23 	.word	0x08003c23
 8003c04:	08003c29 	.word	0x08003c29
 8003c08:	08003c2f 	.word	0x08003c2f
 8003c0c:	08003c35 	.word	0x08003c35
 8003c10:	08003c3b 	.word	0x08003c3b
 8003c14:	08003c41 	.word	0x08003c41
 8003c18:	08003c47 	.word	0x08003c47
 8003c1c:	2b7f      	cmp	r3, #127	; 0x7f
 8003c1e:	d035      	beq.n	8003c8c <_HandleIncomingPacket+0xc8>
 8003c20:	e025      	b.n	8003c6e <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8003c22:	f000 fec1 	bl	80049a8 <SEGGER_SYSVIEW_Start>
      break;
 8003c26:	e036      	b.n	8003c96 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8003c28:	f000 ff78 	bl	8004b1c <SEGGER_SYSVIEW_Stop>
      break;
 8003c2c:	e033      	b.n	8003c96 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8003c2e:	f001 f951 	bl	8004ed4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8003c32:	e030      	b.n	8003c96 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8003c34:	f001 f916 	bl	8004e64 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003c38:	e02d      	b.n	8003c96 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8003c3a:	f000 ff95 	bl	8004b68 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8003c3e:	e02a      	b.n	8003c96 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8003c40:	f001 fb74 	bl	800532c <SEGGER_SYSVIEW_SendNumModules>
      break;
 8003c44:	e027      	b.n	8003c96 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8003c46:	f001 fb53 	bl	80052f0 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8003c4a:	e024      	b.n	8003c96 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003c4c:	4b14      	ldr	r3, [pc, #80]	; (8003ca0 <_HandleIncomingPacket+0xdc>)
 8003c4e:	7e1b      	ldrb	r3, [r3, #24]
 8003c50:	4618      	mov	r0, r3
 8003c52:	1cfb      	adds	r3, r7, #3
 8003c54:	2201      	movs	r2, #1
 8003c56:	4619      	mov	r1, r3
 8003c58:	f7ff fe02 	bl	8003860 <SEGGER_RTT_ReadNoLock>
 8003c5c:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d015      	beq.n	8003c90 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8003c64:	78fb      	ldrb	r3, [r7, #3]
 8003c66:	4618      	mov	r0, r3
 8003c68:	f001 fac2 	bl	80051f0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8003c6c:	e010      	b.n	8003c90 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8003c6e:	78fb      	ldrb	r3, [r7, #3]
 8003c70:	b25b      	sxtb	r3, r3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	da0e      	bge.n	8003c94 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003c76:	4b0a      	ldr	r3, [pc, #40]	; (8003ca0 <_HandleIncomingPacket+0xdc>)
 8003c78:	7e1b      	ldrb	r3, [r3, #24]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	1cfb      	adds	r3, r7, #3
 8003c7e:	2201      	movs	r2, #1
 8003c80:	4619      	mov	r1, r3
 8003c82:	f7ff fded 	bl	8003860 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8003c86:	e005      	b.n	8003c94 <_HandleIncomingPacket+0xd0>
    }
  }
 8003c88:	bf00      	nop
 8003c8a:	e004      	b.n	8003c96 <_HandleIncomingPacket+0xd2>
      break;
 8003c8c:	bf00      	nop
 8003c8e:	e002      	b.n	8003c96 <_HandleIncomingPacket+0xd2>
      break;
 8003c90:	bf00      	nop
 8003c92:	e000      	b.n	8003c96 <_HandleIncomingPacket+0xd2>
      break;
 8003c94:	bf00      	nop
}
 8003c96:	bf00      	nop
 8003c98:	3708      	adds	r7, #8
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	2001427c 	.word	0x2001427c

08003ca4 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b08c      	sub	sp, #48	; 0x30
 8003ca8:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8003caa:	2301      	movs	r3, #1
 8003cac:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8003cae:	1d3b      	adds	r3, r7, #4
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cb8:	4b31      	ldr	r3, [pc, #196]	; (8003d80 <_TrySendOverflowPacket+0xdc>)
 8003cba:	695b      	ldr	r3, [r3, #20]
 8003cbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cbe:	e00b      	b.n	8003cd8 <_TrySendOverflowPacket+0x34>
 8003cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc2:	b2da      	uxtb	r2, r3
 8003cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cc6:	1c59      	adds	r1, r3, #1
 8003cc8:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003cca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003cce:	b2d2      	uxtb	r2, r2
 8003cd0:	701a      	strb	r2, [r3, #0]
 8003cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd4:	09db      	lsrs	r3, r3, #7
 8003cd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cda:	2b7f      	cmp	r3, #127	; 0x7f
 8003cdc:	d8f0      	bhi.n	8003cc0 <_TrySendOverflowPacket+0x1c>
 8003cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce0:	1c5a      	adds	r2, r3, #1
 8003ce2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ce4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ce6:	b2d2      	uxtb	r2, r2
 8003ce8:	701a      	strb	r2, [r3, #0]
 8003cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cec:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003cee:	4b25      	ldr	r3, [pc, #148]	; (8003d84 <_TrySendOverflowPacket+0xe0>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003cf4:	4b22      	ldr	r3, [pc, #136]	; (8003d80 <_TrySendOverflowPacket+0xdc>)
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	69ba      	ldr	r2, [r7, #24]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	627b      	str	r3, [r7, #36]	; 0x24
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	623b      	str	r3, [r7, #32]
 8003d06:	e00b      	b.n	8003d20 <_TrySendOverflowPacket+0x7c>
 8003d08:	6a3b      	ldr	r3, [r7, #32]
 8003d0a:	b2da      	uxtb	r2, r3
 8003d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0e:	1c59      	adds	r1, r3, #1
 8003d10:	6279      	str	r1, [r7, #36]	; 0x24
 8003d12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d16:	b2d2      	uxtb	r2, r2
 8003d18:	701a      	strb	r2, [r3, #0]
 8003d1a:	6a3b      	ldr	r3, [r7, #32]
 8003d1c:	09db      	lsrs	r3, r3, #7
 8003d1e:	623b      	str	r3, [r7, #32]
 8003d20:	6a3b      	ldr	r3, [r7, #32]
 8003d22:	2b7f      	cmp	r3, #127	; 0x7f
 8003d24:	d8f0      	bhi.n	8003d08 <_TrySendOverflowPacket+0x64>
 8003d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d28:	1c5a      	adds	r2, r3, #1
 8003d2a:	627a      	str	r2, [r7, #36]	; 0x24
 8003d2c:	6a3a      	ldr	r2, [r7, #32]
 8003d2e:	b2d2      	uxtb	r2, r2
 8003d30:	701a      	strb	r2, [r3, #0]
 8003d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d34:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8003d36:	4b12      	ldr	r3, [pc, #72]	; (8003d80 <_TrySendOverflowPacket+0xdc>)
 8003d38:	785b      	ldrb	r3, [r3, #1]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	1d3b      	adds	r3, r7, #4
 8003d3e:	69fa      	ldr	r2, [r7, #28]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	461a      	mov	r2, r3
 8003d44:	1d3b      	adds	r3, r7, #4
 8003d46:	4619      	mov	r1, r3
 8003d48:	f7fc fa42 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d009      	beq.n	8003d6a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003d56:	4a0a      	ldr	r2, [pc, #40]	; (8003d80 <_TrySendOverflowPacket+0xdc>)
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8003d5c:	4b08      	ldr	r3, [pc, #32]	; (8003d80 <_TrySendOverflowPacket+0xdc>)
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	3b01      	subs	r3, #1
 8003d62:	b2da      	uxtb	r2, r3
 8003d64:	4b06      	ldr	r3, [pc, #24]	; (8003d80 <_TrySendOverflowPacket+0xdc>)
 8003d66:	701a      	strb	r2, [r3, #0]
 8003d68:	e004      	b.n	8003d74 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8003d6a:	4b05      	ldr	r3, [pc, #20]	; (8003d80 <_TrySendOverflowPacket+0xdc>)
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	3301      	adds	r3, #1
 8003d70:	4a03      	ldr	r2, [pc, #12]	; (8003d80 <_TrySendOverflowPacket+0xdc>)
 8003d72:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8003d74:	693b      	ldr	r3, [r7, #16]
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3730      	adds	r7, #48	; 0x30
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	2001427c 	.word	0x2001427c
 8003d84:	e0001004 	.word	0xe0001004

08003d88 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b08a      	sub	sp, #40	; 0x28
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8003d94:	4b9a      	ldr	r3, [pc, #616]	; (8004000 <_SendPacket+0x278>)
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d010      	beq.n	8003dbe <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003d9c:	4b98      	ldr	r3, [pc, #608]	; (8004000 <_SendPacket+0x278>)
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	f000 8129 	beq.w	8003ff8 <_SendPacket+0x270>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8003da6:	4b96      	ldr	r3, [pc, #600]	; (8004000 <_SendPacket+0x278>)
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d109      	bne.n	8003dc2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8003dae:	f7ff ff79 	bl	8003ca4 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8003db2:	4b93      	ldr	r3, [pc, #588]	; (8004000 <_SendPacket+0x278>)
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	f040 8120 	bne.w	8003ffc <_SendPacket+0x274>
      goto SendDone;
    }
  }
Send:
 8003dbc:	e001      	b.n	8003dc2 <_SendPacket+0x3a>
    goto Send;
 8003dbe:	bf00      	nop
 8003dc0:	e000      	b.n	8003dc4 <_SendPacket+0x3c>
Send:
 8003dc2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b1f      	cmp	r3, #31
 8003dc8:	d809      	bhi.n	8003dde <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8003dca:	4b8d      	ldr	r3, [pc, #564]	; (8004000 <_SendPacket+0x278>)
 8003dcc:	69da      	ldr	r2, [r3, #28]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f040 8115 	bne.w	8004008 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2b17      	cmp	r3, #23
 8003de2:	d807      	bhi.n	8003df4 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	3b01      	subs	r3, #1
 8003de8:	60fb      	str	r3, [r7, #12]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	b2da      	uxtb	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	701a      	strb	r2, [r3, #0]
 8003df2:	e0c4      	b.n	8003f7e <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8003df4:	68ba      	ldr	r2, [r7, #8]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	2b7f      	cmp	r3, #127	; 0x7f
 8003e00:	d912      	bls.n	8003e28 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	09da      	lsrs	r2, r3, #7
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	60fb      	str	r3, [r7, #12]
 8003e0c:	b2d2      	uxtb	r2, r2
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	3a01      	subs	r2, #1
 8003e1a:	60fa      	str	r2, [r7, #12]
 8003e1c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003e20:	b2da      	uxtb	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	701a      	strb	r2, [r3, #0]
 8003e26:	e006      	b.n	8003e36 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	60fb      	str	r3, [r7, #12]
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	b2da      	uxtb	r2, r3
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2b7e      	cmp	r3, #126	; 0x7e
 8003e3a:	d807      	bhi.n	8003e4c <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	60fb      	str	r3, [r7, #12]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	b2da      	uxtb	r2, r3
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	701a      	strb	r2, [r3, #0]
 8003e4a:	e098      	b.n	8003f7e <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e52:	d212      	bcs.n	8003e7a <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	09da      	lsrs	r2, r3, #7
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	60fb      	str	r3, [r7, #12]
 8003e5e:	b2d2      	uxtb	r2, r2
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	3a01      	subs	r2, #1
 8003e6c:	60fa      	str	r2, [r7, #12]
 8003e6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003e72:	b2da      	uxtb	r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	701a      	strb	r2, [r3, #0]
 8003e78:	e081      	b.n	8003f7e <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e80:	d21d      	bcs.n	8003ebe <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	0b9a      	lsrs	r2, r3, #14
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	60fb      	str	r3, [r7, #12]
 8003e8c:	b2d2      	uxtb	r2, r2
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	09db      	lsrs	r3, r3, #7
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	3a01      	subs	r2, #1
 8003e9c:	60fa      	str	r2, [r7, #12]
 8003e9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003ea2:	b2da      	uxtb	r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	3a01      	subs	r2, #1
 8003eb0:	60fa      	str	r2, [r7, #12]
 8003eb2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003eb6:	b2da      	uxtb	r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	701a      	strb	r2, [r3, #0]
 8003ebc:	e05f      	b.n	8003f7e <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ec4:	d228      	bcs.n	8003f18 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	0d5a      	lsrs	r2, r3, #21
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	60fb      	str	r3, [r7, #12]
 8003ed0:	b2d2      	uxtb	r2, r2
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	0b9b      	lsrs	r3, r3, #14
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	3a01      	subs	r2, #1
 8003ee0:	60fa      	str	r2, [r7, #12]
 8003ee2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003ee6:	b2da      	uxtb	r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	09db      	lsrs	r3, r3, #7
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	3a01      	subs	r2, #1
 8003ef6:	60fa      	str	r2, [r7, #12]
 8003ef8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003efc:	b2da      	uxtb	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	3a01      	subs	r2, #1
 8003f0a:	60fa      	str	r2, [r7, #12]
 8003f0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003f10:	b2da      	uxtb	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	701a      	strb	r2, [r3, #0]
 8003f16:	e032      	b.n	8003f7e <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	0f1a      	lsrs	r2, r3, #28
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	60fb      	str	r3, [r7, #12]
 8003f22:	b2d2      	uxtb	r2, r2
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	0d5b      	lsrs	r3, r3, #21
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	3a01      	subs	r2, #1
 8003f32:	60fa      	str	r2, [r7, #12]
 8003f34:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003f38:	b2da      	uxtb	r2, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	0b9b      	lsrs	r3, r3, #14
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	3a01      	subs	r2, #1
 8003f48:	60fa      	str	r2, [r7, #12]
 8003f4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003f4e:	b2da      	uxtb	r2, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	09db      	lsrs	r3, r3, #7
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	3a01      	subs	r2, #1
 8003f5e:	60fa      	str	r2, [r7, #12]
 8003f60:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003f64:	b2da      	uxtb	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	3a01      	subs	r2, #1
 8003f72:	60fa      	str	r2, [r7, #12]
 8003f74:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003f78:	b2da      	uxtb	r2, r3
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003f7e:	4b21      	ldr	r3, [pc, #132]	; (8004004 <_SendPacket+0x27c>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003f84:	4b1e      	ldr	r3, [pc, #120]	; (8004000 <_SendPacket+0x278>)
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	69ba      	ldr	r2, [r7, #24]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	627b      	str	r3, [r7, #36]	; 0x24
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	623b      	str	r3, [r7, #32]
 8003f96:	e00b      	b.n	8003fb0 <_SendPacket+0x228>
 8003f98:	6a3b      	ldr	r3, [r7, #32]
 8003f9a:	b2da      	uxtb	r2, r3
 8003f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9e:	1c59      	adds	r1, r3, #1
 8003fa0:	6279      	str	r1, [r7, #36]	; 0x24
 8003fa2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003fa6:	b2d2      	uxtb	r2, r2
 8003fa8:	701a      	strb	r2, [r3, #0]
 8003faa:	6a3b      	ldr	r3, [r7, #32]
 8003fac:	09db      	lsrs	r3, r3, #7
 8003fae:	623b      	str	r3, [r7, #32]
 8003fb0:	6a3b      	ldr	r3, [r7, #32]
 8003fb2:	2b7f      	cmp	r3, #127	; 0x7f
 8003fb4:	d8f0      	bhi.n	8003f98 <_SendPacket+0x210>
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb8:	1c5a      	adds	r2, r3, #1
 8003fba:	627a      	str	r2, [r7, #36]	; 0x24
 8003fbc:	6a3a      	ldr	r2, [r7, #32]
 8003fbe:	b2d2      	uxtb	r2, r2
 8003fc0:	701a      	strb	r2, [r3, #0]
 8003fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc4:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8003fc6:	4b0e      	ldr	r3, [pc, #56]	; (8004000 <_SendPacket+0x278>)
 8003fc8:	785b      	ldrb	r3, [r3, #1]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	68ba      	ldr	r2, [r7, #8]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	68f9      	ldr	r1, [r7, #12]
 8003fd6:	f7fc f8fb 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003fda:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d003      	beq.n	8003fea <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003fe2:	4a07      	ldr	r2, [pc, #28]	; (8004000 <_SendPacket+0x278>)
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	60d3      	str	r3, [r2, #12]
 8003fe8:	e00f      	b.n	800400a <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8003fea:	4b05      	ldr	r3, [pc, #20]	; (8004000 <_SendPacket+0x278>)
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	3301      	adds	r3, #1
 8003ff0:	b2da      	uxtb	r2, r3
 8003ff2:	4b03      	ldr	r3, [pc, #12]	; (8004000 <_SendPacket+0x278>)
 8003ff4:	701a      	strb	r2, [r3, #0]
 8003ff6:	e008      	b.n	800400a <_SendPacket+0x282>
    goto SendDone;
 8003ff8:	bf00      	nop
 8003ffa:	e006      	b.n	800400a <_SendPacket+0x282>
      goto SendDone;
 8003ffc:	bf00      	nop
 8003ffe:	e004      	b.n	800400a <_SendPacket+0x282>
 8004000:	2001427c 	.word	0x2001427c
 8004004:	e0001004 	.word	0xe0001004
      goto SendDone;
 8004008:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800400a:	4b14      	ldr	r3, [pc, #80]	; (800405c <_SendPacket+0x2d4>)
 800400c:	7e1b      	ldrb	r3, [r3, #24]
 800400e:	4619      	mov	r1, r3
 8004010:	4a13      	ldr	r2, [pc, #76]	; (8004060 <_SendPacket+0x2d8>)
 8004012:	460b      	mov	r3, r1
 8004014:	005b      	lsls	r3, r3, #1
 8004016:	440b      	add	r3, r1
 8004018:	00db      	lsls	r3, r3, #3
 800401a:	4413      	add	r3, r2
 800401c:	336c      	adds	r3, #108	; 0x6c
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	4b0e      	ldr	r3, [pc, #56]	; (800405c <_SendPacket+0x2d4>)
 8004022:	7e1b      	ldrb	r3, [r3, #24]
 8004024:	4618      	mov	r0, r3
 8004026:	490e      	ldr	r1, [pc, #56]	; (8004060 <_SendPacket+0x2d8>)
 8004028:	4603      	mov	r3, r0
 800402a:	005b      	lsls	r3, r3, #1
 800402c:	4403      	add	r3, r0
 800402e:	00db      	lsls	r3, r3, #3
 8004030:	440b      	add	r3, r1
 8004032:	3370      	adds	r3, #112	; 0x70
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	429a      	cmp	r2, r3
 8004038:	d00b      	beq.n	8004052 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800403a:	4b08      	ldr	r3, [pc, #32]	; (800405c <_SendPacket+0x2d4>)
 800403c:	789b      	ldrb	r3, [r3, #2]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d107      	bne.n	8004052 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004042:	4b06      	ldr	r3, [pc, #24]	; (800405c <_SendPacket+0x2d4>)
 8004044:	2201      	movs	r2, #1
 8004046:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004048:	f7ff fdbc 	bl	8003bc4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800404c:	4b03      	ldr	r3, [pc, #12]	; (800405c <_SendPacket+0x2d4>)
 800404e:	2200      	movs	r2, #0
 8004050:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004052:	bf00      	nop
 8004054:	3728      	adds	r7, #40	; 0x28
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	2001427c 	.word	0x2001427c
 8004060:	200143e8 	.word	0x200143e8

08004064 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8004064:	b580      	push	{r7, lr}
 8004066:	b08a      	sub	sp, #40	; 0x28
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	460b      	mov	r3, r1
 800406e:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	691b      	ldr	r3, [r3, #16]
 8004074:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	3301      	adds	r3, #1
 800407a:	2b80      	cmp	r3, #128	; 0x80
 800407c:	d80a      	bhi.n	8004094 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	1c59      	adds	r1, r3, #1
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	6051      	str	r1, [r2, #4]
 8004088:	78fa      	ldrb	r2, [r7, #3]
 800408a:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	1c5a      	adds	r2, r3, #1
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	2b80      	cmp	r3, #128	; 0x80
 800409a:	d15a      	bne.n	8004152 <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	691a      	ldr	r2, [r3, #16]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	b2d2      	uxtb	r2, r2
 80040a6:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	627b      	str	r3, [r7, #36]	; 0x24
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	623b      	str	r3, [r7, #32]
 80040bc:	e00b      	b.n	80040d6 <_StoreChar+0x72>
 80040be:	6a3b      	ldr	r3, [r7, #32]
 80040c0:	b2da      	uxtb	r2, r3
 80040c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c4:	1c59      	adds	r1, r3, #1
 80040c6:	6279      	str	r1, [r7, #36]	; 0x24
 80040c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80040cc:	b2d2      	uxtb	r2, r2
 80040ce:	701a      	strb	r2, [r3, #0]
 80040d0:	6a3b      	ldr	r3, [r7, #32]
 80040d2:	09db      	lsrs	r3, r3, #7
 80040d4:	623b      	str	r3, [r7, #32]
 80040d6:	6a3b      	ldr	r3, [r7, #32]
 80040d8:	2b7f      	cmp	r3, #127	; 0x7f
 80040da:	d8f0      	bhi.n	80040be <_StoreChar+0x5a>
 80040dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040de:	1c5a      	adds	r2, r3, #1
 80040e0:	627a      	str	r2, [r7, #36]	; 0x24
 80040e2:	6a3a      	ldr	r2, [r7, #32]
 80040e4:	b2d2      	uxtb	r2, r2
 80040e6:	701a      	strb	r2, [r3, #0]
 80040e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ea:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	61fb      	str	r3, [r7, #28]
 80040f0:	2300      	movs	r3, #0
 80040f2:	61bb      	str	r3, [r7, #24]
 80040f4:	e00b      	b.n	800410e <_StoreChar+0xaa>
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	b2da      	uxtb	r2, r3
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	1c59      	adds	r1, r3, #1
 80040fe:	61f9      	str	r1, [r7, #28]
 8004100:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004104:	b2d2      	uxtb	r2, r2
 8004106:	701a      	strb	r2, [r3, #0]
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	09db      	lsrs	r3, r3, #7
 800410c:	61bb      	str	r3, [r7, #24]
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	2b7f      	cmp	r3, #127	; 0x7f
 8004112:	d8f0      	bhi.n	80040f6 <_StoreChar+0x92>
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	1c5a      	adds	r2, r3, #1
 8004118:	61fa      	str	r2, [r7, #28]
 800411a:	69ba      	ldr	r2, [r7, #24]
 800411c:	b2d2      	uxtb	r2, r2
 800411e:	701a      	strb	r2, [r3, #0]
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	221a      	movs	r2, #26
 800412a:	6939      	ldr	r1, [r7, #16]
 800412c:	4618      	mov	r0, r3
 800412e:	f7ff fe2b 	bl	8003d88 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4618      	mov	r0, r3
 8004138:	f7ff fd38 	bl	8003bac <_PreparePacket>
 800413c:	4602      	mov	r2, r0
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	1c5a      	adds	r2, r3, #1
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	611a      	str	r2, [r3, #16]
  }
}
 8004152:	bf00      	nop
 8004154:	3728      	adds	r7, #40	; 0x28
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
	...

0800415c <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800415c:	b580      	push	{r7, lr}
 800415e:	b08a      	sub	sp, #40	; 0x28
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	607a      	str	r2, [r7, #4]
 8004168:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800416e:	2301      	movs	r3, #1
 8004170:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8004172:	2301      	movs	r3, #1
 8004174:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004176:	e007      	b.n	8004188 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8004178:	6a3a      	ldr	r2, [r7, #32]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004180:	623b      	str	r3, [r7, #32]
    Width++;
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	3301      	adds	r3, #1
 8004186:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004188:	6a3a      	ldr	r2, [r7, #32]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	429a      	cmp	r2, r3
 800418e:	d2f3      	bcs.n	8004178 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8004190:	683a      	ldr	r2, [r7, #0]
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	429a      	cmp	r2, r3
 8004196:	d901      	bls.n	800419c <_PrintUnsigned+0x40>
    Width = NumDigits;
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 800419c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d11f      	bne.n	80041e6 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 80041a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d01c      	beq.n	80041e6 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80041ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d005      	beq.n	80041c2 <_PrintUnsigned+0x66>
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d102      	bne.n	80041c2 <_PrintUnsigned+0x66>
        c = '0';
 80041bc:	2330      	movs	r3, #48	; 0x30
 80041be:	76fb      	strb	r3, [r7, #27]
 80041c0:	e001      	b.n	80041c6 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 80041c2:	2320      	movs	r3, #32
 80041c4:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80041c6:	e007      	b.n	80041d8 <_PrintUnsigned+0x7c>
        FieldWidth--;
 80041c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ca:	3b01      	subs	r3, #1
 80041cc:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 80041ce:	7efb      	ldrb	r3, [r7, #27]
 80041d0:	4619      	mov	r1, r3
 80041d2:	68f8      	ldr	r0, [r7, #12]
 80041d4:	f7ff ff46 	bl	8004064 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80041d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d003      	beq.n	80041e6 <_PrintUnsigned+0x8a>
 80041de:	69fa      	ldr	r2, [r7, #28]
 80041e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d3f0      	bcc.n	80041c8 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d903      	bls.n	80041f4 <_PrintUnsigned+0x98>
      NumDigits--;
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	3b01      	subs	r3, #1
 80041f0:	603b      	str	r3, [r7, #0]
 80041f2:	e009      	b.n	8004208 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 80041f4:	68ba      	ldr	r2, [r7, #8]
 80041f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041fc:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	429a      	cmp	r2, r3
 8004204:	d200      	bcs.n	8004208 <_PrintUnsigned+0xac>
        break;
 8004206:	e005      	b.n	8004214 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8004208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	fb02 f303 	mul.w	r3, r2, r3
 8004210:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004212:	e7e8      	b.n	80041e6 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8004214:	68ba      	ldr	r2, [r7, #8]
 8004216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004218:	fbb2 f3f3 	udiv	r3, r2, r3
 800421c:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004222:	fb02 f303 	mul.w	r3, r2, r3
 8004226:	68ba      	ldr	r2, [r7, #8]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 800422c:	4a15      	ldr	r2, [pc, #84]	; (8004284 <_PrintUnsigned+0x128>)
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	4413      	add	r3, r2
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	4619      	mov	r1, r3
 8004236:	68f8      	ldr	r0, [r7, #12]
 8004238:	f7ff ff14 	bl	8004064 <_StoreChar>
    Digit /= Base;
 800423c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	fbb2 f3f3 	udiv	r3, r2, r3
 8004244:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8004246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1e3      	bne.n	8004214 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 800424c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	2b00      	cmp	r3, #0
 8004254:	d011      	beq.n	800427a <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8004256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004258:	2b00      	cmp	r3, #0
 800425a:	d00e      	beq.n	800427a <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800425c:	e006      	b.n	800426c <_PrintUnsigned+0x110>
        FieldWidth--;
 800425e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004260:	3b01      	subs	r3, #1
 8004262:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8004264:	2120      	movs	r1, #32
 8004266:	68f8      	ldr	r0, [r7, #12]
 8004268:	f7ff fefc 	bl	8004064 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800426c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800426e:	2b00      	cmp	r3, #0
 8004270:	d003      	beq.n	800427a <_PrintUnsigned+0x11e>
 8004272:	69fa      	ldr	r2, [r7, #28]
 8004274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004276:	429a      	cmp	r2, r3
 8004278:	d3f1      	bcc.n	800425e <_PrintUnsigned+0x102>
      }
    }
  }
}
 800427a:	bf00      	nop
 800427c:	3728      	adds	r7, #40	; 0x28
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	08005ed8 	.word	0x08005ed8

08004288 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004288:	b580      	push	{r7, lr}
 800428a:	b088      	sub	sp, #32
 800428c:	af02      	add	r7, sp, #8
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	607a      	str	r2, [r7, #4]
 8004294:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	2b00      	cmp	r3, #0
 800429a:	bfb8      	it	lt
 800429c:	425b      	neglt	r3, r3
 800429e:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80042a0:	2301      	movs	r3, #1
 80042a2:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80042a4:	e007      	b.n	80042b6 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	693a      	ldr	r2, [r7, #16]
 80042aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80042ae:	613b      	str	r3, [r7, #16]
    Width++;
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	3301      	adds	r3, #1
 80042b4:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	daf3      	bge.n	80042a6 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80042be:	683a      	ldr	r2, [r7, #0]
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d901      	bls.n	80042ca <_PrintInt+0x42>
    Width = NumDigits;
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 80042ca:	6a3b      	ldr	r3, [r7, #32]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00a      	beq.n	80042e6 <_PrintInt+0x5e>
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	db04      	blt.n	80042e0 <_PrintInt+0x58>
 80042d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d8:	f003 0304 	and.w	r3, r3, #4
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d002      	beq.n	80042e6 <_PrintInt+0x5e>
    FieldWidth--;
 80042e0:	6a3b      	ldr	r3, [r7, #32]
 80042e2:	3b01      	subs	r3, #1
 80042e4:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 80042e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e8:	f003 0302 	and.w	r3, r3, #2
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d002      	beq.n	80042f6 <_PrintInt+0x6e>
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d016      	beq.n	8004324 <_PrintInt+0x9c>
 80042f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f8:	f003 0301 	and.w	r3, r3, #1
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d111      	bne.n	8004324 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8004300:	6a3b      	ldr	r3, [r7, #32]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00e      	beq.n	8004324 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004306:	e006      	b.n	8004316 <_PrintInt+0x8e>
        FieldWidth--;
 8004308:	6a3b      	ldr	r3, [r7, #32]
 800430a:	3b01      	subs	r3, #1
 800430c:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 800430e:	2120      	movs	r1, #32
 8004310:	68f8      	ldr	r0, [r7, #12]
 8004312:	f7ff fea7 	bl	8004064 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004316:	6a3b      	ldr	r3, [r7, #32]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d003      	beq.n	8004324 <_PrintInt+0x9c>
 800431c:	697a      	ldr	r2, [r7, #20]
 800431e:	6a3b      	ldr	r3, [r7, #32]
 8004320:	429a      	cmp	r2, r3
 8004322:	d3f1      	bcc.n	8004308 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	2b00      	cmp	r3, #0
 8004328:	da07      	bge.n	800433a <_PrintInt+0xb2>
    v = -v;
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	425b      	negs	r3, r3
 800432e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8004330:	212d      	movs	r1, #45	; 0x2d
 8004332:	68f8      	ldr	r0, [r7, #12]
 8004334:	f7ff fe96 	bl	8004064 <_StoreChar>
 8004338:	e008      	b.n	800434c <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 800433a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433c:	f003 0304 	and.w	r3, r3, #4
 8004340:	2b00      	cmp	r3, #0
 8004342:	d003      	beq.n	800434c <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8004344:	212b      	movs	r1, #43	; 0x2b
 8004346:	68f8      	ldr	r0, [r7, #12]
 8004348:	f7ff fe8c 	bl	8004064 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 800434c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d019      	beq.n	800438a <_PrintInt+0x102>
 8004356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004358:	f003 0301 	and.w	r3, r3, #1
 800435c:	2b00      	cmp	r3, #0
 800435e:	d114      	bne.n	800438a <_PrintInt+0x102>
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d111      	bne.n	800438a <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8004366:	6a3b      	ldr	r3, [r7, #32]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d00e      	beq.n	800438a <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800436c:	e006      	b.n	800437c <_PrintInt+0xf4>
        FieldWidth--;
 800436e:	6a3b      	ldr	r3, [r7, #32]
 8004370:	3b01      	subs	r3, #1
 8004372:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8004374:	2130      	movs	r1, #48	; 0x30
 8004376:	68f8      	ldr	r0, [r7, #12]
 8004378:	f7ff fe74 	bl	8004064 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800437c:	6a3b      	ldr	r3, [r7, #32]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d003      	beq.n	800438a <_PrintInt+0x102>
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	6a3b      	ldr	r3, [r7, #32]
 8004386:	429a      	cmp	r2, r3
 8004388:	d3f1      	bcc.n	800436e <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 800438a:	68b9      	ldr	r1, [r7, #8]
 800438c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438e:	9301      	str	r3, [sp, #4]
 8004390:	6a3b      	ldr	r3, [r7, #32]
 8004392:	9300      	str	r3, [sp, #0]
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	68f8      	ldr	r0, [r7, #12]
 800439a:	f7ff fedf 	bl	800415c <_PrintUnsigned>
}
 800439e:	bf00      	nop
 80043a0:	3718      	adds	r7, #24
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
	...

080043a8 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b098      	sub	sp, #96	; 0x60
 80043ac:	af02      	add	r7, sp, #8
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80043b4:	f3ef 8311 	mrs	r3, BASEPRI
 80043b8:	f04f 0120 	mov.w	r1, #32
 80043bc:	f381 8811 	msr	BASEPRI, r1
 80043c0:	633b      	str	r3, [r7, #48]	; 0x30
 80043c2:	48b7      	ldr	r0, [pc, #732]	; (80046a0 <_VPrintTarget+0x2f8>)
 80043c4:	f7ff fbf2 	bl	8003bac <_PreparePacket>
 80043c8:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 80043ca:	4bb5      	ldr	r3, [pc, #724]	; (80046a0 <_VPrintTarget+0x2f8>)
 80043cc:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 80043ce:	2300      	movs	r3, #0
 80043d0:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 80043d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d4:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	3301      	adds	r3, #1
 80043da:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	3301      	adds	r3, #1
 80043ec:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 80043ee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	f000 8183 	beq.w	80046fe <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 80043f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80043fc:	2b25      	cmp	r3, #37	; 0x25
 80043fe:	f040 8170 	bne.w	80046e2 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8004402:	2300      	movs	r3, #0
 8004404:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8004406:	2301      	movs	r3, #1
 8004408:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8004412:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004416:	3b23      	subs	r3, #35	; 0x23
 8004418:	2b0d      	cmp	r3, #13
 800441a:	d83f      	bhi.n	800449c <_VPrintTarget+0xf4>
 800441c:	a201      	add	r2, pc, #4	; (adr r2, 8004424 <_VPrintTarget+0x7c>)
 800441e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004422:	bf00      	nop
 8004424:	0800448d 	.word	0x0800448d
 8004428:	0800449d 	.word	0x0800449d
 800442c:	0800449d 	.word	0x0800449d
 8004430:	0800449d 	.word	0x0800449d
 8004434:	0800449d 	.word	0x0800449d
 8004438:	0800449d 	.word	0x0800449d
 800443c:	0800449d 	.word	0x0800449d
 8004440:	0800449d 	.word	0x0800449d
 8004444:	0800447d 	.word	0x0800447d
 8004448:	0800449d 	.word	0x0800449d
 800444c:	0800445d 	.word	0x0800445d
 8004450:	0800449d 	.word	0x0800449d
 8004454:	0800449d 	.word	0x0800449d
 8004458:	0800446d 	.word	0x0800446d
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 800445c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800445e:	f043 0301 	orr.w	r3, r3, #1
 8004462:	64bb      	str	r3, [r7, #72]	; 0x48
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	3301      	adds	r3, #1
 8004468:	60fb      	str	r3, [r7, #12]
 800446a:	e01a      	b.n	80044a2 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 800446c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800446e:	f043 0302 	orr.w	r3, r3, #2
 8004472:	64bb      	str	r3, [r7, #72]	; 0x48
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	3301      	adds	r3, #1
 8004478:	60fb      	str	r3, [r7, #12]
 800447a:	e012      	b.n	80044a2 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 800447c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800447e:	f043 0304 	orr.w	r3, r3, #4
 8004482:	64bb      	str	r3, [r7, #72]	; 0x48
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	3301      	adds	r3, #1
 8004488:	60fb      	str	r3, [r7, #12]
 800448a:	e00a      	b.n	80044a2 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 800448c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800448e:	f043 0308 	orr.w	r3, r3, #8
 8004492:	64bb      	str	r3, [r7, #72]	; 0x48
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	3301      	adds	r3, #1
 8004498:	60fb      	str	r3, [r7, #12]
 800449a:	e002      	b.n	80044a2 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 800449c:	2300      	movs	r3, #0
 800449e:	653b      	str	r3, [r7, #80]	; 0x50
 80044a0:	bf00      	nop
        }
      } while (v);
 80044a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d1b0      	bne.n	800440a <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 80044a8:	2300      	movs	r3, #0
 80044aa:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 80044b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80044b8:	2b2f      	cmp	r3, #47	; 0x2f
 80044ba:	d912      	bls.n	80044e2 <_VPrintTarget+0x13a>
 80044bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80044c0:	2b39      	cmp	r3, #57	; 0x39
 80044c2:	d80e      	bhi.n	80044e2 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	3301      	adds	r3, #1
 80044c8:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 80044ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044cc:	4613      	mov	r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	4413      	add	r3, r2
 80044d2:	005b      	lsls	r3, r3, #1
 80044d4:	461a      	mov	r2, r3
 80044d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80044da:	4413      	add	r3, r2
 80044dc:	3b30      	subs	r3, #48	; 0x30
 80044de:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 80044e0:	e7e4      	b.n	80044ac <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 80044e2:	2300      	movs	r3, #0
 80044e4:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 80044ee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80044f2:	2b2e      	cmp	r3, #46	; 0x2e
 80044f4:	d11d      	bne.n	8004532 <_VPrintTarget+0x18a>
        sFormat++;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	3301      	adds	r3, #1
 80044fa:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8004504:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004508:	2b2f      	cmp	r3, #47	; 0x2f
 800450a:	d912      	bls.n	8004532 <_VPrintTarget+0x18a>
 800450c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004510:	2b39      	cmp	r3, #57	; 0x39
 8004512:	d80e      	bhi.n	8004532 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	3301      	adds	r3, #1
 8004518:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 800451a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800451c:	4613      	mov	r3, r2
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	4413      	add	r3, r2
 8004522:	005b      	lsls	r3, r3, #1
 8004524:	461a      	mov	r2, r3
 8004526:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800452a:	4413      	add	r3, r2
 800452c:	3b30      	subs	r3, #48	; 0x30
 800452e:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8004530:	e7e4      	b.n	80044fc <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 800453a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800453e:	2b6c      	cmp	r3, #108	; 0x6c
 8004540:	d003      	beq.n	800454a <_VPrintTarget+0x1a2>
 8004542:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004546:	2b68      	cmp	r3, #104	; 0x68
 8004548:	d107      	bne.n	800455a <_VPrintTarget+0x1b2>
          c = *sFormat;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	3301      	adds	r3, #1
 8004556:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8004558:	e7ef      	b.n	800453a <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 800455a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800455e:	2b25      	cmp	r3, #37	; 0x25
 8004560:	f000 80b3 	beq.w	80046ca <_VPrintTarget+0x322>
 8004564:	2b25      	cmp	r3, #37	; 0x25
 8004566:	f2c0 80b7 	blt.w	80046d8 <_VPrintTarget+0x330>
 800456a:	2b78      	cmp	r3, #120	; 0x78
 800456c:	f300 80b4 	bgt.w	80046d8 <_VPrintTarget+0x330>
 8004570:	2b58      	cmp	r3, #88	; 0x58
 8004572:	f2c0 80b1 	blt.w	80046d8 <_VPrintTarget+0x330>
 8004576:	3b58      	subs	r3, #88	; 0x58
 8004578:	2b20      	cmp	r3, #32
 800457a:	f200 80ad 	bhi.w	80046d8 <_VPrintTarget+0x330>
 800457e:	a201      	add	r2, pc, #4	; (adr r2, 8004584 <_VPrintTarget+0x1dc>)
 8004580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004584:	0800467b 	.word	0x0800467b
 8004588:	080046d9 	.word	0x080046d9
 800458c:	080046d9 	.word	0x080046d9
 8004590:	080046d9 	.word	0x080046d9
 8004594:	080046d9 	.word	0x080046d9
 8004598:	080046d9 	.word	0x080046d9
 800459c:	080046d9 	.word	0x080046d9
 80045a0:	080046d9 	.word	0x080046d9
 80045a4:	080046d9 	.word	0x080046d9
 80045a8:	080046d9 	.word	0x080046d9
 80045ac:	080046d9 	.word	0x080046d9
 80045b0:	08004609 	.word	0x08004609
 80045b4:	0800462f 	.word	0x0800462f
 80045b8:	080046d9 	.word	0x080046d9
 80045bc:	080046d9 	.word	0x080046d9
 80045c0:	080046d9 	.word	0x080046d9
 80045c4:	080046d9 	.word	0x080046d9
 80045c8:	080046d9 	.word	0x080046d9
 80045cc:	080046d9 	.word	0x080046d9
 80045d0:	080046d9 	.word	0x080046d9
 80045d4:	080046d9 	.word	0x080046d9
 80045d8:	080046d9 	.word	0x080046d9
 80045dc:	080046d9 	.word	0x080046d9
 80045e0:	080046d9 	.word	0x080046d9
 80045e4:	080046a5 	.word	0x080046a5
 80045e8:	080046d9 	.word	0x080046d9
 80045ec:	080046d9 	.word	0x080046d9
 80045f0:	080046d9 	.word	0x080046d9
 80045f4:	080046d9 	.word	0x080046d9
 80045f8:	08004655 	.word	0x08004655
 80045fc:	080046d9 	.word	0x080046d9
 8004600:	080046d9 	.word	0x080046d9
 8004604:	0800467b 	.word	0x0800467b
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	1d19      	adds	r1, r3, #4
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	6011      	str	r1, [r2, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8004616:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004618:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 800461c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8004620:	f107 0314 	add.w	r3, r7, #20
 8004624:	4611      	mov	r1, r2
 8004626:	4618      	mov	r0, r3
 8004628:	f7ff fd1c 	bl	8004064 <_StoreChar>
        break;
 800462c:	e055      	b.n	80046da <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	1d19      	adds	r1, r3, #4
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	6011      	str	r1, [r2, #0]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 800463c:	f107 0014 	add.w	r0, r7, #20
 8004640:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004642:	9301      	str	r3, [sp, #4]
 8004644:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004646:	9300      	str	r3, [sp, #0]
 8004648:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800464a:	220a      	movs	r2, #10
 800464c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800464e:	f7ff fe1b 	bl	8004288 <_PrintInt>
        break;
 8004652:	e042      	b.n	80046da <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	1d19      	adds	r1, r3, #4
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	6011      	str	r1, [r2, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004662:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004664:	f107 0014 	add.w	r0, r7, #20
 8004668:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800466a:	9301      	str	r3, [sp, #4]
 800466c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800466e:	9300      	str	r3, [sp, #0]
 8004670:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004672:	220a      	movs	r2, #10
 8004674:	f7ff fd72 	bl	800415c <_PrintUnsigned>
        break;
 8004678:	e02f      	b.n	80046da <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	1d19      	adds	r1, r3, #4
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	6011      	str	r1, [r2, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8004688:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800468a:	f107 0014 	add.w	r0, r7, #20
 800468e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004690:	9301      	str	r3, [sp, #4]
 8004692:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004694:	9300      	str	r3, [sp, #0]
 8004696:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004698:	2210      	movs	r2, #16
 800469a:	f7ff fd5f 	bl	800415c <_PrintUnsigned>
        break;
 800469e:	e01c      	b.n	80046da <_VPrintTarget+0x332>
 80046a0:	200142ac 	.word	0x200142ac
      case 'p':
        v = va_arg(*pParamList, int);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	1d19      	adds	r1, r3, #4
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	6011      	str	r1, [r2, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 80046b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80046b4:	f107 0014 	add.w	r0, r7, #20
 80046b8:	2300      	movs	r3, #0
 80046ba:	9301      	str	r3, [sp, #4]
 80046bc:	2308      	movs	r3, #8
 80046be:	9300      	str	r3, [sp, #0]
 80046c0:	2308      	movs	r3, #8
 80046c2:	2210      	movs	r2, #16
 80046c4:	f7ff fd4a 	bl	800415c <_PrintUnsigned>
        break;
 80046c8:	e007      	b.n	80046da <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 80046ca:	f107 0314 	add.w	r3, r7, #20
 80046ce:	2125      	movs	r1, #37	; 0x25
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7ff fcc7 	bl	8004064 <_StoreChar>
        break;
 80046d6:	e000      	b.n	80046da <_VPrintTarget+0x332>
      default:
        break;
 80046d8:	bf00      	nop
      }
      sFormat++;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	3301      	adds	r3, #1
 80046de:	60fb      	str	r3, [r7, #12]
 80046e0:	e007      	b.n	80046f2 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 80046e2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80046e6:	f107 0314 	add.w	r3, r7, #20
 80046ea:	4611      	mov	r1, r2
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7ff fcb9 	bl	8004064 <_StoreChar>
    }
  } while (*sFormat);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	f47f ae72 	bne.w	80043e0 <_VPrintTarget+0x38>
 80046fc:	e000      	b.n	8004700 <_VPrintTarget+0x358>
      break;
 80046fe:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8004700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004702:	2b00      	cmp	r3, #0
 8004704:	d041      	beq.n	800478a <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8004706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	b2d2      	uxtb	r2, r2
 800470c:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	643b      	str	r3, [r7, #64]	; 0x40
 8004712:	6a3b      	ldr	r3, [r7, #32]
 8004714:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004716:	e00b      	b.n	8004730 <_VPrintTarget+0x388>
 8004718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800471a:	b2da      	uxtb	r2, r3
 800471c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800471e:	1c59      	adds	r1, r3, #1
 8004720:	6439      	str	r1, [r7, #64]	; 0x40
 8004722:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004726:	b2d2      	uxtb	r2, r2
 8004728:	701a      	strb	r2, [r3, #0]
 800472a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800472c:	09db      	lsrs	r3, r3, #7
 800472e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004732:	2b7f      	cmp	r3, #127	; 0x7f
 8004734:	d8f0      	bhi.n	8004718 <_VPrintTarget+0x370>
 8004736:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004738:	1c5a      	adds	r2, r3, #1
 800473a:	643a      	str	r2, [r7, #64]	; 0x40
 800473c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800473e:	b2d2      	uxtb	r2, r2
 8004740:	701a      	strb	r2, [r3, #0]
 8004742:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004744:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	63bb      	str	r3, [r7, #56]	; 0x38
 800474a:	2300      	movs	r3, #0
 800474c:	637b      	str	r3, [r7, #52]	; 0x34
 800474e:	e00b      	b.n	8004768 <_VPrintTarget+0x3c0>
 8004750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004752:	b2da      	uxtb	r2, r3
 8004754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004756:	1c59      	adds	r1, r3, #1
 8004758:	63b9      	str	r1, [r7, #56]	; 0x38
 800475a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800475e:	b2d2      	uxtb	r2, r2
 8004760:	701a      	strb	r2, [r3, #0]
 8004762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004764:	09db      	lsrs	r3, r3, #7
 8004766:	637b      	str	r3, [r7, #52]	; 0x34
 8004768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800476a:	2b7f      	cmp	r3, #127	; 0x7f
 800476c:	d8f0      	bhi.n	8004750 <_VPrintTarget+0x3a8>
 800476e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004770:	1c5a      	adds	r2, r3, #1
 8004772:	63ba      	str	r2, [r7, #56]	; 0x38
 8004774:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004776:	b2d2      	uxtb	r2, r2
 8004778:	701a      	strb	r2, [r3, #0]
 800477a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800477c:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	69b9      	ldr	r1, [r7, #24]
 8004782:	221a      	movs	r2, #26
 8004784:	4618      	mov	r0, r3
 8004786:	f7ff faff 	bl	8003d88 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 800478a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478c:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8004790:	bf00      	nop
 8004792:	3758      	adds	r7, #88	; 0x58
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004798:	b580      	push	{r7, lr}
 800479a:	b086      	sub	sp, #24
 800479c:	af02      	add	r7, sp, #8
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]
 80047a4:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80047a6:	2300      	movs	r3, #0
 80047a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80047ac:	4917      	ldr	r1, [pc, #92]	; (800480c <SEGGER_SYSVIEW_Init+0x74>)
 80047ae:	4818      	ldr	r0, [pc, #96]	; (8004810 <SEGGER_SYSVIEW_Init+0x78>)
 80047b0:	f7ff f8dc 	bl	800396c <SEGGER_RTT_AllocUpBuffer>
 80047b4:	4603      	mov	r3, r0
 80047b6:	b2da      	uxtb	r2, r3
 80047b8:	4b16      	ldr	r3, [pc, #88]	; (8004814 <SEGGER_SYSVIEW_Init+0x7c>)
 80047ba:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80047bc:	4b15      	ldr	r3, [pc, #84]	; (8004814 <SEGGER_SYSVIEW_Init+0x7c>)
 80047be:	785a      	ldrb	r2, [r3, #1]
 80047c0:	4b14      	ldr	r3, [pc, #80]	; (8004814 <SEGGER_SYSVIEW_Init+0x7c>)
 80047c2:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80047c4:	4b13      	ldr	r3, [pc, #76]	; (8004814 <SEGGER_SYSVIEW_Init+0x7c>)
 80047c6:	7e1b      	ldrb	r3, [r3, #24]
 80047c8:	4618      	mov	r0, r3
 80047ca:	2300      	movs	r3, #0
 80047cc:	9300      	str	r3, [sp, #0]
 80047ce:	2308      	movs	r3, #8
 80047d0:	4a11      	ldr	r2, [pc, #68]	; (8004818 <SEGGER_SYSVIEW_Init+0x80>)
 80047d2:	490f      	ldr	r1, [pc, #60]	; (8004810 <SEGGER_SYSVIEW_Init+0x78>)
 80047d4:	f7ff f94e 	bl	8003a74 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80047d8:	4b0e      	ldr	r3, [pc, #56]	; (8004814 <SEGGER_SYSVIEW_Init+0x7c>)
 80047da:	2200      	movs	r2, #0
 80047dc:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80047de:	4b0f      	ldr	r3, [pc, #60]	; (800481c <SEGGER_SYSVIEW_Init+0x84>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a0c      	ldr	r2, [pc, #48]	; (8004814 <SEGGER_SYSVIEW_Init+0x7c>)
 80047e4:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80047e6:	4a0b      	ldr	r2, [pc, #44]	; (8004814 <SEGGER_SYSVIEW_Init+0x7c>)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80047ec:	4a09      	ldr	r2, [pc, #36]	; (8004814 <SEGGER_SYSVIEW_Init+0x7c>)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80047f2:	4a08      	ldr	r2, [pc, #32]	; (8004814 <SEGGER_SYSVIEW_Init+0x7c>)
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80047f8:	4a06      	ldr	r2, [pc, #24]	; (8004814 <SEGGER_SYSVIEW_Init+0x7c>)
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80047fe:	4b05      	ldr	r3, [pc, #20]	; (8004814 <SEGGER_SYSVIEW_Init+0x7c>)
 8004800:	2200      	movs	r2, #0
 8004802:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004804:	bf00      	nop
 8004806:	3710      	adds	r7, #16
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	20013274 	.word	0x20013274
 8004810:	08005e90 	.word	0x08005e90
 8004814:	2001427c 	.word	0x2001427c
 8004818:	20014274 	.word	0x20014274
 800481c:	e0001004 	.word	0xe0001004

08004820 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004828:	4a04      	ldr	r2, [pc, #16]	; (800483c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6113      	str	r3, [r2, #16]
}
 800482e:	bf00      	nop
 8004830:	370c      	adds	r7, #12
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	2001427c 	.word	0x2001427c

08004840 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004848:	f3ef 8311 	mrs	r3, BASEPRI
 800484c:	f04f 0120 	mov.w	r1, #32
 8004850:	f381 8811 	msr	BASEPRI, r1
 8004854:	60fb      	str	r3, [r7, #12]
 8004856:	4808      	ldr	r0, [pc, #32]	; (8004878 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004858:	f7ff f9a8 	bl	8003bac <_PreparePacket>
 800485c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	68b9      	ldr	r1, [r7, #8]
 8004862:	68b8      	ldr	r0, [r7, #8]
 8004864:	f7ff fa90 	bl	8003d88 <_SendPacket>
  RECORD_END();
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f383 8811 	msr	BASEPRI, r3
}
 800486e:	bf00      	nop
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	200142ac 	.word	0x200142ac

0800487c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800487c:	b580      	push	{r7, lr}
 800487e:	b088      	sub	sp, #32
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004886:	f3ef 8311 	mrs	r3, BASEPRI
 800488a:	f04f 0120 	mov.w	r1, #32
 800488e:	f381 8811 	msr	BASEPRI, r1
 8004892:	617b      	str	r3, [r7, #20]
 8004894:	4816      	ldr	r0, [pc, #88]	; (80048f0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004896:	f7ff f989 	bl	8003bac <_PreparePacket>
 800489a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	61fb      	str	r3, [r7, #28]
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	61bb      	str	r3, [r7, #24]
 80048a8:	e00b      	b.n	80048c2 <SEGGER_SYSVIEW_RecordU32+0x46>
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	b2da      	uxtb	r2, r3
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	1c59      	adds	r1, r3, #1
 80048b2:	61f9      	str	r1, [r7, #28]
 80048b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80048b8:	b2d2      	uxtb	r2, r2
 80048ba:	701a      	strb	r2, [r3, #0]
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	09db      	lsrs	r3, r3, #7
 80048c0:	61bb      	str	r3, [r7, #24]
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	2b7f      	cmp	r3, #127	; 0x7f
 80048c6:	d8f0      	bhi.n	80048aa <SEGGER_SYSVIEW_RecordU32+0x2e>
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	1c5a      	adds	r2, r3, #1
 80048cc:	61fa      	str	r2, [r7, #28]
 80048ce:	69ba      	ldr	r2, [r7, #24]
 80048d0:	b2d2      	uxtb	r2, r2
 80048d2:	701a      	strb	r2, [r3, #0]
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	68f9      	ldr	r1, [r7, #12]
 80048dc:	6938      	ldr	r0, [r7, #16]
 80048de:	f7ff fa53 	bl	8003d88 <_SendPacket>
  RECORD_END();
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	f383 8811 	msr	BASEPRI, r3
}
 80048e8:	bf00      	nop
 80048ea:	3720      	adds	r7, #32
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	200142ac 	.word	0x200142ac

080048f4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b08c      	sub	sp, #48	; 0x30
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004900:	f3ef 8311 	mrs	r3, BASEPRI
 8004904:	f04f 0120 	mov.w	r1, #32
 8004908:	f381 8811 	msr	BASEPRI, r1
 800490c:	61fb      	str	r3, [r7, #28]
 800490e:	4825      	ldr	r0, [pc, #148]	; (80049a4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004910:	f7ff f94c 	bl	8003bac <_PreparePacket>
 8004914:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	62bb      	str	r3, [r7, #40]	; 0x28
 8004922:	e00b      	b.n	800493c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004926:	b2da      	uxtb	r2, r3
 8004928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800492a:	1c59      	adds	r1, r3, #1
 800492c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800492e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004932:	b2d2      	uxtb	r2, r2
 8004934:	701a      	strb	r2, [r3, #0]
 8004936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004938:	09db      	lsrs	r3, r3, #7
 800493a:	62bb      	str	r3, [r7, #40]	; 0x28
 800493c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800493e:	2b7f      	cmp	r3, #127	; 0x7f
 8004940:	d8f0      	bhi.n	8004924 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004944:	1c5a      	adds	r2, r3, #1
 8004946:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004948:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800494a:	b2d2      	uxtb	r2, r2
 800494c:	701a      	strb	r2, [r3, #0]
 800494e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004950:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	627b      	str	r3, [r7, #36]	; 0x24
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	623b      	str	r3, [r7, #32]
 800495a:	e00b      	b.n	8004974 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800495c:	6a3b      	ldr	r3, [r7, #32]
 800495e:	b2da      	uxtb	r2, r3
 8004960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004962:	1c59      	adds	r1, r3, #1
 8004964:	6279      	str	r1, [r7, #36]	; 0x24
 8004966:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800496a:	b2d2      	uxtb	r2, r2
 800496c:	701a      	strb	r2, [r3, #0]
 800496e:	6a3b      	ldr	r3, [r7, #32]
 8004970:	09db      	lsrs	r3, r3, #7
 8004972:	623b      	str	r3, [r7, #32]
 8004974:	6a3b      	ldr	r3, [r7, #32]
 8004976:	2b7f      	cmp	r3, #127	; 0x7f
 8004978:	d8f0      	bhi.n	800495c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800497a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497c:	1c5a      	adds	r2, r3, #1
 800497e:	627a      	str	r2, [r7, #36]	; 0x24
 8004980:	6a3a      	ldr	r2, [r7, #32]
 8004982:	b2d2      	uxtb	r2, r2
 8004984:	701a      	strb	r2, [r3, #0]
 8004986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004988:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	6979      	ldr	r1, [r7, #20]
 800498e:	69b8      	ldr	r0, [r7, #24]
 8004990:	f7ff f9fa 	bl	8003d88 <_SendPacket>
  RECORD_END();
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	f383 8811 	msr	BASEPRI, r3
}
 800499a:	bf00      	nop
 800499c:	3730      	adds	r7, #48	; 0x30
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	200142ac 	.word	0x200142ac

080049a8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b08c      	sub	sp, #48	; 0x30
 80049ac:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80049ae:	4b58      	ldr	r3, [pc, #352]	; (8004b10 <SEGGER_SYSVIEW_Start+0x168>)
 80049b0:	2201      	movs	r2, #1
 80049b2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80049b4:	f3ef 8311 	mrs	r3, BASEPRI
 80049b8:	f04f 0120 	mov.w	r1, #32
 80049bc:	f381 8811 	msr	BASEPRI, r1
 80049c0:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80049c2:	4b53      	ldr	r3, [pc, #332]	; (8004b10 <SEGGER_SYSVIEW_Start+0x168>)
 80049c4:	785b      	ldrb	r3, [r3, #1]
 80049c6:	220a      	movs	r2, #10
 80049c8:	4952      	ldr	r1, [pc, #328]	; (8004b14 <SEGGER_SYSVIEW_Start+0x16c>)
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7fb fc00 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80049d6:	200a      	movs	r0, #10
 80049d8:	f7ff ff32 	bl	8004840 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80049dc:	f3ef 8311 	mrs	r3, BASEPRI
 80049e0:	f04f 0120 	mov.w	r1, #32
 80049e4:	f381 8811 	msr	BASEPRI, r1
 80049e8:	60bb      	str	r3, [r7, #8]
 80049ea:	484b      	ldr	r0, [pc, #300]	; (8004b18 <SEGGER_SYSVIEW_Start+0x170>)
 80049ec:	f7ff f8de 	bl	8003bac <_PreparePacket>
 80049f0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049fa:	4b45      	ldr	r3, [pc, #276]	; (8004b10 <SEGGER_SYSVIEW_Start+0x168>)
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a00:	e00b      	b.n	8004a1a <SEGGER_SYSVIEW_Start+0x72>
 8004a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a04:	b2da      	uxtb	r2, r3
 8004a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a08:	1c59      	adds	r1, r3, #1
 8004a0a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004a0c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a10:	b2d2      	uxtb	r2, r2
 8004a12:	701a      	strb	r2, [r3, #0]
 8004a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a16:	09db      	lsrs	r3, r3, #7
 8004a18:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1c:	2b7f      	cmp	r3, #127	; 0x7f
 8004a1e:	d8f0      	bhi.n	8004a02 <SEGGER_SYSVIEW_Start+0x5a>
 8004a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a22:	1c5a      	adds	r2, r3, #1
 8004a24:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a28:	b2d2      	uxtb	r2, r2
 8004a2a:	701a      	strb	r2, [r3, #0]
 8004a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a2e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	627b      	str	r3, [r7, #36]	; 0x24
 8004a34:	4b36      	ldr	r3, [pc, #216]	; (8004b10 <SEGGER_SYSVIEW_Start+0x168>)
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	623b      	str	r3, [r7, #32]
 8004a3a:	e00b      	b.n	8004a54 <SEGGER_SYSVIEW_Start+0xac>
 8004a3c:	6a3b      	ldr	r3, [r7, #32]
 8004a3e:	b2da      	uxtb	r2, r3
 8004a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a42:	1c59      	adds	r1, r3, #1
 8004a44:	6279      	str	r1, [r7, #36]	; 0x24
 8004a46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a4a:	b2d2      	uxtb	r2, r2
 8004a4c:	701a      	strb	r2, [r3, #0]
 8004a4e:	6a3b      	ldr	r3, [r7, #32]
 8004a50:	09db      	lsrs	r3, r3, #7
 8004a52:	623b      	str	r3, [r7, #32]
 8004a54:	6a3b      	ldr	r3, [r7, #32]
 8004a56:	2b7f      	cmp	r3, #127	; 0x7f
 8004a58:	d8f0      	bhi.n	8004a3c <SEGGER_SYSVIEW_Start+0x94>
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5c:	1c5a      	adds	r2, r3, #1
 8004a5e:	627a      	str	r2, [r7, #36]	; 0x24
 8004a60:	6a3a      	ldr	r2, [r7, #32]
 8004a62:	b2d2      	uxtb	r2, r2
 8004a64:	701a      	strb	r2, [r3, #0]
 8004a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a68:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	61fb      	str	r3, [r7, #28]
 8004a6e:	4b28      	ldr	r3, [pc, #160]	; (8004b10 <SEGGER_SYSVIEW_Start+0x168>)
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	61bb      	str	r3, [r7, #24]
 8004a74:	e00b      	b.n	8004a8e <SEGGER_SYSVIEW_Start+0xe6>
 8004a76:	69bb      	ldr	r3, [r7, #24]
 8004a78:	b2da      	uxtb	r2, r3
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	1c59      	adds	r1, r3, #1
 8004a7e:	61f9      	str	r1, [r7, #28]
 8004a80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a84:	b2d2      	uxtb	r2, r2
 8004a86:	701a      	strb	r2, [r3, #0]
 8004a88:	69bb      	ldr	r3, [r7, #24]
 8004a8a:	09db      	lsrs	r3, r3, #7
 8004a8c:	61bb      	str	r3, [r7, #24]
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	2b7f      	cmp	r3, #127	; 0x7f
 8004a92:	d8f0      	bhi.n	8004a76 <SEGGER_SYSVIEW_Start+0xce>
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	1c5a      	adds	r2, r3, #1
 8004a98:	61fa      	str	r2, [r7, #28]
 8004a9a:	69ba      	ldr	r2, [r7, #24]
 8004a9c:	b2d2      	uxtb	r2, r2
 8004a9e:	701a      	strb	r2, [r3, #0]
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	617b      	str	r3, [r7, #20]
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	613b      	str	r3, [r7, #16]
 8004aac:	e00b      	b.n	8004ac6 <SEGGER_SYSVIEW_Start+0x11e>
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	b2da      	uxtb	r2, r3
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	1c59      	adds	r1, r3, #1
 8004ab6:	6179      	str	r1, [r7, #20]
 8004ab8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004abc:	b2d2      	uxtb	r2, r2
 8004abe:	701a      	strb	r2, [r3, #0]
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	09db      	lsrs	r3, r3, #7
 8004ac4:	613b      	str	r3, [r7, #16]
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	2b7f      	cmp	r3, #127	; 0x7f
 8004aca:	d8f0      	bhi.n	8004aae <SEGGER_SYSVIEW_Start+0x106>
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	1c5a      	adds	r2, r3, #1
 8004ad0:	617a      	str	r2, [r7, #20]
 8004ad2:	693a      	ldr	r2, [r7, #16]
 8004ad4:	b2d2      	uxtb	r2, r2
 8004ad6:	701a      	strb	r2, [r3, #0]
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004adc:	2218      	movs	r2, #24
 8004ade:	6839      	ldr	r1, [r7, #0]
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f7ff f951 	bl	8003d88 <_SendPacket>
      RECORD_END();
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004aec:	4b08      	ldr	r3, [pc, #32]	; (8004b10 <SEGGER_SYSVIEW_Start+0x168>)
 8004aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d002      	beq.n	8004afa <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004af4:	4b06      	ldr	r3, [pc, #24]	; (8004b10 <SEGGER_SYSVIEW_Start+0x168>)
 8004af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004afa:	f000 f9eb 	bl	8004ed4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004afe:	f000 f9b1 	bl	8004e64 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004b02:	f000 fc13 	bl	800532c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004b06:	bf00      	nop
 8004b08:	3730      	adds	r7, #48	; 0x30
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	2001427c 	.word	0x2001427c
 8004b14:	08005ecc 	.word	0x08005ecc
 8004b18:	200142ac 	.word	0x200142ac

08004b1c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004b22:	f3ef 8311 	mrs	r3, BASEPRI
 8004b26:	f04f 0120 	mov.w	r1, #32
 8004b2a:	f381 8811 	msr	BASEPRI, r1
 8004b2e:	607b      	str	r3, [r7, #4]
 8004b30:	480b      	ldr	r0, [pc, #44]	; (8004b60 <SEGGER_SYSVIEW_Stop+0x44>)
 8004b32:	f7ff f83b 	bl	8003bac <_PreparePacket>
 8004b36:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004b38:	4b0a      	ldr	r3, [pc, #40]	; (8004b64 <SEGGER_SYSVIEW_Stop+0x48>)
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d007      	beq.n	8004b50 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004b40:	220b      	movs	r2, #11
 8004b42:	6839      	ldr	r1, [r7, #0]
 8004b44:	6838      	ldr	r0, [r7, #0]
 8004b46:	f7ff f91f 	bl	8003d88 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8004b4a:	4b06      	ldr	r3, [pc, #24]	; (8004b64 <SEGGER_SYSVIEW_Stop+0x48>)
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f383 8811 	msr	BASEPRI, r3
}
 8004b56:	bf00      	nop
 8004b58:	3708      	adds	r7, #8
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	200142ac 	.word	0x200142ac
 8004b64:	2001427c 	.word	0x2001427c

08004b68 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b08c      	sub	sp, #48	; 0x30
 8004b6c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004b6e:	f3ef 8311 	mrs	r3, BASEPRI
 8004b72:	f04f 0120 	mov.w	r1, #32
 8004b76:	f381 8811 	msr	BASEPRI, r1
 8004b7a:	60fb      	str	r3, [r7, #12]
 8004b7c:	4845      	ldr	r0, [pc, #276]	; (8004c94 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8004b7e:	f7ff f815 	bl	8003bac <_PreparePacket>
 8004b82:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b8c:	4b42      	ldr	r3, [pc, #264]	; (8004c98 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b92:	e00b      	b.n	8004bac <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b96:	b2da      	uxtb	r2, r3
 8004b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b9a:	1c59      	adds	r1, r3, #1
 8004b9c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004b9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ba2:	b2d2      	uxtb	r2, r2
 8004ba4:	701a      	strb	r2, [r3, #0]
 8004ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba8:	09db      	lsrs	r3, r3, #7
 8004baa:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bae:	2b7f      	cmp	r3, #127	; 0x7f
 8004bb0:	d8f0      	bhi.n	8004b94 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb4:	1c5a      	adds	r2, r3, #1
 8004bb6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004bb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bba:	b2d2      	uxtb	r2, r2
 8004bbc:	701a      	strb	r2, [r3, #0]
 8004bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8004bc6:	4b34      	ldr	r3, [pc, #208]	; (8004c98 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	623b      	str	r3, [r7, #32]
 8004bcc:	e00b      	b.n	8004be6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004bce:	6a3b      	ldr	r3, [r7, #32]
 8004bd0:	b2da      	uxtb	r2, r3
 8004bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd4:	1c59      	adds	r1, r3, #1
 8004bd6:	6279      	str	r1, [r7, #36]	; 0x24
 8004bd8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004bdc:	b2d2      	uxtb	r2, r2
 8004bde:	701a      	strb	r2, [r3, #0]
 8004be0:	6a3b      	ldr	r3, [r7, #32]
 8004be2:	09db      	lsrs	r3, r3, #7
 8004be4:	623b      	str	r3, [r7, #32]
 8004be6:	6a3b      	ldr	r3, [r7, #32]
 8004be8:	2b7f      	cmp	r3, #127	; 0x7f
 8004bea:	d8f0      	bhi.n	8004bce <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bee:	1c5a      	adds	r2, r3, #1
 8004bf0:	627a      	str	r2, [r7, #36]	; 0x24
 8004bf2:	6a3a      	ldr	r2, [r7, #32]
 8004bf4:	b2d2      	uxtb	r2, r2
 8004bf6:	701a      	strb	r2, [r3, #0]
 8004bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	61fb      	str	r3, [r7, #28]
 8004c00:	4b25      	ldr	r3, [pc, #148]	; (8004c98 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	61bb      	str	r3, [r7, #24]
 8004c06:	e00b      	b.n	8004c20 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	b2da      	uxtb	r2, r3
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	1c59      	adds	r1, r3, #1
 8004c10:	61f9      	str	r1, [r7, #28]
 8004c12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c16:	b2d2      	uxtb	r2, r2
 8004c18:	701a      	strb	r2, [r3, #0]
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	09db      	lsrs	r3, r3, #7
 8004c1e:	61bb      	str	r3, [r7, #24]
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	2b7f      	cmp	r3, #127	; 0x7f
 8004c24:	d8f0      	bhi.n	8004c08 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	1c5a      	adds	r2, r3, #1
 8004c2a:	61fa      	str	r2, [r7, #28]
 8004c2c:	69ba      	ldr	r2, [r7, #24]
 8004c2e:	b2d2      	uxtb	r2, r2
 8004c30:	701a      	strb	r2, [r3, #0]
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	617b      	str	r3, [r7, #20]
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	613b      	str	r3, [r7, #16]
 8004c3e:	e00b      	b.n	8004c58 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	b2da      	uxtb	r2, r3
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	1c59      	adds	r1, r3, #1
 8004c48:	6179      	str	r1, [r7, #20]
 8004c4a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c4e:	b2d2      	uxtb	r2, r2
 8004c50:	701a      	strb	r2, [r3, #0]
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	09db      	lsrs	r3, r3, #7
 8004c56:	613b      	str	r3, [r7, #16]
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	2b7f      	cmp	r3, #127	; 0x7f
 8004c5c:	d8f0      	bhi.n	8004c40 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	1c5a      	adds	r2, r3, #1
 8004c62:	617a      	str	r2, [r7, #20]
 8004c64:	693a      	ldr	r2, [r7, #16]
 8004c66:	b2d2      	uxtb	r2, r2
 8004c68:	701a      	strb	r2, [r3, #0]
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004c6e:	2218      	movs	r2, #24
 8004c70:	6879      	ldr	r1, [r7, #4]
 8004c72:	68b8      	ldr	r0, [r7, #8]
 8004c74:	f7ff f888 	bl	8003d88 <_SendPacket>
  RECORD_END();
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004c7e:	4b06      	ldr	r3, [pc, #24]	; (8004c98 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d002      	beq.n	8004c8c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8004c86:	4b04      	ldr	r3, [pc, #16]	; (8004c98 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8a:	4798      	blx	r3
  }
}
 8004c8c:	bf00      	nop
 8004c8e:	3730      	adds	r7, #48	; 0x30
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	200142ac 	.word	0x200142ac
 8004c98:	2001427c 	.word	0x2001427c

08004c9c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b092      	sub	sp, #72	; 0x48
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004ca4:	f3ef 8311 	mrs	r3, BASEPRI
 8004ca8:	f04f 0120 	mov.w	r1, #32
 8004cac:	f381 8811 	msr	BASEPRI, r1
 8004cb0:	617b      	str	r3, [r7, #20]
 8004cb2:	486a      	ldr	r0, [pc, #424]	; (8004e5c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004cb4:	f7fe ff7a 	bl	8003bac <_PreparePacket>
 8004cb8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	647b      	str	r3, [r7, #68]	; 0x44
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	4b66      	ldr	r3, [pc, #408]	; (8004e60 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	643b      	str	r3, [r7, #64]	; 0x40
 8004cce:	e00b      	b.n	8004ce8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8004cd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cd2:	b2da      	uxtb	r2, r3
 8004cd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cd6:	1c59      	adds	r1, r3, #1
 8004cd8:	6479      	str	r1, [r7, #68]	; 0x44
 8004cda:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cde:	b2d2      	uxtb	r2, r2
 8004ce0:	701a      	strb	r2, [r3, #0]
 8004ce2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ce4:	09db      	lsrs	r3, r3, #7
 8004ce6:	643b      	str	r3, [r7, #64]	; 0x40
 8004ce8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cea:	2b7f      	cmp	r3, #127	; 0x7f
 8004cec:	d8f0      	bhi.n	8004cd0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8004cee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cf0:	1c5a      	adds	r2, r3, #1
 8004cf2:	647a      	str	r2, [r7, #68]	; 0x44
 8004cf4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004cf6:	b2d2      	uxtb	r2, r2
 8004cf8:	701a      	strb	r2, [r3, #0]
 8004cfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cfc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d08:	e00b      	b.n	8004d22 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8004d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d0c:	b2da      	uxtb	r2, r3
 8004d0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d10:	1c59      	adds	r1, r3, #1
 8004d12:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004d14:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d18:	b2d2      	uxtb	r2, r2
 8004d1a:	701a      	strb	r2, [r3, #0]
 8004d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d1e:	09db      	lsrs	r3, r3, #7
 8004d20:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d24:	2b7f      	cmp	r3, #127	; 0x7f
 8004d26:	d8f0      	bhi.n	8004d0a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8004d28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d2a:	1c5a      	adds	r2, r3, #1
 8004d2c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004d2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d30:	b2d2      	uxtb	r2, r2
 8004d32:	701a      	strb	r2, [r3, #0]
 8004d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d36:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	2220      	movs	r2, #32
 8004d3e:	4619      	mov	r1, r3
 8004d40:	68f8      	ldr	r0, [r7, #12]
 8004d42:	f7fe fee3 	bl	8003b0c <_EncodeStr>
 8004d46:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004d48:	2209      	movs	r2, #9
 8004d4a:	68f9      	ldr	r1, [r7, #12]
 8004d4c:	6938      	ldr	r0, [r7, #16]
 8004d4e:	f7ff f81b 	bl	8003d88 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	637b      	str	r3, [r7, #52]	; 0x34
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	4b40      	ldr	r3, [pc, #256]	; (8004e60 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	633b      	str	r3, [r7, #48]	; 0x30
 8004d66:	e00b      	b.n	8004d80 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8004d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6a:	b2da      	uxtb	r2, r3
 8004d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d6e:	1c59      	adds	r1, r3, #1
 8004d70:	6379      	str	r1, [r7, #52]	; 0x34
 8004d72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d76:	b2d2      	uxtb	r2, r2
 8004d78:	701a      	strb	r2, [r3, #0]
 8004d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7c:	09db      	lsrs	r3, r3, #7
 8004d7e:	633b      	str	r3, [r7, #48]	; 0x30
 8004d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d82:	2b7f      	cmp	r3, #127	; 0x7f
 8004d84:	d8f0      	bhi.n	8004d68 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8004d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d88:	1c5a      	adds	r2, r3, #1
 8004d8a:	637a      	str	r2, [r7, #52]	; 0x34
 8004d8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d8e:	b2d2      	uxtb	r2, r2
 8004d90:	701a      	strb	r2, [r3, #0]
 8004d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d94:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004da0:	e00b      	b.n	8004dba <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8004da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da4:	b2da      	uxtb	r2, r3
 8004da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da8:	1c59      	adds	r1, r3, #1
 8004daa:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004dac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004db0:	b2d2      	uxtb	r2, r2
 8004db2:	701a      	strb	r2, [r3, #0]
 8004db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db6:	09db      	lsrs	r3, r3, #7
 8004db8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dbc:	2b7f      	cmp	r3, #127	; 0x7f
 8004dbe:	d8f0      	bhi.n	8004da2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8004dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc2:	1c5a      	adds	r2, r3, #1
 8004dc4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004dc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dc8:	b2d2      	uxtb	r2, r2
 8004dca:	701a      	strb	r2, [r3, #0]
 8004dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dce:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	627b      	str	r3, [r7, #36]	; 0x24
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	623b      	str	r3, [r7, #32]
 8004dda:	e00b      	b.n	8004df4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004ddc:	6a3b      	ldr	r3, [r7, #32]
 8004dde:	b2da      	uxtb	r2, r3
 8004de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de2:	1c59      	adds	r1, r3, #1
 8004de4:	6279      	str	r1, [r7, #36]	; 0x24
 8004de6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004dea:	b2d2      	uxtb	r2, r2
 8004dec:	701a      	strb	r2, [r3, #0]
 8004dee:	6a3b      	ldr	r3, [r7, #32]
 8004df0:	09db      	lsrs	r3, r3, #7
 8004df2:	623b      	str	r3, [r7, #32]
 8004df4:	6a3b      	ldr	r3, [r7, #32]
 8004df6:	2b7f      	cmp	r3, #127	; 0x7f
 8004df8:	d8f0      	bhi.n	8004ddc <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfc:	1c5a      	adds	r2, r3, #1
 8004dfe:	627a      	str	r2, [r7, #36]	; 0x24
 8004e00:	6a3a      	ldr	r2, [r7, #32]
 8004e02:	b2d2      	uxtb	r2, r2
 8004e04:	701a      	strb	r2, [r3, #0]
 8004e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e08:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	61fb      	str	r3, [r7, #28]
 8004e0e:	2300      	movs	r3, #0
 8004e10:	61bb      	str	r3, [r7, #24]
 8004e12:	e00b      	b.n	8004e2c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	b2da      	uxtb	r2, r3
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	1c59      	adds	r1, r3, #1
 8004e1c:	61f9      	str	r1, [r7, #28]
 8004e1e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e22:	b2d2      	uxtb	r2, r2
 8004e24:	701a      	strb	r2, [r3, #0]
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	09db      	lsrs	r3, r3, #7
 8004e2a:	61bb      	str	r3, [r7, #24]
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	2b7f      	cmp	r3, #127	; 0x7f
 8004e30:	d8f0      	bhi.n	8004e14 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	1c5a      	adds	r2, r3, #1
 8004e36:	61fa      	str	r2, [r7, #28]
 8004e38:	69ba      	ldr	r2, [r7, #24]
 8004e3a:	b2d2      	uxtb	r2, r2
 8004e3c:	701a      	strb	r2, [r3, #0]
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004e42:	2215      	movs	r2, #21
 8004e44:	68f9      	ldr	r1, [r7, #12]
 8004e46:	6938      	ldr	r0, [r7, #16]
 8004e48:	f7fe ff9e 	bl	8003d88 <_SendPacket>
  RECORD_END();
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	f383 8811 	msr	BASEPRI, r3
}
 8004e52:	bf00      	nop
 8004e54:	3748      	adds	r7, #72	; 0x48
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	200142ac 	.word	0x200142ac
 8004e60:	2001427c 	.word	0x2001427c

08004e64 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004e64:	b580      	push	{r7, lr}
 8004e66:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004e68:	4b07      	ldr	r3, [pc, #28]	; (8004e88 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004e6a:	6a1b      	ldr	r3, [r3, #32]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d008      	beq.n	8004e82 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004e70:	4b05      	ldr	r3, [pc, #20]	; (8004e88 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004e72:	6a1b      	ldr	r3, [r3, #32]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d003      	beq.n	8004e82 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8004e7a:	4b03      	ldr	r3, [pc, #12]	; (8004e88 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004e7c:	6a1b      	ldr	r3, [r3, #32]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	4798      	blx	r3
  }
}
 8004e82:	bf00      	nop
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	2001427c 	.word	0x2001427c

08004e8c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b086      	sub	sp, #24
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004e94:	f3ef 8311 	mrs	r3, BASEPRI
 8004e98:	f04f 0120 	mov.w	r1, #32
 8004e9c:	f381 8811 	msr	BASEPRI, r1
 8004ea0:	617b      	str	r3, [r7, #20]
 8004ea2:	480b      	ldr	r0, [pc, #44]	; (8004ed0 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8004ea4:	f7fe fe82 	bl	8003bac <_PreparePacket>
 8004ea8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004eaa:	2280      	movs	r2, #128	; 0x80
 8004eac:	6879      	ldr	r1, [r7, #4]
 8004eae:	6938      	ldr	r0, [r7, #16]
 8004eb0:	f7fe fe2c 	bl	8003b0c <_EncodeStr>
 8004eb4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8004eb6:	220e      	movs	r2, #14
 8004eb8:	68f9      	ldr	r1, [r7, #12]
 8004eba:	6938      	ldr	r0, [r7, #16]
 8004ebc:	f7fe ff64 	bl	8003d88 <_SendPacket>
  RECORD_END();
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	f383 8811 	msr	BASEPRI, r3
}
 8004ec6:	bf00      	nop
 8004ec8:	3718      	adds	r7, #24
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	200142ac 	.word	0x200142ac

08004ed4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004ed4:	b590      	push	{r4, r7, lr}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004eda:	4b15      	ldr	r3, [pc, #84]	; (8004f30 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d01a      	beq.n	8004f18 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8004ee2:	4b13      	ldr	r3, [pc, #76]	; (8004f30 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d015      	beq.n	8004f18 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004eec:	4b10      	ldr	r3, [pc, #64]	; (8004f30 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004eee:	6a1b      	ldr	r3, [r3, #32]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4798      	blx	r3
 8004ef4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004ef8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004efa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004efe:	f04f 0200 	mov.w	r2, #0
 8004f02:	f04f 0300 	mov.w	r3, #0
 8004f06:	000a      	movs	r2, r1
 8004f08:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	4621      	mov	r1, r4
 8004f10:	200d      	movs	r0, #13
 8004f12:	f7ff fcef 	bl	80048f4 <SEGGER_SYSVIEW_RecordU32x2>
 8004f16:	e006      	b.n	8004f26 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004f18:	4b06      	ldr	r3, [pc, #24]	; (8004f34 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	200c      	movs	r0, #12
 8004f20:	f7ff fcac 	bl	800487c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004f24:	bf00      	nop
 8004f26:	bf00      	nop
 8004f28:	370c      	adds	r7, #12
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd90      	pop	{r4, r7, pc}
 8004f2e:	bf00      	nop
 8004f30:	2001427c 	.word	0x2001427c
 8004f34:	e0001004 	.word	0xe0001004

08004f38 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b086      	sub	sp, #24
 8004f3c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004f3e:	f3ef 8311 	mrs	r3, BASEPRI
 8004f42:	f04f 0120 	mov.w	r1, #32
 8004f46:	f381 8811 	msr	BASEPRI, r1
 8004f4a:	60fb      	str	r3, [r7, #12]
 8004f4c:	4819      	ldr	r0, [pc, #100]	; (8004fb4 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004f4e:	f7fe fe2d 	bl	8003bac <_PreparePacket>
 8004f52:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004f58:	4b17      	ldr	r3, [pc, #92]	; (8004fb8 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f60:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	617b      	str	r3, [r7, #20]
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	613b      	str	r3, [r7, #16]
 8004f6a:	e00b      	b.n	8004f84 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	b2da      	uxtb	r2, r3
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	1c59      	adds	r1, r3, #1
 8004f74:	6179      	str	r1, [r7, #20]
 8004f76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f7a:	b2d2      	uxtb	r2, r2
 8004f7c:	701a      	strb	r2, [r3, #0]
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	09db      	lsrs	r3, r3, #7
 8004f82:	613b      	str	r3, [r7, #16]
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	2b7f      	cmp	r3, #127	; 0x7f
 8004f88:	d8f0      	bhi.n	8004f6c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	1c5a      	adds	r2, r3, #1
 8004f8e:	617a      	str	r2, [r7, #20]
 8004f90:	693a      	ldr	r2, [r7, #16]
 8004f92:	b2d2      	uxtb	r2, r2
 8004f94:	701a      	strb	r2, [r3, #0]
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8004f9a:	2202      	movs	r2, #2
 8004f9c:	6879      	ldr	r1, [r7, #4]
 8004f9e:	68b8      	ldr	r0, [r7, #8]
 8004fa0:	f7fe fef2 	bl	8003d88 <_SendPacket>
  RECORD_END();
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f383 8811 	msr	BASEPRI, r3
}
 8004faa:	bf00      	nop
 8004fac:	3718      	adds	r7, #24
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	200142ac 	.word	0x200142ac
 8004fb8:	e000ed04 	.word	0xe000ed04

08004fbc <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004fc2:	f3ef 8311 	mrs	r3, BASEPRI
 8004fc6:	f04f 0120 	mov.w	r1, #32
 8004fca:	f381 8811 	msr	BASEPRI, r1
 8004fce:	607b      	str	r3, [r7, #4]
 8004fd0:	4807      	ldr	r0, [pc, #28]	; (8004ff0 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8004fd2:	f7fe fdeb 	bl	8003bac <_PreparePacket>
 8004fd6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004fd8:	2203      	movs	r2, #3
 8004fda:	6839      	ldr	r1, [r7, #0]
 8004fdc:	6838      	ldr	r0, [r7, #0]
 8004fde:	f7fe fed3 	bl	8003d88 <_SendPacket>
  RECORD_END();
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f383 8811 	msr	BASEPRI, r3
}
 8004fe8:	bf00      	nop
 8004fea:	3708      	adds	r7, #8
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	200142ac 	.word	0x200142ac

08004ff4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004ffa:	f3ef 8311 	mrs	r3, BASEPRI
 8004ffe:	f04f 0120 	mov.w	r1, #32
 8005002:	f381 8811 	msr	BASEPRI, r1
 8005006:	607b      	str	r3, [r7, #4]
 8005008:	4807      	ldr	r0, [pc, #28]	; (8005028 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800500a:	f7fe fdcf 	bl	8003bac <_PreparePacket>
 800500e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005010:	2212      	movs	r2, #18
 8005012:	6839      	ldr	r1, [r7, #0]
 8005014:	6838      	ldr	r0, [r7, #0]
 8005016:	f7fe feb7 	bl	8003d88 <_SendPacket>
  RECORD_END();
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f383 8811 	msr	BASEPRI, r3
}
 8005020:	bf00      	nop
 8005022:	3708      	adds	r7, #8
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}
 8005028:	200142ac 	.word	0x200142ac

0800502c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800502c:	b580      	push	{r7, lr}
 800502e:	b082      	sub	sp, #8
 8005030:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005032:	f3ef 8311 	mrs	r3, BASEPRI
 8005036:	f04f 0120 	mov.w	r1, #32
 800503a:	f381 8811 	msr	BASEPRI, r1
 800503e:	607b      	str	r3, [r7, #4]
 8005040:	4807      	ldr	r0, [pc, #28]	; (8005060 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005042:	f7fe fdb3 	bl	8003bac <_PreparePacket>
 8005046:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005048:	2211      	movs	r2, #17
 800504a:	6839      	ldr	r1, [r7, #0]
 800504c:	6838      	ldr	r0, [r7, #0]
 800504e:	f7fe fe9b 	bl	8003d88 <_SendPacket>
  RECORD_END();
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f383 8811 	msr	BASEPRI, r3
}
 8005058:	bf00      	nop
 800505a:	3708      	adds	r7, #8
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}
 8005060:	200142ac 	.word	0x200142ac

08005064 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005064:	b580      	push	{r7, lr}
 8005066:	b088      	sub	sp, #32
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800506c:	f3ef 8311 	mrs	r3, BASEPRI
 8005070:	f04f 0120 	mov.w	r1, #32
 8005074:	f381 8811 	msr	BASEPRI, r1
 8005078:	617b      	str	r3, [r7, #20]
 800507a:	4819      	ldr	r0, [pc, #100]	; (80050e0 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800507c:	f7fe fd96 	bl	8003bac <_PreparePacket>
 8005080:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005086:	4b17      	ldr	r3, [pc, #92]	; (80050e4 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	61fb      	str	r3, [r7, #28]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	61bb      	str	r3, [r7, #24]
 8005098:	e00b      	b.n	80050b2 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	b2da      	uxtb	r2, r3
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	1c59      	adds	r1, r3, #1
 80050a2:	61f9      	str	r1, [r7, #28]
 80050a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050a8:	b2d2      	uxtb	r2, r2
 80050aa:	701a      	strb	r2, [r3, #0]
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	09db      	lsrs	r3, r3, #7
 80050b0:	61bb      	str	r3, [r7, #24]
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	2b7f      	cmp	r3, #127	; 0x7f
 80050b6:	d8f0      	bhi.n	800509a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	1c5a      	adds	r2, r3, #1
 80050bc:	61fa      	str	r2, [r7, #28]
 80050be:	69ba      	ldr	r2, [r7, #24]
 80050c0:	b2d2      	uxtb	r2, r2
 80050c2:	701a      	strb	r2, [r3, #0]
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80050c8:	2208      	movs	r2, #8
 80050ca:	68f9      	ldr	r1, [r7, #12]
 80050cc:	6938      	ldr	r0, [r7, #16]
 80050ce:	f7fe fe5b 	bl	8003d88 <_SendPacket>
  RECORD_END();
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	f383 8811 	msr	BASEPRI, r3
}
 80050d8:	bf00      	nop
 80050da:	3720      	adds	r7, #32
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	200142ac 	.word	0x200142ac
 80050e4:	2001427c 	.word	0x2001427c

080050e8 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b088      	sub	sp, #32
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80050f0:	f3ef 8311 	mrs	r3, BASEPRI
 80050f4:	f04f 0120 	mov.w	r1, #32
 80050f8:	f381 8811 	msr	BASEPRI, r1
 80050fc:	617b      	str	r3, [r7, #20]
 80050fe:	4819      	ldr	r0, [pc, #100]	; (8005164 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005100:	f7fe fd54 	bl	8003bac <_PreparePacket>
 8005104:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800510a:	4b17      	ldr	r3, [pc, #92]	; (8005168 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	61fb      	str	r3, [r7, #28]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	61bb      	str	r3, [r7, #24]
 800511c:	e00b      	b.n	8005136 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	b2da      	uxtb	r2, r3
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	1c59      	adds	r1, r3, #1
 8005126:	61f9      	str	r1, [r7, #28]
 8005128:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800512c:	b2d2      	uxtb	r2, r2
 800512e:	701a      	strb	r2, [r3, #0]
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	09db      	lsrs	r3, r3, #7
 8005134:	61bb      	str	r3, [r7, #24]
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	2b7f      	cmp	r3, #127	; 0x7f
 800513a:	d8f0      	bhi.n	800511e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	1c5a      	adds	r2, r3, #1
 8005140:	61fa      	str	r2, [r7, #28]
 8005142:	69ba      	ldr	r2, [r7, #24]
 8005144:	b2d2      	uxtb	r2, r2
 8005146:	701a      	strb	r2, [r3, #0]
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800514c:	2204      	movs	r2, #4
 800514e:	68f9      	ldr	r1, [r7, #12]
 8005150:	6938      	ldr	r0, [r7, #16]
 8005152:	f7fe fe19 	bl	8003d88 <_SendPacket>
  RECORD_END();
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	f383 8811 	msr	BASEPRI, r3
}
 800515c:	bf00      	nop
 800515e:	3720      	adds	r7, #32
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}
 8005164:	200142ac 	.word	0x200142ac
 8005168:	2001427c 	.word	0x2001427c

0800516c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800516c:	b580      	push	{r7, lr}
 800516e:	b088      	sub	sp, #32
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005174:	f3ef 8311 	mrs	r3, BASEPRI
 8005178:	f04f 0120 	mov.w	r1, #32
 800517c:	f381 8811 	msr	BASEPRI, r1
 8005180:	617b      	str	r3, [r7, #20]
 8005182:	4819      	ldr	r0, [pc, #100]	; (80051e8 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005184:	f7fe fd12 	bl	8003bac <_PreparePacket>
 8005188:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800518e:	4b17      	ldr	r3, [pc, #92]	; (80051ec <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	61fb      	str	r3, [r7, #28]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	61bb      	str	r3, [r7, #24]
 80051a0:	e00b      	b.n	80051ba <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	b2da      	uxtb	r2, r3
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	1c59      	adds	r1, r3, #1
 80051aa:	61f9      	str	r1, [r7, #28]
 80051ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051b0:	b2d2      	uxtb	r2, r2
 80051b2:	701a      	strb	r2, [r3, #0]
 80051b4:	69bb      	ldr	r3, [r7, #24]
 80051b6:	09db      	lsrs	r3, r3, #7
 80051b8:	61bb      	str	r3, [r7, #24]
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	2b7f      	cmp	r3, #127	; 0x7f
 80051be:	d8f0      	bhi.n	80051a2 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	1c5a      	adds	r2, r3, #1
 80051c4:	61fa      	str	r2, [r7, #28]
 80051c6:	69ba      	ldr	r2, [r7, #24]
 80051c8:	b2d2      	uxtb	r2, r2
 80051ca:	701a      	strb	r2, [r3, #0]
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80051d0:	2206      	movs	r2, #6
 80051d2:	68f9      	ldr	r1, [r7, #12]
 80051d4:	6938      	ldr	r0, [r7, #16]
 80051d6:	f7fe fdd7 	bl	8003d88 <_SendPacket>
  RECORD_END();
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	f383 8811 	msr	BASEPRI, r3
}
 80051e0:	bf00      	nop
 80051e2:	3720      	adds	r7, #32
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	200142ac 	.word	0x200142ac
 80051ec:	2001427c 	.word	0x2001427c

080051f0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b08c      	sub	sp, #48	; 0x30
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	4603      	mov	r3, r0
 80051f8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80051fa:	4b3b      	ldr	r3, [pc, #236]	; (80052e8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d06d      	beq.n	80052de <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8005202:	4b39      	ldr	r3, [pc, #228]	; (80052e8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005208:	2300      	movs	r3, #0
 800520a:	62bb      	str	r3, [r7, #40]	; 0x28
 800520c:	e008      	b.n	8005220 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800520e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8005214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005216:	2b00      	cmp	r3, #0
 8005218:	d007      	beq.n	800522a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800521a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800521c:	3301      	adds	r3, #1
 800521e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005220:	79fb      	ldrb	r3, [r7, #7]
 8005222:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005224:	429a      	cmp	r2, r3
 8005226:	d3f2      	bcc.n	800520e <SEGGER_SYSVIEW_SendModule+0x1e>
 8005228:	e000      	b.n	800522c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800522a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800522c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800522e:	2b00      	cmp	r3, #0
 8005230:	d055      	beq.n	80052de <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005232:	f3ef 8311 	mrs	r3, BASEPRI
 8005236:	f04f 0120 	mov.w	r1, #32
 800523a:	f381 8811 	msr	BASEPRI, r1
 800523e:	617b      	str	r3, [r7, #20]
 8005240:	482a      	ldr	r0, [pc, #168]	; (80052ec <SEGGER_SYSVIEW_SendModule+0xfc>)
 8005242:	f7fe fcb3 	bl	8003bac <_PreparePacket>
 8005246:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	627b      	str	r3, [r7, #36]	; 0x24
 8005250:	79fb      	ldrb	r3, [r7, #7]
 8005252:	623b      	str	r3, [r7, #32]
 8005254:	e00b      	b.n	800526e <SEGGER_SYSVIEW_SendModule+0x7e>
 8005256:	6a3b      	ldr	r3, [r7, #32]
 8005258:	b2da      	uxtb	r2, r3
 800525a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525c:	1c59      	adds	r1, r3, #1
 800525e:	6279      	str	r1, [r7, #36]	; 0x24
 8005260:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005264:	b2d2      	uxtb	r2, r2
 8005266:	701a      	strb	r2, [r3, #0]
 8005268:	6a3b      	ldr	r3, [r7, #32]
 800526a:	09db      	lsrs	r3, r3, #7
 800526c:	623b      	str	r3, [r7, #32]
 800526e:	6a3b      	ldr	r3, [r7, #32]
 8005270:	2b7f      	cmp	r3, #127	; 0x7f
 8005272:	d8f0      	bhi.n	8005256 <SEGGER_SYSVIEW_SendModule+0x66>
 8005274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005276:	1c5a      	adds	r2, r3, #1
 8005278:	627a      	str	r2, [r7, #36]	; 0x24
 800527a:	6a3a      	ldr	r2, [r7, #32]
 800527c:	b2d2      	uxtb	r2, r2
 800527e:	701a      	strb	r2, [r3, #0]
 8005280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005282:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	61fb      	str	r3, [r7, #28]
 8005288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	61bb      	str	r3, [r7, #24]
 800528e:	e00b      	b.n	80052a8 <SEGGER_SYSVIEW_SendModule+0xb8>
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	b2da      	uxtb	r2, r3
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	1c59      	adds	r1, r3, #1
 8005298:	61f9      	str	r1, [r7, #28]
 800529a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800529e:	b2d2      	uxtb	r2, r2
 80052a0:	701a      	strb	r2, [r3, #0]
 80052a2:	69bb      	ldr	r3, [r7, #24]
 80052a4:	09db      	lsrs	r3, r3, #7
 80052a6:	61bb      	str	r3, [r7, #24]
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	2b7f      	cmp	r3, #127	; 0x7f
 80052ac:	d8f0      	bhi.n	8005290 <SEGGER_SYSVIEW_SendModule+0xa0>
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	1c5a      	adds	r2, r3, #1
 80052b2:	61fa      	str	r2, [r7, #28]
 80052b4:	69ba      	ldr	r2, [r7, #24]
 80052b6:	b2d2      	uxtb	r2, r2
 80052b8:	701a      	strb	r2, [r3, #0]
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80052be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2280      	movs	r2, #128	; 0x80
 80052c4:	4619      	mov	r1, r3
 80052c6:	68f8      	ldr	r0, [r7, #12]
 80052c8:	f7fe fc20 	bl	8003b0c <_EncodeStr>
 80052cc:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80052ce:	2216      	movs	r2, #22
 80052d0:	68f9      	ldr	r1, [r7, #12]
 80052d2:	6938      	ldr	r0, [r7, #16]
 80052d4:	f7fe fd58 	bl	8003d88 <_SendPacket>
      RECORD_END();
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80052de:	bf00      	nop
 80052e0:	3730      	adds	r7, #48	; 0x30
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	200142a4 	.word	0x200142a4
 80052ec:	200142ac 	.word	0x200142ac

080052f0 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b082      	sub	sp, #8
 80052f4:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80052f6:	4b0c      	ldr	r3, [pc, #48]	; (8005328 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00f      	beq.n	800531e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80052fe:	4b0a      	ldr	r3, [pc, #40]	; (8005328 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d002      	beq.n	8005312 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d1f2      	bne.n	8005304 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800531e:	bf00      	nop
 8005320:	3708      	adds	r7, #8
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop
 8005328:	200142a4 	.word	0x200142a4

0800532c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800532c:	b580      	push	{r7, lr}
 800532e:	b086      	sub	sp, #24
 8005330:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005332:	f3ef 8311 	mrs	r3, BASEPRI
 8005336:	f04f 0120 	mov.w	r1, #32
 800533a:	f381 8811 	msr	BASEPRI, r1
 800533e:	60fb      	str	r3, [r7, #12]
 8005340:	4817      	ldr	r0, [pc, #92]	; (80053a0 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005342:	f7fe fc33 	bl	8003bac <_PreparePacket>
 8005346:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	617b      	str	r3, [r7, #20]
 8005350:	4b14      	ldr	r3, [pc, #80]	; (80053a4 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	613b      	str	r3, [r7, #16]
 8005356:	e00b      	b.n	8005370 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	b2da      	uxtb	r2, r3
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	1c59      	adds	r1, r3, #1
 8005360:	6179      	str	r1, [r7, #20]
 8005362:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005366:	b2d2      	uxtb	r2, r2
 8005368:	701a      	strb	r2, [r3, #0]
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	09db      	lsrs	r3, r3, #7
 800536e:	613b      	str	r3, [r7, #16]
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	2b7f      	cmp	r3, #127	; 0x7f
 8005374:	d8f0      	bhi.n	8005358 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	1c5a      	adds	r2, r3, #1
 800537a:	617a      	str	r2, [r7, #20]
 800537c:	693a      	ldr	r2, [r7, #16]
 800537e:	b2d2      	uxtb	r2, r2
 8005380:	701a      	strb	r2, [r3, #0]
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005386:	221b      	movs	r2, #27
 8005388:	6879      	ldr	r1, [r7, #4]
 800538a:	68b8      	ldr	r0, [r7, #8]
 800538c:	f7fe fcfc 	bl	8003d88 <_SendPacket>
  RECORD_END();
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f383 8811 	msr	BASEPRI, r3
}
 8005396:	bf00      	nop
 8005398:	3718      	adds	r7, #24
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	200142ac 	.word	0x200142ac
 80053a4:	200142a8 	.word	0x200142a8

080053a8 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80053a8:	b40f      	push	{r0, r1, r2, r3}
 80053aa:	b580      	push	{r7, lr}
 80053ac:	b082      	sub	sp, #8
 80053ae:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80053b0:	f107 0314 	add.w	r3, r7, #20
 80053b4:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80053b6:	1d3b      	adds	r3, r7, #4
 80053b8:	461a      	mov	r2, r3
 80053ba:	2100      	movs	r1, #0
 80053bc:	6938      	ldr	r0, [r7, #16]
 80053be:	f7fe fff3 	bl	80043a8 <_VPrintTarget>
  va_end(ParamList);
}
 80053c2:	bf00      	nop
 80053c4:	3708      	adds	r7, #8
 80053c6:	46bd      	mov	sp, r7
 80053c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053cc:	b004      	add	sp, #16
 80053ce:	4770      	bx	lr

080053d0 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b08a      	sub	sp, #40	; 0x28
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80053d8:	f3ef 8311 	mrs	r3, BASEPRI
 80053dc:	f04f 0120 	mov.w	r1, #32
 80053e0:	f381 8811 	msr	BASEPRI, r1
 80053e4:	617b      	str	r3, [r7, #20]
 80053e6:	4827      	ldr	r0, [pc, #156]	; (8005484 <SEGGER_SYSVIEW_Warn+0xb4>)
 80053e8:	f7fe fbe0 	bl	8003bac <_PreparePacket>
 80053ec:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80053ee:	2280      	movs	r2, #128	; 0x80
 80053f0:	6879      	ldr	r1, [r7, #4]
 80053f2:	6938      	ldr	r0, [r7, #16]
 80053f4:	f7fe fb8a 	bl	8003b0c <_EncodeStr>
 80053f8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	627b      	str	r3, [r7, #36]	; 0x24
 80053fe:	2301      	movs	r3, #1
 8005400:	623b      	str	r3, [r7, #32]
 8005402:	e00b      	b.n	800541c <SEGGER_SYSVIEW_Warn+0x4c>
 8005404:	6a3b      	ldr	r3, [r7, #32]
 8005406:	b2da      	uxtb	r2, r3
 8005408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540a:	1c59      	adds	r1, r3, #1
 800540c:	6279      	str	r1, [r7, #36]	; 0x24
 800540e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005412:	b2d2      	uxtb	r2, r2
 8005414:	701a      	strb	r2, [r3, #0]
 8005416:	6a3b      	ldr	r3, [r7, #32]
 8005418:	09db      	lsrs	r3, r3, #7
 800541a:	623b      	str	r3, [r7, #32]
 800541c:	6a3b      	ldr	r3, [r7, #32]
 800541e:	2b7f      	cmp	r3, #127	; 0x7f
 8005420:	d8f0      	bhi.n	8005404 <SEGGER_SYSVIEW_Warn+0x34>
 8005422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005424:	1c5a      	adds	r2, r3, #1
 8005426:	627a      	str	r2, [r7, #36]	; 0x24
 8005428:	6a3a      	ldr	r2, [r7, #32]
 800542a:	b2d2      	uxtb	r2, r2
 800542c:	701a      	strb	r2, [r3, #0]
 800542e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005430:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	61fb      	str	r3, [r7, #28]
 8005436:	2300      	movs	r3, #0
 8005438:	61bb      	str	r3, [r7, #24]
 800543a:	e00b      	b.n	8005454 <SEGGER_SYSVIEW_Warn+0x84>
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	b2da      	uxtb	r2, r3
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	1c59      	adds	r1, r3, #1
 8005444:	61f9      	str	r1, [r7, #28]
 8005446:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800544a:	b2d2      	uxtb	r2, r2
 800544c:	701a      	strb	r2, [r3, #0]
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	09db      	lsrs	r3, r3, #7
 8005452:	61bb      	str	r3, [r7, #24]
 8005454:	69bb      	ldr	r3, [r7, #24]
 8005456:	2b7f      	cmp	r3, #127	; 0x7f
 8005458:	d8f0      	bhi.n	800543c <SEGGER_SYSVIEW_Warn+0x6c>
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	1c5a      	adds	r2, r3, #1
 800545e:	61fa      	str	r2, [r7, #28]
 8005460:	69ba      	ldr	r2, [r7, #24]
 8005462:	b2d2      	uxtb	r2, r2
 8005464:	701a      	strb	r2, [r3, #0]
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800546a:	221a      	movs	r2, #26
 800546c:	68f9      	ldr	r1, [r7, #12]
 800546e:	6938      	ldr	r0, [r7, #16]
 8005470:	f7fe fc8a 	bl	8003d88 <_SendPacket>
  RECORD_END();
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	f383 8811 	msr	BASEPRI, r3
}
 800547a:	bf00      	nop
 800547c:	3728      	adds	r7, #40	; 0x28
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	200142ac 	.word	0x200142ac

08005488 <__libc_init_array>:
 8005488:	b570      	push	{r4, r5, r6, lr}
 800548a:	4d0d      	ldr	r5, [pc, #52]	; (80054c0 <__libc_init_array+0x38>)
 800548c:	4c0d      	ldr	r4, [pc, #52]	; (80054c4 <__libc_init_array+0x3c>)
 800548e:	1b64      	subs	r4, r4, r5
 8005490:	10a4      	asrs	r4, r4, #2
 8005492:	2600      	movs	r6, #0
 8005494:	42a6      	cmp	r6, r4
 8005496:	d109      	bne.n	80054ac <__libc_init_array+0x24>
 8005498:	4d0b      	ldr	r5, [pc, #44]	; (80054c8 <__libc_init_array+0x40>)
 800549a:	4c0c      	ldr	r4, [pc, #48]	; (80054cc <__libc_init_array+0x44>)
 800549c:	f000 fc6a 	bl	8005d74 <_init>
 80054a0:	1b64      	subs	r4, r4, r5
 80054a2:	10a4      	asrs	r4, r4, #2
 80054a4:	2600      	movs	r6, #0
 80054a6:	42a6      	cmp	r6, r4
 80054a8:	d105      	bne.n	80054b6 <__libc_init_array+0x2e>
 80054aa:	bd70      	pop	{r4, r5, r6, pc}
 80054ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80054b0:	4798      	blx	r3
 80054b2:	3601      	adds	r6, #1
 80054b4:	e7ee      	b.n	8005494 <__libc_init_array+0xc>
 80054b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80054ba:	4798      	blx	r3
 80054bc:	3601      	adds	r6, #1
 80054be:	e7f2      	b.n	80054a6 <__libc_init_array+0x1e>
 80054c0:	08005f24 	.word	0x08005f24
 80054c4:	08005f24 	.word	0x08005f24
 80054c8:	08005f24 	.word	0x08005f24
 80054cc:	08005f28 	.word	0x08005f28

080054d0 <memcmp>:
 80054d0:	b530      	push	{r4, r5, lr}
 80054d2:	3901      	subs	r1, #1
 80054d4:	2400      	movs	r4, #0
 80054d6:	42a2      	cmp	r2, r4
 80054d8:	d101      	bne.n	80054de <memcmp+0xe>
 80054da:	2000      	movs	r0, #0
 80054dc:	e005      	b.n	80054ea <memcmp+0x1a>
 80054de:	5d03      	ldrb	r3, [r0, r4]
 80054e0:	3401      	adds	r4, #1
 80054e2:	5d0d      	ldrb	r5, [r1, r4]
 80054e4:	42ab      	cmp	r3, r5
 80054e6:	d0f6      	beq.n	80054d6 <memcmp+0x6>
 80054e8:	1b58      	subs	r0, r3, r5
 80054ea:	bd30      	pop	{r4, r5, pc}

080054ec <memcpy>:
 80054ec:	440a      	add	r2, r1
 80054ee:	4291      	cmp	r1, r2
 80054f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80054f4:	d100      	bne.n	80054f8 <memcpy+0xc>
 80054f6:	4770      	bx	lr
 80054f8:	b510      	push	{r4, lr}
 80054fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005502:	4291      	cmp	r1, r2
 8005504:	d1f9      	bne.n	80054fa <memcpy+0xe>
 8005506:	bd10      	pop	{r4, pc}

08005508 <memset>:
 8005508:	4402      	add	r2, r0
 800550a:	4603      	mov	r3, r0
 800550c:	4293      	cmp	r3, r2
 800550e:	d100      	bne.n	8005512 <memset+0xa>
 8005510:	4770      	bx	lr
 8005512:	f803 1b01 	strb.w	r1, [r3], #1
 8005516:	e7f9      	b.n	800550c <memset+0x4>

08005518 <siprintf>:
 8005518:	b40e      	push	{r1, r2, r3}
 800551a:	b500      	push	{lr}
 800551c:	b09c      	sub	sp, #112	; 0x70
 800551e:	ab1d      	add	r3, sp, #116	; 0x74
 8005520:	9002      	str	r0, [sp, #8]
 8005522:	9006      	str	r0, [sp, #24]
 8005524:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005528:	4809      	ldr	r0, [pc, #36]	; (8005550 <siprintf+0x38>)
 800552a:	9107      	str	r1, [sp, #28]
 800552c:	9104      	str	r1, [sp, #16]
 800552e:	4909      	ldr	r1, [pc, #36]	; (8005554 <siprintf+0x3c>)
 8005530:	f853 2b04 	ldr.w	r2, [r3], #4
 8005534:	9105      	str	r1, [sp, #20]
 8005536:	6800      	ldr	r0, [r0, #0]
 8005538:	9301      	str	r3, [sp, #4]
 800553a:	a902      	add	r1, sp, #8
 800553c:	f000 f868 	bl	8005610 <_svfiprintf_r>
 8005540:	9b02      	ldr	r3, [sp, #8]
 8005542:	2200      	movs	r2, #0
 8005544:	701a      	strb	r2, [r3, #0]
 8005546:	b01c      	add	sp, #112	; 0x70
 8005548:	f85d eb04 	ldr.w	lr, [sp], #4
 800554c:	b003      	add	sp, #12
 800554e:	4770      	bx	lr
 8005550:	20000014 	.word	0x20000014
 8005554:	ffff0208 	.word	0xffff0208

08005558 <__ssputs_r>:
 8005558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800555c:	688e      	ldr	r6, [r1, #8]
 800555e:	429e      	cmp	r6, r3
 8005560:	4682      	mov	sl, r0
 8005562:	460c      	mov	r4, r1
 8005564:	4690      	mov	r8, r2
 8005566:	461f      	mov	r7, r3
 8005568:	d838      	bhi.n	80055dc <__ssputs_r+0x84>
 800556a:	898a      	ldrh	r2, [r1, #12]
 800556c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005570:	d032      	beq.n	80055d8 <__ssputs_r+0x80>
 8005572:	6825      	ldr	r5, [r4, #0]
 8005574:	6909      	ldr	r1, [r1, #16]
 8005576:	eba5 0901 	sub.w	r9, r5, r1
 800557a:	6965      	ldr	r5, [r4, #20]
 800557c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005580:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005584:	3301      	adds	r3, #1
 8005586:	444b      	add	r3, r9
 8005588:	106d      	asrs	r5, r5, #1
 800558a:	429d      	cmp	r5, r3
 800558c:	bf38      	it	cc
 800558e:	461d      	movcc	r5, r3
 8005590:	0553      	lsls	r3, r2, #21
 8005592:	d531      	bpl.n	80055f8 <__ssputs_r+0xa0>
 8005594:	4629      	mov	r1, r5
 8005596:	f000 fb39 	bl	8005c0c <_malloc_r>
 800559a:	4606      	mov	r6, r0
 800559c:	b950      	cbnz	r0, 80055b4 <__ssputs_r+0x5c>
 800559e:	230c      	movs	r3, #12
 80055a0:	f8ca 3000 	str.w	r3, [sl]
 80055a4:	89a3      	ldrh	r3, [r4, #12]
 80055a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055aa:	81a3      	strh	r3, [r4, #12]
 80055ac:	f04f 30ff 	mov.w	r0, #4294967295
 80055b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055b4:	6921      	ldr	r1, [r4, #16]
 80055b6:	464a      	mov	r2, r9
 80055b8:	f7ff ff98 	bl	80054ec <memcpy>
 80055bc:	89a3      	ldrh	r3, [r4, #12]
 80055be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80055c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055c6:	81a3      	strh	r3, [r4, #12]
 80055c8:	6126      	str	r6, [r4, #16]
 80055ca:	6165      	str	r5, [r4, #20]
 80055cc:	444e      	add	r6, r9
 80055ce:	eba5 0509 	sub.w	r5, r5, r9
 80055d2:	6026      	str	r6, [r4, #0]
 80055d4:	60a5      	str	r5, [r4, #8]
 80055d6:	463e      	mov	r6, r7
 80055d8:	42be      	cmp	r6, r7
 80055da:	d900      	bls.n	80055de <__ssputs_r+0x86>
 80055dc:	463e      	mov	r6, r7
 80055de:	4632      	mov	r2, r6
 80055e0:	6820      	ldr	r0, [r4, #0]
 80055e2:	4641      	mov	r1, r8
 80055e4:	f000 faa8 	bl	8005b38 <memmove>
 80055e8:	68a3      	ldr	r3, [r4, #8]
 80055ea:	6822      	ldr	r2, [r4, #0]
 80055ec:	1b9b      	subs	r3, r3, r6
 80055ee:	4432      	add	r2, r6
 80055f0:	60a3      	str	r3, [r4, #8]
 80055f2:	6022      	str	r2, [r4, #0]
 80055f4:	2000      	movs	r0, #0
 80055f6:	e7db      	b.n	80055b0 <__ssputs_r+0x58>
 80055f8:	462a      	mov	r2, r5
 80055fa:	f000 fb61 	bl	8005cc0 <_realloc_r>
 80055fe:	4606      	mov	r6, r0
 8005600:	2800      	cmp	r0, #0
 8005602:	d1e1      	bne.n	80055c8 <__ssputs_r+0x70>
 8005604:	6921      	ldr	r1, [r4, #16]
 8005606:	4650      	mov	r0, sl
 8005608:	f000 fab0 	bl	8005b6c <_free_r>
 800560c:	e7c7      	b.n	800559e <__ssputs_r+0x46>
	...

08005610 <_svfiprintf_r>:
 8005610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005614:	4698      	mov	r8, r3
 8005616:	898b      	ldrh	r3, [r1, #12]
 8005618:	061b      	lsls	r3, r3, #24
 800561a:	b09d      	sub	sp, #116	; 0x74
 800561c:	4607      	mov	r7, r0
 800561e:	460d      	mov	r5, r1
 8005620:	4614      	mov	r4, r2
 8005622:	d50e      	bpl.n	8005642 <_svfiprintf_r+0x32>
 8005624:	690b      	ldr	r3, [r1, #16]
 8005626:	b963      	cbnz	r3, 8005642 <_svfiprintf_r+0x32>
 8005628:	2140      	movs	r1, #64	; 0x40
 800562a:	f000 faef 	bl	8005c0c <_malloc_r>
 800562e:	6028      	str	r0, [r5, #0]
 8005630:	6128      	str	r0, [r5, #16]
 8005632:	b920      	cbnz	r0, 800563e <_svfiprintf_r+0x2e>
 8005634:	230c      	movs	r3, #12
 8005636:	603b      	str	r3, [r7, #0]
 8005638:	f04f 30ff 	mov.w	r0, #4294967295
 800563c:	e0d1      	b.n	80057e2 <_svfiprintf_r+0x1d2>
 800563e:	2340      	movs	r3, #64	; 0x40
 8005640:	616b      	str	r3, [r5, #20]
 8005642:	2300      	movs	r3, #0
 8005644:	9309      	str	r3, [sp, #36]	; 0x24
 8005646:	2320      	movs	r3, #32
 8005648:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800564c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005650:	2330      	movs	r3, #48	; 0x30
 8005652:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80057fc <_svfiprintf_r+0x1ec>
 8005656:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800565a:	f04f 0901 	mov.w	r9, #1
 800565e:	4623      	mov	r3, r4
 8005660:	469a      	mov	sl, r3
 8005662:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005666:	b10a      	cbz	r2, 800566c <_svfiprintf_r+0x5c>
 8005668:	2a25      	cmp	r2, #37	; 0x25
 800566a:	d1f9      	bne.n	8005660 <_svfiprintf_r+0x50>
 800566c:	ebba 0b04 	subs.w	fp, sl, r4
 8005670:	d00b      	beq.n	800568a <_svfiprintf_r+0x7a>
 8005672:	465b      	mov	r3, fp
 8005674:	4622      	mov	r2, r4
 8005676:	4629      	mov	r1, r5
 8005678:	4638      	mov	r0, r7
 800567a:	f7ff ff6d 	bl	8005558 <__ssputs_r>
 800567e:	3001      	adds	r0, #1
 8005680:	f000 80aa 	beq.w	80057d8 <_svfiprintf_r+0x1c8>
 8005684:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005686:	445a      	add	r2, fp
 8005688:	9209      	str	r2, [sp, #36]	; 0x24
 800568a:	f89a 3000 	ldrb.w	r3, [sl]
 800568e:	2b00      	cmp	r3, #0
 8005690:	f000 80a2 	beq.w	80057d8 <_svfiprintf_r+0x1c8>
 8005694:	2300      	movs	r3, #0
 8005696:	f04f 32ff 	mov.w	r2, #4294967295
 800569a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800569e:	f10a 0a01 	add.w	sl, sl, #1
 80056a2:	9304      	str	r3, [sp, #16]
 80056a4:	9307      	str	r3, [sp, #28]
 80056a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80056aa:	931a      	str	r3, [sp, #104]	; 0x68
 80056ac:	4654      	mov	r4, sl
 80056ae:	2205      	movs	r2, #5
 80056b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056b4:	4851      	ldr	r0, [pc, #324]	; (80057fc <_svfiprintf_r+0x1ec>)
 80056b6:	f7fa fddb 	bl	8000270 <memchr>
 80056ba:	9a04      	ldr	r2, [sp, #16]
 80056bc:	b9d8      	cbnz	r0, 80056f6 <_svfiprintf_r+0xe6>
 80056be:	06d0      	lsls	r0, r2, #27
 80056c0:	bf44      	itt	mi
 80056c2:	2320      	movmi	r3, #32
 80056c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056c8:	0711      	lsls	r1, r2, #28
 80056ca:	bf44      	itt	mi
 80056cc:	232b      	movmi	r3, #43	; 0x2b
 80056ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056d2:	f89a 3000 	ldrb.w	r3, [sl]
 80056d6:	2b2a      	cmp	r3, #42	; 0x2a
 80056d8:	d015      	beq.n	8005706 <_svfiprintf_r+0xf6>
 80056da:	9a07      	ldr	r2, [sp, #28]
 80056dc:	4654      	mov	r4, sl
 80056de:	2000      	movs	r0, #0
 80056e0:	f04f 0c0a 	mov.w	ip, #10
 80056e4:	4621      	mov	r1, r4
 80056e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056ea:	3b30      	subs	r3, #48	; 0x30
 80056ec:	2b09      	cmp	r3, #9
 80056ee:	d94e      	bls.n	800578e <_svfiprintf_r+0x17e>
 80056f0:	b1b0      	cbz	r0, 8005720 <_svfiprintf_r+0x110>
 80056f2:	9207      	str	r2, [sp, #28]
 80056f4:	e014      	b.n	8005720 <_svfiprintf_r+0x110>
 80056f6:	eba0 0308 	sub.w	r3, r0, r8
 80056fa:	fa09 f303 	lsl.w	r3, r9, r3
 80056fe:	4313      	orrs	r3, r2
 8005700:	9304      	str	r3, [sp, #16]
 8005702:	46a2      	mov	sl, r4
 8005704:	e7d2      	b.n	80056ac <_svfiprintf_r+0x9c>
 8005706:	9b03      	ldr	r3, [sp, #12]
 8005708:	1d19      	adds	r1, r3, #4
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	9103      	str	r1, [sp, #12]
 800570e:	2b00      	cmp	r3, #0
 8005710:	bfbb      	ittet	lt
 8005712:	425b      	neglt	r3, r3
 8005714:	f042 0202 	orrlt.w	r2, r2, #2
 8005718:	9307      	strge	r3, [sp, #28]
 800571a:	9307      	strlt	r3, [sp, #28]
 800571c:	bfb8      	it	lt
 800571e:	9204      	strlt	r2, [sp, #16]
 8005720:	7823      	ldrb	r3, [r4, #0]
 8005722:	2b2e      	cmp	r3, #46	; 0x2e
 8005724:	d10c      	bne.n	8005740 <_svfiprintf_r+0x130>
 8005726:	7863      	ldrb	r3, [r4, #1]
 8005728:	2b2a      	cmp	r3, #42	; 0x2a
 800572a:	d135      	bne.n	8005798 <_svfiprintf_r+0x188>
 800572c:	9b03      	ldr	r3, [sp, #12]
 800572e:	1d1a      	adds	r2, r3, #4
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	9203      	str	r2, [sp, #12]
 8005734:	2b00      	cmp	r3, #0
 8005736:	bfb8      	it	lt
 8005738:	f04f 33ff 	movlt.w	r3, #4294967295
 800573c:	3402      	adds	r4, #2
 800573e:	9305      	str	r3, [sp, #20]
 8005740:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800580c <_svfiprintf_r+0x1fc>
 8005744:	7821      	ldrb	r1, [r4, #0]
 8005746:	2203      	movs	r2, #3
 8005748:	4650      	mov	r0, sl
 800574a:	f7fa fd91 	bl	8000270 <memchr>
 800574e:	b140      	cbz	r0, 8005762 <_svfiprintf_r+0x152>
 8005750:	2340      	movs	r3, #64	; 0x40
 8005752:	eba0 000a 	sub.w	r0, r0, sl
 8005756:	fa03 f000 	lsl.w	r0, r3, r0
 800575a:	9b04      	ldr	r3, [sp, #16]
 800575c:	4303      	orrs	r3, r0
 800575e:	3401      	adds	r4, #1
 8005760:	9304      	str	r3, [sp, #16]
 8005762:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005766:	4826      	ldr	r0, [pc, #152]	; (8005800 <_svfiprintf_r+0x1f0>)
 8005768:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800576c:	2206      	movs	r2, #6
 800576e:	f7fa fd7f 	bl	8000270 <memchr>
 8005772:	2800      	cmp	r0, #0
 8005774:	d038      	beq.n	80057e8 <_svfiprintf_r+0x1d8>
 8005776:	4b23      	ldr	r3, [pc, #140]	; (8005804 <_svfiprintf_r+0x1f4>)
 8005778:	bb1b      	cbnz	r3, 80057c2 <_svfiprintf_r+0x1b2>
 800577a:	9b03      	ldr	r3, [sp, #12]
 800577c:	3307      	adds	r3, #7
 800577e:	f023 0307 	bic.w	r3, r3, #7
 8005782:	3308      	adds	r3, #8
 8005784:	9303      	str	r3, [sp, #12]
 8005786:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005788:	4433      	add	r3, r6
 800578a:	9309      	str	r3, [sp, #36]	; 0x24
 800578c:	e767      	b.n	800565e <_svfiprintf_r+0x4e>
 800578e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005792:	460c      	mov	r4, r1
 8005794:	2001      	movs	r0, #1
 8005796:	e7a5      	b.n	80056e4 <_svfiprintf_r+0xd4>
 8005798:	2300      	movs	r3, #0
 800579a:	3401      	adds	r4, #1
 800579c:	9305      	str	r3, [sp, #20]
 800579e:	4619      	mov	r1, r3
 80057a0:	f04f 0c0a 	mov.w	ip, #10
 80057a4:	4620      	mov	r0, r4
 80057a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057aa:	3a30      	subs	r2, #48	; 0x30
 80057ac:	2a09      	cmp	r2, #9
 80057ae:	d903      	bls.n	80057b8 <_svfiprintf_r+0x1a8>
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d0c5      	beq.n	8005740 <_svfiprintf_r+0x130>
 80057b4:	9105      	str	r1, [sp, #20]
 80057b6:	e7c3      	b.n	8005740 <_svfiprintf_r+0x130>
 80057b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80057bc:	4604      	mov	r4, r0
 80057be:	2301      	movs	r3, #1
 80057c0:	e7f0      	b.n	80057a4 <_svfiprintf_r+0x194>
 80057c2:	ab03      	add	r3, sp, #12
 80057c4:	9300      	str	r3, [sp, #0]
 80057c6:	462a      	mov	r2, r5
 80057c8:	4b0f      	ldr	r3, [pc, #60]	; (8005808 <_svfiprintf_r+0x1f8>)
 80057ca:	a904      	add	r1, sp, #16
 80057cc:	4638      	mov	r0, r7
 80057ce:	f3af 8000 	nop.w
 80057d2:	1c42      	adds	r2, r0, #1
 80057d4:	4606      	mov	r6, r0
 80057d6:	d1d6      	bne.n	8005786 <_svfiprintf_r+0x176>
 80057d8:	89ab      	ldrh	r3, [r5, #12]
 80057da:	065b      	lsls	r3, r3, #25
 80057dc:	f53f af2c 	bmi.w	8005638 <_svfiprintf_r+0x28>
 80057e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057e2:	b01d      	add	sp, #116	; 0x74
 80057e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057e8:	ab03      	add	r3, sp, #12
 80057ea:	9300      	str	r3, [sp, #0]
 80057ec:	462a      	mov	r2, r5
 80057ee:	4b06      	ldr	r3, [pc, #24]	; (8005808 <_svfiprintf_r+0x1f8>)
 80057f0:	a904      	add	r1, sp, #16
 80057f2:	4638      	mov	r0, r7
 80057f4:	f000 f87a 	bl	80058ec <_printf_i>
 80057f8:	e7eb      	b.n	80057d2 <_svfiprintf_r+0x1c2>
 80057fa:	bf00      	nop
 80057fc:	08005ee8 	.word	0x08005ee8
 8005800:	08005ef2 	.word	0x08005ef2
 8005804:	00000000 	.word	0x00000000
 8005808:	08005559 	.word	0x08005559
 800580c:	08005eee 	.word	0x08005eee

08005810 <_printf_common>:
 8005810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005814:	4616      	mov	r6, r2
 8005816:	4699      	mov	r9, r3
 8005818:	688a      	ldr	r2, [r1, #8]
 800581a:	690b      	ldr	r3, [r1, #16]
 800581c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005820:	4293      	cmp	r3, r2
 8005822:	bfb8      	it	lt
 8005824:	4613      	movlt	r3, r2
 8005826:	6033      	str	r3, [r6, #0]
 8005828:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800582c:	4607      	mov	r7, r0
 800582e:	460c      	mov	r4, r1
 8005830:	b10a      	cbz	r2, 8005836 <_printf_common+0x26>
 8005832:	3301      	adds	r3, #1
 8005834:	6033      	str	r3, [r6, #0]
 8005836:	6823      	ldr	r3, [r4, #0]
 8005838:	0699      	lsls	r1, r3, #26
 800583a:	bf42      	ittt	mi
 800583c:	6833      	ldrmi	r3, [r6, #0]
 800583e:	3302      	addmi	r3, #2
 8005840:	6033      	strmi	r3, [r6, #0]
 8005842:	6825      	ldr	r5, [r4, #0]
 8005844:	f015 0506 	ands.w	r5, r5, #6
 8005848:	d106      	bne.n	8005858 <_printf_common+0x48>
 800584a:	f104 0a19 	add.w	sl, r4, #25
 800584e:	68e3      	ldr	r3, [r4, #12]
 8005850:	6832      	ldr	r2, [r6, #0]
 8005852:	1a9b      	subs	r3, r3, r2
 8005854:	42ab      	cmp	r3, r5
 8005856:	dc26      	bgt.n	80058a6 <_printf_common+0x96>
 8005858:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800585c:	1e13      	subs	r3, r2, #0
 800585e:	6822      	ldr	r2, [r4, #0]
 8005860:	bf18      	it	ne
 8005862:	2301      	movne	r3, #1
 8005864:	0692      	lsls	r2, r2, #26
 8005866:	d42b      	bmi.n	80058c0 <_printf_common+0xb0>
 8005868:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800586c:	4649      	mov	r1, r9
 800586e:	4638      	mov	r0, r7
 8005870:	47c0      	blx	r8
 8005872:	3001      	adds	r0, #1
 8005874:	d01e      	beq.n	80058b4 <_printf_common+0xa4>
 8005876:	6823      	ldr	r3, [r4, #0]
 8005878:	68e5      	ldr	r5, [r4, #12]
 800587a:	6832      	ldr	r2, [r6, #0]
 800587c:	f003 0306 	and.w	r3, r3, #6
 8005880:	2b04      	cmp	r3, #4
 8005882:	bf08      	it	eq
 8005884:	1aad      	subeq	r5, r5, r2
 8005886:	68a3      	ldr	r3, [r4, #8]
 8005888:	6922      	ldr	r2, [r4, #16]
 800588a:	bf0c      	ite	eq
 800588c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005890:	2500      	movne	r5, #0
 8005892:	4293      	cmp	r3, r2
 8005894:	bfc4      	itt	gt
 8005896:	1a9b      	subgt	r3, r3, r2
 8005898:	18ed      	addgt	r5, r5, r3
 800589a:	2600      	movs	r6, #0
 800589c:	341a      	adds	r4, #26
 800589e:	42b5      	cmp	r5, r6
 80058a0:	d11a      	bne.n	80058d8 <_printf_common+0xc8>
 80058a2:	2000      	movs	r0, #0
 80058a4:	e008      	b.n	80058b8 <_printf_common+0xa8>
 80058a6:	2301      	movs	r3, #1
 80058a8:	4652      	mov	r2, sl
 80058aa:	4649      	mov	r1, r9
 80058ac:	4638      	mov	r0, r7
 80058ae:	47c0      	blx	r8
 80058b0:	3001      	adds	r0, #1
 80058b2:	d103      	bne.n	80058bc <_printf_common+0xac>
 80058b4:	f04f 30ff 	mov.w	r0, #4294967295
 80058b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058bc:	3501      	adds	r5, #1
 80058be:	e7c6      	b.n	800584e <_printf_common+0x3e>
 80058c0:	18e1      	adds	r1, r4, r3
 80058c2:	1c5a      	adds	r2, r3, #1
 80058c4:	2030      	movs	r0, #48	; 0x30
 80058c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80058ca:	4422      	add	r2, r4
 80058cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058d4:	3302      	adds	r3, #2
 80058d6:	e7c7      	b.n	8005868 <_printf_common+0x58>
 80058d8:	2301      	movs	r3, #1
 80058da:	4622      	mov	r2, r4
 80058dc:	4649      	mov	r1, r9
 80058de:	4638      	mov	r0, r7
 80058e0:	47c0      	blx	r8
 80058e2:	3001      	adds	r0, #1
 80058e4:	d0e6      	beq.n	80058b4 <_printf_common+0xa4>
 80058e6:	3601      	adds	r6, #1
 80058e8:	e7d9      	b.n	800589e <_printf_common+0x8e>
	...

080058ec <_printf_i>:
 80058ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058f0:	460c      	mov	r4, r1
 80058f2:	4691      	mov	r9, r2
 80058f4:	7e27      	ldrb	r7, [r4, #24]
 80058f6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80058f8:	2f78      	cmp	r7, #120	; 0x78
 80058fa:	4680      	mov	r8, r0
 80058fc:	469a      	mov	sl, r3
 80058fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005902:	d807      	bhi.n	8005914 <_printf_i+0x28>
 8005904:	2f62      	cmp	r7, #98	; 0x62
 8005906:	d80a      	bhi.n	800591e <_printf_i+0x32>
 8005908:	2f00      	cmp	r7, #0
 800590a:	f000 80d8 	beq.w	8005abe <_printf_i+0x1d2>
 800590e:	2f58      	cmp	r7, #88	; 0x58
 8005910:	f000 80a3 	beq.w	8005a5a <_printf_i+0x16e>
 8005914:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005918:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800591c:	e03a      	b.n	8005994 <_printf_i+0xa8>
 800591e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005922:	2b15      	cmp	r3, #21
 8005924:	d8f6      	bhi.n	8005914 <_printf_i+0x28>
 8005926:	a001      	add	r0, pc, #4	; (adr r0, 800592c <_printf_i+0x40>)
 8005928:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800592c:	08005985 	.word	0x08005985
 8005930:	08005999 	.word	0x08005999
 8005934:	08005915 	.word	0x08005915
 8005938:	08005915 	.word	0x08005915
 800593c:	08005915 	.word	0x08005915
 8005940:	08005915 	.word	0x08005915
 8005944:	08005999 	.word	0x08005999
 8005948:	08005915 	.word	0x08005915
 800594c:	08005915 	.word	0x08005915
 8005950:	08005915 	.word	0x08005915
 8005954:	08005915 	.word	0x08005915
 8005958:	08005aa5 	.word	0x08005aa5
 800595c:	080059c9 	.word	0x080059c9
 8005960:	08005a87 	.word	0x08005a87
 8005964:	08005915 	.word	0x08005915
 8005968:	08005915 	.word	0x08005915
 800596c:	08005ac7 	.word	0x08005ac7
 8005970:	08005915 	.word	0x08005915
 8005974:	080059c9 	.word	0x080059c9
 8005978:	08005915 	.word	0x08005915
 800597c:	08005915 	.word	0x08005915
 8005980:	08005a8f 	.word	0x08005a8f
 8005984:	680b      	ldr	r3, [r1, #0]
 8005986:	1d1a      	adds	r2, r3, #4
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	600a      	str	r2, [r1, #0]
 800598c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005990:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005994:	2301      	movs	r3, #1
 8005996:	e0a3      	b.n	8005ae0 <_printf_i+0x1f4>
 8005998:	6825      	ldr	r5, [r4, #0]
 800599a:	6808      	ldr	r0, [r1, #0]
 800599c:	062e      	lsls	r6, r5, #24
 800599e:	f100 0304 	add.w	r3, r0, #4
 80059a2:	d50a      	bpl.n	80059ba <_printf_i+0xce>
 80059a4:	6805      	ldr	r5, [r0, #0]
 80059a6:	600b      	str	r3, [r1, #0]
 80059a8:	2d00      	cmp	r5, #0
 80059aa:	da03      	bge.n	80059b4 <_printf_i+0xc8>
 80059ac:	232d      	movs	r3, #45	; 0x2d
 80059ae:	426d      	negs	r5, r5
 80059b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059b4:	485e      	ldr	r0, [pc, #376]	; (8005b30 <_printf_i+0x244>)
 80059b6:	230a      	movs	r3, #10
 80059b8:	e019      	b.n	80059ee <_printf_i+0x102>
 80059ba:	f015 0f40 	tst.w	r5, #64	; 0x40
 80059be:	6805      	ldr	r5, [r0, #0]
 80059c0:	600b      	str	r3, [r1, #0]
 80059c2:	bf18      	it	ne
 80059c4:	b22d      	sxthne	r5, r5
 80059c6:	e7ef      	b.n	80059a8 <_printf_i+0xbc>
 80059c8:	680b      	ldr	r3, [r1, #0]
 80059ca:	6825      	ldr	r5, [r4, #0]
 80059cc:	1d18      	adds	r0, r3, #4
 80059ce:	6008      	str	r0, [r1, #0]
 80059d0:	0628      	lsls	r0, r5, #24
 80059d2:	d501      	bpl.n	80059d8 <_printf_i+0xec>
 80059d4:	681d      	ldr	r5, [r3, #0]
 80059d6:	e002      	b.n	80059de <_printf_i+0xf2>
 80059d8:	0669      	lsls	r1, r5, #25
 80059da:	d5fb      	bpl.n	80059d4 <_printf_i+0xe8>
 80059dc:	881d      	ldrh	r5, [r3, #0]
 80059de:	4854      	ldr	r0, [pc, #336]	; (8005b30 <_printf_i+0x244>)
 80059e0:	2f6f      	cmp	r7, #111	; 0x6f
 80059e2:	bf0c      	ite	eq
 80059e4:	2308      	moveq	r3, #8
 80059e6:	230a      	movne	r3, #10
 80059e8:	2100      	movs	r1, #0
 80059ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059ee:	6866      	ldr	r6, [r4, #4]
 80059f0:	60a6      	str	r6, [r4, #8]
 80059f2:	2e00      	cmp	r6, #0
 80059f4:	bfa2      	ittt	ge
 80059f6:	6821      	ldrge	r1, [r4, #0]
 80059f8:	f021 0104 	bicge.w	r1, r1, #4
 80059fc:	6021      	strge	r1, [r4, #0]
 80059fe:	b90d      	cbnz	r5, 8005a04 <_printf_i+0x118>
 8005a00:	2e00      	cmp	r6, #0
 8005a02:	d04d      	beq.n	8005aa0 <_printf_i+0x1b4>
 8005a04:	4616      	mov	r6, r2
 8005a06:	fbb5 f1f3 	udiv	r1, r5, r3
 8005a0a:	fb03 5711 	mls	r7, r3, r1, r5
 8005a0e:	5dc7      	ldrb	r7, [r0, r7]
 8005a10:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005a14:	462f      	mov	r7, r5
 8005a16:	42bb      	cmp	r3, r7
 8005a18:	460d      	mov	r5, r1
 8005a1a:	d9f4      	bls.n	8005a06 <_printf_i+0x11a>
 8005a1c:	2b08      	cmp	r3, #8
 8005a1e:	d10b      	bne.n	8005a38 <_printf_i+0x14c>
 8005a20:	6823      	ldr	r3, [r4, #0]
 8005a22:	07df      	lsls	r7, r3, #31
 8005a24:	d508      	bpl.n	8005a38 <_printf_i+0x14c>
 8005a26:	6923      	ldr	r3, [r4, #16]
 8005a28:	6861      	ldr	r1, [r4, #4]
 8005a2a:	4299      	cmp	r1, r3
 8005a2c:	bfde      	ittt	le
 8005a2e:	2330      	movle	r3, #48	; 0x30
 8005a30:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005a34:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005a38:	1b92      	subs	r2, r2, r6
 8005a3a:	6122      	str	r2, [r4, #16]
 8005a3c:	f8cd a000 	str.w	sl, [sp]
 8005a40:	464b      	mov	r3, r9
 8005a42:	aa03      	add	r2, sp, #12
 8005a44:	4621      	mov	r1, r4
 8005a46:	4640      	mov	r0, r8
 8005a48:	f7ff fee2 	bl	8005810 <_printf_common>
 8005a4c:	3001      	adds	r0, #1
 8005a4e:	d14c      	bne.n	8005aea <_printf_i+0x1fe>
 8005a50:	f04f 30ff 	mov.w	r0, #4294967295
 8005a54:	b004      	add	sp, #16
 8005a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a5a:	4835      	ldr	r0, [pc, #212]	; (8005b30 <_printf_i+0x244>)
 8005a5c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005a60:	6823      	ldr	r3, [r4, #0]
 8005a62:	680e      	ldr	r6, [r1, #0]
 8005a64:	061f      	lsls	r7, r3, #24
 8005a66:	f856 5b04 	ldr.w	r5, [r6], #4
 8005a6a:	600e      	str	r6, [r1, #0]
 8005a6c:	d514      	bpl.n	8005a98 <_printf_i+0x1ac>
 8005a6e:	07d9      	lsls	r1, r3, #31
 8005a70:	bf44      	itt	mi
 8005a72:	f043 0320 	orrmi.w	r3, r3, #32
 8005a76:	6023      	strmi	r3, [r4, #0]
 8005a78:	b91d      	cbnz	r5, 8005a82 <_printf_i+0x196>
 8005a7a:	6823      	ldr	r3, [r4, #0]
 8005a7c:	f023 0320 	bic.w	r3, r3, #32
 8005a80:	6023      	str	r3, [r4, #0]
 8005a82:	2310      	movs	r3, #16
 8005a84:	e7b0      	b.n	80059e8 <_printf_i+0xfc>
 8005a86:	6823      	ldr	r3, [r4, #0]
 8005a88:	f043 0320 	orr.w	r3, r3, #32
 8005a8c:	6023      	str	r3, [r4, #0]
 8005a8e:	2378      	movs	r3, #120	; 0x78
 8005a90:	4828      	ldr	r0, [pc, #160]	; (8005b34 <_printf_i+0x248>)
 8005a92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a96:	e7e3      	b.n	8005a60 <_printf_i+0x174>
 8005a98:	065e      	lsls	r6, r3, #25
 8005a9a:	bf48      	it	mi
 8005a9c:	b2ad      	uxthmi	r5, r5
 8005a9e:	e7e6      	b.n	8005a6e <_printf_i+0x182>
 8005aa0:	4616      	mov	r6, r2
 8005aa2:	e7bb      	b.n	8005a1c <_printf_i+0x130>
 8005aa4:	680b      	ldr	r3, [r1, #0]
 8005aa6:	6826      	ldr	r6, [r4, #0]
 8005aa8:	6960      	ldr	r0, [r4, #20]
 8005aaa:	1d1d      	adds	r5, r3, #4
 8005aac:	600d      	str	r5, [r1, #0]
 8005aae:	0635      	lsls	r5, r6, #24
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	d501      	bpl.n	8005ab8 <_printf_i+0x1cc>
 8005ab4:	6018      	str	r0, [r3, #0]
 8005ab6:	e002      	b.n	8005abe <_printf_i+0x1d2>
 8005ab8:	0671      	lsls	r1, r6, #25
 8005aba:	d5fb      	bpl.n	8005ab4 <_printf_i+0x1c8>
 8005abc:	8018      	strh	r0, [r3, #0]
 8005abe:	2300      	movs	r3, #0
 8005ac0:	6123      	str	r3, [r4, #16]
 8005ac2:	4616      	mov	r6, r2
 8005ac4:	e7ba      	b.n	8005a3c <_printf_i+0x150>
 8005ac6:	680b      	ldr	r3, [r1, #0]
 8005ac8:	1d1a      	adds	r2, r3, #4
 8005aca:	600a      	str	r2, [r1, #0]
 8005acc:	681e      	ldr	r6, [r3, #0]
 8005ace:	6862      	ldr	r2, [r4, #4]
 8005ad0:	2100      	movs	r1, #0
 8005ad2:	4630      	mov	r0, r6
 8005ad4:	f7fa fbcc 	bl	8000270 <memchr>
 8005ad8:	b108      	cbz	r0, 8005ade <_printf_i+0x1f2>
 8005ada:	1b80      	subs	r0, r0, r6
 8005adc:	6060      	str	r0, [r4, #4]
 8005ade:	6863      	ldr	r3, [r4, #4]
 8005ae0:	6123      	str	r3, [r4, #16]
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ae8:	e7a8      	b.n	8005a3c <_printf_i+0x150>
 8005aea:	6923      	ldr	r3, [r4, #16]
 8005aec:	4632      	mov	r2, r6
 8005aee:	4649      	mov	r1, r9
 8005af0:	4640      	mov	r0, r8
 8005af2:	47d0      	blx	sl
 8005af4:	3001      	adds	r0, #1
 8005af6:	d0ab      	beq.n	8005a50 <_printf_i+0x164>
 8005af8:	6823      	ldr	r3, [r4, #0]
 8005afa:	079b      	lsls	r3, r3, #30
 8005afc:	d413      	bmi.n	8005b26 <_printf_i+0x23a>
 8005afe:	68e0      	ldr	r0, [r4, #12]
 8005b00:	9b03      	ldr	r3, [sp, #12]
 8005b02:	4298      	cmp	r0, r3
 8005b04:	bfb8      	it	lt
 8005b06:	4618      	movlt	r0, r3
 8005b08:	e7a4      	b.n	8005a54 <_printf_i+0x168>
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	4632      	mov	r2, r6
 8005b0e:	4649      	mov	r1, r9
 8005b10:	4640      	mov	r0, r8
 8005b12:	47d0      	blx	sl
 8005b14:	3001      	adds	r0, #1
 8005b16:	d09b      	beq.n	8005a50 <_printf_i+0x164>
 8005b18:	3501      	adds	r5, #1
 8005b1a:	68e3      	ldr	r3, [r4, #12]
 8005b1c:	9903      	ldr	r1, [sp, #12]
 8005b1e:	1a5b      	subs	r3, r3, r1
 8005b20:	42ab      	cmp	r3, r5
 8005b22:	dcf2      	bgt.n	8005b0a <_printf_i+0x21e>
 8005b24:	e7eb      	b.n	8005afe <_printf_i+0x212>
 8005b26:	2500      	movs	r5, #0
 8005b28:	f104 0619 	add.w	r6, r4, #25
 8005b2c:	e7f5      	b.n	8005b1a <_printf_i+0x22e>
 8005b2e:	bf00      	nop
 8005b30:	08005ef9 	.word	0x08005ef9
 8005b34:	08005f0a 	.word	0x08005f0a

08005b38 <memmove>:
 8005b38:	4288      	cmp	r0, r1
 8005b3a:	b510      	push	{r4, lr}
 8005b3c:	eb01 0402 	add.w	r4, r1, r2
 8005b40:	d902      	bls.n	8005b48 <memmove+0x10>
 8005b42:	4284      	cmp	r4, r0
 8005b44:	4623      	mov	r3, r4
 8005b46:	d807      	bhi.n	8005b58 <memmove+0x20>
 8005b48:	1e43      	subs	r3, r0, #1
 8005b4a:	42a1      	cmp	r1, r4
 8005b4c:	d008      	beq.n	8005b60 <memmove+0x28>
 8005b4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b52:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005b56:	e7f8      	b.n	8005b4a <memmove+0x12>
 8005b58:	4402      	add	r2, r0
 8005b5a:	4601      	mov	r1, r0
 8005b5c:	428a      	cmp	r2, r1
 8005b5e:	d100      	bne.n	8005b62 <memmove+0x2a>
 8005b60:	bd10      	pop	{r4, pc}
 8005b62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005b6a:	e7f7      	b.n	8005b5c <memmove+0x24>

08005b6c <_free_r>:
 8005b6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b6e:	2900      	cmp	r1, #0
 8005b70:	d048      	beq.n	8005c04 <_free_r+0x98>
 8005b72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b76:	9001      	str	r0, [sp, #4]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	f1a1 0404 	sub.w	r4, r1, #4
 8005b7e:	bfb8      	it	lt
 8005b80:	18e4      	addlt	r4, r4, r3
 8005b82:	f000 f8d3 	bl	8005d2c <__malloc_lock>
 8005b86:	4a20      	ldr	r2, [pc, #128]	; (8005c08 <_free_r+0x9c>)
 8005b88:	9801      	ldr	r0, [sp, #4]
 8005b8a:	6813      	ldr	r3, [r2, #0]
 8005b8c:	4615      	mov	r5, r2
 8005b8e:	b933      	cbnz	r3, 8005b9e <_free_r+0x32>
 8005b90:	6063      	str	r3, [r4, #4]
 8005b92:	6014      	str	r4, [r2, #0]
 8005b94:	b003      	add	sp, #12
 8005b96:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b9a:	f000 b8cd 	b.w	8005d38 <__malloc_unlock>
 8005b9e:	42a3      	cmp	r3, r4
 8005ba0:	d90b      	bls.n	8005bba <_free_r+0x4e>
 8005ba2:	6821      	ldr	r1, [r4, #0]
 8005ba4:	1862      	adds	r2, r4, r1
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	bf04      	itt	eq
 8005baa:	681a      	ldreq	r2, [r3, #0]
 8005bac:	685b      	ldreq	r3, [r3, #4]
 8005bae:	6063      	str	r3, [r4, #4]
 8005bb0:	bf04      	itt	eq
 8005bb2:	1852      	addeq	r2, r2, r1
 8005bb4:	6022      	streq	r2, [r4, #0]
 8005bb6:	602c      	str	r4, [r5, #0]
 8005bb8:	e7ec      	b.n	8005b94 <_free_r+0x28>
 8005bba:	461a      	mov	r2, r3
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	b10b      	cbz	r3, 8005bc4 <_free_r+0x58>
 8005bc0:	42a3      	cmp	r3, r4
 8005bc2:	d9fa      	bls.n	8005bba <_free_r+0x4e>
 8005bc4:	6811      	ldr	r1, [r2, #0]
 8005bc6:	1855      	adds	r5, r2, r1
 8005bc8:	42a5      	cmp	r5, r4
 8005bca:	d10b      	bne.n	8005be4 <_free_r+0x78>
 8005bcc:	6824      	ldr	r4, [r4, #0]
 8005bce:	4421      	add	r1, r4
 8005bd0:	1854      	adds	r4, r2, r1
 8005bd2:	42a3      	cmp	r3, r4
 8005bd4:	6011      	str	r1, [r2, #0]
 8005bd6:	d1dd      	bne.n	8005b94 <_free_r+0x28>
 8005bd8:	681c      	ldr	r4, [r3, #0]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	6053      	str	r3, [r2, #4]
 8005bde:	4421      	add	r1, r4
 8005be0:	6011      	str	r1, [r2, #0]
 8005be2:	e7d7      	b.n	8005b94 <_free_r+0x28>
 8005be4:	d902      	bls.n	8005bec <_free_r+0x80>
 8005be6:	230c      	movs	r3, #12
 8005be8:	6003      	str	r3, [r0, #0]
 8005bea:	e7d3      	b.n	8005b94 <_free_r+0x28>
 8005bec:	6825      	ldr	r5, [r4, #0]
 8005bee:	1961      	adds	r1, r4, r5
 8005bf0:	428b      	cmp	r3, r1
 8005bf2:	bf04      	itt	eq
 8005bf4:	6819      	ldreq	r1, [r3, #0]
 8005bf6:	685b      	ldreq	r3, [r3, #4]
 8005bf8:	6063      	str	r3, [r4, #4]
 8005bfa:	bf04      	itt	eq
 8005bfc:	1949      	addeq	r1, r1, r5
 8005bfe:	6021      	streq	r1, [r4, #0]
 8005c00:	6054      	str	r4, [r2, #4]
 8005c02:	e7c7      	b.n	8005b94 <_free_r+0x28>
 8005c04:	b003      	add	sp, #12
 8005c06:	bd30      	pop	{r4, r5, pc}
 8005c08:	20014390 	.word	0x20014390

08005c0c <_malloc_r>:
 8005c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c0e:	1ccd      	adds	r5, r1, #3
 8005c10:	f025 0503 	bic.w	r5, r5, #3
 8005c14:	3508      	adds	r5, #8
 8005c16:	2d0c      	cmp	r5, #12
 8005c18:	bf38      	it	cc
 8005c1a:	250c      	movcc	r5, #12
 8005c1c:	2d00      	cmp	r5, #0
 8005c1e:	4606      	mov	r6, r0
 8005c20:	db01      	blt.n	8005c26 <_malloc_r+0x1a>
 8005c22:	42a9      	cmp	r1, r5
 8005c24:	d903      	bls.n	8005c2e <_malloc_r+0x22>
 8005c26:	230c      	movs	r3, #12
 8005c28:	6033      	str	r3, [r6, #0]
 8005c2a:	2000      	movs	r0, #0
 8005c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c2e:	f000 f87d 	bl	8005d2c <__malloc_lock>
 8005c32:	4921      	ldr	r1, [pc, #132]	; (8005cb8 <_malloc_r+0xac>)
 8005c34:	680a      	ldr	r2, [r1, #0]
 8005c36:	4614      	mov	r4, r2
 8005c38:	b99c      	cbnz	r4, 8005c62 <_malloc_r+0x56>
 8005c3a:	4f20      	ldr	r7, [pc, #128]	; (8005cbc <_malloc_r+0xb0>)
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	b923      	cbnz	r3, 8005c4a <_malloc_r+0x3e>
 8005c40:	4621      	mov	r1, r4
 8005c42:	4630      	mov	r0, r6
 8005c44:	f000 f862 	bl	8005d0c <_sbrk_r>
 8005c48:	6038      	str	r0, [r7, #0]
 8005c4a:	4629      	mov	r1, r5
 8005c4c:	4630      	mov	r0, r6
 8005c4e:	f000 f85d 	bl	8005d0c <_sbrk_r>
 8005c52:	1c43      	adds	r3, r0, #1
 8005c54:	d123      	bne.n	8005c9e <_malloc_r+0x92>
 8005c56:	230c      	movs	r3, #12
 8005c58:	6033      	str	r3, [r6, #0]
 8005c5a:	4630      	mov	r0, r6
 8005c5c:	f000 f86c 	bl	8005d38 <__malloc_unlock>
 8005c60:	e7e3      	b.n	8005c2a <_malloc_r+0x1e>
 8005c62:	6823      	ldr	r3, [r4, #0]
 8005c64:	1b5b      	subs	r3, r3, r5
 8005c66:	d417      	bmi.n	8005c98 <_malloc_r+0x8c>
 8005c68:	2b0b      	cmp	r3, #11
 8005c6a:	d903      	bls.n	8005c74 <_malloc_r+0x68>
 8005c6c:	6023      	str	r3, [r4, #0]
 8005c6e:	441c      	add	r4, r3
 8005c70:	6025      	str	r5, [r4, #0]
 8005c72:	e004      	b.n	8005c7e <_malloc_r+0x72>
 8005c74:	6863      	ldr	r3, [r4, #4]
 8005c76:	42a2      	cmp	r2, r4
 8005c78:	bf0c      	ite	eq
 8005c7a:	600b      	streq	r3, [r1, #0]
 8005c7c:	6053      	strne	r3, [r2, #4]
 8005c7e:	4630      	mov	r0, r6
 8005c80:	f000 f85a 	bl	8005d38 <__malloc_unlock>
 8005c84:	f104 000b 	add.w	r0, r4, #11
 8005c88:	1d23      	adds	r3, r4, #4
 8005c8a:	f020 0007 	bic.w	r0, r0, #7
 8005c8e:	1ac2      	subs	r2, r0, r3
 8005c90:	d0cc      	beq.n	8005c2c <_malloc_r+0x20>
 8005c92:	1a1b      	subs	r3, r3, r0
 8005c94:	50a3      	str	r3, [r4, r2]
 8005c96:	e7c9      	b.n	8005c2c <_malloc_r+0x20>
 8005c98:	4622      	mov	r2, r4
 8005c9a:	6864      	ldr	r4, [r4, #4]
 8005c9c:	e7cc      	b.n	8005c38 <_malloc_r+0x2c>
 8005c9e:	1cc4      	adds	r4, r0, #3
 8005ca0:	f024 0403 	bic.w	r4, r4, #3
 8005ca4:	42a0      	cmp	r0, r4
 8005ca6:	d0e3      	beq.n	8005c70 <_malloc_r+0x64>
 8005ca8:	1a21      	subs	r1, r4, r0
 8005caa:	4630      	mov	r0, r6
 8005cac:	f000 f82e 	bl	8005d0c <_sbrk_r>
 8005cb0:	3001      	adds	r0, #1
 8005cb2:	d1dd      	bne.n	8005c70 <_malloc_r+0x64>
 8005cb4:	e7cf      	b.n	8005c56 <_malloc_r+0x4a>
 8005cb6:	bf00      	nop
 8005cb8:	20014390 	.word	0x20014390
 8005cbc:	20014394 	.word	0x20014394

08005cc0 <_realloc_r>:
 8005cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cc2:	4607      	mov	r7, r0
 8005cc4:	4614      	mov	r4, r2
 8005cc6:	460e      	mov	r6, r1
 8005cc8:	b921      	cbnz	r1, 8005cd4 <_realloc_r+0x14>
 8005cca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005cce:	4611      	mov	r1, r2
 8005cd0:	f7ff bf9c 	b.w	8005c0c <_malloc_r>
 8005cd4:	b922      	cbnz	r2, 8005ce0 <_realloc_r+0x20>
 8005cd6:	f7ff ff49 	bl	8005b6c <_free_r>
 8005cda:	4625      	mov	r5, r4
 8005cdc:	4628      	mov	r0, r5
 8005cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ce0:	f000 f830 	bl	8005d44 <_malloc_usable_size_r>
 8005ce4:	42a0      	cmp	r0, r4
 8005ce6:	d20f      	bcs.n	8005d08 <_realloc_r+0x48>
 8005ce8:	4621      	mov	r1, r4
 8005cea:	4638      	mov	r0, r7
 8005cec:	f7ff ff8e 	bl	8005c0c <_malloc_r>
 8005cf0:	4605      	mov	r5, r0
 8005cf2:	2800      	cmp	r0, #0
 8005cf4:	d0f2      	beq.n	8005cdc <_realloc_r+0x1c>
 8005cf6:	4631      	mov	r1, r6
 8005cf8:	4622      	mov	r2, r4
 8005cfa:	f7ff fbf7 	bl	80054ec <memcpy>
 8005cfe:	4631      	mov	r1, r6
 8005d00:	4638      	mov	r0, r7
 8005d02:	f7ff ff33 	bl	8005b6c <_free_r>
 8005d06:	e7e9      	b.n	8005cdc <_realloc_r+0x1c>
 8005d08:	4635      	mov	r5, r6
 8005d0a:	e7e7      	b.n	8005cdc <_realloc_r+0x1c>

08005d0c <_sbrk_r>:
 8005d0c:	b538      	push	{r3, r4, r5, lr}
 8005d0e:	4d06      	ldr	r5, [pc, #24]	; (8005d28 <_sbrk_r+0x1c>)
 8005d10:	2300      	movs	r3, #0
 8005d12:	4604      	mov	r4, r0
 8005d14:	4608      	mov	r0, r1
 8005d16:	602b      	str	r3, [r5, #0]
 8005d18:	f000 f81e 	bl	8005d58 <_sbrk>
 8005d1c:	1c43      	adds	r3, r0, #1
 8005d1e:	d102      	bne.n	8005d26 <_sbrk_r+0x1a>
 8005d20:	682b      	ldr	r3, [r5, #0]
 8005d22:	b103      	cbz	r3, 8005d26 <_sbrk_r+0x1a>
 8005d24:	6023      	str	r3, [r4, #0]
 8005d26:	bd38      	pop	{r3, r4, r5, pc}
 8005d28:	20014490 	.word	0x20014490

08005d2c <__malloc_lock>:
 8005d2c:	4801      	ldr	r0, [pc, #4]	; (8005d34 <__malloc_lock+0x8>)
 8005d2e:	f000 b811 	b.w	8005d54 <__retarget_lock_acquire_recursive>
 8005d32:	bf00      	nop
 8005d34:	20014498 	.word	0x20014498

08005d38 <__malloc_unlock>:
 8005d38:	4801      	ldr	r0, [pc, #4]	; (8005d40 <__malloc_unlock+0x8>)
 8005d3a:	f000 b80c 	b.w	8005d56 <__retarget_lock_release_recursive>
 8005d3e:	bf00      	nop
 8005d40:	20014498 	.word	0x20014498

08005d44 <_malloc_usable_size_r>:
 8005d44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d48:	1f18      	subs	r0, r3, #4
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	bfbc      	itt	lt
 8005d4e:	580b      	ldrlt	r3, [r1, r0]
 8005d50:	18c0      	addlt	r0, r0, r3
 8005d52:	4770      	bx	lr

08005d54 <__retarget_lock_acquire_recursive>:
 8005d54:	4770      	bx	lr

08005d56 <__retarget_lock_release_recursive>:
 8005d56:	4770      	bx	lr

08005d58 <_sbrk>:
 8005d58:	4b04      	ldr	r3, [pc, #16]	; (8005d6c <_sbrk+0x14>)
 8005d5a:	6819      	ldr	r1, [r3, #0]
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	b909      	cbnz	r1, 8005d64 <_sbrk+0xc>
 8005d60:	4903      	ldr	r1, [pc, #12]	; (8005d70 <_sbrk+0x18>)
 8005d62:	6019      	str	r1, [r3, #0]
 8005d64:	6818      	ldr	r0, [r3, #0]
 8005d66:	4402      	add	r2, r0
 8005d68:	601a      	str	r2, [r3, #0]
 8005d6a:	4770      	bx	lr
 8005d6c:	20014398 	.word	0x20014398
 8005d70:	200144a0 	.word	0x200144a0

08005d74 <_init>:
 8005d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d76:	bf00      	nop
 8005d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d7a:	bc08      	pop	{r3}
 8005d7c:	469e      	mov	lr, r3
 8005d7e:	4770      	bx	lr

08005d80 <_fini>:
 8005d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d82:	bf00      	nop
 8005d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d86:	bc08      	pop	{r3}
 8005d88:	469e      	mov	lr, r3
 8005d8a:	4770      	bx	lr
