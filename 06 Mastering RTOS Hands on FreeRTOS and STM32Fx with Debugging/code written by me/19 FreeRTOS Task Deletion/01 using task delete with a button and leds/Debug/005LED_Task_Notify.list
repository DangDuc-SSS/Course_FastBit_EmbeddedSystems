
005LED_Task_Notify.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000672c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  080068bc  080068bc  000168bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a50  08006a50  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08006a50  08006a50  00016a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a58  08006a58  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a58  08006a58  00016a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a5c  08006a5c  00016a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08006a60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          00014428  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20014444  20014444  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016dda  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002df0  00000000  00000000  00036e26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001138  00000000  00000000  00039c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fd0  00000000  00000000  0003ad50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023844  00000000  00000000  0003bd20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001353f  00000000  00000000  0005f564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7165  00000000  00000000  00072aa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00149c08  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004778  00000000  00000000  00149c5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080068a4 	.word	0x080068a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	080068a4 	.word	0x080068a4

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	2001439c 	.word	0x2001439c

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b96e 	b.w	8000558 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	468c      	mov	ip, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	f040 8083 	bne.w	80003aa <__udivmoddi4+0x116>
 80002a4:	428a      	cmp	r2, r1
 80002a6:	4617      	mov	r7, r2
 80002a8:	d947      	bls.n	800033a <__udivmoddi4+0xa6>
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	b142      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002b0:	f1c2 0020 	rsb	r0, r2, #32
 80002b4:	fa24 f000 	lsr.w	r0, r4, r0
 80002b8:	4091      	lsls	r1, r2
 80002ba:	4097      	lsls	r7, r2
 80002bc:	ea40 0c01 	orr.w	ip, r0, r1
 80002c0:	4094      	lsls	r4, r2
 80002c2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002c6:	0c23      	lsrs	r3, r4, #16
 80002c8:	fbbc f6f8 	udiv	r6, ip, r8
 80002cc:	fa1f fe87 	uxth.w	lr, r7
 80002d0:	fb08 c116 	mls	r1, r8, r6, ip
 80002d4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002d8:	fb06 f10e 	mul.w	r1, r6, lr
 80002dc:	4299      	cmp	r1, r3
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x60>
 80002e0:	18fb      	adds	r3, r7, r3
 80002e2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002e6:	f080 8119 	bcs.w	800051c <__udivmoddi4+0x288>
 80002ea:	4299      	cmp	r1, r3
 80002ec:	f240 8116 	bls.w	800051c <__udivmoddi4+0x288>
 80002f0:	3e02      	subs	r6, #2
 80002f2:	443b      	add	r3, r7
 80002f4:	1a5b      	subs	r3, r3, r1
 80002f6:	b2a4      	uxth	r4, r4
 80002f8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002fc:	fb08 3310 	mls	r3, r8, r0, r3
 8000300:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000304:	fb00 fe0e 	mul.w	lr, r0, lr
 8000308:	45a6      	cmp	lr, r4
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x8c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	f080 8105 	bcs.w	8000520 <__udivmoddi4+0x28c>
 8000316:	45a6      	cmp	lr, r4
 8000318:	f240 8102 	bls.w	8000520 <__udivmoddi4+0x28c>
 800031c:	3802      	subs	r0, #2
 800031e:	443c      	add	r4, r7
 8000320:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000324:	eba4 040e 	sub.w	r4, r4, lr
 8000328:	2600      	movs	r6, #0
 800032a:	b11d      	cbz	r5, 8000334 <__udivmoddi4+0xa0>
 800032c:	40d4      	lsrs	r4, r2
 800032e:	2300      	movs	r3, #0
 8000330:	e9c5 4300 	strd	r4, r3, [r5]
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	b902      	cbnz	r2, 800033e <__udivmoddi4+0xaa>
 800033c:	deff      	udf	#255	; 0xff
 800033e:	fab2 f282 	clz	r2, r2
 8000342:	2a00      	cmp	r2, #0
 8000344:	d150      	bne.n	80003e8 <__udivmoddi4+0x154>
 8000346:	1bcb      	subs	r3, r1, r7
 8000348:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800034c:	fa1f f887 	uxth.w	r8, r7
 8000350:	2601      	movs	r6, #1
 8000352:	fbb3 fcfe 	udiv	ip, r3, lr
 8000356:	0c21      	lsrs	r1, r4, #16
 8000358:	fb0e 331c 	mls	r3, lr, ip, r3
 800035c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000360:	fb08 f30c 	mul.w	r3, r8, ip
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xe4>
 8000368:	1879      	adds	r1, r7, r1
 800036a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0xe2>
 8000370:	428b      	cmp	r3, r1
 8000372:	f200 80e9 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 8000376:	4684      	mov	ip, r0
 8000378:	1ac9      	subs	r1, r1, r3
 800037a:	b2a3      	uxth	r3, r4
 800037c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000380:	fb0e 1110 	mls	r1, lr, r0, r1
 8000384:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000388:	fb08 f800 	mul.w	r8, r8, r0
 800038c:	45a0      	cmp	r8, r4
 800038e:	d907      	bls.n	80003a0 <__udivmoddi4+0x10c>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 33ff 	add.w	r3, r0, #4294967295
 8000396:	d202      	bcs.n	800039e <__udivmoddi4+0x10a>
 8000398:	45a0      	cmp	r8, r4
 800039a:	f200 80d9 	bhi.w	8000550 <__udivmoddi4+0x2bc>
 800039e:	4618      	mov	r0, r3
 80003a0:	eba4 0408 	sub.w	r4, r4, r8
 80003a4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a8:	e7bf      	b.n	800032a <__udivmoddi4+0x96>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0x12e>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80b1 	beq.w	8000516 <__udivmoddi4+0x282>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x1cc>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0x140>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80b8 	bhi.w	8000544 <__udivmoddi4+0x2b0>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0103 	sbc.w	r1, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	468c      	mov	ip, r1
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0a8      	beq.n	8000334 <__udivmoddi4+0xa0>
 80003e2:	e9c5 4c00 	strd	r4, ip, [r5]
 80003e6:	e7a5      	b.n	8000334 <__udivmoddi4+0xa0>
 80003e8:	f1c2 0320 	rsb	r3, r2, #32
 80003ec:	fa20 f603 	lsr.w	r6, r0, r3
 80003f0:	4097      	lsls	r7, r2
 80003f2:	fa01 f002 	lsl.w	r0, r1, r2
 80003f6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fa:	40d9      	lsrs	r1, r3
 80003fc:	4330      	orrs	r0, r6
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	fbb1 f6fe 	udiv	r6, r1, lr
 8000404:	fa1f f887 	uxth.w	r8, r7
 8000408:	fb0e 1116 	mls	r1, lr, r6, r1
 800040c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000410:	fb06 f108 	mul.w	r1, r6, r8
 8000414:	4299      	cmp	r1, r3
 8000416:	fa04 f402 	lsl.w	r4, r4, r2
 800041a:	d909      	bls.n	8000430 <__udivmoddi4+0x19c>
 800041c:	18fb      	adds	r3, r7, r3
 800041e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000422:	f080 808d 	bcs.w	8000540 <__udivmoddi4+0x2ac>
 8000426:	4299      	cmp	r1, r3
 8000428:	f240 808a 	bls.w	8000540 <__udivmoddi4+0x2ac>
 800042c:	3e02      	subs	r6, #2
 800042e:	443b      	add	r3, r7
 8000430:	1a5b      	subs	r3, r3, r1
 8000432:	b281      	uxth	r1, r0
 8000434:	fbb3 f0fe 	udiv	r0, r3, lr
 8000438:	fb0e 3310 	mls	r3, lr, r0, r3
 800043c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000440:	fb00 f308 	mul.w	r3, r0, r8
 8000444:	428b      	cmp	r3, r1
 8000446:	d907      	bls.n	8000458 <__udivmoddi4+0x1c4>
 8000448:	1879      	adds	r1, r7, r1
 800044a:	f100 3cff 	add.w	ip, r0, #4294967295
 800044e:	d273      	bcs.n	8000538 <__udivmoddi4+0x2a4>
 8000450:	428b      	cmp	r3, r1
 8000452:	d971      	bls.n	8000538 <__udivmoddi4+0x2a4>
 8000454:	3802      	subs	r0, #2
 8000456:	4439      	add	r1, r7
 8000458:	1acb      	subs	r3, r1, r3
 800045a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800045e:	e778      	b.n	8000352 <__udivmoddi4+0xbe>
 8000460:	f1c6 0c20 	rsb	ip, r6, #32
 8000464:	fa03 f406 	lsl.w	r4, r3, r6
 8000468:	fa22 f30c 	lsr.w	r3, r2, ip
 800046c:	431c      	orrs	r4, r3
 800046e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800047a:	fa21 f10c 	lsr.w	r1, r1, ip
 800047e:	431f      	orrs	r7, r3
 8000480:	0c3b      	lsrs	r3, r7, #16
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fa1f f884 	uxth.w	r8, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000492:	fb09 fa08 	mul.w	sl, r9, r8
 8000496:	458a      	cmp	sl, r1
 8000498:	fa02 f206 	lsl.w	r2, r2, r6
 800049c:	fa00 f306 	lsl.w	r3, r0, r6
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x220>
 80004a2:	1861      	adds	r1, r4, r1
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	d248      	bcs.n	800053c <__udivmoddi4+0x2a8>
 80004aa:	458a      	cmp	sl, r1
 80004ac:	d946      	bls.n	800053c <__udivmoddi4+0x2a8>
 80004ae:	f1a9 0902 	sub.w	r9, r9, #2
 80004b2:	4421      	add	r1, r4
 80004b4:	eba1 010a 	sub.w	r1, r1, sl
 80004b8:	b2bf      	uxth	r7, r7
 80004ba:	fbb1 f0fe 	udiv	r0, r1, lr
 80004be:	fb0e 1110 	mls	r1, lr, r0, r1
 80004c2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004c6:	fb00 f808 	mul.w	r8, r0, r8
 80004ca:	45b8      	cmp	r8, r7
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x24a>
 80004ce:	19e7      	adds	r7, r4, r7
 80004d0:	f100 31ff 	add.w	r1, r0, #4294967295
 80004d4:	d22e      	bcs.n	8000534 <__udivmoddi4+0x2a0>
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d92c      	bls.n	8000534 <__udivmoddi4+0x2a0>
 80004da:	3802      	subs	r0, #2
 80004dc:	4427      	add	r7, r4
 80004de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e2:	eba7 0708 	sub.w	r7, r7, r8
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	454f      	cmp	r7, r9
 80004ec:	46c6      	mov	lr, r8
 80004ee:	4649      	mov	r1, r9
 80004f0:	d31a      	bcc.n	8000528 <__udivmoddi4+0x294>
 80004f2:	d017      	beq.n	8000524 <__udivmoddi4+0x290>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x27a>
 80004f6:	ebb3 020e 	subs.w	r2, r3, lr
 80004fa:	eb67 0701 	sbc.w	r7, r7, r1
 80004fe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000502:	40f2      	lsrs	r2, r6
 8000504:	ea4c 0202 	orr.w	r2, ip, r2
 8000508:	40f7      	lsrs	r7, r6
 800050a:	e9c5 2700 	strd	r2, r7, [r5]
 800050e:	2600      	movs	r6, #0
 8000510:	4631      	mov	r1, r6
 8000512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000516:	462e      	mov	r6, r5
 8000518:	4628      	mov	r0, r5
 800051a:	e70b      	b.n	8000334 <__udivmoddi4+0xa0>
 800051c:	4606      	mov	r6, r0
 800051e:	e6e9      	b.n	80002f4 <__udivmoddi4+0x60>
 8000520:	4618      	mov	r0, r3
 8000522:	e6fd      	b.n	8000320 <__udivmoddi4+0x8c>
 8000524:	4543      	cmp	r3, r8
 8000526:	d2e5      	bcs.n	80004f4 <__udivmoddi4+0x260>
 8000528:	ebb8 0e02 	subs.w	lr, r8, r2
 800052c:	eb69 0104 	sbc.w	r1, r9, r4
 8000530:	3801      	subs	r0, #1
 8000532:	e7df      	b.n	80004f4 <__udivmoddi4+0x260>
 8000534:	4608      	mov	r0, r1
 8000536:	e7d2      	b.n	80004de <__udivmoddi4+0x24a>
 8000538:	4660      	mov	r0, ip
 800053a:	e78d      	b.n	8000458 <__udivmoddi4+0x1c4>
 800053c:	4681      	mov	r9, r0
 800053e:	e7b9      	b.n	80004b4 <__udivmoddi4+0x220>
 8000540:	4666      	mov	r6, ip
 8000542:	e775      	b.n	8000430 <__udivmoddi4+0x19c>
 8000544:	4630      	mov	r0, r6
 8000546:	e74a      	b.n	80003de <__udivmoddi4+0x14a>
 8000548:	f1ac 0c02 	sub.w	ip, ip, #2
 800054c:	4439      	add	r1, r7
 800054e:	e713      	b.n	8000378 <__udivmoddi4+0xe4>
 8000550:	3802      	subs	r0, #2
 8000552:	443c      	add	r4, r7
 8000554:	e724      	b.n	80003a0 <__udivmoddi4+0x10c>
 8000556:	bf00      	nop

08000558 <__aeabi_idiv0>:
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop

0800055c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b088      	sub	sp, #32
 8000560:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000562:	f000 fc1f 	bl	8000da4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000566:	f000 f897 	bl	8000698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056a:	f000 f8ff 	bl	800076c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  // Enable the CYCCNT counter
  DWT_CTRL |= (1 << 0);
 800056e:	4b3b      	ldr	r3, [pc, #236]	; (800065c <main+0x100>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4a3a      	ldr	r2, [pc, #232]	; (800065c <main+0x100>)
 8000574:	f043 0301 	orr.w	r3, r3, #1
 8000578:	6013      	str	r3, [r2, #0]

  SEGGER_UART_init(500000);
 800057a:	4839      	ldr	r0, [pc, #228]	; (8000660 <main+0x104>)
 800057c:	f003 fefc 	bl	8004378 <SEGGER_UART_init>

  SEGGER_SYSVIEW_Conf();
 8000580:	f003 fc70 	bl	8003e64 <SEGGER_SYSVIEW_Conf>

  status = xTaskCreate(led_green_handler, "led_green_task", 200, NULL, 3, &ledg_task_handle);
 8000584:	4b37      	ldr	r3, [pc, #220]	; (8000664 <main+0x108>)
 8000586:	9301      	str	r3, [sp, #4]
 8000588:	2303      	movs	r3, #3
 800058a:	9300      	str	r3, [sp, #0]
 800058c:	2300      	movs	r3, #0
 800058e:	22c8      	movs	r2, #200	; 0xc8
 8000590:	4935      	ldr	r1, [pc, #212]	; (8000668 <main+0x10c>)
 8000592:	4836      	ldr	r0, [pc, #216]	; (800066c <main+0x110>)
 8000594:	f001 ff06 	bl	80023a4 <xTaskCreate>
 8000598:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 800059a:	697b      	ldr	r3, [r7, #20]
 800059c:	2b01      	cmp	r3, #1
 800059e:	d00a      	beq.n	80005b6 <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005a4:	f383 8811 	msr	BASEPRI, r3
 80005a8:	f3bf 8f6f 	isb	sy
 80005ac:	f3bf 8f4f 	dsb	sy
 80005b0:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005b2:	bf00      	nop
 80005b4:	e7fe      	b.n	80005b4 <main+0x58>

  next_task_handle = ledg_task_handle;
 80005b6:	4b2b      	ldr	r3, [pc, #172]	; (8000664 <main+0x108>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	4a2d      	ldr	r2, [pc, #180]	; (8000670 <main+0x114>)
 80005bc:	6013      	str	r3, [r2, #0]

  status = xTaskCreate(led_orange_handler, "led_orange_task", 200, NULL, 2, &ledo_task_handle);
 80005be:	4b2d      	ldr	r3, [pc, #180]	; (8000674 <main+0x118>)
 80005c0:	9301      	str	r3, [sp, #4]
 80005c2:	2302      	movs	r3, #2
 80005c4:	9300      	str	r3, [sp, #0]
 80005c6:	2300      	movs	r3, #0
 80005c8:	22c8      	movs	r2, #200	; 0xc8
 80005ca:	492b      	ldr	r1, [pc, #172]	; (8000678 <main+0x11c>)
 80005cc:	482b      	ldr	r0, [pc, #172]	; (800067c <main+0x120>)
 80005ce:	f001 fee9 	bl	80023a4 <xTaskCreate>
 80005d2:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80005d4:	697b      	ldr	r3, [r7, #20]
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d00a      	beq.n	80005f0 <main+0x94>
        __asm volatile
 80005da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005de:	f383 8811 	msr	BASEPRI, r3
 80005e2:	f3bf 8f6f 	isb	sy
 80005e6:	f3bf 8f4f 	dsb	sy
 80005ea:	60fb      	str	r3, [r7, #12]
    }
 80005ec:	bf00      	nop
 80005ee:	e7fe      	b.n	80005ee <main+0x92>

  status = xTaskCreate(led_red_handler, "led_red_task", 200, NULL, 1, &ledr_task_handle);
 80005f0:	4b23      	ldr	r3, [pc, #140]	; (8000680 <main+0x124>)
 80005f2:	9301      	str	r3, [sp, #4]
 80005f4:	2301      	movs	r3, #1
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	2300      	movs	r3, #0
 80005fa:	22c8      	movs	r2, #200	; 0xc8
 80005fc:	4921      	ldr	r1, [pc, #132]	; (8000684 <main+0x128>)
 80005fe:	4822      	ldr	r0, [pc, #136]	; (8000688 <main+0x12c>)
 8000600:	f001 fed0 	bl	80023a4 <xTaskCreate>
 8000604:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000606:	697b      	ldr	r3, [r7, #20]
 8000608:	2b01      	cmp	r3, #1
 800060a:	d00a      	beq.n	8000622 <main+0xc6>
        __asm volatile
 800060c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000610:	f383 8811 	msr	BASEPRI, r3
 8000614:	f3bf 8f6f 	isb	sy
 8000618:	f3bf 8f4f 	dsb	sy
 800061c:	60bb      	str	r3, [r7, #8]
    }
 800061e:	bf00      	nop
 8000620:	e7fe      	b.n	8000620 <main+0xc4>

  status = xTaskCreate(button_handler, "Button Task", 200, NULL, 4, &btn_task_handle);
 8000622:	4b1a      	ldr	r3, [pc, #104]	; (800068c <main+0x130>)
 8000624:	9301      	str	r3, [sp, #4]
 8000626:	2304      	movs	r3, #4
 8000628:	9300      	str	r3, [sp, #0]
 800062a:	2300      	movs	r3, #0
 800062c:	22c8      	movs	r2, #200	; 0xc8
 800062e:	4918      	ldr	r1, [pc, #96]	; (8000690 <main+0x134>)
 8000630:	4818      	ldr	r0, [pc, #96]	; (8000694 <main+0x138>)
 8000632:	f001 feb7 	bl	80023a4 <xTaskCreate>
 8000636:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000638:	697b      	ldr	r3, [r7, #20]
 800063a:	2b01      	cmp	r3, #1
 800063c:	d00a      	beq.n	8000654 <main+0xf8>
        __asm volatile
 800063e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000642:	f383 8811 	msr	BASEPRI, r3
 8000646:	f3bf 8f6f 	isb	sy
 800064a:	f3bf 8f4f 	dsb	sy
 800064e:	607b      	str	r3, [r7, #4]
    }
 8000650:	bf00      	nop
 8000652:	e7fe      	b.n	8000652 <main+0xf6>

  // start the freeRTOS schedular
  vTaskStartScheduler();
 8000654:	f002 f926 	bl	80028a4 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000658:	e7fe      	b.n	8000658 <main+0xfc>
 800065a:	bf00      	nop
 800065c:	e0001000 	.word	0xe0001000
 8000660:	0007a120 	.word	0x0007a120
 8000664:	20014340 	.word	0x20014340
 8000668:	080068bc 	.word	0x080068bc
 800066c:	08000a29 	.word	0x08000a29
 8000670:	20000038 	.word	0x20000038
 8000674:	20014348 	.word	0x20014348
 8000678:	080068cc 	.word	0x080068cc
 800067c:	08000a91 	.word	0x08000a91
 8000680:	2001434c 	.word	0x2001434c
 8000684:	080068dc 	.word	0x080068dc
 8000688:	08000af9 	.word	0x08000af9
 800068c:	20014344 	.word	0x20014344
 8000690:	080068ec 	.word	0x080068ec
 8000694:	08000b69 	.word	0x08000b69

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b094      	sub	sp, #80	; 0x50
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 0320 	add.w	r3, r7, #32
 80006a2:	2230      	movs	r2, #48	; 0x30
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f006 f8f4 	bl	8006894 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006bc:	2300      	movs	r3, #0
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	4b28      	ldr	r3, [pc, #160]	; (8000764 <SystemClock_Config+0xcc>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c4:	4a27      	ldr	r2, [pc, #156]	; (8000764 <SystemClock_Config+0xcc>)
 80006c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ca:	6413      	str	r3, [r2, #64]	; 0x40
 80006cc:	4b25      	ldr	r3, [pc, #148]	; (8000764 <SystemClock_Config+0xcc>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d8:	2300      	movs	r3, #0
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	4b22      	ldr	r3, [pc, #136]	; (8000768 <SystemClock_Config+0xd0>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a21      	ldr	r2, [pc, #132]	; (8000768 <SystemClock_Config+0xd0>)
 80006e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006e6:	6013      	str	r3, [r2, #0]
 80006e8:	4b1f      	ldr	r3, [pc, #124]	; (8000768 <SystemClock_Config+0xd0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f4:	2302      	movs	r3, #2
 80006f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f8:	2301      	movs	r3, #1
 80006fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006fc:	2310      	movs	r3, #16
 80006fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000700:	2302      	movs	r3, #2
 8000702:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000704:	2300      	movs	r3, #0
 8000706:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000708:	2308      	movs	r3, #8
 800070a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 800070c:	2332      	movs	r3, #50	; 0x32
 800070e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000710:	2304      	movs	r3, #4
 8000712:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000714:	2307      	movs	r3, #7
 8000716:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000718:	f107 0320 	add.w	r3, r7, #32
 800071c:	4618      	mov	r0, r3
 800071e:	f000 fe4d 	bl	80013bc <HAL_RCC_OscConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000728:	f000 fa58 	bl	8000bdc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072c:	230f      	movs	r3, #15
 800072e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000730:	2302      	movs	r3, #2
 8000732:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000738:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800073c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800073e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000742:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000744:	f107 030c 	add.w	r3, r7, #12
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f001 f8ae 	bl	80018ac <HAL_RCC_ClockConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000756:	f000 fa41 	bl	8000bdc <Error_Handler>
  }
}
 800075a:	bf00      	nop
 800075c:	3750      	adds	r7, #80	; 0x50
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800
 8000768:	40007000 	.word	0x40007000

0800076c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b08c      	sub	sp, #48	; 0x30
 8000770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000772:	f107 031c 	add.w	r3, r7, #28
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
 8000780:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	61bb      	str	r3, [r7, #24]
 8000786:	4ba2      	ldr	r3, [pc, #648]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4aa1      	ldr	r2, [pc, #644]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 800078c:	f043 0310 	orr.w	r3, r3, #16
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b9f      	ldr	r3, [pc, #636]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0310 	and.w	r3, r3, #16
 800079a:	61bb      	str	r3, [r7, #24]
 800079c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	617b      	str	r3, [r7, #20]
 80007a2:	4b9b      	ldr	r3, [pc, #620]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a9a      	ldr	r2, [pc, #616]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 80007a8:	f043 0304 	orr.w	r3, r3, #4
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b98      	ldr	r3, [pc, #608]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0304 	and.w	r3, r3, #4
 80007b6:	617b      	str	r3, [r7, #20]
 80007b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	613b      	str	r3, [r7, #16]
 80007be:	4b94      	ldr	r3, [pc, #592]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a93      	ldr	r2, [pc, #588]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 80007c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b91      	ldr	r3, [pc, #580]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007d2:	613b      	str	r3, [r7, #16]
 80007d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	60fb      	str	r3, [r7, #12]
 80007da:	4b8d      	ldr	r3, [pc, #564]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a8c      	ldr	r2, [pc, #560]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b8a      	ldr	r3, [pc, #552]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	4b86      	ldr	r3, [pc, #536]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a85      	ldr	r2, [pc, #532]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 80007fc:	f043 0302 	orr.w	r3, r3, #2
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b83      	ldr	r3, [pc, #524]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0302 	and.w	r3, r3, #2
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	4b7f      	ldr	r3, [pc, #508]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a7e      	ldr	r2, [pc, #504]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 8000818:	f043 0308 	orr.w	r3, r3, #8
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b7c      	ldr	r3, [pc, #496]	; (8000a10 <MX_GPIO_Init+0x2a4>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0308 	and.w	r3, r3, #8
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	2108      	movs	r1, #8
 800082e:	4879      	ldr	r0, [pc, #484]	; (8000a14 <MX_GPIO_Init+0x2a8>)
 8000830:	f000 fd90 	bl	8001354 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000834:	2201      	movs	r2, #1
 8000836:	2101      	movs	r1, #1
 8000838:	4877      	ldr	r0, [pc, #476]	; (8000a18 <MX_GPIO_Init+0x2ac>)
 800083a:	f000 fd8b 	bl	8001354 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800083e:	2200      	movs	r2, #0
 8000840:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000844:	4875      	ldr	r0, [pc, #468]	; (8000a1c <MX_GPIO_Init+0x2b0>)
 8000846:	f000 fd85 	bl	8001354 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800084a:	2308      	movs	r3, #8
 800084c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084e:	2301      	movs	r3, #1
 8000850:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000856:	2300      	movs	r3, #0
 8000858:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	4619      	mov	r1, r3
 8000860:	486c      	ldr	r0, [pc, #432]	; (8000a14 <MX_GPIO_Init+0x2a8>)
 8000862:	f000 fbc3 	bl	8000fec <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000866:	2301      	movs	r3, #1
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086a:	2301      	movs	r3, #1
 800086c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	4619      	mov	r1, r3
 800087c:	4866      	ldr	r0, [pc, #408]	; (8000a18 <MX_GPIO_Init+0x2ac>)
 800087e:	f000 fbb5 	bl	8000fec <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000882:	2308      	movs	r3, #8
 8000884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000886:	2302      	movs	r3, #2
 8000888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	2300      	movs	r3, #0
 8000890:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000892:	2305      	movs	r3, #5
 8000894:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	4619      	mov	r1, r3
 800089c:	485e      	ldr	r0, [pc, #376]	; (8000a18 <MX_GPIO_Init+0x2ac>)
 800089e:	f000 fba5 	bl	8000fec <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008a2:	2301      	movs	r3, #1
 80008a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008a6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008b0:	f107 031c 	add.w	r3, r7, #28
 80008b4:	4619      	mov	r1, r3
 80008b6:	485a      	ldr	r0, [pc, #360]	; (8000a20 <MX_GPIO_Init+0x2b4>)
 80008b8:	f000 fb98 	bl	8000fec <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008bc:	2310      	movs	r3, #16
 80008be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c0:	2302      	movs	r3, #2
 80008c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c8:	2300      	movs	r3, #0
 80008ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008cc:	2306      	movs	r3, #6
 80008ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008d0:	f107 031c 	add.w	r3, r7, #28
 80008d4:	4619      	mov	r1, r3
 80008d6:	4852      	ldr	r0, [pc, #328]	; (8000a20 <MX_GPIO_Init+0x2b4>)
 80008d8:	f000 fb88 	bl	8000fec <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80008dc:	23e0      	movs	r3, #224	; 0xe0
 80008de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e0:	2302      	movs	r3, #2
 80008e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e8:	2300      	movs	r3, #0
 80008ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008ec:	2305      	movs	r3, #5
 80008ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f0:	f107 031c 	add.w	r3, r7, #28
 80008f4:	4619      	mov	r1, r3
 80008f6:	484a      	ldr	r0, [pc, #296]	; (8000a20 <MX_GPIO_Init+0x2b4>)
 80008f8:	f000 fb78 	bl	8000fec <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008fc:	2304      	movs	r3, #4
 80008fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000900:	2300      	movs	r3, #0
 8000902:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000908:	f107 031c 	add.w	r3, r7, #28
 800090c:	4619      	mov	r1, r3
 800090e:	4845      	ldr	r0, [pc, #276]	; (8000a24 <MX_GPIO_Init+0x2b8>)
 8000910:	f000 fb6c 	bl	8000fec <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000914:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091a:	2302      	movs	r3, #2
 800091c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	2300      	movs	r3, #0
 8000924:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000926:	2305      	movs	r3, #5
 8000928:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800092a:	f107 031c 	add.w	r3, r7, #28
 800092e:	4619      	mov	r1, r3
 8000930:	483c      	ldr	r0, [pc, #240]	; (8000a24 <MX_GPIO_Init+0x2b8>)
 8000932:	f000 fb5b 	bl	8000fec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000936:	f24f 0310 	movw	r3, #61456	; 0xf010
 800093a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093c:	2301      	movs	r3, #1
 800093e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000944:	2300      	movs	r3, #0
 8000946:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000948:	f107 031c 	add.w	r3, r7, #28
 800094c:	4619      	mov	r1, r3
 800094e:	4833      	ldr	r0, [pc, #204]	; (8000a1c <MX_GPIO_Init+0x2b0>)
 8000950:	f000 fb4c 	bl	8000fec <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000954:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095a:	2302      	movs	r3, #2
 800095c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000962:	2300      	movs	r3, #0
 8000964:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000966:	2306      	movs	r3, #6
 8000968:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	4829      	ldr	r0, [pc, #164]	; (8000a18 <MX_GPIO_Init+0x2ac>)
 8000972:	f000 fb3b 	bl	8000fec <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000976:	f44f 7300 	mov.w	r3, #512	; 0x200
 800097a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800097c:	2300      	movs	r3, #0
 800097e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000984:	f107 031c 	add.w	r3, r7, #28
 8000988:	4619      	mov	r1, r3
 800098a:	4825      	ldr	r0, [pc, #148]	; (8000a20 <MX_GPIO_Init+0x2b4>)
 800098c:	f000 fb2e 	bl	8000fec <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000990:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000996:	2302      	movs	r3, #2
 8000998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	2300      	movs	r3, #0
 80009a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009a2:	230a      	movs	r3, #10
 80009a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	481c      	ldr	r0, [pc, #112]	; (8000a20 <MX_GPIO_Init+0x2b4>)
 80009ae:	f000 fb1d 	bl	8000fec <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009b2:	2320      	movs	r3, #32
 80009b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b6:	2300      	movs	r3, #0
 80009b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	4619      	mov	r1, r3
 80009c4:	4815      	ldr	r0, [pc, #84]	; (8000a1c <MX_GPIO_Init+0x2b0>)
 80009c6:	f000 fb11 	bl	8000fec <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009ca:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009d0:	2312      	movs	r3, #18
 80009d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d8:	2300      	movs	r3, #0
 80009da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009dc:	2304      	movs	r3, #4
 80009de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e0:	f107 031c 	add.w	r3, r7, #28
 80009e4:	4619      	mov	r1, r3
 80009e6:	480f      	ldr	r0, [pc, #60]	; (8000a24 <MX_GPIO_Init+0x2b8>)
 80009e8:	f000 fb00 	bl	8000fec <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009ec:	2302      	movs	r3, #2
 80009ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009f0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	4619      	mov	r1, r3
 8000a00:	4804      	ldr	r0, [pc, #16]	; (8000a14 <MX_GPIO_Init+0x2a8>)
 8000a02:	f000 faf3 	bl	8000fec <HAL_GPIO_Init>

}
 8000a06:	bf00      	nop
 8000a08:	3730      	adds	r7, #48	; 0x30
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40021000 	.word	0x40021000
 8000a18:	40020800 	.word	0x40020800
 8000a1c:	40020c00 	.word	0x40020c00
 8000a20:	40020000 	.word	0x40020000
 8000a24:	40020400 	.word	0x40020400

08000a28 <led_green_handler>:

/* USER CODE BEGIN 4 */
static void led_green_handler(void *parameters)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af02      	add	r7, sp, #8
 8000a2e:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000a30:	4813      	ldr	r0, [pc, #76]	; (8000a80 <led_green_handler+0x58>)
 8000a32:	f005 fe51 	bl	80066d8 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 8000a36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a3a:	4812      	ldr	r0, [pc, #72]	; (8000a84 <led_green_handler+0x5c>)
 8000a3c:	f000 fca3 	bl	8001386 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(1000));
 8000a40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a44:	9300      	str	r3, [sp, #0]
 8000a46:	2300      	movs	r3, #0
 8000a48:	2200      	movs	r2, #0
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	f002 fadb 	bl	8003008 <xTaskGenericNotifyWait>
 8000a52:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE){
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	d1ea      	bne.n	8000a30 <led_green_handler+0x8>
			vTaskSuspendAll();
 8000a5a:	f001 ff7f 	bl	800295c <vTaskSuspendAll>
			next_task_handle = ledo_task_handle;
 8000a5e:	4b0a      	ldr	r3, [pc, #40]	; (8000a88 <led_green_handler+0x60>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a0a      	ldr	r2, [pc, #40]	; (8000a8c <led_green_handler+0x64>)
 8000a64:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000a66:	f001 ff87 	bl	8002978 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD, LED_GREEN_PIN, GPIO_PIN_SET);
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a70:	4804      	ldr	r0, [pc, #16]	; (8000a84 <led_green_handler+0x5c>)
 8000a72:	f000 fc6f 	bl	8001354 <HAL_GPIO_WritePin>
			vTaskDelete(NULL);
 8000a76:	2000      	movs	r0, #0
 8000a78:	f001 fe2e 	bl	80026d8 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000a7c:	e7d8      	b.n	8000a30 <led_green_handler+0x8>
 8000a7e:	bf00      	nop
 8000a80:	080068f8 	.word	0x080068f8
 8000a84:	40020c00 	.word	0x40020c00
 8000a88:	20014348 	.word	0x20014348
 8000a8c:	20000038 	.word	0x20000038

08000a90 <led_orange_handler>:
		}
	}
}

static void led_orange_handler(void *parameters)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b086      	sub	sp, #24
 8000a94:	af02      	add	r7, sp, #8
 8000a96:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000a98:	4813      	ldr	r0, [pc, #76]	; (8000ae8 <led_orange_handler+0x58>)
 8000a9a:	f005 fe1d 	bl	80066d8 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN);
 8000a9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aa2:	4812      	ldr	r0, [pc, #72]	; (8000aec <led_orange_handler+0x5c>)
 8000aa4:	f000 fc6f 	bl	8001386 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(800));
 8000aa8:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000aac:	9300      	str	r3, [sp, #0]
 8000aae:	2300      	movs	r3, #0
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	2000      	movs	r0, #0
 8000ab6:	f002 faa7 	bl	8003008 <xTaskGenericNotifyWait>
 8000aba:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE){
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	2b01      	cmp	r3, #1
 8000ac0:	d1ea      	bne.n	8000a98 <led_orange_handler+0x8>
			vTaskSuspendAll();
 8000ac2:	f001 ff4b 	bl	800295c <vTaskSuspendAll>
			next_task_handle = ledr_task_handle;
 8000ac6:	4b0a      	ldr	r3, [pc, #40]	; (8000af0 <led_orange_handler+0x60>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a0a      	ldr	r2, [pc, #40]	; (8000af4 <led_orange_handler+0x64>)
 8000acc:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000ace:	f001 ff53 	bl	8002978 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD, LED_ORANGE_PIN, GPIO_PIN_SET);
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ad8:	4804      	ldr	r0, [pc, #16]	; (8000aec <led_orange_handler+0x5c>)
 8000ada:	f000 fc3b 	bl	8001354 <HAL_GPIO_WritePin>
			vTaskDelete(NULL);
 8000ade:	2000      	movs	r0, #0
 8000ae0:	f001 fdfa 	bl	80026d8 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000ae4:	e7d8      	b.n	8000a98 <led_orange_handler+0x8>
 8000ae6:	bf00      	nop
 8000ae8:	0800690c 	.word	0x0800690c
 8000aec:	40020c00 	.word	0x40020c00
 8000af0:	2001434c 	.word	0x2001434c
 8000af4:	20000038 	.word	0x20000038

08000af8 <led_red_handler>:
		}
	}
}

static void led_red_handler(void *parameters)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b086      	sub	sp, #24
 8000afc:	af02      	add	r7, sp, #8
 8000afe:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000b00:	4815      	ldr	r0, [pc, #84]	; (8000b58 <led_red_handler+0x60>)
 8000b02:	f005 fde9 	bl	80066d8 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000b06:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b0a:	4814      	ldr	r0, [pc, #80]	; (8000b5c <led_red_handler+0x64>)
 8000b0c:	f000 fc3b 	bl	8001386 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(400));
 8000b10:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000b14:	9300      	str	r3, [sp, #0]
 8000b16:	2300      	movs	r3, #0
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	f002 fa73 	bl	8003008 <xTaskGenericNotifyWait>
 8000b22:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE){
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	d1ea      	bne.n	8000b00 <led_red_handler+0x8>
			vTaskSuspendAll();
 8000b2a:	f001 ff17 	bl	800295c <vTaskSuspendAll>
			next_task_handle = NULL;
 8000b2e:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <led_red_handler+0x68>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
			xTaskResumeAll();
 8000b34:	f001 ff20 	bl	8002978 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD, LED_RED_PIN, GPIO_PIN_SET);
 8000b38:	2201      	movs	r2, #1
 8000b3a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b3e:	4807      	ldr	r0, [pc, #28]	; (8000b5c <led_red_handler+0x64>)
 8000b40:	f000 fc08 	bl	8001354 <HAL_GPIO_WritePin>
			vTaskDelete(btn_task_handle);
 8000b44:	4b07      	ldr	r3, [pc, #28]	; (8000b64 <led_red_handler+0x6c>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f001 fdc5 	bl	80026d8 <vTaskDelete>
			vTaskDelete(NULL);
 8000b4e:	2000      	movs	r0, #0
 8000b50:	f001 fdc2 	bl	80026d8 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000b54:	e7d4      	b.n	8000b00 <led_red_handler+0x8>
 8000b56:	bf00      	nop
 8000b58:	08006920 	.word	0x08006920
 8000b5c:	40020c00 	.word	0x40020c00
 8000b60:	20000038 	.word	0x20000038
 8000b64:	20014344 	.word	0x20014344

08000b68 <button_handler>:
		}
	}
}

static void button_handler(void *parameters)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af02      	add	r7, sp, #8
 8000b6e:	6078      	str	r0, [r7, #4]
	uint8_t btn_read = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	73bb      	strb	r3, [r7, #14]
	uint8_t prev_read = 0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	73fb      	strb	r3, [r7, #15]

	while(1)
	{
		btn_read = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000b78:	2101      	movs	r1, #1
 8000b7a:	480d      	ldr	r0, [pc, #52]	; (8000bb0 <button_handler+0x48>)
 8000b7c:	f000 fbd2 	bl	8001324 <HAL_GPIO_ReadPin>
 8000b80:	4603      	mov	r3, r0
 8000b82:	73bb      	strb	r3, [r7, #14]
		if(btn_read)
 8000b84:	7bbb      	ldrb	r3, [r7, #14]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d00b      	beq.n	8000ba2 <button_handler+0x3a>
		{
			if(! prev_read)
 8000b8a:	7bfb      	ldrb	r3, [r7, #15]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d108      	bne.n	8000ba2 <button_handler+0x3a>
				xTaskNotify(next_task_handle, 0, eNoAction);
 8000b90:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <button_handler+0x4c>)
 8000b92:	6818      	ldr	r0, [r3, #0]
 8000b94:	2300      	movs	r3, #0
 8000b96:	9300      	str	r3, [sp, #0]
 8000b98:	2300      	movs	r3, #0
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	f002 fabb 	bl	8003118 <xTaskGenericNotify>
		}
		prev_read = btn_read;
 8000ba2:	7bbb      	ldrb	r3, [r7, #14]
 8000ba4:	73fb      	strb	r3, [r7, #15]
		vTaskDelay(pdMS_TO_TICKS(10));
 8000ba6:	200a      	movs	r0, #10
 8000ba8:	f001 fe44 	bl	8002834 <vTaskDelay>
		btn_read = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000bac:	e7e4      	b.n	8000b78 <button_handler+0x10>
 8000bae:	bf00      	nop
 8000bb0:	40020000 	.word	0x40020000
 8000bb4:	20000038 	.word	0x20000038

08000bb8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a04      	ldr	r2, [pc, #16]	; (8000bd8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d101      	bne.n	8000bce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bca:	f000 f90d 	bl	8000de8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40001000 	.word	0x40001000

08000bdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be0:	b672      	cpsid	i
}
 8000be2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <Error_Handler+0x8>
	...

08000be8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	607b      	str	r3, [r7, #4]
 8000bf2:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <HAL_MspInit+0x4c>)
 8000bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf6:	4a0f      	ldr	r2, [pc, #60]	; (8000c34 <HAL_MspInit+0x4c>)
 8000bf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bfc:	6453      	str	r3, [r2, #68]	; 0x44
 8000bfe:	4b0d      	ldr	r3, [pc, #52]	; (8000c34 <HAL_MspInit+0x4c>)
 8000c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	603b      	str	r3, [r7, #0]
 8000c0e:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <HAL_MspInit+0x4c>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	4a08      	ldr	r2, [pc, #32]	; (8000c34 <HAL_MspInit+0x4c>)
 8000c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c18:	6413      	str	r3, [r2, #64]	; 0x40
 8000c1a:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <HAL_MspInit+0x4c>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c22:	603b      	str	r3, [r7, #0]
 8000c24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000c26:	f002 fd67 	bl	80036f8 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40023800 	.word	0x40023800

08000c38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08c      	sub	sp, #48	; 0x30
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c40:	2300      	movs	r3, #0
 8000c42:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c44:	2300      	movs	r3, #0
 8000c46:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	6879      	ldr	r1, [r7, #4]
 8000c4c:	2036      	movs	r0, #54	; 0x36
 8000c4e:	f000 f9a3 	bl	8000f98 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c52:	2036      	movs	r0, #54	; 0x36
 8000c54:	f000 f9bc 	bl	8000fd0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c58:	2300      	movs	r3, #0
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	4b1f      	ldr	r3, [pc, #124]	; (8000cdc <HAL_InitTick+0xa4>)
 8000c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c60:	4a1e      	ldr	r2, [pc, #120]	; (8000cdc <HAL_InitTick+0xa4>)
 8000c62:	f043 0310 	orr.w	r3, r3, #16
 8000c66:	6413      	str	r3, [r2, #64]	; 0x40
 8000c68:	4b1c      	ldr	r3, [pc, #112]	; (8000cdc <HAL_InitTick+0xa4>)
 8000c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6c:	f003 0310 	and.w	r3, r3, #16
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c74:	f107 0210 	add.w	r2, r7, #16
 8000c78:	f107 0314 	add.w	r3, r7, #20
 8000c7c:	4611      	mov	r1, r2
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f000 fffc 	bl	8001c7c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000c84:	f000 ffe6 	bl	8001c54 <HAL_RCC_GetPCLK1Freq>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c90:	4a13      	ldr	r2, [pc, #76]	; (8000ce0 <HAL_InitTick+0xa8>)
 8000c92:	fba2 2303 	umull	r2, r3, r2, r3
 8000c96:	0c9b      	lsrs	r3, r3, #18
 8000c98:	3b01      	subs	r3, #1
 8000c9a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c9c:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <HAL_InitTick+0xac>)
 8000c9e:	4a12      	ldr	r2, [pc, #72]	; (8000ce8 <HAL_InitTick+0xb0>)
 8000ca0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ca2:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <HAL_InitTick+0xac>)
 8000ca4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ca8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000caa:	4a0e      	ldr	r2, [pc, #56]	; (8000ce4 <HAL_InitTick+0xac>)
 8000cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cae:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <HAL_InitTick+0xac>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <HAL_InitTick+0xac>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000cbc:	4809      	ldr	r0, [pc, #36]	; (8000ce4 <HAL_InitTick+0xac>)
 8000cbe:	f001 f80f 	bl	8001ce0 <HAL_TIM_Base_Init>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d104      	bne.n	8000cd2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000cc8:	4806      	ldr	r0, [pc, #24]	; (8000ce4 <HAL_InitTick+0xac>)
 8000cca:	f001 f863 	bl	8001d94 <HAL_TIM_Base_Start_IT>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	e000      	b.n	8000cd4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3730      	adds	r7, #48	; 0x30
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	431bde83 	.word	0x431bde83
 8000ce4:	20014350 	.word	0x20014350
 8000ce8:	40001000 	.word	0x40001000

08000cec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <NMI_Handler+0x4>

08000cf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf6:	e7fe      	b.n	8000cf6 <HardFault_Handler+0x4>

08000cf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <MemManage_Handler+0x4>

08000cfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d02:	e7fe      	b.n	8000d02 <BusFault_Handler+0x4>

08000d04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <UsageFault_Handler+0x4>

08000d0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d1c:	4802      	ldr	r0, [pc, #8]	; (8000d28 <TIM6_DAC_IRQHandler+0x10>)
 8000d1e:	f001 f8a9 	bl	8001e74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20014350 	.word	0x20014350

08000d2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d30:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <SystemInit+0x20>)
 8000d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d36:	4a05      	ldr	r2, [pc, #20]	; (8000d4c <SystemInit+0x20>)
 8000d38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d54:	480d      	ldr	r0, [pc, #52]	; (8000d8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d56:	490e      	ldr	r1, [pc, #56]	; (8000d90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d58:	4a0e      	ldr	r2, [pc, #56]	; (8000d94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d5c:	e002      	b.n	8000d64 <LoopCopyDataInit>

08000d5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d62:	3304      	adds	r3, #4

08000d64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d68:	d3f9      	bcc.n	8000d5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d6a:	4a0b      	ldr	r2, [pc, #44]	; (8000d98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d6c:	4c0b      	ldr	r4, [pc, #44]	; (8000d9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d70:	e001      	b.n	8000d76 <LoopFillZerobss>

08000d72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d74:	3204      	adds	r2, #4

08000d76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d78:	d3fb      	bcc.n	8000d72 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d7a:	f7ff ffd7 	bl	8000d2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d7e:	f005 fd49 	bl	8006814 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d82:	f7ff fbeb 	bl	800055c <main>
  bx  lr    
 8000d86:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d90:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000d94:	08006a60 	.word	0x08006a60
  ldr r2, =_sbss
 8000d98:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000d9c:	20014444 	.word	0x20014444

08000da0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000da0:	e7fe      	b.n	8000da0 <ADC_IRQHandler>
	...

08000da4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000da8:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <HAL_Init+0x40>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a0d      	ldr	r2, [pc, #52]	; (8000de4 <HAL_Init+0x40>)
 8000dae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000db2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000db4:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <HAL_Init+0x40>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a0a      	ldr	r2, [pc, #40]	; (8000de4 <HAL_Init+0x40>)
 8000dba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dc0:	4b08      	ldr	r3, [pc, #32]	; (8000de4 <HAL_Init+0x40>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a07      	ldr	r2, [pc, #28]	; (8000de4 <HAL_Init+0x40>)
 8000dc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dcc:	2003      	movs	r0, #3
 8000dce:	f000 f8d8 	bl	8000f82 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dd2:	200f      	movs	r0, #15
 8000dd4:	f7ff ff30 	bl	8000c38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dd8:	f7ff ff06 	bl	8000be8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ddc:	2300      	movs	r3, #0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40023c00 	.word	0x40023c00

08000de8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dec:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <HAL_IncTick+0x20>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	461a      	mov	r2, r3
 8000df2:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <HAL_IncTick+0x24>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4413      	add	r3, r2
 8000df8:	4a04      	ldr	r2, [pc, #16]	; (8000e0c <HAL_IncTick+0x24>)
 8000dfa:	6013      	str	r3, [r2, #0]
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	20000008 	.word	0x20000008
 8000e0c:	20014398 	.word	0x20014398

08000e10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  return uwTick;
 8000e14:	4b03      	ldr	r3, [pc, #12]	; (8000e24 <HAL_GetTick+0x14>)
 8000e16:	681b      	ldr	r3, [r3, #0]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	20014398 	.word	0x20014398

08000e28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	f003 0307 	and.w	r3, r3, #7
 8000e36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e38:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <__NVIC_SetPriorityGrouping+0x44>)
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e3e:	68ba      	ldr	r2, [r7, #8]
 8000e40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e44:	4013      	ands	r3, r2
 8000e46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e5a:	4a04      	ldr	r2, [pc, #16]	; (8000e6c <__NVIC_SetPriorityGrouping+0x44>)
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	60d3      	str	r3, [r2, #12]
}
 8000e60:	bf00      	nop
 8000e62:	3714      	adds	r7, #20
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e74:	4b04      	ldr	r3, [pc, #16]	; (8000e88 <__NVIC_GetPriorityGrouping+0x18>)
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	0a1b      	lsrs	r3, r3, #8
 8000e7a:	f003 0307 	and.w	r3, r3, #7
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	db0b      	blt.n	8000eb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	f003 021f 	and.w	r2, r3, #31
 8000ea4:	4907      	ldr	r1, [pc, #28]	; (8000ec4 <__NVIC_EnableIRQ+0x38>)
 8000ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eaa:	095b      	lsrs	r3, r3, #5
 8000eac:	2001      	movs	r0, #1
 8000eae:	fa00 f202 	lsl.w	r2, r0, r2
 8000eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	e000e100 	.word	0xe000e100

08000ec8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	6039      	str	r1, [r7, #0]
 8000ed2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	db0a      	blt.n	8000ef2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	b2da      	uxtb	r2, r3
 8000ee0:	490c      	ldr	r1, [pc, #48]	; (8000f14 <__NVIC_SetPriority+0x4c>)
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	0112      	lsls	r2, r2, #4
 8000ee8:	b2d2      	uxtb	r2, r2
 8000eea:	440b      	add	r3, r1
 8000eec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ef0:	e00a      	b.n	8000f08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	4908      	ldr	r1, [pc, #32]	; (8000f18 <__NVIC_SetPriority+0x50>)
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	f003 030f 	and.w	r3, r3, #15
 8000efe:	3b04      	subs	r3, #4
 8000f00:	0112      	lsls	r2, r2, #4
 8000f02:	b2d2      	uxtb	r2, r2
 8000f04:	440b      	add	r3, r1
 8000f06:	761a      	strb	r2, [r3, #24]
}
 8000f08:	bf00      	nop
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	e000e100 	.word	0xe000e100
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b089      	sub	sp, #36	; 0x24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	f003 0307 	and.w	r3, r3, #7
 8000f2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	f1c3 0307 	rsb	r3, r3, #7
 8000f36:	2b04      	cmp	r3, #4
 8000f38:	bf28      	it	cs
 8000f3a:	2304      	movcs	r3, #4
 8000f3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	3304      	adds	r3, #4
 8000f42:	2b06      	cmp	r3, #6
 8000f44:	d902      	bls.n	8000f4c <NVIC_EncodePriority+0x30>
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	3b03      	subs	r3, #3
 8000f4a:	e000      	b.n	8000f4e <NVIC_EncodePriority+0x32>
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f50:	f04f 32ff 	mov.w	r2, #4294967295
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43da      	mvns	r2, r3
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	401a      	ands	r2, r3
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f64:	f04f 31ff 	mov.w	r1, #4294967295
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6e:	43d9      	mvns	r1, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f74:	4313      	orrs	r3, r2
         );
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3724      	adds	r7, #36	; 0x24
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b082      	sub	sp, #8
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f7ff ff4c 	bl	8000e28 <__NVIC_SetPriorityGrouping>
}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
 8000fa4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000faa:	f7ff ff61 	bl	8000e70 <__NVIC_GetPriorityGrouping>
 8000fae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	68b9      	ldr	r1, [r7, #8]
 8000fb4:	6978      	ldr	r0, [r7, #20]
 8000fb6:	f7ff ffb1 	bl	8000f1c <NVIC_EncodePriority>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc0:	4611      	mov	r1, r2
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff ff80 	bl	8000ec8 <__NVIC_SetPriority>
}
 8000fc8:	bf00      	nop
 8000fca:	3718      	adds	r7, #24
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff ff54 	bl	8000e8c <__NVIC_EnableIRQ>
}
 8000fe4:	bf00      	nop
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b089      	sub	sp, #36	; 0x24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001002:	2300      	movs	r3, #0
 8001004:	61fb      	str	r3, [r7, #28]
 8001006:	e16b      	b.n	80012e0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001008:	2201      	movs	r2, #1
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	697a      	ldr	r2, [r7, #20]
 8001018:	4013      	ands	r3, r2
 800101a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	429a      	cmp	r2, r3
 8001022:	f040 815a 	bne.w	80012da <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f003 0303 	and.w	r3, r3, #3
 800102e:	2b01      	cmp	r3, #1
 8001030:	d005      	beq.n	800103e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800103a:	2b02      	cmp	r3, #2
 800103c:	d130      	bne.n	80010a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	2203      	movs	r2, #3
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	43db      	mvns	r3, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4013      	ands	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	68da      	ldr	r2, [r3, #12]
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4313      	orrs	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001074:	2201      	movs	r2, #1
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	43db      	mvns	r3, r3
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4013      	ands	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	091b      	lsrs	r3, r3, #4
 800108a:	f003 0201 	and.w	r2, r3, #1
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4313      	orrs	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f003 0303 	and.w	r3, r3, #3
 80010a8:	2b03      	cmp	r3, #3
 80010aa:	d017      	beq.n	80010dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	2203      	movs	r2, #3
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	43db      	mvns	r3, r3
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4013      	ands	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	689a      	ldr	r2, [r3, #8]
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f003 0303 	and.w	r3, r3, #3
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d123      	bne.n	8001130 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	08da      	lsrs	r2, r3, #3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3208      	adds	r2, #8
 80010f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	f003 0307 	and.w	r3, r3, #7
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	220f      	movs	r2, #15
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	43db      	mvns	r3, r3
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4013      	ands	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	691a      	ldr	r2, [r3, #16]
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	f003 0307 	and.w	r3, r3, #7
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4313      	orrs	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	08da      	lsrs	r2, r3, #3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	3208      	adds	r2, #8
 800112a:	69b9      	ldr	r1, [r7, #24]
 800112c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	2203      	movs	r2, #3
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	43db      	mvns	r3, r3
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4013      	ands	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f003 0203 	and.w	r2, r3, #3
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4313      	orrs	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800116c:	2b00      	cmp	r3, #0
 800116e:	f000 80b4 	beq.w	80012da <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	4b60      	ldr	r3, [pc, #384]	; (80012f8 <HAL_GPIO_Init+0x30c>)
 8001178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117a:	4a5f      	ldr	r2, [pc, #380]	; (80012f8 <HAL_GPIO_Init+0x30c>)
 800117c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001180:	6453      	str	r3, [r2, #68]	; 0x44
 8001182:	4b5d      	ldr	r3, [pc, #372]	; (80012f8 <HAL_GPIO_Init+0x30c>)
 8001184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001186:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800118e:	4a5b      	ldr	r2, [pc, #364]	; (80012fc <HAL_GPIO_Init+0x310>)
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	089b      	lsrs	r3, r3, #2
 8001194:	3302      	adds	r3, #2
 8001196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800119a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	f003 0303 	and.w	r3, r3, #3
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	220f      	movs	r2, #15
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	43db      	mvns	r3, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4013      	ands	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a52      	ldr	r2, [pc, #328]	; (8001300 <HAL_GPIO_Init+0x314>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d02b      	beq.n	8001212 <HAL_GPIO_Init+0x226>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a51      	ldr	r2, [pc, #324]	; (8001304 <HAL_GPIO_Init+0x318>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d025      	beq.n	800120e <HAL_GPIO_Init+0x222>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a50      	ldr	r2, [pc, #320]	; (8001308 <HAL_GPIO_Init+0x31c>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d01f      	beq.n	800120a <HAL_GPIO_Init+0x21e>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a4f      	ldr	r2, [pc, #316]	; (800130c <HAL_GPIO_Init+0x320>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d019      	beq.n	8001206 <HAL_GPIO_Init+0x21a>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a4e      	ldr	r2, [pc, #312]	; (8001310 <HAL_GPIO_Init+0x324>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d013      	beq.n	8001202 <HAL_GPIO_Init+0x216>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a4d      	ldr	r2, [pc, #308]	; (8001314 <HAL_GPIO_Init+0x328>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d00d      	beq.n	80011fe <HAL_GPIO_Init+0x212>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a4c      	ldr	r2, [pc, #304]	; (8001318 <HAL_GPIO_Init+0x32c>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d007      	beq.n	80011fa <HAL_GPIO_Init+0x20e>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a4b      	ldr	r2, [pc, #300]	; (800131c <HAL_GPIO_Init+0x330>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d101      	bne.n	80011f6 <HAL_GPIO_Init+0x20a>
 80011f2:	2307      	movs	r3, #7
 80011f4:	e00e      	b.n	8001214 <HAL_GPIO_Init+0x228>
 80011f6:	2308      	movs	r3, #8
 80011f8:	e00c      	b.n	8001214 <HAL_GPIO_Init+0x228>
 80011fa:	2306      	movs	r3, #6
 80011fc:	e00a      	b.n	8001214 <HAL_GPIO_Init+0x228>
 80011fe:	2305      	movs	r3, #5
 8001200:	e008      	b.n	8001214 <HAL_GPIO_Init+0x228>
 8001202:	2304      	movs	r3, #4
 8001204:	e006      	b.n	8001214 <HAL_GPIO_Init+0x228>
 8001206:	2303      	movs	r3, #3
 8001208:	e004      	b.n	8001214 <HAL_GPIO_Init+0x228>
 800120a:	2302      	movs	r3, #2
 800120c:	e002      	b.n	8001214 <HAL_GPIO_Init+0x228>
 800120e:	2301      	movs	r3, #1
 8001210:	e000      	b.n	8001214 <HAL_GPIO_Init+0x228>
 8001212:	2300      	movs	r3, #0
 8001214:	69fa      	ldr	r2, [r7, #28]
 8001216:	f002 0203 	and.w	r2, r2, #3
 800121a:	0092      	lsls	r2, r2, #2
 800121c:	4093      	lsls	r3, r2
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4313      	orrs	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001224:	4935      	ldr	r1, [pc, #212]	; (80012fc <HAL_GPIO_Init+0x310>)
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	089b      	lsrs	r3, r3, #2
 800122a:	3302      	adds	r3, #2
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001232:	4b3b      	ldr	r3, [pc, #236]	; (8001320 <HAL_GPIO_Init+0x334>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	43db      	mvns	r3, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4013      	ands	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d003      	beq.n	8001256 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	4313      	orrs	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001256:	4a32      	ldr	r2, [pc, #200]	; (8001320 <HAL_GPIO_Init+0x334>)
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800125c:	4b30      	ldr	r3, [pc, #192]	; (8001320 <HAL_GPIO_Init+0x334>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	43db      	mvns	r3, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d003      	beq.n	8001280 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	4313      	orrs	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001280:	4a27      	ldr	r2, [pc, #156]	; (8001320 <HAL_GPIO_Init+0x334>)
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001286:	4b26      	ldr	r3, [pc, #152]	; (8001320 <HAL_GPIO_Init+0x334>)
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	43db      	mvns	r3, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4013      	ands	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d003      	beq.n	80012aa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012aa:	4a1d      	ldr	r2, [pc, #116]	; (8001320 <HAL_GPIO_Init+0x334>)
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012b0:	4b1b      	ldr	r3, [pc, #108]	; (8001320 <HAL_GPIO_Init+0x334>)
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	43db      	mvns	r3, r3
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4013      	ands	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d003      	beq.n	80012d4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012d4:	4a12      	ldr	r2, [pc, #72]	; (8001320 <HAL_GPIO_Init+0x334>)
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	3301      	adds	r3, #1
 80012de:	61fb      	str	r3, [r7, #28]
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	2b0f      	cmp	r3, #15
 80012e4:	f67f ae90 	bls.w	8001008 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012e8:	bf00      	nop
 80012ea:	bf00      	nop
 80012ec:	3724      	adds	r7, #36	; 0x24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40013800 	.word	0x40013800
 8001300:	40020000 	.word	0x40020000
 8001304:	40020400 	.word	0x40020400
 8001308:	40020800 	.word	0x40020800
 800130c:	40020c00 	.word	0x40020c00
 8001310:	40021000 	.word	0x40021000
 8001314:	40021400 	.word	0x40021400
 8001318:	40021800 	.word	0x40021800
 800131c:	40021c00 	.word	0x40021c00
 8001320:	40013c00 	.word	0x40013c00

08001324 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	460b      	mov	r3, r1
 800132e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	691a      	ldr	r2, [r3, #16]
 8001334:	887b      	ldrh	r3, [r7, #2]
 8001336:	4013      	ands	r3, r2
 8001338:	2b00      	cmp	r3, #0
 800133a:	d002      	beq.n	8001342 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800133c:	2301      	movs	r3, #1
 800133e:	73fb      	strb	r3, [r7, #15]
 8001340:	e001      	b.n	8001346 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001342:	2300      	movs	r3, #0
 8001344:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001346:	7bfb      	ldrb	r3, [r7, #15]
}
 8001348:	4618      	mov	r0, r3
 800134a:	3714      	adds	r7, #20
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	460b      	mov	r3, r1
 800135e:	807b      	strh	r3, [r7, #2]
 8001360:	4613      	mov	r3, r2
 8001362:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001364:	787b      	ldrb	r3, [r7, #1]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d003      	beq.n	8001372 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800136a:	887a      	ldrh	r2, [r7, #2]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001370:	e003      	b.n	800137a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001372:	887b      	ldrh	r3, [r7, #2]
 8001374:	041a      	lsls	r2, r3, #16
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	619a      	str	r2, [r3, #24]
}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001386:	b480      	push	{r7}
 8001388:	b085      	sub	sp, #20
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
 800138e:	460b      	mov	r3, r1
 8001390:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	695b      	ldr	r3, [r3, #20]
 8001396:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001398:	887a      	ldrh	r2, [r7, #2]
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	4013      	ands	r3, r2
 800139e:	041a      	lsls	r2, r3, #16
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	43d9      	mvns	r1, r3
 80013a4:	887b      	ldrh	r3, [r7, #2]
 80013a6:	400b      	ands	r3, r1
 80013a8:	431a      	orrs	r2, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	619a      	str	r2, [r3, #24]
}
 80013ae:	bf00      	nop
 80013b0:	3714      	adds	r7, #20
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
	...

080013bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d101      	bne.n	80013ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e264      	b.n	8001898 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d075      	beq.n	80014c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013da:	4ba3      	ldr	r3, [pc, #652]	; (8001668 <HAL_RCC_OscConfig+0x2ac>)
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f003 030c 	and.w	r3, r3, #12
 80013e2:	2b04      	cmp	r3, #4
 80013e4:	d00c      	beq.n	8001400 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013e6:	4ba0      	ldr	r3, [pc, #640]	; (8001668 <HAL_RCC_OscConfig+0x2ac>)
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013ee:	2b08      	cmp	r3, #8
 80013f0:	d112      	bne.n	8001418 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013f2:	4b9d      	ldr	r3, [pc, #628]	; (8001668 <HAL_RCC_OscConfig+0x2ac>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013fe:	d10b      	bne.n	8001418 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001400:	4b99      	ldr	r3, [pc, #612]	; (8001668 <HAL_RCC_OscConfig+0x2ac>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d05b      	beq.n	80014c4 <HAL_RCC_OscConfig+0x108>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d157      	bne.n	80014c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	e23f      	b.n	8001898 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001420:	d106      	bne.n	8001430 <HAL_RCC_OscConfig+0x74>
 8001422:	4b91      	ldr	r3, [pc, #580]	; (8001668 <HAL_RCC_OscConfig+0x2ac>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a90      	ldr	r2, [pc, #576]	; (8001668 <HAL_RCC_OscConfig+0x2ac>)
 8001428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800142c:	6013      	str	r3, [r2, #0]
 800142e:	e01d      	b.n	800146c <HAL_RCC_OscConfig+0xb0>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001438:	d10c      	bne.n	8001454 <HAL_RCC_OscConfig+0x98>
 800143a:	4b8b      	ldr	r3, [pc, #556]	; (8001668 <HAL_RCC_OscConfig+0x2ac>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a8a      	ldr	r2, [pc, #552]	; (8001668 <HAL_RCC_OscConfig+0x2ac>)
 8001440:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001444:	6013      	str	r3, [r2, #0]
 8001446:	4b88      	ldr	r3, [pc, #544]	; (8001668 <HAL_RCC_OscConfig+0x2ac>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a87      	ldr	r2, [pc, #540]	; (8001668 <HAL_RCC_OscConfig+0x2ac>)
 800144c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001450:	6013      	str	r3, [r2, #0]
 8001452:	e00b      	b.n	800146c <HAL_RCC_OscConfig+0xb0>
 8001454:	4b84      	ldr	r3, [pc, #528]	; (8001668 <HAL_RCC_OscConfig+0x2ac>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a83      	ldr	r2, [pc, #524]	; (8001668 <HAL_RCC_OscConfig+0x2ac>)
 800145a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800145e:	6013      	str	r3, [r2, #0]
 8001460:	4b81      	ldr	r3, [pc, #516]	; (8001668 <HAL_RCC_OscConfig+0x2ac>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a80      	ldr	r2, [pc, #512]	; (8001668 <HAL_RCC_OscConfig+0x2ac>)
 8001466:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800146a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d013      	beq.n	800149c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001474:	f7ff fccc 	bl	8000e10 <HAL_GetTick>
 8001478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800147a:	e008      	b.n	800148e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800147c:	f7ff fcc8 	bl	8000e10 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b64      	cmp	r3, #100	; 0x64
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e204      	b.n	8001898 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800148e:	4b76      	ldr	r3, [pc, #472]	; (8001668 <HAL_RCC_OscConfig+0x2ac>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d0f0      	beq.n	800147c <HAL_RCC_OscConfig+0xc0>
 800149a:	e014      	b.n	80014c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800149c:	f7ff fcb8 	bl	8000e10 <HAL_GetTick>
 80014a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014a2:	e008      	b.n	80014b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014a4:	f7ff fcb4 	bl	8000e10 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b64      	cmp	r3, #100	; 0x64
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e1f0      	b.n	8001898 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014b6:	4b6c      	ldr	r3, [pc, #432]	; (8001668 <HAL_RCC_OscConfig+0x2ac>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d1f0      	bne.n	80014a4 <HAL_RCC_OscConfig+0xe8>
 80014c2:	e000      	b.n	80014c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d063      	beq.n	800159a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014d2:	4b65      	ldr	r3, [pc, #404]	; (8001668 <HAL_RCC_OscConfig+0x2ac>)
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	f003 030c 	and.w	r3, r3, #12
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d00b      	beq.n	80014f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014de:	4b62      	ldr	r3, [pc, #392]	; (8001668 <HAL_RCC_OscConfig+0x2ac>)
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014e6:	2b08      	cmp	r3, #8
 80014e8:	d11c      	bne.n	8001524 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014ea:	4b5f      	ldr	r3, [pc, #380]	; (8001668 <HAL_RCC_OscConfig+0x2ac>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d116      	bne.n	8001524 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014f6:	4b5c      	ldr	r3, [pc, #368]	; (8001668 <HAL_RCC_OscConfig+0x2ac>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d005      	beq.n	800150e <HAL_RCC_OscConfig+0x152>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d001      	beq.n	800150e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e1c4      	b.n	8001898 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800150e:	4b56      	ldr	r3, [pc, #344]	; (8001668 <HAL_RCC_OscConfig+0x2ac>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	691b      	ldr	r3, [r3, #16]
 800151a:	00db      	lsls	r3, r3, #3
 800151c:	4952      	ldr	r1, [pc, #328]	; (8001668 <HAL_RCC_OscConfig+0x2ac>)
 800151e:	4313      	orrs	r3, r2
 8001520:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001522:	e03a      	b.n	800159a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d020      	beq.n	800156e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800152c:	4b4f      	ldr	r3, [pc, #316]	; (800166c <HAL_RCC_OscConfig+0x2b0>)
 800152e:	2201      	movs	r2, #1
 8001530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001532:	f7ff fc6d 	bl	8000e10 <HAL_GetTick>
 8001536:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001538:	e008      	b.n	800154c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800153a:	f7ff fc69 	bl	8000e10 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	2b02      	cmp	r3, #2
 8001546:	d901      	bls.n	800154c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e1a5      	b.n	8001898 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800154c:	4b46      	ldr	r3, [pc, #280]	; (8001668 <HAL_RCC_OscConfig+0x2ac>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0302 	and.w	r3, r3, #2
 8001554:	2b00      	cmp	r3, #0
 8001556:	d0f0      	beq.n	800153a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001558:	4b43      	ldr	r3, [pc, #268]	; (8001668 <HAL_RCC_OscConfig+0x2ac>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	691b      	ldr	r3, [r3, #16]
 8001564:	00db      	lsls	r3, r3, #3
 8001566:	4940      	ldr	r1, [pc, #256]	; (8001668 <HAL_RCC_OscConfig+0x2ac>)
 8001568:	4313      	orrs	r3, r2
 800156a:	600b      	str	r3, [r1, #0]
 800156c:	e015      	b.n	800159a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800156e:	4b3f      	ldr	r3, [pc, #252]	; (800166c <HAL_RCC_OscConfig+0x2b0>)
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001574:	f7ff fc4c 	bl	8000e10 <HAL_GetTick>
 8001578:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800157a:	e008      	b.n	800158e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800157c:	f7ff fc48 	bl	8000e10 <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b02      	cmp	r3, #2
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e184      	b.n	8001898 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800158e:	4b36      	ldr	r3, [pc, #216]	; (8001668 <HAL_RCC_OscConfig+0x2ac>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d1f0      	bne.n	800157c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0308 	and.w	r3, r3, #8
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d030      	beq.n	8001608 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	695b      	ldr	r3, [r3, #20]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d016      	beq.n	80015dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015ae:	4b30      	ldr	r3, [pc, #192]	; (8001670 <HAL_RCC_OscConfig+0x2b4>)
 80015b0:	2201      	movs	r2, #1
 80015b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b4:	f7ff fc2c 	bl	8000e10 <HAL_GetTick>
 80015b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ba:	e008      	b.n	80015ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015bc:	f7ff fc28 	bl	8000e10 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e164      	b.n	8001898 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ce:	4b26      	ldr	r3, [pc, #152]	; (8001668 <HAL_RCC_OscConfig+0x2ac>)
 80015d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d0f0      	beq.n	80015bc <HAL_RCC_OscConfig+0x200>
 80015da:	e015      	b.n	8001608 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015dc:	4b24      	ldr	r3, [pc, #144]	; (8001670 <HAL_RCC_OscConfig+0x2b4>)
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e2:	f7ff fc15 	bl	8000e10 <HAL_GetTick>
 80015e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015e8:	e008      	b.n	80015fc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015ea:	f7ff fc11 	bl	8000e10 <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d901      	bls.n	80015fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e14d      	b.n	8001898 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015fc:	4b1a      	ldr	r3, [pc, #104]	; (8001668 <HAL_RCC_OscConfig+0x2ac>)
 80015fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	2b00      	cmp	r3, #0
 8001606:	d1f0      	bne.n	80015ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0304 	and.w	r3, r3, #4
 8001610:	2b00      	cmp	r3, #0
 8001612:	f000 80a0 	beq.w	8001756 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001616:	2300      	movs	r3, #0
 8001618:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800161a:	4b13      	ldr	r3, [pc, #76]	; (8001668 <HAL_RCC_OscConfig+0x2ac>)
 800161c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d10f      	bne.n	8001646 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	60bb      	str	r3, [r7, #8]
 800162a:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <HAL_RCC_OscConfig+0x2ac>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162e:	4a0e      	ldr	r2, [pc, #56]	; (8001668 <HAL_RCC_OscConfig+0x2ac>)
 8001630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001634:	6413      	str	r3, [r2, #64]	; 0x40
 8001636:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <HAL_RCC_OscConfig+0x2ac>)
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800163e:	60bb      	str	r3, [r7, #8]
 8001640:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001642:	2301      	movs	r3, #1
 8001644:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001646:	4b0b      	ldr	r3, [pc, #44]	; (8001674 <HAL_RCC_OscConfig+0x2b8>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800164e:	2b00      	cmp	r3, #0
 8001650:	d121      	bne.n	8001696 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001652:	4b08      	ldr	r3, [pc, #32]	; (8001674 <HAL_RCC_OscConfig+0x2b8>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a07      	ldr	r2, [pc, #28]	; (8001674 <HAL_RCC_OscConfig+0x2b8>)
 8001658:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800165c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800165e:	f7ff fbd7 	bl	8000e10 <HAL_GetTick>
 8001662:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001664:	e011      	b.n	800168a <HAL_RCC_OscConfig+0x2ce>
 8001666:	bf00      	nop
 8001668:	40023800 	.word	0x40023800
 800166c:	42470000 	.word	0x42470000
 8001670:	42470e80 	.word	0x42470e80
 8001674:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001678:	f7ff fbca 	bl	8000e10 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e106      	b.n	8001898 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800168a:	4b85      	ldr	r3, [pc, #532]	; (80018a0 <HAL_RCC_OscConfig+0x4e4>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001692:	2b00      	cmp	r3, #0
 8001694:	d0f0      	beq.n	8001678 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	2b01      	cmp	r3, #1
 800169c:	d106      	bne.n	80016ac <HAL_RCC_OscConfig+0x2f0>
 800169e:	4b81      	ldr	r3, [pc, #516]	; (80018a4 <HAL_RCC_OscConfig+0x4e8>)
 80016a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016a2:	4a80      	ldr	r2, [pc, #512]	; (80018a4 <HAL_RCC_OscConfig+0x4e8>)
 80016a4:	f043 0301 	orr.w	r3, r3, #1
 80016a8:	6713      	str	r3, [r2, #112]	; 0x70
 80016aa:	e01c      	b.n	80016e6 <HAL_RCC_OscConfig+0x32a>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	2b05      	cmp	r3, #5
 80016b2:	d10c      	bne.n	80016ce <HAL_RCC_OscConfig+0x312>
 80016b4:	4b7b      	ldr	r3, [pc, #492]	; (80018a4 <HAL_RCC_OscConfig+0x4e8>)
 80016b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b8:	4a7a      	ldr	r2, [pc, #488]	; (80018a4 <HAL_RCC_OscConfig+0x4e8>)
 80016ba:	f043 0304 	orr.w	r3, r3, #4
 80016be:	6713      	str	r3, [r2, #112]	; 0x70
 80016c0:	4b78      	ldr	r3, [pc, #480]	; (80018a4 <HAL_RCC_OscConfig+0x4e8>)
 80016c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016c4:	4a77      	ldr	r2, [pc, #476]	; (80018a4 <HAL_RCC_OscConfig+0x4e8>)
 80016c6:	f043 0301 	orr.w	r3, r3, #1
 80016ca:	6713      	str	r3, [r2, #112]	; 0x70
 80016cc:	e00b      	b.n	80016e6 <HAL_RCC_OscConfig+0x32a>
 80016ce:	4b75      	ldr	r3, [pc, #468]	; (80018a4 <HAL_RCC_OscConfig+0x4e8>)
 80016d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016d2:	4a74      	ldr	r2, [pc, #464]	; (80018a4 <HAL_RCC_OscConfig+0x4e8>)
 80016d4:	f023 0301 	bic.w	r3, r3, #1
 80016d8:	6713      	str	r3, [r2, #112]	; 0x70
 80016da:	4b72      	ldr	r3, [pc, #456]	; (80018a4 <HAL_RCC_OscConfig+0x4e8>)
 80016dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016de:	4a71      	ldr	r2, [pc, #452]	; (80018a4 <HAL_RCC_OscConfig+0x4e8>)
 80016e0:	f023 0304 	bic.w	r3, r3, #4
 80016e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d015      	beq.n	800171a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ee:	f7ff fb8f 	bl	8000e10 <HAL_GetTick>
 80016f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016f4:	e00a      	b.n	800170c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016f6:	f7ff fb8b 	bl	8000e10 <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	f241 3288 	movw	r2, #5000	; 0x1388
 8001704:	4293      	cmp	r3, r2
 8001706:	d901      	bls.n	800170c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e0c5      	b.n	8001898 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800170c:	4b65      	ldr	r3, [pc, #404]	; (80018a4 <HAL_RCC_OscConfig+0x4e8>)
 800170e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001710:	f003 0302 	and.w	r3, r3, #2
 8001714:	2b00      	cmp	r3, #0
 8001716:	d0ee      	beq.n	80016f6 <HAL_RCC_OscConfig+0x33a>
 8001718:	e014      	b.n	8001744 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800171a:	f7ff fb79 	bl	8000e10 <HAL_GetTick>
 800171e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001720:	e00a      	b.n	8001738 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001722:	f7ff fb75 	bl	8000e10 <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001730:	4293      	cmp	r3, r2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e0af      	b.n	8001898 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001738:	4b5a      	ldr	r3, [pc, #360]	; (80018a4 <HAL_RCC_OscConfig+0x4e8>)
 800173a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800173c:	f003 0302 	and.w	r3, r3, #2
 8001740:	2b00      	cmp	r3, #0
 8001742:	d1ee      	bne.n	8001722 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001744:	7dfb      	ldrb	r3, [r7, #23]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d105      	bne.n	8001756 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800174a:	4b56      	ldr	r3, [pc, #344]	; (80018a4 <HAL_RCC_OscConfig+0x4e8>)
 800174c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174e:	4a55      	ldr	r2, [pc, #340]	; (80018a4 <HAL_RCC_OscConfig+0x4e8>)
 8001750:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001754:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	699b      	ldr	r3, [r3, #24]
 800175a:	2b00      	cmp	r3, #0
 800175c:	f000 809b 	beq.w	8001896 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001760:	4b50      	ldr	r3, [pc, #320]	; (80018a4 <HAL_RCC_OscConfig+0x4e8>)
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f003 030c 	and.w	r3, r3, #12
 8001768:	2b08      	cmp	r3, #8
 800176a:	d05c      	beq.n	8001826 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	2b02      	cmp	r3, #2
 8001772:	d141      	bne.n	80017f8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001774:	4b4c      	ldr	r3, [pc, #304]	; (80018a8 <HAL_RCC_OscConfig+0x4ec>)
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800177a:	f7ff fb49 	bl	8000e10 <HAL_GetTick>
 800177e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001780:	e008      	b.n	8001794 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001782:	f7ff fb45 	bl	8000e10 <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b02      	cmp	r3, #2
 800178e:	d901      	bls.n	8001794 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e081      	b.n	8001898 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001794:	4b43      	ldr	r3, [pc, #268]	; (80018a4 <HAL_RCC_OscConfig+0x4e8>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d1f0      	bne.n	8001782 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	69da      	ldr	r2, [r3, #28]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a1b      	ldr	r3, [r3, #32]
 80017a8:	431a      	orrs	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ae:	019b      	lsls	r3, r3, #6
 80017b0:	431a      	orrs	r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b6:	085b      	lsrs	r3, r3, #1
 80017b8:	3b01      	subs	r3, #1
 80017ba:	041b      	lsls	r3, r3, #16
 80017bc:	431a      	orrs	r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c2:	061b      	lsls	r3, r3, #24
 80017c4:	4937      	ldr	r1, [pc, #220]	; (80018a4 <HAL_RCC_OscConfig+0x4e8>)
 80017c6:	4313      	orrs	r3, r2
 80017c8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017ca:	4b37      	ldr	r3, [pc, #220]	; (80018a8 <HAL_RCC_OscConfig+0x4ec>)
 80017cc:	2201      	movs	r2, #1
 80017ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d0:	f7ff fb1e 	bl	8000e10 <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017d8:	f7ff fb1a 	bl	8000e10 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e056      	b.n	8001898 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ea:	4b2e      	ldr	r3, [pc, #184]	; (80018a4 <HAL_RCC_OscConfig+0x4e8>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d0f0      	beq.n	80017d8 <HAL_RCC_OscConfig+0x41c>
 80017f6:	e04e      	b.n	8001896 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017f8:	4b2b      	ldr	r3, [pc, #172]	; (80018a8 <HAL_RCC_OscConfig+0x4ec>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017fe:	f7ff fb07 	bl	8000e10 <HAL_GetTick>
 8001802:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001804:	e008      	b.n	8001818 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001806:	f7ff fb03 	bl	8000e10 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	2b02      	cmp	r3, #2
 8001812:	d901      	bls.n	8001818 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e03f      	b.n	8001898 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001818:	4b22      	ldr	r3, [pc, #136]	; (80018a4 <HAL_RCC_OscConfig+0x4e8>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d1f0      	bne.n	8001806 <HAL_RCC_OscConfig+0x44a>
 8001824:	e037      	b.n	8001896 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d101      	bne.n	8001832 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e032      	b.n	8001898 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001832:	4b1c      	ldr	r3, [pc, #112]	; (80018a4 <HAL_RCC_OscConfig+0x4e8>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d028      	beq.n	8001892 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800184a:	429a      	cmp	r2, r3
 800184c:	d121      	bne.n	8001892 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001858:	429a      	cmp	r2, r3
 800185a:	d11a      	bne.n	8001892 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800185c:	68fa      	ldr	r2, [r7, #12]
 800185e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001862:	4013      	ands	r3, r2
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001868:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800186a:	4293      	cmp	r3, r2
 800186c:	d111      	bne.n	8001892 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001878:	085b      	lsrs	r3, r3, #1
 800187a:	3b01      	subs	r3, #1
 800187c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800187e:	429a      	cmp	r2, r3
 8001880:	d107      	bne.n	8001892 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800188e:	429a      	cmp	r2, r3
 8001890:	d001      	beq.n	8001896 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e000      	b.n	8001898 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001896:	2300      	movs	r3, #0
}
 8001898:	4618      	mov	r0, r3
 800189a:	3718      	adds	r7, #24
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40007000 	.word	0x40007000
 80018a4:	40023800 	.word	0x40023800
 80018a8:	42470060 	.word	0x42470060

080018ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d101      	bne.n	80018c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e0cc      	b.n	8001a5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018c0:	4b68      	ldr	r3, [pc, #416]	; (8001a64 <HAL_RCC_ClockConfig+0x1b8>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0307 	and.w	r3, r3, #7
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d90c      	bls.n	80018e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ce:	4b65      	ldr	r3, [pc, #404]	; (8001a64 <HAL_RCC_ClockConfig+0x1b8>)
 80018d0:	683a      	ldr	r2, [r7, #0]
 80018d2:	b2d2      	uxtb	r2, r2
 80018d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018d6:	4b63      	ldr	r3, [pc, #396]	; (8001a64 <HAL_RCC_ClockConfig+0x1b8>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0307 	and.w	r3, r3, #7
 80018de:	683a      	ldr	r2, [r7, #0]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d001      	beq.n	80018e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e0b8      	b.n	8001a5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0302 	and.w	r3, r3, #2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d020      	beq.n	8001936 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0304 	and.w	r3, r3, #4
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d005      	beq.n	800190c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001900:	4b59      	ldr	r3, [pc, #356]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	4a58      	ldr	r2, [pc, #352]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 8001906:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800190a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0308 	and.w	r3, r3, #8
 8001914:	2b00      	cmp	r3, #0
 8001916:	d005      	beq.n	8001924 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001918:	4b53      	ldr	r3, [pc, #332]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	4a52      	ldr	r2, [pc, #328]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 800191e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001922:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001924:	4b50      	ldr	r3, [pc, #320]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	494d      	ldr	r1, [pc, #308]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 8001932:	4313      	orrs	r3, r2
 8001934:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	2b00      	cmp	r3, #0
 8001940:	d044      	beq.n	80019cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d107      	bne.n	800195a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800194a:	4b47      	ldr	r3, [pc, #284]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d119      	bne.n	800198a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e07f      	b.n	8001a5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	2b02      	cmp	r3, #2
 8001960:	d003      	beq.n	800196a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001966:	2b03      	cmp	r3, #3
 8001968:	d107      	bne.n	800197a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800196a:	4b3f      	ldr	r3, [pc, #252]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d109      	bne.n	800198a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e06f      	b.n	8001a5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800197a:	4b3b      	ldr	r3, [pc, #236]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d101      	bne.n	800198a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e067      	b.n	8001a5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800198a:	4b37      	ldr	r3, [pc, #220]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f023 0203 	bic.w	r2, r3, #3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	4934      	ldr	r1, [pc, #208]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 8001998:	4313      	orrs	r3, r2
 800199a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800199c:	f7ff fa38 	bl	8000e10 <HAL_GetTick>
 80019a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019a2:	e00a      	b.n	80019ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019a4:	f7ff fa34 	bl	8000e10 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e04f      	b.n	8001a5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ba:	4b2b      	ldr	r3, [pc, #172]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f003 020c 	and.w	r2, r3, #12
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d1eb      	bne.n	80019a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019cc:	4b25      	ldr	r3, [pc, #148]	; (8001a64 <HAL_RCC_ClockConfig+0x1b8>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0307 	and.w	r3, r3, #7
 80019d4:	683a      	ldr	r2, [r7, #0]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d20c      	bcs.n	80019f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019da:	4b22      	ldr	r3, [pc, #136]	; (8001a64 <HAL_RCC_ClockConfig+0x1b8>)
 80019dc:	683a      	ldr	r2, [r7, #0]
 80019de:	b2d2      	uxtb	r2, r2
 80019e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019e2:	4b20      	ldr	r3, [pc, #128]	; (8001a64 <HAL_RCC_ClockConfig+0x1b8>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0307 	and.w	r3, r3, #7
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d001      	beq.n	80019f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e032      	b.n	8001a5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0304 	and.w	r3, r3, #4
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d008      	beq.n	8001a12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a00:	4b19      	ldr	r3, [pc, #100]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	4916      	ldr	r1, [pc, #88]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0308 	and.w	r3, r3, #8
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d009      	beq.n	8001a32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a1e:	4b12      	ldr	r3, [pc, #72]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	691b      	ldr	r3, [r3, #16]
 8001a2a:	00db      	lsls	r3, r3, #3
 8001a2c:	490e      	ldr	r1, [pc, #56]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a32:	f000 f821 	bl	8001a78 <HAL_RCC_GetSysClockFreq>
 8001a36:	4602      	mov	r2, r0
 8001a38:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	091b      	lsrs	r3, r3, #4
 8001a3e:	f003 030f 	and.w	r3, r3, #15
 8001a42:	490a      	ldr	r1, [pc, #40]	; (8001a6c <HAL_RCC_ClockConfig+0x1c0>)
 8001a44:	5ccb      	ldrb	r3, [r1, r3]
 8001a46:	fa22 f303 	lsr.w	r3, r2, r3
 8001a4a:	4a09      	ldr	r2, [pc, #36]	; (8001a70 <HAL_RCC_ClockConfig+0x1c4>)
 8001a4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a4e:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <HAL_RCC_ClockConfig+0x1c8>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff f8f0 	bl	8000c38 <HAL_InitTick>

  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40023c00 	.word	0x40023c00
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	080069fc 	.word	0x080069fc
 8001a70:	20000000 	.word	0x20000000
 8001a74:	20000004 	.word	0x20000004

08001a78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a78:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a7c:	b084      	sub	sp, #16
 8001a7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a80:	2300      	movs	r3, #0
 8001a82:	607b      	str	r3, [r7, #4]
 8001a84:	2300      	movs	r3, #0
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	2300      	movs	r3, #0
 8001a8a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a90:	4b67      	ldr	r3, [pc, #412]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f003 030c 	and.w	r3, r3, #12
 8001a98:	2b08      	cmp	r3, #8
 8001a9a:	d00d      	beq.n	8001ab8 <HAL_RCC_GetSysClockFreq+0x40>
 8001a9c:	2b08      	cmp	r3, #8
 8001a9e:	f200 80bd 	bhi.w	8001c1c <HAL_RCC_GetSysClockFreq+0x1a4>
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d002      	beq.n	8001aac <HAL_RCC_GetSysClockFreq+0x34>
 8001aa6:	2b04      	cmp	r3, #4
 8001aa8:	d003      	beq.n	8001ab2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001aaa:	e0b7      	b.n	8001c1c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001aac:	4b61      	ldr	r3, [pc, #388]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001aae:	60bb      	str	r3, [r7, #8]
       break;
 8001ab0:	e0b7      	b.n	8001c22 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ab2:	4b61      	ldr	r3, [pc, #388]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001ab4:	60bb      	str	r3, [r7, #8]
      break;
 8001ab6:	e0b4      	b.n	8001c22 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ab8:	4b5d      	ldr	r3, [pc, #372]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ac0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ac2:	4b5b      	ldr	r3, [pc, #364]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d04d      	beq.n	8001b6a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ace:	4b58      	ldr	r3, [pc, #352]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	099b      	lsrs	r3, r3, #6
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	f04f 0300 	mov.w	r3, #0
 8001ada:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001ade:	f04f 0100 	mov.w	r1, #0
 8001ae2:	ea02 0800 	and.w	r8, r2, r0
 8001ae6:	ea03 0901 	and.w	r9, r3, r1
 8001aea:	4640      	mov	r0, r8
 8001aec:	4649      	mov	r1, r9
 8001aee:	f04f 0200 	mov.w	r2, #0
 8001af2:	f04f 0300 	mov.w	r3, #0
 8001af6:	014b      	lsls	r3, r1, #5
 8001af8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001afc:	0142      	lsls	r2, r0, #5
 8001afe:	4610      	mov	r0, r2
 8001b00:	4619      	mov	r1, r3
 8001b02:	ebb0 0008 	subs.w	r0, r0, r8
 8001b06:	eb61 0109 	sbc.w	r1, r1, r9
 8001b0a:	f04f 0200 	mov.w	r2, #0
 8001b0e:	f04f 0300 	mov.w	r3, #0
 8001b12:	018b      	lsls	r3, r1, #6
 8001b14:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001b18:	0182      	lsls	r2, r0, #6
 8001b1a:	1a12      	subs	r2, r2, r0
 8001b1c:	eb63 0301 	sbc.w	r3, r3, r1
 8001b20:	f04f 0000 	mov.w	r0, #0
 8001b24:	f04f 0100 	mov.w	r1, #0
 8001b28:	00d9      	lsls	r1, r3, #3
 8001b2a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001b2e:	00d0      	lsls	r0, r2, #3
 8001b30:	4602      	mov	r2, r0
 8001b32:	460b      	mov	r3, r1
 8001b34:	eb12 0208 	adds.w	r2, r2, r8
 8001b38:	eb43 0309 	adc.w	r3, r3, r9
 8001b3c:	f04f 0000 	mov.w	r0, #0
 8001b40:	f04f 0100 	mov.w	r1, #0
 8001b44:	0259      	lsls	r1, r3, #9
 8001b46:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001b4a:	0250      	lsls	r0, r2, #9
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	4610      	mov	r0, r2
 8001b52:	4619      	mov	r1, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	461a      	mov	r2, r3
 8001b58:	f04f 0300 	mov.w	r3, #0
 8001b5c:	f7fe fb82 	bl	8000264 <__aeabi_uldivmod>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	4613      	mov	r3, r2
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	e04a      	b.n	8001c00 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b6a:	4b31      	ldr	r3, [pc, #196]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	099b      	lsrs	r3, r3, #6
 8001b70:	461a      	mov	r2, r3
 8001b72:	f04f 0300 	mov.w	r3, #0
 8001b76:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001b7a:	f04f 0100 	mov.w	r1, #0
 8001b7e:	ea02 0400 	and.w	r4, r2, r0
 8001b82:	ea03 0501 	and.w	r5, r3, r1
 8001b86:	4620      	mov	r0, r4
 8001b88:	4629      	mov	r1, r5
 8001b8a:	f04f 0200 	mov.w	r2, #0
 8001b8e:	f04f 0300 	mov.w	r3, #0
 8001b92:	014b      	lsls	r3, r1, #5
 8001b94:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b98:	0142      	lsls	r2, r0, #5
 8001b9a:	4610      	mov	r0, r2
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	1b00      	subs	r0, r0, r4
 8001ba0:	eb61 0105 	sbc.w	r1, r1, r5
 8001ba4:	f04f 0200 	mov.w	r2, #0
 8001ba8:	f04f 0300 	mov.w	r3, #0
 8001bac:	018b      	lsls	r3, r1, #6
 8001bae:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001bb2:	0182      	lsls	r2, r0, #6
 8001bb4:	1a12      	subs	r2, r2, r0
 8001bb6:	eb63 0301 	sbc.w	r3, r3, r1
 8001bba:	f04f 0000 	mov.w	r0, #0
 8001bbe:	f04f 0100 	mov.w	r1, #0
 8001bc2:	00d9      	lsls	r1, r3, #3
 8001bc4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001bc8:	00d0      	lsls	r0, r2, #3
 8001bca:	4602      	mov	r2, r0
 8001bcc:	460b      	mov	r3, r1
 8001bce:	1912      	adds	r2, r2, r4
 8001bd0:	eb45 0303 	adc.w	r3, r5, r3
 8001bd4:	f04f 0000 	mov.w	r0, #0
 8001bd8:	f04f 0100 	mov.w	r1, #0
 8001bdc:	0299      	lsls	r1, r3, #10
 8001bde:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001be2:	0290      	lsls	r0, r2, #10
 8001be4:	4602      	mov	r2, r0
 8001be6:	460b      	mov	r3, r1
 8001be8:	4610      	mov	r0, r2
 8001bea:	4619      	mov	r1, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	461a      	mov	r2, r3
 8001bf0:	f04f 0300 	mov.w	r3, #0
 8001bf4:	f7fe fb36 	bl	8000264 <__aeabi_uldivmod>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c00:	4b0b      	ldr	r3, [pc, #44]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	0c1b      	lsrs	r3, r3, #16
 8001c06:	f003 0303 	and.w	r3, r3, #3
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001c10:	68fa      	ldr	r2, [r7, #12]
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c18:	60bb      	str	r3, [r7, #8]
      break;
 8001c1a:	e002      	b.n	8001c22 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c1c:	4b05      	ldr	r3, [pc, #20]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001c1e:	60bb      	str	r3, [r7, #8]
      break;
 8001c20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c22:	68bb      	ldr	r3, [r7, #8]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3710      	adds	r7, #16
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001c2e:	bf00      	nop
 8001c30:	40023800 	.word	0x40023800
 8001c34:	00f42400 	.word	0x00f42400
 8001c38:	007a1200 	.word	0x007a1200

08001c3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c40:	4b03      	ldr	r3, [pc, #12]	; (8001c50 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c42:	681b      	ldr	r3, [r3, #0]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	20000000 	.word	0x20000000

08001c54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c58:	f7ff fff0 	bl	8001c3c <HAL_RCC_GetHCLKFreq>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	4b05      	ldr	r3, [pc, #20]	; (8001c74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	0a9b      	lsrs	r3, r3, #10
 8001c64:	f003 0307 	and.w	r3, r3, #7
 8001c68:	4903      	ldr	r1, [pc, #12]	; (8001c78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c6a:	5ccb      	ldrb	r3, [r1, r3]
 8001c6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40023800 	.word	0x40023800
 8001c78:	08006a0c 	.word	0x08006a0c

08001c7c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	220f      	movs	r2, #15
 8001c8a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c8c:	4b12      	ldr	r3, [pc, #72]	; (8001cd8 <HAL_RCC_GetClockConfig+0x5c>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f003 0203 	and.w	r2, r3, #3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c98:	4b0f      	ldr	r3, [pc, #60]	; (8001cd8 <HAL_RCC_GetClockConfig+0x5c>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ca4:	4b0c      	ldr	r3, [pc, #48]	; (8001cd8 <HAL_RCC_GetClockConfig+0x5c>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001cb0:	4b09      	ldr	r3, [pc, #36]	; (8001cd8 <HAL_RCC_GetClockConfig+0x5c>)
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	08db      	lsrs	r3, r3, #3
 8001cb6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001cbe:	4b07      	ldr	r3, [pc, #28]	; (8001cdc <HAL_RCC_GetClockConfig+0x60>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0207 	and.w	r2, r3, #7
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	601a      	str	r2, [r3, #0]
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	40023c00 	.word	0x40023c00

08001ce0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e041      	b.n	8001d76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d106      	bne.n	8001d0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 f839 	bl	8001d7e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2202      	movs	r2, #2
 8001d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	3304      	adds	r3, #4
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4610      	mov	r0, r2
 8001d20:	f000 f9d8 	bl	80020d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
	...

08001d94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d001      	beq.n	8001dac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e04e      	b.n	8001e4a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2202      	movs	r2, #2
 8001db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	68da      	ldr	r2, [r3, #12]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f042 0201 	orr.w	r2, r2, #1
 8001dc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a23      	ldr	r2, [pc, #140]	; (8001e58 <HAL_TIM_Base_Start_IT+0xc4>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d022      	beq.n	8001e14 <HAL_TIM_Base_Start_IT+0x80>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dd6:	d01d      	beq.n	8001e14 <HAL_TIM_Base_Start_IT+0x80>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a1f      	ldr	r2, [pc, #124]	; (8001e5c <HAL_TIM_Base_Start_IT+0xc8>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d018      	beq.n	8001e14 <HAL_TIM_Base_Start_IT+0x80>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a1e      	ldr	r2, [pc, #120]	; (8001e60 <HAL_TIM_Base_Start_IT+0xcc>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d013      	beq.n	8001e14 <HAL_TIM_Base_Start_IT+0x80>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a1c      	ldr	r2, [pc, #112]	; (8001e64 <HAL_TIM_Base_Start_IT+0xd0>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d00e      	beq.n	8001e14 <HAL_TIM_Base_Start_IT+0x80>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a1b      	ldr	r2, [pc, #108]	; (8001e68 <HAL_TIM_Base_Start_IT+0xd4>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d009      	beq.n	8001e14 <HAL_TIM_Base_Start_IT+0x80>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a19      	ldr	r2, [pc, #100]	; (8001e6c <HAL_TIM_Base_Start_IT+0xd8>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d004      	beq.n	8001e14 <HAL_TIM_Base_Start_IT+0x80>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a18      	ldr	r2, [pc, #96]	; (8001e70 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d111      	bne.n	8001e38 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2b06      	cmp	r3, #6
 8001e24:	d010      	beq.n	8001e48 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f042 0201 	orr.w	r2, r2, #1
 8001e34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e36:	e007      	b.n	8001e48 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f042 0201 	orr.w	r2, r2, #1
 8001e46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3714      	adds	r7, #20
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	40010000 	.word	0x40010000
 8001e5c:	40000400 	.word	0x40000400
 8001e60:	40000800 	.word	0x40000800
 8001e64:	40000c00 	.word	0x40000c00
 8001e68:	40010400 	.word	0x40010400
 8001e6c:	40014000 	.word	0x40014000
 8001e70:	40001800 	.word	0x40001800

08001e74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d122      	bne.n	8001ed0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d11b      	bne.n	8001ed0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f06f 0202 	mvn.w	r2, #2
 8001ea0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	f003 0303 	and.w	r3, r3, #3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d003      	beq.n	8001ebe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 f8ee 	bl	8002098 <HAL_TIM_IC_CaptureCallback>
 8001ebc:	e005      	b.n	8001eca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 f8e0 	bl	8002084 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f000 f8f1 	bl	80020ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	f003 0304 	and.w	r3, r3, #4
 8001eda:	2b04      	cmp	r3, #4
 8001edc:	d122      	bne.n	8001f24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	f003 0304 	and.w	r3, r3, #4
 8001ee8:	2b04      	cmp	r3, #4
 8001eea:	d11b      	bne.n	8001f24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f06f 0204 	mvn.w	r2, #4
 8001ef4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2202      	movs	r2, #2
 8001efa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d003      	beq.n	8001f12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 f8c4 	bl	8002098 <HAL_TIM_IC_CaptureCallback>
 8001f10:	e005      	b.n	8001f1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 f8b6 	bl	8002084 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f000 f8c7 	bl	80020ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	f003 0308 	and.w	r3, r3, #8
 8001f2e:	2b08      	cmp	r3, #8
 8001f30:	d122      	bne.n	8001f78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	f003 0308 	and.w	r3, r3, #8
 8001f3c:	2b08      	cmp	r3, #8
 8001f3e:	d11b      	bne.n	8001f78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f06f 0208 	mvn.w	r2, #8
 8001f48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2204      	movs	r2, #4
 8001f4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	69db      	ldr	r3, [r3, #28]
 8001f56:	f003 0303 	and.w	r3, r3, #3
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d003      	beq.n	8001f66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 f89a 	bl	8002098 <HAL_TIM_IC_CaptureCallback>
 8001f64:	e005      	b.n	8001f72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 f88c 	bl	8002084 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f000 f89d 	bl	80020ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	f003 0310 	and.w	r3, r3, #16
 8001f82:	2b10      	cmp	r3, #16
 8001f84:	d122      	bne.n	8001fcc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	f003 0310 	and.w	r3, r3, #16
 8001f90:	2b10      	cmp	r3, #16
 8001f92:	d11b      	bne.n	8001fcc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f06f 0210 	mvn.w	r2, #16
 8001f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2208      	movs	r2, #8
 8001fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d003      	beq.n	8001fba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 f870 	bl	8002098 <HAL_TIM_IC_CaptureCallback>
 8001fb8:	e005      	b.n	8001fc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 f862 	bl	8002084 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f000 f873 	bl	80020ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d10e      	bne.n	8001ff8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d107      	bne.n	8001ff8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f06f 0201 	mvn.w	r2, #1
 8001ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f7fe fde0 	bl	8000bb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002002:	2b80      	cmp	r3, #128	; 0x80
 8002004:	d10e      	bne.n	8002024 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002010:	2b80      	cmp	r3, #128	; 0x80
 8002012:	d107      	bne.n	8002024 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800201c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f000 f902 	bl	8002228 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800202e:	2b40      	cmp	r3, #64	; 0x40
 8002030:	d10e      	bne.n	8002050 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800203c:	2b40      	cmp	r3, #64	; 0x40
 800203e:	d107      	bne.n	8002050 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002048:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f838 	bl	80020c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	f003 0320 	and.w	r3, r3, #32
 800205a:	2b20      	cmp	r3, #32
 800205c:	d10e      	bne.n	800207c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	f003 0320 	and.w	r3, r3, #32
 8002068:	2b20      	cmp	r3, #32
 800206a:	d107      	bne.n	800207c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f06f 0220 	mvn.w	r2, #32
 8002074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 f8cc 	bl	8002214 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800207c:	bf00      	nop
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4a40      	ldr	r2, [pc, #256]	; (80021e8 <TIM_Base_SetConfig+0x114>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d013      	beq.n	8002114 <TIM_Base_SetConfig+0x40>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020f2:	d00f      	beq.n	8002114 <TIM_Base_SetConfig+0x40>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4a3d      	ldr	r2, [pc, #244]	; (80021ec <TIM_Base_SetConfig+0x118>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d00b      	beq.n	8002114 <TIM_Base_SetConfig+0x40>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4a3c      	ldr	r2, [pc, #240]	; (80021f0 <TIM_Base_SetConfig+0x11c>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d007      	beq.n	8002114 <TIM_Base_SetConfig+0x40>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4a3b      	ldr	r2, [pc, #236]	; (80021f4 <TIM_Base_SetConfig+0x120>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d003      	beq.n	8002114 <TIM_Base_SetConfig+0x40>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a3a      	ldr	r2, [pc, #232]	; (80021f8 <TIM_Base_SetConfig+0x124>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d108      	bne.n	8002126 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800211a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	68fa      	ldr	r2, [r7, #12]
 8002122:	4313      	orrs	r3, r2
 8002124:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a2f      	ldr	r2, [pc, #188]	; (80021e8 <TIM_Base_SetConfig+0x114>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d02b      	beq.n	8002186 <TIM_Base_SetConfig+0xb2>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002134:	d027      	beq.n	8002186 <TIM_Base_SetConfig+0xb2>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a2c      	ldr	r2, [pc, #176]	; (80021ec <TIM_Base_SetConfig+0x118>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d023      	beq.n	8002186 <TIM_Base_SetConfig+0xb2>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a2b      	ldr	r2, [pc, #172]	; (80021f0 <TIM_Base_SetConfig+0x11c>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d01f      	beq.n	8002186 <TIM_Base_SetConfig+0xb2>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a2a      	ldr	r2, [pc, #168]	; (80021f4 <TIM_Base_SetConfig+0x120>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d01b      	beq.n	8002186 <TIM_Base_SetConfig+0xb2>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a29      	ldr	r2, [pc, #164]	; (80021f8 <TIM_Base_SetConfig+0x124>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d017      	beq.n	8002186 <TIM_Base_SetConfig+0xb2>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a28      	ldr	r2, [pc, #160]	; (80021fc <TIM_Base_SetConfig+0x128>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d013      	beq.n	8002186 <TIM_Base_SetConfig+0xb2>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a27      	ldr	r2, [pc, #156]	; (8002200 <TIM_Base_SetConfig+0x12c>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d00f      	beq.n	8002186 <TIM_Base_SetConfig+0xb2>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a26      	ldr	r2, [pc, #152]	; (8002204 <TIM_Base_SetConfig+0x130>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d00b      	beq.n	8002186 <TIM_Base_SetConfig+0xb2>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a25      	ldr	r2, [pc, #148]	; (8002208 <TIM_Base_SetConfig+0x134>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d007      	beq.n	8002186 <TIM_Base_SetConfig+0xb2>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a24      	ldr	r2, [pc, #144]	; (800220c <TIM_Base_SetConfig+0x138>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d003      	beq.n	8002186 <TIM_Base_SetConfig+0xb2>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a23      	ldr	r2, [pc, #140]	; (8002210 <TIM_Base_SetConfig+0x13c>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d108      	bne.n	8002198 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800218c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	4313      	orrs	r3, r2
 8002196:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	689a      	ldr	r2, [r3, #8]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a0a      	ldr	r2, [pc, #40]	; (80021e8 <TIM_Base_SetConfig+0x114>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d003      	beq.n	80021cc <TIM_Base_SetConfig+0xf8>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a0c      	ldr	r2, [pc, #48]	; (80021f8 <TIM_Base_SetConfig+0x124>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d103      	bne.n	80021d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	691a      	ldr	r2, [r3, #16]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	615a      	str	r2, [r3, #20]
}
 80021da:	bf00      	nop
 80021dc:	3714      	adds	r7, #20
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	40010000 	.word	0x40010000
 80021ec:	40000400 	.word	0x40000400
 80021f0:	40000800 	.word	0x40000800
 80021f4:	40000c00 	.word	0x40000c00
 80021f8:	40010400 	.word	0x40010400
 80021fc:	40014000 	.word	0x40014000
 8002200:	40014400 	.word	0x40014400
 8002204:	40014800 	.word	0x40014800
 8002208:	40001800 	.word	0x40001800
 800220c:	40001c00 	.word	0x40001c00
 8002210:	40002000 	.word	0x40002000

08002214 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002230:	bf00      	nop
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f103 0208 	add.w	r2, r3, #8
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f04f 32ff 	mov.w	r2, #4294967295
 8002254:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f103 0208 	add.w	r2, r3, #8
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f103 0208 	add.w	r2, r3, #8
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800228a:	bf00      	nop
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr

08002296 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002296:	b480      	push	{r7}
 8002298:	b085      	sub	sp, #20
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
 800229e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	1c5a      	adds	r2, r3, #1
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	601a      	str	r2, [r3, #0]
}
 80022d2:	bf00      	nop
 80022d4:	3714      	adds	r7, #20
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr

080022de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80022de:	b480      	push	{r7}
 80022e0:	b085      	sub	sp, #20
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
 80022e6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f4:	d103      	bne.n	80022fe <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	e00c      	b.n	8002318 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	3308      	adds	r3, #8
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	e002      	b.n	800230c <vListInsert+0x2e>
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68ba      	ldr	r2, [r7, #8]
 8002314:	429a      	cmp	r2, r3
 8002316:	d2f6      	bcs.n	8002306 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	685a      	ldr	r2, [r3, #4]
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	683a      	ldr	r2, [r7, #0]
 8002332:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	1c5a      	adds	r2, r3, #1
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	601a      	str	r2, [r3, #0]
}
 8002344:	bf00      	nop
 8002346:	3714      	adds	r7, #20
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	6892      	ldr	r2, [r2, #8]
 8002366:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	6852      	ldr	r2, [r2, #4]
 8002370:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	429a      	cmp	r2, r3
 800237a:	d103      	bne.n	8002384 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	1e5a      	subs	r2, r3, #1
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
}
 8002398:	4618      	mov	r0, r3
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b08c      	sub	sp, #48	; 0x30
 80023a8:	af04      	add	r7, sp, #16
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	603b      	str	r3, [r7, #0]
 80023b0:	4613      	mov	r3, r2
 80023b2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80023b4:	88fb      	ldrh	r3, [r7, #6]
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	4618      	mov	r0, r3
 80023ba:	f001 fb47 	bl	8003a4c <pvPortMalloc>
 80023be:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00e      	beq.n	80023e4 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80023c6:	2058      	movs	r0, #88	; 0x58
 80023c8:	f001 fb40 	bl	8003a4c <pvPortMalloc>
 80023cc:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d003      	beq.n	80023dc <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	697a      	ldr	r2, [r7, #20]
 80023d8:	631a      	str	r2, [r3, #48]	; 0x30
 80023da:	e005      	b.n	80023e8 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 80023dc:	6978      	ldr	r0, [r7, #20]
 80023de:	f001 fc15 	bl	8003c0c <vPortFree>
 80023e2:	e001      	b.n	80023e8 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80023e4:	2300      	movs	r3, #0
 80023e6:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d013      	beq.n	8002416 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80023ee:	88fa      	ldrh	r2, [r7, #6]
 80023f0:	2300      	movs	r3, #0
 80023f2:	9303      	str	r3, [sp, #12]
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	9302      	str	r3, [sp, #8]
 80023f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023fa:	9301      	str	r3, [sp, #4]
 80023fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023fe:	9300      	str	r3, [sp, #0]
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	68b9      	ldr	r1, [r7, #8]
 8002404:	68f8      	ldr	r0, [r7, #12]
 8002406:	f000 f80e 	bl	8002426 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800240a:	69f8      	ldr	r0, [r7, #28]
 800240c:	f000 f8b0 	bl	8002570 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002410:	2301      	movs	r3, #1
 8002412:	61bb      	str	r3, [r7, #24]
 8002414:	e002      	b.n	800241c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002416:	f04f 33ff 	mov.w	r3, #4294967295
 800241a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800241c:	69bb      	ldr	r3, [r7, #24]
    }
 800241e:	4618      	mov	r0, r3
 8002420:	3720      	adds	r7, #32
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b088      	sub	sp, #32
 800242a:	af00      	add	r7, sp, #0
 800242c:	60f8      	str	r0, [r7, #12]
 800242e:	60b9      	str	r1, [r7, #8]
 8002430:	607a      	str	r2, [r7, #4]
 8002432:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002436:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	461a      	mov	r2, r3
 800243e:	21a5      	movs	r1, #165	; 0xa5
 8002440:	f004 fa28 	bl	8006894 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002446:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800244e:	3b01      	subs	r3, #1
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	4413      	add	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	f023 0307 	bic.w	r3, r3, #7
 800245c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	f003 0307 	and.w	r3, r3, #7
 8002464:	2b00      	cmp	r3, #0
 8002466:	d00a      	beq.n	800247e <prvInitialiseNewTask+0x58>
        __asm volatile
 8002468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800246c:	f383 8811 	msr	BASEPRI, r3
 8002470:	f3bf 8f6f 	isb	sy
 8002474:	f3bf 8f4f 	dsb	sy
 8002478:	617b      	str	r3, [r7, #20]
    }
 800247a:	bf00      	nop
 800247c:	e7fe      	b.n	800247c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d01f      	beq.n	80024c4 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002484:	2300      	movs	r3, #0
 8002486:	61fb      	str	r3, [r7, #28]
 8002488:	e012      	b.n	80024b0 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800248a:	68ba      	ldr	r2, [r7, #8]
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	4413      	add	r3, r2
 8002490:	7819      	ldrb	r1, [r3, #0]
 8002492:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	4413      	add	r3, r2
 8002498:	3334      	adds	r3, #52	; 0x34
 800249a:	460a      	mov	r2, r1
 800249c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800249e:	68ba      	ldr	r2, [r7, #8]
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	4413      	add	r3, r2
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d006      	beq.n	80024b8 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	3301      	adds	r3, #1
 80024ae:	61fb      	str	r3, [r7, #28]
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	2b09      	cmp	r3, #9
 80024b4:	d9e9      	bls.n	800248a <prvInitialiseNewTask+0x64>
 80024b6:	e000      	b.n	80024ba <prvInitialiseNewTask+0x94>
            {
                break;
 80024b8:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80024ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80024c2:	e003      	b.n	80024cc <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80024c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80024cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ce:	2b04      	cmp	r3, #4
 80024d0:	d90a      	bls.n	80024e8 <prvInitialiseNewTask+0xc2>
        __asm volatile
 80024d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024d6:	f383 8811 	msr	BASEPRI, r3
 80024da:	f3bf 8f6f 	isb	sy
 80024de:	f3bf 8f4f 	dsb	sy
 80024e2:	613b      	str	r3, [r7, #16]
    }
 80024e4:	bf00      	nop
 80024e6:	e7fe      	b.n	80024e6 <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80024e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ea:	2b04      	cmp	r3, #4
 80024ec:	d901      	bls.n	80024f2 <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80024ee:	2304      	movs	r3, #4
 80024f0:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80024f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024f6:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80024f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024fc:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80024fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002500:	2200      	movs	r2, #0
 8002502:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002506:	3304      	adds	r3, #4
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff feb7 	bl	800227c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800250e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002510:	3318      	adds	r3, #24
 8002512:	4618      	mov	r0, r3
 8002514:	f7ff feb2 	bl	800227c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800251a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800251c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800251e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002520:	f1c3 0205 	rsb	r2, r3, #5
 8002524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002526:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800252a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800252c:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800252e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002530:	3350      	adds	r3, #80	; 0x50
 8002532:	2204      	movs	r2, #4
 8002534:	2100      	movs	r1, #0
 8002536:	4618      	mov	r0, r3
 8002538:	f004 f9ac 	bl	8006894 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800253c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800253e:	3354      	adds	r3, #84	; 0x54
 8002540:	2201      	movs	r2, #1
 8002542:	2100      	movs	r1, #0
 8002544:	4618      	mov	r0, r3
 8002546:	f004 f9a5 	bl	8006894 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800254a:	683a      	ldr	r2, [r7, #0]
 800254c:	68f9      	ldr	r1, [r7, #12]
 800254e:	69b8      	ldr	r0, [r7, #24]
 8002550:	f000 ffa2 	bl	8003498 <pxPortInitialiseStack>
 8002554:	4602      	mov	r2, r0
 8002556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002558:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800255a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800255c:	2b00      	cmp	r3, #0
 800255e:	d002      	beq.n	8002566 <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002562:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002564:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002566:	bf00      	nop
 8002568:	3720      	adds	r7, #32
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
	...

08002570 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002570:	b5b0      	push	{r4, r5, r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af02      	add	r7, sp, #8
 8002576:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002578:	f001 f93c 	bl	80037f4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800257c:	4b4f      	ldr	r3, [pc, #316]	; (80026bc <prvAddNewTaskToReadyList+0x14c>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	3301      	adds	r3, #1
 8002582:	4a4e      	ldr	r2, [pc, #312]	; (80026bc <prvAddNewTaskToReadyList+0x14c>)
 8002584:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002586:	4b4e      	ldr	r3, [pc, #312]	; (80026c0 <prvAddNewTaskToReadyList+0x150>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d109      	bne.n	80025a2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800258e:	4a4c      	ldr	r2, [pc, #304]	; (80026c0 <prvAddNewTaskToReadyList+0x150>)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002594:	4b49      	ldr	r3, [pc, #292]	; (80026bc <prvAddNewTaskToReadyList+0x14c>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d110      	bne.n	80025be <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800259c:	f000 fc9a 	bl	8002ed4 <prvInitialiseTaskLists>
 80025a0:	e00d      	b.n	80025be <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80025a2:	4b48      	ldr	r3, [pc, #288]	; (80026c4 <prvAddNewTaskToReadyList+0x154>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d109      	bne.n	80025be <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80025aa:	4b45      	ldr	r3, [pc, #276]	; (80026c0 <prvAddNewTaskToReadyList+0x150>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d802      	bhi.n	80025be <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80025b8:	4a41      	ldr	r2, [pc, #260]	; (80026c0 <prvAddNewTaskToReadyList+0x150>)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80025be:	4b42      	ldr	r3, [pc, #264]	; (80026c8 <prvAddNewTaskToReadyList+0x158>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	3301      	adds	r3, #1
 80025c4:	4a40      	ldr	r2, [pc, #256]	; (80026c8 <prvAddNewTaskToReadyList+0x158>)
 80025c6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80025c8:	4b3f      	ldr	r3, [pc, #252]	; (80026c8 <prvAddNewTaskToReadyList+0x158>)
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d016      	beq.n	8002604 <prvAddNewTaskToReadyList+0x94>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4618      	mov	r0, r3
 80025da:	f003 fe6b 	bl	80062b4 <SEGGER_SYSVIEW_OnTaskCreate>
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	461d      	mov	r5, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	461c      	mov	r4, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fa:	1ae3      	subs	r3, r4, r3
 80025fc:	9300      	str	r3, [sp, #0]
 80025fe:	462b      	mov	r3, r5
 8002600:	f001 fcca 	bl	8003f98 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4618      	mov	r0, r3
 8002608:	f003 fed8 	bl	80063bc <SEGGER_SYSVIEW_OnTaskStartReady>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002610:	2201      	movs	r2, #1
 8002612:	409a      	lsls	r2, r3
 8002614:	4b2d      	ldr	r3, [pc, #180]	; (80026cc <prvAddNewTaskToReadyList+0x15c>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4313      	orrs	r3, r2
 800261a:	4a2c      	ldr	r2, [pc, #176]	; (80026cc <prvAddNewTaskToReadyList+0x15c>)
 800261c:	6013      	str	r3, [r2, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002622:	492b      	ldr	r1, [pc, #172]	; (80026d0 <prvAddNewTaskToReadyList+0x160>)
 8002624:	4613      	mov	r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	4413      	add	r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	440b      	add	r3, r1
 800262e:	3304      	adds	r3, #4
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	60fb      	str	r3, [r7, #12]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	609a      	str	r2, [r3, #8]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	689a      	ldr	r2, [r3, #8]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	60da      	str	r2, [r3, #12]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	3204      	adds	r2, #4
 800264a:	605a      	str	r2, [r3, #4]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	1d1a      	adds	r2, r3, #4
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	609a      	str	r2, [r3, #8]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002658:	4613      	mov	r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	4413      	add	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4a1b      	ldr	r2, [pc, #108]	; (80026d0 <prvAddNewTaskToReadyList+0x160>)
 8002662:	441a      	add	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	615a      	str	r2, [r3, #20]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800266c:	4918      	ldr	r1, [pc, #96]	; (80026d0 <prvAddNewTaskToReadyList+0x160>)
 800266e:	4613      	mov	r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	4413      	add	r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	440b      	add	r3, r1
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	1c59      	adds	r1, r3, #1
 800267c:	4814      	ldr	r0, [pc, #80]	; (80026d0 <prvAddNewTaskToReadyList+0x160>)
 800267e:	4613      	mov	r3, r2
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	4413      	add	r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	4403      	add	r3, r0
 8002688:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800268a:	f001 f8e3 	bl	8003854 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800268e:	4b0d      	ldr	r3, [pc, #52]	; (80026c4 <prvAddNewTaskToReadyList+0x154>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00e      	beq.n	80026b4 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002696:	4b0a      	ldr	r3, [pc, #40]	; (80026c0 <prvAddNewTaskToReadyList+0x150>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d207      	bcs.n	80026b4 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80026a4:	4b0b      	ldr	r3, [pc, #44]	; (80026d4 <prvAddNewTaskToReadyList+0x164>)
 80026a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	f3bf 8f4f 	dsb	sy
 80026b0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80026b4:	bf00      	nop
 80026b6:	3710      	adds	r7, #16
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bdb0      	pop	{r4, r5, r7, pc}
 80026bc:	20000114 	.word	0x20000114
 80026c0:	2000003c 	.word	0x2000003c
 80026c4:	20000120 	.word	0x20000120
 80026c8:	20000130 	.word	0x20000130
 80026cc:	2000011c 	.word	0x2000011c
 80026d0:	20000040 	.word	0x20000040
 80026d4:	e000ed04 	.word	0xe000ed04

080026d8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 80026e0:	f001 f888 	bl	80037f4 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d102      	bne.n	80026f0 <vTaskDelete+0x18>
 80026ea:	4b48      	ldr	r3, [pc, #288]	; (800280c <vTaskDelete+0x134>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	e000      	b.n	80026f2 <vTaskDelete+0x1a>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	3304      	adds	r3, #4
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff fe29 	bl	8002350 <uxListRemove>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d115      	bne.n	8002730 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002708:	4941      	ldr	r1, [pc, #260]	; (8002810 <vTaskDelete+0x138>)
 800270a:	4613      	mov	r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	4413      	add	r3, r2
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	440b      	add	r3, r1
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d10a      	bne.n	8002730 <vTaskDelete+0x58>
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271e:	2201      	movs	r2, #1
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	43da      	mvns	r2, r3
 8002726:	4b3b      	ldr	r3, [pc, #236]	; (8002814 <vTaskDelete+0x13c>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4013      	ands	r3, r2
 800272c:	4a39      	ldr	r2, [pc, #228]	; (8002814 <vTaskDelete+0x13c>)
 800272e:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002734:	2b00      	cmp	r3, #0
 8002736:	d004      	beq.n	8002742 <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	3318      	adds	r3, #24
 800273c:	4618      	mov	r0, r3
 800273e:	f7ff fe07 	bl	8002350 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8002742:	4b35      	ldr	r3, [pc, #212]	; (8002818 <vTaskDelete+0x140>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	3301      	adds	r3, #1
 8002748:	4a33      	ldr	r2, [pc, #204]	; (8002818 <vTaskDelete+0x140>)
 800274a:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 800274c:	4b2f      	ldr	r3, [pc, #188]	; (800280c <vTaskDelete+0x134>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	68fa      	ldr	r2, [r7, #12]
 8002752:	429a      	cmp	r2, r3
 8002754:	d118      	bne.n	8002788 <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	3304      	adds	r3, #4
 800275a:	4619      	mov	r1, r3
 800275c:	482f      	ldr	r0, [pc, #188]	; (800281c <vTaskDelete+0x144>)
 800275e:	f7ff fd9a 	bl	8002296 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8002762:	4b2f      	ldr	r3, [pc, #188]	; (8002820 <vTaskDelete+0x148>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	3301      	adds	r3, #1
 8002768:	4a2d      	ldr	r2, [pc, #180]	; (8002820 <vTaskDelete+0x148>)
 800276a:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	4618      	mov	r0, r3
 8002770:	f003 fec6 	bl	8006500 <SEGGER_SYSVIEW_ShrinkId>
 8002774:	4603      	mov	r3, r0
 8002776:	4619      	mov	r1, r3
 8002778:	2022      	movs	r0, #34	; 0x22
 800277a:	f003 f913 	bl	80059a4 <SEGGER_SYSVIEW_RecordU32>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	4618      	mov	r0, r3
 8002782:	f001 fc71 	bl	8004068 <SYSVIEW_DeleteTask>
 8002786:	e013      	b.n	80027b0 <vTaskDelete+0xd8>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8002788:	4b26      	ldr	r3, [pc, #152]	; (8002824 <vTaskDelete+0x14c>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	3b01      	subs	r3, #1
 800278e:	4a25      	ldr	r2, [pc, #148]	; (8002824 <vTaskDelete+0x14c>)
 8002790:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	4618      	mov	r0, r3
 8002796:	f003 feb3 	bl	8006500 <SEGGER_SYSVIEW_ShrinkId>
 800279a:	4603      	mov	r3, r0
 800279c:	4619      	mov	r1, r3
 800279e:	2022      	movs	r0, #34	; 0x22
 80027a0:	f003 f900 	bl	80059a4 <SEGGER_SYSVIEW_RecordU32>
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f001 fc5e 	bl	8004068 <SYSVIEW_DeleteTask>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 80027ac:	f000 fc10 	bl	8002fd0 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 80027b0:	f001 f850 	bl	8003854 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( pxTCB != pxCurrentTCB )
 80027b4:	4b15      	ldr	r3, [pc, #84]	; (800280c <vTaskDelete+0x134>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d002      	beq.n	80027c4 <vTaskDelete+0xec>
        {
            prvDeleteTCB( pxTCB );
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f000 fbf6 	bl	8002fb0 <prvDeleteTCB>
        }

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 80027c4:	4b18      	ldr	r3, [pc, #96]	; (8002828 <vTaskDelete+0x150>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d01b      	beq.n	8002804 <vTaskDelete+0x12c>
        {
            if( pxTCB == pxCurrentTCB )
 80027cc:	4b0f      	ldr	r3, [pc, #60]	; (800280c <vTaskDelete+0x134>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d116      	bne.n	8002804 <vTaskDelete+0x12c>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 80027d6:	4b15      	ldr	r3, [pc, #84]	; (800282c <vTaskDelete+0x154>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d00a      	beq.n	80027f4 <vTaskDelete+0x11c>
        __asm volatile
 80027de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e2:	f383 8811 	msr	BASEPRI, r3
 80027e6:	f3bf 8f6f 	isb	sy
 80027ea:	f3bf 8f4f 	dsb	sy
 80027ee:	60bb      	str	r3, [r7, #8]
    }
 80027f0:	bf00      	nop
 80027f2:	e7fe      	b.n	80027f2 <vTaskDelete+0x11a>
                portYIELD_WITHIN_API();
 80027f4:	4b0e      	ldr	r3, [pc, #56]	; (8002830 <vTaskDelete+0x158>)
 80027f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	f3bf 8f4f 	dsb	sy
 8002800:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002804:	bf00      	nop
 8002806:	3710      	adds	r7, #16
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	2000003c 	.word	0x2000003c
 8002810:	20000040 	.word	0x20000040
 8002814:	2000011c 	.word	0x2000011c
 8002818:	20000130 	.word	0x20000130
 800281c:	200000e8 	.word	0x200000e8
 8002820:	200000fc 	.word	0x200000fc
 8002824:	20000114 	.word	0x20000114
 8002828:	20000120 	.word	0x20000120
 800282c:	2000013c 	.word	0x2000013c
 8002830:	e000ed04 	.word	0xe000ed04

08002834 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800283c:	2300      	movs	r3, #0
 800283e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d01b      	beq.n	800287e <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002846:	4b15      	ldr	r3, [pc, #84]	; (800289c <vTaskDelay+0x68>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00a      	beq.n	8002864 <vTaskDelay+0x30>
        __asm volatile
 800284e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002852:	f383 8811 	msr	BASEPRI, r3
 8002856:	f3bf 8f6f 	isb	sy
 800285a:	f3bf 8f4f 	dsb	sy
 800285e:	60bb      	str	r3, [r7, #8]
    }
 8002860:	bf00      	nop
 8002862:	e7fe      	b.n	8002862 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002864:	f000 f87a 	bl	800295c <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8002868:	6879      	ldr	r1, [r7, #4]
 800286a:	2023      	movs	r0, #35	; 0x23
 800286c:	f003 f89a 	bl	80059a4 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002870:	2100      	movs	r1, #0
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 fd84 	bl	8003380 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002878:	f000 f87e 	bl	8002978 <xTaskResumeAll>
 800287c:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d107      	bne.n	8002894 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8002884:	4b06      	ldr	r3, [pc, #24]	; (80028a0 <vTaskDelay+0x6c>)
 8002886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	f3bf 8f4f 	dsb	sy
 8002890:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002894:	bf00      	nop
 8002896:	3710      	adds	r7, #16
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	2000013c 	.word	0x2000013c
 80028a0:	e000ed04 	.word	0xe000ed04

080028a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80028aa:	4b24      	ldr	r3, [pc, #144]	; (800293c <vTaskStartScheduler+0x98>)
 80028ac:	9301      	str	r3, [sp, #4]
 80028ae:	2300      	movs	r3, #0
 80028b0:	9300      	str	r3, [sp, #0]
 80028b2:	2300      	movs	r3, #0
 80028b4:	2282      	movs	r2, #130	; 0x82
 80028b6:	4922      	ldr	r1, [pc, #136]	; (8002940 <vTaskStartScheduler+0x9c>)
 80028b8:	4822      	ldr	r0, [pc, #136]	; (8002944 <vTaskStartScheduler+0xa0>)
 80028ba:	f7ff fd73 	bl	80023a4 <xTaskCreate>
 80028be:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d124      	bne.n	8002910 <vTaskStartScheduler+0x6c>
        __asm volatile
 80028c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ca:	f383 8811 	msr	BASEPRI, r3
 80028ce:	f3bf 8f6f 	isb	sy
 80028d2:	f3bf 8f4f 	dsb	sy
 80028d6:	60bb      	str	r3, [r7, #8]
    }
 80028d8:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80028da:	4b1b      	ldr	r3, [pc, #108]	; (8002948 <vTaskStartScheduler+0xa4>)
 80028dc:	f04f 32ff 	mov.w	r2, #4294967295
 80028e0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80028e2:	4b1a      	ldr	r3, [pc, #104]	; (800294c <vTaskStartScheduler+0xa8>)
 80028e4:	2201      	movs	r2, #1
 80028e6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80028e8:	4b19      	ldr	r3, [pc, #100]	; (8002950 <vTaskStartScheduler+0xac>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80028ee:	4b19      	ldr	r3, [pc, #100]	; (8002954 <vTaskStartScheduler+0xb0>)
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	4b12      	ldr	r3, [pc, #72]	; (800293c <vTaskStartScheduler+0x98>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d102      	bne.n	8002900 <vTaskStartScheduler+0x5c>
 80028fa:	f003 fcbf 	bl	800627c <SEGGER_SYSVIEW_OnIdle>
 80028fe:	e004      	b.n	800290a <vTaskStartScheduler+0x66>
 8002900:	4b14      	ldr	r3, [pc, #80]	; (8002954 <vTaskStartScheduler+0xb0>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4618      	mov	r0, r3
 8002906:	f003 fd17 	bl	8006338 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800290a:	f000 fe53 	bl	80035b4 <xPortStartScheduler>
 800290e:	e00e      	b.n	800292e <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002916:	d10a      	bne.n	800292e <vTaskStartScheduler+0x8a>
        __asm volatile
 8002918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800291c:	f383 8811 	msr	BASEPRI, r3
 8002920:	f3bf 8f6f 	isb	sy
 8002924:	f3bf 8f4f 	dsb	sy
 8002928:	607b      	str	r3, [r7, #4]
    }
 800292a:	bf00      	nop
 800292c:	e7fe      	b.n	800292c <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800292e:	4b0a      	ldr	r3, [pc, #40]	; (8002958 <vTaskStartScheduler+0xb4>)
 8002930:	681b      	ldr	r3, [r3, #0]
}
 8002932:	bf00      	nop
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	20000138 	.word	0x20000138
 8002940:	08006934 	.word	0x08006934
 8002944:	08002ea5 	.word	0x08002ea5
 8002948:	20000134 	.word	0x20000134
 800294c:	20000120 	.word	0x20000120
 8002950:	20000118 	.word	0x20000118
 8002954:	2000003c 	.word	0x2000003c
 8002958:	2000000c 	.word	0x2000000c

0800295c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002960:	4b04      	ldr	r3, [pc, #16]	; (8002974 <vTaskSuspendAll+0x18>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	3301      	adds	r3, #1
 8002966:	4a03      	ldr	r2, [pc, #12]	; (8002974 <vTaskSuspendAll+0x18>)
 8002968:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800296a:	bf00      	nop
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr
 8002974:	2000013c 	.word	0x2000013c

08002978 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b088      	sub	sp, #32
 800297c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800297e:	2300      	movs	r3, #0
 8002980:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002982:	2300      	movs	r3, #0
 8002984:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002986:	4b73      	ldr	r3, [pc, #460]	; (8002b54 <xTaskResumeAll+0x1dc>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d10a      	bne.n	80029a4 <xTaskResumeAll+0x2c>
        __asm volatile
 800298e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002992:	f383 8811 	msr	BASEPRI, r3
 8002996:	f3bf 8f6f 	isb	sy
 800299a:	f3bf 8f4f 	dsb	sy
 800299e:	607b      	str	r3, [r7, #4]
    }
 80029a0:	bf00      	nop
 80029a2:	e7fe      	b.n	80029a2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80029a4:	f000 ff26 	bl	80037f4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80029a8:	4b6a      	ldr	r3, [pc, #424]	; (8002b54 <xTaskResumeAll+0x1dc>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	3b01      	subs	r3, #1
 80029ae:	4a69      	ldr	r2, [pc, #420]	; (8002b54 <xTaskResumeAll+0x1dc>)
 80029b0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80029b2:	4b68      	ldr	r3, [pc, #416]	; (8002b54 <xTaskResumeAll+0x1dc>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	f040 80c4 	bne.w	8002b44 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80029bc:	4b66      	ldr	r3, [pc, #408]	; (8002b58 <xTaskResumeAll+0x1e0>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f000 80bf 	beq.w	8002b44 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80029c6:	e08e      	b.n	8002ae6 <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80029c8:	4b64      	ldr	r3, [pc, #400]	; (8002b5c <xTaskResumeAll+0x1e4>)
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d4:	613b      	str	r3, [r7, #16]
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	69db      	ldr	r3, [r3, #28]
 80029da:	69fa      	ldr	r2, [r7, #28]
 80029dc:	6a12      	ldr	r2, [r2, #32]
 80029de:	609a      	str	r2, [r3, #8]
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	69fa      	ldr	r2, [r7, #28]
 80029e6:	69d2      	ldr	r2, [r2, #28]
 80029e8:	605a      	str	r2, [r3, #4]
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	685a      	ldr	r2, [r3, #4]
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	3318      	adds	r3, #24
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d103      	bne.n	80029fe <xTaskResumeAll+0x86>
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	6a1a      	ldr	r2, [r3, #32]
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	605a      	str	r2, [r3, #4]
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	2200      	movs	r2, #0
 8002a02:	629a      	str	r2, [r3, #40]	; 0x28
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	1e5a      	subs	r2, r3, #1
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	69fa      	ldr	r2, [r7, #28]
 8002a1a:	68d2      	ldr	r2, [r2, #12]
 8002a1c:	609a      	str	r2, [r3, #8]
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	69fa      	ldr	r2, [r7, #28]
 8002a24:	6892      	ldr	r2, [r2, #8]
 8002a26:	605a      	str	r2, [r3, #4]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	685a      	ldr	r2, [r3, #4]
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	3304      	adds	r3, #4
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d103      	bne.n	8002a3c <xTaskResumeAll+0xc4>
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	68da      	ldr	r2, [r3, #12]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	605a      	str	r2, [r3, #4]
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	615a      	str	r2, [r3, #20]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	1e5a      	subs	r2, r3, #1
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f003 fcb4 	bl	80063bc <SEGGER_SYSVIEW_OnTaskStartReady>
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a58:	2201      	movs	r2, #1
 8002a5a:	409a      	lsls	r2, r3
 8002a5c:	4b40      	ldr	r3, [pc, #256]	; (8002b60 <xTaskResumeAll+0x1e8>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	4a3f      	ldr	r2, [pc, #252]	; (8002b60 <xTaskResumeAll+0x1e8>)
 8002a64:	6013      	str	r3, [r2, #0]
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a6a:	493e      	ldr	r1, [pc, #248]	; (8002b64 <xTaskResumeAll+0x1ec>)
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	4413      	add	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	440b      	add	r3, r1
 8002a76:	3304      	adds	r3, #4
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	60bb      	str	r3, [r7, #8]
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	68ba      	ldr	r2, [r7, #8]
 8002a80:	609a      	str	r2, [r3, #8]
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	689a      	ldr	r2, [r3, #8]
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	60da      	str	r2, [r3, #12]
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	69fa      	ldr	r2, [r7, #28]
 8002a90:	3204      	adds	r2, #4
 8002a92:	605a      	str	r2, [r3, #4]
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	1d1a      	adds	r2, r3, #4
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	609a      	str	r2, [r3, #8]
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	4413      	add	r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	4a2e      	ldr	r2, [pc, #184]	; (8002b64 <xTaskResumeAll+0x1ec>)
 8002aaa:	441a      	add	r2, r3
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	615a      	str	r2, [r3, #20]
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ab4:	492b      	ldr	r1, [pc, #172]	; (8002b64 <xTaskResumeAll+0x1ec>)
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	4413      	add	r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	440b      	add	r3, r1
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	1c59      	adds	r1, r3, #1
 8002ac4:	4827      	ldr	r0, [pc, #156]	; (8002b64 <xTaskResumeAll+0x1ec>)
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4413      	add	r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	4403      	add	r3, r0
 8002ad0:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ad6:	4b24      	ldr	r3, [pc, #144]	; (8002b68 <xTaskResumeAll+0x1f0>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d302      	bcc.n	8002ae6 <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8002ae0:	4b22      	ldr	r3, [pc, #136]	; (8002b6c <xTaskResumeAll+0x1f4>)
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ae6:	4b1d      	ldr	r3, [pc, #116]	; (8002b5c <xTaskResumeAll+0x1e4>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f47f af6c 	bne.w	80029c8 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002af6:	f000 fa6b 	bl	8002fd0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002afa:	4b1d      	ldr	r3, [pc, #116]	; (8002b70 <xTaskResumeAll+0x1f8>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d010      	beq.n	8002b28 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002b06:	f000 f849 	bl	8002b9c <xTaskIncrementTick>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d002      	beq.n	8002b16 <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8002b10:	4b16      	ldr	r3, [pc, #88]	; (8002b6c <xTaskResumeAll+0x1f4>)
 8002b12:	2201      	movs	r2, #1
 8002b14:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1f1      	bne.n	8002b06 <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8002b22:	4b13      	ldr	r3, [pc, #76]	; (8002b70 <xTaskResumeAll+0x1f8>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002b28:	4b10      	ldr	r3, [pc, #64]	; (8002b6c <xTaskResumeAll+0x1f4>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d009      	beq.n	8002b44 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002b30:	2301      	movs	r3, #1
 8002b32:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002b34:	4b0f      	ldr	r3, [pc, #60]	; (8002b74 <xTaskResumeAll+0x1fc>)
 8002b36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b3a:	601a      	str	r2, [r3, #0]
 8002b3c:	f3bf 8f4f 	dsb	sy
 8002b40:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002b44:	f000 fe86 	bl	8003854 <vPortExitCritical>

    return xAlreadyYielded;
 8002b48:	69bb      	ldr	r3, [r7, #24]
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3720      	adds	r7, #32
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	2000013c 	.word	0x2000013c
 8002b58:	20000114 	.word	0x20000114
 8002b5c:	200000d4 	.word	0x200000d4
 8002b60:	2000011c 	.word	0x2000011c
 8002b64:	20000040 	.word	0x20000040
 8002b68:	2000003c 	.word	0x2000003c
 8002b6c:	20000128 	.word	0x20000128
 8002b70:	20000124 	.word	0x20000124
 8002b74:	e000ed04 	.word	0xe000ed04

08002b78 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002b7e:	f000 ff25 	bl	80039cc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002b82:	2300      	movs	r3, #0
 8002b84:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002b86:	4b04      	ldr	r3, [pc, #16]	; (8002b98 <xTaskGetTickCountFromISR+0x20>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002b8c:	683b      	ldr	r3, [r7, #0]
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	20000118 	.word	0x20000118

08002b9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b08a      	sub	sp, #40	; 0x28
 8002ba0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ba6:	4b7f      	ldr	r3, [pc, #508]	; (8002da4 <xTaskIncrementTick+0x208>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	f040 80f0 	bne.w	8002d90 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002bb0:	4b7d      	ldr	r3, [pc, #500]	; (8002da8 <xTaskIncrementTick+0x20c>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002bb8:	4a7b      	ldr	r2, [pc, #492]	; (8002da8 <xTaskIncrementTick+0x20c>)
 8002bba:	6a3b      	ldr	r3, [r7, #32]
 8002bbc:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002bbe:	6a3b      	ldr	r3, [r7, #32]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d120      	bne.n	8002c06 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002bc4:	4b79      	ldr	r3, [pc, #484]	; (8002dac <xTaskIncrementTick+0x210>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00a      	beq.n	8002be4 <xTaskIncrementTick+0x48>
        __asm volatile
 8002bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd2:	f383 8811 	msr	BASEPRI, r3
 8002bd6:	f3bf 8f6f 	isb	sy
 8002bda:	f3bf 8f4f 	dsb	sy
 8002bde:	607b      	str	r3, [r7, #4]
    }
 8002be0:	bf00      	nop
 8002be2:	e7fe      	b.n	8002be2 <xTaskIncrementTick+0x46>
 8002be4:	4b71      	ldr	r3, [pc, #452]	; (8002dac <xTaskIncrementTick+0x210>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	61fb      	str	r3, [r7, #28]
 8002bea:	4b71      	ldr	r3, [pc, #452]	; (8002db0 <xTaskIncrementTick+0x214>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a6f      	ldr	r2, [pc, #444]	; (8002dac <xTaskIncrementTick+0x210>)
 8002bf0:	6013      	str	r3, [r2, #0]
 8002bf2:	4a6f      	ldr	r2, [pc, #444]	; (8002db0 <xTaskIncrementTick+0x214>)
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	6013      	str	r3, [r2, #0]
 8002bf8:	4b6e      	ldr	r3, [pc, #440]	; (8002db4 <xTaskIncrementTick+0x218>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	4a6d      	ldr	r2, [pc, #436]	; (8002db4 <xTaskIncrementTick+0x218>)
 8002c00:	6013      	str	r3, [r2, #0]
 8002c02:	f000 f9e5 	bl	8002fd0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002c06:	4b6c      	ldr	r3, [pc, #432]	; (8002db8 <xTaskIncrementTick+0x21c>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	6a3a      	ldr	r2, [r7, #32]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	f0c0 80aa 	bcc.w	8002d66 <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c12:	4b66      	ldr	r3, [pc, #408]	; (8002dac <xTaskIncrementTick+0x210>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d104      	bne.n	8002c26 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c1c:	4b66      	ldr	r3, [pc, #408]	; (8002db8 <xTaskIncrementTick+0x21c>)
 8002c1e:	f04f 32ff 	mov.w	r2, #4294967295
 8002c22:	601a      	str	r2, [r3, #0]
                    break;
 8002c24:	e09f      	b.n	8002d66 <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c26:	4b61      	ldr	r3, [pc, #388]	; (8002dac <xTaskIncrementTick+0x210>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002c36:	6a3a      	ldr	r2, [r7, #32]
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d203      	bcs.n	8002c46 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002c3e:	4a5e      	ldr	r2, [pc, #376]	; (8002db8 <xTaskIncrementTick+0x21c>)
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002c44:	e08f      	b.n	8002d66 <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	613b      	str	r3, [r7, #16]
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	68d2      	ldr	r2, [r2, #12]
 8002c54:	609a      	str	r2, [r3, #8]
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	6892      	ldr	r2, [r2, #8]
 8002c5e:	605a      	str	r2, [r3, #4]
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	685a      	ldr	r2, [r3, #4]
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	3304      	adds	r3, #4
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d103      	bne.n	8002c74 <xTaskIncrementTick+0xd8>
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	68da      	ldr	r2, [r3, #12]
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	605a      	str	r2, [r3, #4]
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	2200      	movs	r2, #0
 8002c78:	615a      	str	r2, [r3, #20]
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	1e5a      	subs	r2, r3, #1
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d01e      	beq.n	8002cca <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c90:	60fb      	str	r3, [r7, #12]
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	69db      	ldr	r3, [r3, #28]
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	6a12      	ldr	r2, [r2, #32]
 8002c9a:	609a      	str	r2, [r3, #8]
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	69d2      	ldr	r2, [r2, #28]
 8002ca4:	605a      	str	r2, [r3, #4]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	685a      	ldr	r2, [r3, #4]
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	3318      	adds	r3, #24
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d103      	bne.n	8002cba <xTaskIncrementTick+0x11e>
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	6a1a      	ldr	r2, [r3, #32]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	605a      	str	r2, [r3, #4]
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	629a      	str	r2, [r3, #40]	; 0x28
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	1e5a      	subs	r2, r3, #1
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f003 fb75 	bl	80063bc <SEGGER_SYSVIEW_OnTaskStartReady>
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	409a      	lsls	r2, r3
 8002cda:	4b38      	ldr	r3, [pc, #224]	; (8002dbc <xTaskIncrementTick+0x220>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	4a36      	ldr	r2, [pc, #216]	; (8002dbc <xTaskIncrementTick+0x220>)
 8002ce2:	6013      	str	r3, [r2, #0]
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ce8:	4935      	ldr	r1, [pc, #212]	; (8002dc0 <xTaskIncrementTick+0x224>)
 8002cea:	4613      	mov	r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	4413      	add	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	440b      	add	r3, r1
 8002cf4:	3304      	adds	r3, #4
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	60bb      	str	r3, [r7, #8]
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	68ba      	ldr	r2, [r7, #8]
 8002cfe:	609a      	str	r2, [r3, #8]
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	689a      	ldr	r2, [r3, #8]
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	60da      	str	r2, [r3, #12]
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	3204      	adds	r2, #4
 8002d10:	605a      	str	r2, [r3, #4]
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	1d1a      	adds	r2, r3, #4
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	609a      	str	r2, [r3, #8]
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d1e:	4613      	mov	r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	4413      	add	r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	4a26      	ldr	r2, [pc, #152]	; (8002dc0 <xTaskIncrementTick+0x224>)
 8002d28:	441a      	add	r2, r3
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	615a      	str	r2, [r3, #20]
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d32:	4923      	ldr	r1, [pc, #140]	; (8002dc0 <xTaskIncrementTick+0x224>)
 8002d34:	4613      	mov	r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	4413      	add	r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	440b      	add	r3, r1
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	1c59      	adds	r1, r3, #1
 8002d42:	481f      	ldr	r0, [pc, #124]	; (8002dc0 <xTaskIncrementTick+0x224>)
 8002d44:	4613      	mov	r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	4413      	add	r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	4403      	add	r3, r0
 8002d4e:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d54:	4b1b      	ldr	r3, [pc, #108]	; (8002dc4 <xTaskIncrementTick+0x228>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	f4ff af59 	bcc.w	8002c12 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8002d60:	2301      	movs	r3, #1
 8002d62:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d64:	e755      	b.n	8002c12 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002d66:	4b17      	ldr	r3, [pc, #92]	; (8002dc4 <xTaskIncrementTick+0x228>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d6c:	4914      	ldr	r1, [pc, #80]	; (8002dc0 <xTaskIncrementTick+0x224>)
 8002d6e:	4613      	mov	r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	4413      	add	r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	440b      	add	r3, r1
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d901      	bls.n	8002d82 <xTaskIncrementTick+0x1e6>
                {
                    xSwitchRequired = pdTRUE;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002d82:	4b11      	ldr	r3, [pc, #68]	; (8002dc8 <xTaskIncrementTick+0x22c>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d007      	beq.n	8002d9a <xTaskIncrementTick+0x1fe>
                {
                    xSwitchRequired = pdTRUE;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d8e:	e004      	b.n	8002d9a <xTaskIncrementTick+0x1fe>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002d90:	4b0e      	ldr	r3, [pc, #56]	; (8002dcc <xTaskIncrementTick+0x230>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	3301      	adds	r3, #1
 8002d96:	4a0d      	ldr	r2, [pc, #52]	; (8002dcc <xTaskIncrementTick+0x230>)
 8002d98:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3728      	adds	r7, #40	; 0x28
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	2000013c 	.word	0x2000013c
 8002da8:	20000118 	.word	0x20000118
 8002dac:	200000cc 	.word	0x200000cc
 8002db0:	200000d0 	.word	0x200000d0
 8002db4:	2000012c 	.word	0x2000012c
 8002db8:	20000134 	.word	0x20000134
 8002dbc:	2000011c 	.word	0x2000011c
 8002dc0:	20000040 	.word	0x20000040
 8002dc4:	2000003c 	.word	0x2000003c
 8002dc8:	20000128 	.word	0x20000128
 8002dcc:	20000124 	.word	0x20000124

08002dd0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002dd6:	4b2d      	ldr	r3, [pc, #180]	; (8002e8c <vTaskSwitchContext+0xbc>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d003      	beq.n	8002de6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002dde:	4b2c      	ldr	r3, [pc, #176]	; (8002e90 <vTaskSwitchContext+0xc0>)
 8002de0:	2201      	movs	r2, #1
 8002de2:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002de4:	e04d      	b.n	8002e82 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002de6:	4b2a      	ldr	r3, [pc, #168]	; (8002e90 <vTaskSwitchContext+0xc0>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002dec:	4b29      	ldr	r3, [pc, #164]	; (8002e94 <vTaskSwitchContext+0xc4>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	fab3 f383 	clz	r3, r3
 8002df8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002dfa:	7afb      	ldrb	r3, [r7, #11]
 8002dfc:	f1c3 031f 	rsb	r3, r3, #31
 8002e00:	617b      	str	r3, [r7, #20]
 8002e02:	4925      	ldr	r1, [pc, #148]	; (8002e98 <vTaskSwitchContext+0xc8>)
 8002e04:	697a      	ldr	r2, [r7, #20]
 8002e06:	4613      	mov	r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	4413      	add	r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	440b      	add	r3, r1
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d10a      	bne.n	8002e2c <vTaskSwitchContext+0x5c>
        __asm volatile
 8002e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e1a:	f383 8811 	msr	BASEPRI, r3
 8002e1e:	f3bf 8f6f 	isb	sy
 8002e22:	f3bf 8f4f 	dsb	sy
 8002e26:	607b      	str	r3, [r7, #4]
    }
 8002e28:	bf00      	nop
 8002e2a:	e7fe      	b.n	8002e2a <vTaskSwitchContext+0x5a>
 8002e2c:	697a      	ldr	r2, [r7, #20]
 8002e2e:	4613      	mov	r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	4413      	add	r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	4a18      	ldr	r2, [pc, #96]	; (8002e98 <vTaskSwitchContext+0xc8>)
 8002e38:	4413      	add	r3, r2
 8002e3a:	613b      	str	r3, [r7, #16]
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	685a      	ldr	r2, [r3, #4]
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	605a      	str	r2, [r3, #4]
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	685a      	ldr	r2, [r3, #4]
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	3308      	adds	r3, #8
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d104      	bne.n	8002e5c <vTaskSwitchContext+0x8c>
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	685a      	ldr	r2, [r3, #4]
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	605a      	str	r2, [r3, #4]
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	4a0e      	ldr	r2, [pc, #56]	; (8002e9c <vTaskSwitchContext+0xcc>)
 8002e64:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002e66:	4b0d      	ldr	r3, [pc, #52]	; (8002e9c <vTaskSwitchContext+0xcc>)
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	4b0d      	ldr	r3, [pc, #52]	; (8002ea0 <vTaskSwitchContext+0xd0>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d102      	bne.n	8002e78 <vTaskSwitchContext+0xa8>
 8002e72:	f003 fa03 	bl	800627c <SEGGER_SYSVIEW_OnIdle>
}
 8002e76:	e004      	b.n	8002e82 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002e78:	4b08      	ldr	r3, [pc, #32]	; (8002e9c <vTaskSwitchContext+0xcc>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f003 fa5b 	bl	8006338 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002e82:	bf00      	nop
 8002e84:	3718      	adds	r7, #24
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	2000013c 	.word	0x2000013c
 8002e90:	20000128 	.word	0x20000128
 8002e94:	2000011c 	.word	0x2000011c
 8002e98:	20000040 	.word	0x20000040
 8002e9c:	2000003c 	.word	0x2000003c
 8002ea0:	20000138 	.word	0x20000138

08002ea4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002eac:	f000 f852 	bl	8002f54 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002eb0:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <prvIdleTask+0x28>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d9f9      	bls.n	8002eac <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002eb8:	4b05      	ldr	r3, [pc, #20]	; (8002ed0 <prvIdleTask+0x2c>)
 8002eba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ebe:	601a      	str	r2, [r3, #0]
 8002ec0:	f3bf 8f4f 	dsb	sy
 8002ec4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002ec8:	e7f0      	b.n	8002eac <prvIdleTask+0x8>
 8002eca:	bf00      	nop
 8002ecc:	20000040 	.word	0x20000040
 8002ed0:	e000ed04 	.word	0xe000ed04

08002ed4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002eda:	2300      	movs	r3, #0
 8002edc:	607b      	str	r3, [r7, #4]
 8002ede:	e00c      	b.n	8002efa <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	4413      	add	r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	4a12      	ldr	r2, [pc, #72]	; (8002f34 <prvInitialiseTaskLists+0x60>)
 8002eec:	4413      	add	r3, r2
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7ff f9a4 	bl	800223c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	607b      	str	r3, [r7, #4]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2b04      	cmp	r3, #4
 8002efe:	d9ef      	bls.n	8002ee0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002f00:	480d      	ldr	r0, [pc, #52]	; (8002f38 <prvInitialiseTaskLists+0x64>)
 8002f02:	f7ff f99b 	bl	800223c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002f06:	480d      	ldr	r0, [pc, #52]	; (8002f3c <prvInitialiseTaskLists+0x68>)
 8002f08:	f7ff f998 	bl	800223c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002f0c:	480c      	ldr	r0, [pc, #48]	; (8002f40 <prvInitialiseTaskLists+0x6c>)
 8002f0e:	f7ff f995 	bl	800223c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002f12:	480c      	ldr	r0, [pc, #48]	; (8002f44 <prvInitialiseTaskLists+0x70>)
 8002f14:	f7ff f992 	bl	800223c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002f18:	480b      	ldr	r0, [pc, #44]	; (8002f48 <prvInitialiseTaskLists+0x74>)
 8002f1a:	f7ff f98f 	bl	800223c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002f1e:	4b0b      	ldr	r3, [pc, #44]	; (8002f4c <prvInitialiseTaskLists+0x78>)
 8002f20:	4a05      	ldr	r2, [pc, #20]	; (8002f38 <prvInitialiseTaskLists+0x64>)
 8002f22:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002f24:	4b0a      	ldr	r3, [pc, #40]	; (8002f50 <prvInitialiseTaskLists+0x7c>)
 8002f26:	4a05      	ldr	r2, [pc, #20]	; (8002f3c <prvInitialiseTaskLists+0x68>)
 8002f28:	601a      	str	r2, [r3, #0]
}
 8002f2a:	bf00      	nop
 8002f2c:	3708      	adds	r7, #8
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	20000040 	.word	0x20000040
 8002f38:	200000a4 	.word	0x200000a4
 8002f3c:	200000b8 	.word	0x200000b8
 8002f40:	200000d4 	.word	0x200000d4
 8002f44:	200000e8 	.word	0x200000e8
 8002f48:	20000100 	.word	0x20000100
 8002f4c:	200000cc 	.word	0x200000cc
 8002f50:	200000d0 	.word	0x200000d0

08002f54 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002f5a:	e019      	b.n	8002f90 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002f5c:	f000 fc4a 	bl	80037f4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f60:	4b10      	ldr	r3, [pc, #64]	; (8002fa4 <prvCheckTasksWaitingTermination+0x50>)
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	3304      	adds	r3, #4
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7ff f9ef 	bl	8002350 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002f72:	4b0d      	ldr	r3, [pc, #52]	; (8002fa8 <prvCheckTasksWaitingTermination+0x54>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	3b01      	subs	r3, #1
 8002f78:	4a0b      	ldr	r2, [pc, #44]	; (8002fa8 <prvCheckTasksWaitingTermination+0x54>)
 8002f7a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002f7c:	4b0b      	ldr	r3, [pc, #44]	; (8002fac <prvCheckTasksWaitingTermination+0x58>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	3b01      	subs	r3, #1
 8002f82:	4a0a      	ldr	r2, [pc, #40]	; (8002fac <prvCheckTasksWaitingTermination+0x58>)
 8002f84:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002f86:	f000 fc65 	bl	8003854 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 f810 	bl	8002fb0 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002f90:	4b06      	ldr	r3, [pc, #24]	; (8002fac <prvCheckTasksWaitingTermination+0x58>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d1e1      	bne.n	8002f5c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002f98:	bf00      	nop
 8002f9a:	bf00      	nop
 8002f9c:	3708      	adds	r7, #8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	200000e8 	.word	0x200000e8
 8002fa8:	20000114 	.word	0x20000114
 8002fac:	200000fc 	.word	0x200000fc

08002fb0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f000 fe25 	bl	8003c0c <vPortFree>
                vPortFree( pxTCB );
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 fe22 	bl	8003c0c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002fc8:	bf00      	nop
 8002fca:	3708      	adds	r7, #8
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002fd4:	4b0a      	ldr	r3, [pc, #40]	; (8003000 <prvResetNextTaskUnblockTime+0x30>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d104      	bne.n	8002fe8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002fde:	4b09      	ldr	r3, [pc, #36]	; (8003004 <prvResetNextTaskUnblockTime+0x34>)
 8002fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8002fe4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002fe6:	e005      	b.n	8002ff4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002fe8:	4b05      	ldr	r3, [pc, #20]	; (8003000 <prvResetNextTaskUnblockTime+0x30>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a04      	ldr	r2, [pc, #16]	; (8003004 <prvResetNextTaskUnblockTime+0x34>)
 8002ff2:	6013      	str	r3, [r2, #0]
}
 8002ff4:	bf00      	nop
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	200000cc 	.word	0x200000cc
 8003004:	20000134 	.word	0x20000134

08003008 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8003008:	b580      	push	{r7, lr}
 800300a:	b088      	sub	sp, #32
 800300c:	af02      	add	r7, sp, #8
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
 8003014:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d00a      	beq.n	8003032 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 800301c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003020:	f383 8811 	msr	BASEPRI, r3
 8003024:	f3bf 8f6f 	isb	sy
 8003028:	f3bf 8f4f 	dsb	sy
 800302c:	613b      	str	r3, [r7, #16]
    }
 800302e:	bf00      	nop
 8003030:	e7fe      	b.n	8003030 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8003032:	f000 fbdf 	bl	80037f4 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003036:	4b36      	ldr	r3, [pc, #216]	; (8003110 <xTaskGenericNotifyWait+0x108>)
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	4413      	add	r3, r2
 800303e:	3354      	adds	r3, #84	; 0x54
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	b2db      	uxtb	r3, r3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d022      	beq.n	800308e <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8003048:	4b31      	ldr	r3, [pc, #196]	; (8003110 <xTaskGenericNotifyWait+0x108>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	3214      	adds	r2, #20
 8003050:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003054:	68ba      	ldr	r2, [r7, #8]
 8003056:	43d2      	mvns	r2, r2
 8003058:	4011      	ands	r1, r2
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	3214      	adds	r2, #20
 800305e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8003062:	4b2b      	ldr	r3, [pc, #172]	; (8003110 <xTaskGenericNotifyWait+0x108>)
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	4413      	add	r3, r2
 800306a:	3354      	adds	r3, #84	; 0x54
 800306c:	2201      	movs	r2, #1
 800306e:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8003070:	6a3b      	ldr	r3, [r7, #32]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00b      	beq.n	800308e <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003076:	2101      	movs	r1, #1
 8003078:	6a38      	ldr	r0, [r7, #32]
 800307a:	f000 f981 	bl	8003380 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 800307e:	4b25      	ldr	r3, [pc, #148]	; (8003114 <xTaskGenericNotifyWait+0x10c>)
 8003080:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003084:	601a      	str	r2, [r3, #0]
 8003086:	f3bf 8f4f 	dsb	sy
 800308a:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800308e:	f000 fbe1 	bl	8003854 <vPortExitCritical>

        taskENTER_CRITICAL();
 8003092:	f000 fbaf 	bl	80037f4 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8003096:	683a      	ldr	r2, [r7, #0]
 8003098:	6a3b      	ldr	r3, [r7, #32]
 800309a:	9300      	str	r3, [sp, #0]
 800309c:	4613      	mov	r3, r2
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	68b9      	ldr	r1, [r7, #8]
 80030a2:	2040      	movs	r0, #64	; 0x40
 80030a4:	f002 fd14 	bl	8005ad0 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d007      	beq.n	80030be <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80030ae:	4b18      	ldr	r3, [pc, #96]	; (8003110 <xTaskGenericNotifyWait+0x108>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	3214      	adds	r2, #20
 80030b6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80030be:	4b14      	ldr	r3, [pc, #80]	; (8003110 <xTaskGenericNotifyWait+0x108>)
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	4413      	add	r3, r2
 80030c6:	3354      	adds	r3, #84	; 0x54
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d002      	beq.n	80030d6 <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80030d0:	2300      	movs	r3, #0
 80030d2:	617b      	str	r3, [r7, #20]
 80030d4:	e00e      	b.n	80030f4 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 80030d6:	4b0e      	ldr	r3, [pc, #56]	; (8003110 <xTaskGenericNotifyWait+0x108>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	3214      	adds	r2, #20
 80030de:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	43d2      	mvns	r2, r2
 80030e6:	4011      	ands	r1, r2
 80030e8:	68fa      	ldr	r2, [r7, #12]
 80030ea:	3214      	adds	r2, #20
 80030ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 80030f0:	2301      	movs	r3, #1
 80030f2:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 80030f4:	4b06      	ldr	r3, [pc, #24]	; (8003110 <xTaskGenericNotifyWait+0x108>)
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	4413      	add	r3, r2
 80030fc:	3354      	adds	r3, #84	; 0x54
 80030fe:	2200      	movs	r2, #0
 8003100:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8003102:	f000 fba7 	bl	8003854 <vPortExitCritical>

        return xReturn;
 8003106:	697b      	ldr	r3, [r7, #20]
    }
 8003108:	4618      	mov	r0, r3
 800310a:	3718      	adds	r7, #24
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	2000003c 	.word	0x2000003c
 8003114:	e000ed04 	.word	0xe000ed04

08003118 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8003118:	b580      	push	{r7, lr}
 800311a:	b090      	sub	sp, #64	; 0x40
 800311c:	af02      	add	r7, sp, #8
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
 8003124:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8003126:	2301      	movs	r3, #1
 8003128:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00a      	beq.n	8003146 <xTaskGenericNotify+0x2e>
        __asm volatile
 8003130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003134:	f383 8811 	msr	BASEPRI, r3
 8003138:	f3bf 8f6f 	isb	sy
 800313c:	f3bf 8f4f 	dsb	sy
 8003140:	623b      	str	r3, [r7, #32]
    }
 8003142:	bf00      	nop
 8003144:	e7fe      	b.n	8003144 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d10a      	bne.n	8003162 <xTaskGenericNotify+0x4a>
        __asm volatile
 800314c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003150:	f383 8811 	msr	BASEPRI, r3
 8003154:	f3bf 8f6f 	isb	sy
 8003158:	f3bf 8f4f 	dsb	sy
 800315c:	61fb      	str	r3, [r7, #28]
    }
 800315e:	bf00      	nop
 8003160:	e7fe      	b.n	8003160 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	633b      	str	r3, [r7, #48]	; 0x30

        taskENTER_CRITICAL();
 8003166:	f000 fb45 	bl	80037f4 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 800316a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800316c:	2b00      	cmp	r3, #0
 800316e:	d006      	beq.n	800317e <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8003170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003172:	68ba      	ldr	r2, [r7, #8]
 8003174:	3214      	adds	r2, #20
 8003176:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800317a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800317c:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800317e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	4413      	add	r3, r2
 8003184:	3354      	adds	r3, #84	; 0x54
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800318c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	4413      	add	r3, r2
 8003192:	3354      	adds	r3, #84	; 0x54
 8003194:	2202      	movs	r2, #2
 8003196:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8003198:	78fb      	ldrb	r3, [r7, #3]
 800319a:	2b04      	cmp	r3, #4
 800319c:	d83b      	bhi.n	8003216 <xTaskGenericNotify+0xfe>
 800319e:	a201      	add	r2, pc, #4	; (adr r2, 80031a4 <xTaskGenericNotify+0x8c>)
 80031a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a4:	08003235 	.word	0x08003235
 80031a8:	080031b9 	.word	0x080031b9
 80031ac:	080031d5 	.word	0x080031d5
 80031b0:	080031ed 	.word	0x080031ed
 80031b4:	080031fb 	.word	0x080031fb
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80031b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ba:	68ba      	ldr	r2, [r7, #8]
 80031bc:	3214      	adds	r2, #20
 80031be:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	ea42 0103 	orr.w	r1, r2, r3
 80031c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ca:	68ba      	ldr	r2, [r7, #8]
 80031cc:	3214      	adds	r2, #20
 80031ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80031d2:	e032      	b.n	800323a <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80031d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d6:	68ba      	ldr	r2, [r7, #8]
 80031d8:	3214      	adds	r2, #20
 80031da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031de:	1c59      	adds	r1, r3, #1
 80031e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e2:	68ba      	ldr	r2, [r7, #8]
 80031e4:	3214      	adds	r2, #20
 80031e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80031ea:	e026      	b.n	800323a <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80031ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ee:	68ba      	ldr	r2, [r7, #8]
 80031f0:	3214      	adds	r2, #20
 80031f2:	6879      	ldr	r1, [r7, #4]
 80031f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80031f8:	e01f      	b.n	800323a <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80031fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d006      	beq.n	8003210 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003204:	68ba      	ldr	r2, [r7, #8]
 8003206:	3214      	adds	r2, #20
 8003208:	6879      	ldr	r1, [r7, #4]
 800320a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800320e:	e014      	b.n	800323a <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8003210:	2300      	movs	r3, #0
 8003212:	637b      	str	r3, [r7, #52]	; 0x34
                    break;
 8003214:	e011      	b.n	800323a <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8003216:	4b55      	ldr	r3, [pc, #340]	; (800336c <xTaskGenericNotify+0x254>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00c      	beq.n	8003238 <xTaskGenericNotify+0x120>
        __asm volatile
 800321e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003222:	f383 8811 	msr	BASEPRI, r3
 8003226:	f3bf 8f6f 	isb	sy
 800322a:	f3bf 8f4f 	dsb	sy
 800322e:	61bb      	str	r3, [r7, #24]
    }
 8003230:	bf00      	nop
 8003232:	e7fe      	b.n	8003232 <xTaskGenericNotify+0x11a>
                    break;
 8003234:	bf00      	nop
 8003236:	e000      	b.n	800323a <xTaskGenericNotify+0x122>

                    break;
 8003238:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 800323a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800323c:	4618      	mov	r0, r3
 800323e:	f003 f95f 	bl	8006500 <SEGGER_SYSVIEW_ShrinkId>
 8003242:	4601      	mov	r1, r0
 8003244:	78fa      	ldrb	r2, [r7, #3]
 8003246:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003248:	9300      	str	r3, [sp, #0]
 800324a:	4613      	mov	r3, r2
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	203e      	movs	r0, #62	; 0x3e
 8003250:	f002 fc3e 	bl	8005ad0 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003254:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003258:	2b01      	cmp	r3, #1
 800325a:	d17f      	bne.n	800335c <xTaskGenericNotify+0x244>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800325c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800325e:	695b      	ldr	r3, [r3, #20]
 8003260:	62bb      	str	r3, [r7, #40]	; 0x28
 8003262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003268:	68d2      	ldr	r2, [r2, #12]
 800326a:	609a      	str	r2, [r3, #8]
 800326c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003272:	6892      	ldr	r2, [r2, #8]
 8003274:	605a      	str	r2, [r3, #4]
 8003276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800327c:	3304      	adds	r3, #4
 800327e:	429a      	cmp	r2, r3
 8003280:	d103      	bne.n	800328a <xTaskGenericNotify+0x172>
 8003282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003284:	68da      	ldr	r2, [r3, #12]
 8003286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003288:	605a      	str	r2, [r3, #4]
 800328a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328c:	2200      	movs	r2, #0
 800328e:	615a      	str	r2, [r3, #20]
 8003290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	1e5a      	subs	r2, r3, #1
 8003296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003298:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 800329a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800329c:	4618      	mov	r0, r3
 800329e:	f003 f88d 	bl	80063bc <SEGGER_SYSVIEW_OnTaskStartReady>
 80032a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a6:	2201      	movs	r2, #1
 80032a8:	409a      	lsls	r2, r3
 80032aa:	4b31      	ldr	r3, [pc, #196]	; (8003370 <xTaskGenericNotify+0x258>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	4a2f      	ldr	r2, [pc, #188]	; (8003370 <xTaskGenericNotify+0x258>)
 80032b2:	6013      	str	r3, [r2, #0]
 80032b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032b8:	492e      	ldr	r1, [pc, #184]	; (8003374 <xTaskGenericNotify+0x25c>)
 80032ba:	4613      	mov	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4413      	add	r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	440b      	add	r3, r1
 80032c4:	3304      	adds	r3, #4
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	627b      	str	r3, [r7, #36]	; 0x24
 80032ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032ce:	609a      	str	r2, [r3, #8]
 80032d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d2:	689a      	ldr	r2, [r3, #8]
 80032d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d6:	60da      	str	r2, [r3, #12]
 80032d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032de:	3204      	adds	r2, #4
 80032e0:	605a      	str	r2, [r3, #4]
 80032e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e4:	1d1a      	adds	r2, r3, #4
 80032e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e8:	609a      	str	r2, [r3, #8]
 80032ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ee:	4613      	mov	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	4413      	add	r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	4a1f      	ldr	r2, [pc, #124]	; (8003374 <xTaskGenericNotify+0x25c>)
 80032f8:	441a      	add	r2, r3
 80032fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032fc:	615a      	str	r2, [r3, #20]
 80032fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003302:	491c      	ldr	r1, [pc, #112]	; (8003374 <xTaskGenericNotify+0x25c>)
 8003304:	4613      	mov	r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	4413      	add	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	440b      	add	r3, r1
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	1c59      	adds	r1, r3, #1
 8003312:	4818      	ldr	r0, [pc, #96]	; (8003374 <xTaskGenericNotify+0x25c>)
 8003314:	4613      	mov	r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	4413      	add	r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	4403      	add	r3, r0
 800331e:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003324:	2b00      	cmp	r3, #0
 8003326:	d00a      	beq.n	800333e <xTaskGenericNotify+0x226>
        __asm volatile
 8003328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800332c:	f383 8811 	msr	BASEPRI, r3
 8003330:	f3bf 8f6f 	isb	sy
 8003334:	f3bf 8f4f 	dsb	sy
 8003338:	617b      	str	r3, [r7, #20]
    }
 800333a:	bf00      	nop
 800333c:	e7fe      	b.n	800333c <xTaskGenericNotify+0x224>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800333e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003342:	4b0d      	ldr	r3, [pc, #52]	; (8003378 <xTaskGenericNotify+0x260>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003348:	429a      	cmp	r2, r3
 800334a:	d907      	bls.n	800335c <xTaskGenericNotify+0x244>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 800334c:	4b0b      	ldr	r3, [pc, #44]	; (800337c <xTaskGenericNotify+0x264>)
 800334e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003352:	601a      	str	r2, [r3, #0]
 8003354:	f3bf 8f4f 	dsb	sy
 8003358:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800335c:	f000 fa7a 	bl	8003854 <vPortExitCritical>

        return xReturn;
 8003360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8003362:	4618      	mov	r0, r3
 8003364:	3738      	adds	r7, #56	; 0x38
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	20000118 	.word	0x20000118
 8003370:	2000011c 	.word	0x2000011c
 8003374:	20000040 	.word	0x20000040
 8003378:	2000003c 	.word	0x2000003c
 800337c:	e000ed04 	.word	0xe000ed04

08003380 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800338a:	4b3c      	ldr	r3, [pc, #240]	; (800347c <prvAddCurrentTaskToDelayedList+0xfc>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003390:	4b3b      	ldr	r3, [pc, #236]	; (8003480 <prvAddCurrentTaskToDelayedList+0x100>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	3304      	adds	r3, #4
 8003396:	4618      	mov	r0, r3
 8003398:	f7fe ffda 	bl	8002350 <uxListRemove>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d10b      	bne.n	80033ba <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80033a2:	4b37      	ldr	r3, [pc, #220]	; (8003480 <prvAddCurrentTaskToDelayedList+0x100>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a8:	2201      	movs	r2, #1
 80033aa:	fa02 f303 	lsl.w	r3, r2, r3
 80033ae:	43da      	mvns	r2, r3
 80033b0:	4b34      	ldr	r3, [pc, #208]	; (8003484 <prvAddCurrentTaskToDelayedList+0x104>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4013      	ands	r3, r2
 80033b6:	4a33      	ldr	r2, [pc, #204]	; (8003484 <prvAddCurrentTaskToDelayedList+0x104>)
 80033b8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c0:	d124      	bne.n	800340c <prvAddCurrentTaskToDelayedList+0x8c>
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d021      	beq.n	800340c <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033c8:	4b2f      	ldr	r3, [pc, #188]	; (8003488 <prvAddCurrentTaskToDelayedList+0x108>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	613b      	str	r3, [r7, #16]
 80033ce:	4b2c      	ldr	r3, [pc, #176]	; (8003480 <prvAddCurrentTaskToDelayedList+0x100>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	609a      	str	r2, [r3, #8]
 80033d6:	4b2a      	ldr	r3, [pc, #168]	; (8003480 <prvAddCurrentTaskToDelayedList+0x100>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	693a      	ldr	r2, [r7, #16]
 80033dc:	6892      	ldr	r2, [r2, #8]
 80033de:	60da      	str	r2, [r3, #12]
 80033e0:	4b27      	ldr	r3, [pc, #156]	; (8003480 <prvAddCurrentTaskToDelayedList+0x100>)
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	3204      	adds	r2, #4
 80033ea:	605a      	str	r2, [r3, #4]
 80033ec:	4b24      	ldr	r3, [pc, #144]	; (8003480 <prvAddCurrentTaskToDelayedList+0x100>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	1d1a      	adds	r2, r3, #4
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	609a      	str	r2, [r3, #8]
 80033f6:	4b22      	ldr	r3, [pc, #136]	; (8003480 <prvAddCurrentTaskToDelayedList+0x100>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a23      	ldr	r2, [pc, #140]	; (8003488 <prvAddCurrentTaskToDelayedList+0x108>)
 80033fc:	615a      	str	r2, [r3, #20]
 80033fe:	4b22      	ldr	r3, [pc, #136]	; (8003488 <prvAddCurrentTaskToDelayedList+0x108>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	3301      	adds	r3, #1
 8003404:	4a20      	ldr	r2, [pc, #128]	; (8003488 <prvAddCurrentTaskToDelayedList+0x108>)
 8003406:	6013      	str	r3, [r2, #0]
 8003408:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800340a:	e032      	b.n	8003472 <prvAddCurrentTaskToDelayedList+0xf2>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800340c:	697a      	ldr	r2, [r7, #20]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4413      	add	r3, r2
 8003412:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003414:	4b1a      	ldr	r3, [pc, #104]	; (8003480 <prvAddCurrentTaskToDelayedList+0x100>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	429a      	cmp	r2, r3
 8003422:	d20f      	bcs.n	8003444 <prvAddCurrentTaskToDelayedList+0xc4>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003424:	4b16      	ldr	r3, [pc, #88]	; (8003480 <prvAddCurrentTaskToDelayedList+0x100>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2104      	movs	r1, #4
 800342a:	4618      	mov	r0, r3
 800342c:	f003 f808 	bl	8006440 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003430:	4b16      	ldr	r3, [pc, #88]	; (800348c <prvAddCurrentTaskToDelayedList+0x10c>)
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	4b12      	ldr	r3, [pc, #72]	; (8003480 <prvAddCurrentTaskToDelayedList+0x100>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	3304      	adds	r3, #4
 800343a:	4619      	mov	r1, r3
 800343c:	4610      	mov	r0, r2
 800343e:	f7fe ff4e 	bl	80022de <vListInsert>
}
 8003442:	e016      	b.n	8003472 <prvAddCurrentTaskToDelayedList+0xf2>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003444:	4b0e      	ldr	r3, [pc, #56]	; (8003480 <prvAddCurrentTaskToDelayedList+0x100>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2104      	movs	r1, #4
 800344a:	4618      	mov	r0, r3
 800344c:	f002 fff8 	bl	8006440 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003450:	4b0f      	ldr	r3, [pc, #60]	; (8003490 <prvAddCurrentTaskToDelayedList+0x110>)
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	4b0a      	ldr	r3, [pc, #40]	; (8003480 <prvAddCurrentTaskToDelayedList+0x100>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	3304      	adds	r3, #4
 800345a:	4619      	mov	r1, r3
 800345c:	4610      	mov	r0, r2
 800345e:	f7fe ff3e 	bl	80022de <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003462:	4b0c      	ldr	r3, [pc, #48]	; (8003494 <prvAddCurrentTaskToDelayedList+0x114>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	429a      	cmp	r2, r3
 800346a:	d202      	bcs.n	8003472 <prvAddCurrentTaskToDelayedList+0xf2>
                        xNextTaskUnblockTime = xTimeToWake;
 800346c:	4a09      	ldr	r2, [pc, #36]	; (8003494 <prvAddCurrentTaskToDelayedList+0x114>)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6013      	str	r3, [r2, #0]
}
 8003472:	bf00      	nop
 8003474:	3718      	adds	r7, #24
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	20000118 	.word	0x20000118
 8003480:	2000003c 	.word	0x2000003c
 8003484:	2000011c 	.word	0x2000011c
 8003488:	20000100 	.word	0x20000100
 800348c:	200000d0 	.word	0x200000d0
 8003490:	200000cc 	.word	0x200000cc
 8003494:	20000134 	.word	0x20000134

08003498 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	3b04      	subs	r3, #4
 80034a8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80034b0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	3b04      	subs	r3, #4
 80034b6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	f023 0201 	bic.w	r2, r3, #1
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	3b04      	subs	r3, #4
 80034c6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80034c8:	4a0c      	ldr	r2, [pc, #48]	; (80034fc <pxPortInitialiseStack+0x64>)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	3b14      	subs	r3, #20
 80034d2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	3b04      	subs	r3, #4
 80034de:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f06f 0202 	mvn.w	r2, #2
 80034e6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	3b20      	subs	r3, #32
 80034ec:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80034ee:	68fb      	ldr	r3, [r7, #12]
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3714      	adds	r7, #20
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr
 80034fc:	08003501 	.word	0x08003501

08003500 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003500:	b480      	push	{r7}
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003506:	2300      	movs	r3, #0
 8003508:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800350a:	4b12      	ldr	r3, [pc, #72]	; (8003554 <prvTaskExitError+0x54>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003512:	d00a      	beq.n	800352a <prvTaskExitError+0x2a>
        __asm volatile
 8003514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003518:	f383 8811 	msr	BASEPRI, r3
 800351c:	f3bf 8f6f 	isb	sy
 8003520:	f3bf 8f4f 	dsb	sy
 8003524:	60fb      	str	r3, [r7, #12]
    }
 8003526:	bf00      	nop
 8003528:	e7fe      	b.n	8003528 <prvTaskExitError+0x28>
        __asm volatile
 800352a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800352e:	f383 8811 	msr	BASEPRI, r3
 8003532:	f3bf 8f6f 	isb	sy
 8003536:	f3bf 8f4f 	dsb	sy
 800353a:	60bb      	str	r3, [r7, #8]
    }
 800353c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800353e:	bf00      	nop
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d0fc      	beq.n	8003540 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003546:	bf00      	nop
 8003548:	bf00      	nop
 800354a:	3714      	adds	r7, #20
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr
 8003554:	20000010 	.word	0x20000010
	...

08003560 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003560:	4b07      	ldr	r3, [pc, #28]	; (8003580 <pxCurrentTCBConst2>)
 8003562:	6819      	ldr	r1, [r3, #0]
 8003564:	6808      	ldr	r0, [r1, #0]
 8003566:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800356a:	f380 8809 	msr	PSP, r0
 800356e:	f3bf 8f6f 	isb	sy
 8003572:	f04f 0000 	mov.w	r0, #0
 8003576:	f380 8811 	msr	BASEPRI, r0
 800357a:	4770      	bx	lr
 800357c:	f3af 8000 	nop.w

08003580 <pxCurrentTCBConst2>:
 8003580:	2000003c 	.word	0x2000003c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003584:	bf00      	nop
 8003586:	bf00      	nop

08003588 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003588:	4808      	ldr	r0, [pc, #32]	; (80035ac <prvPortStartFirstTask+0x24>)
 800358a:	6800      	ldr	r0, [r0, #0]
 800358c:	6800      	ldr	r0, [r0, #0]
 800358e:	f380 8808 	msr	MSP, r0
 8003592:	f04f 0000 	mov.w	r0, #0
 8003596:	f380 8814 	msr	CONTROL, r0
 800359a:	b662      	cpsie	i
 800359c:	b661      	cpsie	f
 800359e:	f3bf 8f4f 	dsb	sy
 80035a2:	f3bf 8f6f 	isb	sy
 80035a6:	df00      	svc	0
 80035a8:	bf00      	nop
 80035aa:	0000      	.short	0x0000
 80035ac:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80035b0:	bf00      	nop
 80035b2:	bf00      	nop

080035b4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b086      	sub	sp, #24
 80035b8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80035ba:	4b46      	ldr	r3, [pc, #280]	; (80036d4 <xPortStartScheduler+0x120>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a46      	ldr	r2, [pc, #280]	; (80036d8 <xPortStartScheduler+0x124>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d10a      	bne.n	80035da <xPortStartScheduler+0x26>
        __asm volatile
 80035c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c8:	f383 8811 	msr	BASEPRI, r3
 80035cc:	f3bf 8f6f 	isb	sy
 80035d0:	f3bf 8f4f 	dsb	sy
 80035d4:	613b      	str	r3, [r7, #16]
    }
 80035d6:	bf00      	nop
 80035d8:	e7fe      	b.n	80035d8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80035da:	4b3e      	ldr	r3, [pc, #248]	; (80036d4 <xPortStartScheduler+0x120>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a3f      	ldr	r2, [pc, #252]	; (80036dc <xPortStartScheduler+0x128>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d10a      	bne.n	80035fa <xPortStartScheduler+0x46>
        __asm volatile
 80035e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e8:	f383 8811 	msr	BASEPRI, r3
 80035ec:	f3bf 8f6f 	isb	sy
 80035f0:	f3bf 8f4f 	dsb	sy
 80035f4:	60fb      	str	r3, [r7, #12]
    }
 80035f6:	bf00      	nop
 80035f8:	e7fe      	b.n	80035f8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80035fa:	4b39      	ldr	r3, [pc, #228]	; (80036e0 <xPortStartScheduler+0x12c>)
 80035fc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	b2db      	uxtb	r3, r3
 8003604:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	22ff      	movs	r2, #255	; 0xff
 800360a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	b2db      	uxtb	r3, r3
 8003612:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003614:	78fb      	ldrb	r3, [r7, #3]
 8003616:	b2db      	uxtb	r3, r3
 8003618:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800361c:	b2da      	uxtb	r2, r3
 800361e:	4b31      	ldr	r3, [pc, #196]	; (80036e4 <xPortStartScheduler+0x130>)
 8003620:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003622:	4b31      	ldr	r3, [pc, #196]	; (80036e8 <xPortStartScheduler+0x134>)
 8003624:	2207      	movs	r2, #7
 8003626:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003628:	e009      	b.n	800363e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800362a:	4b2f      	ldr	r3, [pc, #188]	; (80036e8 <xPortStartScheduler+0x134>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	3b01      	subs	r3, #1
 8003630:	4a2d      	ldr	r2, [pc, #180]	; (80036e8 <xPortStartScheduler+0x134>)
 8003632:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003634:	78fb      	ldrb	r3, [r7, #3]
 8003636:	b2db      	uxtb	r3, r3
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	b2db      	uxtb	r3, r3
 800363c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800363e:	78fb      	ldrb	r3, [r7, #3]
 8003640:	b2db      	uxtb	r3, r3
 8003642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003646:	2b80      	cmp	r3, #128	; 0x80
 8003648:	d0ef      	beq.n	800362a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800364a:	4b27      	ldr	r3, [pc, #156]	; (80036e8 <xPortStartScheduler+0x134>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f1c3 0307 	rsb	r3, r3, #7
 8003652:	2b04      	cmp	r3, #4
 8003654:	d00a      	beq.n	800366c <xPortStartScheduler+0xb8>
        __asm volatile
 8003656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800365a:	f383 8811 	msr	BASEPRI, r3
 800365e:	f3bf 8f6f 	isb	sy
 8003662:	f3bf 8f4f 	dsb	sy
 8003666:	60bb      	str	r3, [r7, #8]
    }
 8003668:	bf00      	nop
 800366a:	e7fe      	b.n	800366a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800366c:	4b1e      	ldr	r3, [pc, #120]	; (80036e8 <xPortStartScheduler+0x134>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	021b      	lsls	r3, r3, #8
 8003672:	4a1d      	ldr	r2, [pc, #116]	; (80036e8 <xPortStartScheduler+0x134>)
 8003674:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003676:	4b1c      	ldr	r3, [pc, #112]	; (80036e8 <xPortStartScheduler+0x134>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800367e:	4a1a      	ldr	r2, [pc, #104]	; (80036e8 <xPortStartScheduler+0x134>)
 8003680:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	b2da      	uxtb	r2, r3
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800368a:	4b18      	ldr	r3, [pc, #96]	; (80036ec <xPortStartScheduler+0x138>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a17      	ldr	r2, [pc, #92]	; (80036ec <xPortStartScheduler+0x138>)
 8003690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003694:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003696:	4b15      	ldr	r3, [pc, #84]	; (80036ec <xPortStartScheduler+0x138>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a14      	ldr	r2, [pc, #80]	; (80036ec <xPortStartScheduler+0x138>)
 800369c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80036a0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80036a2:	f000 f963 	bl	800396c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80036a6:	4b12      	ldr	r3, [pc, #72]	; (80036f0 <xPortStartScheduler+0x13c>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80036ac:	f000 f982 	bl	80039b4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80036b0:	4b10      	ldr	r3, [pc, #64]	; (80036f4 <xPortStartScheduler+0x140>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a0f      	ldr	r2, [pc, #60]	; (80036f4 <xPortStartScheduler+0x140>)
 80036b6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80036ba:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80036bc:	f7ff ff64 	bl	8003588 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80036c0:	f7ff fb86 	bl	8002dd0 <vTaskSwitchContext>
    prvTaskExitError();
 80036c4:	f7ff ff1c 	bl	8003500 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3718      	adds	r7, #24
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	e000ed00 	.word	0xe000ed00
 80036d8:	410fc271 	.word	0x410fc271
 80036dc:	410fc270 	.word	0x410fc270
 80036e0:	e000e400 	.word	0xe000e400
 80036e4:	20000140 	.word	0x20000140
 80036e8:	20000144 	.word	0x20000144
 80036ec:	e000ed20 	.word	0xe000ed20
 80036f0:	20000010 	.word	0x20000010
 80036f4:	e000ef34 	.word	0xe000ef34

080036f8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b087      	sub	sp, #28
 80036fc:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80036fe:	4b37      	ldr	r3, [pc, #220]	; (80037dc <vInitPrioGroupValue+0xe4>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a37      	ldr	r2, [pc, #220]	; (80037e0 <vInitPrioGroupValue+0xe8>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d10a      	bne.n	800371e <vInitPrioGroupValue+0x26>
        __asm volatile
 8003708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800370c:	f383 8811 	msr	BASEPRI, r3
 8003710:	f3bf 8f6f 	isb	sy
 8003714:	f3bf 8f4f 	dsb	sy
 8003718:	613b      	str	r3, [r7, #16]
    }
 800371a:	bf00      	nop
 800371c:	e7fe      	b.n	800371c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800371e:	4b2f      	ldr	r3, [pc, #188]	; (80037dc <vInitPrioGroupValue+0xe4>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a30      	ldr	r2, [pc, #192]	; (80037e4 <vInitPrioGroupValue+0xec>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d10a      	bne.n	800373e <vInitPrioGroupValue+0x46>
        __asm volatile
 8003728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800372c:	f383 8811 	msr	BASEPRI, r3
 8003730:	f3bf 8f6f 	isb	sy
 8003734:	f3bf 8f4f 	dsb	sy
 8003738:	60fb      	str	r3, [r7, #12]
    }
 800373a:	bf00      	nop
 800373c:	e7fe      	b.n	800373c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800373e:	4b2a      	ldr	r3, [pc, #168]	; (80037e8 <vInitPrioGroupValue+0xf0>)
 8003740:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	b2db      	uxtb	r3, r3
 8003748:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	22ff      	movs	r2, #255	; 0xff
 800374e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	b2db      	uxtb	r3, r3
 8003756:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003758:	78fb      	ldrb	r3, [r7, #3]
 800375a:	b2db      	uxtb	r3, r3
 800375c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003760:	b2da      	uxtb	r2, r3
 8003762:	4b22      	ldr	r3, [pc, #136]	; (80037ec <vInitPrioGroupValue+0xf4>)
 8003764:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003766:	4b22      	ldr	r3, [pc, #136]	; (80037f0 <vInitPrioGroupValue+0xf8>)
 8003768:	2207      	movs	r2, #7
 800376a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800376c:	e009      	b.n	8003782 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800376e:	4b20      	ldr	r3, [pc, #128]	; (80037f0 <vInitPrioGroupValue+0xf8>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	3b01      	subs	r3, #1
 8003774:	4a1e      	ldr	r2, [pc, #120]	; (80037f0 <vInitPrioGroupValue+0xf8>)
 8003776:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003778:	78fb      	ldrb	r3, [r7, #3]
 800377a:	b2db      	uxtb	r3, r3
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	b2db      	uxtb	r3, r3
 8003780:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003782:	78fb      	ldrb	r3, [r7, #3]
 8003784:	b2db      	uxtb	r3, r3
 8003786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800378a:	2b80      	cmp	r3, #128	; 0x80
 800378c:	d0ef      	beq.n	800376e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800378e:	4b18      	ldr	r3, [pc, #96]	; (80037f0 <vInitPrioGroupValue+0xf8>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f1c3 0307 	rsb	r3, r3, #7
 8003796:	2b04      	cmp	r3, #4
 8003798:	d00a      	beq.n	80037b0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800379a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800379e:	f383 8811 	msr	BASEPRI, r3
 80037a2:	f3bf 8f6f 	isb	sy
 80037a6:	f3bf 8f4f 	dsb	sy
 80037aa:	60bb      	str	r3, [r7, #8]
    }
 80037ac:	bf00      	nop
 80037ae:	e7fe      	b.n	80037ae <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80037b0:	4b0f      	ldr	r3, [pc, #60]	; (80037f0 <vInitPrioGroupValue+0xf8>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	021b      	lsls	r3, r3, #8
 80037b6:	4a0e      	ldr	r2, [pc, #56]	; (80037f0 <vInitPrioGroupValue+0xf8>)
 80037b8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80037ba:	4b0d      	ldr	r3, [pc, #52]	; (80037f0 <vInitPrioGroupValue+0xf8>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80037c2:	4a0b      	ldr	r2, [pc, #44]	; (80037f0 <vInitPrioGroupValue+0xf8>)
 80037c4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	b2da      	uxtb	r2, r3
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80037ce:	bf00      	nop
 80037d0:	371c      	adds	r7, #28
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	e000ed00 	.word	0xe000ed00
 80037e0:	410fc271 	.word	0x410fc271
 80037e4:	410fc270 	.word	0x410fc270
 80037e8:	e000e400 	.word	0xe000e400
 80037ec:	20000140 	.word	0x20000140
 80037f0:	20000144 	.word	0x20000144

080037f4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
        __asm volatile
 80037fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037fe:	f383 8811 	msr	BASEPRI, r3
 8003802:	f3bf 8f6f 	isb	sy
 8003806:	f3bf 8f4f 	dsb	sy
 800380a:	607b      	str	r3, [r7, #4]
    }
 800380c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800380e:	4b0f      	ldr	r3, [pc, #60]	; (800384c <vPortEnterCritical+0x58>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	3301      	adds	r3, #1
 8003814:	4a0d      	ldr	r2, [pc, #52]	; (800384c <vPortEnterCritical+0x58>)
 8003816:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003818:	4b0c      	ldr	r3, [pc, #48]	; (800384c <vPortEnterCritical+0x58>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2b01      	cmp	r3, #1
 800381e:	d10f      	bne.n	8003840 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003820:	4b0b      	ldr	r3, [pc, #44]	; (8003850 <vPortEnterCritical+0x5c>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00a      	beq.n	8003840 <vPortEnterCritical+0x4c>
        __asm volatile
 800382a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800382e:	f383 8811 	msr	BASEPRI, r3
 8003832:	f3bf 8f6f 	isb	sy
 8003836:	f3bf 8f4f 	dsb	sy
 800383a:	603b      	str	r3, [r7, #0]
    }
 800383c:	bf00      	nop
 800383e:	e7fe      	b.n	800383e <vPortEnterCritical+0x4a>
    }
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr
 800384c:	20000010 	.word	0x20000010
 8003850:	e000ed04 	.word	0xe000ed04

08003854 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800385a:	4b12      	ldr	r3, [pc, #72]	; (80038a4 <vPortExitCritical+0x50>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d10a      	bne.n	8003878 <vPortExitCritical+0x24>
        __asm volatile
 8003862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003866:	f383 8811 	msr	BASEPRI, r3
 800386a:	f3bf 8f6f 	isb	sy
 800386e:	f3bf 8f4f 	dsb	sy
 8003872:	607b      	str	r3, [r7, #4]
    }
 8003874:	bf00      	nop
 8003876:	e7fe      	b.n	8003876 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003878:	4b0a      	ldr	r3, [pc, #40]	; (80038a4 <vPortExitCritical+0x50>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	3b01      	subs	r3, #1
 800387e:	4a09      	ldr	r2, [pc, #36]	; (80038a4 <vPortExitCritical+0x50>)
 8003880:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003882:	4b08      	ldr	r3, [pc, #32]	; (80038a4 <vPortExitCritical+0x50>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d105      	bne.n	8003896 <vPortExitCritical+0x42>
 800388a:	2300      	movs	r3, #0
 800388c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003894:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003896:	bf00      	nop
 8003898:	370c      	adds	r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	20000010 	.word	0x20000010
	...

080038b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80038b0:	f3ef 8009 	mrs	r0, PSP
 80038b4:	f3bf 8f6f 	isb	sy
 80038b8:	4b15      	ldr	r3, [pc, #84]	; (8003910 <pxCurrentTCBConst>)
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	f01e 0f10 	tst.w	lr, #16
 80038c0:	bf08      	it	eq
 80038c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80038c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038ca:	6010      	str	r0, [r2, #0]
 80038cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80038d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80038d4:	f380 8811 	msr	BASEPRI, r0
 80038d8:	f3bf 8f4f 	dsb	sy
 80038dc:	f3bf 8f6f 	isb	sy
 80038e0:	f7ff fa76 	bl	8002dd0 <vTaskSwitchContext>
 80038e4:	f04f 0000 	mov.w	r0, #0
 80038e8:	f380 8811 	msr	BASEPRI, r0
 80038ec:	bc09      	pop	{r0, r3}
 80038ee:	6819      	ldr	r1, [r3, #0]
 80038f0:	6808      	ldr	r0, [r1, #0]
 80038f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038f6:	f01e 0f10 	tst.w	lr, #16
 80038fa:	bf08      	it	eq
 80038fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003900:	f380 8809 	msr	PSP, r0
 8003904:	f3bf 8f6f 	isb	sy
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	f3af 8000 	nop.w

08003910 <pxCurrentTCBConst>:
 8003910:	2000003c 	.word	0x2000003c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003914:	bf00      	nop
 8003916:	bf00      	nop

08003918 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
        __asm volatile
 800391e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003922:	f383 8811 	msr	BASEPRI, r3
 8003926:	f3bf 8f6f 	isb	sy
 800392a:	f3bf 8f4f 	dsb	sy
 800392e:	607b      	str	r3, [r7, #4]
    }
 8003930:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003932:	f002 fc29 	bl	8006188 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003936:	f7ff f931 	bl	8002b9c <xTaskIncrementTick>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d006      	beq.n	800394e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003940:	f002 fc80 	bl	8006244 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003944:	4b08      	ldr	r3, [pc, #32]	; (8003968 <SysTick_Handler+0x50>)
 8003946:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800394a:	601a      	str	r2, [r3, #0]
 800394c:	e001      	b.n	8003952 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800394e:	f002 fc5d 	bl	800620c <SEGGER_SYSVIEW_RecordExitISR>
 8003952:	2300      	movs	r3, #0
 8003954:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	f383 8811 	msr	BASEPRI, r3
    }
 800395c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800395e:	bf00      	nop
 8003960:	3708      	adds	r7, #8
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	e000ed04 	.word	0xe000ed04

0800396c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800396c:	b480      	push	{r7}
 800396e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003970:	4b0b      	ldr	r3, [pc, #44]	; (80039a0 <vPortSetupTimerInterrupt+0x34>)
 8003972:	2200      	movs	r2, #0
 8003974:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003976:	4b0b      	ldr	r3, [pc, #44]	; (80039a4 <vPortSetupTimerInterrupt+0x38>)
 8003978:	2200      	movs	r2, #0
 800397a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800397c:	4b0a      	ldr	r3, [pc, #40]	; (80039a8 <vPortSetupTimerInterrupt+0x3c>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a0a      	ldr	r2, [pc, #40]	; (80039ac <vPortSetupTimerInterrupt+0x40>)
 8003982:	fba2 2303 	umull	r2, r3, r2, r3
 8003986:	099b      	lsrs	r3, r3, #6
 8003988:	4a09      	ldr	r2, [pc, #36]	; (80039b0 <vPortSetupTimerInterrupt+0x44>)
 800398a:	3b01      	subs	r3, #1
 800398c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800398e:	4b04      	ldr	r3, [pc, #16]	; (80039a0 <vPortSetupTimerInterrupt+0x34>)
 8003990:	2207      	movs	r2, #7
 8003992:	601a      	str	r2, [r3, #0]
}
 8003994:	bf00      	nop
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	e000e010 	.word	0xe000e010
 80039a4:	e000e018 	.word	0xe000e018
 80039a8:	20000000 	.word	0x20000000
 80039ac:	10624dd3 	.word	0x10624dd3
 80039b0:	e000e014 	.word	0xe000e014

080039b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80039b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80039c4 <vPortEnableVFP+0x10>
 80039b8:	6801      	ldr	r1, [r0, #0]
 80039ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80039be:	6001      	str	r1, [r0, #0]
 80039c0:	4770      	bx	lr
 80039c2:	0000      	.short	0x0000
 80039c4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80039c8:	bf00      	nop
 80039ca:	bf00      	nop

080039cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80039d2:	f3ef 8305 	mrs	r3, IPSR
 80039d6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2b0f      	cmp	r3, #15
 80039dc:	d914      	bls.n	8003a08 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80039de:	4a17      	ldr	r2, [pc, #92]	; (8003a3c <vPortValidateInterruptPriority+0x70>)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	4413      	add	r3, r2
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80039e8:	4b15      	ldr	r3, [pc, #84]	; (8003a40 <vPortValidateInterruptPriority+0x74>)
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	7afa      	ldrb	r2, [r7, #11]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d20a      	bcs.n	8003a08 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80039f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f6:	f383 8811 	msr	BASEPRI, r3
 80039fa:	f3bf 8f6f 	isb	sy
 80039fe:	f3bf 8f4f 	dsb	sy
 8003a02:	607b      	str	r3, [r7, #4]
    }
 8003a04:	bf00      	nop
 8003a06:	e7fe      	b.n	8003a06 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003a08:	4b0e      	ldr	r3, [pc, #56]	; (8003a44 <vPortValidateInterruptPriority+0x78>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003a10:	4b0d      	ldr	r3, [pc, #52]	; (8003a48 <vPortValidateInterruptPriority+0x7c>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d90a      	bls.n	8003a2e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a1c:	f383 8811 	msr	BASEPRI, r3
 8003a20:	f3bf 8f6f 	isb	sy
 8003a24:	f3bf 8f4f 	dsb	sy
 8003a28:	603b      	str	r3, [r7, #0]
    }
 8003a2a:	bf00      	nop
 8003a2c:	e7fe      	b.n	8003a2c <vPortValidateInterruptPriority+0x60>
    }
 8003a2e:	bf00      	nop
 8003a30:	3714      	adds	r7, #20
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	e000e3f0 	.word	0xe000e3f0
 8003a40:	20000140 	.word	0x20000140
 8003a44:	e000ed0c 	.word	0xe000ed0c
 8003a48:	20000144 	.word	0x20000144

08003a4c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b08a      	sub	sp, #40	; 0x28
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003a54:	2300      	movs	r3, #0
 8003a56:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003a58:	f7fe ff80 	bl	800295c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003a5c:	4b65      	ldr	r3, [pc, #404]	; (8003bf4 <pvPortMalloc+0x1a8>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d101      	bne.n	8003a68 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003a64:	f000 f934 	bl	8003cd0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003a68:	4b63      	ldr	r3, [pc, #396]	; (8003bf8 <pvPortMalloc+0x1ac>)
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4013      	ands	r3, r2
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f040 80a7 	bne.w	8003bc4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d02d      	beq.n	8003ad8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8003a7c:	2208      	movs	r2, #8
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d227      	bcs.n	8003ad8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003a88:	2208      	movs	r2, #8
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f003 0307 	and.w	r3, r3, #7
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d021      	beq.n	8003ade <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f023 0307 	bic.w	r3, r3, #7
 8003aa0:	3308      	adds	r3, #8
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d214      	bcs.n	8003ad2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f023 0307 	bic.w	r3, r3, #7
 8003aae:	3308      	adds	r3, #8
 8003ab0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f003 0307 	and.w	r3, r3, #7
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d010      	beq.n	8003ade <pvPortMalloc+0x92>
        __asm volatile
 8003abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac0:	f383 8811 	msr	BASEPRI, r3
 8003ac4:	f3bf 8f6f 	isb	sy
 8003ac8:	f3bf 8f4f 	dsb	sy
 8003acc:	617b      	str	r3, [r7, #20]
    }
 8003ace:	bf00      	nop
 8003ad0:	e7fe      	b.n	8003ad0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003ad6:	e002      	b.n	8003ade <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	607b      	str	r3, [r7, #4]
 8003adc:	e000      	b.n	8003ae0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003ade:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d06e      	beq.n	8003bc4 <pvPortMalloc+0x178>
 8003ae6:	4b45      	ldr	r3, [pc, #276]	; (8003bfc <pvPortMalloc+0x1b0>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d869      	bhi.n	8003bc4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003af0:	4b43      	ldr	r3, [pc, #268]	; (8003c00 <pvPortMalloc+0x1b4>)
 8003af2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003af4:	4b42      	ldr	r3, [pc, #264]	; (8003c00 <pvPortMalloc+0x1b4>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003afa:	e004      	b.n	8003b06 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8003afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afe:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d903      	bls.n	8003b18 <pvPortMalloc+0xcc>
 8003b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1f1      	bne.n	8003afc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003b18:	4b36      	ldr	r3, [pc, #216]	; (8003bf4 <pvPortMalloc+0x1a8>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d050      	beq.n	8003bc4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003b22:	6a3b      	ldr	r3, [r7, #32]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2208      	movs	r2, #8
 8003b28:	4413      	add	r3, r2
 8003b2a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	6a3b      	ldr	r3, [r7, #32]
 8003b32:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b36:	685a      	ldr	r2, [r3, #4]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	1ad2      	subs	r2, r2, r3
 8003b3c:	2308      	movs	r3, #8
 8003b3e:	005b      	lsls	r3, r3, #1
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d91f      	bls.n	8003b84 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4413      	add	r3, r2
 8003b4a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	f003 0307 	and.w	r3, r3, #7
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00a      	beq.n	8003b6c <pvPortMalloc+0x120>
        __asm volatile
 8003b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b5a:	f383 8811 	msr	BASEPRI, r3
 8003b5e:	f3bf 8f6f 	isb	sy
 8003b62:	f3bf 8f4f 	dsb	sy
 8003b66:	613b      	str	r3, [r7, #16]
    }
 8003b68:	bf00      	nop
 8003b6a:	e7fe      	b.n	8003b6a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6e:	685a      	ldr	r2, [r3, #4]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	1ad2      	subs	r2, r2, r3
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003b7e:	69b8      	ldr	r0, [r7, #24]
 8003b80:	f000 f908 	bl	8003d94 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003b84:	4b1d      	ldr	r3, [pc, #116]	; (8003bfc <pvPortMalloc+0x1b0>)
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	4a1b      	ldr	r2, [pc, #108]	; (8003bfc <pvPortMalloc+0x1b0>)
 8003b90:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003b92:	4b1a      	ldr	r3, [pc, #104]	; (8003bfc <pvPortMalloc+0x1b0>)
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	4b1b      	ldr	r3, [pc, #108]	; (8003c04 <pvPortMalloc+0x1b8>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d203      	bcs.n	8003ba6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003b9e:	4b17      	ldr	r3, [pc, #92]	; (8003bfc <pvPortMalloc+0x1b0>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a18      	ldr	r2, [pc, #96]	; (8003c04 <pvPortMalloc+0x1b8>)
 8003ba4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba8:	685a      	ldr	r2, [r3, #4]
 8003baa:	4b13      	ldr	r3, [pc, #76]	; (8003bf8 <pvPortMalloc+0x1ac>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	431a      	orrs	r2, r3
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003bba:	4b13      	ldr	r3, [pc, #76]	; (8003c08 <pvPortMalloc+0x1bc>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	4a11      	ldr	r2, [pc, #68]	; (8003c08 <pvPortMalloc+0x1bc>)
 8003bc2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003bc4:	f7fe fed8 	bl	8002978 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	f003 0307 	and.w	r3, r3, #7
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00a      	beq.n	8003be8 <pvPortMalloc+0x19c>
        __asm volatile
 8003bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd6:	f383 8811 	msr	BASEPRI, r3
 8003bda:	f3bf 8f6f 	isb	sy
 8003bde:	f3bf 8f4f 	dsb	sy
 8003be2:	60fb      	str	r3, [r7, #12]
    }
 8003be4:	bf00      	nop
 8003be6:	e7fe      	b.n	8003be6 <pvPortMalloc+0x19a>
    return pvReturn;
 8003be8:	69fb      	ldr	r3, [r7, #28]
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3728      	adds	r7, #40	; 0x28
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	20012d50 	.word	0x20012d50
 8003bf8:	20012d64 	.word	0x20012d64
 8003bfc:	20012d54 	.word	0x20012d54
 8003c00:	20012d48 	.word	0x20012d48
 8003c04:	20012d58 	.word	0x20012d58
 8003c08:	20012d5c 	.word	0x20012d5c

08003c0c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b086      	sub	sp, #24
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d04d      	beq.n	8003cba <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003c1e:	2308      	movs	r3, #8
 8003c20:	425b      	negs	r3, r3
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	4413      	add	r3, r2
 8003c26:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	685a      	ldr	r2, [r3, #4]
 8003c30:	4b24      	ldr	r3, [pc, #144]	; (8003cc4 <vPortFree+0xb8>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4013      	ands	r3, r2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10a      	bne.n	8003c50 <vPortFree+0x44>
        __asm volatile
 8003c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c3e:	f383 8811 	msr	BASEPRI, r3
 8003c42:	f3bf 8f6f 	isb	sy
 8003c46:	f3bf 8f4f 	dsb	sy
 8003c4a:	60fb      	str	r3, [r7, #12]
    }
 8003c4c:	bf00      	nop
 8003c4e:	e7fe      	b.n	8003c4e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00a      	beq.n	8003c6e <vPortFree+0x62>
        __asm volatile
 8003c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c5c:	f383 8811 	msr	BASEPRI, r3
 8003c60:	f3bf 8f6f 	isb	sy
 8003c64:	f3bf 8f4f 	dsb	sy
 8003c68:	60bb      	str	r3, [r7, #8]
    }
 8003c6a:	bf00      	nop
 8003c6c:	e7fe      	b.n	8003c6c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	685a      	ldr	r2, [r3, #4]
 8003c72:	4b14      	ldr	r3, [pc, #80]	; (8003cc4 <vPortFree+0xb8>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4013      	ands	r3, r2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d01e      	beq.n	8003cba <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d11a      	bne.n	8003cba <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	685a      	ldr	r2, [r3, #4]
 8003c88:	4b0e      	ldr	r3, [pc, #56]	; (8003cc4 <vPortFree+0xb8>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	43db      	mvns	r3, r3
 8003c8e:	401a      	ands	r2, r3
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003c94:	f7fe fe62 	bl	800295c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	685a      	ldr	r2, [r3, #4]
 8003c9c:	4b0a      	ldr	r3, [pc, #40]	; (8003cc8 <vPortFree+0xbc>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	4a09      	ldr	r2, [pc, #36]	; (8003cc8 <vPortFree+0xbc>)
 8003ca4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003ca6:	6938      	ldr	r0, [r7, #16]
 8003ca8:	f000 f874 	bl	8003d94 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003cac:	4b07      	ldr	r3, [pc, #28]	; (8003ccc <vPortFree+0xc0>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	4a06      	ldr	r2, [pc, #24]	; (8003ccc <vPortFree+0xc0>)
 8003cb4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003cb6:	f7fe fe5f 	bl	8002978 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003cba:	bf00      	nop
 8003cbc:	3718      	adds	r7, #24
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	20012d64 	.word	0x20012d64
 8003cc8:	20012d54 	.word	0x20012d54
 8003ccc:	20012d60 	.word	0x20012d60

08003cd0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b085      	sub	sp, #20
 8003cd4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003cd6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8003cda:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8003cdc:	4b27      	ldr	r3, [pc, #156]	; (8003d7c <prvHeapInit+0xac>)
 8003cde:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f003 0307 	and.w	r3, r3, #7
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d00c      	beq.n	8003d04 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	3307      	adds	r3, #7
 8003cee:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f023 0307 	bic.w	r3, r3, #7
 8003cf6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003cf8:	68ba      	ldr	r2, [r7, #8]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	4a1f      	ldr	r2, [pc, #124]	; (8003d7c <prvHeapInit+0xac>)
 8003d00:	4413      	add	r3, r2
 8003d02:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003d08:	4a1d      	ldr	r2, [pc, #116]	; (8003d80 <prvHeapInit+0xb0>)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003d0e:	4b1c      	ldr	r3, [pc, #112]	; (8003d80 <prvHeapInit+0xb0>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	68ba      	ldr	r2, [r7, #8]
 8003d18:	4413      	add	r3, r2
 8003d1a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003d1c:	2208      	movs	r2, #8
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	1a9b      	subs	r3, r3, r2
 8003d22:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f023 0307 	bic.w	r3, r3, #7
 8003d2a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	4a15      	ldr	r2, [pc, #84]	; (8003d84 <prvHeapInit+0xb4>)
 8003d30:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003d32:	4b14      	ldr	r3, [pc, #80]	; (8003d84 <prvHeapInit+0xb4>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2200      	movs	r2, #0
 8003d38:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003d3a:	4b12      	ldr	r3, [pc, #72]	; (8003d84 <prvHeapInit+0xb4>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	1ad2      	subs	r2, r2, r3
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003d50:	4b0c      	ldr	r3, [pc, #48]	; (8003d84 <prvHeapInit+0xb4>)
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	4a0a      	ldr	r2, [pc, #40]	; (8003d88 <prvHeapInit+0xb8>)
 8003d5e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	4a09      	ldr	r2, [pc, #36]	; (8003d8c <prvHeapInit+0xbc>)
 8003d66:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003d68:	4b09      	ldr	r3, [pc, #36]	; (8003d90 <prvHeapInit+0xc0>)
 8003d6a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003d6e:	601a      	str	r2, [r3, #0]
}
 8003d70:	bf00      	nop
 8003d72:	3714      	adds	r7, #20
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr
 8003d7c:	20000148 	.word	0x20000148
 8003d80:	20012d48 	.word	0x20012d48
 8003d84:	20012d50 	.word	0x20012d50
 8003d88:	20012d58 	.word	0x20012d58
 8003d8c:	20012d54 	.word	0x20012d54
 8003d90:	20012d64 	.word	0x20012d64

08003d94 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003d9c:	4b28      	ldr	r3, [pc, #160]	; (8003e40 <prvInsertBlockIntoFreeList+0xac>)
 8003d9e:	60fb      	str	r3, [r7, #12]
 8003da0:	e002      	b.n	8003da8 <prvInsertBlockIntoFreeList+0x14>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	60fb      	str	r3, [r7, #12]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d8f7      	bhi.n	8003da2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	68ba      	ldr	r2, [r7, #8]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d108      	bne.n	8003dd6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	685a      	ldr	r2, [r3, #4]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	441a      	add	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	68ba      	ldr	r2, [r7, #8]
 8003de0:	441a      	add	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d118      	bne.n	8003e1c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	4b15      	ldr	r3, [pc, #84]	; (8003e44 <prvInsertBlockIntoFreeList+0xb0>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d00d      	beq.n	8003e12 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685a      	ldr	r2, [r3, #4]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	441a      	add	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	601a      	str	r2, [r3, #0]
 8003e10:	e008      	b.n	8003e24 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003e12:	4b0c      	ldr	r3, [pc, #48]	; (8003e44 <prvInsertBlockIntoFreeList+0xb0>)
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	601a      	str	r2, [r3, #0]
 8003e1a:	e003      	b.n	8003e24 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d002      	beq.n	8003e32 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003e32:	bf00      	nop
 8003e34:	3714      	adds	r7, #20
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	20012d48 	.word	0x20012d48
 8003e44:	20012d50 	.word	0x20012d50

08003e48 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003e4c:	4803      	ldr	r0, [pc, #12]	; (8003e5c <_cbSendSystemDesc+0x14>)
 8003e4e:	f002 f945 	bl	80060dc <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003e52:	4803      	ldr	r0, [pc, #12]	; (8003e60 <_cbSendSystemDesc+0x18>)
 8003e54:	f002 f942 	bl	80060dc <SEGGER_SYSVIEW_SendSysDesc>
}
 8003e58:	bf00      	nop
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	0800693c 	.word	0x0800693c
 8003e60:	08006980 	.word	0x08006980

08003e64 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003e64:	b580      	push	{r7, lr}
 8003e66:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003e68:	4b06      	ldr	r3, [pc, #24]	; (8003e84 <SEGGER_SYSVIEW_Conf+0x20>)
 8003e6a:	6818      	ldr	r0, [r3, #0]
 8003e6c:	4b05      	ldr	r3, [pc, #20]	; (8003e84 <SEGGER_SYSVIEW_Conf+0x20>)
 8003e6e:	6819      	ldr	r1, [r3, #0]
 8003e70:	4b05      	ldr	r3, [pc, #20]	; (8003e88 <SEGGER_SYSVIEW_Conf+0x24>)
 8003e72:	4a06      	ldr	r2, [pc, #24]	; (8003e8c <SEGGER_SYSVIEW_Conf+0x28>)
 8003e74:	f001 fd24 	bl	80058c0 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003e78:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003e7c:	f001 fd64 	bl	8005948 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003e80:	bf00      	nop
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	20000000 	.word	0x20000000
 8003e88:	08003e49 	.word	0x08003e49
 8003e8c:	08006a14 	.word	0x08006a14

08003e90 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003e96:	2300      	movs	r3, #0
 8003e98:	607b      	str	r3, [r7, #4]
 8003e9a:	e033      	b.n	8003f04 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003e9c:	491e      	ldr	r1, [pc, #120]	; (8003f18 <_cbSendTaskList+0x88>)
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	4413      	add	r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	440b      	add	r3, r1
 8003eaa:	6818      	ldr	r0, [r3, #0]
 8003eac:	491a      	ldr	r1, [pc, #104]	; (8003f18 <_cbSendTaskList+0x88>)
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	4413      	add	r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	440b      	add	r3, r1
 8003eba:	3304      	adds	r3, #4
 8003ebc:	6819      	ldr	r1, [r3, #0]
 8003ebe:	4c16      	ldr	r4, [pc, #88]	; (8003f18 <_cbSendTaskList+0x88>)
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	4413      	add	r3, r2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	4423      	add	r3, r4
 8003ecc:	3308      	adds	r3, #8
 8003ece:	681c      	ldr	r4, [r3, #0]
 8003ed0:	4d11      	ldr	r5, [pc, #68]	; (8003f18 <_cbSendTaskList+0x88>)
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	4413      	add	r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	442b      	add	r3, r5
 8003ede:	330c      	adds	r3, #12
 8003ee0:	681d      	ldr	r5, [r3, #0]
 8003ee2:	4e0d      	ldr	r6, [pc, #52]	; (8003f18 <_cbSendTaskList+0x88>)
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	4413      	add	r3, r2
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	4433      	add	r3, r6
 8003ef0:	3310      	adds	r3, #16
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	9300      	str	r3, [sp, #0]
 8003ef6:	462b      	mov	r3, r5
 8003ef8:	4622      	mov	r2, r4
 8003efa:	f000 f971 	bl	80041e0 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	3301      	adds	r3, #1
 8003f02:	607b      	str	r3, [r7, #4]
 8003f04:	4b05      	ldr	r3, [pc, #20]	; (8003f1c <_cbSendTaskList+0x8c>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d3c6      	bcc.n	8003e9c <_cbSendTaskList+0xc>
  }
}
 8003f0e:	bf00      	nop
 8003f10:	bf00      	nop
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f18:	20012d68 	.word	0x20012d68
 8003f1c:	20012e08 	.word	0x20012e08

08003f20 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003f20:	b5b0      	push	{r4, r5, r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003f26:	f7fe fe27 	bl	8002b78 <xTaskGetTickCountFromISR>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	f04f 0300 	mov.w	r3, #0
 8003f32:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003f36:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	f04f 0400 	mov.w	r4, #0
 8003f42:	f04f 0500 	mov.w	r5, #0
 8003f46:	015d      	lsls	r5, r3, #5
 8003f48:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8003f4c:	0154      	lsls	r4, r2, #5
 8003f4e:	4622      	mov	r2, r4
 8003f50:	462b      	mov	r3, r5
 8003f52:	1a12      	subs	r2, r2, r0
 8003f54:	eb63 0301 	sbc.w	r3, r3, r1
 8003f58:	f04f 0400 	mov.w	r4, #0
 8003f5c:	f04f 0500 	mov.w	r5, #0
 8003f60:	009d      	lsls	r5, r3, #2
 8003f62:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8003f66:	0094      	lsls	r4, r2, #2
 8003f68:	4622      	mov	r2, r4
 8003f6a:	462b      	mov	r3, r5
 8003f6c:	1812      	adds	r2, r2, r0
 8003f6e:	eb41 0303 	adc.w	r3, r1, r3
 8003f72:	f04f 0000 	mov.w	r0, #0
 8003f76:	f04f 0100 	mov.w	r1, #0
 8003f7a:	00d9      	lsls	r1, r3, #3
 8003f7c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f80:	00d0      	lsls	r0, r2, #3
 8003f82:	4602      	mov	r2, r0
 8003f84:	460b      	mov	r3, r1
 8003f86:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 8003f8a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8003f8e:	4610      	mov	r0, r2
 8003f90:	4619      	mov	r1, r3
 8003f92:	3708      	adds	r7, #8
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bdb0      	pop	{r4, r5, r7, pc}

08003f98 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b086      	sub	sp, #24
 8003f9c:	af02      	add	r7, sp, #8
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	607a      	str	r2, [r7, #4]
 8003fa4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003fa6:	2205      	movs	r2, #5
 8003fa8:	492b      	ldr	r1, [pc, #172]	; (8004058 <SYSVIEW_AddTask+0xc0>)
 8003faa:	68b8      	ldr	r0, [r7, #8]
 8003fac:	f002 fc56 	bl	800685c <memcmp>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d04b      	beq.n	800404e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003fb6:	4b29      	ldr	r3, [pc, #164]	; (800405c <SYSVIEW_AddTask+0xc4>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2b07      	cmp	r3, #7
 8003fbc:	d903      	bls.n	8003fc6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003fbe:	4828      	ldr	r0, [pc, #160]	; (8004060 <SYSVIEW_AddTask+0xc8>)
 8003fc0:	f002 fb9e 	bl	8006700 <SEGGER_SYSVIEW_Warn>
    return;
 8003fc4:	e044      	b.n	8004050 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003fc6:	4b25      	ldr	r3, [pc, #148]	; (800405c <SYSVIEW_AddTask+0xc4>)
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	4926      	ldr	r1, [pc, #152]	; (8004064 <SYSVIEW_AddTask+0xcc>)
 8003fcc:	4613      	mov	r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	4413      	add	r3, r2
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	440b      	add	r3, r1
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003fda:	4b20      	ldr	r3, [pc, #128]	; (800405c <SYSVIEW_AddTask+0xc4>)
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	4921      	ldr	r1, [pc, #132]	; (8004064 <SYSVIEW_AddTask+0xcc>)
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	4413      	add	r3, r2
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	440b      	add	r3, r1
 8003fea:	3304      	adds	r3, #4
 8003fec:	68ba      	ldr	r2, [r7, #8]
 8003fee:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003ff0:	4b1a      	ldr	r3, [pc, #104]	; (800405c <SYSVIEW_AddTask+0xc4>)
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	491b      	ldr	r1, [pc, #108]	; (8004064 <SYSVIEW_AddTask+0xcc>)
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	4413      	add	r3, r2
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	440b      	add	r3, r1
 8004000:	3308      	adds	r3, #8
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004006:	4b15      	ldr	r3, [pc, #84]	; (800405c <SYSVIEW_AddTask+0xc4>)
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	4916      	ldr	r1, [pc, #88]	; (8004064 <SYSVIEW_AddTask+0xcc>)
 800400c:	4613      	mov	r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	4413      	add	r3, r2
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	440b      	add	r3, r1
 8004016:	330c      	adds	r3, #12
 8004018:	683a      	ldr	r2, [r7, #0]
 800401a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800401c:	4b0f      	ldr	r3, [pc, #60]	; (800405c <SYSVIEW_AddTask+0xc4>)
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	4910      	ldr	r1, [pc, #64]	; (8004064 <SYSVIEW_AddTask+0xcc>)
 8004022:	4613      	mov	r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	4413      	add	r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	440b      	add	r3, r1
 800402c:	3310      	adds	r3, #16
 800402e:	69ba      	ldr	r2, [r7, #24]
 8004030:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004032:	4b0a      	ldr	r3, [pc, #40]	; (800405c <SYSVIEW_AddTask+0xc4>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	3301      	adds	r3, #1
 8004038:	4a08      	ldr	r2, [pc, #32]	; (800405c <SYSVIEW_AddTask+0xc4>)
 800403a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	9300      	str	r3, [sp, #0]
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	68b9      	ldr	r1, [r7, #8]
 8004046:	68f8      	ldr	r0, [r7, #12]
 8004048:	f000 f8ca 	bl	80041e0 <SYSVIEW_SendTaskInfo>
 800404c:	e000      	b.n	8004050 <SYSVIEW_AddTask+0xb8>
    return;
 800404e:	bf00      	nop

}
 8004050:	3710      	adds	r7, #16
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	08006990 	.word	0x08006990
 800405c:	20012e08 	.word	0x20012e08
 8004060:	08006998 	.word	0x08006998
 8004064:	20012d68 	.word	0x20012d68

08004068 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8004070:	4b59      	ldr	r3, [pc, #356]	; (80041d8 <SYSVIEW_DeleteTask+0x170>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2b00      	cmp	r3, #0
 8004076:	f000 80ab 	beq.w	80041d0 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 800407a:	2300      	movs	r3, #0
 800407c:	60fb      	str	r3, [r7, #12]
 800407e:	e00d      	b.n	800409c <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8004080:	4956      	ldr	r1, [pc, #344]	; (80041dc <SYSVIEW_DeleteTask+0x174>)
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	4613      	mov	r3, r2
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	4413      	add	r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	440b      	add	r3, r1
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	429a      	cmp	r2, r3
 8004094:	d008      	beq.n	80040a8 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	3301      	adds	r3, #1
 800409a:	60fb      	str	r3, [r7, #12]
 800409c:	4b4e      	ldr	r3, [pc, #312]	; (80041d8 <SYSVIEW_DeleteTask+0x170>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d3ec      	bcc.n	8004080 <SYSVIEW_DeleteTask+0x18>
 80040a6:	e000      	b.n	80040aa <SYSVIEW_DeleteTask+0x42>
      break;
 80040a8:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 80040aa:	4b4b      	ldr	r3, [pc, #300]	; (80041d8 <SYSVIEW_DeleteTask+0x170>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	3b01      	subs	r3, #1
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d111      	bne.n	80040da <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	4613      	mov	r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	4413      	add	r3, r2
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	4a46      	ldr	r2, [pc, #280]	; (80041dc <SYSVIEW_DeleteTask+0x174>)
 80040c2:	4413      	add	r3, r2
 80040c4:	2214      	movs	r2, #20
 80040c6:	2100      	movs	r1, #0
 80040c8:	4618      	mov	r0, r3
 80040ca:	f002 fbe3 	bl	8006894 <memset>
    _NumTasks--;
 80040ce:	4b42      	ldr	r3, [pc, #264]	; (80041d8 <SYSVIEW_DeleteTask+0x170>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	3b01      	subs	r3, #1
 80040d4:	4a40      	ldr	r2, [pc, #256]	; (80041d8 <SYSVIEW_DeleteTask+0x170>)
 80040d6:	6013      	str	r3, [r2, #0]
 80040d8:	e07b      	b.n	80041d2 <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 80040da:	4b3f      	ldr	r3, [pc, #252]	; (80041d8 <SYSVIEW_DeleteTask+0x170>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d276      	bcs.n	80041d2 <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 80040e4:	4b3c      	ldr	r3, [pc, #240]	; (80041d8 <SYSVIEW_DeleteTask+0x170>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	1e5a      	subs	r2, r3, #1
 80040ea:	493c      	ldr	r1, [pc, #240]	; (80041dc <SYSVIEW_DeleteTask+0x174>)
 80040ec:	4613      	mov	r3, r2
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	4413      	add	r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	440b      	add	r3, r1
 80040f6:	6819      	ldr	r1, [r3, #0]
 80040f8:	4838      	ldr	r0, [pc, #224]	; (80041dc <SYSVIEW_DeleteTask+0x174>)
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	4613      	mov	r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	4413      	add	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4403      	add	r3, r0
 8004106:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8004108:	4b33      	ldr	r3, [pc, #204]	; (80041d8 <SYSVIEW_DeleteTask+0x170>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	1e5a      	subs	r2, r3, #1
 800410e:	4933      	ldr	r1, [pc, #204]	; (80041dc <SYSVIEW_DeleteTask+0x174>)
 8004110:	4613      	mov	r3, r2
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	4413      	add	r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	440b      	add	r3, r1
 800411a:	3304      	adds	r3, #4
 800411c:	6819      	ldr	r1, [r3, #0]
 800411e:	482f      	ldr	r0, [pc, #188]	; (80041dc <SYSVIEW_DeleteTask+0x174>)
 8004120:	68fa      	ldr	r2, [r7, #12]
 8004122:	4613      	mov	r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	4413      	add	r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	4403      	add	r3, r0
 800412c:	3304      	adds	r3, #4
 800412e:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 8004130:	4b29      	ldr	r3, [pc, #164]	; (80041d8 <SYSVIEW_DeleteTask+0x170>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	1e5a      	subs	r2, r3, #1
 8004136:	4929      	ldr	r1, [pc, #164]	; (80041dc <SYSVIEW_DeleteTask+0x174>)
 8004138:	4613      	mov	r3, r2
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	4413      	add	r3, r2
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	440b      	add	r3, r1
 8004142:	3308      	adds	r3, #8
 8004144:	6819      	ldr	r1, [r3, #0]
 8004146:	4825      	ldr	r0, [pc, #148]	; (80041dc <SYSVIEW_DeleteTask+0x174>)
 8004148:	68fa      	ldr	r2, [r7, #12]
 800414a:	4613      	mov	r3, r2
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	4413      	add	r3, r2
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	4403      	add	r3, r0
 8004154:	3308      	adds	r3, #8
 8004156:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8004158:	4b1f      	ldr	r3, [pc, #124]	; (80041d8 <SYSVIEW_DeleteTask+0x170>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	1e5a      	subs	r2, r3, #1
 800415e:	491f      	ldr	r1, [pc, #124]	; (80041dc <SYSVIEW_DeleteTask+0x174>)
 8004160:	4613      	mov	r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	4413      	add	r3, r2
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	440b      	add	r3, r1
 800416a:	330c      	adds	r3, #12
 800416c:	6819      	ldr	r1, [r3, #0]
 800416e:	481b      	ldr	r0, [pc, #108]	; (80041dc <SYSVIEW_DeleteTask+0x174>)
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	4613      	mov	r3, r2
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	4413      	add	r3, r2
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	4403      	add	r3, r0
 800417c:	330c      	adds	r3, #12
 800417e:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8004180:	4b15      	ldr	r3, [pc, #84]	; (80041d8 <SYSVIEW_DeleteTask+0x170>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	1e5a      	subs	r2, r3, #1
 8004186:	4915      	ldr	r1, [pc, #84]	; (80041dc <SYSVIEW_DeleteTask+0x174>)
 8004188:	4613      	mov	r3, r2
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	4413      	add	r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	440b      	add	r3, r1
 8004192:	3310      	adds	r3, #16
 8004194:	6819      	ldr	r1, [r3, #0]
 8004196:	4811      	ldr	r0, [pc, #68]	; (80041dc <SYSVIEW_DeleteTask+0x174>)
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	4613      	mov	r3, r2
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	4413      	add	r3, r2
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	4403      	add	r3, r0
 80041a4:	3310      	adds	r3, #16
 80041a6:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 80041a8:	4b0b      	ldr	r3, [pc, #44]	; (80041d8 <SYSVIEW_DeleteTask+0x170>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	1e5a      	subs	r2, r3, #1
 80041ae:	4613      	mov	r3, r2
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	4413      	add	r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	4a09      	ldr	r2, [pc, #36]	; (80041dc <SYSVIEW_DeleteTask+0x174>)
 80041b8:	4413      	add	r3, r2
 80041ba:	2214      	movs	r2, #20
 80041bc:	2100      	movs	r1, #0
 80041be:	4618      	mov	r0, r3
 80041c0:	f002 fb68 	bl	8006894 <memset>
    _NumTasks--;
 80041c4:	4b04      	ldr	r3, [pc, #16]	; (80041d8 <SYSVIEW_DeleteTask+0x170>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	3b01      	subs	r3, #1
 80041ca:	4a03      	ldr	r2, [pc, #12]	; (80041d8 <SYSVIEW_DeleteTask+0x170>)
 80041cc:	6013      	str	r3, [r2, #0]
 80041ce:	e000      	b.n	80041d2 <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 80041d0:	bf00      	nop
  }
}
 80041d2:	3710      	adds	r7, #16
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	20012e08 	.word	0x20012e08
 80041dc:	20012d68 	.word	0x20012d68

080041e0 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b08a      	sub	sp, #40	; 0x28
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
 80041ec:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80041ee:	f107 0314 	add.w	r3, r7, #20
 80041f2:	2214      	movs	r2, #20
 80041f4:	2100      	movs	r1, #0
 80041f6:	4618      	mov	r0, r3
 80041f8:	f002 fb4c 	bl	8006894 <memset>
  TaskInfo.TaskID     = TaskID;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800420c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800420e:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004210:	f107 0314 	add.w	r3, r7, #20
 8004214:	4618      	mov	r0, r3
 8004216:	f001 fe69 	bl	8005eec <SEGGER_SYSVIEW_SendTaskInfo>
}
 800421a:	bf00      	nop
 800421c:	3728      	adds	r7, #40	; 0x28
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
	...

08004224 <__NVIC_EnableIRQ>:
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	4603      	mov	r3, r0
 800422c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800422e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004232:	2b00      	cmp	r3, #0
 8004234:	db0b      	blt.n	800424e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004236:	79fb      	ldrb	r3, [r7, #7]
 8004238:	f003 021f 	and.w	r2, r3, #31
 800423c:	4907      	ldr	r1, [pc, #28]	; (800425c <__NVIC_EnableIRQ+0x38>)
 800423e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004242:	095b      	lsrs	r3, r3, #5
 8004244:	2001      	movs	r0, #1
 8004246:	fa00 f202 	lsl.w	r2, r0, r2
 800424a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800424e:	bf00      	nop
 8004250:	370c      	adds	r7, #12
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	e000e100 	.word	0xe000e100

08004260 <__NVIC_SetPriority>:
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	4603      	mov	r3, r0
 8004268:	6039      	str	r1, [r7, #0]
 800426a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800426c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004270:	2b00      	cmp	r3, #0
 8004272:	db0a      	blt.n	800428a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	b2da      	uxtb	r2, r3
 8004278:	490c      	ldr	r1, [pc, #48]	; (80042ac <__NVIC_SetPriority+0x4c>)
 800427a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800427e:	0112      	lsls	r2, r2, #4
 8004280:	b2d2      	uxtb	r2, r2
 8004282:	440b      	add	r3, r1
 8004284:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004288:	e00a      	b.n	80042a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	b2da      	uxtb	r2, r3
 800428e:	4908      	ldr	r1, [pc, #32]	; (80042b0 <__NVIC_SetPriority+0x50>)
 8004290:	79fb      	ldrb	r3, [r7, #7]
 8004292:	f003 030f 	and.w	r3, r3, #15
 8004296:	3b04      	subs	r3, #4
 8004298:	0112      	lsls	r2, r2, #4
 800429a:	b2d2      	uxtb	r2, r2
 800429c:	440b      	add	r3, r1
 800429e:	761a      	strb	r2, [r3, #24]
}
 80042a0:	bf00      	nop
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr
 80042ac:	e000e100 	.word	0xe000e100
 80042b0:	e000ed00 	.word	0xe000ed00

080042b4 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 80042ba:	f002 fa7d 	bl	80067b8 <SEGGER_SYSVIEW_IsStarted>
 80042be:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 80042c6:	f001 fc95 	bl	8005bf4 <SEGGER_SYSVIEW_Start>
  }
}
 80042ca:	bf00      	nop
 80042cc:	3708      	adds	r7, #8
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
	...

080042d4 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	4603      	mov	r3, r0
 80042dc:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 80042de:	4b0c      	ldr	r3, [pc, #48]	; (8004310 <_cbOnUARTRx+0x3c>)
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	2b03      	cmp	r3, #3
 80042e4:	d806      	bhi.n	80042f4 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 80042e6:	4b0a      	ldr	r3, [pc, #40]	; (8004310 <_cbOnUARTRx+0x3c>)
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	3301      	adds	r3, #1
 80042ec:	b2da      	uxtb	r2, r3
 80042ee:	4b08      	ldr	r3, [pc, #32]	; (8004310 <_cbOnUARTRx+0x3c>)
 80042f0:	701a      	strb	r2, [r3, #0]
    goto Done;
 80042f2:	e009      	b.n	8004308 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 80042f4:	f7ff ffde 	bl	80042b4 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 80042f8:	4b05      	ldr	r3, [pc, #20]	; (8004310 <_cbOnUARTRx+0x3c>)
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	4618      	mov	r0, r3
 80042fe:	1dfb      	adds	r3, r7, #7
 8004300:	2201      	movs	r2, #1
 8004302:	4619      	mov	r1, r3
 8004304:	f000 fb9c 	bl	8004a40 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8004308:	bf00      	nop
}
 800430a:	3708      	adds	r7, #8
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}
 8004310:	20000014 	.word	0x20000014

08004314 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 800431c:	4b14      	ldr	r3, [pc, #80]	; (8004370 <_cbOnUARTTx+0x5c>)
 800431e:	785b      	ldrb	r3, [r3, #1]
 8004320:	2b03      	cmp	r3, #3
 8004322:	d80f      	bhi.n	8004344 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8004324:	4b12      	ldr	r3, [pc, #72]	; (8004370 <_cbOnUARTTx+0x5c>)
 8004326:	785b      	ldrb	r3, [r3, #1]
 8004328:	461a      	mov	r2, r3
 800432a:	4b12      	ldr	r3, [pc, #72]	; (8004374 <_cbOnUARTTx+0x60>)
 800432c:	5c9a      	ldrb	r2, [r3, r2]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8004332:	4b0f      	ldr	r3, [pc, #60]	; (8004370 <_cbOnUARTTx+0x5c>)
 8004334:	785b      	ldrb	r3, [r3, #1]
 8004336:	3301      	adds	r3, #1
 8004338:	b2da      	uxtb	r2, r3
 800433a:	4b0d      	ldr	r3, [pc, #52]	; (8004370 <_cbOnUARTTx+0x5c>)
 800433c:	705a      	strb	r2, [r3, #1]
    r = 1;
 800433e:	2301      	movs	r3, #1
 8004340:	60fb      	str	r3, [r7, #12]
    goto Done;
 8004342:	e00f      	b.n	8004364 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8004344:	4b0a      	ldr	r3, [pc, #40]	; (8004370 <_cbOnUARTTx+0x5c>)
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	2201      	movs	r2, #1
 800434a:	6879      	ldr	r1, [r7, #4]
 800434c:	4618      	mov	r0, r3
 800434e:	f000 fa1b 	bl	8004788 <SEGGER_RTT_ReadUpBufferNoLock>
 8004352:	4603      	mov	r3, r0
 8004354:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2b00      	cmp	r3, #0
 800435a:	da02      	bge.n	8004362 <_cbOnUARTTx+0x4e>
    r = 0;
 800435c:	2300      	movs	r3, #0
 800435e:	60fb      	str	r3, [r7, #12]
 8004360:	e000      	b.n	8004364 <_cbOnUARTTx+0x50>
  }
Done:
 8004362:	bf00      	nop
  return r;
 8004364:	68fb      	ldr	r3, [r7, #12]
}
 8004366:	4618      	mov	r0, r3
 8004368:	3710      	adds	r7, #16
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	20000014 	.word	0x20000014
 8004374:	08006a1c 	.word	0x08006a1c

08004378 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8004380:	4a04      	ldr	r2, [pc, #16]	; (8004394 <SEGGER_UART_init+0x1c>)
 8004382:	4905      	ldr	r1, [pc, #20]	; (8004398 <SEGGER_UART_init+0x20>)
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 f863 	bl	8004450 <HIF_UART_Init>
}
 800438a:	bf00      	nop
 800438c:	3708      	adds	r7, #8
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	080042d5 	.word	0x080042d5
 8004398:	08004315 	.word	0x08004315

0800439c <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 80043a2:	4b1e      	ldr	r3, [pc, #120]	; (800441c <USART2_IRQHandler+0x80>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f003 0320 	and.w	r3, r3, #32
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d011      	beq.n	80043d6 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 80043b2:	4b1b      	ldr	r3, [pc, #108]	; (8004420 <USART2_IRQHandler+0x84>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f003 030b 	and.w	r3, r3, #11
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d108      	bne.n	80043d6 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 80043c4:	4b17      	ldr	r3, [pc, #92]	; (8004424 <USART2_IRQHandler+0x88>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d004      	beq.n	80043d6 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 80043cc:	4b15      	ldr	r3, [pc, #84]	; (8004424 <USART2_IRQHandler+0x88>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	79fa      	ldrb	r2, [r7, #7]
 80043d2:	4610      	mov	r0, r2
 80043d4:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d01a      	beq.n	8004416 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 80043e0:	4b11      	ldr	r3, [pc, #68]	; (8004428 <USART2_IRQHandler+0x8c>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d015      	beq.n	8004414 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 80043e8:	4b0f      	ldr	r3, [pc, #60]	; (8004428 <USART2_IRQHandler+0x8c>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	1dfa      	adds	r2, r7, #7
 80043ee:	4610      	mov	r0, r2
 80043f0:	4798      	blx	r3
 80043f2:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d106      	bne.n	8004408 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 80043fa:	4b0c      	ldr	r3, [pc, #48]	; (800442c <USART2_IRQHandler+0x90>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a0b      	ldr	r2, [pc, #44]	; (800442c <USART2_IRQHandler+0x90>)
 8004400:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004404:	6013      	str	r3, [r2, #0]
 8004406:	e006      	b.n	8004416 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8004408:	4b04      	ldr	r3, [pc, #16]	; (800441c <USART2_IRQHandler+0x80>)
 800440a:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 800440c:	79fa      	ldrb	r2, [r7, #7]
 800440e:	4b04      	ldr	r3, [pc, #16]	; (8004420 <USART2_IRQHandler+0x84>)
 8004410:	601a      	str	r2, [r3, #0]
 8004412:	e000      	b.n	8004416 <USART2_IRQHandler+0x7a>
      return;
 8004414:	bf00      	nop
    }
  }
}
 8004416:	3710      	adds	r7, #16
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	40004400 	.word	0x40004400
 8004420:	40004404 	.word	0x40004404
 8004424:	20012e0c 	.word	0x20012e0c
 8004428:	20012e10 	.word	0x20012e10
 800442c:	4000440c 	.word	0x4000440c

08004430 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8004430:	b480      	push	{r7}
 8004432:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8004434:	4b05      	ldr	r3, [pc, #20]	; (800444c <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a04      	ldr	r2, [pc, #16]	; (800444c <HIF_UART_EnableTXEInterrupt+0x1c>)
 800443a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800443e:	6013      	str	r3, [r2, #0]
}
 8004440:	bf00      	nop
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	4000440c 	.word	0x4000440c

08004450 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8004450:	b580      	push	{r7, lr}
 8004452:	b086      	sub	sp, #24
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 800445c:	4b2e      	ldr	r3, [pc, #184]	; (8004518 <HIF_UART_Init+0xc8>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a2d      	ldr	r2, [pc, #180]	; (8004518 <HIF_UART_Init+0xc8>)
 8004462:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004466:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8004468:	4b2c      	ldr	r3, [pc, #176]	; (800451c <HIF_UART_Init+0xcc>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a2b      	ldr	r2, [pc, #172]	; (800451c <HIF_UART_Init+0xcc>)
 800446e:	f043 0301 	orr.w	r3, r3, #1
 8004472:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8004474:	4b2a      	ldr	r3, [pc, #168]	; (8004520 <HIF_UART_Init+0xd0>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004480:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8004488:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 800448a:	4a25      	ldr	r2, [pc, #148]	; (8004520 <HIF_UART_Init+0xd0>)
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8004490:	4b24      	ldr	r3, [pc, #144]	; (8004524 <HIF_UART_Init+0xd4>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800449c:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80044a4:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 80044a6:	4a1f      	ldr	r2, [pc, #124]	; (8004524 <HIF_UART_Init+0xd4>)
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 80044ac:	4b1e      	ldr	r3, [pc, #120]	; (8004528 <HIF_UART_Init+0xd8>)
 80044ae:	f24a 022c 	movw	r2, #41004	; 0xa02c
 80044b2:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 80044b4:	4b1d      	ldr	r3, [pc, #116]	; (800452c <HIF_UART_Init+0xdc>)
 80044b6:	2200      	movs	r2, #0
 80044b8:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 80044ba:	4b1d      	ldr	r3, [pc, #116]	; (8004530 <HIF_UART_Init+0xe0>)
 80044bc:	2280      	movs	r2, #128	; 0x80
 80044be:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	00db      	lsls	r3, r3, #3
 80044c4:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 80044c6:	4a1b      	ldr	r2, [pc, #108]	; (8004534 <HIF_UART_Init+0xe4>)
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ce:	3301      	adds	r3, #1
 80044d0:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	085b      	lsrs	r3, r3, #1
 80044d6:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044de:	d302      	bcc.n	80044e6 <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 80044e0:	f640 73ff 	movw	r3, #4095	; 0xfff
 80044e4:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d004      	beq.n	80044f6 <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	011b      	lsls	r3, r3, #4
 80044f0:	4a11      	ldr	r2, [pc, #68]	; (8004538 <HIF_UART_Init+0xe8>)
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 80044f6:	4a11      	ldr	r2, [pc, #68]	; (800453c <HIF_UART_Init+0xec>)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 80044fc:	4a10      	ldr	r2, [pc, #64]	; (8004540 <HIF_UART_Init+0xf0>)
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8004502:	2106      	movs	r1, #6
 8004504:	2026      	movs	r0, #38	; 0x26
 8004506:	f7ff feab 	bl	8004260 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 800450a:	2026      	movs	r0, #38	; 0x26
 800450c:	f7ff fe8a 	bl	8004224 <__NVIC_EnableIRQ>
}
 8004510:	bf00      	nop
 8004512:	3718      	adds	r7, #24
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	40023840 	.word	0x40023840
 800451c:	40023830 	.word	0x40023830
 8004520:	40020020 	.word	0x40020020
 8004524:	40020000 	.word	0x40020000
 8004528:	4000440c 	.word	0x4000440c
 800452c:	40004410 	.word	0x40004410
 8004530:	40004414 	.word	0x40004414
 8004534:	0501bd00 	.word	0x0501bd00
 8004538:	40004408 	.word	0x40004408
 800453c:	20012e0c 	.word	0x20012e0c
 8004540:	20012e10 	.word	0x20012e10

08004544 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004544:	b580      	push	{r7, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800454a:	4b26      	ldr	r3, [pc, #152]	; (80045e4 <_DoInit+0xa0>)
 800454c:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 800454e:	22a8      	movs	r2, #168	; 0xa8
 8004550:	2100      	movs	r1, #0
 8004552:	6838      	ldr	r0, [r7, #0]
 8004554:	f002 f99e 	bl	8006894 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	2203      	movs	r2, #3
 800455c:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	2203      	movs	r2, #3
 8004562:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	4a20      	ldr	r2, [pc, #128]	; (80045e8 <_DoInit+0xa4>)
 8004568:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	4a1f      	ldr	r2, [pc, #124]	; (80045ec <_DoInit+0xa8>)
 800456e:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004576:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	2200      	movs	r2, #0
 800457c:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	2200      	movs	r2, #0
 8004582:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	2200      	movs	r2, #0
 8004588:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	4a16      	ldr	r2, [pc, #88]	; (80045e8 <_DoInit+0xa4>)
 800458e:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	4a17      	ldr	r2, [pc, #92]	; (80045f0 <_DoInit+0xac>)
 8004594:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	2210      	movs	r2, #16
 800459a:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	2200      	movs	r2, #0
 80045a0:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	2200      	movs	r2, #0
 80045a6:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	2200      	movs	r2, #0
 80045ac:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80045ae:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80045b2:	2300      	movs	r3, #0
 80045b4:	607b      	str	r3, [r7, #4]
 80045b6:	e00c      	b.n	80045d2 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f1c3 030f 	rsb	r3, r3, #15
 80045be:	4a0d      	ldr	r2, [pc, #52]	; (80045f4 <_DoInit+0xb0>)
 80045c0:	5cd1      	ldrb	r1, [r2, r3]
 80045c2:	683a      	ldr	r2, [r7, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4413      	add	r3, r2
 80045c8:	460a      	mov	r2, r1
 80045ca:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	3301      	adds	r3, #1
 80045d0:	607b      	str	r3, [r7, #4]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2b0f      	cmp	r3, #15
 80045d6:	d9ef      	bls.n	80045b8 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80045d8:	f3bf 8f5f 	dmb	sy
}
 80045dc:	bf00      	nop
 80045de:	3708      	adds	r7, #8
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	2001439c 	.word	0x2001439c
 80045e8:	080069e8 	.word	0x080069e8
 80045ec:	20012e14 	.word	0x20012e14
 80045f0:	20013214 	.word	0x20013214
 80045f4:	08006a20 	.word	0x08006a20

080045f8 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b08a      	sub	sp, #40	; 0x28
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8004604:	2300      	movs	r3, #0
 8004606:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8004614:	69ba      	ldr	r2, [r7, #24]
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	429a      	cmp	r2, r3
 800461a:	d905      	bls.n	8004628 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 800461c:	69ba      	ldr	r2, [r7, #24]
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	3b01      	subs	r3, #1
 8004624:	627b      	str	r3, [r7, #36]	; 0x24
 8004626:	e007      	b.n	8004638 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	689a      	ldr	r2, [r3, #8]
 800462c:	69b9      	ldr	r1, [r7, #24]
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	1acb      	subs	r3, r1, r3
 8004632:	4413      	add	r3, r2
 8004634:	3b01      	subs	r3, #1
 8004636:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	689a      	ldr	r2, [r3, #8]
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004642:	4293      	cmp	r3, r2
 8004644:	bf28      	it	cs
 8004646:	4613      	movcs	r3, r2
 8004648:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800464a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4293      	cmp	r3, r2
 8004650:	bf28      	it	cs
 8004652:	4613      	movcs	r3, r2
 8004654:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	685a      	ldr	r2, [r3, #4]
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	4413      	add	r3, r2
 800465e:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8004660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004662:	68b9      	ldr	r1, [r7, #8]
 8004664:	6978      	ldr	r0, [r7, #20]
 8004666:	f002 f907 	bl	8006878 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800466a:	6a3a      	ldr	r2, [r7, #32]
 800466c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466e:	4413      	add	r3, r2
 8004670:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8004672:	68ba      	ldr	r2, [r7, #8]
 8004674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004676:	4413      	add	r3, r2
 8004678:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8004682:	69fa      	ldr	r2, [r7, #28]
 8004684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004686:	4413      	add	r3, r2
 8004688:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	69fa      	ldr	r2, [r7, #28]
 8004690:	429a      	cmp	r2, r3
 8004692:	d101      	bne.n	8004698 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004694:	2300      	movs	r3, #0
 8004696:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004698:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	69fa      	ldr	r2, [r7, #28]
 80046a0:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1b2      	bne.n	800460e <_WriteBlocking+0x16>
  return NumBytesWritten;
 80046a8:	6a3b      	ldr	r3, [r7, #32]
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3728      	adds	r7, #40	; 0x28
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80046b2:	b580      	push	{r7, lr}
 80046b4:	b088      	sub	sp, #32
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	60f8      	str	r0, [r7, #12]
 80046ba:	60b9      	str	r1, [r7, #8]
 80046bc:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	689a      	ldr	r2, [r3, #8]
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80046ce:	69ba      	ldr	r2, [r7, #24]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d911      	bls.n	80046fa <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	685a      	ldr	r2, [r3, #4]
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	4413      	add	r3, r2
 80046de:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	68b9      	ldr	r1, [r7, #8]
 80046e4:	6938      	ldr	r0, [r7, #16]
 80046e6:	f002 f8c7 	bl	8006878 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80046ea:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80046ee:	69fa      	ldr	r2, [r7, #28]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	441a      	add	r2, r3
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80046f8:	e01f      	b.n	800473a <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	685a      	ldr	r2, [r3, #4]
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	4413      	add	r3, r2
 8004706:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	68b9      	ldr	r1, [r7, #8]
 800470c:	6938      	ldr	r0, [r7, #16]
 800470e:	f002 f8b3 	bl	8006878 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8004720:	68ba      	ldr	r2, [r7, #8]
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	4413      	add	r3, r2
 8004726:	697a      	ldr	r2, [r7, #20]
 8004728:	4619      	mov	r1, r3
 800472a:	6938      	ldr	r0, [r7, #16]
 800472c:	f002 f8a4 	bl	8006878 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004730:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	697a      	ldr	r2, [r7, #20]
 8004738:	60da      	str	r2, [r3, #12]
}
 800473a:	bf00      	nop
 800473c:	3720      	adds	r7, #32
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8004742:	b480      	push	{r7}
 8004744:	b087      	sub	sp, #28
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8004756:	693a      	ldr	r2, [r7, #16]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	429a      	cmp	r2, r3
 800475c:	d808      	bhi.n	8004770 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	689a      	ldr	r2, [r3, #8]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	1ad2      	subs	r2, r2, r3
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	4413      	add	r3, r2
 800476a:	3b01      	subs	r3, #1
 800476c:	617b      	str	r3, [r7, #20]
 800476e:	e004      	b.n	800477a <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004770:	693a      	ldr	r2, [r7, #16]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	3b01      	subs	r3, #1
 8004778:	617b      	str	r3, [r7, #20]
  }
  return r;
 800477a:	697b      	ldr	r3, [r7, #20]
}
 800477c:	4618      	mov	r0, r3
 800477e:	371c      	adds	r7, #28
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004788:	b580      	push	{r7, lr}
 800478a:	b08c      	sub	sp, #48	; 0x30
 800478c:	af00      	add	r7, sp, #0
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8004794:	4b3e      	ldr	r3, [pc, #248]	; (8004890 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004796:	623b      	str	r3, [r7, #32]
 8004798:	6a3b      	ldr	r3, [r7, #32]
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d101      	bne.n	80047a6 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 80047a2:	f7ff fecf 	bl	8004544 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	1c5a      	adds	r2, r3, #1
 80047aa:	4613      	mov	r3, r2
 80047ac:	005b      	lsls	r3, r3, #1
 80047ae:	4413      	add	r3, r2
 80047b0:	00db      	lsls	r3, r3, #3
 80047b2:	4a37      	ldr	r2, [pc, #220]	; (8004890 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80047b4:	4413      	add	r3, r2
 80047b6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80047c8:	2300      	movs	r3, #0
 80047ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80047cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d92b      	bls.n	800482c <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	689a      	ldr	r2, [r3, #8]
 80047d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80047de:	697a      	ldr	r2, [r7, #20]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4293      	cmp	r3, r2
 80047e4:	bf28      	it	cs
 80047e6:	4613      	movcs	r3, r2
 80047e8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	685a      	ldr	r2, [r3, #4]
 80047ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f0:	4413      	add	r3, r2
 80047f2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80047f4:	697a      	ldr	r2, [r7, #20]
 80047f6:	6939      	ldr	r1, [r7, #16]
 80047f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80047fa:	f002 f83d 	bl	8006878 <memcpy>
    NumBytesRead += NumBytesRem;
 80047fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	4413      	add	r3, r2
 8004804:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	4413      	add	r3, r2
 800480c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004816:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	4413      	add	r3, r2
 800481c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004824:	429a      	cmp	r2, r3
 8004826:	d101      	bne.n	800482c <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8004828:	2300      	movs	r3, #0
 800482a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800482c:	69ba      	ldr	r2, [r7, #24]
 800482e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4293      	cmp	r3, r2
 800483a:	bf28      	it	cs
 800483c:	4613      	movcs	r3, r2
 800483e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d019      	beq.n	800487a <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	685a      	ldr	r2, [r3, #4]
 800484a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800484c:	4413      	add	r3, r2
 800484e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	6939      	ldr	r1, [r7, #16]
 8004854:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004856:	f002 f80f 	bl	8006878 <memcpy>
    NumBytesRead += NumBytesRem;
 800485a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	4413      	add	r3, r2
 8004860:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004862:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	4413      	add	r3, r2
 8004868:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004872:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	4413      	add	r3, r2
 8004878:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 800487a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800487c:	2b00      	cmp	r3, #0
 800487e:	d002      	beq.n	8004886 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004884:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004888:	4618      	mov	r0, r3
 800488a:	3730      	adds	r7, #48	; 0x30
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}
 8004890:	2001439c 	.word	0x2001439c

08004894 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004894:	b580      	push	{r7, lr}
 8004896:	b08c      	sub	sp, #48	; 0x30
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80048a0:	4b3e      	ldr	r3, [pc, #248]	; (800499c <SEGGER_RTT_ReadNoLock+0x108>)
 80048a2:	623b      	str	r3, [r7, #32]
 80048a4:	6a3b      	ldr	r3, [r7, #32]
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d101      	bne.n	80048b2 <SEGGER_RTT_ReadNoLock+0x1e>
 80048ae:	f7ff fe49 	bl	8004544 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	4613      	mov	r3, r2
 80048b6:	005b      	lsls	r3, r3, #1
 80048b8:	4413      	add	r3, r2
 80048ba:	00db      	lsls	r3, r3, #3
 80048bc:	3360      	adds	r3, #96	; 0x60
 80048be:	4a37      	ldr	r2, [pc, #220]	; (800499c <SEGGER_RTT_ReadNoLock+0x108>)
 80048c0:	4413      	add	r3, r2
 80048c2:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80048d4:	2300      	movs	r3, #0
 80048d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80048d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d92b      	bls.n	8004938 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	689a      	ldr	r2, [r3, #8]
 80048e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80048ea:	697a      	ldr	r2, [r7, #20]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4293      	cmp	r3, r2
 80048f0:	bf28      	it	cs
 80048f2:	4613      	movcs	r3, r2
 80048f4:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	685a      	ldr	r2, [r3, #4]
 80048fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fc:	4413      	add	r3, r2
 80048fe:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004900:	697a      	ldr	r2, [r7, #20]
 8004902:	6939      	ldr	r1, [r7, #16]
 8004904:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004906:	f001 ffb7 	bl	8006878 <memcpy>
    NumBytesRead += NumBytesRem;
 800490a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	4413      	add	r3, r2
 8004910:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	4413      	add	r3, r2
 8004918:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004922:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	4413      	add	r3, r2
 8004928:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004930:	429a      	cmp	r2, r3
 8004932:	d101      	bne.n	8004938 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004934:	2300      	movs	r3, #0
 8004936:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004938:	69ba      	ldr	r2, [r7, #24]
 800493a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004940:	697a      	ldr	r2, [r7, #20]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4293      	cmp	r3, r2
 8004946:	bf28      	it	cs
 8004948:	4613      	movcs	r3, r2
 800494a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d019      	beq.n	8004986 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	685a      	ldr	r2, [r3, #4]
 8004956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004958:	4413      	add	r3, r2
 800495a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800495c:	697a      	ldr	r2, [r7, #20]
 800495e:	6939      	ldr	r1, [r7, #16]
 8004960:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004962:	f001 ff89 	bl	8006878 <memcpy>
    NumBytesRead += NumBytesRem;
 8004966:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	4413      	add	r3, r2
 800496c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800496e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	4413      	add	r3, r2
 8004974:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800497e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	4413      	add	r3, r2
 8004984:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8004986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004988:	2b00      	cmp	r3, #0
 800498a:	d002      	beq.n	8004992 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004990:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004994:	4618      	mov	r0, r3
 8004996:	3730      	adds	r7, #48	; 0x30
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	2001439c 	.word	0x2001439c

080049a0 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b088      	sub	sp, #32
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	4613      	mov	r3, r2
 80049b4:	005b      	lsls	r3, r3, #1
 80049b6:	4413      	add	r3, r2
 80049b8:	00db      	lsls	r3, r3, #3
 80049ba:	3360      	adds	r3, #96	; 0x60
 80049bc:	4a1f      	ldr	r2, [pc, #124]	; (8004a3c <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 80049be:	4413      	add	r3, r2
 80049c0:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d029      	beq.n	8004a1e <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d82e      	bhi.n	8004a2c <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d002      	beq.n	80049d8 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d013      	beq.n	80049fe <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 80049d6:	e029      	b.n	8004a2c <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80049d8:	6978      	ldr	r0, [r7, #20]
 80049da:	f7ff feb2 	bl	8004742 <_GetAvailWriteSpace>
 80049de:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d202      	bcs.n	80049ee <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 80049e8:	2300      	movs	r3, #0
 80049ea:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80049ec:	e021      	b.n	8004a32 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	69b9      	ldr	r1, [r7, #24]
 80049f6:	6978      	ldr	r0, [r7, #20]
 80049f8:	f7ff fe5b 	bl	80046b2 <_WriteNoCheck>
    break;
 80049fc:	e019      	b.n	8004a32 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80049fe:	6978      	ldr	r0, [r7, #20]
 8004a00:	f7ff fe9f 	bl	8004742 <_GetAvailWriteSpace>
 8004a04:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	bf28      	it	cs
 8004a0e:	4613      	movcs	r3, r2
 8004a10:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8004a12:	69fa      	ldr	r2, [r7, #28]
 8004a14:	69b9      	ldr	r1, [r7, #24]
 8004a16:	6978      	ldr	r0, [r7, #20]
 8004a18:	f7ff fe4b 	bl	80046b2 <_WriteNoCheck>
    break;
 8004a1c:	e009      	b.n	8004a32 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	69b9      	ldr	r1, [r7, #24]
 8004a22:	6978      	ldr	r0, [r7, #20]
 8004a24:	f7ff fde8 	bl	80045f8 <_WriteBlocking>
 8004a28:	61f8      	str	r0, [r7, #28]
    break;
 8004a2a:	e002      	b.n	8004a32 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	61fb      	str	r3, [r7, #28]
    break;
 8004a30:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8004a32:	69fb      	ldr	r3, [r7, #28]
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3720      	adds	r7, #32
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	2001439c 	.word	0x2001439c

08004a40 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b088      	sub	sp, #32
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8004a4c:	4b0e      	ldr	r3, [pc, #56]	; (8004a88 <SEGGER_RTT_WriteDownBuffer+0x48>)
 8004a4e:	61fb      	str	r3, [r7, #28]
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d101      	bne.n	8004a5e <SEGGER_RTT_WriteDownBuffer+0x1e>
 8004a5a:	f7ff fd73 	bl	8004544 <_DoInit>
  SEGGER_RTT_LOCK();
 8004a5e:	f3ef 8311 	mrs	r3, BASEPRI
 8004a62:	f04f 0120 	mov.w	r1, #32
 8004a66:	f381 8811 	msr	BASEPRI, r1
 8004a6a:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	68b9      	ldr	r1, [r7, #8]
 8004a70:	68f8      	ldr	r0, [r7, #12]
 8004a72:	f7ff ff95 	bl	80049a0 <SEGGER_RTT_WriteDownBufferNoLock>
 8004a76:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8004a7e:	697b      	ldr	r3, [r7, #20]
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3720      	adds	r7, #32
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	2001439c 	.word	0x2001439c

08004a8c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b088      	sub	sp, #32
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	607a      	str	r2, [r7, #4]
 8004a98:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004a9a:	4b3d      	ldr	r3, [pc, #244]	; (8004b90 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004a9c:	61bb      	str	r3, [r7, #24]
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d101      	bne.n	8004aac <SEGGER_RTT_AllocUpBuffer+0x20>
 8004aa8:	f7ff fd4c 	bl	8004544 <_DoInit>
  SEGGER_RTT_LOCK();
 8004aac:	f3ef 8311 	mrs	r3, BASEPRI
 8004ab0:	f04f 0120 	mov.w	r1, #32
 8004ab4:	f381 8811 	msr	BASEPRI, r1
 8004ab8:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004aba:	4b35      	ldr	r3, [pc, #212]	; (8004b90 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004abc:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004ac2:	6939      	ldr	r1, [r7, #16]
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	1c5a      	adds	r2, r3, #1
 8004ac8:	4613      	mov	r3, r2
 8004aca:	005b      	lsls	r3, r3, #1
 8004acc:	4413      	add	r3, r2
 8004ace:	00db      	lsls	r3, r3, #3
 8004ad0:	440b      	add	r3, r1
 8004ad2:	3304      	adds	r3, #4
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d008      	beq.n	8004aec <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	3301      	adds	r3, #1
 8004ade:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	691b      	ldr	r3, [r3, #16]
 8004ae4:	69fa      	ldr	r2, [r7, #28]
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	dbeb      	blt.n	8004ac2 <SEGGER_RTT_AllocUpBuffer+0x36>
 8004aea:	e000      	b.n	8004aee <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004aec:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	69fa      	ldr	r2, [r7, #28]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	da3f      	bge.n	8004b78 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004af8:	6939      	ldr	r1, [r7, #16]
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	1c5a      	adds	r2, r3, #1
 8004afe:	4613      	mov	r3, r2
 8004b00:	005b      	lsls	r3, r3, #1
 8004b02:	4413      	add	r3, r2
 8004b04:	00db      	lsls	r3, r3, #3
 8004b06:	440b      	add	r3, r1
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004b0c:	6939      	ldr	r1, [r7, #16]
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	1c5a      	adds	r2, r3, #1
 8004b12:	4613      	mov	r3, r2
 8004b14:	005b      	lsls	r3, r3, #1
 8004b16:	4413      	add	r3, r2
 8004b18:	00db      	lsls	r3, r3, #3
 8004b1a:	440b      	add	r3, r1
 8004b1c:	3304      	adds	r3, #4
 8004b1e:	68ba      	ldr	r2, [r7, #8]
 8004b20:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004b22:	6939      	ldr	r1, [r7, #16]
 8004b24:	69fa      	ldr	r2, [r7, #28]
 8004b26:	4613      	mov	r3, r2
 8004b28:	005b      	lsls	r3, r3, #1
 8004b2a:	4413      	add	r3, r2
 8004b2c:	00db      	lsls	r3, r3, #3
 8004b2e:	440b      	add	r3, r1
 8004b30:	3320      	adds	r3, #32
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004b36:	6939      	ldr	r1, [r7, #16]
 8004b38:	69fa      	ldr	r2, [r7, #28]
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	005b      	lsls	r3, r3, #1
 8004b3e:	4413      	add	r3, r2
 8004b40:	00db      	lsls	r3, r3, #3
 8004b42:	440b      	add	r3, r1
 8004b44:	3328      	adds	r3, #40	; 0x28
 8004b46:	2200      	movs	r2, #0
 8004b48:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004b4a:	6939      	ldr	r1, [r7, #16]
 8004b4c:	69fa      	ldr	r2, [r7, #28]
 8004b4e:	4613      	mov	r3, r2
 8004b50:	005b      	lsls	r3, r3, #1
 8004b52:	4413      	add	r3, r2
 8004b54:	00db      	lsls	r3, r3, #3
 8004b56:	440b      	add	r3, r1
 8004b58:	3324      	adds	r3, #36	; 0x24
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004b5e:	6939      	ldr	r1, [r7, #16]
 8004b60:	69fa      	ldr	r2, [r7, #28]
 8004b62:	4613      	mov	r3, r2
 8004b64:	005b      	lsls	r3, r3, #1
 8004b66:	4413      	add	r3, r2
 8004b68:	00db      	lsls	r3, r3, #3
 8004b6a:	440b      	add	r3, r1
 8004b6c:	332c      	adds	r3, #44	; 0x2c
 8004b6e:	683a      	ldr	r2, [r7, #0]
 8004b70:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004b72:	f3bf 8f5f 	dmb	sy
 8004b76:	e002      	b.n	8004b7e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004b78:	f04f 33ff 	mov.w	r3, #4294967295
 8004b7c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004b84:	69fb      	ldr	r3, [r7, #28]
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3720      	adds	r7, #32
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	2001439c 	.word	0x2001439c

08004b94 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b08a      	sub	sp, #40	; 0x28
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	607a      	str	r2, [r7, #4]
 8004ba0:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8004ba2:	4b21      	ldr	r3, [pc, #132]	; (8004c28 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004ba4:	623b      	str	r3, [r7, #32]
 8004ba6:	6a3b      	ldr	r3, [r7, #32]
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d101      	bne.n	8004bb4 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004bb0:	f7ff fcc8 	bl	8004544 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004bb4:	4b1c      	ldr	r3, [pc, #112]	; (8004c28 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004bb6:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d82c      	bhi.n	8004c18 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8004bbe:	f3ef 8311 	mrs	r3, BASEPRI
 8004bc2:	f04f 0120 	mov.w	r1, #32
 8004bc6:	f381 8811 	msr	BASEPRI, r1
 8004bca:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	4613      	mov	r3, r2
 8004bd0:	005b      	lsls	r3, r3, #1
 8004bd2:	4413      	add	r3, r2
 8004bd4:	00db      	lsls	r3, r3, #3
 8004bd6:	3360      	adds	r3, #96	; 0x60
 8004bd8:	69fa      	ldr	r2, [r7, #28]
 8004bda:	4413      	add	r3, r2
 8004bdc:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d00e      	beq.n	8004c02 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	68ba      	ldr	r2, [r7, #8]
 8004be8:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	683a      	ldr	r2, [r7, #0]
 8004bf4:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c06:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004c08:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004c12:	2300      	movs	r3, #0
 8004c14:	627b      	str	r3, [r7, #36]	; 0x24
 8004c16:	e002      	b.n	8004c1e <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8004c18:	f04f 33ff 	mov.w	r3, #4294967295
 8004c1c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8004c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3728      	adds	r7, #40	; 0x28
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	2001439c 	.word	0x2001439c

08004c2c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004c2c:	b480      	push	{r7}
 8004c2e:	b087      	sub	sp, #28
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00f      	beq.n	8004c62 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8004c42:	e002      	b.n	8004c4a <_EncodeStr+0x1e>
      Len++;
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	3301      	adds	r3, #1
 8004c48:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8004c4a:	68ba      	ldr	r2, [r7, #8]
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	4413      	add	r3, r2
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d1f6      	bne.n	8004c44 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8004c56:	693a      	ldr	r2, [r7, #16]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d901      	bls.n	8004c62 <_EncodeStr+0x36>
      Len = Limit;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	2bfe      	cmp	r3, #254	; 0xfe
 8004c66:	d806      	bhi.n	8004c76 <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	1c5a      	adds	r2, r3, #1
 8004c6c:	60fa      	str	r2, [r7, #12]
 8004c6e:	693a      	ldr	r2, [r7, #16]
 8004c70:	b2d2      	uxtb	r2, r2
 8004c72:	701a      	strb	r2, [r3, #0]
 8004c74:	e011      	b.n	8004c9a <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	1c5a      	adds	r2, r3, #1
 8004c7a:	60fa      	str	r2, [r7, #12]
 8004c7c:	22ff      	movs	r2, #255	; 0xff
 8004c7e:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	1c5a      	adds	r2, r3, #1
 8004c84:	60fa      	str	r2, [r7, #12]
 8004c86:	693a      	ldr	r2, [r7, #16]
 8004c88:	b2d2      	uxtb	r2, r2
 8004c8a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	0a19      	lsrs	r1, r3, #8
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	1c5a      	adds	r2, r3, #1
 8004c94:	60fa      	str	r2, [r7, #12]
 8004c96:	b2ca      	uxtb	r2, r1
 8004c98:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004c9e:	e00a      	b.n	8004cb6 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8004ca0:	68ba      	ldr	r2, [r7, #8]
 8004ca2:	1c53      	adds	r3, r2, #1
 8004ca4:	60bb      	str	r3, [r7, #8]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	1c59      	adds	r1, r3, #1
 8004caa:	60f9      	str	r1, [r7, #12]
 8004cac:	7812      	ldrb	r2, [r2, #0]
 8004cae:	701a      	strb	r2, [r3, #0]
    n++;
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004cb6:	697a      	ldr	r2, [r7, #20]
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d3f0      	bcc.n	8004ca0 <_EncodeStr+0x74>
  }
  return pPayload;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	371c      	adds	r7, #28
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	3307      	adds	r3, #7
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004cea:	4b35      	ldr	r3, [pc, #212]	; (8004dc0 <_HandleIncomingPacket+0xdc>)
 8004cec:	7e1b      	ldrb	r3, [r3, #24]
 8004cee:	4618      	mov	r0, r3
 8004cf0:	1cfb      	adds	r3, r7, #3
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	f7ff fdcd 	bl	8004894 <SEGGER_RTT_ReadNoLock>
 8004cfa:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d052      	beq.n	8004da8 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 8004d02:	78fb      	ldrb	r3, [r7, #3]
 8004d04:	2b80      	cmp	r3, #128	; 0x80
 8004d06:	d031      	beq.n	8004d6c <_HandleIncomingPacket+0x88>
 8004d08:	2b80      	cmp	r3, #128	; 0x80
 8004d0a:	dc40      	bgt.n	8004d8e <_HandleIncomingPacket+0xaa>
 8004d0c:	2b07      	cmp	r3, #7
 8004d0e:	dc15      	bgt.n	8004d3c <_HandleIncomingPacket+0x58>
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	dd3c      	ble.n	8004d8e <_HandleIncomingPacket+0xaa>
 8004d14:	3b01      	subs	r3, #1
 8004d16:	2b06      	cmp	r3, #6
 8004d18:	d839      	bhi.n	8004d8e <_HandleIncomingPacket+0xaa>
 8004d1a:	a201      	add	r2, pc, #4	; (adr r2, 8004d20 <_HandleIncomingPacket+0x3c>)
 8004d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d20:	08004d43 	.word	0x08004d43
 8004d24:	08004d49 	.word	0x08004d49
 8004d28:	08004d4f 	.word	0x08004d4f
 8004d2c:	08004d55 	.word	0x08004d55
 8004d30:	08004d5b 	.word	0x08004d5b
 8004d34:	08004d61 	.word	0x08004d61
 8004d38:	08004d67 	.word	0x08004d67
 8004d3c:	2b7f      	cmp	r3, #127	; 0x7f
 8004d3e:	d035      	beq.n	8004dac <_HandleIncomingPacket+0xc8>
 8004d40:	e025      	b.n	8004d8e <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004d42:	f000 ff57 	bl	8005bf4 <SEGGER_SYSVIEW_Start>
      break;
 8004d46:	e036      	b.n	8004db6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004d48:	f001 f810 	bl	8005d6c <SEGGER_SYSVIEW_Stop>
      break;
 8004d4c:	e033      	b.n	8004db6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004d4e:	f001 f9e9 	bl	8006124 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004d52:	e030      	b.n	8004db6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004d54:	f001 f9ae 	bl	80060b4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004d58:	e02d      	b.n	8004db6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004d5a:	f001 f82d 	bl	8005db8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004d5e:	e02a      	b.n	8004db6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004d60:	f001 fc7c 	bl	800665c <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004d64:	e027      	b.n	8004db6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004d66:	f001 fc5b 	bl	8006620 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004d6a:	e024      	b.n	8004db6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004d6c:	4b14      	ldr	r3, [pc, #80]	; (8004dc0 <_HandleIncomingPacket+0xdc>)
 8004d6e:	7e1b      	ldrb	r3, [r3, #24]
 8004d70:	4618      	mov	r0, r3
 8004d72:	1cfb      	adds	r3, r7, #3
 8004d74:	2201      	movs	r2, #1
 8004d76:	4619      	mov	r1, r3
 8004d78:	f7ff fd8c 	bl	8004894 <SEGGER_RTT_ReadNoLock>
 8004d7c:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d015      	beq.n	8004db0 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004d84:	78fb      	ldrb	r3, [r7, #3]
 8004d86:	4618      	mov	r0, r3
 8004d88:	f001 fbca 	bl	8006520 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004d8c:	e010      	b.n	8004db0 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004d8e:	78fb      	ldrb	r3, [r7, #3]
 8004d90:	b25b      	sxtb	r3, r3
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	da0e      	bge.n	8004db4 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004d96:	4b0a      	ldr	r3, [pc, #40]	; (8004dc0 <_HandleIncomingPacket+0xdc>)
 8004d98:	7e1b      	ldrb	r3, [r3, #24]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	1cfb      	adds	r3, r7, #3
 8004d9e:	2201      	movs	r2, #1
 8004da0:	4619      	mov	r1, r3
 8004da2:	f7ff fd77 	bl	8004894 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004da6:	e005      	b.n	8004db4 <_HandleIncomingPacket+0xd0>
    }
  }
 8004da8:	bf00      	nop
 8004daa:	e004      	b.n	8004db6 <_HandleIncomingPacket+0xd2>
      break;
 8004dac:	bf00      	nop
 8004dae:	e002      	b.n	8004db6 <_HandleIncomingPacket+0xd2>
      break;
 8004db0:	bf00      	nop
 8004db2:	e000      	b.n	8004db6 <_HandleIncomingPacket+0xd2>
      break;
 8004db4:	bf00      	nop
}
 8004db6:	bf00      	nop
 8004db8:	3708      	adds	r7, #8
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	2001422c 	.word	0x2001422c

08004dc4 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b08c      	sub	sp, #48	; 0x30
 8004dc8:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004dca:	2301      	movs	r3, #1
 8004dcc:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004dce:	1d3b      	adds	r3, r7, #4
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dd8:	4b32      	ldr	r3, [pc, #200]	; (8004ea4 <_TrySendOverflowPacket+0xe0>)
 8004dda:	695b      	ldr	r3, [r3, #20]
 8004ddc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dde:	e00b      	b.n	8004df8 <_TrySendOverflowPacket+0x34>
 8004de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de2:	b2da      	uxtb	r2, r3
 8004de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de6:	1c59      	adds	r1, r3, #1
 8004de8:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004dea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004dee:	b2d2      	uxtb	r2, r2
 8004df0:	701a      	strb	r2, [r3, #0]
 8004df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df4:	09db      	lsrs	r3, r3, #7
 8004df6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfa:	2b7f      	cmp	r3, #127	; 0x7f
 8004dfc:	d8f0      	bhi.n	8004de0 <_TrySendOverflowPacket+0x1c>
 8004dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e00:	1c5a      	adds	r2, r3, #1
 8004e02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e06:	b2d2      	uxtb	r2, r2
 8004e08:	701a      	strb	r2, [r3, #0]
 8004e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e0c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004e0e:	4b26      	ldr	r3, [pc, #152]	; (8004ea8 <_TrySendOverflowPacket+0xe4>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004e14:	4b23      	ldr	r3, [pc, #140]	; (8004ea4 <_TrySendOverflowPacket+0xe0>)
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	69ba      	ldr	r2, [r7, #24]
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	627b      	str	r3, [r7, #36]	; 0x24
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	623b      	str	r3, [r7, #32]
 8004e26:	e00b      	b.n	8004e40 <_TrySendOverflowPacket+0x7c>
 8004e28:	6a3b      	ldr	r3, [r7, #32]
 8004e2a:	b2da      	uxtb	r2, r3
 8004e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2e:	1c59      	adds	r1, r3, #1
 8004e30:	6279      	str	r1, [r7, #36]	; 0x24
 8004e32:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e36:	b2d2      	uxtb	r2, r2
 8004e38:	701a      	strb	r2, [r3, #0]
 8004e3a:	6a3b      	ldr	r3, [r7, #32]
 8004e3c:	09db      	lsrs	r3, r3, #7
 8004e3e:	623b      	str	r3, [r7, #32]
 8004e40:	6a3b      	ldr	r3, [r7, #32]
 8004e42:	2b7f      	cmp	r3, #127	; 0x7f
 8004e44:	d8f0      	bhi.n	8004e28 <_TrySendOverflowPacket+0x64>
 8004e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e48:	1c5a      	adds	r2, r3, #1
 8004e4a:	627a      	str	r2, [r7, #36]	; 0x24
 8004e4c:	6a3a      	ldr	r2, [r7, #32]
 8004e4e:	b2d2      	uxtb	r2, r2
 8004e50:	701a      	strb	r2, [r3, #0]
 8004e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e54:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8004e56:	4b13      	ldr	r3, [pc, #76]	; (8004ea4 <_TrySendOverflowPacket+0xe0>)
 8004e58:	785b      	ldrb	r3, [r3, #1]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	1d3b      	adds	r3, r7, #4
 8004e5e:	69fa      	ldr	r2, [r7, #28]
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	461a      	mov	r2, r3
 8004e64:	1d3b      	adds	r3, r7, #4
 8004e66:	4619      	mov	r1, r3
 8004e68:	f7fb f9b2 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8004e70:	f7ff fade 	bl	8004430 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d009      	beq.n	8004e8e <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004e7a:	4a0a      	ldr	r2, [pc, #40]	; (8004ea4 <_TrySendOverflowPacket+0xe0>)
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004e80:	4b08      	ldr	r3, [pc, #32]	; (8004ea4 <_TrySendOverflowPacket+0xe0>)
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	3b01      	subs	r3, #1
 8004e86:	b2da      	uxtb	r2, r3
 8004e88:	4b06      	ldr	r3, [pc, #24]	; (8004ea4 <_TrySendOverflowPacket+0xe0>)
 8004e8a:	701a      	strb	r2, [r3, #0]
 8004e8c:	e004      	b.n	8004e98 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004e8e:	4b05      	ldr	r3, [pc, #20]	; (8004ea4 <_TrySendOverflowPacket+0xe0>)
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	3301      	adds	r3, #1
 8004e94:	4a03      	ldr	r2, [pc, #12]	; (8004ea4 <_TrySendOverflowPacket+0xe0>)
 8004e96:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004e98:	693b      	ldr	r3, [r7, #16]
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3730      	adds	r7, #48	; 0x30
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	2001422c 	.word	0x2001422c
 8004ea8:	e0001004 	.word	0xe0001004

08004eac <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b08a      	sub	sp, #40	; 0x28
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004eb8:	4b9b      	ldr	r3, [pc, #620]	; (8005128 <_SendPacket+0x27c>)
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d010      	beq.n	8004ee2 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004ec0:	4b99      	ldr	r3, [pc, #612]	; (8005128 <_SendPacket+0x27c>)
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	f000 812b 	beq.w	8005120 <_SendPacket+0x274>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004eca:	4b97      	ldr	r3, [pc, #604]	; (8005128 <_SendPacket+0x27c>)
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	d109      	bne.n	8004ee6 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004ed2:	f7ff ff77 	bl	8004dc4 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004ed6:	4b94      	ldr	r3, [pc, #592]	; (8005128 <_SendPacket+0x27c>)
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	f040 8122 	bne.w	8005124 <_SendPacket+0x278>
      goto SendDone;
    }
  }
Send:
 8004ee0:	e001      	b.n	8004ee6 <_SendPacket+0x3a>
    goto Send;
 8004ee2:	bf00      	nop
 8004ee4:	e000      	b.n	8004ee8 <_SendPacket+0x3c>
Send:
 8004ee6:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2b1f      	cmp	r3, #31
 8004eec:	d809      	bhi.n	8004f02 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004eee:	4b8e      	ldr	r3, [pc, #568]	; (8005128 <_SendPacket+0x27c>)
 8004ef0:	69da      	ldr	r2, [r3, #28]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ef8:	f003 0301 	and.w	r3, r3, #1
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f040 8117 	bne.w	8005130 <_SendPacket+0x284>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2b17      	cmp	r3, #23
 8004f06:	d807      	bhi.n	8004f18 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	60fb      	str	r3, [r7, #12]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	b2da      	uxtb	r2, r3
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	701a      	strb	r2, [r3, #0]
 8004f16:	e0c4      	b.n	80050a2 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8004f18:	68ba      	ldr	r2, [r7, #8]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	2b7f      	cmp	r3, #127	; 0x7f
 8004f24:	d912      	bls.n	8004f4c <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	09da      	lsrs	r2, r3, #7
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	60fb      	str	r3, [r7, #12]
 8004f30:	b2d2      	uxtb	r2, r2
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	3a01      	subs	r2, #1
 8004f3e:	60fa      	str	r2, [r7, #12]
 8004f40:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004f44:	b2da      	uxtb	r2, r3
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	701a      	strb	r2, [r3, #0]
 8004f4a:	e006      	b.n	8004f5a <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	3b01      	subs	r3, #1
 8004f50:	60fb      	str	r3, [r7, #12]
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	b2da      	uxtb	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2b7e      	cmp	r3, #126	; 0x7e
 8004f5e:	d807      	bhi.n	8004f70 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	3b01      	subs	r3, #1
 8004f64:	60fb      	str	r3, [r7, #12]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	b2da      	uxtb	r2, r3
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	701a      	strb	r2, [r3, #0]
 8004f6e:	e098      	b.n	80050a2 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f76:	d212      	bcs.n	8004f9e <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	09da      	lsrs	r2, r3, #7
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	3b01      	subs	r3, #1
 8004f80:	60fb      	str	r3, [r7, #12]
 8004f82:	b2d2      	uxtb	r2, r2
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	3a01      	subs	r2, #1
 8004f90:	60fa      	str	r2, [r7, #12]
 8004f92:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004f96:	b2da      	uxtb	r2, r3
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	701a      	strb	r2, [r3, #0]
 8004f9c:	e081      	b.n	80050a2 <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004fa4:	d21d      	bcs.n	8004fe2 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	0b9a      	lsrs	r2, r3, #14
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	3b01      	subs	r3, #1
 8004fae:	60fb      	str	r3, [r7, #12]
 8004fb0:	b2d2      	uxtb	r2, r2
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	09db      	lsrs	r3, r3, #7
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	68fa      	ldr	r2, [r7, #12]
 8004fbe:	3a01      	subs	r2, #1
 8004fc0:	60fa      	str	r2, [r7, #12]
 8004fc2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004fc6:	b2da      	uxtb	r2, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	3a01      	subs	r2, #1
 8004fd4:	60fa      	str	r2, [r7, #12]
 8004fd6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004fda:	b2da      	uxtb	r2, r3
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	701a      	strb	r2, [r3, #0]
 8004fe0:	e05f      	b.n	80050a2 <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fe8:	d228      	bcs.n	800503c <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	0d5a      	lsrs	r2, r3, #21
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	60fb      	str	r3, [r7, #12]
 8004ff4:	b2d2      	uxtb	r2, r2
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	0b9b      	lsrs	r3, r3, #14
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	3a01      	subs	r2, #1
 8005004:	60fa      	str	r2, [r7, #12]
 8005006:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800500a:	b2da      	uxtb	r2, r3
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	09db      	lsrs	r3, r3, #7
 8005014:	b2db      	uxtb	r3, r3
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	3a01      	subs	r2, #1
 800501a:	60fa      	str	r2, [r7, #12]
 800501c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005020:	b2da      	uxtb	r2, r3
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	b2db      	uxtb	r3, r3
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	3a01      	subs	r2, #1
 800502e:	60fa      	str	r2, [r7, #12]
 8005030:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005034:	b2da      	uxtb	r2, r3
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	701a      	strb	r2, [r3, #0]
 800503a:	e032      	b.n	80050a2 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	0f1a      	lsrs	r2, r3, #28
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	3b01      	subs	r3, #1
 8005044:	60fb      	str	r3, [r7, #12]
 8005046:	b2d2      	uxtb	r2, r2
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	0d5b      	lsrs	r3, r3, #21
 8005050:	b2db      	uxtb	r3, r3
 8005052:	68fa      	ldr	r2, [r7, #12]
 8005054:	3a01      	subs	r2, #1
 8005056:	60fa      	str	r2, [r7, #12]
 8005058:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800505c:	b2da      	uxtb	r2, r3
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	0b9b      	lsrs	r3, r3, #14
 8005066:	b2db      	uxtb	r3, r3
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	3a01      	subs	r2, #1
 800506c:	60fa      	str	r2, [r7, #12]
 800506e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005072:	b2da      	uxtb	r2, r3
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	09db      	lsrs	r3, r3, #7
 800507c:	b2db      	uxtb	r3, r3
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	3a01      	subs	r2, #1
 8005082:	60fa      	str	r2, [r7, #12]
 8005084:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005088:	b2da      	uxtb	r2, r3
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	b2db      	uxtb	r3, r3
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	3a01      	subs	r2, #1
 8005096:	60fa      	str	r2, [r7, #12]
 8005098:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800509c:	b2da      	uxtb	r2, r3
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80050a2:	4b22      	ldr	r3, [pc, #136]	; (800512c <_SendPacket+0x280>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80050a8:	4b1f      	ldr	r3, [pc, #124]	; (8005128 <_SendPacket+0x27c>)
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	69ba      	ldr	r2, [r7, #24]
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	627b      	str	r3, [r7, #36]	; 0x24
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	623b      	str	r3, [r7, #32]
 80050ba:	e00b      	b.n	80050d4 <_SendPacket+0x228>
 80050bc:	6a3b      	ldr	r3, [r7, #32]
 80050be:	b2da      	uxtb	r2, r3
 80050c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c2:	1c59      	adds	r1, r3, #1
 80050c4:	6279      	str	r1, [r7, #36]	; 0x24
 80050c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050ca:	b2d2      	uxtb	r2, r2
 80050cc:	701a      	strb	r2, [r3, #0]
 80050ce:	6a3b      	ldr	r3, [r7, #32]
 80050d0:	09db      	lsrs	r3, r3, #7
 80050d2:	623b      	str	r3, [r7, #32]
 80050d4:	6a3b      	ldr	r3, [r7, #32]
 80050d6:	2b7f      	cmp	r3, #127	; 0x7f
 80050d8:	d8f0      	bhi.n	80050bc <_SendPacket+0x210>
 80050da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050dc:	1c5a      	adds	r2, r3, #1
 80050de:	627a      	str	r2, [r7, #36]	; 0x24
 80050e0:	6a3a      	ldr	r2, [r7, #32]
 80050e2:	b2d2      	uxtb	r2, r2
 80050e4:	701a      	strb	r2, [r3, #0]
 80050e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e8:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80050ea:	4b0f      	ldr	r3, [pc, #60]	; (8005128 <_SendPacket+0x27c>)
 80050ec:	785b      	ldrb	r3, [r3, #1]
 80050ee:	4618      	mov	r0, r3
 80050f0:	68ba      	ldr	r2, [r7, #8]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	461a      	mov	r2, r3
 80050f8:	68f9      	ldr	r1, [r7, #12]
 80050fa:	f7fb f869 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80050fe:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8005100:	f7ff f996 	bl	8004430 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d003      	beq.n	8005112 <_SendPacket+0x266>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800510a:	4a07      	ldr	r2, [pc, #28]	; (8005128 <_SendPacket+0x27c>)
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	60d3      	str	r3, [r2, #12]
 8005110:	e00f      	b.n	8005132 <_SendPacket+0x286>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005112:	4b05      	ldr	r3, [pc, #20]	; (8005128 <_SendPacket+0x27c>)
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	3301      	adds	r3, #1
 8005118:	b2da      	uxtb	r2, r3
 800511a:	4b03      	ldr	r3, [pc, #12]	; (8005128 <_SendPacket+0x27c>)
 800511c:	701a      	strb	r2, [r3, #0]
 800511e:	e008      	b.n	8005132 <_SendPacket+0x286>
    goto SendDone;
 8005120:	bf00      	nop
 8005122:	e006      	b.n	8005132 <_SendPacket+0x286>
      goto SendDone;
 8005124:	bf00      	nop
 8005126:	e004      	b.n	8005132 <_SendPacket+0x286>
 8005128:	2001422c 	.word	0x2001422c
 800512c:	e0001004 	.word	0xe0001004
      goto SendDone;
 8005130:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005132:	4b14      	ldr	r3, [pc, #80]	; (8005184 <_SendPacket+0x2d8>)
 8005134:	7e1b      	ldrb	r3, [r3, #24]
 8005136:	4619      	mov	r1, r3
 8005138:	4a13      	ldr	r2, [pc, #76]	; (8005188 <_SendPacket+0x2dc>)
 800513a:	460b      	mov	r3, r1
 800513c:	005b      	lsls	r3, r3, #1
 800513e:	440b      	add	r3, r1
 8005140:	00db      	lsls	r3, r3, #3
 8005142:	4413      	add	r3, r2
 8005144:	336c      	adds	r3, #108	; 0x6c
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	4b0e      	ldr	r3, [pc, #56]	; (8005184 <_SendPacket+0x2d8>)
 800514a:	7e1b      	ldrb	r3, [r3, #24]
 800514c:	4618      	mov	r0, r3
 800514e:	490e      	ldr	r1, [pc, #56]	; (8005188 <_SendPacket+0x2dc>)
 8005150:	4603      	mov	r3, r0
 8005152:	005b      	lsls	r3, r3, #1
 8005154:	4403      	add	r3, r0
 8005156:	00db      	lsls	r3, r3, #3
 8005158:	440b      	add	r3, r1
 800515a:	3370      	adds	r3, #112	; 0x70
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	429a      	cmp	r2, r3
 8005160:	d00b      	beq.n	800517a <_SendPacket+0x2ce>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005162:	4b08      	ldr	r3, [pc, #32]	; (8005184 <_SendPacket+0x2d8>)
 8005164:	789b      	ldrb	r3, [r3, #2]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d107      	bne.n	800517a <_SendPacket+0x2ce>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800516a:	4b06      	ldr	r3, [pc, #24]	; (8005184 <_SendPacket+0x2d8>)
 800516c:	2201      	movs	r2, #1
 800516e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005170:	f7ff fdb8 	bl	8004ce4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005174:	4b03      	ldr	r3, [pc, #12]	; (8005184 <_SendPacket+0x2d8>)
 8005176:	2200      	movs	r2, #0
 8005178:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800517a:	bf00      	nop
 800517c:	3728      	adds	r7, #40	; 0x28
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	2001422c 	.word	0x2001422c
 8005188:	2001439c 	.word	0x2001439c

0800518c <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 800518c:	b580      	push	{r7, lr}
 800518e:	b08a      	sub	sp, #40	; 0x28
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	460b      	mov	r3, r1
 8005196:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	691b      	ldr	r3, [r3, #16]
 800519c:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	3301      	adds	r3, #1
 80051a2:	2b80      	cmp	r3, #128	; 0x80
 80051a4:	d80a      	bhi.n	80051bc <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	1c59      	adds	r1, r3, #1
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	6051      	str	r1, [r2, #4]
 80051b0:	78fa      	ldrb	r2, [r7, #3]
 80051b2:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	1c5a      	adds	r2, r3, #1
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	2b80      	cmp	r3, #128	; 0x80
 80051c2:	d15a      	bne.n	800527a <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	691a      	ldr	r2, [r3, #16]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	b2d2      	uxtb	r2, r2
 80051ce:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	627b      	str	r3, [r7, #36]	; 0x24
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	623b      	str	r3, [r7, #32]
 80051e4:	e00b      	b.n	80051fe <_StoreChar+0x72>
 80051e6:	6a3b      	ldr	r3, [r7, #32]
 80051e8:	b2da      	uxtb	r2, r3
 80051ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ec:	1c59      	adds	r1, r3, #1
 80051ee:	6279      	str	r1, [r7, #36]	; 0x24
 80051f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051f4:	b2d2      	uxtb	r2, r2
 80051f6:	701a      	strb	r2, [r3, #0]
 80051f8:	6a3b      	ldr	r3, [r7, #32]
 80051fa:	09db      	lsrs	r3, r3, #7
 80051fc:	623b      	str	r3, [r7, #32]
 80051fe:	6a3b      	ldr	r3, [r7, #32]
 8005200:	2b7f      	cmp	r3, #127	; 0x7f
 8005202:	d8f0      	bhi.n	80051e6 <_StoreChar+0x5a>
 8005204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005206:	1c5a      	adds	r2, r3, #1
 8005208:	627a      	str	r2, [r7, #36]	; 0x24
 800520a:	6a3a      	ldr	r2, [r7, #32]
 800520c:	b2d2      	uxtb	r2, r2
 800520e:	701a      	strb	r2, [r3, #0]
 8005210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005212:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	61fb      	str	r3, [r7, #28]
 8005218:	2300      	movs	r3, #0
 800521a:	61bb      	str	r3, [r7, #24]
 800521c:	e00b      	b.n	8005236 <_StoreChar+0xaa>
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	b2da      	uxtb	r2, r3
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	1c59      	adds	r1, r3, #1
 8005226:	61f9      	str	r1, [r7, #28]
 8005228:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800522c:	b2d2      	uxtb	r2, r2
 800522e:	701a      	strb	r2, [r3, #0]
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	09db      	lsrs	r3, r3, #7
 8005234:	61bb      	str	r3, [r7, #24]
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	2b7f      	cmp	r3, #127	; 0x7f
 800523a:	d8f0      	bhi.n	800521e <_StoreChar+0x92>
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	1c5a      	adds	r2, r3, #1
 8005240:	61fa      	str	r2, [r7, #28]
 8005242:	69ba      	ldr	r2, [r7, #24]
 8005244:	b2d2      	uxtb	r2, r2
 8005246:	701a      	strb	r2, [r3, #0]
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	221a      	movs	r2, #26
 8005252:	6939      	ldr	r1, [r7, #16]
 8005254:	4618      	mov	r0, r3
 8005256:	f7ff fe29 	bl	8004eac <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4618      	mov	r0, r3
 8005260:	f7ff fd34 	bl	8004ccc <_PreparePacket>
 8005264:	4602      	mov	r2, r0
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	1c5a      	adds	r2, r3, #1
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	611a      	str	r2, [r3, #16]
  }
}
 800527a:	bf00      	nop
 800527c:	3728      	adds	r7, #40	; 0x28
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
	...

08005284 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005284:	b580      	push	{r7, lr}
 8005286:	b08a      	sub	sp, #40	; 0x28
 8005288:	af00      	add	r7, sp, #0
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	60b9      	str	r1, [r7, #8]
 800528e:	607a      	str	r2, [r7, #4]
 8005290:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8005296:	2301      	movs	r3, #1
 8005298:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 800529a:	2301      	movs	r3, #1
 800529c:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800529e:	e007      	b.n	80052b0 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80052a0:	6a3a      	ldr	r2, [r7, #32]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052a8:	623b      	str	r3, [r7, #32]
    Width++;
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	3301      	adds	r3, #1
 80052ae:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80052b0:	6a3a      	ldr	r2, [r7, #32]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d2f3      	bcs.n	80052a0 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80052b8:	683a      	ldr	r2, [r7, #0]
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d901      	bls.n	80052c4 <_PrintUnsigned+0x40>
    Width = NumDigits;
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80052c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052c6:	f003 0301 	and.w	r3, r3, #1
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d11f      	bne.n	800530e <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 80052ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d01c      	beq.n	800530e <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80052d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052d6:	f003 0302 	and.w	r3, r3, #2
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d005      	beq.n	80052ea <_PrintUnsigned+0x66>
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d102      	bne.n	80052ea <_PrintUnsigned+0x66>
        c = '0';
 80052e4:	2330      	movs	r3, #48	; 0x30
 80052e6:	76fb      	strb	r3, [r7, #27]
 80052e8:	e001      	b.n	80052ee <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 80052ea:	2320      	movs	r3, #32
 80052ec:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80052ee:	e007      	b.n	8005300 <_PrintUnsigned+0x7c>
        FieldWidth--;
 80052f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f2:	3b01      	subs	r3, #1
 80052f4:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 80052f6:	7efb      	ldrb	r3, [r7, #27]
 80052f8:	4619      	mov	r1, r3
 80052fa:	68f8      	ldr	r0, [r7, #12]
 80052fc:	f7ff ff46 	bl	800518c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005302:	2b00      	cmp	r3, #0
 8005304:	d003      	beq.n	800530e <_PrintUnsigned+0x8a>
 8005306:	69fa      	ldr	r2, [r7, #28]
 8005308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800530a:	429a      	cmp	r2, r3
 800530c:	d3f0      	bcc.n	80052f0 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	2b01      	cmp	r3, #1
 8005312:	d903      	bls.n	800531c <_PrintUnsigned+0x98>
      NumDigits--;
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	3b01      	subs	r3, #1
 8005318:	603b      	str	r3, [r7, #0]
 800531a:	e009      	b.n	8005330 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 800531c:	68ba      	ldr	r2, [r7, #8]
 800531e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005320:	fbb2 f3f3 	udiv	r3, r2, r3
 8005324:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005326:	697a      	ldr	r2, [r7, #20]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	429a      	cmp	r2, r3
 800532c:	d200      	bcs.n	8005330 <_PrintUnsigned+0xac>
        break;
 800532e:	e005      	b.n	800533c <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8005330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	fb02 f303 	mul.w	r3, r2, r3
 8005338:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800533a:	e7e8      	b.n	800530e <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 800533c:	68ba      	ldr	r2, [r7, #8]
 800533e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005340:	fbb2 f3f3 	udiv	r3, r2, r3
 8005344:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800534a:	fb02 f303 	mul.w	r3, r2, r3
 800534e:	68ba      	ldr	r2, [r7, #8]
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005354:	4a15      	ldr	r2, [pc, #84]	; (80053ac <_PrintUnsigned+0x128>)
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	4413      	add	r3, r2
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	4619      	mov	r1, r3
 800535e:	68f8      	ldr	r0, [r7, #12]
 8005360:	f7ff ff14 	bl	800518c <_StoreChar>
    Digit /= Base;
 8005364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	fbb2 f3f3 	udiv	r3, r2, r3
 800536c:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 800536e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005370:	2b00      	cmp	r3, #0
 8005372:	d1e3      	bne.n	800533c <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005376:	f003 0301 	and.w	r3, r3, #1
 800537a:	2b00      	cmp	r3, #0
 800537c:	d011      	beq.n	80053a2 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 800537e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005380:	2b00      	cmp	r3, #0
 8005382:	d00e      	beq.n	80053a2 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005384:	e006      	b.n	8005394 <_PrintUnsigned+0x110>
        FieldWidth--;
 8005386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005388:	3b01      	subs	r3, #1
 800538a:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 800538c:	2120      	movs	r1, #32
 800538e:	68f8      	ldr	r0, [r7, #12]
 8005390:	f7ff fefc 	bl	800518c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005396:	2b00      	cmp	r3, #0
 8005398:	d003      	beq.n	80053a2 <_PrintUnsigned+0x11e>
 800539a:	69fa      	ldr	r2, [r7, #28]
 800539c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800539e:	429a      	cmp	r2, r3
 80053a0:	d3f1      	bcc.n	8005386 <_PrintUnsigned+0x102>
      }
    }
  }
}
 80053a2:	bf00      	nop
 80053a4:	3728      	adds	r7, #40	; 0x28
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	08006a40 	.word	0x08006a40

080053b0 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b088      	sub	sp, #32
 80053b4:	af02      	add	r7, sp, #8
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	607a      	str	r2, [r7, #4]
 80053bc:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	bfb8      	it	lt
 80053c4:	425b      	neglt	r3, r3
 80053c6:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80053c8:	2301      	movs	r3, #1
 80053ca:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80053cc:	e007      	b.n	80053de <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	693a      	ldr	r2, [r7, #16]
 80053d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80053d6:	613b      	str	r3, [r7, #16]
    Width++;
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	3301      	adds	r3, #1
 80053dc:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	693a      	ldr	r2, [r7, #16]
 80053e2:	429a      	cmp	r2, r3
 80053e4:	daf3      	bge.n	80053ce <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80053e6:	683a      	ldr	r2, [r7, #0]
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d901      	bls.n	80053f2 <_PrintInt+0x42>
    Width = NumDigits;
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 80053f2:	6a3b      	ldr	r3, [r7, #32]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d00a      	beq.n	800540e <_PrintInt+0x5e>
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	db04      	blt.n	8005408 <_PrintInt+0x58>
 80053fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005400:	f003 0304 	and.w	r3, r3, #4
 8005404:	2b00      	cmp	r3, #0
 8005406:	d002      	beq.n	800540e <_PrintInt+0x5e>
    FieldWidth--;
 8005408:	6a3b      	ldr	r3, [r7, #32]
 800540a:	3b01      	subs	r3, #1
 800540c:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800540e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005410:	f003 0302 	and.w	r3, r3, #2
 8005414:	2b00      	cmp	r3, #0
 8005416:	d002      	beq.n	800541e <_PrintInt+0x6e>
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d016      	beq.n	800544c <_PrintInt+0x9c>
 800541e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005420:	f003 0301 	and.w	r3, r3, #1
 8005424:	2b00      	cmp	r3, #0
 8005426:	d111      	bne.n	800544c <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005428:	6a3b      	ldr	r3, [r7, #32]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d00e      	beq.n	800544c <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800542e:	e006      	b.n	800543e <_PrintInt+0x8e>
        FieldWidth--;
 8005430:	6a3b      	ldr	r3, [r7, #32]
 8005432:	3b01      	subs	r3, #1
 8005434:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005436:	2120      	movs	r1, #32
 8005438:	68f8      	ldr	r0, [r7, #12]
 800543a:	f7ff fea7 	bl	800518c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800543e:	6a3b      	ldr	r3, [r7, #32]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d003      	beq.n	800544c <_PrintInt+0x9c>
 8005444:	697a      	ldr	r2, [r7, #20]
 8005446:	6a3b      	ldr	r3, [r7, #32]
 8005448:	429a      	cmp	r2, r3
 800544a:	d3f1      	bcc.n	8005430 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	2b00      	cmp	r3, #0
 8005450:	da07      	bge.n	8005462 <_PrintInt+0xb2>
    v = -v;
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	425b      	negs	r3, r3
 8005456:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005458:	212d      	movs	r1, #45	; 0x2d
 800545a:	68f8      	ldr	r0, [r7, #12]
 800545c:	f7ff fe96 	bl	800518c <_StoreChar>
 8005460:	e008      	b.n	8005474 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005464:	f003 0304 	and.w	r3, r3, #4
 8005468:	2b00      	cmp	r3, #0
 800546a:	d003      	beq.n	8005474 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 800546c:	212b      	movs	r1, #43	; 0x2b
 800546e:	68f8      	ldr	r0, [r7, #12]
 8005470:	f7ff fe8c 	bl	800518c <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005476:	f003 0302 	and.w	r3, r3, #2
 800547a:	2b00      	cmp	r3, #0
 800547c:	d019      	beq.n	80054b2 <_PrintInt+0x102>
 800547e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005480:	f003 0301 	and.w	r3, r3, #1
 8005484:	2b00      	cmp	r3, #0
 8005486:	d114      	bne.n	80054b2 <_PrintInt+0x102>
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d111      	bne.n	80054b2 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 800548e:	6a3b      	ldr	r3, [r7, #32]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d00e      	beq.n	80054b2 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005494:	e006      	b.n	80054a4 <_PrintInt+0xf4>
        FieldWidth--;
 8005496:	6a3b      	ldr	r3, [r7, #32]
 8005498:	3b01      	subs	r3, #1
 800549a:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 800549c:	2130      	movs	r1, #48	; 0x30
 800549e:	68f8      	ldr	r0, [r7, #12]
 80054a0:	f7ff fe74 	bl	800518c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80054a4:	6a3b      	ldr	r3, [r7, #32]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d003      	beq.n	80054b2 <_PrintInt+0x102>
 80054aa:	697a      	ldr	r2, [r7, #20]
 80054ac:	6a3b      	ldr	r3, [r7, #32]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d3f1      	bcc.n	8005496 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 80054b2:	68b9      	ldr	r1, [r7, #8]
 80054b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b6:	9301      	str	r3, [sp, #4]
 80054b8:	6a3b      	ldr	r3, [r7, #32]
 80054ba:	9300      	str	r3, [sp, #0]
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	68f8      	ldr	r0, [r7, #12]
 80054c2:	f7ff fedf 	bl	8005284 <_PrintUnsigned>
}
 80054c6:	bf00      	nop
 80054c8:	3718      	adds	r7, #24
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
	...

080054d0 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b098      	sub	sp, #96	; 0x60
 80054d4:	af02      	add	r7, sp, #8
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80054dc:	f3ef 8311 	mrs	r3, BASEPRI
 80054e0:	f04f 0120 	mov.w	r1, #32
 80054e4:	f381 8811 	msr	BASEPRI, r1
 80054e8:	633b      	str	r3, [r7, #48]	; 0x30
 80054ea:	48b7      	ldr	r0, [pc, #732]	; (80057c8 <_VPrintTarget+0x2f8>)
 80054ec:	f7ff fbee 	bl	8004ccc <_PreparePacket>
 80054f0:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 80054f2:	4bb5      	ldr	r3, [pc, #724]	; (80057c8 <_VPrintTarget+0x2f8>)
 80054f4:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 80054f6:	2300      	movs	r3, #0
 80054f8:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 80054fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054fc:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	3301      	adds	r3, #1
 8005502:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	3301      	adds	r3, #1
 8005514:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005516:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800551a:	2b00      	cmp	r3, #0
 800551c:	f000 8183 	beq.w	8005826 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8005520:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005524:	2b25      	cmp	r3, #37	; 0x25
 8005526:	f040 8170 	bne.w	800580a <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 800552a:	2300      	movs	r3, #0
 800552c:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 800552e:	2301      	movs	r3, #1
 8005530:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 800553a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800553e:	3b23      	subs	r3, #35	; 0x23
 8005540:	2b0d      	cmp	r3, #13
 8005542:	d83f      	bhi.n	80055c4 <_VPrintTarget+0xf4>
 8005544:	a201      	add	r2, pc, #4	; (adr r2, 800554c <_VPrintTarget+0x7c>)
 8005546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800554a:	bf00      	nop
 800554c:	080055b5 	.word	0x080055b5
 8005550:	080055c5 	.word	0x080055c5
 8005554:	080055c5 	.word	0x080055c5
 8005558:	080055c5 	.word	0x080055c5
 800555c:	080055c5 	.word	0x080055c5
 8005560:	080055c5 	.word	0x080055c5
 8005564:	080055c5 	.word	0x080055c5
 8005568:	080055c5 	.word	0x080055c5
 800556c:	080055a5 	.word	0x080055a5
 8005570:	080055c5 	.word	0x080055c5
 8005574:	08005585 	.word	0x08005585
 8005578:	080055c5 	.word	0x080055c5
 800557c:	080055c5 	.word	0x080055c5
 8005580:	08005595 	.word	0x08005595
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005584:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005586:	f043 0301 	orr.w	r3, r3, #1
 800558a:	64bb      	str	r3, [r7, #72]	; 0x48
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	3301      	adds	r3, #1
 8005590:	60fb      	str	r3, [r7, #12]
 8005592:	e01a      	b.n	80055ca <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005594:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005596:	f043 0302 	orr.w	r3, r3, #2
 800559a:	64bb      	str	r3, [r7, #72]	; 0x48
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	3301      	adds	r3, #1
 80055a0:	60fb      	str	r3, [r7, #12]
 80055a2:	e012      	b.n	80055ca <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80055a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055a6:	f043 0304 	orr.w	r3, r3, #4
 80055aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	3301      	adds	r3, #1
 80055b0:	60fb      	str	r3, [r7, #12]
 80055b2:	e00a      	b.n	80055ca <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80055b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055b6:	f043 0308 	orr.w	r3, r3, #8
 80055ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	3301      	adds	r3, #1
 80055c0:	60fb      	str	r3, [r7, #12]
 80055c2:	e002      	b.n	80055ca <_VPrintTarget+0xfa>
        default:  v = 0; break;
 80055c4:	2300      	movs	r3, #0
 80055c6:	653b      	str	r3, [r7, #80]	; 0x50
 80055c8:	bf00      	nop
        }
      } while (v);
 80055ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d1b0      	bne.n	8005532 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 80055d0:	2300      	movs	r3, #0
 80055d2:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 80055dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80055e0:	2b2f      	cmp	r3, #47	; 0x2f
 80055e2:	d912      	bls.n	800560a <_VPrintTarget+0x13a>
 80055e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80055e8:	2b39      	cmp	r3, #57	; 0x39
 80055ea:	d80e      	bhi.n	800560a <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	3301      	adds	r3, #1
 80055f0:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 80055f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80055f4:	4613      	mov	r3, r2
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	4413      	add	r3, r2
 80055fa:	005b      	lsls	r3, r3, #1
 80055fc:	461a      	mov	r2, r3
 80055fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005602:	4413      	add	r3, r2
 8005604:	3b30      	subs	r3, #48	; 0x30
 8005606:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8005608:	e7e4      	b.n	80055d4 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 800560a:	2300      	movs	r3, #0
 800560c:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8005616:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800561a:	2b2e      	cmp	r3, #46	; 0x2e
 800561c:	d11d      	bne.n	800565a <_VPrintTarget+0x18a>
        sFormat++;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	3301      	adds	r3, #1
 8005622:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 800562c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005630:	2b2f      	cmp	r3, #47	; 0x2f
 8005632:	d912      	bls.n	800565a <_VPrintTarget+0x18a>
 8005634:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005638:	2b39      	cmp	r3, #57	; 0x39
 800563a:	d80e      	bhi.n	800565a <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	3301      	adds	r3, #1
 8005640:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8005642:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005644:	4613      	mov	r3, r2
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	4413      	add	r3, r2
 800564a:	005b      	lsls	r3, r3, #1
 800564c:	461a      	mov	r2, r3
 800564e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005652:	4413      	add	r3, r2
 8005654:	3b30      	subs	r3, #48	; 0x30
 8005656:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8005658:	e7e4      	b.n	8005624 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005662:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005666:	2b6c      	cmp	r3, #108	; 0x6c
 8005668:	d003      	beq.n	8005672 <_VPrintTarget+0x1a2>
 800566a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800566e:	2b68      	cmp	r3, #104	; 0x68
 8005670:	d107      	bne.n	8005682 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	3301      	adds	r3, #1
 800567e:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005680:	e7ef      	b.n	8005662 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005682:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005686:	2b25      	cmp	r3, #37	; 0x25
 8005688:	f000 80b3 	beq.w	80057f2 <_VPrintTarget+0x322>
 800568c:	2b25      	cmp	r3, #37	; 0x25
 800568e:	f2c0 80b7 	blt.w	8005800 <_VPrintTarget+0x330>
 8005692:	2b78      	cmp	r3, #120	; 0x78
 8005694:	f300 80b4 	bgt.w	8005800 <_VPrintTarget+0x330>
 8005698:	2b58      	cmp	r3, #88	; 0x58
 800569a:	f2c0 80b1 	blt.w	8005800 <_VPrintTarget+0x330>
 800569e:	3b58      	subs	r3, #88	; 0x58
 80056a0:	2b20      	cmp	r3, #32
 80056a2:	f200 80ad 	bhi.w	8005800 <_VPrintTarget+0x330>
 80056a6:	a201      	add	r2, pc, #4	; (adr r2, 80056ac <_VPrintTarget+0x1dc>)
 80056a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ac:	080057a3 	.word	0x080057a3
 80056b0:	08005801 	.word	0x08005801
 80056b4:	08005801 	.word	0x08005801
 80056b8:	08005801 	.word	0x08005801
 80056bc:	08005801 	.word	0x08005801
 80056c0:	08005801 	.word	0x08005801
 80056c4:	08005801 	.word	0x08005801
 80056c8:	08005801 	.word	0x08005801
 80056cc:	08005801 	.word	0x08005801
 80056d0:	08005801 	.word	0x08005801
 80056d4:	08005801 	.word	0x08005801
 80056d8:	08005731 	.word	0x08005731
 80056dc:	08005757 	.word	0x08005757
 80056e0:	08005801 	.word	0x08005801
 80056e4:	08005801 	.word	0x08005801
 80056e8:	08005801 	.word	0x08005801
 80056ec:	08005801 	.word	0x08005801
 80056f0:	08005801 	.word	0x08005801
 80056f4:	08005801 	.word	0x08005801
 80056f8:	08005801 	.word	0x08005801
 80056fc:	08005801 	.word	0x08005801
 8005700:	08005801 	.word	0x08005801
 8005704:	08005801 	.word	0x08005801
 8005708:	08005801 	.word	0x08005801
 800570c:	080057cd 	.word	0x080057cd
 8005710:	08005801 	.word	0x08005801
 8005714:	08005801 	.word	0x08005801
 8005718:	08005801 	.word	0x08005801
 800571c:	08005801 	.word	0x08005801
 8005720:	0800577d 	.word	0x0800577d
 8005724:	08005801 	.word	0x08005801
 8005728:	08005801 	.word	0x08005801
 800572c:	080057a3 	.word	0x080057a3
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	1d19      	adds	r1, r3, #4
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	6011      	str	r1, [r2, #0]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 800573e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005740:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8005744:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005748:	f107 0314 	add.w	r3, r7, #20
 800574c:	4611      	mov	r1, r2
 800574e:	4618      	mov	r0, r3
 8005750:	f7ff fd1c 	bl	800518c <_StoreChar>
        break;
 8005754:	e055      	b.n	8005802 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	1d19      	adds	r1, r3, #4
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	6011      	str	r1, [r2, #0]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005764:	f107 0014 	add.w	r0, r7, #20
 8005768:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800576a:	9301      	str	r3, [sp, #4]
 800576c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800576e:	9300      	str	r3, [sp, #0]
 8005770:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005772:	220a      	movs	r2, #10
 8005774:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005776:	f7ff fe1b 	bl	80053b0 <_PrintInt>
        break;
 800577a:	e042      	b.n	8005802 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	1d19      	adds	r1, r3, #4
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	6011      	str	r1, [r2, #0]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 800578a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800578c:	f107 0014 	add.w	r0, r7, #20
 8005790:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005792:	9301      	str	r3, [sp, #4]
 8005794:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005796:	9300      	str	r3, [sp, #0]
 8005798:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800579a:	220a      	movs	r2, #10
 800579c:	f7ff fd72 	bl	8005284 <_PrintUnsigned>
        break;
 80057a0:	e02f      	b.n	8005802 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	1d19      	adds	r1, r3, #4
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	6011      	str	r1, [r2, #0]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80057b0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80057b2:	f107 0014 	add.w	r0, r7, #20
 80057b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057b8:	9301      	str	r3, [sp, #4]
 80057ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057bc:	9300      	str	r3, [sp, #0]
 80057be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057c0:	2210      	movs	r2, #16
 80057c2:	f7ff fd5f 	bl	8005284 <_PrintUnsigned>
        break;
 80057c6:	e01c      	b.n	8005802 <_VPrintTarget+0x332>
 80057c8:	2001425c 	.word	0x2001425c
      case 'p':
        v = va_arg(*pParamList, int);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	1d19      	adds	r1, r3, #4
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	6011      	str	r1, [r2, #0]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 80057da:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80057dc:	f107 0014 	add.w	r0, r7, #20
 80057e0:	2300      	movs	r3, #0
 80057e2:	9301      	str	r3, [sp, #4]
 80057e4:	2308      	movs	r3, #8
 80057e6:	9300      	str	r3, [sp, #0]
 80057e8:	2308      	movs	r3, #8
 80057ea:	2210      	movs	r2, #16
 80057ec:	f7ff fd4a 	bl	8005284 <_PrintUnsigned>
        break;
 80057f0:	e007      	b.n	8005802 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 80057f2:	f107 0314 	add.w	r3, r7, #20
 80057f6:	2125      	movs	r1, #37	; 0x25
 80057f8:	4618      	mov	r0, r3
 80057fa:	f7ff fcc7 	bl	800518c <_StoreChar>
        break;
 80057fe:	e000      	b.n	8005802 <_VPrintTarget+0x332>
      default:
        break;
 8005800:	bf00      	nop
      }
      sFormat++;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	3301      	adds	r3, #1
 8005806:	60fb      	str	r3, [r7, #12]
 8005808:	e007      	b.n	800581a <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 800580a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800580e:	f107 0314 	add.w	r3, r7, #20
 8005812:	4611      	mov	r1, r2
 8005814:	4618      	mov	r0, r3
 8005816:	f7ff fcb9 	bl	800518c <_StoreChar>
    }
  } while (*sFormat);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	f47f ae72 	bne.w	8005508 <_VPrintTarget+0x38>
 8005824:	e000      	b.n	8005828 <_VPrintTarget+0x358>
      break;
 8005826:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582a:	2b00      	cmp	r3, #0
 800582c:	d041      	beq.n	80058b2 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 800582e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	b2d2      	uxtb	r2, r2
 8005834:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	643b      	str	r3, [r7, #64]	; 0x40
 800583a:	6a3b      	ldr	r3, [r7, #32]
 800583c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800583e:	e00b      	b.n	8005858 <_VPrintTarget+0x388>
 8005840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005842:	b2da      	uxtb	r2, r3
 8005844:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005846:	1c59      	adds	r1, r3, #1
 8005848:	6439      	str	r1, [r7, #64]	; 0x40
 800584a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800584e:	b2d2      	uxtb	r2, r2
 8005850:	701a      	strb	r2, [r3, #0]
 8005852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005854:	09db      	lsrs	r3, r3, #7
 8005856:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800585a:	2b7f      	cmp	r3, #127	; 0x7f
 800585c:	d8f0      	bhi.n	8005840 <_VPrintTarget+0x370>
 800585e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005860:	1c5a      	adds	r2, r3, #1
 8005862:	643a      	str	r2, [r7, #64]	; 0x40
 8005864:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005866:	b2d2      	uxtb	r2, r2
 8005868:	701a      	strb	r2, [r3, #0]
 800586a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800586c:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	63bb      	str	r3, [r7, #56]	; 0x38
 8005872:	2300      	movs	r3, #0
 8005874:	637b      	str	r3, [r7, #52]	; 0x34
 8005876:	e00b      	b.n	8005890 <_VPrintTarget+0x3c0>
 8005878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800587a:	b2da      	uxtb	r2, r3
 800587c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800587e:	1c59      	adds	r1, r3, #1
 8005880:	63b9      	str	r1, [r7, #56]	; 0x38
 8005882:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005886:	b2d2      	uxtb	r2, r2
 8005888:	701a      	strb	r2, [r3, #0]
 800588a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800588c:	09db      	lsrs	r3, r3, #7
 800588e:	637b      	str	r3, [r7, #52]	; 0x34
 8005890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005892:	2b7f      	cmp	r3, #127	; 0x7f
 8005894:	d8f0      	bhi.n	8005878 <_VPrintTarget+0x3a8>
 8005896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005898:	1c5a      	adds	r2, r3, #1
 800589a:	63ba      	str	r2, [r7, #56]	; 0x38
 800589c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800589e:	b2d2      	uxtb	r2, r2
 80058a0:	701a      	strb	r2, [r3, #0]
 80058a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a4:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	69b9      	ldr	r1, [r7, #24]
 80058aa:	221a      	movs	r2, #26
 80058ac:	4618      	mov	r0, r3
 80058ae:	f7ff fafd 	bl	8004eac <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80058b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b4:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80058b8:	bf00      	nop
 80058ba:	3758      	adds	r7, #88	; 0x58
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}

080058c0 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b086      	sub	sp, #24
 80058c4:	af02      	add	r7, sp, #8
 80058c6:	60f8      	str	r0, [r7, #12]
 80058c8:	60b9      	str	r1, [r7, #8]
 80058ca:	607a      	str	r2, [r7, #4]
 80058cc:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80058ce:	2300      	movs	r3, #0
 80058d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80058d4:	4917      	ldr	r1, [pc, #92]	; (8005934 <SEGGER_SYSVIEW_Init+0x74>)
 80058d6:	4818      	ldr	r0, [pc, #96]	; (8005938 <SEGGER_SYSVIEW_Init+0x78>)
 80058d8:	f7ff f8d8 	bl	8004a8c <SEGGER_RTT_AllocUpBuffer>
 80058dc:	4603      	mov	r3, r0
 80058de:	b2da      	uxtb	r2, r3
 80058e0:	4b16      	ldr	r3, [pc, #88]	; (800593c <SEGGER_SYSVIEW_Init+0x7c>)
 80058e2:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80058e4:	4b15      	ldr	r3, [pc, #84]	; (800593c <SEGGER_SYSVIEW_Init+0x7c>)
 80058e6:	785a      	ldrb	r2, [r3, #1]
 80058e8:	4b14      	ldr	r3, [pc, #80]	; (800593c <SEGGER_SYSVIEW_Init+0x7c>)
 80058ea:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80058ec:	4b13      	ldr	r3, [pc, #76]	; (800593c <SEGGER_SYSVIEW_Init+0x7c>)
 80058ee:	7e1b      	ldrb	r3, [r3, #24]
 80058f0:	4618      	mov	r0, r3
 80058f2:	2300      	movs	r3, #0
 80058f4:	9300      	str	r3, [sp, #0]
 80058f6:	2308      	movs	r3, #8
 80058f8:	4a11      	ldr	r2, [pc, #68]	; (8005940 <SEGGER_SYSVIEW_Init+0x80>)
 80058fa:	490f      	ldr	r1, [pc, #60]	; (8005938 <SEGGER_SYSVIEW_Init+0x78>)
 80058fc:	f7ff f94a 	bl	8004b94 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005900:	4b0e      	ldr	r3, [pc, #56]	; (800593c <SEGGER_SYSVIEW_Init+0x7c>)
 8005902:	2200      	movs	r2, #0
 8005904:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005906:	4b0f      	ldr	r3, [pc, #60]	; (8005944 <SEGGER_SYSVIEW_Init+0x84>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a0c      	ldr	r2, [pc, #48]	; (800593c <SEGGER_SYSVIEW_Init+0x7c>)
 800590c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800590e:	4a0b      	ldr	r2, [pc, #44]	; (800593c <SEGGER_SYSVIEW_Init+0x7c>)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005914:	4a09      	ldr	r2, [pc, #36]	; (800593c <SEGGER_SYSVIEW_Init+0x7c>)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800591a:	4a08      	ldr	r2, [pc, #32]	; (800593c <SEGGER_SYSVIEW_Init+0x7c>)
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005920:	4a06      	ldr	r2, [pc, #24]	; (800593c <SEGGER_SYSVIEW_Init+0x7c>)
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005926:	4b05      	ldr	r3, [pc, #20]	; (800593c <SEGGER_SYSVIEW_Init+0x7c>)
 8005928:	2200      	movs	r2, #0
 800592a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800592c:	bf00      	nop
 800592e:	3710      	adds	r7, #16
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}
 8005934:	20013224 	.word	0x20013224
 8005938:	080069f4 	.word	0x080069f4
 800593c:	2001422c 	.word	0x2001422c
 8005940:	20014224 	.word	0x20014224
 8005944:	e0001004 	.word	0xe0001004

08005948 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005950:	4a04      	ldr	r2, [pc, #16]	; (8005964 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6113      	str	r3, [r2, #16]
}
 8005956:	bf00      	nop
 8005958:	370c      	adds	r7, #12
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr
 8005962:	bf00      	nop
 8005964:	2001422c 	.word	0x2001422c

08005968 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005970:	f3ef 8311 	mrs	r3, BASEPRI
 8005974:	f04f 0120 	mov.w	r1, #32
 8005978:	f381 8811 	msr	BASEPRI, r1
 800597c:	60fb      	str	r3, [r7, #12]
 800597e:	4808      	ldr	r0, [pc, #32]	; (80059a0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005980:	f7ff f9a4 	bl	8004ccc <_PreparePacket>
 8005984:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	68b9      	ldr	r1, [r7, #8]
 800598a:	68b8      	ldr	r0, [r7, #8]
 800598c:	f7ff fa8e 	bl	8004eac <_SendPacket>
  RECORD_END();
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f383 8811 	msr	BASEPRI, r3
}
 8005996:	bf00      	nop
 8005998:	3710      	adds	r7, #16
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	2001425c 	.word	0x2001425c

080059a4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b088      	sub	sp, #32
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80059ae:	f3ef 8311 	mrs	r3, BASEPRI
 80059b2:	f04f 0120 	mov.w	r1, #32
 80059b6:	f381 8811 	msr	BASEPRI, r1
 80059ba:	617b      	str	r3, [r7, #20]
 80059bc:	4816      	ldr	r0, [pc, #88]	; (8005a18 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80059be:	f7ff f985 	bl	8004ccc <_PreparePacket>
 80059c2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	61fb      	str	r3, [r7, #28]
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	61bb      	str	r3, [r7, #24]
 80059d0:	e00b      	b.n	80059ea <SEGGER_SYSVIEW_RecordU32+0x46>
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	b2da      	uxtb	r2, r3
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	1c59      	adds	r1, r3, #1
 80059da:	61f9      	str	r1, [r7, #28]
 80059dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059e0:	b2d2      	uxtb	r2, r2
 80059e2:	701a      	strb	r2, [r3, #0]
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	09db      	lsrs	r3, r3, #7
 80059e8:	61bb      	str	r3, [r7, #24]
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	2b7f      	cmp	r3, #127	; 0x7f
 80059ee:	d8f0      	bhi.n	80059d2 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	1c5a      	adds	r2, r3, #1
 80059f4:	61fa      	str	r2, [r7, #28]
 80059f6:	69ba      	ldr	r2, [r7, #24]
 80059f8:	b2d2      	uxtb	r2, r2
 80059fa:	701a      	strb	r2, [r3, #0]
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	68f9      	ldr	r1, [r7, #12]
 8005a04:	6938      	ldr	r0, [r7, #16]
 8005a06:	f7ff fa51 	bl	8004eac <_SendPacket>
  RECORD_END();
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	f383 8811 	msr	BASEPRI, r3
}
 8005a10:	bf00      	nop
 8005a12:	3720      	adds	r7, #32
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	2001425c 	.word	0x2001425c

08005a1c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b08c      	sub	sp, #48	; 0x30
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	60b9      	str	r1, [r7, #8]
 8005a26:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005a28:	f3ef 8311 	mrs	r3, BASEPRI
 8005a2c:	f04f 0120 	mov.w	r1, #32
 8005a30:	f381 8811 	msr	BASEPRI, r1
 8005a34:	61fb      	str	r3, [r7, #28]
 8005a36:	4825      	ldr	r0, [pc, #148]	; (8005acc <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005a38:	f7ff f948 	bl	8004ccc <_PreparePacket>
 8005a3c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a4a:	e00b      	b.n	8005a64 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a4e:	b2da      	uxtb	r2, r3
 8005a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a52:	1c59      	adds	r1, r3, #1
 8005a54:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005a56:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a5a:	b2d2      	uxtb	r2, r2
 8005a5c:	701a      	strb	r2, [r3, #0]
 8005a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a60:	09db      	lsrs	r3, r3, #7
 8005a62:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a66:	2b7f      	cmp	r3, #127	; 0x7f
 8005a68:	d8f0      	bhi.n	8005a4c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a6c:	1c5a      	adds	r2, r3, #1
 8005a6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a72:	b2d2      	uxtb	r2, r2
 8005a74:	701a      	strb	r2, [r3, #0]
 8005a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a78:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	627b      	str	r3, [r7, #36]	; 0x24
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	623b      	str	r3, [r7, #32]
 8005a82:	e00b      	b.n	8005a9c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005a84:	6a3b      	ldr	r3, [r7, #32]
 8005a86:	b2da      	uxtb	r2, r3
 8005a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8a:	1c59      	adds	r1, r3, #1
 8005a8c:	6279      	str	r1, [r7, #36]	; 0x24
 8005a8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a92:	b2d2      	uxtb	r2, r2
 8005a94:	701a      	strb	r2, [r3, #0]
 8005a96:	6a3b      	ldr	r3, [r7, #32]
 8005a98:	09db      	lsrs	r3, r3, #7
 8005a9a:	623b      	str	r3, [r7, #32]
 8005a9c:	6a3b      	ldr	r3, [r7, #32]
 8005a9e:	2b7f      	cmp	r3, #127	; 0x7f
 8005aa0:	d8f0      	bhi.n	8005a84 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa4:	1c5a      	adds	r2, r3, #1
 8005aa6:	627a      	str	r2, [r7, #36]	; 0x24
 8005aa8:	6a3a      	ldr	r2, [r7, #32]
 8005aaa:	b2d2      	uxtb	r2, r2
 8005aac:	701a      	strb	r2, [r3, #0]
 8005aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab0:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	6979      	ldr	r1, [r7, #20]
 8005ab6:	69b8      	ldr	r0, [r7, #24]
 8005ab8:	f7ff f9f8 	bl	8004eac <_SendPacket>
  RECORD_END();
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	f383 8811 	msr	BASEPRI, r3
}
 8005ac2:	bf00      	nop
 8005ac4:	3730      	adds	r7, #48	; 0x30
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	2001425c 	.word	0x2001425c

08005ad0 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b090      	sub	sp, #64	; 0x40
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	607a      	str	r2, [r7, #4]
 8005adc:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005ade:	f3ef 8311 	mrs	r3, BASEPRI
 8005ae2:	f04f 0120 	mov.w	r1, #32
 8005ae6:	f381 8811 	msr	BASEPRI, r1
 8005aea:	61fb      	str	r3, [r7, #28]
 8005aec:	4840      	ldr	r0, [pc, #256]	; (8005bf0 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005aee:	f7ff f8ed 	bl	8004ccc <_PreparePacket>
 8005af2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b00:	e00b      	b.n	8005b1a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8005b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b04:	b2da      	uxtb	r2, r3
 8005b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b08:	1c59      	adds	r1, r3, #1
 8005b0a:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005b0c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b10:	b2d2      	uxtb	r2, r2
 8005b12:	701a      	strb	r2, [r3, #0]
 8005b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b16:	09db      	lsrs	r3, r3, #7
 8005b18:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b1c:	2b7f      	cmp	r3, #127	; 0x7f
 8005b1e:	d8f0      	bhi.n	8005b02 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005b20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b22:	1c5a      	adds	r2, r3, #1
 8005b24:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005b26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b28:	b2d2      	uxtb	r2, r2
 8005b2a:	701a      	strb	r2, [r3, #0]
 8005b2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b2e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	637b      	str	r3, [r7, #52]	; 0x34
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	633b      	str	r3, [r7, #48]	; 0x30
 8005b38:	e00b      	b.n	8005b52 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8005b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b3c:	b2da      	uxtb	r2, r3
 8005b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b40:	1c59      	adds	r1, r3, #1
 8005b42:	6379      	str	r1, [r7, #52]	; 0x34
 8005b44:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b48:	b2d2      	uxtb	r2, r2
 8005b4a:	701a      	strb	r2, [r3, #0]
 8005b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4e:	09db      	lsrs	r3, r3, #7
 8005b50:	633b      	str	r3, [r7, #48]	; 0x30
 8005b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b54:	2b7f      	cmp	r3, #127	; 0x7f
 8005b56:	d8f0      	bhi.n	8005b3a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b5a:	1c5a      	adds	r2, r3, #1
 8005b5c:	637a      	str	r2, [r7, #52]	; 0x34
 8005b5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b60:	b2d2      	uxtb	r2, r2
 8005b62:	701a      	strb	r2, [r3, #0]
 8005b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b66:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b70:	e00b      	b.n	8005b8a <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b74:	b2da      	uxtb	r2, r3
 8005b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b78:	1c59      	adds	r1, r3, #1
 8005b7a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005b7c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b80:	b2d2      	uxtb	r2, r2
 8005b82:	701a      	strb	r2, [r3, #0]
 8005b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b86:	09db      	lsrs	r3, r3, #7
 8005b88:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b8c:	2b7f      	cmp	r3, #127	; 0x7f
 8005b8e:	d8f0      	bhi.n	8005b72 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b92:	1c5a      	adds	r2, r3, #1
 8005b94:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b98:	b2d2      	uxtb	r2, r2
 8005b9a:	701a      	strb	r2, [r3, #0]
 8005b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b9e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ba4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ba6:	623b      	str	r3, [r7, #32]
 8005ba8:	e00b      	b.n	8005bc2 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005baa:	6a3b      	ldr	r3, [r7, #32]
 8005bac:	b2da      	uxtb	r2, r3
 8005bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb0:	1c59      	adds	r1, r3, #1
 8005bb2:	6279      	str	r1, [r7, #36]	; 0x24
 8005bb4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bb8:	b2d2      	uxtb	r2, r2
 8005bba:	701a      	strb	r2, [r3, #0]
 8005bbc:	6a3b      	ldr	r3, [r7, #32]
 8005bbe:	09db      	lsrs	r3, r3, #7
 8005bc0:	623b      	str	r3, [r7, #32]
 8005bc2:	6a3b      	ldr	r3, [r7, #32]
 8005bc4:	2b7f      	cmp	r3, #127	; 0x7f
 8005bc6:	d8f0      	bhi.n	8005baa <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bca:	1c5a      	adds	r2, r3, #1
 8005bcc:	627a      	str	r2, [r7, #36]	; 0x24
 8005bce:	6a3a      	ldr	r2, [r7, #32]
 8005bd0:	b2d2      	uxtb	r2, r2
 8005bd2:	701a      	strb	r2, [r3, #0]
 8005bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	6979      	ldr	r1, [r7, #20]
 8005bdc:	69b8      	ldr	r0, [r7, #24]
 8005bde:	f7ff f965 	bl	8004eac <_SendPacket>
  RECORD_END();
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	f383 8811 	msr	BASEPRI, r3
}
 8005be8:	bf00      	nop
 8005bea:	3740      	adds	r7, #64	; 0x40
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}
 8005bf0:	2001425c 	.word	0x2001425c

08005bf4 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b08c      	sub	sp, #48	; 0x30
 8005bf8:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005bfa:	4b59      	ldr	r3, [pc, #356]	; (8005d60 <SEGGER_SYSVIEW_Start+0x16c>)
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005c00:	f3ef 8311 	mrs	r3, BASEPRI
 8005c04:	f04f 0120 	mov.w	r1, #32
 8005c08:	f381 8811 	msr	BASEPRI, r1
 8005c0c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005c0e:	4b54      	ldr	r3, [pc, #336]	; (8005d60 <SEGGER_SYSVIEW_Start+0x16c>)
 8005c10:	785b      	ldrb	r3, [r3, #1]
 8005c12:	220a      	movs	r2, #10
 8005c14:	4953      	ldr	r1, [pc, #332]	; (8005d64 <SEGGER_SYSVIEW_Start+0x170>)
 8005c16:	4618      	mov	r0, r3
 8005c18:	f7fa fada 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8005c22:	f7fe fc05 	bl	8004430 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005c26:	200a      	movs	r0, #10
 8005c28:	f7ff fe9e 	bl	8005968 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005c2c:	f3ef 8311 	mrs	r3, BASEPRI
 8005c30:	f04f 0120 	mov.w	r1, #32
 8005c34:	f381 8811 	msr	BASEPRI, r1
 8005c38:	60bb      	str	r3, [r7, #8]
 8005c3a:	484b      	ldr	r0, [pc, #300]	; (8005d68 <SEGGER_SYSVIEW_Start+0x174>)
 8005c3c:	f7ff f846 	bl	8004ccc <_PreparePacket>
 8005c40:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c4a:	4b45      	ldr	r3, [pc, #276]	; (8005d60 <SEGGER_SYSVIEW_Start+0x16c>)
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c50:	e00b      	b.n	8005c6a <SEGGER_SYSVIEW_Start+0x76>
 8005c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c54:	b2da      	uxtb	r2, r3
 8005c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c58:	1c59      	adds	r1, r3, #1
 8005c5a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005c5c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c60:	b2d2      	uxtb	r2, r2
 8005c62:	701a      	strb	r2, [r3, #0]
 8005c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c66:	09db      	lsrs	r3, r3, #7
 8005c68:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c6c:	2b7f      	cmp	r3, #127	; 0x7f
 8005c6e:	d8f0      	bhi.n	8005c52 <SEGGER_SYSVIEW_Start+0x5e>
 8005c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c72:	1c5a      	adds	r2, r3, #1
 8005c74:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c78:	b2d2      	uxtb	r2, r2
 8005c7a:	701a      	strb	r2, [r3, #0]
 8005c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c7e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	627b      	str	r3, [r7, #36]	; 0x24
 8005c84:	4b36      	ldr	r3, [pc, #216]	; (8005d60 <SEGGER_SYSVIEW_Start+0x16c>)
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	623b      	str	r3, [r7, #32]
 8005c8a:	e00b      	b.n	8005ca4 <SEGGER_SYSVIEW_Start+0xb0>
 8005c8c:	6a3b      	ldr	r3, [r7, #32]
 8005c8e:	b2da      	uxtb	r2, r3
 8005c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c92:	1c59      	adds	r1, r3, #1
 8005c94:	6279      	str	r1, [r7, #36]	; 0x24
 8005c96:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c9a:	b2d2      	uxtb	r2, r2
 8005c9c:	701a      	strb	r2, [r3, #0]
 8005c9e:	6a3b      	ldr	r3, [r7, #32]
 8005ca0:	09db      	lsrs	r3, r3, #7
 8005ca2:	623b      	str	r3, [r7, #32]
 8005ca4:	6a3b      	ldr	r3, [r7, #32]
 8005ca6:	2b7f      	cmp	r3, #127	; 0x7f
 8005ca8:	d8f0      	bhi.n	8005c8c <SEGGER_SYSVIEW_Start+0x98>
 8005caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cac:	1c5a      	adds	r2, r3, #1
 8005cae:	627a      	str	r2, [r7, #36]	; 0x24
 8005cb0:	6a3a      	ldr	r2, [r7, #32]
 8005cb2:	b2d2      	uxtb	r2, r2
 8005cb4:	701a      	strb	r2, [r3, #0]
 8005cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	61fb      	str	r3, [r7, #28]
 8005cbe:	4b28      	ldr	r3, [pc, #160]	; (8005d60 <SEGGER_SYSVIEW_Start+0x16c>)
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	61bb      	str	r3, [r7, #24]
 8005cc4:	e00b      	b.n	8005cde <SEGGER_SYSVIEW_Start+0xea>
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	b2da      	uxtb	r2, r3
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	1c59      	adds	r1, r3, #1
 8005cce:	61f9      	str	r1, [r7, #28]
 8005cd0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cd4:	b2d2      	uxtb	r2, r2
 8005cd6:	701a      	strb	r2, [r3, #0]
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	09db      	lsrs	r3, r3, #7
 8005cdc:	61bb      	str	r3, [r7, #24]
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	2b7f      	cmp	r3, #127	; 0x7f
 8005ce2:	d8f0      	bhi.n	8005cc6 <SEGGER_SYSVIEW_Start+0xd2>
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	1c5a      	adds	r2, r3, #1
 8005ce8:	61fa      	str	r2, [r7, #28]
 8005cea:	69ba      	ldr	r2, [r7, #24]
 8005cec:	b2d2      	uxtb	r2, r2
 8005cee:	701a      	strb	r2, [r3, #0]
 8005cf0:	69fb      	ldr	r3, [r7, #28]
 8005cf2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	617b      	str	r3, [r7, #20]
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	613b      	str	r3, [r7, #16]
 8005cfc:	e00b      	b.n	8005d16 <SEGGER_SYSVIEW_Start+0x122>
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	b2da      	uxtb	r2, r3
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	1c59      	adds	r1, r3, #1
 8005d06:	6179      	str	r1, [r7, #20]
 8005d08:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d0c:	b2d2      	uxtb	r2, r2
 8005d0e:	701a      	strb	r2, [r3, #0]
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	09db      	lsrs	r3, r3, #7
 8005d14:	613b      	str	r3, [r7, #16]
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	2b7f      	cmp	r3, #127	; 0x7f
 8005d1a:	d8f0      	bhi.n	8005cfe <SEGGER_SYSVIEW_Start+0x10a>
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	1c5a      	adds	r2, r3, #1
 8005d20:	617a      	str	r2, [r7, #20]
 8005d22:	693a      	ldr	r2, [r7, #16]
 8005d24:	b2d2      	uxtb	r2, r2
 8005d26:	701a      	strb	r2, [r3, #0]
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005d2c:	2218      	movs	r2, #24
 8005d2e:	6839      	ldr	r1, [r7, #0]
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f7ff f8bb 	bl	8004eac <_SendPacket>
      RECORD_END();
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005d3c:	4b08      	ldr	r3, [pc, #32]	; (8005d60 <SEGGER_SYSVIEW_Start+0x16c>)
 8005d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d002      	beq.n	8005d4a <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005d44:	4b06      	ldr	r3, [pc, #24]	; (8005d60 <SEGGER_SYSVIEW_Start+0x16c>)
 8005d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d48:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005d4a:	f000 f9eb 	bl	8006124 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005d4e:	f000 f9b1 	bl	80060b4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005d52:	f000 fc83 	bl	800665c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005d56:	bf00      	nop
 8005d58:	3730      	adds	r7, #48	; 0x30
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	2001422c 	.word	0x2001422c
 8005d64:	08006a34 	.word	0x08006a34
 8005d68:	2001425c 	.word	0x2001425c

08005d6c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b082      	sub	sp, #8
 8005d70:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005d72:	f3ef 8311 	mrs	r3, BASEPRI
 8005d76:	f04f 0120 	mov.w	r1, #32
 8005d7a:	f381 8811 	msr	BASEPRI, r1
 8005d7e:	607b      	str	r3, [r7, #4]
 8005d80:	480b      	ldr	r0, [pc, #44]	; (8005db0 <SEGGER_SYSVIEW_Stop+0x44>)
 8005d82:	f7fe ffa3 	bl	8004ccc <_PreparePacket>
 8005d86:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005d88:	4b0a      	ldr	r3, [pc, #40]	; (8005db4 <SEGGER_SYSVIEW_Stop+0x48>)
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d007      	beq.n	8005da0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005d90:	220b      	movs	r2, #11
 8005d92:	6839      	ldr	r1, [r7, #0]
 8005d94:	6838      	ldr	r0, [r7, #0]
 8005d96:	f7ff f889 	bl	8004eac <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005d9a:	4b06      	ldr	r3, [pc, #24]	; (8005db4 <SEGGER_SYSVIEW_Stop+0x48>)
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f383 8811 	msr	BASEPRI, r3
}
 8005da6:	bf00      	nop
 8005da8:	3708      	adds	r7, #8
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	bf00      	nop
 8005db0:	2001425c 	.word	0x2001425c
 8005db4:	2001422c 	.word	0x2001422c

08005db8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b08c      	sub	sp, #48	; 0x30
 8005dbc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005dbe:	f3ef 8311 	mrs	r3, BASEPRI
 8005dc2:	f04f 0120 	mov.w	r1, #32
 8005dc6:	f381 8811 	msr	BASEPRI, r1
 8005dca:	60fb      	str	r3, [r7, #12]
 8005dcc:	4845      	ldr	r0, [pc, #276]	; (8005ee4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005dce:	f7fe ff7d 	bl	8004ccc <_PreparePacket>
 8005dd2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ddc:	4b42      	ldr	r3, [pc, #264]	; (8005ee8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005de2:	e00b      	b.n	8005dfc <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de6:	b2da      	uxtb	r2, r3
 8005de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dea:	1c59      	adds	r1, r3, #1
 8005dec:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005dee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005df2:	b2d2      	uxtb	r2, r2
 8005df4:	701a      	strb	r2, [r3, #0]
 8005df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df8:	09db      	lsrs	r3, r3, #7
 8005dfa:	62bb      	str	r3, [r7, #40]	; 0x28
 8005dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dfe:	2b7f      	cmp	r3, #127	; 0x7f
 8005e00:	d8f0      	bhi.n	8005de4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e04:	1c5a      	adds	r2, r3, #1
 8005e06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e0a:	b2d2      	uxtb	r2, r2
 8005e0c:	701a      	strb	r2, [r3, #0]
 8005e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e10:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	627b      	str	r3, [r7, #36]	; 0x24
 8005e16:	4b34      	ldr	r3, [pc, #208]	; (8005ee8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	623b      	str	r3, [r7, #32]
 8005e1c:	e00b      	b.n	8005e36 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005e1e:	6a3b      	ldr	r3, [r7, #32]
 8005e20:	b2da      	uxtb	r2, r3
 8005e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e24:	1c59      	adds	r1, r3, #1
 8005e26:	6279      	str	r1, [r7, #36]	; 0x24
 8005e28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e2c:	b2d2      	uxtb	r2, r2
 8005e2e:	701a      	strb	r2, [r3, #0]
 8005e30:	6a3b      	ldr	r3, [r7, #32]
 8005e32:	09db      	lsrs	r3, r3, #7
 8005e34:	623b      	str	r3, [r7, #32]
 8005e36:	6a3b      	ldr	r3, [r7, #32]
 8005e38:	2b7f      	cmp	r3, #127	; 0x7f
 8005e3a:	d8f0      	bhi.n	8005e1e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3e:	1c5a      	adds	r2, r3, #1
 8005e40:	627a      	str	r2, [r7, #36]	; 0x24
 8005e42:	6a3a      	ldr	r2, [r7, #32]
 8005e44:	b2d2      	uxtb	r2, r2
 8005e46:	701a      	strb	r2, [r3, #0]
 8005e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	61fb      	str	r3, [r7, #28]
 8005e50:	4b25      	ldr	r3, [pc, #148]	; (8005ee8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005e52:	691b      	ldr	r3, [r3, #16]
 8005e54:	61bb      	str	r3, [r7, #24]
 8005e56:	e00b      	b.n	8005e70 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	b2da      	uxtb	r2, r3
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	1c59      	adds	r1, r3, #1
 8005e60:	61f9      	str	r1, [r7, #28]
 8005e62:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e66:	b2d2      	uxtb	r2, r2
 8005e68:	701a      	strb	r2, [r3, #0]
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	09db      	lsrs	r3, r3, #7
 8005e6e:	61bb      	str	r3, [r7, #24]
 8005e70:	69bb      	ldr	r3, [r7, #24]
 8005e72:	2b7f      	cmp	r3, #127	; 0x7f
 8005e74:	d8f0      	bhi.n	8005e58 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	1c5a      	adds	r2, r3, #1
 8005e7a:	61fa      	str	r2, [r7, #28]
 8005e7c:	69ba      	ldr	r2, [r7, #24]
 8005e7e:	b2d2      	uxtb	r2, r2
 8005e80:	701a      	strb	r2, [r3, #0]
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	617b      	str	r3, [r7, #20]
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	613b      	str	r3, [r7, #16]
 8005e8e:	e00b      	b.n	8005ea8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	b2da      	uxtb	r2, r3
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	1c59      	adds	r1, r3, #1
 8005e98:	6179      	str	r1, [r7, #20]
 8005e9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e9e:	b2d2      	uxtb	r2, r2
 8005ea0:	701a      	strb	r2, [r3, #0]
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	09db      	lsrs	r3, r3, #7
 8005ea6:	613b      	str	r3, [r7, #16]
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	2b7f      	cmp	r3, #127	; 0x7f
 8005eac:	d8f0      	bhi.n	8005e90 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	1c5a      	adds	r2, r3, #1
 8005eb2:	617a      	str	r2, [r7, #20]
 8005eb4:	693a      	ldr	r2, [r7, #16]
 8005eb6:	b2d2      	uxtb	r2, r2
 8005eb8:	701a      	strb	r2, [r3, #0]
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005ebe:	2218      	movs	r2, #24
 8005ec0:	6879      	ldr	r1, [r7, #4]
 8005ec2:	68b8      	ldr	r0, [r7, #8]
 8005ec4:	f7fe fff2 	bl	8004eac <_SendPacket>
  RECORD_END();
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005ece:	4b06      	ldr	r3, [pc, #24]	; (8005ee8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d002      	beq.n	8005edc <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005ed6:	4b04      	ldr	r3, [pc, #16]	; (8005ee8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eda:	4798      	blx	r3
  }
}
 8005edc:	bf00      	nop
 8005ede:	3730      	adds	r7, #48	; 0x30
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	2001425c 	.word	0x2001425c
 8005ee8:	2001422c 	.word	0x2001422c

08005eec <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b092      	sub	sp, #72	; 0x48
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005ef4:	f3ef 8311 	mrs	r3, BASEPRI
 8005ef8:	f04f 0120 	mov.w	r1, #32
 8005efc:	f381 8811 	msr	BASEPRI, r1
 8005f00:	617b      	str	r3, [r7, #20]
 8005f02:	486a      	ldr	r0, [pc, #424]	; (80060ac <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005f04:	f7fe fee2 	bl	8004ccc <_PreparePacket>
 8005f08:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	647b      	str	r3, [r7, #68]	; 0x44
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	4b66      	ldr	r3, [pc, #408]	; (80060b0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	1ad3      	subs	r3, r2, r3
 8005f1c:	643b      	str	r3, [r7, #64]	; 0x40
 8005f1e:	e00b      	b.n	8005f38 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005f20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f22:	b2da      	uxtb	r2, r3
 8005f24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f26:	1c59      	adds	r1, r3, #1
 8005f28:	6479      	str	r1, [r7, #68]	; 0x44
 8005f2a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f2e:	b2d2      	uxtb	r2, r2
 8005f30:	701a      	strb	r2, [r3, #0]
 8005f32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f34:	09db      	lsrs	r3, r3, #7
 8005f36:	643b      	str	r3, [r7, #64]	; 0x40
 8005f38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f3a:	2b7f      	cmp	r3, #127	; 0x7f
 8005f3c:	d8f0      	bhi.n	8005f20 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005f3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f40:	1c5a      	adds	r2, r3, #1
 8005f42:	647a      	str	r2, [r7, #68]	; 0x44
 8005f44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f46:	b2d2      	uxtb	r2, r2
 8005f48:	701a      	strb	r2, [r3, #0]
 8005f4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f4c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f58:	e00b      	b.n	8005f72 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f5c:	b2da      	uxtb	r2, r3
 8005f5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f60:	1c59      	adds	r1, r3, #1
 8005f62:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005f64:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f68:	b2d2      	uxtb	r2, r2
 8005f6a:	701a      	strb	r2, [r3, #0]
 8005f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f6e:	09db      	lsrs	r3, r3, #7
 8005f70:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f74:	2b7f      	cmp	r3, #127	; 0x7f
 8005f76:	d8f0      	bhi.n	8005f5a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005f78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f7a:	1c5a      	adds	r2, r3, #1
 8005f7c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005f7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f80:	b2d2      	uxtb	r2, r2
 8005f82:	701a      	strb	r2, [r3, #0]
 8005f84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f86:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	2220      	movs	r2, #32
 8005f8e:	4619      	mov	r1, r3
 8005f90:	68f8      	ldr	r0, [r7, #12]
 8005f92:	f7fe fe4b 	bl	8004c2c <_EncodeStr>
 8005f96:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005f98:	2209      	movs	r2, #9
 8005f9a:	68f9      	ldr	r1, [r7, #12]
 8005f9c:	6938      	ldr	r0, [r7, #16]
 8005f9e:	f7fe ff85 	bl	8004eac <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	637b      	str	r3, [r7, #52]	; 0x34
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	4b40      	ldr	r3, [pc, #256]	; (80060b0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005fb0:	691b      	ldr	r3, [r3, #16]
 8005fb2:	1ad3      	subs	r3, r2, r3
 8005fb4:	633b      	str	r3, [r7, #48]	; 0x30
 8005fb6:	e00b      	b.n	8005fd0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fba:	b2da      	uxtb	r2, r3
 8005fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fbe:	1c59      	adds	r1, r3, #1
 8005fc0:	6379      	str	r1, [r7, #52]	; 0x34
 8005fc2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fc6:	b2d2      	uxtb	r2, r2
 8005fc8:	701a      	strb	r2, [r3, #0]
 8005fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fcc:	09db      	lsrs	r3, r3, #7
 8005fce:	633b      	str	r3, [r7, #48]	; 0x30
 8005fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd2:	2b7f      	cmp	r3, #127	; 0x7f
 8005fd4:	d8f0      	bhi.n	8005fb8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fd8:	1c5a      	adds	r2, r3, #1
 8005fda:	637a      	str	r2, [r7, #52]	; 0x34
 8005fdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fde:	b2d2      	uxtb	r2, r2
 8005fe0:	701a      	strb	r2, [r3, #0]
 8005fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fe4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ff0:	e00b      	b.n	800600a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff4:	b2da      	uxtb	r2, r3
 8005ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff8:	1c59      	adds	r1, r3, #1
 8005ffa:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005ffc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006000:	b2d2      	uxtb	r2, r2
 8006002:	701a      	strb	r2, [r3, #0]
 8006004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006006:	09db      	lsrs	r3, r3, #7
 8006008:	62bb      	str	r3, [r7, #40]	; 0x28
 800600a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600c:	2b7f      	cmp	r3, #127	; 0x7f
 800600e:	d8f0      	bhi.n	8005ff2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006012:	1c5a      	adds	r2, r3, #1
 8006014:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006016:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006018:	b2d2      	uxtb	r2, r2
 800601a:	701a      	strb	r2, [r3, #0]
 800601c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800601e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	627b      	str	r3, [r7, #36]	; 0x24
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	691b      	ldr	r3, [r3, #16]
 8006028:	623b      	str	r3, [r7, #32]
 800602a:	e00b      	b.n	8006044 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800602c:	6a3b      	ldr	r3, [r7, #32]
 800602e:	b2da      	uxtb	r2, r3
 8006030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006032:	1c59      	adds	r1, r3, #1
 8006034:	6279      	str	r1, [r7, #36]	; 0x24
 8006036:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800603a:	b2d2      	uxtb	r2, r2
 800603c:	701a      	strb	r2, [r3, #0]
 800603e:	6a3b      	ldr	r3, [r7, #32]
 8006040:	09db      	lsrs	r3, r3, #7
 8006042:	623b      	str	r3, [r7, #32]
 8006044:	6a3b      	ldr	r3, [r7, #32]
 8006046:	2b7f      	cmp	r3, #127	; 0x7f
 8006048:	d8f0      	bhi.n	800602c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800604a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604c:	1c5a      	adds	r2, r3, #1
 800604e:	627a      	str	r2, [r7, #36]	; 0x24
 8006050:	6a3a      	ldr	r2, [r7, #32]
 8006052:	b2d2      	uxtb	r2, r2
 8006054:	701a      	strb	r2, [r3, #0]
 8006056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006058:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	61fb      	str	r3, [r7, #28]
 800605e:	2300      	movs	r3, #0
 8006060:	61bb      	str	r3, [r7, #24]
 8006062:	e00b      	b.n	800607c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	b2da      	uxtb	r2, r3
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	1c59      	adds	r1, r3, #1
 800606c:	61f9      	str	r1, [r7, #28]
 800606e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006072:	b2d2      	uxtb	r2, r2
 8006074:	701a      	strb	r2, [r3, #0]
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	09db      	lsrs	r3, r3, #7
 800607a:	61bb      	str	r3, [r7, #24]
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	2b7f      	cmp	r3, #127	; 0x7f
 8006080:	d8f0      	bhi.n	8006064 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	1c5a      	adds	r2, r3, #1
 8006086:	61fa      	str	r2, [r7, #28]
 8006088:	69ba      	ldr	r2, [r7, #24]
 800608a:	b2d2      	uxtb	r2, r2
 800608c:	701a      	strb	r2, [r3, #0]
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006092:	2215      	movs	r2, #21
 8006094:	68f9      	ldr	r1, [r7, #12]
 8006096:	6938      	ldr	r0, [r7, #16]
 8006098:	f7fe ff08 	bl	8004eac <_SendPacket>
  RECORD_END();
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	f383 8811 	msr	BASEPRI, r3
}
 80060a2:	bf00      	nop
 80060a4:	3748      	adds	r7, #72	; 0x48
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	2001425c 	.word	0x2001425c
 80060b0:	2001422c 	.word	0x2001422c

080060b4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80060b4:	b580      	push	{r7, lr}
 80060b6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80060b8:	4b07      	ldr	r3, [pc, #28]	; (80060d8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80060ba:	6a1b      	ldr	r3, [r3, #32]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d008      	beq.n	80060d2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80060c0:	4b05      	ldr	r3, [pc, #20]	; (80060d8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80060c2:	6a1b      	ldr	r3, [r3, #32]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d003      	beq.n	80060d2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80060ca:	4b03      	ldr	r3, [pc, #12]	; (80060d8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80060cc:	6a1b      	ldr	r3, [r3, #32]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	4798      	blx	r3
  }
}
 80060d2:	bf00      	nop
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	bf00      	nop
 80060d8:	2001422c 	.word	0x2001422c

080060dc <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80060dc:	b580      	push	{r7, lr}
 80060de:	b086      	sub	sp, #24
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80060e4:	f3ef 8311 	mrs	r3, BASEPRI
 80060e8:	f04f 0120 	mov.w	r1, #32
 80060ec:	f381 8811 	msr	BASEPRI, r1
 80060f0:	617b      	str	r3, [r7, #20]
 80060f2:	480b      	ldr	r0, [pc, #44]	; (8006120 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80060f4:	f7fe fdea 	bl	8004ccc <_PreparePacket>
 80060f8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80060fa:	2280      	movs	r2, #128	; 0x80
 80060fc:	6879      	ldr	r1, [r7, #4]
 80060fe:	6938      	ldr	r0, [r7, #16]
 8006100:	f7fe fd94 	bl	8004c2c <_EncodeStr>
 8006104:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006106:	220e      	movs	r2, #14
 8006108:	68f9      	ldr	r1, [r7, #12]
 800610a:	6938      	ldr	r0, [r7, #16]
 800610c:	f7fe fece 	bl	8004eac <_SendPacket>
  RECORD_END();
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	f383 8811 	msr	BASEPRI, r3
}
 8006116:	bf00      	nop
 8006118:	3718      	adds	r7, #24
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	2001425c 	.word	0x2001425c

08006124 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006124:	b590      	push	{r4, r7, lr}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800612a:	4b15      	ldr	r3, [pc, #84]	; (8006180 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800612c:	6a1b      	ldr	r3, [r3, #32]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d01a      	beq.n	8006168 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006132:	4b13      	ldr	r3, [pc, #76]	; (8006180 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006134:	6a1b      	ldr	r3, [r3, #32]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d015      	beq.n	8006168 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800613c:	4b10      	ldr	r3, [pc, #64]	; (8006180 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800613e:	6a1b      	ldr	r3, [r3, #32]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4798      	blx	r3
 8006144:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006148:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800614a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800614e:	f04f 0200 	mov.w	r2, #0
 8006152:	f04f 0300 	mov.w	r3, #0
 8006156:	000a      	movs	r2, r1
 8006158:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800615a:	4613      	mov	r3, r2
 800615c:	461a      	mov	r2, r3
 800615e:	4621      	mov	r1, r4
 8006160:	200d      	movs	r0, #13
 8006162:	f7ff fc5b 	bl	8005a1c <SEGGER_SYSVIEW_RecordU32x2>
 8006166:	e006      	b.n	8006176 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006168:	4b06      	ldr	r3, [pc, #24]	; (8006184 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4619      	mov	r1, r3
 800616e:	200c      	movs	r0, #12
 8006170:	f7ff fc18 	bl	80059a4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006174:	bf00      	nop
 8006176:	bf00      	nop
 8006178:	370c      	adds	r7, #12
 800617a:	46bd      	mov	sp, r7
 800617c:	bd90      	pop	{r4, r7, pc}
 800617e:	bf00      	nop
 8006180:	2001422c 	.word	0x2001422c
 8006184:	e0001004 	.word	0xe0001004

08006188 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006188:	b580      	push	{r7, lr}
 800618a:	b086      	sub	sp, #24
 800618c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800618e:	f3ef 8311 	mrs	r3, BASEPRI
 8006192:	f04f 0120 	mov.w	r1, #32
 8006196:	f381 8811 	msr	BASEPRI, r1
 800619a:	60fb      	str	r3, [r7, #12]
 800619c:	4819      	ldr	r0, [pc, #100]	; (8006204 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800619e:	f7fe fd95 	bl	8004ccc <_PreparePacket>
 80061a2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80061a8:	4b17      	ldr	r3, [pc, #92]	; (8006208 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061b0:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	617b      	str	r3, [r7, #20]
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	613b      	str	r3, [r7, #16]
 80061ba:	e00b      	b.n	80061d4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	b2da      	uxtb	r2, r3
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	1c59      	adds	r1, r3, #1
 80061c4:	6179      	str	r1, [r7, #20]
 80061c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061ca:	b2d2      	uxtb	r2, r2
 80061cc:	701a      	strb	r2, [r3, #0]
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	09db      	lsrs	r3, r3, #7
 80061d2:	613b      	str	r3, [r7, #16]
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	2b7f      	cmp	r3, #127	; 0x7f
 80061d8:	d8f0      	bhi.n	80061bc <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	1c5a      	adds	r2, r3, #1
 80061de:	617a      	str	r2, [r7, #20]
 80061e0:	693a      	ldr	r2, [r7, #16]
 80061e2:	b2d2      	uxtb	r2, r2
 80061e4:	701a      	strb	r2, [r3, #0]
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80061ea:	2202      	movs	r2, #2
 80061ec:	6879      	ldr	r1, [r7, #4]
 80061ee:	68b8      	ldr	r0, [r7, #8]
 80061f0:	f7fe fe5c 	bl	8004eac <_SendPacket>
  RECORD_END();
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f383 8811 	msr	BASEPRI, r3
}
 80061fa:	bf00      	nop
 80061fc:	3718      	adds	r7, #24
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	2001425c 	.word	0x2001425c
 8006208:	e000ed04 	.word	0xe000ed04

0800620c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800620c:	b580      	push	{r7, lr}
 800620e:	b082      	sub	sp, #8
 8006210:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006212:	f3ef 8311 	mrs	r3, BASEPRI
 8006216:	f04f 0120 	mov.w	r1, #32
 800621a:	f381 8811 	msr	BASEPRI, r1
 800621e:	607b      	str	r3, [r7, #4]
 8006220:	4807      	ldr	r0, [pc, #28]	; (8006240 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006222:	f7fe fd53 	bl	8004ccc <_PreparePacket>
 8006226:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006228:	2203      	movs	r2, #3
 800622a:	6839      	ldr	r1, [r7, #0]
 800622c:	6838      	ldr	r0, [r7, #0]
 800622e:	f7fe fe3d 	bl	8004eac <_SendPacket>
  RECORD_END();
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f383 8811 	msr	BASEPRI, r3
}
 8006238:	bf00      	nop
 800623a:	3708      	adds	r7, #8
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}
 8006240:	2001425c 	.word	0x2001425c

08006244 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006244:	b580      	push	{r7, lr}
 8006246:	b082      	sub	sp, #8
 8006248:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800624a:	f3ef 8311 	mrs	r3, BASEPRI
 800624e:	f04f 0120 	mov.w	r1, #32
 8006252:	f381 8811 	msr	BASEPRI, r1
 8006256:	607b      	str	r3, [r7, #4]
 8006258:	4807      	ldr	r0, [pc, #28]	; (8006278 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800625a:	f7fe fd37 	bl	8004ccc <_PreparePacket>
 800625e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006260:	2212      	movs	r2, #18
 8006262:	6839      	ldr	r1, [r7, #0]
 8006264:	6838      	ldr	r0, [r7, #0]
 8006266:	f7fe fe21 	bl	8004eac <_SendPacket>
  RECORD_END();
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f383 8811 	msr	BASEPRI, r3
}
 8006270:	bf00      	nop
 8006272:	3708      	adds	r7, #8
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}
 8006278:	2001425c 	.word	0x2001425c

0800627c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800627c:	b580      	push	{r7, lr}
 800627e:	b082      	sub	sp, #8
 8006280:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006282:	f3ef 8311 	mrs	r3, BASEPRI
 8006286:	f04f 0120 	mov.w	r1, #32
 800628a:	f381 8811 	msr	BASEPRI, r1
 800628e:	607b      	str	r3, [r7, #4]
 8006290:	4807      	ldr	r0, [pc, #28]	; (80062b0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006292:	f7fe fd1b 	bl	8004ccc <_PreparePacket>
 8006296:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006298:	2211      	movs	r2, #17
 800629a:	6839      	ldr	r1, [r7, #0]
 800629c:	6838      	ldr	r0, [r7, #0]
 800629e:	f7fe fe05 	bl	8004eac <_SendPacket>
  RECORD_END();
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f383 8811 	msr	BASEPRI, r3
}
 80062a8:	bf00      	nop
 80062aa:	3708      	adds	r7, #8
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}
 80062b0:	2001425c 	.word	0x2001425c

080062b4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b088      	sub	sp, #32
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80062bc:	f3ef 8311 	mrs	r3, BASEPRI
 80062c0:	f04f 0120 	mov.w	r1, #32
 80062c4:	f381 8811 	msr	BASEPRI, r1
 80062c8:	617b      	str	r3, [r7, #20]
 80062ca:	4819      	ldr	r0, [pc, #100]	; (8006330 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80062cc:	f7fe fcfe 	bl	8004ccc <_PreparePacket>
 80062d0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80062d6:	4b17      	ldr	r3, [pc, #92]	; (8006334 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	1ad3      	subs	r3, r2, r3
 80062de:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	61fb      	str	r3, [r7, #28]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	61bb      	str	r3, [r7, #24]
 80062e8:	e00b      	b.n	8006302 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	b2da      	uxtb	r2, r3
 80062ee:	69fb      	ldr	r3, [r7, #28]
 80062f0:	1c59      	adds	r1, r3, #1
 80062f2:	61f9      	str	r1, [r7, #28]
 80062f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062f8:	b2d2      	uxtb	r2, r2
 80062fa:	701a      	strb	r2, [r3, #0]
 80062fc:	69bb      	ldr	r3, [r7, #24]
 80062fe:	09db      	lsrs	r3, r3, #7
 8006300:	61bb      	str	r3, [r7, #24]
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	2b7f      	cmp	r3, #127	; 0x7f
 8006306:	d8f0      	bhi.n	80062ea <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	1c5a      	adds	r2, r3, #1
 800630c:	61fa      	str	r2, [r7, #28]
 800630e:	69ba      	ldr	r2, [r7, #24]
 8006310:	b2d2      	uxtb	r2, r2
 8006312:	701a      	strb	r2, [r3, #0]
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006318:	2208      	movs	r2, #8
 800631a:	68f9      	ldr	r1, [r7, #12]
 800631c:	6938      	ldr	r0, [r7, #16]
 800631e:	f7fe fdc5 	bl	8004eac <_SendPacket>
  RECORD_END();
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	f383 8811 	msr	BASEPRI, r3
}
 8006328:	bf00      	nop
 800632a:	3720      	adds	r7, #32
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}
 8006330:	2001425c 	.word	0x2001425c
 8006334:	2001422c 	.word	0x2001422c

08006338 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006338:	b580      	push	{r7, lr}
 800633a:	b088      	sub	sp, #32
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006340:	f3ef 8311 	mrs	r3, BASEPRI
 8006344:	f04f 0120 	mov.w	r1, #32
 8006348:	f381 8811 	msr	BASEPRI, r1
 800634c:	617b      	str	r3, [r7, #20]
 800634e:	4819      	ldr	r0, [pc, #100]	; (80063b4 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006350:	f7fe fcbc 	bl	8004ccc <_PreparePacket>
 8006354:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800635a:	4b17      	ldr	r3, [pc, #92]	; (80063b8 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	61fb      	str	r3, [r7, #28]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	61bb      	str	r3, [r7, #24]
 800636c:	e00b      	b.n	8006386 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800636e:	69bb      	ldr	r3, [r7, #24]
 8006370:	b2da      	uxtb	r2, r3
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	1c59      	adds	r1, r3, #1
 8006376:	61f9      	str	r1, [r7, #28]
 8006378:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800637c:	b2d2      	uxtb	r2, r2
 800637e:	701a      	strb	r2, [r3, #0]
 8006380:	69bb      	ldr	r3, [r7, #24]
 8006382:	09db      	lsrs	r3, r3, #7
 8006384:	61bb      	str	r3, [r7, #24]
 8006386:	69bb      	ldr	r3, [r7, #24]
 8006388:	2b7f      	cmp	r3, #127	; 0x7f
 800638a:	d8f0      	bhi.n	800636e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	1c5a      	adds	r2, r3, #1
 8006390:	61fa      	str	r2, [r7, #28]
 8006392:	69ba      	ldr	r2, [r7, #24]
 8006394:	b2d2      	uxtb	r2, r2
 8006396:	701a      	strb	r2, [r3, #0]
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800639c:	2204      	movs	r2, #4
 800639e:	68f9      	ldr	r1, [r7, #12]
 80063a0:	6938      	ldr	r0, [r7, #16]
 80063a2:	f7fe fd83 	bl	8004eac <_SendPacket>
  RECORD_END();
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	f383 8811 	msr	BASEPRI, r3
}
 80063ac:	bf00      	nop
 80063ae:	3720      	adds	r7, #32
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	2001425c 	.word	0x2001425c
 80063b8:	2001422c 	.word	0x2001422c

080063bc <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80063bc:	b580      	push	{r7, lr}
 80063be:	b088      	sub	sp, #32
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80063c4:	f3ef 8311 	mrs	r3, BASEPRI
 80063c8:	f04f 0120 	mov.w	r1, #32
 80063cc:	f381 8811 	msr	BASEPRI, r1
 80063d0:	617b      	str	r3, [r7, #20]
 80063d2:	4819      	ldr	r0, [pc, #100]	; (8006438 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80063d4:	f7fe fc7a 	bl	8004ccc <_PreparePacket>
 80063d8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80063de:	4b17      	ldr	r3, [pc, #92]	; (800643c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80063e0:	691b      	ldr	r3, [r3, #16]
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	61fb      	str	r3, [r7, #28]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	61bb      	str	r3, [r7, #24]
 80063f0:	e00b      	b.n	800640a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80063f2:	69bb      	ldr	r3, [r7, #24]
 80063f4:	b2da      	uxtb	r2, r3
 80063f6:	69fb      	ldr	r3, [r7, #28]
 80063f8:	1c59      	adds	r1, r3, #1
 80063fa:	61f9      	str	r1, [r7, #28]
 80063fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006400:	b2d2      	uxtb	r2, r2
 8006402:	701a      	strb	r2, [r3, #0]
 8006404:	69bb      	ldr	r3, [r7, #24]
 8006406:	09db      	lsrs	r3, r3, #7
 8006408:	61bb      	str	r3, [r7, #24]
 800640a:	69bb      	ldr	r3, [r7, #24]
 800640c:	2b7f      	cmp	r3, #127	; 0x7f
 800640e:	d8f0      	bhi.n	80063f2 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	1c5a      	adds	r2, r3, #1
 8006414:	61fa      	str	r2, [r7, #28]
 8006416:	69ba      	ldr	r2, [r7, #24]
 8006418:	b2d2      	uxtb	r2, r2
 800641a:	701a      	strb	r2, [r3, #0]
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006420:	2206      	movs	r2, #6
 8006422:	68f9      	ldr	r1, [r7, #12]
 8006424:	6938      	ldr	r0, [r7, #16]
 8006426:	f7fe fd41 	bl	8004eac <_SendPacket>
  RECORD_END();
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	f383 8811 	msr	BASEPRI, r3
}
 8006430:	bf00      	nop
 8006432:	3720      	adds	r7, #32
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}
 8006438:	2001425c 	.word	0x2001425c
 800643c:	2001422c 	.word	0x2001422c

08006440 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006440:	b580      	push	{r7, lr}
 8006442:	b08a      	sub	sp, #40	; 0x28
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800644a:	f3ef 8311 	mrs	r3, BASEPRI
 800644e:	f04f 0120 	mov.w	r1, #32
 8006452:	f381 8811 	msr	BASEPRI, r1
 8006456:	617b      	str	r3, [r7, #20]
 8006458:	4827      	ldr	r0, [pc, #156]	; (80064f8 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800645a:	f7fe fc37 	bl	8004ccc <_PreparePacket>
 800645e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006464:	4b25      	ldr	r3, [pc, #148]	; (80064fc <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006466:	691b      	ldr	r3, [r3, #16]
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	1ad3      	subs	r3, r2, r3
 800646c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	627b      	str	r3, [r7, #36]	; 0x24
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	623b      	str	r3, [r7, #32]
 8006476:	e00b      	b.n	8006490 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006478:	6a3b      	ldr	r3, [r7, #32]
 800647a:	b2da      	uxtb	r2, r3
 800647c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647e:	1c59      	adds	r1, r3, #1
 8006480:	6279      	str	r1, [r7, #36]	; 0x24
 8006482:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006486:	b2d2      	uxtb	r2, r2
 8006488:	701a      	strb	r2, [r3, #0]
 800648a:	6a3b      	ldr	r3, [r7, #32]
 800648c:	09db      	lsrs	r3, r3, #7
 800648e:	623b      	str	r3, [r7, #32]
 8006490:	6a3b      	ldr	r3, [r7, #32]
 8006492:	2b7f      	cmp	r3, #127	; 0x7f
 8006494:	d8f0      	bhi.n	8006478 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006498:	1c5a      	adds	r2, r3, #1
 800649a:	627a      	str	r2, [r7, #36]	; 0x24
 800649c:	6a3a      	ldr	r2, [r7, #32]
 800649e:	b2d2      	uxtb	r2, r2
 80064a0:	701a      	strb	r2, [r3, #0]
 80064a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	61fb      	str	r3, [r7, #28]
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	61bb      	str	r3, [r7, #24]
 80064ae:	e00b      	b.n	80064c8 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80064b0:	69bb      	ldr	r3, [r7, #24]
 80064b2:	b2da      	uxtb	r2, r3
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	1c59      	adds	r1, r3, #1
 80064b8:	61f9      	str	r1, [r7, #28]
 80064ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064be:	b2d2      	uxtb	r2, r2
 80064c0:	701a      	strb	r2, [r3, #0]
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	09db      	lsrs	r3, r3, #7
 80064c6:	61bb      	str	r3, [r7, #24]
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	2b7f      	cmp	r3, #127	; 0x7f
 80064cc:	d8f0      	bhi.n	80064b0 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	1c5a      	adds	r2, r3, #1
 80064d2:	61fa      	str	r2, [r7, #28]
 80064d4:	69ba      	ldr	r2, [r7, #24]
 80064d6:	b2d2      	uxtb	r2, r2
 80064d8:	701a      	strb	r2, [r3, #0]
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80064de:	2207      	movs	r2, #7
 80064e0:	68f9      	ldr	r1, [r7, #12]
 80064e2:	6938      	ldr	r0, [r7, #16]
 80064e4:	f7fe fce2 	bl	8004eac <_SendPacket>
  RECORD_END();
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	f383 8811 	msr	BASEPRI, r3
}
 80064ee:	bf00      	nop
 80064f0:	3728      	adds	r7, #40	; 0x28
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	2001425c 	.word	0x2001425c
 80064fc:	2001422c 	.word	0x2001422c

08006500 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006508:	4b04      	ldr	r3, [pc, #16]	; (800651c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	1ad3      	subs	r3, r2, r3
}
 8006510:	4618      	mov	r0, r3
 8006512:	370c      	adds	r7, #12
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr
 800651c:	2001422c 	.word	0x2001422c

08006520 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006520:	b580      	push	{r7, lr}
 8006522:	b08c      	sub	sp, #48	; 0x30
 8006524:	af00      	add	r7, sp, #0
 8006526:	4603      	mov	r3, r0
 8006528:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800652a:	4b3b      	ldr	r3, [pc, #236]	; (8006618 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d06d      	beq.n	800660e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006532:	4b39      	ldr	r3, [pc, #228]	; (8006618 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006538:	2300      	movs	r3, #0
 800653a:	62bb      	str	r3, [r7, #40]	; 0x28
 800653c:	e008      	b.n	8006550 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800653e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006540:	691b      	ldr	r3, [r3, #16]
 8006542:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006546:	2b00      	cmp	r3, #0
 8006548:	d007      	beq.n	800655a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800654a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800654c:	3301      	adds	r3, #1
 800654e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006550:	79fb      	ldrb	r3, [r7, #7]
 8006552:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006554:	429a      	cmp	r2, r3
 8006556:	d3f2      	bcc.n	800653e <SEGGER_SYSVIEW_SendModule+0x1e>
 8006558:	e000      	b.n	800655c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800655a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800655c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800655e:	2b00      	cmp	r3, #0
 8006560:	d055      	beq.n	800660e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006562:	f3ef 8311 	mrs	r3, BASEPRI
 8006566:	f04f 0120 	mov.w	r1, #32
 800656a:	f381 8811 	msr	BASEPRI, r1
 800656e:	617b      	str	r3, [r7, #20]
 8006570:	482a      	ldr	r0, [pc, #168]	; (800661c <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006572:	f7fe fbab 	bl	8004ccc <_PreparePacket>
 8006576:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	627b      	str	r3, [r7, #36]	; 0x24
 8006580:	79fb      	ldrb	r3, [r7, #7]
 8006582:	623b      	str	r3, [r7, #32]
 8006584:	e00b      	b.n	800659e <SEGGER_SYSVIEW_SendModule+0x7e>
 8006586:	6a3b      	ldr	r3, [r7, #32]
 8006588:	b2da      	uxtb	r2, r3
 800658a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658c:	1c59      	adds	r1, r3, #1
 800658e:	6279      	str	r1, [r7, #36]	; 0x24
 8006590:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006594:	b2d2      	uxtb	r2, r2
 8006596:	701a      	strb	r2, [r3, #0]
 8006598:	6a3b      	ldr	r3, [r7, #32]
 800659a:	09db      	lsrs	r3, r3, #7
 800659c:	623b      	str	r3, [r7, #32]
 800659e:	6a3b      	ldr	r3, [r7, #32]
 80065a0:	2b7f      	cmp	r3, #127	; 0x7f
 80065a2:	d8f0      	bhi.n	8006586 <SEGGER_SYSVIEW_SendModule+0x66>
 80065a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a6:	1c5a      	adds	r2, r3, #1
 80065a8:	627a      	str	r2, [r7, #36]	; 0x24
 80065aa:	6a3a      	ldr	r2, [r7, #32]
 80065ac:	b2d2      	uxtb	r2, r2
 80065ae:	701a      	strb	r2, [r3, #0]
 80065b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	61fb      	str	r3, [r7, #28]
 80065b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	61bb      	str	r3, [r7, #24]
 80065be:	e00b      	b.n	80065d8 <SEGGER_SYSVIEW_SendModule+0xb8>
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	b2da      	uxtb	r2, r3
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	1c59      	adds	r1, r3, #1
 80065c8:	61f9      	str	r1, [r7, #28]
 80065ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065ce:	b2d2      	uxtb	r2, r2
 80065d0:	701a      	strb	r2, [r3, #0]
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	09db      	lsrs	r3, r3, #7
 80065d6:	61bb      	str	r3, [r7, #24]
 80065d8:	69bb      	ldr	r3, [r7, #24]
 80065da:	2b7f      	cmp	r3, #127	; 0x7f
 80065dc:	d8f0      	bhi.n	80065c0 <SEGGER_SYSVIEW_SendModule+0xa0>
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	1c5a      	adds	r2, r3, #1
 80065e2:	61fa      	str	r2, [r7, #28]
 80065e4:	69ba      	ldr	r2, [r7, #24]
 80065e6:	b2d2      	uxtb	r2, r2
 80065e8:	701a      	strb	r2, [r3, #0]
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80065ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	2280      	movs	r2, #128	; 0x80
 80065f4:	4619      	mov	r1, r3
 80065f6:	68f8      	ldr	r0, [r7, #12]
 80065f8:	f7fe fb18 	bl	8004c2c <_EncodeStr>
 80065fc:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80065fe:	2216      	movs	r2, #22
 8006600:	68f9      	ldr	r1, [r7, #12]
 8006602:	6938      	ldr	r0, [r7, #16]
 8006604:	f7fe fc52 	bl	8004eac <_SendPacket>
      RECORD_END();
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800660e:	bf00      	nop
 8006610:	3730      	adds	r7, #48	; 0x30
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	20014254 	.word	0x20014254
 800661c:	2001425c 	.word	0x2001425c

08006620 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006620:	b580      	push	{r7, lr}
 8006622:	b082      	sub	sp, #8
 8006624:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006626:	4b0c      	ldr	r3, [pc, #48]	; (8006658 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00f      	beq.n	800664e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800662e:	4b0a      	ldr	r3, [pc, #40]	; (8006658 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d002      	beq.n	8006642 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d1f2      	bne.n	8006634 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800664e:	bf00      	nop
 8006650:	3708      	adds	r7, #8
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}
 8006656:	bf00      	nop
 8006658:	20014254 	.word	0x20014254

0800665c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800665c:	b580      	push	{r7, lr}
 800665e:	b086      	sub	sp, #24
 8006660:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006662:	f3ef 8311 	mrs	r3, BASEPRI
 8006666:	f04f 0120 	mov.w	r1, #32
 800666a:	f381 8811 	msr	BASEPRI, r1
 800666e:	60fb      	str	r3, [r7, #12]
 8006670:	4817      	ldr	r0, [pc, #92]	; (80066d0 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006672:	f7fe fb2b 	bl	8004ccc <_PreparePacket>
 8006676:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	617b      	str	r3, [r7, #20]
 8006680:	4b14      	ldr	r3, [pc, #80]	; (80066d4 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	613b      	str	r3, [r7, #16]
 8006686:	e00b      	b.n	80066a0 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	b2da      	uxtb	r2, r3
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	1c59      	adds	r1, r3, #1
 8006690:	6179      	str	r1, [r7, #20]
 8006692:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006696:	b2d2      	uxtb	r2, r2
 8006698:	701a      	strb	r2, [r3, #0]
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	09db      	lsrs	r3, r3, #7
 800669e:	613b      	str	r3, [r7, #16]
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	2b7f      	cmp	r3, #127	; 0x7f
 80066a4:	d8f0      	bhi.n	8006688 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	1c5a      	adds	r2, r3, #1
 80066aa:	617a      	str	r2, [r7, #20]
 80066ac:	693a      	ldr	r2, [r7, #16]
 80066ae:	b2d2      	uxtb	r2, r2
 80066b0:	701a      	strb	r2, [r3, #0]
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80066b6:	221b      	movs	r2, #27
 80066b8:	6879      	ldr	r1, [r7, #4]
 80066ba:	68b8      	ldr	r0, [r7, #8]
 80066bc:	f7fe fbf6 	bl	8004eac <_SendPacket>
  RECORD_END();
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f383 8811 	msr	BASEPRI, r3
}
 80066c6:	bf00      	nop
 80066c8:	3718      	adds	r7, #24
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	2001425c 	.word	0x2001425c
 80066d4:	20014258 	.word	0x20014258

080066d8 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80066d8:	b40f      	push	{r0, r1, r2, r3}
 80066da:	b580      	push	{r7, lr}
 80066dc:	b082      	sub	sp, #8
 80066de:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80066e0:	f107 0314 	add.w	r3, r7, #20
 80066e4:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80066e6:	1d3b      	adds	r3, r7, #4
 80066e8:	461a      	mov	r2, r3
 80066ea:	2100      	movs	r1, #0
 80066ec:	6938      	ldr	r0, [r7, #16]
 80066ee:	f7fe feef 	bl	80054d0 <_VPrintTarget>
  va_end(ParamList);
}
 80066f2:	bf00      	nop
 80066f4:	3708      	adds	r7, #8
 80066f6:	46bd      	mov	sp, r7
 80066f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80066fc:	b004      	add	sp, #16
 80066fe:	4770      	bx	lr

08006700 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006700:	b580      	push	{r7, lr}
 8006702:	b08a      	sub	sp, #40	; 0x28
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006708:	f3ef 8311 	mrs	r3, BASEPRI
 800670c:	f04f 0120 	mov.w	r1, #32
 8006710:	f381 8811 	msr	BASEPRI, r1
 8006714:	617b      	str	r3, [r7, #20]
 8006716:	4827      	ldr	r0, [pc, #156]	; (80067b4 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006718:	f7fe fad8 	bl	8004ccc <_PreparePacket>
 800671c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800671e:	2280      	movs	r2, #128	; 0x80
 8006720:	6879      	ldr	r1, [r7, #4]
 8006722:	6938      	ldr	r0, [r7, #16]
 8006724:	f7fe fa82 	bl	8004c2c <_EncodeStr>
 8006728:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	627b      	str	r3, [r7, #36]	; 0x24
 800672e:	2301      	movs	r3, #1
 8006730:	623b      	str	r3, [r7, #32]
 8006732:	e00b      	b.n	800674c <SEGGER_SYSVIEW_Warn+0x4c>
 8006734:	6a3b      	ldr	r3, [r7, #32]
 8006736:	b2da      	uxtb	r2, r3
 8006738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673a:	1c59      	adds	r1, r3, #1
 800673c:	6279      	str	r1, [r7, #36]	; 0x24
 800673e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006742:	b2d2      	uxtb	r2, r2
 8006744:	701a      	strb	r2, [r3, #0]
 8006746:	6a3b      	ldr	r3, [r7, #32]
 8006748:	09db      	lsrs	r3, r3, #7
 800674a:	623b      	str	r3, [r7, #32]
 800674c:	6a3b      	ldr	r3, [r7, #32]
 800674e:	2b7f      	cmp	r3, #127	; 0x7f
 8006750:	d8f0      	bhi.n	8006734 <SEGGER_SYSVIEW_Warn+0x34>
 8006752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006754:	1c5a      	adds	r2, r3, #1
 8006756:	627a      	str	r2, [r7, #36]	; 0x24
 8006758:	6a3a      	ldr	r2, [r7, #32]
 800675a:	b2d2      	uxtb	r2, r2
 800675c:	701a      	strb	r2, [r3, #0]
 800675e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006760:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	61fb      	str	r3, [r7, #28]
 8006766:	2300      	movs	r3, #0
 8006768:	61bb      	str	r3, [r7, #24]
 800676a:	e00b      	b.n	8006784 <SEGGER_SYSVIEW_Warn+0x84>
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	b2da      	uxtb	r2, r3
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	1c59      	adds	r1, r3, #1
 8006774:	61f9      	str	r1, [r7, #28]
 8006776:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800677a:	b2d2      	uxtb	r2, r2
 800677c:	701a      	strb	r2, [r3, #0]
 800677e:	69bb      	ldr	r3, [r7, #24]
 8006780:	09db      	lsrs	r3, r3, #7
 8006782:	61bb      	str	r3, [r7, #24]
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	2b7f      	cmp	r3, #127	; 0x7f
 8006788:	d8f0      	bhi.n	800676c <SEGGER_SYSVIEW_Warn+0x6c>
 800678a:	69fb      	ldr	r3, [r7, #28]
 800678c:	1c5a      	adds	r2, r3, #1
 800678e:	61fa      	str	r2, [r7, #28]
 8006790:	69ba      	ldr	r2, [r7, #24]
 8006792:	b2d2      	uxtb	r2, r2
 8006794:	701a      	strb	r2, [r3, #0]
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800679a:	221a      	movs	r2, #26
 800679c:	68f9      	ldr	r1, [r7, #12]
 800679e:	6938      	ldr	r0, [r7, #16]
 80067a0:	f7fe fb84 	bl	8004eac <_SendPacket>
  RECORD_END();
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	f383 8811 	msr	BASEPRI, r3
}
 80067aa:	bf00      	nop
 80067ac:	3728      	adds	r7, #40	; 0x28
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	bf00      	nop
 80067b4:	2001425c 	.word	0x2001425c

080067b8 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 80067b8:	b580      	push	{r7, lr}
 80067ba:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80067bc:	4b13      	ldr	r3, [pc, #76]	; (800680c <SEGGER_SYSVIEW_IsStarted+0x54>)
 80067be:	7e1b      	ldrb	r3, [r3, #24]
 80067c0:	4619      	mov	r1, r3
 80067c2:	4a13      	ldr	r2, [pc, #76]	; (8006810 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80067c4:	460b      	mov	r3, r1
 80067c6:	005b      	lsls	r3, r3, #1
 80067c8:	440b      	add	r3, r1
 80067ca:	00db      	lsls	r3, r3, #3
 80067cc:	4413      	add	r3, r2
 80067ce:	336c      	adds	r3, #108	; 0x6c
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	4b0e      	ldr	r3, [pc, #56]	; (800680c <SEGGER_SYSVIEW_IsStarted+0x54>)
 80067d4:	7e1b      	ldrb	r3, [r3, #24]
 80067d6:	4618      	mov	r0, r3
 80067d8:	490d      	ldr	r1, [pc, #52]	; (8006810 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80067da:	4603      	mov	r3, r0
 80067dc:	005b      	lsls	r3, r3, #1
 80067de:	4403      	add	r3, r0
 80067e0:	00db      	lsls	r3, r3, #3
 80067e2:	440b      	add	r3, r1
 80067e4:	3370      	adds	r3, #112	; 0x70
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d00b      	beq.n	8006804 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80067ec:	4b07      	ldr	r3, [pc, #28]	; (800680c <SEGGER_SYSVIEW_IsStarted+0x54>)
 80067ee:	789b      	ldrb	r3, [r3, #2]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d107      	bne.n	8006804 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80067f4:	4b05      	ldr	r3, [pc, #20]	; (800680c <SEGGER_SYSVIEW_IsStarted+0x54>)
 80067f6:	2201      	movs	r2, #1
 80067f8:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80067fa:	f7fe fa73 	bl	8004ce4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80067fe:	4b03      	ldr	r3, [pc, #12]	; (800680c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006800:	2200      	movs	r2, #0
 8006802:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8006804:	4b01      	ldr	r3, [pc, #4]	; (800680c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006806:	781b      	ldrb	r3, [r3, #0]
}
 8006808:	4618      	mov	r0, r3
 800680a:	bd80      	pop	{r7, pc}
 800680c:	2001422c 	.word	0x2001422c
 8006810:	2001439c 	.word	0x2001439c

08006814 <__libc_init_array>:
 8006814:	b570      	push	{r4, r5, r6, lr}
 8006816:	4d0d      	ldr	r5, [pc, #52]	; (800684c <__libc_init_array+0x38>)
 8006818:	4c0d      	ldr	r4, [pc, #52]	; (8006850 <__libc_init_array+0x3c>)
 800681a:	1b64      	subs	r4, r4, r5
 800681c:	10a4      	asrs	r4, r4, #2
 800681e:	2600      	movs	r6, #0
 8006820:	42a6      	cmp	r6, r4
 8006822:	d109      	bne.n	8006838 <__libc_init_array+0x24>
 8006824:	4d0b      	ldr	r5, [pc, #44]	; (8006854 <__libc_init_array+0x40>)
 8006826:	4c0c      	ldr	r4, [pc, #48]	; (8006858 <__libc_init_array+0x44>)
 8006828:	f000 f83c 	bl	80068a4 <_init>
 800682c:	1b64      	subs	r4, r4, r5
 800682e:	10a4      	asrs	r4, r4, #2
 8006830:	2600      	movs	r6, #0
 8006832:	42a6      	cmp	r6, r4
 8006834:	d105      	bne.n	8006842 <__libc_init_array+0x2e>
 8006836:	bd70      	pop	{r4, r5, r6, pc}
 8006838:	f855 3b04 	ldr.w	r3, [r5], #4
 800683c:	4798      	blx	r3
 800683e:	3601      	adds	r6, #1
 8006840:	e7ee      	b.n	8006820 <__libc_init_array+0xc>
 8006842:	f855 3b04 	ldr.w	r3, [r5], #4
 8006846:	4798      	blx	r3
 8006848:	3601      	adds	r6, #1
 800684a:	e7f2      	b.n	8006832 <__libc_init_array+0x1e>
 800684c:	08006a58 	.word	0x08006a58
 8006850:	08006a58 	.word	0x08006a58
 8006854:	08006a58 	.word	0x08006a58
 8006858:	08006a5c 	.word	0x08006a5c

0800685c <memcmp>:
 800685c:	b530      	push	{r4, r5, lr}
 800685e:	3901      	subs	r1, #1
 8006860:	2400      	movs	r4, #0
 8006862:	42a2      	cmp	r2, r4
 8006864:	d101      	bne.n	800686a <memcmp+0xe>
 8006866:	2000      	movs	r0, #0
 8006868:	e005      	b.n	8006876 <memcmp+0x1a>
 800686a:	5d03      	ldrb	r3, [r0, r4]
 800686c:	3401      	adds	r4, #1
 800686e:	5d0d      	ldrb	r5, [r1, r4]
 8006870:	42ab      	cmp	r3, r5
 8006872:	d0f6      	beq.n	8006862 <memcmp+0x6>
 8006874:	1b58      	subs	r0, r3, r5
 8006876:	bd30      	pop	{r4, r5, pc}

08006878 <memcpy>:
 8006878:	440a      	add	r2, r1
 800687a:	4291      	cmp	r1, r2
 800687c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006880:	d100      	bne.n	8006884 <memcpy+0xc>
 8006882:	4770      	bx	lr
 8006884:	b510      	push	{r4, lr}
 8006886:	f811 4b01 	ldrb.w	r4, [r1], #1
 800688a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800688e:	4291      	cmp	r1, r2
 8006890:	d1f9      	bne.n	8006886 <memcpy+0xe>
 8006892:	bd10      	pop	{r4, pc}

08006894 <memset>:
 8006894:	4402      	add	r2, r0
 8006896:	4603      	mov	r3, r0
 8006898:	4293      	cmp	r3, r2
 800689a:	d100      	bne.n	800689e <memset+0xa>
 800689c:	4770      	bx	lr
 800689e:	f803 1b01 	strb.w	r1, [r3], #1
 80068a2:	e7f9      	b.n	8006898 <memset+0x4>

080068a4 <_init>:
 80068a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068a6:	bf00      	nop
 80068a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068aa:	bc08      	pop	{r3}
 80068ac:	469e      	mov	lr, r3
 80068ae:	4770      	bx	lr

080068b0 <_fini>:
 80068b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068b2:	bf00      	nop
 80068b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068b6:	bc08      	pop	{r3}
 80068b8:	469e      	mov	lr, r3
 80068ba:	4770      	bx	lr
