
008Queues_n_timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ed4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000494  08009064  08009064  00019064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094f8  080094f8  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  080094f8  080094f8  000194f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009500  08009500  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009500  08009500  00019500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009504  08009504  00019504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08009508  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002008c  2**0
                  CONTENTS
 10 .bss          00012f24  2000008c  2000008c  0002008c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20012fb0  20012fb0  0002008c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fd64  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003df8  00000000  00000000  0003fe20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001460  00000000  00000000  00043c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012e8  00000000  00000000  00045078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025784  00000000  00000000  00046360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019486  00000000  00000000  0006bae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db94d  00000000  00000000  00084f6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001608b7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005d50  00000000  00000000  0016090c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800904c 	.word	0x0800904c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	0800904c 	.word	0x0800904c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <led_effect>:
void turn_on_even_leds(void);
void turn_on_odd_leds(void);
void LED_control( int value );

void led_effect(int n )
{
 8000598:	b590      	push	{r4, r7, lr}
 800059a:	b085      	sub	sp, #20
 800059c:	af02      	add	r7, sp, #8
 800059e:	6078      	str	r0, [r7, #4]
	led_effect_stop();
 80005a0:	f000 f816 	bl	80005d0 <led_effect_stop>
	xTimerStart(handle_led_timer[n-1], portMAX_DELAY);
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	3b01      	subs	r3, #1
 80005a8:	4a08      	ldr	r2, [pc, #32]	; (80005cc <led_effect+0x34>)
 80005aa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80005ae:	f005 fb73 	bl	8005c98 <xTaskGetTickCount>
 80005b2:	4602      	mov	r2, r0
 80005b4:	f04f 33ff 	mov.w	r3, #4294967295
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2300      	movs	r3, #0
 80005bc:	2101      	movs	r1, #1
 80005be:	4620      	mov	r0, r4
 80005c0:	f006 fc32 	bl	8006e28 <xTimerGenericCommand>
}
 80005c4:	bf00      	nop
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd90      	pop	{r4, r7, pc}
 80005cc:	20012e7c 	.word	0x20012e7c

080005d0 <led_effect_stop>:

void led_effect_stop(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af02      	add	r7, sp, #8
	for(int i = 0; i < 4; i++)
 80005d6:	2300      	movs	r3, #0
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	e00e      	b.n	80005fa <led_effect_stop+0x2a>
		xTimerStop(handle_led_timer[i], portMAX_DELAY);
 80005dc:	4a0b      	ldr	r2, [pc, #44]	; (800060c <led_effect_stop+0x3c>)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005e4:	f04f 33ff 	mov.w	r3, #4294967295
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	2300      	movs	r3, #0
 80005ec:	2200      	movs	r2, #0
 80005ee:	2103      	movs	r1, #3
 80005f0:	f006 fc1a 	bl	8006e28 <xTimerGenericCommand>
	for(int i = 0; i < 4; i++)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	3301      	adds	r3, #1
 80005f8:	607b      	str	r3, [r7, #4]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	2b03      	cmp	r3, #3
 80005fe:	dded      	ble.n	80005dc <led_effect_stop+0xc>
}
 8000600:	bf00      	nop
 8000602:	bf00      	nop
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	20012e7c 	.word	0x20012e7c

08000610 <LED_effect1>:


void LED_effect1(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
	static int flag = 1;
	(flag ^= 1) ? turn_off_all_led() : turn_on_all_leds();
 8000614:	4b08      	ldr	r3, [pc, #32]	; (8000638 <LED_effect1+0x28>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f083 0301 	eor.w	r3, r3, #1
 800061c:	4a06      	ldr	r2, [pc, #24]	; (8000638 <LED_effect1+0x28>)
 800061e:	6013      	str	r3, [r2, #0]
 8000620:	4b05      	ldr	r3, [pc, #20]	; (8000638 <LED_effect1+0x28>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d002      	beq.n	800062e <LED_effect1+0x1e>
 8000628:	f000 f874 	bl	8000714 <turn_off_all_led>
}
 800062c:	e001      	b.n	8000632 <LED_effect1+0x22>
	(flag ^= 1) ? turn_off_all_led() : turn_on_all_leds();
 800062e:	f000 f88f 	bl	8000750 <turn_on_all_leds>
}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	20000000 	.word	0x20000000

0800063c <LED_effect2>:

void LED_effect2(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
	static int flag = 1;
	(flag ^= 1) ? turn_on_even_leds() : turn_on_odd_leds();
 8000640:	4b08      	ldr	r3, [pc, #32]	; (8000664 <LED_effect2+0x28>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f083 0301 	eor.w	r3, r3, #1
 8000648:	4a06      	ldr	r2, [pc, #24]	; (8000664 <LED_effect2+0x28>)
 800064a:	6013      	str	r3, [r2, #0]
 800064c:	4b05      	ldr	r3, [pc, #20]	; (8000664 <LED_effect2+0x28>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d002      	beq.n	800065a <LED_effect2+0x1e>
 8000654:	f000 f8b8 	bl	80007c8 <turn_on_even_leds>
}
 8000658:	e001      	b.n	800065e <LED_effect2+0x22>
	(flag ^= 1) ? turn_on_even_leds() : turn_on_odd_leds();
 800065a:	f000 f897 	bl	800078c <turn_on_odd_leds>
}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	20000004 	.word	0x20000004

08000668 <LED_effect3>:

void LED_effect3(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
	static int i = 0;
	LED_control( 0x1 << (i++ % 4) );
 800066c:	4b09      	ldr	r3, [pc, #36]	; (8000694 <LED_effect3+0x2c>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	1c5a      	adds	r2, r3, #1
 8000672:	4908      	ldr	r1, [pc, #32]	; (8000694 <LED_effect3+0x2c>)
 8000674:	600a      	str	r2, [r1, #0]
 8000676:	425a      	negs	r2, r3
 8000678:	f003 0303 	and.w	r3, r3, #3
 800067c:	f002 0203 	and.w	r2, r2, #3
 8000680:	bf58      	it	pl
 8000682:	4253      	negpl	r3, r2
 8000684:	2201      	movs	r2, #1
 8000686:	fa02 f303 	lsl.w	r3, r2, r3
 800068a:	4618      	mov	r0, r3
 800068c:	f000 f81c 	bl	80006c8 <LED_control>
}
 8000690:	bf00      	nop
 8000692:	bd80      	pop	{r7, pc}
 8000694:	200000a8 	.word	0x200000a8

08000698 <LED_effect4>:

void LED_effect4(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
	static int i = 0;
	LED_control( 0x08 >> (i++ % 4) );
 800069c:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <LED_effect4+0x2c>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	1c5a      	adds	r2, r3, #1
 80006a2:	4908      	ldr	r1, [pc, #32]	; (80006c4 <LED_effect4+0x2c>)
 80006a4:	600a      	str	r2, [r1, #0]
 80006a6:	425a      	negs	r2, r3
 80006a8:	f003 0303 	and.w	r3, r3, #3
 80006ac:	f002 0203 	and.w	r2, r2, #3
 80006b0:	bf58      	it	pl
 80006b2:	4253      	negpl	r3, r2
 80006b4:	2208      	movs	r2, #8
 80006b6:	fa42 f303 	asr.w	r3, r2, r3
 80006ba:	4618      	mov	r0, r3
 80006bc:	f000 f804 	bl	80006c8 <LED_control>
}
 80006c0:	bf00      	nop
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	200000ac 	.word	0x200000ac

080006c8 <LED_control>:

void LED_control( int value )
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  for(int i = 0 ; i < 4 ; i++)
 80006d0:	2300      	movs	r3, #0
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	e014      	b.n	8000700 <LED_control+0x38>
	  HAL_GPIO_WritePin(LD3_GPIO_Port, (LED1 << i), ((value >> i)& 0x1));
 80006d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	fa02 f303 	lsl.w	r3, r2, r3
 80006e0:	b299      	uxth	r1, r3
 80006e2:	687a      	ldr	r2, [r7, #4]
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	fa42 f303 	asr.w	r3, r2, r3
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	f003 0301 	and.w	r3, r3, #1
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	461a      	mov	r2, r3
 80006f4:	4806      	ldr	r0, [pc, #24]	; (8000710 <LED_control+0x48>)
 80006f6:	f001 febd 	bl	8002474 <HAL_GPIO_WritePin>
  for(int i = 0 ; i < 4 ; i++)
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	3301      	adds	r3, #1
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	2b03      	cmp	r3, #3
 8000704:	dde7      	ble.n	80006d6 <LED_control+0xe>
}
 8000706:	bf00      	nop
 8000708:	bf00      	nop
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	40020c00 	.word	0x40020c00

08000714 <turn_off_all_led>:

void turn_off_all_led(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000718:	2200      	movs	r2, #0
 800071a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800071e:	480b      	ldr	r0, [pc, #44]	; (800074c <turn_off_all_led+0x38>)
 8000720:	f001 fea8 	bl	8002474 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000724:	2200      	movs	r2, #0
 8000726:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800072a:	4808      	ldr	r0, [pc, #32]	; (800074c <turn_off_all_led+0x38>)
 800072c:	f001 fea2 	bl	8002474 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 8000730:	2200      	movs	r2, #0
 8000732:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000736:	4805      	ldr	r0, [pc, #20]	; (800074c <turn_off_all_led+0x38>)
 8000738:	f001 fe9c 	bl	8002474 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 800073c:	2200      	movs	r2, #0
 800073e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000742:	4802      	ldr	r0, [pc, #8]	; (800074c <turn_off_all_led+0x38>)
 8000744:	f001 fe96 	bl	8002474 <HAL_GPIO_WritePin>
}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	40020c00 	.word	0x40020c00

08000750 <turn_on_all_leds>:

void turn_on_all_leds(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000754:	2201      	movs	r2, #1
 8000756:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800075a:	480b      	ldr	r0, [pc, #44]	; (8000788 <turn_on_all_leds+0x38>)
 800075c:	f001 fe8a 	bl	8002474 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 8000760:	2201      	movs	r2, #1
 8000762:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000766:	4808      	ldr	r0, [pc, #32]	; (8000788 <turn_on_all_leds+0x38>)
 8000768:	f001 fe84 	bl	8002474 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET);
 800076c:	2201      	movs	r2, #1
 800076e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000772:	4805      	ldr	r0, [pc, #20]	; (8000788 <turn_on_all_leds+0x38>)
 8000774:	f001 fe7e 	bl	8002474 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_SET);
 8000778:	2201      	movs	r2, #1
 800077a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800077e:	4802      	ldr	r0, [pc, #8]	; (8000788 <turn_on_all_leds+0x38>)
 8000780:	f001 fe78 	bl	8002474 <HAL_GPIO_WritePin>
}
 8000784:	bf00      	nop
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40020c00 	.word	0x40020c00

0800078c <turn_on_odd_leds>:

void turn_on_odd_leds(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port, LED1,GPIO_PIN_SET);
 8000790:	2201      	movs	r2, #1
 8000792:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000796:	480b      	ldr	r0, [pc, #44]	; (80007c4 <turn_on_odd_leds+0x38>)
 8000798:	f001 fe6c 	bl	8002474 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LED2,GPIO_PIN_RESET);
 800079c:	2200      	movs	r2, #0
 800079e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007a2:	4808      	ldr	r0, [pc, #32]	; (80007c4 <turn_on_odd_leds+0x38>)
 80007a4:	f001 fe66 	bl	8002474 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LED3,GPIO_PIN_SET);
 80007a8:	2201      	movs	r2, #1
 80007aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007ae:	4805      	ldr	r0, [pc, #20]	; (80007c4 <turn_on_odd_leds+0x38>)
 80007b0:	f001 fe60 	bl	8002474 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, LED4,GPIO_PIN_RESET);
 80007b4:	2200      	movs	r2, #0
 80007b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007ba:	4802      	ldr	r0, [pc, #8]	; (80007c4 <turn_on_odd_leds+0x38>)
 80007bc:	f001 fe5a 	bl	8002474 <HAL_GPIO_WritePin>
}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40020c00 	.word	0x40020c00

080007c8 <turn_on_even_leds>:


void turn_on_even_leds(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port, LED1,GPIO_PIN_RESET);
 80007cc:	2200      	movs	r2, #0
 80007ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007d2:	480b      	ldr	r0, [pc, #44]	; (8000800 <turn_on_even_leds+0x38>)
 80007d4:	f001 fe4e 	bl	8002474 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LED2,GPIO_PIN_SET);
 80007d8:	2201      	movs	r2, #1
 80007da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007de:	4808      	ldr	r0, [pc, #32]	; (8000800 <turn_on_even_leds+0x38>)
 80007e0:	f001 fe48 	bl	8002474 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LED3,GPIO_PIN_RESET);
 80007e4:	2200      	movs	r2, #0
 80007e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007ea:	4805      	ldr	r0, [pc, #20]	; (8000800 <turn_on_even_leds+0x38>)
 80007ec:	f001 fe42 	bl	8002474 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, LED4,GPIO_PIN_SET);
 80007f0:	2201      	movs	r2, #1
 80007f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007f6:	4802      	ldr	r0, [pc, #8]	; (8000800 <turn_on_even_leds+0x38>)
 80007f8:	f001 fe3c 	bl	8002474 <HAL_GPIO_WritePin>
}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40020c00 	.word	0x40020c00

08000804 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08c      	sub	sp, #48	; 0x30
 8000808:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800080a:	f001 fae1 	bl	8001dd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800080e:	f000 f911 	bl	8000a34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000812:	f000 f9cb 	bl	8000bac <MX_GPIO_Init>
  MX_RTC_Init();
 8000816:	f000 f979 	bl	8000b0c <MX_RTC_Init>
  MX_USART2_UART_Init();
 800081a:	f000 f99d 	bl	8000b58 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  status = xTaskCreate(menu_task, "menu_task", 250, NULL, 2, &handle_menu_task);
 800081e:	4b6c      	ldr	r3, [pc, #432]	; (80009d0 <main+0x1cc>)
 8000820:	9301      	str	r3, [sp, #4]
 8000822:	2302      	movs	r3, #2
 8000824:	9300      	str	r3, [sp, #0]
 8000826:	2300      	movs	r3, #0
 8000828:	22fa      	movs	r2, #250	; 0xfa
 800082a:	496a      	ldr	r1, [pc, #424]	; (80009d4 <main+0x1d0>)
 800082c:	486a      	ldr	r0, [pc, #424]	; (80009d8 <main+0x1d4>)
 800082e:	f004 ff5b 	bl	80056e8 <xTaskCreate>
 8000832:	6238      	str	r0, [r7, #32]

  configASSERT(status == pdPASS);
 8000834:	6a3b      	ldr	r3, [r7, #32]
 8000836:	2b01      	cmp	r3, #1
 8000838:	d00a      	beq.n	8000850 <main+0x4c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800083a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800083e:	f383 8811 	msr	BASEPRI, r3
 8000842:	f3bf 8f6f 	isb	sy
 8000846:	f3bf 8f4f 	dsb	sy
 800084a:	61fb      	str	r3, [r7, #28]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800084c:	bf00      	nop
 800084e:	e7fe      	b.n	800084e <main+0x4a>

  status = xTaskCreate(cmd_handler_task, "cmd_task", 250, NULL, 2, &handle_cmd_task);
 8000850:	4b62      	ldr	r3, [pc, #392]	; (80009dc <main+0x1d8>)
 8000852:	9301      	str	r3, [sp, #4]
 8000854:	2302      	movs	r3, #2
 8000856:	9300      	str	r3, [sp, #0]
 8000858:	2300      	movs	r3, #0
 800085a:	22fa      	movs	r2, #250	; 0xfa
 800085c:	4960      	ldr	r1, [pc, #384]	; (80009e0 <main+0x1dc>)
 800085e:	4861      	ldr	r0, [pc, #388]	; (80009e4 <main+0x1e0>)
 8000860:	f004 ff42 	bl	80056e8 <xTaskCreate>
 8000864:	6238      	str	r0, [r7, #32]

  configASSERT(status == pdPASS);
 8000866:	6a3b      	ldr	r3, [r7, #32]
 8000868:	2b01      	cmp	r3, #1
 800086a:	d00a      	beq.n	8000882 <main+0x7e>
        __asm volatile
 800086c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000870:	f383 8811 	msr	BASEPRI, r3
 8000874:	f3bf 8f6f 	isb	sy
 8000878:	f3bf 8f4f 	dsb	sy
 800087c:	61bb      	str	r3, [r7, #24]
    }
 800087e:	bf00      	nop
 8000880:	e7fe      	b.n	8000880 <main+0x7c>

  status = xTaskCreate(print_task, "print_task", 250, NULL, 2, &handle_print_task);
 8000882:	4b59      	ldr	r3, [pc, #356]	; (80009e8 <main+0x1e4>)
 8000884:	9301      	str	r3, [sp, #4]
 8000886:	2302      	movs	r3, #2
 8000888:	9300      	str	r3, [sp, #0]
 800088a:	2300      	movs	r3, #0
 800088c:	22fa      	movs	r2, #250	; 0xfa
 800088e:	4957      	ldr	r1, [pc, #348]	; (80009ec <main+0x1e8>)
 8000890:	4857      	ldr	r0, [pc, #348]	; (80009f0 <main+0x1ec>)
 8000892:	f004 ff29 	bl	80056e8 <xTaskCreate>
 8000896:	6238      	str	r0, [r7, #32]

  configASSERT(status == pdPASS);
 8000898:	6a3b      	ldr	r3, [r7, #32]
 800089a:	2b01      	cmp	r3, #1
 800089c:	d00a      	beq.n	80008b4 <main+0xb0>
        __asm volatile
 800089e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008a2:	f383 8811 	msr	BASEPRI, r3
 80008a6:	f3bf 8f6f 	isb	sy
 80008aa:	f3bf 8f4f 	dsb	sy
 80008ae:	617b      	str	r3, [r7, #20]
    }
 80008b0:	bf00      	nop
 80008b2:	e7fe      	b.n	80008b2 <main+0xae>

  status = xTaskCreate(led_task, "led_task", 250, NULL, 2, &handle_led_task);
 80008b4:	4b4f      	ldr	r3, [pc, #316]	; (80009f4 <main+0x1f0>)
 80008b6:	9301      	str	r3, [sp, #4]
 80008b8:	2302      	movs	r3, #2
 80008ba:	9300      	str	r3, [sp, #0]
 80008bc:	2300      	movs	r3, #0
 80008be:	22fa      	movs	r2, #250	; 0xfa
 80008c0:	494d      	ldr	r1, [pc, #308]	; (80009f8 <main+0x1f4>)
 80008c2:	484e      	ldr	r0, [pc, #312]	; (80009fc <main+0x1f8>)
 80008c4:	f004 ff10 	bl	80056e8 <xTaskCreate>
 80008c8:	6238      	str	r0, [r7, #32]

  configASSERT(status == pdPASS);
 80008ca:	6a3b      	ldr	r3, [r7, #32]
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d00a      	beq.n	80008e6 <main+0xe2>
        __asm volatile
 80008d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008d4:	f383 8811 	msr	BASEPRI, r3
 80008d8:	f3bf 8f6f 	isb	sy
 80008dc:	f3bf 8f4f 	dsb	sy
 80008e0:	613b      	str	r3, [r7, #16]
    }
 80008e2:	bf00      	nop
 80008e4:	e7fe      	b.n	80008e4 <main+0xe0>

  status = xTaskCreate(rtc_task, "rtc_task", 250, NULL, 2, &handle_rtc_task);
 80008e6:	4b46      	ldr	r3, [pc, #280]	; (8000a00 <main+0x1fc>)
 80008e8:	9301      	str	r3, [sp, #4]
 80008ea:	2302      	movs	r3, #2
 80008ec:	9300      	str	r3, [sp, #0]
 80008ee:	2300      	movs	r3, #0
 80008f0:	22fa      	movs	r2, #250	; 0xfa
 80008f2:	4944      	ldr	r1, [pc, #272]	; (8000a04 <main+0x200>)
 80008f4:	4844      	ldr	r0, [pc, #272]	; (8000a08 <main+0x204>)
 80008f6:	f004 fef7 	bl	80056e8 <xTaskCreate>
 80008fa:	6238      	str	r0, [r7, #32]

  configASSERT(status == pdPASS);
 80008fc:	6a3b      	ldr	r3, [r7, #32]
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d00a      	beq.n	8000918 <main+0x114>
        __asm volatile
 8000902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000906:	f383 8811 	msr	BASEPRI, r3
 800090a:	f3bf 8f6f 	isb	sy
 800090e:	f3bf 8f4f 	dsb	sy
 8000912:	60fb      	str	r3, [r7, #12]
    }
 8000914:	bf00      	nop
 8000916:	e7fe      	b.n	8000916 <main+0x112>

  q_data = xQueueCreate(10, sizeof(char));
 8000918:	2200      	movs	r2, #0
 800091a:	2101      	movs	r1, #1
 800091c:	200a      	movs	r0, #10
 800091e:	f004 fa13 	bl	8004d48 <xQueueGenericCreate>
 8000922:	4603      	mov	r3, r0
 8000924:	4a39      	ldr	r2, [pc, #228]	; (8000a0c <main+0x208>)
 8000926:	6013      	str	r3, [r2, #0]

  configASSERT(q_data != NULL);
 8000928:	4b38      	ldr	r3, [pc, #224]	; (8000a0c <main+0x208>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d10a      	bne.n	8000946 <main+0x142>
        __asm volatile
 8000930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000934:	f383 8811 	msr	BASEPRI, r3
 8000938:	f3bf 8f6f 	isb	sy
 800093c:	f3bf 8f4f 	dsb	sy
 8000940:	60bb      	str	r3, [r7, #8]
    }
 8000942:	bf00      	nop
 8000944:	e7fe      	b.n	8000944 <main+0x140>

  q_print = xQueueCreate(10, sizeof(size_t));
 8000946:	2200      	movs	r2, #0
 8000948:	2104      	movs	r1, #4
 800094a:	200a      	movs	r0, #10
 800094c:	f004 f9fc 	bl	8004d48 <xQueueGenericCreate>
 8000950:	4603      	mov	r3, r0
 8000952:	4a2f      	ldr	r2, [pc, #188]	; (8000a10 <main+0x20c>)
 8000954:	6013      	str	r3, [r2, #0]

  configASSERT(q_print != NULL);
 8000956:	4b2e      	ldr	r3, [pc, #184]	; (8000a10 <main+0x20c>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d10a      	bne.n	8000974 <main+0x170>
        __asm volatile
 800095e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000962:	f383 8811 	msr	BASEPRI, r3
 8000966:	f3bf 8f6f 	isb	sy
 800096a:	f3bf 8f4f 	dsb	sy
 800096e:	607b      	str	r3, [r7, #4]
    }
 8000970:	bf00      	nop
 8000972:	e7fe      	b.n	8000972 <main+0x16e>

  // create software timers for LED effects

  for(int i = 0; i < 4; i++)
 8000974:	2300      	movs	r3, #0
 8000976:	627b      	str	r3, [r7, #36]	; 0x24
 8000978:	e013      	b.n	80009a2 <main+0x19e>
	  handle_led_timer[i] = xTimerCreate("led timer", pdMS_TO_TICKS(500), pdTRUE, (void*)(i+1), led_effect_callback);
 800097a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800097c:	3301      	adds	r3, #1
 800097e:	461a      	mov	r2, r3
 8000980:	4b24      	ldr	r3, [pc, #144]	; (8000a14 <main+0x210>)
 8000982:	9300      	str	r3, [sp, #0]
 8000984:	4613      	mov	r3, r2
 8000986:	2201      	movs	r2, #1
 8000988:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800098c:	4822      	ldr	r0, [pc, #136]	; (8000a18 <main+0x214>)
 800098e:	f006 f9f1 	bl	8006d74 <xTimerCreate>
 8000992:	4602      	mov	r2, r0
 8000994:	4921      	ldr	r1, [pc, #132]	; (8000a1c <main+0x218>)
 8000996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000998:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i = 0; i < 4; i++)
 800099c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099e:	3301      	adds	r3, #1
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
 80009a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a4:	2b03      	cmp	r3, #3
 80009a6:	dde8      	ble.n	800097a <main+0x176>

  rtc_timer = xTimerCreate ("rtc_report_timer",pdMS_TO_TICKS(1000),pdTRUE,NULL,rtc_report_callback);
 80009a8:	4b1d      	ldr	r3, [pc, #116]	; (8000a20 <main+0x21c>)
 80009aa:	9300      	str	r3, [sp, #0]
 80009ac:	2300      	movs	r3, #0
 80009ae:	2201      	movs	r2, #1
 80009b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009b4:	481b      	ldr	r0, [pc, #108]	; (8000a24 <main+0x220>)
 80009b6:	f006 f9dd 	bl	8006d74 <xTimerCreate>
 80009ba:	4603      	mov	r3, r0
 80009bc:	4a1a      	ldr	r2, [pc, #104]	; (8000a28 <main+0x224>)
 80009be:	6013      	str	r3, [r2, #0]

  HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 80009c0:	2201      	movs	r2, #1
 80009c2:	491a      	ldr	r1, [pc, #104]	; (8000a2c <main+0x228>)
 80009c4:	481a      	ldr	r0, [pc, #104]	; (8000a30 <main+0x22c>)
 80009c6:	f003 f9b6 	bl	8003d36 <HAL_UART_Receive_IT>

  vTaskStartScheduler();
 80009ca:	f005 f809 	bl	80059e0 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009ce:	e7fe      	b.n	80009ce <main+0x1ca>
 80009d0:	20012e9c 	.word	0x20012e9c
 80009d4:	08009064 	.word	0x08009064
 80009d8:	08001555 	.word	0x08001555
 80009dc:	20012e94 	.word	0x20012e94
 80009e0:	08009070 	.word	0x08009070
 80009e4:	0800163d 	.word	0x0800163d
 80009e8:	20012ec4 	.word	0x20012ec4
 80009ec:	0800907c 	.word	0x0800907c
 80009f0:	0800166d 	.word	0x0800166d
 80009f4:	20012ec8 	.word	0x20012ec8
 80009f8:	08009088 	.word	0x08009088
 80009fc:	080016ad 	.word	0x080016ad
 8000a00:	20012e90 	.word	0x20012e90
 8000a04:	08009094 	.word	0x08009094
 8000a08:	08001821 	.word	0x08001821
 8000a0c:	20012e98 	.word	0x20012e98
 8000a10:	20012ea0 	.word	0x20012ea0
 8000a14:	08000e7d 	.word	0x08000e7d
 8000a18:	080090a0 	.word	0x080090a0
 8000a1c:	20012e7c 	.word	0x20012e7c
 8000a20:	08000e69 	.word	0x08000e69
 8000a24:	080090ac 	.word	0x080090ac
 8000a28:	20012e8c 	.word	0x20012e8c
 8000a2c:	20012ecc 	.word	0x20012ecc
 8000a30:	20012ed0 	.word	0x20012ed0

08000a34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b094      	sub	sp, #80	; 0x50
 8000a38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a3a:	f107 0320 	add.w	r3, r7, #32
 8000a3e:	2230      	movs	r2, #48	; 0x30
 8000a40:	2100      	movs	r1, #0
 8000a42:	4618      	mov	r0, r3
 8000a44:	f007 f9e0 	bl	8007e08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a48:	f107 030c 	add.w	r3, r7, #12
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a58:	2300      	movs	r3, #0
 8000a5a:	60bb      	str	r3, [r7, #8]
 8000a5c:	4b29      	ldr	r3, [pc, #164]	; (8000b04 <SystemClock_Config+0xd0>)
 8000a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a60:	4a28      	ldr	r2, [pc, #160]	; (8000b04 <SystemClock_Config+0xd0>)
 8000a62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a66:	6413      	str	r3, [r2, #64]	; 0x40
 8000a68:	4b26      	ldr	r3, [pc, #152]	; (8000b04 <SystemClock_Config+0xd0>)
 8000a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a70:	60bb      	str	r3, [r7, #8]
 8000a72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a74:	2300      	movs	r3, #0
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	4b23      	ldr	r3, [pc, #140]	; (8000b08 <SystemClock_Config+0xd4>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a22      	ldr	r2, [pc, #136]	; (8000b08 <SystemClock_Config+0xd4>)
 8000a7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a82:	6013      	str	r3, [r2, #0]
 8000a84:	4b20      	ldr	r3, [pc, #128]	; (8000b08 <SystemClock_Config+0xd4>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a8c:	607b      	str	r3, [r7, #4]
 8000a8e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000a90:	230a      	movs	r3, #10
 8000a92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a94:	2301      	movs	r3, #1
 8000a96:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a98:	2310      	movs	r3, #16
 8000a9a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000aa8:	2308      	movs	r3, #8
 8000aaa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000aac:	2332      	movs	r3, #50	; 0x32
 8000aae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ab0:	2304      	movs	r3, #4
 8000ab2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ab4:	2307      	movs	r3, #7
 8000ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab8:	f107 0320 	add.w	r3, r7, #32
 8000abc:	4618      	mov	r0, r3
 8000abe:	f001 fcf3 	bl	80024a8 <HAL_RCC_OscConfig>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ac8:	f000 fa54 	bl	8000f74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000acc:	230f      	movs	r3, #15
 8000ace:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ad8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000adc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ade:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ae2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ae4:	f107 030c 	add.w	r3, r7, #12
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4618      	mov	r0, r3
 8000aec:	f001 ff54 	bl	8002998 <HAL_RCC_ClockConfig>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000af6:	f000 fa3d 	bl	8000f74 <Error_Handler>
  }
}
 8000afa:	bf00      	nop
 8000afc:	3750      	adds	r7, #80	; 0x50
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40023800 	.word	0x40023800
 8000b08:	40007000 	.word	0x40007000

08000b0c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b10:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <MX_RTC_Init+0x44>)
 8000b12:	4a10      	ldr	r2, [pc, #64]	; (8000b54 <MX_RTC_Init+0x48>)
 8000b14:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <MX_RTC_Init+0x44>)
 8000b18:	2240      	movs	r2, #64	; 0x40
 8000b1a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <MX_RTC_Init+0x44>)
 8000b1e:	227f      	movs	r2, #127	; 0x7f
 8000b20:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b22:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <MX_RTC_Init+0x44>)
 8000b24:	22ff      	movs	r2, #255	; 0xff
 8000b26:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b28:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <MX_RTC_Init+0x44>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b2e:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <MX_RTC_Init+0x44>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b34:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <MX_RTC_Init+0x44>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b3a:	4805      	ldr	r0, [pc, #20]	; (8000b50 <MX_RTC_Init+0x44>)
 8000b3c:	f002 fa3c 	bl	8002fb8 <HAL_RTC_Init>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000b46:	f000 fa15 	bl	8000f74 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20012ea4 	.word	0x20012ea4
 8000b54:	40002800 	.word	0x40002800

08000b58 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b5c:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b5e:	4a12      	ldr	r2, [pc, #72]	; (8000ba8 <MX_USART2_UART_Init+0x50>)
 8000b60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b62:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b70:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b76:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b7c:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b7e:	220c      	movs	r2, #12
 8000b80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b82:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b88:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b8e:	4805      	ldr	r0, [pc, #20]	; (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b90:	f002 fff2 	bl	8003b78 <HAL_UART_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b9a:	f000 f9eb 	bl	8000f74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20012ed0 	.word	0x20012ed0
 8000ba8:	40004400 	.word	0x40004400

08000bac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08c      	sub	sp, #48	; 0x30
 8000bb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb2:	f107 031c 	add.w	r3, r7, #28
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]
 8000bbc:	609a      	str	r2, [r3, #8]
 8000bbe:	60da      	str	r2, [r3, #12]
 8000bc0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61bb      	str	r3, [r7, #24]
 8000bc6:	4ba2      	ldr	r3, [pc, #648]	; (8000e50 <MX_GPIO_Init+0x2a4>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4aa1      	ldr	r2, [pc, #644]	; (8000e50 <MX_GPIO_Init+0x2a4>)
 8000bcc:	f043 0310 	orr.w	r3, r3, #16
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b9f      	ldr	r3, [pc, #636]	; (8000e50 <MX_GPIO_Init+0x2a4>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0310 	and.w	r3, r3, #16
 8000bda:	61bb      	str	r3, [r7, #24]
 8000bdc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	617b      	str	r3, [r7, #20]
 8000be2:	4b9b      	ldr	r3, [pc, #620]	; (8000e50 <MX_GPIO_Init+0x2a4>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	4a9a      	ldr	r2, [pc, #616]	; (8000e50 <MX_GPIO_Init+0x2a4>)
 8000be8:	f043 0304 	orr.w	r3, r3, #4
 8000bec:	6313      	str	r3, [r2, #48]	; 0x30
 8000bee:	4b98      	ldr	r3, [pc, #608]	; (8000e50 <MX_GPIO_Init+0x2a4>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	f003 0304 	and.w	r3, r3, #4
 8000bf6:	617b      	str	r3, [r7, #20]
 8000bf8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	613b      	str	r3, [r7, #16]
 8000bfe:	4b94      	ldr	r3, [pc, #592]	; (8000e50 <MX_GPIO_Init+0x2a4>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a93      	ldr	r2, [pc, #588]	; (8000e50 <MX_GPIO_Init+0x2a4>)
 8000c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b91      	ldr	r3, [pc, #580]	; (8000e50 <MX_GPIO_Init+0x2a4>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	4b8d      	ldr	r3, [pc, #564]	; (8000e50 <MX_GPIO_Init+0x2a4>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	4a8c      	ldr	r2, [pc, #560]	; (8000e50 <MX_GPIO_Init+0x2a4>)
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	6313      	str	r3, [r2, #48]	; 0x30
 8000c26:	4b8a      	ldr	r3, [pc, #552]	; (8000e50 <MX_GPIO_Init+0x2a4>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	60bb      	str	r3, [r7, #8]
 8000c36:	4b86      	ldr	r3, [pc, #536]	; (8000e50 <MX_GPIO_Init+0x2a4>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a85      	ldr	r2, [pc, #532]	; (8000e50 <MX_GPIO_Init+0x2a4>)
 8000c3c:	f043 0302 	orr.w	r3, r3, #2
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b83      	ldr	r3, [pc, #524]	; (8000e50 <MX_GPIO_Init+0x2a4>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f003 0302 	and.w	r3, r3, #2
 8000c4a:	60bb      	str	r3, [r7, #8]
 8000c4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	607b      	str	r3, [r7, #4]
 8000c52:	4b7f      	ldr	r3, [pc, #508]	; (8000e50 <MX_GPIO_Init+0x2a4>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	4a7e      	ldr	r2, [pc, #504]	; (8000e50 <MX_GPIO_Init+0x2a4>)
 8000c58:	f043 0308 	orr.w	r3, r3, #8
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5e:	4b7c      	ldr	r3, [pc, #496]	; (8000e50 <MX_GPIO_Init+0x2a4>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f003 0308 	and.w	r3, r3, #8
 8000c66:	607b      	str	r3, [r7, #4]
 8000c68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2108      	movs	r1, #8
 8000c6e:	4879      	ldr	r0, [pc, #484]	; (8000e54 <MX_GPIO_Init+0x2a8>)
 8000c70:	f001 fc00 	bl	8002474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000c74:	2201      	movs	r2, #1
 8000c76:	2101      	movs	r1, #1
 8000c78:	4877      	ldr	r0, [pc, #476]	; (8000e58 <MX_GPIO_Init+0x2ac>)
 8000c7a:	f001 fbfb 	bl	8002474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000c7e:	2200      	movs	r2, #0
 8000c80:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000c84:	4875      	ldr	r0, [pc, #468]	; (8000e5c <MX_GPIO_Init+0x2b0>)
 8000c86:	f001 fbf5 	bl	8002474 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000c8a:	2308      	movs	r3, #8
 8000c8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c96:	2300      	movs	r3, #0
 8000c98:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000c9a:	f107 031c 	add.w	r3, r7, #28
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	486c      	ldr	r0, [pc, #432]	; (8000e54 <MX_GPIO_Init+0x2a8>)
 8000ca2:	f001 fa4b 	bl	800213c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000caa:	2301      	movs	r3, #1
 8000cac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000cb6:	f107 031c 	add.w	r3, r7, #28
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4866      	ldr	r0, [pc, #408]	; (8000e58 <MX_GPIO_Init+0x2ac>)
 8000cbe:	f001 fa3d 	bl	800213c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000cc2:	2308      	movs	r3, #8
 8000cc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cd2:	2305      	movs	r3, #5
 8000cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000cd6:	f107 031c 	add.w	r3, r7, #28
 8000cda:	4619      	mov	r1, r3
 8000cdc:	485e      	ldr	r0, [pc, #376]	; (8000e58 <MX_GPIO_Init+0x2ac>)
 8000cde:	f001 fa2d 	bl	800213c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ce6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cf0:	f107 031c 	add.w	r3, r7, #28
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	485a      	ldr	r0, [pc, #360]	; (8000e60 <MX_GPIO_Init+0x2b4>)
 8000cf8:	f001 fa20 	bl	800213c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000cfc:	2310      	movs	r3, #16
 8000cfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d00:	2302      	movs	r3, #2
 8000d02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d0c:	2306      	movs	r3, #6
 8000d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000d10:	f107 031c 	add.w	r3, r7, #28
 8000d14:	4619      	mov	r1, r3
 8000d16:	4852      	ldr	r0, [pc, #328]	; (8000e60 <MX_GPIO_Init+0x2b4>)
 8000d18:	f001 fa10 	bl	800213c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d1c:	23e0      	movs	r3, #224	; 0xe0
 8000d1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d20:	2302      	movs	r3, #2
 8000d22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d2c:	2305      	movs	r3, #5
 8000d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d30:	f107 031c 	add.w	r3, r7, #28
 8000d34:	4619      	mov	r1, r3
 8000d36:	484a      	ldr	r0, [pc, #296]	; (8000e60 <MX_GPIO_Init+0x2b4>)
 8000d38:	f001 fa00 	bl	800213c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000d3c:	2304      	movs	r3, #4
 8000d3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d40:	2300      	movs	r3, #0
 8000d42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000d48:	f107 031c 	add.w	r3, r7, #28
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4845      	ldr	r0, [pc, #276]	; (8000e64 <MX_GPIO_Init+0x2b8>)
 8000d50:	f001 f9f4 	bl	800213c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000d54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d62:	2300      	movs	r3, #0
 8000d64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d66:	2305      	movs	r3, #5
 8000d68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000d6a:	f107 031c 	add.w	r3, r7, #28
 8000d6e:	4619      	mov	r1, r3
 8000d70:	483c      	ldr	r0, [pc, #240]	; (8000e64 <MX_GPIO_Init+0x2b8>)
 8000d72:	f001 f9e3 	bl	800213c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000d76:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000d7a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d84:	2300      	movs	r3, #0
 8000d86:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d88:	f107 031c 	add.w	r3, r7, #28
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4833      	ldr	r0, [pc, #204]	; (8000e5c <MX_GPIO_Init+0x2b0>)
 8000d90:	f001 f9d4 	bl	800213c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000d94:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000d98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2300      	movs	r3, #0
 8000da4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000da6:	2306      	movs	r3, #6
 8000da8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000daa:	f107 031c 	add.w	r3, r7, #28
 8000dae:	4619      	mov	r1, r3
 8000db0:	4829      	ldr	r0, [pc, #164]	; (8000e58 <MX_GPIO_Init+0x2ac>)
 8000db2:	f001 f9c3 	bl	800213c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000db6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000dc4:	f107 031c 	add.w	r3, r7, #28
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4825      	ldr	r0, [pc, #148]	; (8000e60 <MX_GPIO_Init+0x2b4>)
 8000dcc:	f001 f9b6 	bl	800213c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000dd0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000dd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dde:	2300      	movs	r3, #0
 8000de0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000de2:	230a      	movs	r3, #10
 8000de4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de6:	f107 031c 	add.w	r3, r7, #28
 8000dea:	4619      	mov	r1, r3
 8000dec:	481c      	ldr	r0, [pc, #112]	; (8000e60 <MX_GPIO_Init+0x2b4>)
 8000dee:	f001 f9a5 	bl	800213c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000df2:	2320      	movs	r3, #32
 8000df4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000df6:	2300      	movs	r3, #0
 8000df8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000dfe:	f107 031c 	add.w	r3, r7, #28
 8000e02:	4619      	mov	r1, r3
 8000e04:	4815      	ldr	r0, [pc, #84]	; (8000e5c <MX_GPIO_Init+0x2b0>)
 8000e06:	f001 f999 	bl	800213c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000e0a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000e0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e10:	2312      	movs	r3, #18
 8000e12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e1c:	2304      	movs	r3, #4
 8000e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e20:	f107 031c 	add.w	r3, r7, #28
 8000e24:	4619      	mov	r1, r3
 8000e26:	480f      	ldr	r0, [pc, #60]	; (8000e64 <MX_GPIO_Init+0x2b8>)
 8000e28:	f001 f988 	bl	800213c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e30:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000e34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000e3a:	f107 031c 	add.w	r3, r7, #28
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4804      	ldr	r0, [pc, #16]	; (8000e54 <MX_GPIO_Init+0x2a8>)
 8000e42:	f001 f97b 	bl	800213c <HAL_GPIO_Init>

}
 8000e46:	bf00      	nop
 8000e48:	3730      	adds	r7, #48	; 0x30
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40023800 	.word	0x40023800
 8000e54:	40021000 	.word	0x40021000
 8000e58:	40020800 	.word	0x40020800
 8000e5c:	40020c00 	.word	0x40020c00
 8000e60:	40020000 	.word	0x40020000
 8000e64:	40020400 	.word	0x40020400

08000e68 <rtc_report_callback>:

/* USER CODE BEGIN 4 */

void rtc_report_callback( TimerHandle_t xTimer )
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
	 show_time_date_itm();
 8000e70:	f000 f886 	bl	8000f80 <show_time_date_itm>

}
 8000e74:	bf00      	nop
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <led_effect_callback>:


void led_effect_callback(TimerHandle_t xTimer)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
	int id;
	id = (uint32_t) pvTimerGetTimerID(xTimer);
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f006 fa98 	bl	80073ba <pvTimerGetTimerID>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	3b01      	subs	r3, #1
 8000e92:	2b03      	cmp	r3, #3
 8000e94:	d816      	bhi.n	8000ec4 <led_effect_callback+0x48>
 8000e96:	a201      	add	r2, pc, #4	; (adr r2, 8000e9c <led_effect_callback+0x20>)
 8000e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e9c:	08000ead 	.word	0x08000ead
 8000ea0:	08000eb3 	.word	0x08000eb3
 8000ea4:	08000eb9 	.word	0x08000eb9
 8000ea8:	08000ebf 	.word	0x08000ebf

	switch(id)
	{
		case 1:
			LED_effect1();
 8000eac:	f7ff fbb0 	bl	8000610 <LED_effect1>
			break;
 8000eb0:	e008      	b.n	8000ec4 <led_effect_callback+0x48>
		case 2:
			LED_effect2();
 8000eb2:	f7ff fbc3 	bl	800063c <LED_effect2>
			break;
 8000eb6:	e005      	b.n	8000ec4 <led_effect_callback+0x48>
		case 3:
			LED_effect3();
 8000eb8:	f7ff fbd6 	bl	8000668 <LED_effect3>
			break;
 8000ebc:	e002      	b.n	8000ec4 <led_effect_callback+0x48>
		case 4:
			LED_effect4();
 8000ebe:	f7ff fbeb 	bl	8000698 <LED_effect4>
			break;
 8000ec2:	bf00      	nop
	}
}
 8000ec4:	bf00      	nop
 8000ec6:	3710      	adds	r7, #16
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af02      	add	r7, sp, #8
 8000ed2:	6078      	str	r0, [r7, #4]
	if(xQueueIsQueueFullFromISR(q_data) == pdFALSE)
 8000ed4:	4b1a      	ldr	r3, [pc, #104]	; (8000f40 <HAL_UART_RxCpltCallback+0x74>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f004 fb5d 	bl	8005598 <xQueueIsQueueFullFromISR>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d107      	bne.n	8000ef4 <HAL_UART_RxCpltCallback+0x28>
	{
		/*Queue is not full */

		/*TODO: Enqueue data byte */
		xQueueSendFromISR(q_data, (void*)&user_data, NULL);
 8000ee4:	4b16      	ldr	r3, [pc, #88]	; (8000f40 <HAL_UART_RxCpltCallback+0x74>)
 8000ee6:	6818      	ldr	r0, [r3, #0]
 8000ee8:	2300      	movs	r3, #0
 8000eea:	2200      	movs	r2, #0
 8000eec:	4915      	ldr	r1, [pc, #84]	; (8000f44 <HAL_UART_RxCpltCallback+0x78>)
 8000eee:	f004 f89b 	bl	8005028 <xQueueGenericSendFromISR>
 8000ef2:	e00b      	b.n	8000f0c <HAL_UART_RxCpltCallback+0x40>

	}else{
		/*Queue is full */

		if(user_data == '\n')
 8000ef4:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <HAL_UART_RxCpltCallback+0x78>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	2b0a      	cmp	r3, #10
 8000efc:	d106      	bne.n	8000f0c <HAL_UART_RxCpltCallback+0x40>
		{
			/*user_data = '\n' */

			/*TODO: make sure that last data byte of the queue is '\n' */
			xQueueOverwriteFromISR(q_data, (void*)&user_data, NULL);
 8000efe:	4b10      	ldr	r3, [pc, #64]	; (8000f40 <HAL_UART_RxCpltCallback+0x74>)
 8000f00:	6818      	ldr	r0, [r3, #0]
 8000f02:	2302      	movs	r3, #2
 8000f04:	2200      	movs	r2, #0
 8000f06:	490f      	ldr	r1, [pc, #60]	; (8000f44 <HAL_UART_RxCpltCallback+0x78>)
 8000f08:	f004 f88e 	bl	8005028 <xQueueGenericSendFromISR>
		}
	}


	/*TODO: send notification to command handling task if user_data = '\n' */
	if(user_data == '\n')
 8000f0c:	4b0d      	ldr	r3, [pc, #52]	; (8000f44 <HAL_UART_RxCpltCallback+0x78>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	2b0a      	cmp	r3, #10
 8000f14:	d10a      	bne.n	8000f2c <HAL_UART_RxCpltCallback+0x60>
		xTaskNotifyFromISR(handle_cmd_task, 0, eNoAction, NULL);
 8000f16:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <HAL_UART_RxCpltCallback+0x7c>)
 8000f18:	6818      	ldr	r0, [r3, #0]
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	9301      	str	r3, [sp, #4]
 8000f1e:	2300      	movs	r3, #0
 8000f20:	9300      	str	r3, [sp, #0]
 8000f22:	2300      	movs	r3, #0
 8000f24:	2200      	movs	r2, #0
 8000f26:	2100      	movs	r1, #0
 8000f28:	f005 fd16 	bl	8006958 <xTaskGenericNotifyFromISR>

	/* TODO: Enable UART data byte reception again in IT mode */
	HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	4905      	ldr	r1, [pc, #20]	; (8000f44 <HAL_UART_RxCpltCallback+0x78>)
 8000f30:	4806      	ldr	r0, [pc, #24]	; (8000f4c <HAL_UART_RxCpltCallback+0x80>)
 8000f32:	f002 ff00 	bl	8003d36 <HAL_UART_Receive_IT>

}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20012e98 	.word	0x20012e98
 8000f44:	20012ecc 	.word	0x20012ecc
 8000f48:	20012e94 	.word	0x20012e94
 8000f4c:	20012ed0 	.word	0x20012ed0

08000f50 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a04      	ldr	r2, [pc, #16]	; (8000f70 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d101      	bne.n	8000f66 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f62:	f000 ff57 	bl	8001e14 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40001000 	.word	0x40001000

08000f74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f78:	b672      	cpsid	i
}
 8000f7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f7c:	e7fe      	b.n	8000f7c <Error_Handler+0x8>
	...

08000f80 <show_time_date_itm>:


#include "main.h"

void show_time_date_itm(void)
 {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b08a      	sub	sp, #40	; 0x28
 8000f84:	af02      	add	r7, sp, #8
	RTC_DateTypeDef rtc_date;
	RTC_TimeTypeDef rtc_time;

	memset(&rtc_date,0,sizeof(rtc_date));
 8000f86:	f107 0318 	add.w	r3, r7, #24
 8000f8a:	2204      	movs	r2, #4
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f006 ff3a 	bl	8007e08 <memset>
	memset(&rtc_time,0,sizeof(rtc_time));
 8000f94:	1d3b      	adds	r3, r7, #4
 8000f96:	2214      	movs	r2, #20
 8000f98:	2100      	movs	r1, #0
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f006 ff34 	bl	8007e08 <memset>

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8000fa0:	1d3b      	adds	r3, r7, #4
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4815      	ldr	r0, [pc, #84]	; (8000ffc <show_time_date_itm+0x7c>)
 8000fa8:	f002 f954 	bl	8003254 <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8000fac:	f107 0318 	add.w	r3, r7, #24
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4811      	ldr	r0, [pc, #68]	; (8000ffc <show_time_date_itm+0x7c>)
 8000fb6:	f002 fa52 	bl	800345e <HAL_RTC_GetDate>

	char *format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d101      	bne.n	8000fc4 <show_time_date_itm+0x44>
 8000fc0:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <show_time_date_itm+0x80>)
 8000fc2:	e000      	b.n	8000fc6 <show_time_date_itm+0x46>
 8000fc4:	4b0f      	ldr	r3, [pc, #60]	; (8001004 <show_time_date_itm+0x84>)
 8000fc6:	61fb      	str	r3, [r7, #28]


	printf("%02d:%02d:%02d [%s]",rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds,format);
 8000fc8:	793b      	ldrb	r3, [r7, #4]
 8000fca:	4619      	mov	r1, r3
 8000fcc:	797b      	ldrb	r3, [r7, #5]
 8000fce:	461a      	mov	r2, r3
 8000fd0:	79bb      	ldrb	r3, [r7, #6]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	4603      	mov	r3, r0
 8000fda:	480b      	ldr	r0, [pc, #44]	; (8001008 <show_time_date_itm+0x88>)
 8000fdc:	f006 ff1c 	bl	8007e18 <iprintf>
	printf("\t%02d-%02d-%2d\n",rtc_date.Month, rtc_date.Date, 2000 + rtc_date.Year);
 8000fe0:	7e7b      	ldrb	r3, [r7, #25]
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	7ebb      	ldrb	r3, [r7, #26]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	7efb      	ldrb	r3, [r7, #27]
 8000fea:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000fee:	4807      	ldr	r0, [pc, #28]	; (800100c <show_time_date_itm+0x8c>)
 8000ff0:	f006 ff12 	bl	8007e18 <iprintf>

 }
 8000ff4:	bf00      	nop
 8000ff6:	3720      	adds	r7, #32
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20012ea4 	.word	0x20012ea4
 8001000:	080090c0 	.word	0x080090c0
 8001004:	080090c4 	.word	0x080090c4
 8001008:	080090c8 	.word	0x080090c8
 800100c:	080090dc 	.word	0x080090dc

08001010 <show_time_date>:

void show_time_date(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b08c      	sub	sp, #48	; 0x30
 8001014:	af04      	add	r7, sp, #16
	RTC_TimeTypeDef rtc_time;

	static char *time = showtime;
	static char *date = showdate;

	memset(&rtc_date,0,sizeof(rtc_date));
 8001016:	f107 0318 	add.w	r3, r7, #24
 800101a:	2204      	movs	r2, #4
 800101c:	2100      	movs	r1, #0
 800101e:	4618      	mov	r0, r3
 8001020:	f006 fef2 	bl	8007e08 <memset>
	memset(&rtc_time,0,sizeof(rtc_time));
 8001024:	1d3b      	adds	r3, r7, #4
 8001026:	2214      	movs	r2, #20
 8001028:	2100      	movs	r1, #0
 800102a:	4618      	mov	r0, r3
 800102c:	f006 feec 	bl	8007e08 <memset>

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8001030:	1d3b      	adds	r3, r7, #4
 8001032:	2200      	movs	r2, #0
 8001034:	4619      	mov	r1, r3
 8001036:	4821      	ldr	r0, [pc, #132]	; (80010bc <show_time_date+0xac>)
 8001038:	f002 f90c 	bl	8003254 <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 800103c:	f107 0318 	add.w	r3, r7, #24
 8001040:	2200      	movs	r2, #0
 8001042:	4619      	mov	r1, r3
 8001044:	481d      	ldr	r0, [pc, #116]	; (80010bc <show_time_date+0xac>)
 8001046:	f002 fa0a 	bl	800345e <HAL_RTC_GetDate>

	char *format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d101      	bne.n	8001054 <show_time_date+0x44>
 8001050:	4b1b      	ldr	r3, [pc, #108]	; (80010c0 <show_time_date+0xb0>)
 8001052:	e000      	b.n	8001056 <show_time_date+0x46>
 8001054:	4b1b      	ldr	r3, [pc, #108]	; (80010c4 <show_time_date+0xb4>)
 8001056:	61fb      	str	r3, [r7, #28]

	/* Display time Format : hh:mm:ss [AM/PM] */
	sprintf((char*)showtime,"%s:\t%02d:%02d:%02d [%s]","\nCurrent Time&Date",rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds,format);
 8001058:	793b      	ldrb	r3, [r7, #4]
 800105a:	4618      	mov	r0, r3
 800105c:	797b      	ldrb	r3, [r7, #5]
 800105e:	461a      	mov	r2, r3
 8001060:	79bb      	ldrb	r3, [r7, #6]
 8001062:	4619      	mov	r1, r3
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	9302      	str	r3, [sp, #8]
 8001068:	9101      	str	r1, [sp, #4]
 800106a:	9200      	str	r2, [sp, #0]
 800106c:	4603      	mov	r3, r0
 800106e:	4a16      	ldr	r2, [pc, #88]	; (80010c8 <show_time_date+0xb8>)
 8001070:	4916      	ldr	r1, [pc, #88]	; (80010cc <show_time_date+0xbc>)
 8001072:	4817      	ldr	r0, [pc, #92]	; (80010d0 <show_time_date+0xc0>)
 8001074:	f006 fee8 	bl	8007e48 <siprintf>
	xQueueSend(q_print,&time,portMAX_DELAY);
 8001078:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <show_time_date+0xc4>)
 800107a:	6818      	ldr	r0, [r3, #0]
 800107c:	2300      	movs	r3, #0
 800107e:	f04f 32ff 	mov.w	r2, #4294967295
 8001082:	4915      	ldr	r1, [pc, #84]	; (80010d8 <show_time_date+0xc8>)
 8001084:	f003 fed2 	bl	8004e2c <xQueueGenericSend>

	/* Display date Format : date-month-year */
	sprintf((char*)showdate,"\t%02d-%02d-%2d\n",rtc_date.Month, rtc_date.Date, 2000 + rtc_date.Year);
 8001088:	7e7b      	ldrb	r3, [r7, #25]
 800108a:	461a      	mov	r2, r3
 800108c:	7ebb      	ldrb	r3, [r7, #26]
 800108e:	4619      	mov	r1, r3
 8001090:	7efb      	ldrb	r3, [r7, #27]
 8001092:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001096:	9300      	str	r3, [sp, #0]
 8001098:	460b      	mov	r3, r1
 800109a:	4910      	ldr	r1, [pc, #64]	; (80010dc <show_time_date+0xcc>)
 800109c:	4810      	ldr	r0, [pc, #64]	; (80010e0 <show_time_date+0xd0>)
 800109e:	f006 fed3 	bl	8007e48 <siprintf>
	xQueueSend(q_print,&date,portMAX_DELAY);
 80010a2:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <show_time_date+0xc4>)
 80010a4:	6818      	ldr	r0, [r3, #0]
 80010a6:	2300      	movs	r3, #0
 80010a8:	f04f 32ff 	mov.w	r2, #4294967295
 80010ac:	490d      	ldr	r1, [pc, #52]	; (80010e4 <show_time_date+0xd4>)
 80010ae:	f003 febd 	bl	8004e2c <xQueueGenericSend>
}
 80010b2:	bf00      	nop
 80010b4:	3720      	adds	r7, #32
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20012ea4 	.word	0x20012ea4
 80010c0:	080090c0 	.word	0x080090c0
 80010c4:	080090c4 	.word	0x080090c4
 80010c8:	080090ec 	.word	0x080090ec
 80010cc:	08009100 	.word	0x08009100
 80010d0:	200000b4 	.word	0x200000b4
 80010d4:	20012ea0 	.word	0x20012ea0
 80010d8:	20000008 	.word	0x20000008
 80010dc:	080090dc 	.word	0x080090dc
 80010e0:	200000dc 	.word	0x200000dc
 80010e4:	2000000c 	.word	0x2000000c

080010e8 <rtc_configure_time>:


void rtc_configure_time(RTC_TimeTypeDef *time)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]

	time->TimeFormat = RTC_HOURFORMAT12_AM;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	70da      	strb	r2, [r3, #3]
	time->DayLightSaving = RTC_DAYLIGHTSAVING_NONE ;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2200      	movs	r2, #0
 80010fa:	60da      	str	r2, [r3, #12]
	time->StoreOperation = RTC_STOREOPERATION_RESET;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2200      	movs	r2, #0
 8001100:	611a      	str	r2, [r3, #16]

	HAL_RTC_SetTime(&hrtc,time,RTC_FORMAT_BIN);
 8001102:	2200      	movs	r2, #0
 8001104:	6879      	ldr	r1, [r7, #4]
 8001106:	4803      	ldr	r0, [pc, #12]	; (8001114 <rtc_configure_time+0x2c>)
 8001108:	f001 ffe7 	bl	80030da <HAL_RTC_SetTime>
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	20012ea4 	.word	0x20012ea4

08001118 <rtc_configure_date>:


void rtc_configure_date(RTC_DateTypeDef *date)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
	HAL_RTC_SetDate(&hrtc,date,RTC_FORMAT_BIN);
 8001120:	2200      	movs	r2, #0
 8001122:	6879      	ldr	r1, [r7, #4]
 8001124:	4803      	ldr	r0, [pc, #12]	; (8001134 <rtc_configure_date+0x1c>)
 8001126:	f002 f8f3 	bl	8003310 <HAL_RTC_SetDate>
}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20012ea4 	.word	0x20012ea4

08001138 <validate_rtc_information>:


int validate_rtc_information(RTC_TimeTypeDef *time , RTC_DateTypeDef *date)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
	if(time){
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d00d      	beq.n	8001164 <validate_rtc_information+0x2c>
		if( (time->Hours > 12) || (time->Minutes > 59) || (time->Seconds > 59) )
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b0c      	cmp	r3, #12
 800114e:	d807      	bhi.n	8001160 <validate_rtc_information+0x28>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	785b      	ldrb	r3, [r3, #1]
 8001154:	2b3b      	cmp	r3, #59	; 0x3b
 8001156:	d803      	bhi.n	8001160 <validate_rtc_information+0x28>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	789b      	ldrb	r3, [r3, #2]
 800115c:	2b3b      	cmp	r3, #59	; 0x3b
 800115e:	d901      	bls.n	8001164 <validate_rtc_information+0x2c>
			return 1;
 8001160:	2301      	movs	r3, #1
 8001162:	e015      	b.n	8001190 <validate_rtc_information+0x58>
	}

	if(date){
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d011      	beq.n	800118e <validate_rtc_information+0x56>
		if( (date->Date > 31) || (date->WeekDay > 7) || (date->Year > 99) || (date->Month > 12) )
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	789b      	ldrb	r3, [r3, #2]
 800116e:	2b1f      	cmp	r3, #31
 8001170:	d80b      	bhi.n	800118a <validate_rtc_information+0x52>
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2b07      	cmp	r3, #7
 8001178:	d807      	bhi.n	800118a <validate_rtc_information+0x52>
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	78db      	ldrb	r3, [r3, #3]
 800117e:	2b63      	cmp	r3, #99	; 0x63
 8001180:	d803      	bhi.n	800118a <validate_rtc_information+0x52>
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	785b      	ldrb	r3, [r3, #1]
 8001186:	2b0c      	cmp	r3, #12
 8001188:	d901      	bls.n	800118e <validate_rtc_information+0x56>
			return 1;
 800118a:	2301      	movs	r3, #1
 800118c:	e000      	b.n	8001190 <validate_rtc_information+0x58>
	}

	return 0;
 800118e:	2300      	movs	r3, #0
}
 8001190:	4618      	mov	r0, r3
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	607b      	str	r3, [r7, #4]
 80011a6:	4b10      	ldr	r3, [pc, #64]	; (80011e8 <HAL_MspInit+0x4c>)
 80011a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011aa:	4a0f      	ldr	r2, [pc, #60]	; (80011e8 <HAL_MspInit+0x4c>)
 80011ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011b0:	6453      	str	r3, [r2, #68]	; 0x44
 80011b2:	4b0d      	ldr	r3, [pc, #52]	; (80011e8 <HAL_MspInit+0x4c>)
 80011b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	603b      	str	r3, [r7, #0]
 80011c2:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <HAL_MspInit+0x4c>)
 80011c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c6:	4a08      	ldr	r2, [pc, #32]	; (80011e8 <HAL_MspInit+0x4c>)
 80011c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011cc:	6413      	str	r3, [r2, #64]	; 0x40
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <HAL_MspInit+0x4c>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d6:	603b      	str	r3, [r7, #0]
 80011d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 80011da:	f006 fa3d 	bl	8007658 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40023800 	.word	0x40023800

080011ec <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011f4:	f107 0308 	add.w	r3, r7, #8
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a0c      	ldr	r2, [pc, #48]	; (8001238 <HAL_RTC_MspInit+0x4c>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d111      	bne.n	8001230 <HAL_RTC_MspInit+0x44>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800120c:	2302      	movs	r3, #2
 800120e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001210:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001214:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001216:	f107 0308 	add.w	r3, r7, #8
 800121a:	4618      	mov	r0, r3
 800121c:	f001 fdea 	bl	8002df4 <HAL_RCCEx_PeriphCLKConfig>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001226:	f7ff fea5 	bl	8000f74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800122a:	4b04      	ldr	r3, [pc, #16]	; (800123c <HAL_RTC_MspInit+0x50>)
 800122c:	2201      	movs	r2, #1
 800122e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001230:	bf00      	nop
 8001232:	3718      	adds	r7, #24
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40002800 	.word	0x40002800
 800123c:	42470e3c 	.word	0x42470e3c

08001240 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08a      	sub	sp, #40	; 0x28
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a1d      	ldr	r2, [pc, #116]	; (80012d4 <HAL_UART_MspInit+0x94>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d133      	bne.n	80012ca <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	613b      	str	r3, [r7, #16]
 8001266:	4b1c      	ldr	r3, [pc, #112]	; (80012d8 <HAL_UART_MspInit+0x98>)
 8001268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126a:	4a1b      	ldr	r2, [pc, #108]	; (80012d8 <HAL_UART_MspInit+0x98>)
 800126c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001270:	6413      	str	r3, [r2, #64]	; 0x40
 8001272:	4b19      	ldr	r3, [pc, #100]	; (80012d8 <HAL_UART_MspInit+0x98>)
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127a:	613b      	str	r3, [r7, #16]
 800127c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <HAL_UART_MspInit+0x98>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	4a14      	ldr	r2, [pc, #80]	; (80012d8 <HAL_UART_MspInit+0x98>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	6313      	str	r3, [r2, #48]	; 0x30
 800128e:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <HAL_UART_MspInit+0x98>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800129a:	230c      	movs	r3, #12
 800129c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129e:	2302      	movs	r3, #2
 80012a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a6:	2303      	movs	r3, #3
 80012a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012aa:	2307      	movs	r3, #7
 80012ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ae:	f107 0314 	add.w	r3, r7, #20
 80012b2:	4619      	mov	r1, r3
 80012b4:	4809      	ldr	r0, [pc, #36]	; (80012dc <HAL_UART_MspInit+0x9c>)
 80012b6:	f000 ff41 	bl	800213c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 80012ba:	2200      	movs	r2, #0
 80012bc:	2106      	movs	r1, #6
 80012be:	2026      	movs	r0, #38	; 0x26
 80012c0:	f000 fe80 	bl	8001fc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012c4:	2026      	movs	r0, #38	; 0x26
 80012c6:	f000 fe99 	bl	8001ffc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012ca:	bf00      	nop
 80012cc:	3728      	adds	r7, #40	; 0x28
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40004400 	.word	0x40004400
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40020000 	.word	0x40020000

080012e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08c      	sub	sp, #48	; 0x30
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80012f0:	2200      	movs	r2, #0
 80012f2:	6879      	ldr	r1, [r7, #4]
 80012f4:	2036      	movs	r0, #54	; 0x36
 80012f6:	f000 fe65 	bl	8001fc4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80012fa:	2036      	movs	r0, #54	; 0x36
 80012fc:	f000 fe7e 	bl	8001ffc <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001300:	2300      	movs	r3, #0
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	4b1f      	ldr	r3, [pc, #124]	; (8001384 <HAL_InitTick+0xa4>)
 8001306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001308:	4a1e      	ldr	r2, [pc, #120]	; (8001384 <HAL_InitTick+0xa4>)
 800130a:	f043 0310 	orr.w	r3, r3, #16
 800130e:	6413      	str	r3, [r2, #64]	; 0x40
 8001310:	4b1c      	ldr	r3, [pc, #112]	; (8001384 <HAL_InitTick+0xa4>)
 8001312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001314:	f003 0310 	and.w	r3, r3, #16
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800131c:	f107 0210 	add.w	r2, r7, #16
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	4611      	mov	r1, r2
 8001326:	4618      	mov	r0, r3
 8001328:	f001 fd32 	bl	8002d90 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800132c:	f001 fd08 	bl	8002d40 <HAL_RCC_GetPCLK1Freq>
 8001330:	4603      	mov	r3, r0
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001338:	4a13      	ldr	r2, [pc, #76]	; (8001388 <HAL_InitTick+0xa8>)
 800133a:	fba2 2303 	umull	r2, r3, r2, r3
 800133e:	0c9b      	lsrs	r3, r3, #18
 8001340:	3b01      	subs	r3, #1
 8001342:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001344:	4b11      	ldr	r3, [pc, #68]	; (800138c <HAL_InitTick+0xac>)
 8001346:	4a12      	ldr	r2, [pc, #72]	; (8001390 <HAL_InitTick+0xb0>)
 8001348:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800134a:	4b10      	ldr	r3, [pc, #64]	; (800138c <HAL_InitTick+0xac>)
 800134c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001350:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001352:	4a0e      	ldr	r2, [pc, #56]	; (800138c <HAL_InitTick+0xac>)
 8001354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001356:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001358:	4b0c      	ldr	r3, [pc, #48]	; (800138c <HAL_InitTick+0xac>)
 800135a:	2200      	movs	r2, #0
 800135c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800135e:	4b0b      	ldr	r3, [pc, #44]	; (800138c <HAL_InitTick+0xac>)
 8001360:	2200      	movs	r2, #0
 8001362:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001364:	4809      	ldr	r0, [pc, #36]	; (800138c <HAL_InitTick+0xac>)
 8001366:	f002 f959 	bl	800361c <HAL_TIM_Base_Init>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d104      	bne.n	800137a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001370:	4806      	ldr	r0, [pc, #24]	; (800138c <HAL_InitTick+0xac>)
 8001372:	f002 f9ad 	bl	80036d0 <HAL_TIM_Base_Start_IT>
 8001376:	4603      	mov	r3, r0
 8001378:	e000      	b.n	800137c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
}
 800137c:	4618      	mov	r0, r3
 800137e:	3730      	adds	r7, #48	; 0x30
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40023800 	.word	0x40023800
 8001388:	431bde83 	.word	0x431bde83
 800138c:	20012f14 	.word	0x20012f14
 8001390:	40001000 	.word	0x40001000

08001394 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001398:	e7fe      	b.n	8001398 <NMI_Handler+0x4>

0800139a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800139a:	b480      	push	{r7}
 800139c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800139e:	e7fe      	b.n	800139e <HardFault_Handler+0x4>

080013a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013a4:	e7fe      	b.n	80013a4 <MemManage_Handler+0x4>

080013a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013a6:	b480      	push	{r7}
 80013a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013aa:	e7fe      	b.n	80013aa <BusFault_Handler+0x4>

080013ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013b0:	e7fe      	b.n	80013b0 <UsageFault_Handler+0x4>

080013b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013b2:	b480      	push	{r7}
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013b6:	bf00      	nop
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80013c4:	4802      	ldr	r0, [pc, #8]	; (80013d0 <USART2_IRQHandler+0x10>)
 80013c6:	f002 fce7 	bl	8003d98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20012ed0 	.word	0x20012ed0

080013d4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80013d8:	4802      	ldr	r0, [pc, #8]	; (80013e4 <TIM6_DAC_IRQHandler+0x10>)
 80013da:	f002 f9e9 	bl	80037b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20012f14 	.word	0x20012f14

080013e8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]
 80013f8:	e00a      	b.n	8001410 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80013fa:	f3af 8000 	nop.w
 80013fe:	4601      	mov	r1, r0
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	1c5a      	adds	r2, r3, #1
 8001404:	60ba      	str	r2, [r7, #8]
 8001406:	b2ca      	uxtb	r2, r1
 8001408:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	3301      	adds	r3, #1
 800140e:	617b      	str	r3, [r7, #20]
 8001410:	697a      	ldr	r2, [r7, #20]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	429a      	cmp	r2, r3
 8001416:	dbf0      	blt.n	80013fa <_read+0x12>
	}

return len;
 8001418:	687b      	ldr	r3, [r7, #4]
}
 800141a:	4618      	mov	r0, r3
 800141c:	3718      	adds	r7, #24
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b086      	sub	sp, #24
 8001426:	af00      	add	r7, sp, #0
 8001428:	60f8      	str	r0, [r7, #12]
 800142a:	60b9      	str	r1, [r7, #8]
 800142c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800142e:	2300      	movs	r3, #0
 8001430:	617b      	str	r3, [r7, #20]
 8001432:	e009      	b.n	8001448 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	1c5a      	adds	r2, r3, #1
 8001438:	60ba      	str	r2, [r7, #8]
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	4618      	mov	r0, r3
 800143e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	3301      	adds	r3, #1
 8001446:	617b      	str	r3, [r7, #20]
 8001448:	697a      	ldr	r2, [r7, #20]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	429a      	cmp	r2, r3
 800144e:	dbf1      	blt.n	8001434 <_write+0x12>
	}
	return len;
 8001450:	687b      	ldr	r3, [r7, #4]
}
 8001452:	4618      	mov	r0, r3
 8001454:	3718      	adds	r7, #24
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <_close>:

int _close(int file)
{
 800145a:	b480      	push	{r7}
 800145c:	b083      	sub	sp, #12
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
	return -1;
 8001462:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001466:	4618      	mov	r0, r3
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr

08001472 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001472:	b480      	push	{r7}
 8001474:	b083      	sub	sp, #12
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
 800147a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001482:	605a      	str	r2, [r3, #4]
	return 0;
 8001484:	2300      	movs	r3, #0
}
 8001486:	4618      	mov	r0, r3
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <_isatty>:

int _isatty(int file)
{
 8001492:	b480      	push	{r7}
 8001494:	b083      	sub	sp, #12
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
	return 1;
 800149a:	2301      	movs	r3, #1
}
 800149c:	4618      	mov	r0, r3
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
	return 0;
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3714      	adds	r7, #20
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
	...

080014c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014cc:	4a14      	ldr	r2, [pc, #80]	; (8001520 <_sbrk+0x5c>)
 80014ce:	4b15      	ldr	r3, [pc, #84]	; (8001524 <_sbrk+0x60>)
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014d8:	4b13      	ldr	r3, [pc, #76]	; (8001528 <_sbrk+0x64>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d102      	bne.n	80014e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014e0:	4b11      	ldr	r3, [pc, #68]	; (8001528 <_sbrk+0x64>)
 80014e2:	4a12      	ldr	r2, [pc, #72]	; (800152c <_sbrk+0x68>)
 80014e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014e6:	4b10      	ldr	r3, [pc, #64]	; (8001528 <_sbrk+0x64>)
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4413      	add	r3, r2
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d207      	bcs.n	8001504 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014f4:	f006 fc50 	bl	8007d98 <__errno>
 80014f8:	4603      	mov	r3, r0
 80014fa:	220c      	movs	r2, #12
 80014fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001502:	e009      	b.n	8001518 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001504:	4b08      	ldr	r3, [pc, #32]	; (8001528 <_sbrk+0x64>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800150a:	4b07      	ldr	r3, [pc, #28]	; (8001528 <_sbrk+0x64>)
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4413      	add	r3, r2
 8001512:	4a05      	ldr	r2, [pc, #20]	; (8001528 <_sbrk+0x64>)
 8001514:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001516:	68fb      	ldr	r3, [r7, #12]
}
 8001518:	4618      	mov	r0, r3
 800151a:	3718      	adds	r7, #24
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20020000 	.word	0x20020000
 8001524:	00000400 	.word	0x00000400
 8001528:	20000104 	.word	0x20000104
 800152c:	20012fb0 	.word	0x20012fb0

08001530 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001534:	4b06      	ldr	r3, [pc, #24]	; (8001550 <SystemInit+0x20>)
 8001536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800153a:	4a05      	ldr	r2, [pc, #20]	; (8001550 <SystemInit+0x20>)
 800153c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001540:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	e000ed00 	.word	0xe000ed00

08001554 <menu_task>:
int extract_command(command_t *cmd);

const char *msg_inv = "////Invalid option////\n";

void menu_task(void *param)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b088      	sub	sp, #32
 8001558:	af02      	add	r7, sp, #8
 800155a:	6078      	str	r0, [r7, #4]

	command_t *cmd;

	int option;

	const char* msg_menu = "\n========================\n"
 800155c:	4b31      	ldr	r3, [pc, #196]	; (8001624 <menu_task+0xd0>)
 800155e:	60bb      	str	r3, [r7, #8]
								"Date and time ----> 1\n"
								"Exit          ----> 2\n"
								"Enter your choice here : ";
	while(1)
	{
		xQueueSend(q_print, &msg_menu, portMAX_DELAY);
 8001560:	4b31      	ldr	r3, [pc, #196]	; (8001628 <menu_task+0xd4>)
 8001562:	6818      	ldr	r0, [r3, #0]
 8001564:	f107 0108 	add.w	r1, r7, #8
 8001568:	2300      	movs	r3, #0
 800156a:	f04f 32ff 	mov.w	r2, #4294967295
 800156e:	f003 fc5d 	bl	8004e2c <xQueueGenericSend>

		// wait for menu commands
		xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 8001572:	f107 030c 	add.w	r3, r7, #12
 8001576:	f04f 32ff 	mov.w	r2, #4294967295
 800157a:	9200      	str	r2, [sp, #0]
 800157c:	2200      	movs	r2, #0
 800157e:	2100      	movs	r1, #0
 8001580:	2000      	movs	r0, #0
 8001582:	f005 f847 	bl	8006614 <xTaskGenericNotifyWait>
		cmd = (command_t*) cmd_addr;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	617b      	str	r3, [r7, #20]

		if(cmd->len == 1)
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	7a9b      	ldrb	r3, [r3, #10]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d133      	bne.n	80015fa <menu_task+0xa6>
		{
			option = cmd->payload[0] - 48;
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	3b30      	subs	r3, #48	; 0x30
 8001598:	613b      	str	r3, [r7, #16]
			switch(option)
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	2b02      	cmp	r3, #2
 800159e:	d035      	beq.n	800160c <menu_task+0xb8>
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	dc20      	bgt.n	80015e8 <menu_task+0x94>
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d003      	beq.n	80015b4 <menu_task+0x60>
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d00d      	beq.n	80015ce <menu_task+0x7a>
 80015b2:	e019      	b.n	80015e8 <menu_task+0x94>
			{
				case 0:
					curr_state = sLedEffect;
 80015b4:	4b1d      	ldr	r3, [pc, #116]	; (800162c <menu_task+0xd8>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_led_task, 0, eNoAction);
 80015ba:	4b1d      	ldr	r3, [pc, #116]	; (8001630 <menu_task+0xdc>)
 80015bc:	6818      	ldr	r0, [r3, #0]
 80015be:	2300      	movs	r3, #0
 80015c0:	9300      	str	r3, [sp, #0]
 80015c2:	2300      	movs	r3, #0
 80015c4:	2200      	movs	r2, #0
 80015c6:	2100      	movs	r1, #0
 80015c8:	f005 f8a4 	bl	8006714 <xTaskGenericNotify>
					break;
 80015cc:	e01f      	b.n	800160e <menu_task+0xba>
				case 1:
					curr_state = sRtcMenu;
 80015ce:	4b17      	ldr	r3, [pc, #92]	; (800162c <menu_task+0xd8>)
 80015d0:	2202      	movs	r2, #2
 80015d2:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_rtc_task, 0, eNoAction);
 80015d4:	4b17      	ldr	r3, [pc, #92]	; (8001634 <menu_task+0xe0>)
 80015d6:	6818      	ldr	r0, [r3, #0]
 80015d8:	2300      	movs	r3, #0
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	2300      	movs	r3, #0
 80015de:	2200      	movs	r2, #0
 80015e0:	2100      	movs	r1, #0
 80015e2:	f005 f897 	bl	8006714 <xTaskGenericNotify>
					break;
 80015e6:	e012      	b.n	800160e <menu_task+0xba>
				case 2: /*Implement exit*/
					break;
				default:
					xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 80015e8:	4b0f      	ldr	r3, [pc, #60]	; (8001628 <menu_task+0xd4>)
 80015ea:	6818      	ldr	r0, [r3, #0]
 80015ec:	2300      	movs	r3, #0
 80015ee:	f04f 32ff 	mov.w	r2, #4294967295
 80015f2:	4911      	ldr	r1, [pc, #68]	; (8001638 <menu_task+0xe4>)
 80015f4:	f003 fc1a 	bl	8004e2c <xQueueGenericSend>
					continue;
 80015f8:	e012      	b.n	8001620 <menu_task+0xcc>
			}
		}
		else
		{
			// invalid entry
			xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 80015fa:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <menu_task+0xd4>)
 80015fc:	6818      	ldr	r0, [r3, #0]
 80015fe:	2300      	movs	r3, #0
 8001600:	f04f 32ff 	mov.w	r2, #4294967295
 8001604:	490c      	ldr	r1, [pc, #48]	; (8001638 <menu_task+0xe4>)
 8001606:	f003 fc11 	bl	8004e2c <xQueueGenericSend>
			continue;
 800160a:	e009      	b.n	8001620 <menu_task+0xcc>
					break;
 800160c:	bf00      	nop
		}

		// wait to run again when some other task notifies
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 800160e:	f04f 33ff 	mov.w	r3, #4294967295
 8001612:	9300      	str	r3, [sp, #0]
 8001614:	2300      	movs	r3, #0
 8001616:	2200      	movs	r2, #0
 8001618:	2100      	movs	r1, #0
 800161a:	2000      	movs	r0, #0
 800161c:	f004 fffa 	bl	8006614 <xTaskGenericNotifyWait>
		xQueueSend(q_print, &msg_menu, portMAX_DELAY);
 8001620:	e79e      	b.n	8001560 <menu_task+0xc>
 8001622:	bf00      	nop
 8001624:	08009130 	.word	0x08009130
 8001628:	20012ea0 	.word	0x20012ea0
 800162c:	200000b0 	.word	0x200000b0
 8001630:	20012ec8 	.word	0x20012ec8
 8001634:	20012e90 	.word	0x20012e90
 8001638:	20000014 	.word	0x20000014

0800163c <cmd_handler_task>:
	}
}

void cmd_handler_task(void *param)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b088      	sub	sp, #32
 8001640:	af02      	add	r7, sp, #8
 8001642:	6078      	str	r0, [r7, #4]
	command_t cmd;

	while(1)
	{
		/* TODO: implement notify wait */
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001644:	f04f 33ff 	mov.w	r3, #4294967295
 8001648:	9300      	str	r3, [sp, #0]
 800164a:	2300      	movs	r3, #0
 800164c:	2200      	movs	r2, #0
 800164e:	2100      	movs	r1, #0
 8001650:	2000      	movs	r0, #0
 8001652:	f004 ffdf 	bl	8006614 <xTaskGenericNotifyWait>
 8001656:	6178      	str	r0, [r7, #20]

		if(ret == pdTRUE)
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d1f2      	bne.n	8001644 <cmd_handler_task+0x8>
		{
			/*TODO: process the user data(command) stores in input data queue*/
			process_command(&cmd);
 800165e:	f107 0308 	add.w	r3, r7, #8
 8001662:	4618      	mov	r0, r3
 8001664:	f000 fb14 	bl	8001c90 <process_command>
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001668:	e7ec      	b.n	8001644 <cmd_handler_task+0x8>
	...

0800166c <print_task>:
		}
	}
}

void print_task(void *param)
{
 800166c:	b590      	push	{r4, r7, lr}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
	uint32_t *msg;
	while(1)
	{
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 8001674:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <print_task+0x38>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f107 010c 	add.w	r1, r7, #12
 800167c:	f04f 32ff 	mov.w	r2, #4294967295
 8001680:	4618      	mov	r0, r3
 8001682:	f003 fd7b 	bl	800517c <xQueueReceive>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen((char*)msg), HAL_MAX_DELAY);
 8001686:	68fc      	ldr	r4, [r7, #12]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	4618      	mov	r0, r3
 800168c:	f7fe fdaa 	bl	80001e4 <strlen>
 8001690:	4603      	mov	r3, r0
 8001692:	b29a      	uxth	r2, r3
 8001694:	f04f 33ff 	mov.w	r3, #4294967295
 8001698:	4621      	mov	r1, r4
 800169a:	4803      	ldr	r0, [pc, #12]	; (80016a8 <print_task+0x3c>)
 800169c:	f002 fab9 	bl	8003c12 <HAL_UART_Transmit>
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 80016a0:	e7e8      	b.n	8001674 <print_task+0x8>
 80016a2:	bf00      	nop
 80016a4:	20012ea0 	.word	0x20012ea0
 80016a8:	20012ed0 	.word	0x20012ed0

080016ac <led_task>:
	}
}

void led_task(void *param)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b088      	sub	sp, #32
 80016b0:	af02      	add	r7, sp, #8
 80016b2:	6078      	str	r0, [r7, #4]
	uint32_t cmd_addr;
	command_t *cmd;
	const char* msg_led = "========================\n"
 80016b4:	4b3e      	ldr	r3, [pc, #248]	; (80017b0 <led_task+0x104>)
 80016b6:	60fb      	str	r3, [r7, #12]
						  "Enter your choice here : ";

	while(1)
	{
		/*TODO: Wait for notification (Notify wait) */
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80016b8:	f04f 33ff 	mov.w	r3, #4294967295
 80016bc:	9300      	str	r3, [sp, #0]
 80016be:	2300      	movs	r3, #0
 80016c0:	2200      	movs	r2, #0
 80016c2:	2100      	movs	r1, #0
 80016c4:	2000      	movs	r0, #0
 80016c6:	f004 ffa5 	bl	8006614 <xTaskGenericNotifyWait>

		/*TODO: Print LED menu */
		xQueueSend(q_print, &msg_led, portMAX_DELAY);
 80016ca:	4b3a      	ldr	r3, [pc, #232]	; (80017b4 <led_task+0x108>)
 80016cc:	6818      	ldr	r0, [r3, #0]
 80016ce:	f107 010c 	add.w	r1, r7, #12
 80016d2:	2300      	movs	r3, #0
 80016d4:	f04f 32ff 	mov.w	r2, #4294967295
 80016d8:	f003 fba8 	bl	8004e2c <xQueueGenericSend>

		/*TODO: wait for LED command (Notify wait) */
		xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 80016dc:	f107 0310 	add.w	r3, r7, #16
 80016e0:	f04f 32ff 	mov.w	r2, #4294967295
 80016e4:	9200      	str	r2, [sp, #0]
 80016e6:	2200      	movs	r2, #0
 80016e8:	2100      	movs	r1, #0
 80016ea:	2000      	movs	r0, #0
 80016ec:	f004 ff92 	bl	8006614 <xTaskGenericNotifyWait>
		cmd = (command_t*) cmd_addr;
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	617b      	str	r3, [r7, #20]

		if(cmd->len <= 4)
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	7a9b      	ldrb	r3, [r3, #10]
 80016f8:	2b04      	cmp	r3, #4
 80016fa:	d843      	bhi.n	8001784 <led_task+0xd8>
		{
			if(! strcmp((char*)cmd->payload,"none"))
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	492e      	ldr	r1, [pc, #184]	; (80017b8 <led_task+0x10c>)
 8001700:	4618      	mov	r0, r3
 8001702:	f7fe fd65 	bl	80001d0 <strcmp>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d102      	bne.n	8001712 <led_task+0x66>
				led_effect_stop();
 800170c:	f7fe ff60 	bl	80005d0 <led_effect_stop>
 8001710:	e040      	b.n	8001794 <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e1"))
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	4929      	ldr	r1, [pc, #164]	; (80017bc <led_task+0x110>)
 8001716:	4618      	mov	r0, r3
 8001718:	f7fe fd5a 	bl	80001d0 <strcmp>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d103      	bne.n	800172a <led_task+0x7e>
				led_effect(1);
 8001722:	2001      	movs	r0, #1
 8001724:	f7fe ff38 	bl	8000598 <led_effect>
 8001728:	e034      	b.n	8001794 <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e2"))
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	4924      	ldr	r1, [pc, #144]	; (80017c0 <led_task+0x114>)
 800172e:	4618      	mov	r0, r3
 8001730:	f7fe fd4e 	bl	80001d0 <strcmp>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d103      	bne.n	8001742 <led_task+0x96>
				led_effect(2);
 800173a:	2002      	movs	r0, #2
 800173c:	f7fe ff2c 	bl	8000598 <led_effect>
 8001740:	e028      	b.n	8001794 <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e3"))
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	491f      	ldr	r1, [pc, #124]	; (80017c4 <led_task+0x118>)
 8001746:	4618      	mov	r0, r3
 8001748:	f7fe fd42 	bl	80001d0 <strcmp>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d103      	bne.n	800175a <led_task+0xae>
				led_effect(3);
 8001752:	2003      	movs	r0, #3
 8001754:	f7fe ff20 	bl	8000598 <led_effect>
 8001758:	e01c      	b.n	8001794 <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e4"))
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	491a      	ldr	r1, [pc, #104]	; (80017c8 <led_task+0x11c>)
 800175e:	4618      	mov	r0, r3
 8001760:	f7fe fd36 	bl	80001d0 <strcmp>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d103      	bne.n	8001772 <led_task+0xc6>
				led_effect(4);
 800176a:	2004      	movs	r0, #4
 800176c:	f7fe ff14 	bl	8000598 <led_effect>
 8001770:	e010      	b.n	8001794 <led_task+0xe8>
			else{
				/*TODO: print invalid message */
				xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 8001772:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <led_task+0x108>)
 8001774:	6818      	ldr	r0, [r3, #0]
 8001776:	2300      	movs	r3, #0
 8001778:	f04f 32ff 	mov.w	r2, #4294967295
 800177c:	4913      	ldr	r1, [pc, #76]	; (80017cc <led_task+0x120>)
 800177e:	f003 fb55 	bl	8004e2c <xQueueGenericSend>
 8001782:	e007      	b.n	8001794 <led_task+0xe8>
			}
		}else{
			/*TODO: print invalid message */
			xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 8001784:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <led_task+0x108>)
 8001786:	6818      	ldr	r0, [r3, #0]
 8001788:	2300      	movs	r3, #0
 800178a:	f04f 32ff 	mov.w	r2, #4294967295
 800178e:	490f      	ldr	r1, [pc, #60]	; (80017cc <led_task+0x120>)
 8001790:	f003 fb4c 	bl	8004e2c <xQueueGenericSend>
		}
		/*TODO : update state variable */
		curr_state = sMainMenu;
 8001794:	4b0e      	ldr	r3, [pc, #56]	; (80017d0 <led_task+0x124>)
 8001796:	2200      	movs	r2, #0
 8001798:	701a      	strb	r2, [r3, #0]

		/*TODO : Notify menu task */
		xTaskNotify(handle_menu_task , 0,eNoAction);
 800179a:	4b0e      	ldr	r3, [pc, #56]	; (80017d4 <led_task+0x128>)
 800179c:	6818      	ldr	r0, [r3, #0]
 800179e:	2300      	movs	r3, #0
 80017a0:	9300      	str	r3, [sp, #0]
 80017a2:	2300      	movs	r3, #0
 80017a4:	2200      	movs	r2, #0
 80017a6:	2100      	movs	r1, #0
 80017a8:	f004 ffb4 	bl	8006714 <xTaskGenericNotify>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80017ac:	e784      	b.n	80016b8 <led_task+0xc>
 80017ae:	bf00      	nop
 80017b0:	080091d8 	.word	0x080091d8
 80017b4:	20012ea0 	.word	0x20012ea0
 80017b8:	08009250 	.word	0x08009250
 80017bc:	08009258 	.word	0x08009258
 80017c0:	0800925c 	.word	0x0800925c
 80017c4:	08009260 	.word	0x08009260
 80017c8:	08009264 	.word	0x08009264
 80017cc:	20000014 	.word	0x20000014
 80017d0:	200000b0 	.word	0x200000b0
 80017d4:	20012e9c 	.word	0x20012e9c

080017d8 <getnumber>:
	}
}

uint8_t getnumber(uint8_t *p , int len)
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]

	int value ;

	if(len > 1)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	dd0f      	ble.n	8001808 <getnumber+0x30>
	   value =  ( ((p[0]-48) * 10) + (p[1] - 48) );
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80017f0:	4613      	mov	r3, r2
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	4413      	add	r3, r2
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	461a      	mov	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	3301      	adds	r3, #1
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	3b30      	subs	r3, #48	; 0x30
 8001802:	4413      	add	r3, r2
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	e003      	b.n	8001810 <getnumber+0x38>
	else
		value = p[0] - 48;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	3b30      	subs	r3, #48	; 0x30
 800180e:	60fb      	str	r3, [r7, #12]

	return value;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	b2db      	uxtb	r3, r3

}
 8001814:	4618      	mov	r0, r3
 8001816:	3714      	adds	r7, #20
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <rtc_task>:

void rtc_task(void *param)
{
 8001820:	b590      	push	{r4, r7, lr}
 8001822:	b09b      	sub	sp, #108	; 0x6c
 8001824:	af02      	add	r7, sp, #8
 8001826:	6078      	str	r0, [r7, #4]
	const char* msg_rtc1 = "========================\n"
 8001828:	4bb2      	ldr	r3, [pc, #712]	; (8001af4 <rtc_task+0x2d4>)
 800182a:	64fb      	str	r3, [r7, #76]	; 0x4c
							"|         RTC          |\n"
							"========================\n";

	const char* msg_rtc2 = "Configure Time            ----> 0\n"
 800182c:	4bb2      	ldr	r3, [pc, #712]	; (8001af8 <rtc_task+0x2d8>)
 800182e:	64bb      	str	r3, [r7, #72]	; 0x48
							"Enable reporting          ----> 2\n"
							"Exit                      ----> 4\n"
							"Enter your choice here : ";


	const char *msg_rtc_hh = "Enter hour(1-12):";
 8001830:	4bb2      	ldr	r3, [pc, #712]	; (8001afc <rtc_task+0x2dc>)
 8001832:	647b      	str	r3, [r7, #68]	; 0x44
	const char *msg_rtc_mm = "Enter minutes(0-59):";
 8001834:	4bb2      	ldr	r3, [pc, #712]	; (8001b00 <rtc_task+0x2e0>)
 8001836:	643b      	str	r3, [r7, #64]	; 0x40
	const char *msg_rtc_ss = "Enter seconds(0-59):";
 8001838:	4bb2      	ldr	r3, [pc, #712]	; (8001b04 <rtc_task+0x2e4>)
 800183a:	63fb      	str	r3, [r7, #60]	; 0x3c

	const char *msg_rtc_dd  = "Enter date(1-31):";
 800183c:	4bb2      	ldr	r3, [pc, #712]	; (8001b08 <rtc_task+0x2e8>)
 800183e:	63bb      	str	r3, [r7, #56]	; 0x38
	const char *msg_rtc_mo  ="Enter month(1-12):";
 8001840:	4bb2      	ldr	r3, [pc, #712]	; (8001b0c <rtc_task+0x2ec>)
 8001842:	637b      	str	r3, [r7, #52]	; 0x34
	const char *msg_rtc_dow  = "Enter day(1-7 sun:1):";
 8001844:	4bb2      	ldr	r3, [pc, #712]	; (8001b10 <rtc_task+0x2f0>)
 8001846:	633b      	str	r3, [r7, #48]	; 0x30
	const char *msg_rtc_yr  = "Enter year(0-99):";
 8001848:	4bb2      	ldr	r3, [pc, #712]	; (8001b14 <rtc_task+0x2f4>)
 800184a:	62fb      	str	r3, [r7, #44]	; 0x2c

	const char *msg_conf = "Configuration successful\n";
 800184c:	4bb2      	ldr	r3, [pc, #712]	; (8001b18 <rtc_task+0x2f8>)
 800184e:	62bb      	str	r3, [r7, #40]	; 0x28
	const char *msg_rtc_report = "Enable time&date reporting(y/n)?: ";
 8001850:	4bb2      	ldr	r3, [pc, #712]	; (8001b1c <rtc_task+0x2fc>)
 8001852:	627b      	str	r3, [r7, #36]	; 0x24
#define YEAR_CONFIG 	2
#define DAY_CONFIG 		3

	while(1){
		/*TODO: Notify wait (wait till someone notifies) */
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001854:	f04f 33ff 	mov.w	r3, #4294967295
 8001858:	9300      	str	r3, [sp, #0]
 800185a:	2300      	movs	r3, #0
 800185c:	2200      	movs	r2, #0
 800185e:	2100      	movs	r1, #0
 8001860:	2000      	movs	r0, #0
 8001862:	f004 fed7 	bl	8006614 <xTaskGenericNotifyWait>

		/*TODO : Print the menu and show current date and time information */
		xQueueSend(q_print,&msg_rtc1,portMAX_DELAY);
 8001866:	4bae      	ldr	r3, [pc, #696]	; (8001b20 <rtc_task+0x300>)
 8001868:	6818      	ldr	r0, [r3, #0]
 800186a:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800186e:	2300      	movs	r3, #0
 8001870:	f04f 32ff 	mov.w	r2, #4294967295
 8001874:	f003 fada 	bl	8004e2c <xQueueGenericSend>
		show_time_date();
 8001878:	f7ff fbca 	bl	8001010 <show_time_date>
		xQueueSend(q_print,&msg_rtc2,portMAX_DELAY);
 800187c:	4ba8      	ldr	r3, [pc, #672]	; (8001b20 <rtc_task+0x300>)
 800187e:	6818      	ldr	r0, [r3, #0]
 8001880:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001884:	2300      	movs	r3, #0
 8001886:	f04f 32ff 	mov.w	r2, #4294967295
 800188a:	f003 facf 	bl	8004e2c <xQueueGenericSend>

		while(curr_state != sMainMenu){
 800188e:	e1e3      	b.n	8001c58 <rtc_task+0x438>

			/*TODO: Wait for command notification (Notify wait) */
			xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 8001890:	f107 0320 	add.w	r3, r7, #32
 8001894:	f04f 32ff 	mov.w	r2, #4294967295
 8001898:	9200      	str	r2, [sp, #0]
 800189a:	2200      	movs	r2, #0
 800189c:	2100      	movs	r1, #0
 800189e:	2000      	movs	r0, #0
 80018a0:	f004 feb8 	bl	8006614 <xTaskGenericNotifyWait>
			cmd = (command_t*)cmd_addr;
 80018a4:	6a3b      	ldr	r3, [r7, #32]
 80018a6:	65fb      	str	r3, [r7, #92]	; 0x5c

			switch(curr_state)
 80018a8:	4b9e      	ldr	r3, [pc, #632]	; (8001b24 <rtc_task+0x304>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	3b02      	subs	r3, #2
 80018ae:	2b03      	cmp	r3, #3
 80018b0:	f200 81d1 	bhi.w	8001c56 <rtc_task+0x436>
 80018b4:	a201      	add	r2, pc, #4	; (adr r2, 80018bc <rtc_task+0x9c>)
 80018b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ba:	bf00      	nop
 80018bc:	080018cd 	.word	0x080018cd
 80018c0:	0800197f 	.word	0x0800197f
 80018c4:	08001a6d 	.word	0x08001a6d
 80018c8:	08001bd3 	.word	0x08001bd3
			{
				case sRtcMenu:{
					/*TODO: process RTC menu commands */
					if(cmd->len == 1)
 80018cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018ce:	7a9b      	ldrb	r3, [r3, #10]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d148      	bne.n	8001966 <rtc_task+0x146>
					{
						menu_code = cmd->payload[0] - 48;
 80018d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	3b30      	subs	r3, #48	; 0x30
 80018da:	653b      	str	r3, [r7, #80]	; 0x50
 80018dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018de:	2b03      	cmp	r3, #3
 80018e0:	d835      	bhi.n	800194e <rtc_task+0x12e>
 80018e2:	a201      	add	r2, pc, #4	; (adr r2, 80018e8 <rtc_task+0xc8>)
 80018e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018e8:	080018f9 	.word	0x080018f9
 80018ec:	08001913 	.word	0x08001913
 80018f0:	0800192d 	.word	0x0800192d
 80018f4:	08001947 	.word	0x08001947
						switch(menu_code)
						{
							case 0:
								curr_state = sRtcTimeConfig;
 80018f8:	4b8a      	ldr	r3, [pc, #552]	; (8001b24 <rtc_task+0x304>)
 80018fa:	2203      	movs	r2, #3
 80018fc:	701a      	strb	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_hh,portMAX_DELAY);
 80018fe:	4b88      	ldr	r3, [pc, #544]	; (8001b20 <rtc_task+0x300>)
 8001900:	6818      	ldr	r0, [r3, #0]
 8001902:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001906:	2300      	movs	r3, #0
 8001908:	f04f 32ff 	mov.w	r2, #4294967295
 800190c:	f003 fa8e 	bl	8004e2c <xQueueGenericSend>
								break;
 8001910:	e034      	b.n	800197c <rtc_task+0x15c>
							case 1:
								curr_state = sRtcDateConfig;
 8001912:	4b84      	ldr	r3, [pc, #528]	; (8001b24 <rtc_task+0x304>)
 8001914:	2204      	movs	r2, #4
 8001916:	701a      	strb	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_dd,portMAX_DELAY);
 8001918:	4b81      	ldr	r3, [pc, #516]	; (8001b20 <rtc_task+0x300>)
 800191a:	6818      	ldr	r0, [r3, #0]
 800191c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001920:	2300      	movs	r3, #0
 8001922:	f04f 32ff 	mov.w	r2, #4294967295
 8001926:	f003 fa81 	bl	8004e2c <xQueueGenericSend>
								break;
 800192a:	e027      	b.n	800197c <rtc_task+0x15c>
							case 2 :
								curr_state = sRtcReport;
 800192c:	4b7d      	ldr	r3, [pc, #500]	; (8001b24 <rtc_task+0x304>)
 800192e:	2205      	movs	r2, #5
 8001930:	701a      	strb	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_report,portMAX_DELAY);
 8001932:	4b7b      	ldr	r3, [pc, #492]	; (8001b20 <rtc_task+0x300>)
 8001934:	6818      	ldr	r0, [r3, #0]
 8001936:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800193a:	2300      	movs	r3, #0
 800193c:	f04f 32ff 	mov.w	r2, #4294967295
 8001940:	f003 fa74 	bl	8004e2c <xQueueGenericSend>
								break;
 8001944:	e01a      	b.n	800197c <rtc_task+0x15c>
							case 3 :
								curr_state = sMainMenu;
 8001946:	4b77      	ldr	r3, [pc, #476]	; (8001b24 <rtc_task+0x304>)
 8001948:	2200      	movs	r2, #0
 800194a:	701a      	strb	r2, [r3, #0]
								break;
 800194c:	e016      	b.n	800197c <rtc_task+0x15c>
							default:
								curr_state = sMainMenu;
 800194e:	4b75      	ldr	r3, [pc, #468]	; (8001b24 <rtc_task+0x304>)
 8001950:	2200      	movs	r2, #0
 8001952:	701a      	strb	r2, [r3, #0]
								xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001954:	4b72      	ldr	r3, [pc, #456]	; (8001b20 <rtc_task+0x300>)
 8001956:	6818      	ldr	r0, [r3, #0]
 8001958:	2300      	movs	r3, #0
 800195a:	f04f 32ff 	mov.w	r2, #4294967295
 800195e:	4972      	ldr	r1, [pc, #456]	; (8001b28 <rtc_task+0x308>)
 8001960:	f003 fa64 	bl	8004e2c <xQueueGenericSend>
 8001964:	e178      	b.n	8001c58 <rtc_task+0x438>
						}

					}else{
						curr_state = sMainMenu;
 8001966:	4b6f      	ldr	r3, [pc, #444]	; (8001b24 <rtc_task+0x304>)
 8001968:	2200      	movs	r2, #0
 800196a:	701a      	strb	r2, [r3, #0]
						xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 800196c:	4b6c      	ldr	r3, [pc, #432]	; (8001b20 <rtc_task+0x300>)
 800196e:	6818      	ldr	r0, [r3, #0]
 8001970:	2300      	movs	r3, #0
 8001972:	f04f 32ff 	mov.w	r2, #4294967295
 8001976:	496c      	ldr	r1, [pc, #432]	; (8001b28 <rtc_task+0x308>)
 8001978:	f003 fa58 	bl	8004e2c <xQueueGenericSend>
					}

					break;}
 800197c:	e16c      	b.n	8001c58 <rtc_task+0x438>

				case sRtcTimeConfig:{
					/*TODO : get hh, mm, ss infor and configure RTC */
					/*TODO: take care of invalid entries */
					switch(rtc_state)
 800197e:	4b6b      	ldr	r3, [pc, #428]	; (8001b2c <rtc_task+0x30c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2b02      	cmp	r3, #2
 8001984:	d03b      	beq.n	80019fe <rtc_task+0x1de>
 8001986:	2b02      	cmp	r3, #2
 8001988:	f300 8166 	bgt.w	8001c58 <rtc_task+0x438>
 800198c:	2b00      	cmp	r3, #0
 800198e:	d002      	beq.n	8001996 <rtc_task+0x176>
 8001990:	2b01      	cmp	r3, #1
 8001992:	d01a      	beq.n	80019ca <rtc_task+0x1aa>
 8001994:	e160      	b.n	8001c58 <rtc_task+0x438>
						{
							case HH_CONFIG:{
								uint8_t hour = getnumber(cmd->payload , cmd->len);
 8001996:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001998:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800199a:	7a9b      	ldrb	r3, [r3, #10]
 800199c:	4619      	mov	r1, r3
 800199e:	4610      	mov	r0, r2
 80019a0:	f7ff ff1a 	bl	80017d8 <getnumber>
 80019a4:	4603      	mov	r3, r0
 80019a6:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
								time.Hours = hour;
 80019aa:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80019ae:	733b      	strb	r3, [r7, #12]
								rtc_state = MM_CONFIG;
 80019b0:	4b5e      	ldr	r3, [pc, #376]	; (8001b2c <rtc_task+0x30c>)
 80019b2:	2201      	movs	r2, #1
 80019b4:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_mm,portMAX_DELAY);
 80019b6:	4b5a      	ldr	r3, [pc, #360]	; (8001b20 <rtc_task+0x300>)
 80019b8:	6818      	ldr	r0, [r3, #0]
 80019ba:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80019be:	2300      	movs	r3, #0
 80019c0:	f04f 32ff 	mov.w	r2, #4294967295
 80019c4:	f003 fa32 	bl	8004e2c <xQueueGenericSend>
								break;}
 80019c8:	e04f      	b.n	8001a6a <rtc_task+0x24a>
							case MM_CONFIG:{
								uint8_t min = getnumber(cmd->payload , cmd->len);
 80019ca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80019cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019ce:	7a9b      	ldrb	r3, [r3, #10]
 80019d0:	4619      	mov	r1, r3
 80019d2:	4610      	mov	r0, r2
 80019d4:	f7ff ff00 	bl	80017d8 <getnumber>
 80019d8:	4603      	mov	r3, r0
 80019da:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
								time.Minutes = min;
 80019de:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80019e2:	737b      	strb	r3, [r7, #13]
								rtc_state = SS_CONFIG;
 80019e4:	4b51      	ldr	r3, [pc, #324]	; (8001b2c <rtc_task+0x30c>)
 80019e6:	2202      	movs	r2, #2
 80019e8:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_ss,portMAX_DELAY);
 80019ea:	4b4d      	ldr	r3, [pc, #308]	; (8001b20 <rtc_task+0x300>)
 80019ec:	6818      	ldr	r0, [r3, #0]
 80019ee:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80019f2:	2300      	movs	r3, #0
 80019f4:	f04f 32ff 	mov.w	r2, #4294967295
 80019f8:	f003 fa18 	bl	8004e2c <xQueueGenericSend>
								break;}
 80019fc:	e035      	b.n	8001a6a <rtc_task+0x24a>
							case SS_CONFIG:{
								uint8_t sec = getnumber(cmd->payload , cmd->len);
 80019fe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001a00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a02:	7a9b      	ldrb	r3, [r3, #10]
 8001a04:	4619      	mov	r1, r3
 8001a06:	4610      	mov	r0, r2
 8001a08:	f7ff fee6 	bl	80017d8 <getnumber>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
								time.Seconds = sec;
 8001a12:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001a16:	73bb      	strb	r3, [r7, #14]
								if(!validate_rtc_information(&time,NULL))
 8001a18:	f107 030c 	add.w	r3, r7, #12
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff fb8a 	bl	8001138 <validate_rtc_information>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d110      	bne.n	8001a4c <rtc_task+0x22c>
								{
									rtc_configure_time(&time);
 8001a2a:	f107 030c 	add.w	r3, r7, #12
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff fb5a 	bl	80010e8 <rtc_configure_time>
									xQueueSend(q_print,&msg_conf,portMAX_DELAY);
 8001a34:	4b3a      	ldr	r3, [pc, #232]	; (8001b20 <rtc_task+0x300>)
 8001a36:	6818      	ldr	r0, [r3, #0]
 8001a38:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	f04f 32ff 	mov.w	r2, #4294967295
 8001a42:	f003 f9f3 	bl	8004e2c <xQueueGenericSend>
									show_time_date();
 8001a46:	f7ff fae3 	bl	8001010 <show_time_date>
 8001a4a:	e007      	b.n	8001a5c <rtc_task+0x23c>
								}else
									xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001a4c:	4b34      	ldr	r3, [pc, #208]	; (8001b20 <rtc_task+0x300>)
 8001a4e:	6818      	ldr	r0, [r3, #0]
 8001a50:	2300      	movs	r3, #0
 8001a52:	f04f 32ff 	mov.w	r2, #4294967295
 8001a56:	4934      	ldr	r1, [pc, #208]	; (8001b28 <rtc_task+0x308>)
 8001a58:	f003 f9e8 	bl	8004e2c <xQueueGenericSend>

								curr_state = sMainMenu;
 8001a5c:	4b31      	ldr	r3, [pc, #196]	; (8001b24 <rtc_task+0x304>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	701a      	strb	r2, [r3, #0]
								rtc_state = 0;
 8001a62:	4b32      	ldr	r3, [pc, #200]	; (8001b2c <rtc_task+0x30c>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
								break;}
 8001a68:	bf00      	nop
						}
					break;}
 8001a6a:	e0f5      	b.n	8001c58 <rtc_task+0x438>

				case sRtcDateConfig:{

					/*TODO : get date, month, day , year info and configure RTC */
					/*TODO: take care of invalid entries */
					switch(rtc_state)
 8001a6c:	4b2f      	ldr	r3, [pc, #188]	; (8001b2c <rtc_task+0x30c>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2b03      	cmp	r3, #3
 8001a72:	f200 80f1 	bhi.w	8001c58 <rtc_task+0x438>
 8001a76:	a201      	add	r2, pc, #4	; (adr r2, 8001a7c <rtc_task+0x25c>)
 8001a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a7c:	08001a8d 	.word	0x08001a8d
 8001a80:	08001ac1 	.word	0x08001ac1
 8001a84:	08001b65 	.word	0x08001b65
 8001a88:	08001b31 	.word	0x08001b31
						{
							case DATE_CONFIG:{
								uint8_t d = getnumber(cmd->payload , cmd->len);
 8001a8c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001a8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a90:	7a9b      	ldrb	r3, [r3, #10]
 8001a92:	4619      	mov	r1, r3
 8001a94:	4610      	mov	r0, r2
 8001a96:	f7ff fe9f 	bl	80017d8 <getnumber>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
								date.Date = d;
 8001aa0:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001aa4:	72bb      	strb	r3, [r7, #10]
								rtc_state = MONTH_CONFIG;
 8001aa6:	4b21      	ldr	r3, [pc, #132]	; (8001b2c <rtc_task+0x30c>)
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_mo,portMAX_DELAY);
 8001aac:	4b1c      	ldr	r3, [pc, #112]	; (8001b20 <rtc_task+0x300>)
 8001aae:	6818      	ldr	r0, [r3, #0]
 8001ab0:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	f04f 32ff 	mov.w	r2, #4294967295
 8001aba:	f003 f9b7 	bl	8004e2c <xQueueGenericSend>
								break;}
 8001abe:	e087      	b.n	8001bd0 <rtc_task+0x3b0>
							case MONTH_CONFIG:{
								uint8_t month = getnumber(cmd->payload , cmd->len);
 8001ac0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001ac2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ac4:	7a9b      	ldrb	r3, [r3, #10]
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4610      	mov	r0, r2
 8001aca:	f7ff fe85 	bl	80017d8 <getnumber>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
								date.Month = month;
 8001ad4:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8001ad8:	727b      	strb	r3, [r7, #9]
								rtc_state = DAY_CONFIG;
 8001ada:	4b14      	ldr	r3, [pc, #80]	; (8001b2c <rtc_task+0x30c>)
 8001adc:	2203      	movs	r2, #3
 8001ade:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_dow,portMAX_DELAY);
 8001ae0:	4b0f      	ldr	r3, [pc, #60]	; (8001b20 <rtc_task+0x300>)
 8001ae2:	6818      	ldr	r0, [r3, #0]
 8001ae4:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001ae8:	2300      	movs	r3, #0
 8001aea:	f04f 32ff 	mov.w	r2, #4294967295
 8001aee:	f003 f99d 	bl	8004e2c <xQueueGenericSend>
								break;}
 8001af2:	e06d      	b.n	8001bd0 <rtc_task+0x3b0>
 8001af4:	08009268 	.word	0x08009268
 8001af8:	080092b4 	.word	0x080092b4
 8001afc:	08009358 	.word	0x08009358
 8001b00:	0800936c 	.word	0x0800936c
 8001b04:	08009384 	.word	0x08009384
 8001b08:	0800939c 	.word	0x0800939c
 8001b0c:	080093b0 	.word	0x080093b0
 8001b10:	080093c4 	.word	0x080093c4
 8001b14:	080093dc 	.word	0x080093dc
 8001b18:	080093f0 	.word	0x080093f0
 8001b1c:	0800940c 	.word	0x0800940c
 8001b20:	20012ea0 	.word	0x20012ea0
 8001b24:	200000b0 	.word	0x200000b0
 8001b28:	20000014 	.word	0x20000014
 8001b2c:	20000108 	.word	0x20000108
							case DAY_CONFIG:{
								uint8_t day = getnumber(cmd->payload , cmd->len);
 8001b30:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001b32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b34:	7a9b      	ldrb	r3, [r3, #10]
 8001b36:	4619      	mov	r1, r3
 8001b38:	4610      	mov	r0, r2
 8001b3a:	f7ff fe4d 	bl	80017d8 <getnumber>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
								date.WeekDay = day;
 8001b44:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001b48:	723b      	strb	r3, [r7, #8]
								rtc_state = YEAR_CONFIG;
 8001b4a:	4b4b      	ldr	r3, [pc, #300]	; (8001c78 <rtc_task+0x458>)
 8001b4c:	2202      	movs	r2, #2
 8001b4e:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_yr,portMAX_DELAY);
 8001b50:	4b4a      	ldr	r3, [pc, #296]	; (8001c7c <rtc_task+0x45c>)
 8001b52:	6818      	ldr	r0, [r3, #0]
 8001b54:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001b58:	2300      	movs	r3, #0
 8001b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8001b5e:	f003 f965 	bl	8004e2c <xQueueGenericSend>
								break;}
 8001b62:	e035      	b.n	8001bd0 <rtc_task+0x3b0>
							case YEAR_CONFIG:{
								uint8_t year = getnumber(cmd->payload , cmd->len);
 8001b64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001b66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b68:	7a9b      	ldrb	r3, [r3, #10]
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4610      	mov	r0, r2
 8001b6e:	f7ff fe33 	bl	80017d8 <getnumber>
 8001b72:	4603      	mov	r3, r0
 8001b74:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
								date.Year = year;
 8001b78:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8001b7c:	72fb      	strb	r3, [r7, #11]

								if(!validate_rtc_information(NULL,&date))
 8001b7e:	f107 0308 	add.w	r3, r7, #8
 8001b82:	4619      	mov	r1, r3
 8001b84:	2000      	movs	r0, #0
 8001b86:	f7ff fad7 	bl	8001138 <validate_rtc_information>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d110      	bne.n	8001bb2 <rtc_task+0x392>
								{
									rtc_configure_date(&date);
 8001b90:	f107 0308 	add.w	r3, r7, #8
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff fabf 	bl	8001118 <rtc_configure_date>
									xQueueSend(q_print,&msg_conf,portMAX_DELAY);
 8001b9a:	4b38      	ldr	r3, [pc, #224]	; (8001c7c <rtc_task+0x45c>)
 8001b9c:	6818      	ldr	r0, [r3, #0]
 8001b9e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ba8:	f003 f940 	bl	8004e2c <xQueueGenericSend>
									show_time_date();
 8001bac:	f7ff fa30 	bl	8001010 <show_time_date>
 8001bb0:	e007      	b.n	8001bc2 <rtc_task+0x3a2>
								}else
									xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001bb2:	4b32      	ldr	r3, [pc, #200]	; (8001c7c <rtc_task+0x45c>)
 8001bb4:	6818      	ldr	r0, [r3, #0]
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bbc:	4930      	ldr	r1, [pc, #192]	; (8001c80 <rtc_task+0x460>)
 8001bbe:	f003 f935 	bl	8004e2c <xQueueGenericSend>

								curr_state = sMainMenu;
 8001bc2:	4b30      	ldr	r3, [pc, #192]	; (8001c84 <rtc_task+0x464>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	701a      	strb	r2, [r3, #0]
								rtc_state = 0;
 8001bc8:	4b2b      	ldr	r3, [pc, #172]	; (8001c78 <rtc_task+0x458>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
								break;}
 8001bce:	bf00      	nop
						}
					break;}
 8001bd0:	e042      	b.n	8001c58 <rtc_task+0x438>

				case sRtcReport:{
					/*TODO: enable or disable RTC current time reporting over ITM printf */
					if(cmd->len == 1)
 8001bd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bd4:	7a9b      	ldrb	r3, [r3, #10]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d131      	bne.n	8001c3e <rtc_task+0x41e>
					{
						if(cmd->payload[0] == 'y'){
 8001bda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	2b79      	cmp	r3, #121	; 0x79
 8001be0:	d115      	bne.n	8001c0e <rtc_task+0x3ee>
							if(xTimerIsTimerActive(rtc_timer) == pdFALSE)
 8001be2:	4b29      	ldr	r3, [pc, #164]	; (8001c88 <rtc_task+0x468>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f005 fbbe 	bl	8007368 <xTimerIsTimerActive>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d12d      	bne.n	8001c4e <rtc_task+0x42e>
								xTimerStart(rtc_timer,portMAX_DELAY);
 8001bf2:	4b25      	ldr	r3, [pc, #148]	; (8001c88 <rtc_task+0x468>)
 8001bf4:	681c      	ldr	r4, [r3, #0]
 8001bf6:	f004 f84f 	bl	8005c98 <xTaskGetTickCount>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8001c00:	9300      	str	r3, [sp, #0]
 8001c02:	2300      	movs	r3, #0
 8001c04:	2101      	movs	r1, #1
 8001c06:	4620      	mov	r0, r4
 8001c08:	f005 f90e 	bl	8006e28 <xTimerGenericCommand>
 8001c0c:	e01f      	b.n	8001c4e <rtc_task+0x42e>
						}else if (cmd->payload[0] == 'n'){
 8001c0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	2b6e      	cmp	r3, #110	; 0x6e
 8001c14:	d10a      	bne.n	8001c2c <rtc_task+0x40c>
							xTimerStop(rtc_timer,portMAX_DELAY);
 8001c16:	4b1c      	ldr	r3, [pc, #112]	; (8001c88 <rtc_task+0x468>)
 8001c18:	6818      	ldr	r0, [r3, #0]
 8001c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c1e:	9300      	str	r3, [sp, #0]
 8001c20:	2300      	movs	r3, #0
 8001c22:	2200      	movs	r2, #0
 8001c24:	2103      	movs	r1, #3
 8001c26:	f005 f8ff 	bl	8006e28 <xTimerGenericCommand>
 8001c2a:	e010      	b.n	8001c4e <rtc_task+0x42e>
						}else{
							xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001c2c:	4b13      	ldr	r3, [pc, #76]	; (8001c7c <rtc_task+0x45c>)
 8001c2e:	6818      	ldr	r0, [r3, #0]
 8001c30:	2300      	movs	r3, #0
 8001c32:	f04f 32ff 	mov.w	r2, #4294967295
 8001c36:	4912      	ldr	r1, [pc, #72]	; (8001c80 <rtc_task+0x460>)
 8001c38:	f003 f8f8 	bl	8004e2c <xQueueGenericSend>
 8001c3c:	e007      	b.n	8001c4e <rtc_task+0x42e>
						}

					}else
					    xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001c3e:	4b0f      	ldr	r3, [pc, #60]	; (8001c7c <rtc_task+0x45c>)
 8001c40:	6818      	ldr	r0, [r3, #0]
 8001c42:	2300      	movs	r3, #0
 8001c44:	f04f 32ff 	mov.w	r2, #4294967295
 8001c48:	490d      	ldr	r1, [pc, #52]	; (8001c80 <rtc_task+0x460>)
 8001c4a:	f003 f8ef 	bl	8004e2c <xQueueGenericSend>

					curr_state = sMainMenu;
 8001c4e:	4b0d      	ldr	r3, [pc, #52]	; (8001c84 <rtc_task+0x464>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	701a      	strb	r2, [r3, #0]
					break;}
 8001c54:	e000      	b.n	8001c58 <rtc_task+0x438>

				default:
					break;
 8001c56:	bf00      	nop
		while(curr_state != sMainMenu){
 8001c58:	4b0a      	ldr	r3, [pc, #40]	; (8001c84 <rtc_task+0x464>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	f47f ae17 	bne.w	8001890 <rtc_task+0x70>
			}// switch end

		} //while end

		 /*TODO : Notify menu task */
		xTaskNotify(handle_menu_task,0,eNoAction);
 8001c62:	4b0a      	ldr	r3, [pc, #40]	; (8001c8c <rtc_task+0x46c>)
 8001c64:	6818      	ldr	r0, [r3, #0]
 8001c66:	2300      	movs	r3, #0
 8001c68:	9300      	str	r3, [sp, #0]
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	2100      	movs	r1, #0
 8001c70:	f004 fd50 	bl	8006714 <xTaskGenericNotify>
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001c74:	e5ee      	b.n	8001854 <rtc_task+0x34>
 8001c76:	bf00      	nop
 8001c78:	20000108 	.word	0x20000108
 8001c7c:	20012ea0 	.word	0x20012ea0
 8001c80:	20000014 	.word	0x20000014
 8001c84:	200000b0 	.word	0x200000b0
 8001c88:	20012e8c 	.word	0x20012e8c
 8001c8c:	20012e9c 	.word	0x20012e9c

08001c90 <process_command>:




void process_command(command_t *cmd)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af02      	add	r7, sp, #8
 8001c96:	6078      	str	r0, [r7, #4]
	/* Extract the data bytes from the input data queue and form a command */
	extract_command(cmd);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f000 f835 	bl	8001d08 <extract_command>

	switch(curr_state)
 8001c9e:	4b16      	ldr	r3, [pc, #88]	; (8001cf8 <process_command+0x68>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	2b05      	cmp	r3, #5
 8001ca4:	dc24      	bgt.n	8001cf0 <process_command+0x60>
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	da18      	bge.n	8001cdc <process_command+0x4c>
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d002      	beq.n	8001cb4 <process_command+0x24>
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d00a      	beq.n	8001cc8 <process_command+0x38>
		case sRtcTimeConfig:
			/* TODO: Notify RTC task with the command */
			xTaskNotify(handle_rtc_task, (uint32_t)cmd, eSetValueWithOverwrite);
			break;
	}
}
 8001cb2:	e01d      	b.n	8001cf0 <process_command+0x60>
			xTaskNotify(handle_menu_task, (uint32_t)cmd, eSetValueWithOverwrite);
 8001cb4:	4b11      	ldr	r3, [pc, #68]	; (8001cfc <process_command+0x6c>)
 8001cb6:	6818      	ldr	r0, [r3, #0]
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	2300      	movs	r3, #0
 8001cbc:	9300      	str	r3, [sp, #0]
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	f004 fd27 	bl	8006714 <xTaskGenericNotify>
			break;
 8001cc6:	e013      	b.n	8001cf0 <process_command+0x60>
			xTaskNotify(handle_led_task, (uint32_t)cmd, eSetValueWithOverwrite);
 8001cc8:	4b0d      	ldr	r3, [pc, #52]	; (8001d00 <process_command+0x70>)
 8001cca:	6818      	ldr	r0, [r3, #0]
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	2300      	movs	r3, #0
 8001cd0:	9300      	str	r3, [sp, #0]
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	f004 fd1d 	bl	8006714 <xTaskGenericNotify>
			break;
 8001cda:	e009      	b.n	8001cf0 <process_command+0x60>
			xTaskNotify(handle_rtc_task, (uint32_t)cmd, eSetValueWithOverwrite);
 8001cdc:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <process_command+0x74>)
 8001cde:	6818      	ldr	r0, [r3, #0]
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	9300      	str	r3, [sp, #0]
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	2100      	movs	r1, #0
 8001cea:	f004 fd13 	bl	8006714 <xTaskGenericNotify>
			break;
 8001cee:	bf00      	nop
}
 8001cf0:	bf00      	nop
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	200000b0 	.word	0x200000b0
 8001cfc:	20012e9c 	.word	0x20012e9c
 8001d00:	20012ec8 	.word	0x20012ec8
 8001d04:	20012e90 	.word	0x20012e90

08001d08 <extract_command>:

int extract_command(command_t *cmd)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
	uint8_t item;
	BaseType_t status;

	status = uxQueueMessagesWaiting(q_data);
 8001d10:	4b19      	ldr	r3, [pc, #100]	; (8001d78 <extract_command+0x70>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f003 fb11 	bl	800533c <uxQueueMessagesWaiting>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	613b      	str	r3, [r7, #16]
	if(!status) return -1;
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d102      	bne.n	8001d2a <extract_command+0x22>
 8001d24:	f04f 33ff 	mov.w	r3, #4294967295
 8001d28:	e022      	b.n	8001d70 <extract_command+0x68>
	uint8_t i = 0;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	75fb      	strb	r3, [r7, #23]

	do
	{
		status = xQueueReceive(q_data, &item, 0);
 8001d2e:	4b12      	ldr	r3, [pc, #72]	; (8001d78 <extract_command+0x70>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f107 010f 	add.w	r1, r7, #15
 8001d36:	2200      	movs	r2, #0
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f003 fa1f 	bl	800517c <xQueueReceive>
 8001d3e:	6138      	str	r0, [r7, #16]
		if(status == pdTRUE) cmd->payload[i++] = item;
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d106      	bne.n	8001d54 <extract_command+0x4c>
 8001d46:	7dfb      	ldrb	r3, [r7, #23]
 8001d48:	1c5a      	adds	r2, r3, #1
 8001d4a:	75fa      	strb	r2, [r7, #23]
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	7bf9      	ldrb	r1, [r7, #15]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	5499      	strb	r1, [r3, r2]
	}while(item != '\n');
 8001d54:	7bfb      	ldrb	r3, [r7, #15]
 8001d56:	2b0a      	cmp	r3, #10
 8001d58:	d1e9      	bne.n	8001d2e <extract_command+0x26>

	cmd->payload[i-1] = '\0';
 8001d5a:	7dfb      	ldrb	r3, [r7, #23]
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	2100      	movs	r1, #0
 8001d62:	54d1      	strb	r1, [r2, r3]
	cmd->len = i - 1; /* Save length of the command excluding null char */
 8001d64:	7dfb      	ldrb	r3, [r7, #23]
 8001d66:	3b01      	subs	r3, #1
 8001d68:	b2da      	uxtb	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	729a      	strb	r2, [r3, #10]

	return 0;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3718      	adds	r7, #24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	20012e98 	.word	0x20012e98

08001d7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001db4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d80:	480d      	ldr	r0, [pc, #52]	; (8001db8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d82:	490e      	ldr	r1, [pc, #56]	; (8001dbc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d84:	4a0e      	ldr	r2, [pc, #56]	; (8001dc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d88:	e002      	b.n	8001d90 <LoopCopyDataInit>

08001d8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d8e:	3304      	adds	r3, #4

08001d90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d94:	d3f9      	bcc.n	8001d8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d96:	4a0b      	ldr	r2, [pc, #44]	; (8001dc4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d98:	4c0b      	ldr	r4, [pc, #44]	; (8001dc8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d9c:	e001      	b.n	8001da2 <LoopFillZerobss>

08001d9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001da0:	3204      	adds	r2, #4

08001da2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001da2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001da4:	d3fb      	bcc.n	8001d9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001da6:	f7ff fbc3 	bl	8001530 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001daa:	f005 fffb 	bl	8007da4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dae:	f7fe fd29 	bl	8000804 <main>
  bx  lr    
 8001db2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001db4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001db8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dbc:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001dc0:	08009508 	.word	0x08009508
  ldr r2, =_sbss
 8001dc4:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001dc8:	20012fb0 	.word	0x20012fb0

08001dcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dcc:	e7fe      	b.n	8001dcc <ADC_IRQHandler>
	...

08001dd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dd4:	4b0e      	ldr	r3, [pc, #56]	; (8001e10 <HAL_Init+0x40>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a0d      	ldr	r2, [pc, #52]	; (8001e10 <HAL_Init+0x40>)
 8001dda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001de0:	4b0b      	ldr	r3, [pc, #44]	; (8001e10 <HAL_Init+0x40>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a0a      	ldr	r2, [pc, #40]	; (8001e10 <HAL_Init+0x40>)
 8001de6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dec:	4b08      	ldr	r3, [pc, #32]	; (8001e10 <HAL_Init+0x40>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a07      	ldr	r2, [pc, #28]	; (8001e10 <HAL_Init+0x40>)
 8001df2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001df6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001df8:	2003      	movs	r0, #3
 8001dfa:	f000 f8d8 	bl	8001fae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dfe:	200f      	movs	r0, #15
 8001e00:	f7ff fa6e 	bl	80012e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e04:	f7ff f9ca 	bl	800119c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40023c00 	.word	0x40023c00

08001e14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e18:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <HAL_IncTick+0x20>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <HAL_IncTick+0x24>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4413      	add	r3, r2
 8001e24:	4a04      	ldr	r2, [pc, #16]	; (8001e38 <HAL_IncTick+0x24>)
 8001e26:	6013      	str	r3, [r2, #0]
}
 8001e28:	bf00      	nop
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	2000001c 	.word	0x2000001c
 8001e38:	20012f5c 	.word	0x20012f5c

08001e3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e40:	4b03      	ldr	r3, [pc, #12]	; (8001e50 <HAL_GetTick+0x14>)
 8001e42:	681b      	ldr	r3, [r3, #0]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	20012f5c 	.word	0x20012f5c

08001e54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f003 0307 	and.w	r3, r3, #7
 8001e62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e64:	4b0c      	ldr	r3, [pc, #48]	; (8001e98 <__NVIC_SetPriorityGrouping+0x44>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e6a:	68ba      	ldr	r2, [r7, #8]
 8001e6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e70:	4013      	ands	r3, r2
 8001e72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e86:	4a04      	ldr	r2, [pc, #16]	; (8001e98 <__NVIC_SetPriorityGrouping+0x44>)
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	60d3      	str	r3, [r2, #12]
}
 8001e8c:	bf00      	nop
 8001e8e:	3714      	adds	r7, #20
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	e000ed00 	.word	0xe000ed00

08001e9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ea0:	4b04      	ldr	r3, [pc, #16]	; (8001eb4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	0a1b      	lsrs	r3, r3, #8
 8001ea6:	f003 0307 	and.w	r3, r3, #7
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	e000ed00 	.word	0xe000ed00

08001eb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	db0b      	blt.n	8001ee2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eca:	79fb      	ldrb	r3, [r7, #7]
 8001ecc:	f003 021f 	and.w	r2, r3, #31
 8001ed0:	4907      	ldr	r1, [pc, #28]	; (8001ef0 <__NVIC_EnableIRQ+0x38>)
 8001ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed6:	095b      	lsrs	r3, r3, #5
 8001ed8:	2001      	movs	r0, #1
 8001eda:	fa00 f202 	lsl.w	r2, r0, r2
 8001ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	e000e100 	.word	0xe000e100

08001ef4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4603      	mov	r3, r0
 8001efc:	6039      	str	r1, [r7, #0]
 8001efe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	db0a      	blt.n	8001f1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	b2da      	uxtb	r2, r3
 8001f0c:	490c      	ldr	r1, [pc, #48]	; (8001f40 <__NVIC_SetPriority+0x4c>)
 8001f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f12:	0112      	lsls	r2, r2, #4
 8001f14:	b2d2      	uxtb	r2, r2
 8001f16:	440b      	add	r3, r1
 8001f18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f1c:	e00a      	b.n	8001f34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	b2da      	uxtb	r2, r3
 8001f22:	4908      	ldr	r1, [pc, #32]	; (8001f44 <__NVIC_SetPriority+0x50>)
 8001f24:	79fb      	ldrb	r3, [r7, #7]
 8001f26:	f003 030f 	and.w	r3, r3, #15
 8001f2a:	3b04      	subs	r3, #4
 8001f2c:	0112      	lsls	r2, r2, #4
 8001f2e:	b2d2      	uxtb	r2, r2
 8001f30:	440b      	add	r3, r1
 8001f32:	761a      	strb	r2, [r3, #24]
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	e000e100 	.word	0xe000e100
 8001f44:	e000ed00 	.word	0xe000ed00

08001f48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b089      	sub	sp, #36	; 0x24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	f1c3 0307 	rsb	r3, r3, #7
 8001f62:	2b04      	cmp	r3, #4
 8001f64:	bf28      	it	cs
 8001f66:	2304      	movcs	r3, #4
 8001f68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	3304      	adds	r3, #4
 8001f6e:	2b06      	cmp	r3, #6
 8001f70:	d902      	bls.n	8001f78 <NVIC_EncodePriority+0x30>
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	3b03      	subs	r3, #3
 8001f76:	e000      	b.n	8001f7a <NVIC_EncodePriority+0x32>
 8001f78:	2300      	movs	r3, #0
 8001f7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	43da      	mvns	r2, r3
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	401a      	ands	r2, r3
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f90:	f04f 31ff 	mov.w	r1, #4294967295
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9a:	43d9      	mvns	r1, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa0:	4313      	orrs	r3, r2
         );
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3724      	adds	r7, #36	; 0x24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b082      	sub	sp, #8
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f7ff ff4c 	bl	8001e54 <__NVIC_SetPriorityGrouping>
}
 8001fbc:	bf00      	nop
 8001fbe:	3708      	adds	r7, #8
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	4603      	mov	r3, r0
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
 8001fd0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fd6:	f7ff ff61 	bl	8001e9c <__NVIC_GetPriorityGrouping>
 8001fda:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	68b9      	ldr	r1, [r7, #8]
 8001fe0:	6978      	ldr	r0, [r7, #20]
 8001fe2:	f7ff ffb1 	bl	8001f48 <NVIC_EncodePriority>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fec:	4611      	mov	r1, r2
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff ff80 	bl	8001ef4 <__NVIC_SetPriority>
}
 8001ff4:	bf00      	nop
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200a:	4618      	mov	r0, r3
 800200c:	f7ff ff54 	bl	8001eb8 <__NVIC_EnableIRQ>
}
 8002010:	bf00      	nop
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002024:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002026:	f7ff ff09 	bl	8001e3c <HAL_GetTick>
 800202a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002032:	b2db      	uxtb	r3, r3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d008      	beq.n	800204a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2280      	movs	r2, #128	; 0x80
 800203c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e052      	b.n	80020f0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f022 0216 	bic.w	r2, r2, #22
 8002058:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	695a      	ldr	r2, [r3, #20]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002068:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	2b00      	cmp	r3, #0
 8002070:	d103      	bne.n	800207a <HAL_DMA_Abort+0x62>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002076:	2b00      	cmp	r3, #0
 8002078:	d007      	beq.n	800208a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f022 0208 	bic.w	r2, r2, #8
 8002088:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f022 0201 	bic.w	r2, r2, #1
 8002098:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800209a:	e013      	b.n	80020c4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800209c:	f7ff fece 	bl	8001e3c <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b05      	cmp	r3, #5
 80020a8:	d90c      	bls.n	80020c4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2220      	movs	r2, #32
 80020ae:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2203      	movs	r2, #3
 80020b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e015      	b.n	80020f0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1e4      	bne.n	800209c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d6:	223f      	movs	r2, #63	; 0x3f
 80020d8:	409a      	lsls	r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2201      	movs	r2, #1
 80020e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002106:	b2db      	uxtb	r3, r3
 8002108:	2b02      	cmp	r3, #2
 800210a:	d004      	beq.n	8002116 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2280      	movs	r2, #128	; 0x80
 8002110:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e00c      	b.n	8002130 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2205      	movs	r2, #5
 800211a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f022 0201 	bic.w	r2, r2, #1
 800212c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800213c:	b480      	push	{r7}
 800213e:	b089      	sub	sp, #36	; 0x24
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002146:	2300      	movs	r3, #0
 8002148:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800214a:	2300      	movs	r3, #0
 800214c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800214e:	2300      	movs	r3, #0
 8002150:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002152:	2300      	movs	r3, #0
 8002154:	61fb      	str	r3, [r7, #28]
 8002156:	e16b      	b.n	8002430 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002158:	2201      	movs	r2, #1
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	697a      	ldr	r2, [r7, #20]
 8002168:	4013      	ands	r3, r2
 800216a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	429a      	cmp	r2, r3
 8002172:	f040 815a 	bne.w	800242a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f003 0303 	and.w	r3, r3, #3
 800217e:	2b01      	cmp	r3, #1
 8002180:	d005      	beq.n	800218e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800218a:	2b02      	cmp	r3, #2
 800218c:	d130      	bne.n	80021f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	2203      	movs	r2, #3
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	43db      	mvns	r3, r3
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	4013      	ands	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	68da      	ldr	r2, [r3, #12]
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021c4:	2201      	movs	r2, #1
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	43db      	mvns	r3, r3
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	4013      	ands	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	091b      	lsrs	r3, r3, #4
 80021da:	f003 0201 	and.w	r2, r3, #1
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f003 0303 	and.w	r3, r3, #3
 80021f8:	2b03      	cmp	r3, #3
 80021fa:	d017      	beq.n	800222c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	2203      	movs	r2, #3
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	43db      	mvns	r3, r3
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	4013      	ands	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	4313      	orrs	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f003 0303 	and.w	r3, r3, #3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d123      	bne.n	8002280 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	08da      	lsrs	r2, r3, #3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3208      	adds	r2, #8
 8002240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002244:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	f003 0307 	and.w	r3, r3, #7
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	220f      	movs	r2, #15
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	43db      	mvns	r3, r3
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	4013      	ands	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	691a      	ldr	r2, [r3, #16]
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	f003 0307 	and.w	r3, r3, #7
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	4313      	orrs	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	08da      	lsrs	r2, r3, #3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	3208      	adds	r2, #8
 800227a:	69b9      	ldr	r1, [r7, #24]
 800227c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	2203      	movs	r2, #3
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	43db      	mvns	r3, r3
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	4013      	ands	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f003 0203 	and.w	r2, r3, #3
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f000 80b4 	beq.w	800242a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022c2:	2300      	movs	r3, #0
 80022c4:	60fb      	str	r3, [r7, #12]
 80022c6:	4b60      	ldr	r3, [pc, #384]	; (8002448 <HAL_GPIO_Init+0x30c>)
 80022c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ca:	4a5f      	ldr	r2, [pc, #380]	; (8002448 <HAL_GPIO_Init+0x30c>)
 80022cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022d0:	6453      	str	r3, [r2, #68]	; 0x44
 80022d2:	4b5d      	ldr	r3, [pc, #372]	; (8002448 <HAL_GPIO_Init+0x30c>)
 80022d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022da:	60fb      	str	r3, [r7, #12]
 80022dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022de:	4a5b      	ldr	r2, [pc, #364]	; (800244c <HAL_GPIO_Init+0x310>)
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	089b      	lsrs	r3, r3, #2
 80022e4:	3302      	adds	r3, #2
 80022e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	f003 0303 	and.w	r3, r3, #3
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	220f      	movs	r2, #15
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	43db      	mvns	r3, r3
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	4013      	ands	r3, r2
 8002300:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a52      	ldr	r2, [pc, #328]	; (8002450 <HAL_GPIO_Init+0x314>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d02b      	beq.n	8002362 <HAL_GPIO_Init+0x226>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a51      	ldr	r2, [pc, #324]	; (8002454 <HAL_GPIO_Init+0x318>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d025      	beq.n	800235e <HAL_GPIO_Init+0x222>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a50      	ldr	r2, [pc, #320]	; (8002458 <HAL_GPIO_Init+0x31c>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d01f      	beq.n	800235a <HAL_GPIO_Init+0x21e>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a4f      	ldr	r2, [pc, #316]	; (800245c <HAL_GPIO_Init+0x320>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d019      	beq.n	8002356 <HAL_GPIO_Init+0x21a>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a4e      	ldr	r2, [pc, #312]	; (8002460 <HAL_GPIO_Init+0x324>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d013      	beq.n	8002352 <HAL_GPIO_Init+0x216>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a4d      	ldr	r2, [pc, #308]	; (8002464 <HAL_GPIO_Init+0x328>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d00d      	beq.n	800234e <HAL_GPIO_Init+0x212>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a4c      	ldr	r2, [pc, #304]	; (8002468 <HAL_GPIO_Init+0x32c>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d007      	beq.n	800234a <HAL_GPIO_Init+0x20e>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a4b      	ldr	r2, [pc, #300]	; (800246c <HAL_GPIO_Init+0x330>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d101      	bne.n	8002346 <HAL_GPIO_Init+0x20a>
 8002342:	2307      	movs	r3, #7
 8002344:	e00e      	b.n	8002364 <HAL_GPIO_Init+0x228>
 8002346:	2308      	movs	r3, #8
 8002348:	e00c      	b.n	8002364 <HAL_GPIO_Init+0x228>
 800234a:	2306      	movs	r3, #6
 800234c:	e00a      	b.n	8002364 <HAL_GPIO_Init+0x228>
 800234e:	2305      	movs	r3, #5
 8002350:	e008      	b.n	8002364 <HAL_GPIO_Init+0x228>
 8002352:	2304      	movs	r3, #4
 8002354:	e006      	b.n	8002364 <HAL_GPIO_Init+0x228>
 8002356:	2303      	movs	r3, #3
 8002358:	e004      	b.n	8002364 <HAL_GPIO_Init+0x228>
 800235a:	2302      	movs	r3, #2
 800235c:	e002      	b.n	8002364 <HAL_GPIO_Init+0x228>
 800235e:	2301      	movs	r3, #1
 8002360:	e000      	b.n	8002364 <HAL_GPIO_Init+0x228>
 8002362:	2300      	movs	r3, #0
 8002364:	69fa      	ldr	r2, [r7, #28]
 8002366:	f002 0203 	and.w	r2, r2, #3
 800236a:	0092      	lsls	r2, r2, #2
 800236c:	4093      	lsls	r3, r2
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4313      	orrs	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002374:	4935      	ldr	r1, [pc, #212]	; (800244c <HAL_GPIO_Init+0x310>)
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	089b      	lsrs	r3, r3, #2
 800237a:	3302      	adds	r3, #2
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002382:	4b3b      	ldr	r3, [pc, #236]	; (8002470 <HAL_GPIO_Init+0x334>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	43db      	mvns	r3, r3
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	4013      	ands	r3, r2
 8002390:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d003      	beq.n	80023a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800239e:	69ba      	ldr	r2, [r7, #24]
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023a6:	4a32      	ldr	r2, [pc, #200]	; (8002470 <HAL_GPIO_Init+0x334>)
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80023ac:	4b30      	ldr	r3, [pc, #192]	; (8002470 <HAL_GPIO_Init+0x334>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	43db      	mvns	r3, r3
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	4013      	ands	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d003      	beq.n	80023d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023d0:	4a27      	ldr	r2, [pc, #156]	; (8002470 <HAL_GPIO_Init+0x334>)
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023d6:	4b26      	ldr	r3, [pc, #152]	; (8002470 <HAL_GPIO_Init+0x334>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	43db      	mvns	r3, r3
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4013      	ands	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d003      	beq.n	80023fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023fa:	4a1d      	ldr	r2, [pc, #116]	; (8002470 <HAL_GPIO_Init+0x334>)
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002400:	4b1b      	ldr	r3, [pc, #108]	; (8002470 <HAL_GPIO_Init+0x334>)
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	43db      	mvns	r3, r3
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	4013      	ands	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d003      	beq.n	8002424 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	4313      	orrs	r3, r2
 8002422:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002424:	4a12      	ldr	r2, [pc, #72]	; (8002470 <HAL_GPIO_Init+0x334>)
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	3301      	adds	r3, #1
 800242e:	61fb      	str	r3, [r7, #28]
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	2b0f      	cmp	r3, #15
 8002434:	f67f ae90 	bls.w	8002158 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002438:	bf00      	nop
 800243a:	bf00      	nop
 800243c:	3724      	adds	r7, #36	; 0x24
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	40023800 	.word	0x40023800
 800244c:	40013800 	.word	0x40013800
 8002450:	40020000 	.word	0x40020000
 8002454:	40020400 	.word	0x40020400
 8002458:	40020800 	.word	0x40020800
 800245c:	40020c00 	.word	0x40020c00
 8002460:	40021000 	.word	0x40021000
 8002464:	40021400 	.word	0x40021400
 8002468:	40021800 	.word	0x40021800
 800246c:	40021c00 	.word	0x40021c00
 8002470:	40013c00 	.word	0x40013c00

08002474 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	460b      	mov	r3, r1
 800247e:	807b      	strh	r3, [r7, #2]
 8002480:	4613      	mov	r3, r2
 8002482:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002484:	787b      	ldrb	r3, [r7, #1]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800248a:	887a      	ldrh	r2, [r7, #2]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002490:	e003      	b.n	800249a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002492:	887b      	ldrh	r3, [r7, #2]
 8002494:	041a      	lsls	r2, r3, #16
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	619a      	str	r2, [r3, #24]
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
	...

080024a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e264      	b.n	8002984 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d075      	beq.n	80025b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024c6:	4ba3      	ldr	r3, [pc, #652]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f003 030c 	and.w	r3, r3, #12
 80024ce:	2b04      	cmp	r3, #4
 80024d0:	d00c      	beq.n	80024ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024d2:	4ba0      	ldr	r3, [pc, #640]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024da:	2b08      	cmp	r3, #8
 80024dc:	d112      	bne.n	8002504 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024de:	4b9d      	ldr	r3, [pc, #628]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024ea:	d10b      	bne.n	8002504 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ec:	4b99      	ldr	r3, [pc, #612]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d05b      	beq.n	80025b0 <HAL_RCC_OscConfig+0x108>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d157      	bne.n	80025b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e23f      	b.n	8002984 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800250c:	d106      	bne.n	800251c <HAL_RCC_OscConfig+0x74>
 800250e:	4b91      	ldr	r3, [pc, #580]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a90      	ldr	r2, [pc, #576]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 8002514:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002518:	6013      	str	r3, [r2, #0]
 800251a:	e01d      	b.n	8002558 <HAL_RCC_OscConfig+0xb0>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002524:	d10c      	bne.n	8002540 <HAL_RCC_OscConfig+0x98>
 8002526:	4b8b      	ldr	r3, [pc, #556]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a8a      	ldr	r2, [pc, #552]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 800252c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002530:	6013      	str	r3, [r2, #0]
 8002532:	4b88      	ldr	r3, [pc, #544]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a87      	ldr	r2, [pc, #540]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 8002538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800253c:	6013      	str	r3, [r2, #0]
 800253e:	e00b      	b.n	8002558 <HAL_RCC_OscConfig+0xb0>
 8002540:	4b84      	ldr	r3, [pc, #528]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a83      	ldr	r2, [pc, #524]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 8002546:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800254a:	6013      	str	r3, [r2, #0]
 800254c:	4b81      	ldr	r3, [pc, #516]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a80      	ldr	r2, [pc, #512]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 8002552:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002556:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d013      	beq.n	8002588 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002560:	f7ff fc6c 	bl	8001e3c <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002568:	f7ff fc68 	bl	8001e3c <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b64      	cmp	r3, #100	; 0x64
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e204      	b.n	8002984 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800257a:	4b76      	ldr	r3, [pc, #472]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d0f0      	beq.n	8002568 <HAL_RCC_OscConfig+0xc0>
 8002586:	e014      	b.n	80025b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002588:	f7ff fc58 	bl	8001e3c <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002590:	f7ff fc54 	bl	8001e3c <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b64      	cmp	r3, #100	; 0x64
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e1f0      	b.n	8002984 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025a2:	4b6c      	ldr	r3, [pc, #432]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1f0      	bne.n	8002590 <HAL_RCC_OscConfig+0xe8>
 80025ae:	e000      	b.n	80025b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d063      	beq.n	8002686 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025be:	4b65      	ldr	r3, [pc, #404]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f003 030c 	and.w	r3, r3, #12
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00b      	beq.n	80025e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025ca:	4b62      	ldr	r3, [pc, #392]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025d2:	2b08      	cmp	r3, #8
 80025d4:	d11c      	bne.n	8002610 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025d6:	4b5f      	ldr	r3, [pc, #380]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d116      	bne.n	8002610 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025e2:	4b5c      	ldr	r3, [pc, #368]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d005      	beq.n	80025fa <HAL_RCC_OscConfig+0x152>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d001      	beq.n	80025fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e1c4      	b.n	8002984 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025fa:	4b56      	ldr	r3, [pc, #344]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	4952      	ldr	r1, [pc, #328]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 800260a:	4313      	orrs	r3, r2
 800260c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800260e:	e03a      	b.n	8002686 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d020      	beq.n	800265a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002618:	4b4f      	ldr	r3, [pc, #316]	; (8002758 <HAL_RCC_OscConfig+0x2b0>)
 800261a:	2201      	movs	r2, #1
 800261c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261e:	f7ff fc0d 	bl	8001e3c <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002624:	e008      	b.n	8002638 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002626:	f7ff fc09 	bl	8001e3c <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e1a5      	b.n	8002984 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002638:	4b46      	ldr	r3, [pc, #280]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d0f0      	beq.n	8002626 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002644:	4b43      	ldr	r3, [pc, #268]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	691b      	ldr	r3, [r3, #16]
 8002650:	00db      	lsls	r3, r3, #3
 8002652:	4940      	ldr	r1, [pc, #256]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 8002654:	4313      	orrs	r3, r2
 8002656:	600b      	str	r3, [r1, #0]
 8002658:	e015      	b.n	8002686 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800265a:	4b3f      	ldr	r3, [pc, #252]	; (8002758 <HAL_RCC_OscConfig+0x2b0>)
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002660:	f7ff fbec 	bl	8001e3c <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002668:	f7ff fbe8 	bl	8001e3c <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e184      	b.n	8002984 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800267a:	4b36      	ldr	r3, [pc, #216]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1f0      	bne.n	8002668 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0308 	and.w	r3, r3, #8
 800268e:	2b00      	cmp	r3, #0
 8002690:	d030      	beq.n	80026f4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d016      	beq.n	80026c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800269a:	4b30      	ldr	r3, [pc, #192]	; (800275c <HAL_RCC_OscConfig+0x2b4>)
 800269c:	2201      	movs	r2, #1
 800269e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a0:	f7ff fbcc 	bl	8001e3c <HAL_GetTick>
 80026a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026a8:	f7ff fbc8 	bl	8001e3c <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e164      	b.n	8002984 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ba:	4b26      	ldr	r3, [pc, #152]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 80026bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d0f0      	beq.n	80026a8 <HAL_RCC_OscConfig+0x200>
 80026c6:	e015      	b.n	80026f4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026c8:	4b24      	ldr	r3, [pc, #144]	; (800275c <HAL_RCC_OscConfig+0x2b4>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ce:	f7ff fbb5 	bl	8001e3c <HAL_GetTick>
 80026d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026d4:	e008      	b.n	80026e8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026d6:	f7ff fbb1 	bl	8001e3c <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e14d      	b.n	8002984 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026e8:	4b1a      	ldr	r3, [pc, #104]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 80026ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d1f0      	bne.n	80026d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f000 80a0 	beq.w	8002842 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002702:	2300      	movs	r3, #0
 8002704:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002706:	4b13      	ldr	r3, [pc, #76]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10f      	bne.n	8002732 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002712:	2300      	movs	r3, #0
 8002714:	60bb      	str	r3, [r7, #8]
 8002716:	4b0f      	ldr	r3, [pc, #60]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	4a0e      	ldr	r2, [pc, #56]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 800271c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002720:	6413      	str	r3, [r2, #64]	; 0x40
 8002722:	4b0c      	ldr	r3, [pc, #48]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800272a:	60bb      	str	r3, [r7, #8]
 800272c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800272e:	2301      	movs	r3, #1
 8002730:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002732:	4b0b      	ldr	r3, [pc, #44]	; (8002760 <HAL_RCC_OscConfig+0x2b8>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800273a:	2b00      	cmp	r3, #0
 800273c:	d121      	bne.n	8002782 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800273e:	4b08      	ldr	r3, [pc, #32]	; (8002760 <HAL_RCC_OscConfig+0x2b8>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a07      	ldr	r2, [pc, #28]	; (8002760 <HAL_RCC_OscConfig+0x2b8>)
 8002744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002748:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800274a:	f7ff fb77 	bl	8001e3c <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002750:	e011      	b.n	8002776 <HAL_RCC_OscConfig+0x2ce>
 8002752:	bf00      	nop
 8002754:	40023800 	.word	0x40023800
 8002758:	42470000 	.word	0x42470000
 800275c:	42470e80 	.word	0x42470e80
 8002760:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002764:	f7ff fb6a 	bl	8001e3c <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e106      	b.n	8002984 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002776:	4b85      	ldr	r3, [pc, #532]	; (800298c <HAL_RCC_OscConfig+0x4e4>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800277e:	2b00      	cmp	r3, #0
 8002780:	d0f0      	beq.n	8002764 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d106      	bne.n	8002798 <HAL_RCC_OscConfig+0x2f0>
 800278a:	4b81      	ldr	r3, [pc, #516]	; (8002990 <HAL_RCC_OscConfig+0x4e8>)
 800278c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800278e:	4a80      	ldr	r2, [pc, #512]	; (8002990 <HAL_RCC_OscConfig+0x4e8>)
 8002790:	f043 0301 	orr.w	r3, r3, #1
 8002794:	6713      	str	r3, [r2, #112]	; 0x70
 8002796:	e01c      	b.n	80027d2 <HAL_RCC_OscConfig+0x32a>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	2b05      	cmp	r3, #5
 800279e:	d10c      	bne.n	80027ba <HAL_RCC_OscConfig+0x312>
 80027a0:	4b7b      	ldr	r3, [pc, #492]	; (8002990 <HAL_RCC_OscConfig+0x4e8>)
 80027a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a4:	4a7a      	ldr	r2, [pc, #488]	; (8002990 <HAL_RCC_OscConfig+0x4e8>)
 80027a6:	f043 0304 	orr.w	r3, r3, #4
 80027aa:	6713      	str	r3, [r2, #112]	; 0x70
 80027ac:	4b78      	ldr	r3, [pc, #480]	; (8002990 <HAL_RCC_OscConfig+0x4e8>)
 80027ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b0:	4a77      	ldr	r2, [pc, #476]	; (8002990 <HAL_RCC_OscConfig+0x4e8>)
 80027b2:	f043 0301 	orr.w	r3, r3, #1
 80027b6:	6713      	str	r3, [r2, #112]	; 0x70
 80027b8:	e00b      	b.n	80027d2 <HAL_RCC_OscConfig+0x32a>
 80027ba:	4b75      	ldr	r3, [pc, #468]	; (8002990 <HAL_RCC_OscConfig+0x4e8>)
 80027bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027be:	4a74      	ldr	r2, [pc, #464]	; (8002990 <HAL_RCC_OscConfig+0x4e8>)
 80027c0:	f023 0301 	bic.w	r3, r3, #1
 80027c4:	6713      	str	r3, [r2, #112]	; 0x70
 80027c6:	4b72      	ldr	r3, [pc, #456]	; (8002990 <HAL_RCC_OscConfig+0x4e8>)
 80027c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ca:	4a71      	ldr	r2, [pc, #452]	; (8002990 <HAL_RCC_OscConfig+0x4e8>)
 80027cc:	f023 0304 	bic.w	r3, r3, #4
 80027d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d015      	beq.n	8002806 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027da:	f7ff fb2f 	bl	8001e3c <HAL_GetTick>
 80027de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027e0:	e00a      	b.n	80027f8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027e2:	f7ff fb2b 	bl	8001e3c <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e0c5      	b.n	8002984 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027f8:	4b65      	ldr	r3, [pc, #404]	; (8002990 <HAL_RCC_OscConfig+0x4e8>)
 80027fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d0ee      	beq.n	80027e2 <HAL_RCC_OscConfig+0x33a>
 8002804:	e014      	b.n	8002830 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002806:	f7ff fb19 	bl	8001e3c <HAL_GetTick>
 800280a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800280c:	e00a      	b.n	8002824 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800280e:	f7ff fb15 	bl	8001e3c <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	f241 3288 	movw	r2, #5000	; 0x1388
 800281c:	4293      	cmp	r3, r2
 800281e:	d901      	bls.n	8002824 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e0af      	b.n	8002984 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002824:	4b5a      	ldr	r3, [pc, #360]	; (8002990 <HAL_RCC_OscConfig+0x4e8>)
 8002826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d1ee      	bne.n	800280e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002830:	7dfb      	ldrb	r3, [r7, #23]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d105      	bne.n	8002842 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002836:	4b56      	ldr	r3, [pc, #344]	; (8002990 <HAL_RCC_OscConfig+0x4e8>)
 8002838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283a:	4a55      	ldr	r2, [pc, #340]	; (8002990 <HAL_RCC_OscConfig+0x4e8>)
 800283c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002840:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	699b      	ldr	r3, [r3, #24]
 8002846:	2b00      	cmp	r3, #0
 8002848:	f000 809b 	beq.w	8002982 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800284c:	4b50      	ldr	r3, [pc, #320]	; (8002990 <HAL_RCC_OscConfig+0x4e8>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f003 030c 	and.w	r3, r3, #12
 8002854:	2b08      	cmp	r3, #8
 8002856:	d05c      	beq.n	8002912 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	2b02      	cmp	r3, #2
 800285e:	d141      	bne.n	80028e4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002860:	4b4c      	ldr	r3, [pc, #304]	; (8002994 <HAL_RCC_OscConfig+0x4ec>)
 8002862:	2200      	movs	r2, #0
 8002864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002866:	f7ff fae9 	bl	8001e3c <HAL_GetTick>
 800286a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800286c:	e008      	b.n	8002880 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800286e:	f7ff fae5 	bl	8001e3c <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	2b02      	cmp	r3, #2
 800287a:	d901      	bls.n	8002880 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e081      	b.n	8002984 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002880:	4b43      	ldr	r3, [pc, #268]	; (8002990 <HAL_RCC_OscConfig+0x4e8>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1f0      	bne.n	800286e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	69da      	ldr	r2, [r3, #28]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a1b      	ldr	r3, [r3, #32]
 8002894:	431a      	orrs	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289a:	019b      	lsls	r3, r3, #6
 800289c:	431a      	orrs	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a2:	085b      	lsrs	r3, r3, #1
 80028a4:	3b01      	subs	r3, #1
 80028a6:	041b      	lsls	r3, r3, #16
 80028a8:	431a      	orrs	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ae:	061b      	lsls	r3, r3, #24
 80028b0:	4937      	ldr	r1, [pc, #220]	; (8002990 <HAL_RCC_OscConfig+0x4e8>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028b6:	4b37      	ldr	r3, [pc, #220]	; (8002994 <HAL_RCC_OscConfig+0x4ec>)
 80028b8:	2201      	movs	r2, #1
 80028ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028bc:	f7ff fabe 	bl	8001e3c <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028c4:	f7ff faba 	bl	8001e3c <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e056      	b.n	8002984 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028d6:	4b2e      	ldr	r3, [pc, #184]	; (8002990 <HAL_RCC_OscConfig+0x4e8>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d0f0      	beq.n	80028c4 <HAL_RCC_OscConfig+0x41c>
 80028e2:	e04e      	b.n	8002982 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028e4:	4b2b      	ldr	r3, [pc, #172]	; (8002994 <HAL_RCC_OscConfig+0x4ec>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ea:	f7ff faa7 	bl	8001e3c <HAL_GetTick>
 80028ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028f0:	e008      	b.n	8002904 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028f2:	f7ff faa3 	bl	8001e3c <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d901      	bls.n	8002904 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e03f      	b.n	8002984 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002904:	4b22      	ldr	r3, [pc, #136]	; (8002990 <HAL_RCC_OscConfig+0x4e8>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d1f0      	bne.n	80028f2 <HAL_RCC_OscConfig+0x44a>
 8002910:	e037      	b.n	8002982 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d101      	bne.n	800291e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e032      	b.n	8002984 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800291e:	4b1c      	ldr	r3, [pc, #112]	; (8002990 <HAL_RCC_OscConfig+0x4e8>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d028      	beq.n	800297e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002936:	429a      	cmp	r2, r3
 8002938:	d121      	bne.n	800297e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002944:	429a      	cmp	r2, r3
 8002946:	d11a      	bne.n	800297e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800294e:	4013      	ands	r3, r2
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002954:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002956:	4293      	cmp	r3, r2
 8002958:	d111      	bne.n	800297e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002964:	085b      	lsrs	r3, r3, #1
 8002966:	3b01      	subs	r3, #1
 8002968:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800296a:	429a      	cmp	r2, r3
 800296c:	d107      	bne.n	800297e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002978:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800297a:	429a      	cmp	r2, r3
 800297c:	d001      	beq.n	8002982 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e000      	b.n	8002984 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	3718      	adds	r7, #24
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40007000 	.word	0x40007000
 8002990:	40023800 	.word	0x40023800
 8002994:	42470060 	.word	0x42470060

08002998 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d101      	bne.n	80029ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e0cc      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029ac:	4b68      	ldr	r3, [pc, #416]	; (8002b50 <HAL_RCC_ClockConfig+0x1b8>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0307 	and.w	r3, r3, #7
 80029b4:	683a      	ldr	r2, [r7, #0]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d90c      	bls.n	80029d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ba:	4b65      	ldr	r3, [pc, #404]	; (8002b50 <HAL_RCC_ClockConfig+0x1b8>)
 80029bc:	683a      	ldr	r2, [r7, #0]
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029c2:	4b63      	ldr	r3, [pc, #396]	; (8002b50 <HAL_RCC_ClockConfig+0x1b8>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0307 	and.w	r3, r3, #7
 80029ca:	683a      	ldr	r2, [r7, #0]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d001      	beq.n	80029d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e0b8      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0302 	and.w	r3, r3, #2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d020      	beq.n	8002a22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0304 	and.w	r3, r3, #4
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d005      	beq.n	80029f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029ec:	4b59      	ldr	r3, [pc, #356]	; (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	4a58      	ldr	r2, [pc, #352]	; (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 80029f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0308 	and.w	r3, r3, #8
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d005      	beq.n	8002a10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a04:	4b53      	ldr	r3, [pc, #332]	; (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	4a52      	ldr	r2, [pc, #328]	; (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a10:	4b50      	ldr	r3, [pc, #320]	; (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	494d      	ldr	r1, [pc, #308]	; (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d044      	beq.n	8002ab8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d107      	bne.n	8002a46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a36:	4b47      	ldr	r3, [pc, #284]	; (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d119      	bne.n	8002a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e07f      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d003      	beq.n	8002a56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a52:	2b03      	cmp	r3, #3
 8002a54:	d107      	bne.n	8002a66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a56:	4b3f      	ldr	r3, [pc, #252]	; (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d109      	bne.n	8002a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e06f      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a66:	4b3b      	ldr	r3, [pc, #236]	; (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e067      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a76:	4b37      	ldr	r3, [pc, #220]	; (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f023 0203 	bic.w	r2, r3, #3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	4934      	ldr	r1, [pc, #208]	; (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a88:	f7ff f9d8 	bl	8001e3c <HAL_GetTick>
 8002a8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a8e:	e00a      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a90:	f7ff f9d4 	bl	8001e3c <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e04f      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aa6:	4b2b      	ldr	r3, [pc, #172]	; (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f003 020c 	and.w	r2, r3, #12
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d1eb      	bne.n	8002a90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ab8:	4b25      	ldr	r3, [pc, #148]	; (8002b50 <HAL_RCC_ClockConfig+0x1b8>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0307 	and.w	r3, r3, #7
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d20c      	bcs.n	8002ae0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ac6:	4b22      	ldr	r3, [pc, #136]	; (8002b50 <HAL_RCC_ClockConfig+0x1b8>)
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	b2d2      	uxtb	r2, r2
 8002acc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ace:	4b20      	ldr	r3, [pc, #128]	; (8002b50 <HAL_RCC_ClockConfig+0x1b8>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0307 	and.w	r3, r3, #7
 8002ad6:	683a      	ldr	r2, [r7, #0]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d001      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e032      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0304 	and.w	r3, r3, #4
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d008      	beq.n	8002afe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002aec:	4b19      	ldr	r3, [pc, #100]	; (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	4916      	ldr	r1, [pc, #88]	; (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0308 	and.w	r3, r3, #8
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d009      	beq.n	8002b1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b0a:	4b12      	ldr	r3, [pc, #72]	; (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	490e      	ldr	r1, [pc, #56]	; (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b1e:	f000 f821 	bl	8002b64 <HAL_RCC_GetSysClockFreq>
 8002b22:	4602      	mov	r2, r0
 8002b24:	4b0b      	ldr	r3, [pc, #44]	; (8002b54 <HAL_RCC_ClockConfig+0x1bc>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	091b      	lsrs	r3, r3, #4
 8002b2a:	f003 030f 	and.w	r3, r3, #15
 8002b2e:	490a      	ldr	r1, [pc, #40]	; (8002b58 <HAL_RCC_ClockConfig+0x1c0>)
 8002b30:	5ccb      	ldrb	r3, [r1, r3]
 8002b32:	fa22 f303 	lsr.w	r3, r2, r3
 8002b36:	4a09      	ldr	r2, [pc, #36]	; (8002b5c <HAL_RCC_ClockConfig+0x1c4>)
 8002b38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b3a:	4b09      	ldr	r3, [pc, #36]	; (8002b60 <HAL_RCC_ClockConfig+0x1c8>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7fe fbce 	bl	80012e0 <HAL_InitTick>

  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	40023c00 	.word	0x40023c00
 8002b54:	40023800 	.word	0x40023800
 8002b58:	08009448 	.word	0x08009448
 8002b5c:	20000010 	.word	0x20000010
 8002b60:	20000018 	.word	0x20000018

08002b64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b64:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002b68:	b084      	sub	sp, #16
 8002b6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	607b      	str	r3, [r7, #4]
 8002b70:	2300      	movs	r3, #0
 8002b72:	60fb      	str	r3, [r7, #12]
 8002b74:	2300      	movs	r3, #0
 8002b76:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b7c:	4b67      	ldr	r3, [pc, #412]	; (8002d1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f003 030c 	and.w	r3, r3, #12
 8002b84:	2b08      	cmp	r3, #8
 8002b86:	d00d      	beq.n	8002ba4 <HAL_RCC_GetSysClockFreq+0x40>
 8002b88:	2b08      	cmp	r3, #8
 8002b8a:	f200 80bd 	bhi.w	8002d08 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d002      	beq.n	8002b98 <HAL_RCC_GetSysClockFreq+0x34>
 8002b92:	2b04      	cmp	r3, #4
 8002b94:	d003      	beq.n	8002b9e <HAL_RCC_GetSysClockFreq+0x3a>
 8002b96:	e0b7      	b.n	8002d08 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b98:	4b61      	ldr	r3, [pc, #388]	; (8002d20 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002b9a:	60bb      	str	r3, [r7, #8]
       break;
 8002b9c:	e0b7      	b.n	8002d0e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b9e:	4b61      	ldr	r3, [pc, #388]	; (8002d24 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002ba0:	60bb      	str	r3, [r7, #8]
      break;
 8002ba2:	e0b4      	b.n	8002d0e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ba4:	4b5d      	ldr	r3, [pc, #372]	; (8002d1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bac:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bae:	4b5b      	ldr	r3, [pc, #364]	; (8002d1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d04d      	beq.n	8002c56 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bba:	4b58      	ldr	r3, [pc, #352]	; (8002d1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	099b      	lsrs	r3, r3, #6
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	f04f 0300 	mov.w	r3, #0
 8002bc6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002bca:	f04f 0100 	mov.w	r1, #0
 8002bce:	ea02 0800 	and.w	r8, r2, r0
 8002bd2:	ea03 0901 	and.w	r9, r3, r1
 8002bd6:	4640      	mov	r0, r8
 8002bd8:	4649      	mov	r1, r9
 8002bda:	f04f 0200 	mov.w	r2, #0
 8002bde:	f04f 0300 	mov.w	r3, #0
 8002be2:	014b      	lsls	r3, r1, #5
 8002be4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002be8:	0142      	lsls	r2, r0, #5
 8002bea:	4610      	mov	r0, r2
 8002bec:	4619      	mov	r1, r3
 8002bee:	ebb0 0008 	subs.w	r0, r0, r8
 8002bf2:	eb61 0109 	sbc.w	r1, r1, r9
 8002bf6:	f04f 0200 	mov.w	r2, #0
 8002bfa:	f04f 0300 	mov.w	r3, #0
 8002bfe:	018b      	lsls	r3, r1, #6
 8002c00:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002c04:	0182      	lsls	r2, r0, #6
 8002c06:	1a12      	subs	r2, r2, r0
 8002c08:	eb63 0301 	sbc.w	r3, r3, r1
 8002c0c:	f04f 0000 	mov.w	r0, #0
 8002c10:	f04f 0100 	mov.w	r1, #0
 8002c14:	00d9      	lsls	r1, r3, #3
 8002c16:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c1a:	00d0      	lsls	r0, r2, #3
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	460b      	mov	r3, r1
 8002c20:	eb12 0208 	adds.w	r2, r2, r8
 8002c24:	eb43 0309 	adc.w	r3, r3, r9
 8002c28:	f04f 0000 	mov.w	r0, #0
 8002c2c:	f04f 0100 	mov.w	r1, #0
 8002c30:	0259      	lsls	r1, r3, #9
 8002c32:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002c36:	0250      	lsls	r0, r2, #9
 8002c38:	4602      	mov	r2, r0
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	4610      	mov	r0, r2
 8002c3e:	4619      	mov	r1, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	461a      	mov	r2, r3
 8002c44:	f04f 0300 	mov.w	r3, #0
 8002c48:	f7fd fb2a 	bl	80002a0 <__aeabi_uldivmod>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	460b      	mov	r3, r1
 8002c50:	4613      	mov	r3, r2
 8002c52:	60fb      	str	r3, [r7, #12]
 8002c54:	e04a      	b.n	8002cec <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c56:	4b31      	ldr	r3, [pc, #196]	; (8002d1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	099b      	lsrs	r3, r3, #6
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	f04f 0300 	mov.w	r3, #0
 8002c62:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002c66:	f04f 0100 	mov.w	r1, #0
 8002c6a:	ea02 0400 	and.w	r4, r2, r0
 8002c6e:	ea03 0501 	and.w	r5, r3, r1
 8002c72:	4620      	mov	r0, r4
 8002c74:	4629      	mov	r1, r5
 8002c76:	f04f 0200 	mov.w	r2, #0
 8002c7a:	f04f 0300 	mov.w	r3, #0
 8002c7e:	014b      	lsls	r3, r1, #5
 8002c80:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002c84:	0142      	lsls	r2, r0, #5
 8002c86:	4610      	mov	r0, r2
 8002c88:	4619      	mov	r1, r3
 8002c8a:	1b00      	subs	r0, r0, r4
 8002c8c:	eb61 0105 	sbc.w	r1, r1, r5
 8002c90:	f04f 0200 	mov.w	r2, #0
 8002c94:	f04f 0300 	mov.w	r3, #0
 8002c98:	018b      	lsls	r3, r1, #6
 8002c9a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002c9e:	0182      	lsls	r2, r0, #6
 8002ca0:	1a12      	subs	r2, r2, r0
 8002ca2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ca6:	f04f 0000 	mov.w	r0, #0
 8002caa:	f04f 0100 	mov.w	r1, #0
 8002cae:	00d9      	lsls	r1, r3, #3
 8002cb0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002cb4:	00d0      	lsls	r0, r2, #3
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	460b      	mov	r3, r1
 8002cba:	1912      	adds	r2, r2, r4
 8002cbc:	eb45 0303 	adc.w	r3, r5, r3
 8002cc0:	f04f 0000 	mov.w	r0, #0
 8002cc4:	f04f 0100 	mov.w	r1, #0
 8002cc8:	0299      	lsls	r1, r3, #10
 8002cca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002cce:	0290      	lsls	r0, r2, #10
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	4610      	mov	r0, r2
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	461a      	mov	r2, r3
 8002cdc:	f04f 0300 	mov.w	r3, #0
 8002ce0:	f7fd fade 	bl	80002a0 <__aeabi_uldivmod>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	4613      	mov	r3, r2
 8002cea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002cec:	4b0b      	ldr	r3, [pc, #44]	; (8002d1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	0c1b      	lsrs	r3, r3, #16
 8002cf2:	f003 0303 	and.w	r3, r3, #3
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d04:	60bb      	str	r3, [r7, #8]
      break;
 8002d06:	e002      	b.n	8002d0e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d08:	4b05      	ldr	r3, [pc, #20]	; (8002d20 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002d0a:	60bb      	str	r3, [r7, #8]
      break;
 8002d0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d0e:	68bb      	ldr	r3, [r7, #8]
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3710      	adds	r7, #16
 8002d14:	46bd      	mov	sp, r7
 8002d16:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002d1a:	bf00      	nop
 8002d1c:	40023800 	.word	0x40023800
 8002d20:	00f42400 	.word	0x00f42400
 8002d24:	007a1200 	.word	0x007a1200

08002d28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d2c:	4b03      	ldr	r3, [pc, #12]	; (8002d3c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	20000010 	.word	0x20000010

08002d40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d44:	f7ff fff0 	bl	8002d28 <HAL_RCC_GetHCLKFreq>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	4b05      	ldr	r3, [pc, #20]	; (8002d60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	0a9b      	lsrs	r3, r3, #10
 8002d50:	f003 0307 	and.w	r3, r3, #7
 8002d54:	4903      	ldr	r1, [pc, #12]	; (8002d64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d56:	5ccb      	ldrb	r3, [r1, r3]
 8002d58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	40023800 	.word	0x40023800
 8002d64:	08009458 	.word	0x08009458

08002d68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d6c:	f7ff ffdc 	bl	8002d28 <HAL_RCC_GetHCLKFreq>
 8002d70:	4602      	mov	r2, r0
 8002d72:	4b05      	ldr	r3, [pc, #20]	; (8002d88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	0b5b      	lsrs	r3, r3, #13
 8002d78:	f003 0307 	and.w	r3, r3, #7
 8002d7c:	4903      	ldr	r1, [pc, #12]	; (8002d8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d7e:	5ccb      	ldrb	r3, [r1, r3]
 8002d80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	40023800 	.word	0x40023800
 8002d8c:	08009458 	.word	0x08009458

08002d90 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	220f      	movs	r2, #15
 8002d9e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002da0:	4b12      	ldr	r3, [pc, #72]	; (8002dec <HAL_RCC_GetClockConfig+0x5c>)
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f003 0203 	and.w	r2, r3, #3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002dac:	4b0f      	ldr	r3, [pc, #60]	; (8002dec <HAL_RCC_GetClockConfig+0x5c>)
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002db8:	4b0c      	ldr	r3, [pc, #48]	; (8002dec <HAL_RCC_GetClockConfig+0x5c>)
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002dc4:	4b09      	ldr	r3, [pc, #36]	; (8002dec <HAL_RCC_GetClockConfig+0x5c>)
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	08db      	lsrs	r3, r3, #3
 8002dca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002dd2:	4b07      	ldr	r3, [pc, #28]	; (8002df0 <HAL_RCC_GetClockConfig+0x60>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0207 	and.w	r2, r3, #7
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	601a      	str	r2, [r3, #0]
}
 8002dde:	bf00      	nop
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	40023800 	.word	0x40023800
 8002df0:	40023c00 	.word	0x40023c00

08002df4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002e00:	2300      	movs	r3, #0
 8002e02:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d105      	bne.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d035      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002e1c:	4b62      	ldr	r3, [pc, #392]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e22:	f7ff f80b 	bl	8001e3c <HAL_GetTick>
 8002e26:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e28:	e008      	b.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002e2a:	f7ff f807 	bl	8001e3c <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d901      	bls.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e0b0      	b.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e3c:	4b5b      	ldr	r3, [pc, #364]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d1f0      	bne.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	019a      	lsls	r2, r3, #6
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	071b      	lsls	r3, r3, #28
 8002e54:	4955      	ldr	r1, [pc, #340]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002e5c:	4b52      	ldr	r3, [pc, #328]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002e5e:	2201      	movs	r2, #1
 8002e60:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e62:	f7fe ffeb 	bl	8001e3c <HAL_GetTick>
 8002e66:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e68:	e008      	b.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002e6a:	f7fe ffe7 	bl	8001e3c <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d901      	bls.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e090      	b.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e7c:	4b4b      	ldr	r3, [pc, #300]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d0f0      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f000 8083 	beq.w	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e96:	2300      	movs	r3, #0
 8002e98:	60fb      	str	r3, [r7, #12]
 8002e9a:	4b44      	ldr	r3, [pc, #272]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	4a43      	ldr	r2, [pc, #268]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ea4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ea6:	4b41      	ldr	r3, [pc, #260]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eae:	60fb      	str	r3, [r7, #12]
 8002eb0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002eb2:	4b3f      	ldr	r3, [pc, #252]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a3e      	ldr	r2, [pc, #248]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002eb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ebc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002ebe:	f7fe ffbd 	bl	8001e3c <HAL_GetTick>
 8002ec2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002ec4:	e008      	b.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002ec6:	f7fe ffb9 	bl	8001e3c <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d901      	bls.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e062      	b.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002ed8:	4b35      	ldr	r3, [pc, #212]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d0f0      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ee4:	4b31      	ldr	r3, [pc, #196]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eec:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d02f      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d028      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f02:	4b2a      	ldr	r3, [pc, #168]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f0a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f0c:	4b29      	ldr	r3, [pc, #164]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002f0e:	2201      	movs	r2, #1
 8002f10:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f12:	4b28      	ldr	r3, [pc, #160]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002f18:	4a24      	ldr	r2, [pc, #144]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002f1e:	4b23      	ldr	r3, [pc, #140]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d114      	bne.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002f2a:	f7fe ff87 	bl	8001e3c <HAL_GetTick>
 8002f2e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f30:	e00a      	b.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f32:	f7fe ff83 	bl	8001e3c <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d901      	bls.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e02a      	b.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f48:	4b18      	ldr	r3, [pc, #96]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f4c:	f003 0302 	and.w	r3, r3, #2
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d0ee      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f60:	d10d      	bne.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002f62:	4b12      	ldr	r3, [pc, #72]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002f72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f76:	490d      	ldr	r1, [pc, #52]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	608b      	str	r3, [r1, #8]
 8002f7c:	e005      	b.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002f7e:	4b0b      	ldr	r3, [pc, #44]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	4a0a      	ldr	r2, [pc, #40]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f84:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002f88:	6093      	str	r3, [r2, #8]
 8002f8a:	4b08      	ldr	r3, [pc, #32]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f8c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f96:	4905      	ldr	r1, [pc, #20]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3718      	adds	r7, #24
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	42470068 	.word	0x42470068
 8002fac:	40023800 	.word	0x40023800
 8002fb0:	40007000 	.word	0x40007000
 8002fb4:	42470e40 	.word	0x42470e40

08002fb8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e083      	b.n	80030d2 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	7f5b      	ldrb	r3, [r3, #29]
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d105      	bne.n	8002fe0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f7fe f906 	bl	80011ec <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	22ca      	movs	r2, #202	; 0xca
 8002fec:	625a      	str	r2, [r3, #36]	; 0x24
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2253      	movs	r2, #83	; 0x53
 8002ff4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 faa8 	bl	800354c <RTC_EnterInitMode>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d008      	beq.n	8003014 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	22ff      	movs	r2, #255	; 0xff
 8003008:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2204      	movs	r2, #4
 800300e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e05e      	b.n	80030d2 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	6812      	ldr	r2, [r2, #0]
 800301e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003022:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003026:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	6899      	ldr	r1, [r3, #8]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685a      	ldr	r2, [r3, #4]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	431a      	orrs	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	695b      	ldr	r3, [r3, #20]
 800303c:	431a      	orrs	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	430a      	orrs	r2, r1
 8003044:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	68d2      	ldr	r2, [r2, #12]
 800304e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6919      	ldr	r1, [r3, #16]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	041a      	lsls	r2, r3, #16
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	430a      	orrs	r2, r1
 8003062:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68da      	ldr	r2, [r3, #12]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003072:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f003 0320 	and.w	r3, r3, #32
 800307e:	2b00      	cmp	r3, #0
 8003080:	d10e      	bne.n	80030a0 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 fa3a 	bl	80034fc <HAL_RTC_WaitForSynchro>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d008      	beq.n	80030a0 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	22ff      	movs	r2, #255	; 0xff
 8003094:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2204      	movs	r2, #4
 800309a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e018      	b.n	80030d2 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80030ae:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	699a      	ldr	r2, [r3, #24]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	430a      	orrs	r2, r1
 80030c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	22ff      	movs	r2, #255	; 0xff
 80030c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2201      	movs	r2, #1
 80030ce:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80030d0:	2300      	movs	r3, #0
  }
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80030da:	b590      	push	{r4, r7, lr}
 80030dc:	b087      	sub	sp, #28
 80030de:	af00      	add	r7, sp, #0
 80030e0:	60f8      	str	r0, [r7, #12]
 80030e2:	60b9      	str	r1, [r7, #8]
 80030e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80030e6:	2300      	movs	r3, #0
 80030e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	7f1b      	ldrb	r3, [r3, #28]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d101      	bne.n	80030f6 <HAL_RTC_SetTime+0x1c>
 80030f2:	2302      	movs	r3, #2
 80030f4:	e0aa      	b.n	800324c <HAL_RTC_SetTime+0x172>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2201      	movs	r2, #1
 80030fa:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2202      	movs	r2, #2
 8003100:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d126      	bne.n	8003156 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003112:	2b00      	cmp	r3, #0
 8003114:	d102      	bne.n	800311c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	2200      	movs	r2, #0
 800311a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	4618      	mov	r0, r3
 8003122:	f000 fa3f 	bl	80035a4 <RTC_ByteToBcd2>
 8003126:	4603      	mov	r3, r0
 8003128:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	785b      	ldrb	r3, [r3, #1]
 800312e:	4618      	mov	r0, r3
 8003130:	f000 fa38 	bl	80035a4 <RTC_ByteToBcd2>
 8003134:	4603      	mov	r3, r0
 8003136:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003138:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	789b      	ldrb	r3, [r3, #2]
 800313e:	4618      	mov	r0, r3
 8003140:	f000 fa30 	bl	80035a4 <RTC_ByteToBcd2>
 8003144:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003146:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	78db      	ldrb	r3, [r3, #3]
 800314e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003150:	4313      	orrs	r3, r2
 8003152:	617b      	str	r3, [r7, #20]
 8003154:	e018      	b.n	8003188 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003160:	2b00      	cmp	r3, #0
 8003162:	d102      	bne.n	800316a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	2200      	movs	r2, #0
 8003168:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	785b      	ldrb	r3, [r3, #1]
 8003174:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003176:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8003178:	68ba      	ldr	r2, [r7, #8]
 800317a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800317c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	78db      	ldrb	r3, [r3, #3]
 8003182:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003184:	4313      	orrs	r3, r2
 8003186:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	22ca      	movs	r2, #202	; 0xca
 800318e:	625a      	str	r2, [r3, #36]	; 0x24
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2253      	movs	r2, #83	; 0x53
 8003196:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f000 f9d7 	bl	800354c <RTC_EnterInitMode>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d00b      	beq.n	80031bc <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	22ff      	movs	r2, #255	; 0xff
 80031aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2204      	movs	r2, #4
 80031b0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e047      	b.n	800324c <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80031c6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80031ca:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	689a      	ldr	r2, [r3, #8]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80031da:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	6899      	ldr	r1, [r3, #8]
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	68da      	ldr	r2, [r3, #12]
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	431a      	orrs	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	430a      	orrs	r2, r1
 80031f2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	68da      	ldr	r2, [r3, #12]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003202:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 0320 	and.w	r3, r3, #32
 800320e:	2b00      	cmp	r3, #0
 8003210:	d111      	bne.n	8003236 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003212:	68f8      	ldr	r0, [r7, #12]
 8003214:	f000 f972 	bl	80034fc <HAL_RTC_WaitForSynchro>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00b      	beq.n	8003236 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	22ff      	movs	r2, #255	; 0xff
 8003224:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2204      	movs	r2, #4
 800322a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e00a      	b.n	800324c <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	22ff      	movs	r2, #255	; 0xff
 800323c:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2201      	movs	r2, #1
 8003242:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800324a:	2300      	movs	r3, #0
  }
}
 800324c:	4618      	mov	r0, r3
 800324e:	371c      	adds	r7, #28
 8003250:	46bd      	mov	sp, r7
 8003252:	bd90      	pop	{r4, r7, pc}

08003254 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b086      	sub	sp, #24
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003260:	2300      	movs	r3, #0
 8003262:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003286:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800328a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	0c1b      	lsrs	r3, r3, #16
 8003290:	b2db      	uxtb	r3, r3
 8003292:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003296:	b2da      	uxtb	r2, r3
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	0a1b      	lsrs	r3, r3, #8
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032a6:	b2da      	uxtb	r2, r3
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032b4:	b2da      	uxtb	r2, r3
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	0c1b      	lsrs	r3, r3, #16
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c4:	b2da      	uxtb	r2, r3
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d11a      	bne.n	8003306 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	4618      	mov	r0, r3
 80032d6:	f000 f983 	bl	80035e0 <RTC_Bcd2ToByte>
 80032da:	4603      	mov	r3, r0
 80032dc:	461a      	mov	r2, r3
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	785b      	ldrb	r3, [r3, #1]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f000 f97a 	bl	80035e0 <RTC_Bcd2ToByte>
 80032ec:	4603      	mov	r3, r0
 80032ee:	461a      	mov	r2, r3
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	789b      	ldrb	r3, [r3, #2]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f000 f971 	bl	80035e0 <RTC_Bcd2ToByte>
 80032fe:	4603      	mov	r3, r0
 8003300:	461a      	mov	r2, r3
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	3718      	adds	r7, #24
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003310:	b590      	push	{r4, r7, lr}
 8003312:	b087      	sub	sp, #28
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800331c:	2300      	movs	r3, #0
 800331e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	7f1b      	ldrb	r3, [r3, #28]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d101      	bne.n	800332c <HAL_RTC_SetDate+0x1c>
 8003328:	2302      	movs	r3, #2
 800332a:	e094      	b.n	8003456 <HAL_RTC_SetDate+0x146>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2201      	movs	r2, #1
 8003330:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2202      	movs	r2, #2
 8003336:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d10e      	bne.n	800335c <HAL_RTC_SetDate+0x4c>
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	785b      	ldrb	r3, [r3, #1]
 8003342:	f003 0310 	and.w	r3, r3, #16
 8003346:	2b00      	cmp	r3, #0
 8003348:	d008      	beq.n	800335c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	785b      	ldrb	r3, [r3, #1]
 800334e:	f023 0310 	bic.w	r3, r3, #16
 8003352:	b2db      	uxtb	r3, r3
 8003354:	330a      	adds	r3, #10
 8003356:	b2da      	uxtb	r2, r3
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d11c      	bne.n	800339c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	78db      	ldrb	r3, [r3, #3]
 8003366:	4618      	mov	r0, r3
 8003368:	f000 f91c 	bl	80035a4 <RTC_ByteToBcd2>
 800336c:	4603      	mov	r3, r0
 800336e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	785b      	ldrb	r3, [r3, #1]
 8003374:	4618      	mov	r0, r3
 8003376:	f000 f915 	bl	80035a4 <RTC_ByteToBcd2>
 800337a:	4603      	mov	r3, r0
 800337c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800337e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	789b      	ldrb	r3, [r3, #2]
 8003384:	4618      	mov	r0, r3
 8003386:	f000 f90d 	bl	80035a4 <RTC_ByteToBcd2>
 800338a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800338c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003396:	4313      	orrs	r3, r2
 8003398:	617b      	str	r3, [r7, #20]
 800339a:	e00e      	b.n	80033ba <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	78db      	ldrb	r3, [r3, #3]
 80033a0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	785b      	ldrb	r3, [r3, #1]
 80033a6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80033a8:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80033aa:	68ba      	ldr	r2, [r7, #8]
 80033ac:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80033ae:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80033b6:	4313      	orrs	r3, r2
 80033b8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	22ca      	movs	r2, #202	; 0xca
 80033c0:	625a      	str	r2, [r3, #36]	; 0x24
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2253      	movs	r2, #83	; 0x53
 80033c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80033ca:	68f8      	ldr	r0, [r7, #12]
 80033cc:	f000 f8be 	bl	800354c <RTC_EnterInitMode>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00b      	beq.n	80033ee <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	22ff      	movs	r2, #255	; 0xff
 80033dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2204      	movs	r2, #4
 80033e2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2200      	movs	r2, #0
 80033e8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e033      	b.n	8003456 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80033f8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80033fc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68da      	ldr	r2, [r3, #12]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800340c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f003 0320 	and.w	r3, r3, #32
 8003418:	2b00      	cmp	r3, #0
 800341a:	d111      	bne.n	8003440 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f000 f86d 	bl	80034fc <HAL_RTC_WaitForSynchro>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00b      	beq.n	8003440 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	22ff      	movs	r2, #255	; 0xff
 800342e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2204      	movs	r2, #4
 8003434:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e00a      	b.n	8003456 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	22ff      	movs	r2, #255	; 0xff
 8003446:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2201      	movs	r2, #1
 800344c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8003454:	2300      	movs	r3, #0
  }
}
 8003456:	4618      	mov	r0, r3
 8003458:	371c      	adds	r7, #28
 800345a:	46bd      	mov	sp, r7
 800345c:	bd90      	pop	{r4, r7, pc}

0800345e <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b086      	sub	sp, #24
 8003462:	af00      	add	r7, sp, #0
 8003464:	60f8      	str	r0, [r7, #12]
 8003466:	60b9      	str	r1, [r7, #8]
 8003468:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800346a:	2300      	movs	r3, #0
 800346c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003478:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800347c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	0c1b      	lsrs	r3, r3, #16
 8003482:	b2da      	uxtb	r2, r3
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	0a1b      	lsrs	r3, r3, #8
 800348c:	b2db      	uxtb	r3, r3
 800348e:	f003 031f 	and.w	r3, r3, #31
 8003492:	b2da      	uxtb	r2, r3
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	b2db      	uxtb	r3, r3
 800349c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034a0:	b2da      	uxtb	r2, r3
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	0b5b      	lsrs	r3, r3, #13
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	f003 0307 	and.w	r3, r3, #7
 80034b0:	b2da      	uxtb	r2, r3
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d11a      	bne.n	80034f2 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	78db      	ldrb	r3, [r3, #3]
 80034c0:	4618      	mov	r0, r3
 80034c2:	f000 f88d 	bl	80035e0 <RTC_Bcd2ToByte>
 80034c6:	4603      	mov	r3, r0
 80034c8:	461a      	mov	r2, r3
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	785b      	ldrb	r3, [r3, #1]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f000 f884 	bl	80035e0 <RTC_Bcd2ToByte>
 80034d8:	4603      	mov	r3, r0
 80034da:	461a      	mov	r2, r3
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	789b      	ldrb	r3, [r3, #2]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f000 f87b 	bl	80035e0 <RTC_Bcd2ToByte>
 80034ea:	4603      	mov	r3, r0
 80034ec:	461a      	mov	r2, r3
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80034f2:	2300      	movs	r3, #0
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3718      	adds	r7, #24
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003504:	2300      	movs	r3, #0
 8003506:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68da      	ldr	r2, [r3, #12]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003516:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003518:	f7fe fc90 	bl	8001e3c <HAL_GetTick>
 800351c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800351e:	e009      	b.n	8003534 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003520:	f7fe fc8c 	bl	8001e3c <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800352e:	d901      	bls.n	8003534 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e007      	b.n	8003544 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	f003 0320 	and.w	r3, r3, #32
 800353e:	2b00      	cmp	r3, #0
 8003540:	d0ee      	beq.n	8003520 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003554:	2300      	movs	r3, #0
 8003556:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003562:	2b00      	cmp	r3, #0
 8003564:	d119      	bne.n	800359a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f04f 32ff 	mov.w	r2, #4294967295
 800356e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003570:	f7fe fc64 	bl	8001e3c <HAL_GetTick>
 8003574:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003576:	e009      	b.n	800358c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003578:	f7fe fc60 	bl	8001e3c <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003586:	d901      	bls.n	800358c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e007      	b.n	800359c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003596:	2b00      	cmp	r3, #0
 8003598:	d0ee      	beq.n	8003578 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800359a:	2300      	movs	r3, #0
}
 800359c:	4618      	mov	r0, r3
 800359e:	3710      	adds	r7, #16
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b085      	sub	sp, #20
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	4603      	mov	r3, r0
 80035ac:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80035ae:	2300      	movs	r3, #0
 80035b0:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 80035b2:	e005      	b.n	80035c0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	3301      	adds	r3, #1
 80035b8:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80035ba:	79fb      	ldrb	r3, [r7, #7]
 80035bc:	3b0a      	subs	r3, #10
 80035be:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80035c0:	79fb      	ldrb	r3, [r7, #7]
 80035c2:	2b09      	cmp	r3, #9
 80035c4:	d8f6      	bhi.n	80035b4 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	011b      	lsls	r3, r3, #4
 80035cc:	b2da      	uxtb	r2, r3
 80035ce:	79fb      	ldrb	r3, [r7, #7]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	b2db      	uxtb	r3, r3
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3714      	adds	r7, #20
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b085      	sub	sp, #20
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	4603      	mov	r3, r0
 80035e8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80035ea:	2300      	movs	r3, #0
 80035ec:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80035ee:	79fb      	ldrb	r3, [r7, #7]
 80035f0:	091b      	lsrs	r3, r3, #4
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	461a      	mov	r2, r3
 80035f6:	4613      	mov	r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	4413      	add	r3, r2
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003600:	79fb      	ldrb	r3, [r7, #7]
 8003602:	f003 030f 	and.w	r3, r3, #15
 8003606:	b2da      	uxtb	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	b2db      	uxtb	r3, r3
 800360c:	4413      	add	r3, r2
 800360e:	b2db      	uxtb	r3, r3
}
 8003610:	4618      	mov	r0, r3
 8003612:	3714      	adds	r7, #20
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e041      	b.n	80036b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d106      	bne.n	8003648 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 f839 	bl	80036ba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2202      	movs	r2, #2
 800364c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	3304      	adds	r3, #4
 8003658:	4619      	mov	r1, r3
 800365a:	4610      	mov	r0, r2
 800365c:	f000 f9d8 	bl	8003a10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3708      	adds	r7, #8
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80036ba:	b480      	push	{r7}
 80036bc:	b083      	sub	sp, #12
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80036c2:	bf00      	nop
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
	...

080036d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b085      	sub	sp, #20
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d001      	beq.n	80036e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e04e      	b.n	8003786 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2202      	movs	r2, #2
 80036ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68da      	ldr	r2, [r3, #12]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f042 0201 	orr.w	r2, r2, #1
 80036fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a23      	ldr	r2, [pc, #140]	; (8003794 <HAL_TIM_Base_Start_IT+0xc4>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d022      	beq.n	8003750 <HAL_TIM_Base_Start_IT+0x80>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003712:	d01d      	beq.n	8003750 <HAL_TIM_Base_Start_IT+0x80>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a1f      	ldr	r2, [pc, #124]	; (8003798 <HAL_TIM_Base_Start_IT+0xc8>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d018      	beq.n	8003750 <HAL_TIM_Base_Start_IT+0x80>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a1e      	ldr	r2, [pc, #120]	; (800379c <HAL_TIM_Base_Start_IT+0xcc>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d013      	beq.n	8003750 <HAL_TIM_Base_Start_IT+0x80>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a1c      	ldr	r2, [pc, #112]	; (80037a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d00e      	beq.n	8003750 <HAL_TIM_Base_Start_IT+0x80>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a1b      	ldr	r2, [pc, #108]	; (80037a4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d009      	beq.n	8003750 <HAL_TIM_Base_Start_IT+0x80>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a19      	ldr	r2, [pc, #100]	; (80037a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d004      	beq.n	8003750 <HAL_TIM_Base_Start_IT+0x80>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a18      	ldr	r2, [pc, #96]	; (80037ac <HAL_TIM_Base_Start_IT+0xdc>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d111      	bne.n	8003774 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f003 0307 	and.w	r3, r3, #7
 800375a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2b06      	cmp	r3, #6
 8003760:	d010      	beq.n	8003784 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f042 0201 	orr.w	r2, r2, #1
 8003770:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003772:	e007      	b.n	8003784 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f042 0201 	orr.w	r2, r2, #1
 8003782:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3714      	adds	r7, #20
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	40010000 	.word	0x40010000
 8003798:	40000400 	.word	0x40000400
 800379c:	40000800 	.word	0x40000800
 80037a0:	40000c00 	.word	0x40000c00
 80037a4:	40010400 	.word	0x40010400
 80037a8:	40014000 	.word	0x40014000
 80037ac:	40001800 	.word	0x40001800

080037b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d122      	bne.n	800380c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	f003 0302 	and.w	r3, r3, #2
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d11b      	bne.n	800380c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f06f 0202 	mvn.w	r2, #2
 80037dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2201      	movs	r2, #1
 80037e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	f003 0303 	and.w	r3, r3, #3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d003      	beq.n	80037fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 f8ee 	bl	80039d4 <HAL_TIM_IC_CaptureCallback>
 80037f8:	e005      	b.n	8003806 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 f8e0 	bl	80039c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 f8f1 	bl	80039e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	f003 0304 	and.w	r3, r3, #4
 8003816:	2b04      	cmp	r3, #4
 8003818:	d122      	bne.n	8003860 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	f003 0304 	and.w	r3, r3, #4
 8003824:	2b04      	cmp	r3, #4
 8003826:	d11b      	bne.n	8003860 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f06f 0204 	mvn.w	r2, #4
 8003830:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2202      	movs	r2, #2
 8003836:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003842:	2b00      	cmp	r3, #0
 8003844:	d003      	beq.n	800384e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 f8c4 	bl	80039d4 <HAL_TIM_IC_CaptureCallback>
 800384c:	e005      	b.n	800385a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 f8b6 	bl	80039c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f000 f8c7 	bl	80039e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	f003 0308 	and.w	r3, r3, #8
 800386a:	2b08      	cmp	r3, #8
 800386c:	d122      	bne.n	80038b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	f003 0308 	and.w	r3, r3, #8
 8003878:	2b08      	cmp	r3, #8
 800387a:	d11b      	bne.n	80038b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f06f 0208 	mvn.w	r2, #8
 8003884:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2204      	movs	r2, #4
 800388a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	69db      	ldr	r3, [r3, #28]
 8003892:	f003 0303 	and.w	r3, r3, #3
 8003896:	2b00      	cmp	r3, #0
 8003898:	d003      	beq.n	80038a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 f89a 	bl	80039d4 <HAL_TIM_IC_CaptureCallback>
 80038a0:	e005      	b.n	80038ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 f88c 	bl	80039c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f000 f89d 	bl	80039e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	f003 0310 	and.w	r3, r3, #16
 80038be:	2b10      	cmp	r3, #16
 80038c0:	d122      	bne.n	8003908 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	f003 0310 	and.w	r3, r3, #16
 80038cc:	2b10      	cmp	r3, #16
 80038ce:	d11b      	bne.n	8003908 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f06f 0210 	mvn.w	r2, #16
 80038d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2208      	movs	r2, #8
 80038de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	69db      	ldr	r3, [r3, #28]
 80038e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d003      	beq.n	80038f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 f870 	bl	80039d4 <HAL_TIM_IC_CaptureCallback>
 80038f4:	e005      	b.n	8003902 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f862 	bl	80039c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f000 f873 	bl	80039e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	2b01      	cmp	r3, #1
 8003914:	d10e      	bne.n	8003934 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	f003 0301 	and.w	r3, r3, #1
 8003920:	2b01      	cmp	r3, #1
 8003922:	d107      	bne.n	8003934 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f06f 0201 	mvn.w	r2, #1
 800392c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f7fd fb0e 	bl	8000f50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800393e:	2b80      	cmp	r3, #128	; 0x80
 8003940:	d10e      	bne.n	8003960 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800394c:	2b80      	cmp	r3, #128	; 0x80
 800394e:	d107      	bne.n	8003960 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 f902 	bl	8003b64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800396a:	2b40      	cmp	r3, #64	; 0x40
 800396c:	d10e      	bne.n	800398c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003978:	2b40      	cmp	r3, #64	; 0x40
 800397a:	d107      	bne.n	800398c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 f838 	bl	80039fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	f003 0320 	and.w	r3, r3, #32
 8003996:	2b20      	cmp	r3, #32
 8003998:	d10e      	bne.n	80039b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	f003 0320 	and.w	r3, r3, #32
 80039a4:	2b20      	cmp	r3, #32
 80039a6:	d107      	bne.n	80039b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f06f 0220 	mvn.w	r2, #32
 80039b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f8cc 	bl	8003b50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039b8:	bf00      	nop
 80039ba:	3708      	adds	r7, #8
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039c8:	bf00      	nop
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039dc:	bf00      	nop
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039f0:	bf00      	nop
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a04:	bf00      	nop
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b085      	sub	sp, #20
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a40      	ldr	r2, [pc, #256]	; (8003b24 <TIM_Base_SetConfig+0x114>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d013      	beq.n	8003a50 <TIM_Base_SetConfig+0x40>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a2e:	d00f      	beq.n	8003a50 <TIM_Base_SetConfig+0x40>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a3d      	ldr	r2, [pc, #244]	; (8003b28 <TIM_Base_SetConfig+0x118>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d00b      	beq.n	8003a50 <TIM_Base_SetConfig+0x40>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a3c      	ldr	r2, [pc, #240]	; (8003b2c <TIM_Base_SetConfig+0x11c>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d007      	beq.n	8003a50 <TIM_Base_SetConfig+0x40>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a3b      	ldr	r2, [pc, #236]	; (8003b30 <TIM_Base_SetConfig+0x120>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d003      	beq.n	8003a50 <TIM_Base_SetConfig+0x40>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a3a      	ldr	r2, [pc, #232]	; (8003b34 <TIM_Base_SetConfig+0x124>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d108      	bne.n	8003a62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a2f      	ldr	r2, [pc, #188]	; (8003b24 <TIM_Base_SetConfig+0x114>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d02b      	beq.n	8003ac2 <TIM_Base_SetConfig+0xb2>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a70:	d027      	beq.n	8003ac2 <TIM_Base_SetConfig+0xb2>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a2c      	ldr	r2, [pc, #176]	; (8003b28 <TIM_Base_SetConfig+0x118>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d023      	beq.n	8003ac2 <TIM_Base_SetConfig+0xb2>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a2b      	ldr	r2, [pc, #172]	; (8003b2c <TIM_Base_SetConfig+0x11c>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d01f      	beq.n	8003ac2 <TIM_Base_SetConfig+0xb2>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a2a      	ldr	r2, [pc, #168]	; (8003b30 <TIM_Base_SetConfig+0x120>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d01b      	beq.n	8003ac2 <TIM_Base_SetConfig+0xb2>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a29      	ldr	r2, [pc, #164]	; (8003b34 <TIM_Base_SetConfig+0x124>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d017      	beq.n	8003ac2 <TIM_Base_SetConfig+0xb2>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a28      	ldr	r2, [pc, #160]	; (8003b38 <TIM_Base_SetConfig+0x128>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d013      	beq.n	8003ac2 <TIM_Base_SetConfig+0xb2>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a27      	ldr	r2, [pc, #156]	; (8003b3c <TIM_Base_SetConfig+0x12c>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d00f      	beq.n	8003ac2 <TIM_Base_SetConfig+0xb2>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a26      	ldr	r2, [pc, #152]	; (8003b40 <TIM_Base_SetConfig+0x130>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d00b      	beq.n	8003ac2 <TIM_Base_SetConfig+0xb2>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a25      	ldr	r2, [pc, #148]	; (8003b44 <TIM_Base_SetConfig+0x134>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d007      	beq.n	8003ac2 <TIM_Base_SetConfig+0xb2>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a24      	ldr	r2, [pc, #144]	; (8003b48 <TIM_Base_SetConfig+0x138>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d003      	beq.n	8003ac2 <TIM_Base_SetConfig+0xb2>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a23      	ldr	r2, [pc, #140]	; (8003b4c <TIM_Base_SetConfig+0x13c>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d108      	bne.n	8003ad4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ac8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	689a      	ldr	r2, [r3, #8]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a0a      	ldr	r2, [pc, #40]	; (8003b24 <TIM_Base_SetConfig+0x114>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d003      	beq.n	8003b08 <TIM_Base_SetConfig+0xf8>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4a0c      	ldr	r2, [pc, #48]	; (8003b34 <TIM_Base_SetConfig+0x124>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d103      	bne.n	8003b10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	691a      	ldr	r2, [r3, #16]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	615a      	str	r2, [r3, #20]
}
 8003b16:	bf00      	nop
 8003b18:	3714      	adds	r7, #20
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	40010000 	.word	0x40010000
 8003b28:	40000400 	.word	0x40000400
 8003b2c:	40000800 	.word	0x40000800
 8003b30:	40000c00 	.word	0x40000c00
 8003b34:	40010400 	.word	0x40010400
 8003b38:	40014000 	.word	0x40014000
 8003b3c:	40014400 	.word	0x40014400
 8003b40:	40014800 	.word	0x40014800
 8003b44:	40001800 	.word	0x40001800
 8003b48:	40001c00 	.word	0x40001c00
 8003b4c:	40002000 	.word	0x40002000

08003b50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b58:	bf00      	nop
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e03f      	b.n	8003c0a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d106      	bne.n	8003ba4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f7fd fb4e 	bl	8001240 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2224      	movs	r2, #36	; 0x24
 8003ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68da      	ldr	r2, [r3, #12]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 fddb 	bl	8004778 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	691a      	ldr	r2, [r3, #16]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	695a      	ldr	r2, [r3, #20]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003be0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68da      	ldr	r2, [r3, #12]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bf0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2220      	movs	r2, #32
 8003bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2220      	movs	r2, #32
 8003c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3708      	adds	r7, #8
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c12:	b580      	push	{r7, lr}
 8003c14:	b08a      	sub	sp, #40	; 0x28
 8003c16:	af02      	add	r7, sp, #8
 8003c18:	60f8      	str	r0, [r7, #12]
 8003c1a:	60b9      	str	r1, [r7, #8]
 8003c1c:	603b      	str	r3, [r7, #0]
 8003c1e:	4613      	mov	r3, r2
 8003c20:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c22:	2300      	movs	r3, #0
 8003c24:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b20      	cmp	r3, #32
 8003c30:	d17c      	bne.n	8003d2c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d002      	beq.n	8003c3e <HAL_UART_Transmit+0x2c>
 8003c38:	88fb      	ldrh	r3, [r7, #6]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e075      	b.n	8003d2e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d101      	bne.n	8003c50 <HAL_UART_Transmit+0x3e>
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	e06e      	b.n	8003d2e <HAL_UART_Transmit+0x11c>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2221      	movs	r2, #33	; 0x21
 8003c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c66:	f7fe f8e9 	bl	8001e3c <HAL_GetTick>
 8003c6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	88fa      	ldrh	r2, [r7, #6]
 8003c70:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	88fa      	ldrh	r2, [r7, #6]
 8003c76:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c80:	d108      	bne.n	8003c94 <HAL_UART_Transmit+0x82>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d104      	bne.n	8003c94 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	61bb      	str	r3, [r7, #24]
 8003c92:	e003      	b.n	8003c9c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003ca4:	e02a      	b.n	8003cfc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	9300      	str	r3, [sp, #0]
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	2200      	movs	r2, #0
 8003cae:	2180      	movs	r1, #128	; 0x80
 8003cb0:	68f8      	ldr	r0, [r7, #12]
 8003cb2:	f000 fb1f 	bl	80042f4 <UART_WaitOnFlagUntilTimeout>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d001      	beq.n	8003cc0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e036      	b.n	8003d2e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d10b      	bne.n	8003cde <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	881b      	ldrh	r3, [r3, #0]
 8003cca:	461a      	mov	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cd4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	3302      	adds	r3, #2
 8003cda:	61bb      	str	r3, [r7, #24]
 8003cdc:	e007      	b.n	8003cee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	781a      	ldrb	r2, [r3, #0]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	3301      	adds	r3, #1
 8003cec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1cf      	bne.n	8003ca6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	9300      	str	r3, [sp, #0]
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	2140      	movs	r1, #64	; 0x40
 8003d10:	68f8      	ldr	r0, [r7, #12]
 8003d12:	f000 faef 	bl	80042f4 <UART_WaitOnFlagUntilTimeout>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d001      	beq.n	8003d20 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e006      	b.n	8003d2e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2220      	movs	r2, #32
 8003d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	e000      	b.n	8003d2e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003d2c:	2302      	movs	r3, #2
  }
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3720      	adds	r7, #32
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}

08003d36 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d36:	b580      	push	{r7, lr}
 8003d38:	b084      	sub	sp, #16
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	60f8      	str	r0, [r7, #12]
 8003d3e:	60b9      	str	r1, [r7, #8]
 8003d40:	4613      	mov	r3, r2
 8003d42:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	2b20      	cmp	r3, #32
 8003d4e:	d11d      	bne.n	8003d8c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d002      	beq.n	8003d5c <HAL_UART_Receive_IT+0x26>
 8003d56:	88fb      	ldrh	r3, [r7, #6]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d101      	bne.n	8003d60 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e016      	b.n	8003d8e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d101      	bne.n	8003d6e <HAL_UART_Receive_IT+0x38>
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	e00f      	b.n	8003d8e <HAL_UART_Receive_IT+0x58>
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003d7c:	88fb      	ldrh	r3, [r7, #6]
 8003d7e:	461a      	mov	r2, r3
 8003d80:	68b9      	ldr	r1, [r7, #8]
 8003d82:	68f8      	ldr	r0, [r7, #12]
 8003d84:	f000 fb24 	bl	80043d0 <UART_Start_Receive_IT>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	e000      	b.n	8003d8e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003d8c:	2302      	movs	r3, #2
  }
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
	...

08003d98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b0ba      	sub	sp, #232	; 0xe8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dce:	f003 030f 	and.w	r3, r3, #15
 8003dd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003dd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10f      	bne.n	8003dfe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003de2:	f003 0320 	and.w	r3, r3, #32
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d009      	beq.n	8003dfe <HAL_UART_IRQHandler+0x66>
 8003dea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dee:	f003 0320 	and.w	r3, r3, #32
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d003      	beq.n	8003dfe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 fc03 	bl	8004602 <UART_Receive_IT>
      return;
 8003dfc:	e256      	b.n	80042ac <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003dfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f000 80de 	beq.w	8003fc4 <HAL_UART_IRQHandler+0x22c>
 8003e08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e0c:	f003 0301 	and.w	r3, r3, #1
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d106      	bne.n	8003e22 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e18:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f000 80d1 	beq.w	8003fc4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00b      	beq.n	8003e46 <HAL_UART_IRQHandler+0xae>
 8003e2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d005      	beq.n	8003e46 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3e:	f043 0201 	orr.w	r2, r3, #1
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e4a:	f003 0304 	and.w	r3, r3, #4
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00b      	beq.n	8003e6a <HAL_UART_IRQHandler+0xd2>
 8003e52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d005      	beq.n	8003e6a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e62:	f043 0202 	orr.w	r2, r3, #2
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00b      	beq.n	8003e8e <HAL_UART_IRQHandler+0xf6>
 8003e76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d005      	beq.n	8003e8e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e86:	f043 0204 	orr.w	r2, r3, #4
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e92:	f003 0308 	and.w	r3, r3, #8
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d011      	beq.n	8003ebe <HAL_UART_IRQHandler+0x126>
 8003e9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e9e:	f003 0320 	and.w	r3, r3, #32
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d105      	bne.n	8003eb2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ea6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d005      	beq.n	8003ebe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb6:	f043 0208 	orr.w	r2, r3, #8
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	f000 81ed 	beq.w	80042a2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ecc:	f003 0320 	and.w	r3, r3, #32
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d008      	beq.n	8003ee6 <HAL_UART_IRQHandler+0x14e>
 8003ed4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ed8:	f003 0320 	and.w	r3, r3, #32
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d002      	beq.n	8003ee6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 fb8e 	bl	8004602 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef0:	2b40      	cmp	r3, #64	; 0x40
 8003ef2:	bf0c      	ite	eq
 8003ef4:	2301      	moveq	r3, #1
 8003ef6:	2300      	movne	r3, #0
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f02:	f003 0308 	and.w	r3, r3, #8
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d103      	bne.n	8003f12 <HAL_UART_IRQHandler+0x17a>
 8003f0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d04f      	beq.n	8003fb2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 fa96 	bl	8004444 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f22:	2b40      	cmp	r3, #64	; 0x40
 8003f24:	d141      	bne.n	8003faa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	3314      	adds	r3, #20
 8003f2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f34:	e853 3f00 	ldrex	r3, [r3]
 8003f38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003f3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	3314      	adds	r3, #20
 8003f4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003f52:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003f56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003f5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003f62:	e841 2300 	strex	r3, r2, [r1]
 8003f66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003f6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1d9      	bne.n	8003f26 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d013      	beq.n	8003fa2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7e:	4a7d      	ldr	r2, [pc, #500]	; (8004174 <HAL_UART_IRQHandler+0x3dc>)
 8003f80:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7fe f8b6 	bl	80020f8 <HAL_DMA_Abort_IT>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d016      	beq.n	8003fc0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f9c:	4610      	mov	r0, r2
 8003f9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fa0:	e00e      	b.n	8003fc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 f990 	bl	80042c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fa8:	e00a      	b.n	8003fc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 f98c 	bl	80042c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fb0:	e006      	b.n	8003fc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 f988 	bl	80042c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003fbe:	e170      	b.n	80042a2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fc0:	bf00      	nop
    return;
 8003fc2:	e16e      	b.n	80042a2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	f040 814a 	bne.w	8004262 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fd2:	f003 0310 	and.w	r3, r3, #16
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	f000 8143 	beq.w	8004262 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fe0:	f003 0310 	and.w	r3, r3, #16
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f000 813c 	beq.w	8004262 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fea:	2300      	movs	r3, #0
 8003fec:	60bb      	str	r3, [r7, #8]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	60bb      	str	r3, [r7, #8]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	60bb      	str	r3, [r7, #8]
 8003ffe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800400a:	2b40      	cmp	r3, #64	; 0x40
 800400c:	f040 80b4 	bne.w	8004178 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800401c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 8140 	beq.w	80042a6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800402a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800402e:	429a      	cmp	r2, r3
 8004030:	f080 8139 	bcs.w	80042a6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800403a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004040:	69db      	ldr	r3, [r3, #28]
 8004042:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004046:	f000 8088 	beq.w	800415a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	330c      	adds	r3, #12
 8004050:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004054:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004058:	e853 3f00 	ldrex	r3, [r3]
 800405c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004060:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004064:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004068:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	330c      	adds	r3, #12
 8004072:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004076:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800407a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800407e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004082:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004086:	e841 2300 	strex	r3, r2, [r1]
 800408a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800408e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1d9      	bne.n	800404a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	3314      	adds	r3, #20
 800409c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800409e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040a0:	e853 3f00 	ldrex	r3, [r3]
 80040a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80040a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040a8:	f023 0301 	bic.w	r3, r3, #1
 80040ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	3314      	adds	r3, #20
 80040b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80040ba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80040be:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80040c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80040c6:	e841 2300 	strex	r3, r2, [r1]
 80040ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80040cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1e1      	bne.n	8004096 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	3314      	adds	r3, #20
 80040d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040dc:	e853 3f00 	ldrex	r3, [r3]
 80040e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80040e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	3314      	adds	r3, #20
 80040f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80040f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80040f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80040fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80040fe:	e841 2300 	strex	r3, r2, [r1]
 8004102:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004104:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1e3      	bne.n	80040d2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2220      	movs	r2, #32
 800410e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	330c      	adds	r3, #12
 800411e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004122:	e853 3f00 	ldrex	r3, [r3]
 8004126:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004128:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800412a:	f023 0310 	bic.w	r3, r3, #16
 800412e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	330c      	adds	r3, #12
 8004138:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800413c:	65ba      	str	r2, [r7, #88]	; 0x58
 800413e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004140:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004142:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004144:	e841 2300 	strex	r3, r2, [r1]
 8004148:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800414a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1e3      	bne.n	8004118 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004154:	4618      	mov	r0, r3
 8004156:	f7fd ff5f 	bl	8002018 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004162:	b29b      	uxth	r3, r3
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	b29b      	uxth	r3, r3
 8004168:	4619      	mov	r1, r3
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f8b6 	bl	80042dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004170:	e099      	b.n	80042a6 <HAL_UART_IRQHandler+0x50e>
 8004172:	bf00      	nop
 8004174:	0800450b 	.word	0x0800450b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004180:	b29b      	uxth	r3, r3
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800418c:	b29b      	uxth	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	f000 808b 	beq.w	80042aa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004194:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004198:	2b00      	cmp	r3, #0
 800419a:	f000 8086 	beq.w	80042aa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	330c      	adds	r3, #12
 80041a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a8:	e853 3f00 	ldrex	r3, [r3]
 80041ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80041ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	330c      	adds	r3, #12
 80041be:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80041c2:	647a      	str	r2, [r7, #68]	; 0x44
 80041c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80041c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041ca:	e841 2300 	strex	r3, r2, [r1]
 80041ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80041d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1e3      	bne.n	800419e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	3314      	adds	r3, #20
 80041dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e0:	e853 3f00 	ldrex	r3, [r3]
 80041e4:	623b      	str	r3, [r7, #32]
   return(result);
 80041e6:	6a3b      	ldr	r3, [r7, #32]
 80041e8:	f023 0301 	bic.w	r3, r3, #1
 80041ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	3314      	adds	r3, #20
 80041f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80041fa:	633a      	str	r2, [r7, #48]	; 0x30
 80041fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004200:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004202:	e841 2300 	strex	r3, r2, [r1]
 8004206:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1e3      	bne.n	80041d6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2220      	movs	r2, #32
 8004212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	330c      	adds	r3, #12
 8004222:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	e853 3f00 	ldrex	r3, [r3]
 800422a:	60fb      	str	r3, [r7, #12]
   return(result);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f023 0310 	bic.w	r3, r3, #16
 8004232:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	330c      	adds	r3, #12
 800423c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004240:	61fa      	str	r2, [r7, #28]
 8004242:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004244:	69b9      	ldr	r1, [r7, #24]
 8004246:	69fa      	ldr	r2, [r7, #28]
 8004248:	e841 2300 	strex	r3, r2, [r1]
 800424c:	617b      	str	r3, [r7, #20]
   return(result);
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1e3      	bne.n	800421c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004254:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004258:	4619      	mov	r1, r3
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 f83e 	bl	80042dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004260:	e023      	b.n	80042aa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800426a:	2b00      	cmp	r3, #0
 800426c:	d009      	beq.n	8004282 <HAL_UART_IRQHandler+0x4ea>
 800426e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004276:	2b00      	cmp	r3, #0
 8004278:	d003      	beq.n	8004282 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 f959 	bl	8004532 <UART_Transmit_IT>
    return;
 8004280:	e014      	b.n	80042ac <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00e      	beq.n	80042ac <HAL_UART_IRQHandler+0x514>
 800428e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004296:	2b00      	cmp	r3, #0
 8004298:	d008      	beq.n	80042ac <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 f999 	bl	80045d2 <UART_EndTransmit_IT>
    return;
 80042a0:	e004      	b.n	80042ac <HAL_UART_IRQHandler+0x514>
    return;
 80042a2:	bf00      	nop
 80042a4:	e002      	b.n	80042ac <HAL_UART_IRQHandler+0x514>
      return;
 80042a6:	bf00      	nop
 80042a8:	e000      	b.n	80042ac <HAL_UART_IRQHandler+0x514>
      return;
 80042aa:	bf00      	nop
  }
}
 80042ac:	37e8      	adds	r7, #232	; 0xe8
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop

080042b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	460b      	mov	r3, r1
 80042e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b090      	sub	sp, #64	; 0x40
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	603b      	str	r3, [r7, #0]
 8004300:	4613      	mov	r3, r2
 8004302:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004304:	e050      	b.n	80043a8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004306:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800430c:	d04c      	beq.n	80043a8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800430e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004310:	2b00      	cmp	r3, #0
 8004312:	d007      	beq.n	8004324 <UART_WaitOnFlagUntilTimeout+0x30>
 8004314:	f7fd fd92 	bl	8001e3c <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004320:	429a      	cmp	r2, r3
 8004322:	d241      	bcs.n	80043a8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	330c      	adds	r3, #12
 800432a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800432c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800432e:	e853 3f00 	ldrex	r3, [r3]
 8004332:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004336:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800433a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	330c      	adds	r3, #12
 8004342:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004344:	637a      	str	r2, [r7, #52]	; 0x34
 8004346:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004348:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800434a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800434c:	e841 2300 	strex	r3, r2, [r1]
 8004350:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1e5      	bne.n	8004324 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	3314      	adds	r3, #20
 800435e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	e853 3f00 	ldrex	r3, [r3]
 8004366:	613b      	str	r3, [r7, #16]
   return(result);
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	f023 0301 	bic.w	r3, r3, #1
 800436e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	3314      	adds	r3, #20
 8004376:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004378:	623a      	str	r2, [r7, #32]
 800437a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437c:	69f9      	ldr	r1, [r7, #28]
 800437e:	6a3a      	ldr	r2, [r7, #32]
 8004380:	e841 2300 	strex	r3, r2, [r1]
 8004384:	61bb      	str	r3, [r7, #24]
   return(result);
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d1e5      	bne.n	8004358 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2220      	movs	r2, #32
 8004390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2220      	movs	r2, #32
 8004398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e00f      	b.n	80043c8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	4013      	ands	r3, r2
 80043b2:	68ba      	ldr	r2, [r7, #8]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	bf0c      	ite	eq
 80043b8:	2301      	moveq	r3, #1
 80043ba:	2300      	movne	r3, #0
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	461a      	mov	r2, r3
 80043c0:	79fb      	ldrb	r3, [r7, #7]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d09f      	beq.n	8004306 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3740      	adds	r7, #64	; 0x40
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	4613      	mov	r3, r2
 80043dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	68ba      	ldr	r2, [r7, #8]
 80043e2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	88fa      	ldrh	r2, [r7, #6]
 80043e8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	88fa      	ldrh	r2, [r7, #6]
 80043ee:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2222      	movs	r2, #34	; 0x22
 80043fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68da      	ldr	r2, [r3, #12]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004414:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	695a      	ldr	r2, [r3, #20]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f042 0201 	orr.w	r2, r2, #1
 8004424:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68da      	ldr	r2, [r3, #12]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f042 0220 	orr.w	r2, r2, #32
 8004434:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004436:	2300      	movs	r3, #0
}
 8004438:	4618      	mov	r0, r3
 800443a:	3714      	adds	r7, #20
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004444:	b480      	push	{r7}
 8004446:	b095      	sub	sp, #84	; 0x54
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	330c      	adds	r3, #12
 8004452:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004456:	e853 3f00 	ldrex	r3, [r3]
 800445a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800445c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004462:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	330c      	adds	r3, #12
 800446a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800446c:	643a      	str	r2, [r7, #64]	; 0x40
 800446e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004470:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004472:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004474:	e841 2300 	strex	r3, r2, [r1]
 8004478:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800447a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800447c:	2b00      	cmp	r3, #0
 800447e:	d1e5      	bne.n	800444c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	3314      	adds	r3, #20
 8004486:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004488:	6a3b      	ldr	r3, [r7, #32]
 800448a:	e853 3f00 	ldrex	r3, [r3]
 800448e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	f023 0301 	bic.w	r3, r3, #1
 8004496:	64bb      	str	r3, [r7, #72]	; 0x48
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	3314      	adds	r3, #20
 800449e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044a8:	e841 2300 	strex	r3, r2, [r1]
 80044ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d1e5      	bne.n	8004480 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d119      	bne.n	80044f0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	330c      	adds	r3, #12
 80044c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	e853 3f00 	ldrex	r3, [r3]
 80044ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	f023 0310 	bic.w	r3, r3, #16
 80044d2:	647b      	str	r3, [r7, #68]	; 0x44
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	330c      	adds	r3, #12
 80044da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044dc:	61ba      	str	r2, [r7, #24]
 80044de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e0:	6979      	ldr	r1, [r7, #20]
 80044e2:	69ba      	ldr	r2, [r7, #24]
 80044e4:	e841 2300 	strex	r3, r2, [r1]
 80044e8:	613b      	str	r3, [r7, #16]
   return(result);
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1e5      	bne.n	80044bc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2220      	movs	r2, #32
 80044f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80044fe:	bf00      	nop
 8004500:	3754      	adds	r7, #84	; 0x54
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr

0800450a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800450a:	b580      	push	{r7, lr}
 800450c:	b084      	sub	sp, #16
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004516:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2200      	movs	r2, #0
 800451c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2200      	movs	r2, #0
 8004522:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004524:	68f8      	ldr	r0, [r7, #12]
 8004526:	f7ff fecf 	bl	80042c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800452a:	bf00      	nop
 800452c:	3710      	adds	r7, #16
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}

08004532 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004532:	b480      	push	{r7}
 8004534:	b085      	sub	sp, #20
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004540:	b2db      	uxtb	r3, r3
 8004542:	2b21      	cmp	r3, #33	; 0x21
 8004544:	d13e      	bne.n	80045c4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800454e:	d114      	bne.n	800457a <UART_Transmit_IT+0x48>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d110      	bne.n	800457a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a1b      	ldr	r3, [r3, #32]
 800455c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	881b      	ldrh	r3, [r3, #0]
 8004562:	461a      	mov	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800456c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	1c9a      	adds	r2, r3, #2
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	621a      	str	r2, [r3, #32]
 8004578:	e008      	b.n	800458c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	1c59      	adds	r1, r3, #1
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	6211      	str	r1, [r2, #32]
 8004584:	781a      	ldrb	r2, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004590:	b29b      	uxth	r3, r3
 8004592:	3b01      	subs	r3, #1
 8004594:	b29b      	uxth	r3, r3
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	4619      	mov	r1, r3
 800459a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800459c:	2b00      	cmp	r3, #0
 800459e:	d10f      	bne.n	80045c0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68da      	ldr	r2, [r3, #12]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045ae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68da      	ldr	r2, [r3, #12]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045be:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80045c0:	2300      	movs	r3, #0
 80045c2:	e000      	b.n	80045c6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80045c4:	2302      	movs	r3, #2
  }
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3714      	adds	r7, #20
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr

080045d2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80045d2:	b580      	push	{r7, lr}
 80045d4:	b082      	sub	sp, #8
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68da      	ldr	r2, [r3, #12]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045e8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2220      	movs	r2, #32
 80045ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f7ff fe5e 	bl	80042b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3708      	adds	r7, #8
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004602:	b580      	push	{r7, lr}
 8004604:	b08c      	sub	sp, #48	; 0x30
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004610:	b2db      	uxtb	r3, r3
 8004612:	2b22      	cmp	r3, #34	; 0x22
 8004614:	f040 80ab 	bne.w	800476e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004620:	d117      	bne.n	8004652 <UART_Receive_IT+0x50>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d113      	bne.n	8004652 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800462a:	2300      	movs	r3, #0
 800462c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004632:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	b29b      	uxth	r3, r3
 800463c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004640:	b29a      	uxth	r2, r3
 8004642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004644:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800464a:	1c9a      	adds	r2, r3, #2
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	629a      	str	r2, [r3, #40]	; 0x28
 8004650:	e026      	b.n	80046a0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004656:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004658:	2300      	movs	r3, #0
 800465a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004664:	d007      	beq.n	8004676 <UART_Receive_IT+0x74>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d10a      	bne.n	8004684 <UART_Receive_IT+0x82>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d106      	bne.n	8004684 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	b2da      	uxtb	r2, r3
 800467e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004680:	701a      	strb	r2, [r3, #0]
 8004682:	e008      	b.n	8004696 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	b2db      	uxtb	r3, r3
 800468c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004690:	b2da      	uxtb	r2, r3
 8004692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004694:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800469a:	1c5a      	adds	r2, r3, #1
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	3b01      	subs	r3, #1
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	4619      	mov	r1, r3
 80046ae:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d15a      	bne.n	800476a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68da      	ldr	r2, [r3, #12]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f022 0220 	bic.w	r2, r2, #32
 80046c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68da      	ldr	r2, [r3, #12]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	695a      	ldr	r2, [r3, #20]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f022 0201 	bic.w	r2, r2, #1
 80046e2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2220      	movs	r2, #32
 80046e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d135      	bne.n	8004760 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	330c      	adds	r3, #12
 8004700:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	e853 3f00 	ldrex	r3, [r3]
 8004708:	613b      	str	r3, [r7, #16]
   return(result);
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	f023 0310 	bic.w	r3, r3, #16
 8004710:	627b      	str	r3, [r7, #36]	; 0x24
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	330c      	adds	r3, #12
 8004718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800471a:	623a      	str	r2, [r7, #32]
 800471c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800471e:	69f9      	ldr	r1, [r7, #28]
 8004720:	6a3a      	ldr	r2, [r7, #32]
 8004722:	e841 2300 	strex	r3, r2, [r1]
 8004726:	61bb      	str	r3, [r7, #24]
   return(result);
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1e5      	bne.n	80046fa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0310 	and.w	r3, r3, #16
 8004738:	2b10      	cmp	r3, #16
 800473a:	d10a      	bne.n	8004752 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800473c:	2300      	movs	r3, #0
 800473e:	60fb      	str	r3, [r7, #12]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	60fb      	str	r3, [r7, #12]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	60fb      	str	r3, [r7, #12]
 8004750:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004756:	4619      	mov	r1, r3
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f7ff fdbf 	bl	80042dc <HAL_UARTEx_RxEventCallback>
 800475e:	e002      	b.n	8004766 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f7fc fbb3 	bl	8000ecc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004766:	2300      	movs	r3, #0
 8004768:	e002      	b.n	8004770 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800476a:	2300      	movs	r3, #0
 800476c:	e000      	b.n	8004770 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800476e:	2302      	movs	r3, #2
  }
}
 8004770:	4618      	mov	r0, r3
 8004772:	3730      	adds	r7, #48	; 0x30
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800477c:	b09f      	sub	sp, #124	; 0x7c
 800477e:	af00      	add	r7, sp, #0
 8004780:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004782:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800478c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800478e:	68d9      	ldr	r1, [r3, #12]
 8004790:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	ea40 0301 	orr.w	r3, r0, r1
 8004798:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800479a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800479c:	689a      	ldr	r2, [r3, #8]
 800479e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	431a      	orrs	r2, r3
 80047a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047a6:	695b      	ldr	r3, [r3, #20]
 80047a8:	431a      	orrs	r2, r3
 80047aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047ac:	69db      	ldr	r3, [r3, #28]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80047b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80047bc:	f021 010c 	bic.w	r1, r1, #12
 80047c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047c6:	430b      	orrs	r3, r1
 80047c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	695b      	ldr	r3, [r3, #20]
 80047d0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80047d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047d6:	6999      	ldr	r1, [r3, #24]
 80047d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	ea40 0301 	orr.w	r3, r0, r1
 80047e0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80047e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	4bc5      	ldr	r3, [pc, #788]	; (8004afc <UART_SetConfig+0x384>)
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d004      	beq.n	80047f6 <UART_SetConfig+0x7e>
 80047ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	4bc3      	ldr	r3, [pc, #780]	; (8004b00 <UART_SetConfig+0x388>)
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d103      	bne.n	80047fe <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80047f6:	f7fe fab7 	bl	8002d68 <HAL_RCC_GetPCLK2Freq>
 80047fa:	6778      	str	r0, [r7, #116]	; 0x74
 80047fc:	e002      	b.n	8004804 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80047fe:	f7fe fa9f 	bl	8002d40 <HAL_RCC_GetPCLK1Freq>
 8004802:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004804:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004806:	69db      	ldr	r3, [r3, #28]
 8004808:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800480c:	f040 80b6 	bne.w	800497c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004810:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004812:	461c      	mov	r4, r3
 8004814:	f04f 0500 	mov.w	r5, #0
 8004818:	4622      	mov	r2, r4
 800481a:	462b      	mov	r3, r5
 800481c:	1891      	adds	r1, r2, r2
 800481e:	6439      	str	r1, [r7, #64]	; 0x40
 8004820:	415b      	adcs	r3, r3
 8004822:	647b      	str	r3, [r7, #68]	; 0x44
 8004824:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004828:	1912      	adds	r2, r2, r4
 800482a:	eb45 0303 	adc.w	r3, r5, r3
 800482e:	f04f 0000 	mov.w	r0, #0
 8004832:	f04f 0100 	mov.w	r1, #0
 8004836:	00d9      	lsls	r1, r3, #3
 8004838:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800483c:	00d0      	lsls	r0, r2, #3
 800483e:	4602      	mov	r2, r0
 8004840:	460b      	mov	r3, r1
 8004842:	1911      	adds	r1, r2, r4
 8004844:	6639      	str	r1, [r7, #96]	; 0x60
 8004846:	416b      	adcs	r3, r5
 8004848:	667b      	str	r3, [r7, #100]	; 0x64
 800484a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	461a      	mov	r2, r3
 8004850:	f04f 0300 	mov.w	r3, #0
 8004854:	1891      	adds	r1, r2, r2
 8004856:	63b9      	str	r1, [r7, #56]	; 0x38
 8004858:	415b      	adcs	r3, r3
 800485a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800485c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004860:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004864:	f7fb fd1c 	bl	80002a0 <__aeabi_uldivmod>
 8004868:	4602      	mov	r2, r0
 800486a:	460b      	mov	r3, r1
 800486c:	4ba5      	ldr	r3, [pc, #660]	; (8004b04 <UART_SetConfig+0x38c>)
 800486e:	fba3 2302 	umull	r2, r3, r3, r2
 8004872:	095b      	lsrs	r3, r3, #5
 8004874:	011e      	lsls	r6, r3, #4
 8004876:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004878:	461c      	mov	r4, r3
 800487a:	f04f 0500 	mov.w	r5, #0
 800487e:	4622      	mov	r2, r4
 8004880:	462b      	mov	r3, r5
 8004882:	1891      	adds	r1, r2, r2
 8004884:	6339      	str	r1, [r7, #48]	; 0x30
 8004886:	415b      	adcs	r3, r3
 8004888:	637b      	str	r3, [r7, #52]	; 0x34
 800488a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800488e:	1912      	adds	r2, r2, r4
 8004890:	eb45 0303 	adc.w	r3, r5, r3
 8004894:	f04f 0000 	mov.w	r0, #0
 8004898:	f04f 0100 	mov.w	r1, #0
 800489c:	00d9      	lsls	r1, r3, #3
 800489e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80048a2:	00d0      	lsls	r0, r2, #3
 80048a4:	4602      	mov	r2, r0
 80048a6:	460b      	mov	r3, r1
 80048a8:	1911      	adds	r1, r2, r4
 80048aa:	65b9      	str	r1, [r7, #88]	; 0x58
 80048ac:	416b      	adcs	r3, r5
 80048ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	461a      	mov	r2, r3
 80048b6:	f04f 0300 	mov.w	r3, #0
 80048ba:	1891      	adds	r1, r2, r2
 80048bc:	62b9      	str	r1, [r7, #40]	; 0x28
 80048be:	415b      	adcs	r3, r3
 80048c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80048c6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80048ca:	f7fb fce9 	bl	80002a0 <__aeabi_uldivmod>
 80048ce:	4602      	mov	r2, r0
 80048d0:	460b      	mov	r3, r1
 80048d2:	4b8c      	ldr	r3, [pc, #560]	; (8004b04 <UART_SetConfig+0x38c>)
 80048d4:	fba3 1302 	umull	r1, r3, r3, r2
 80048d8:	095b      	lsrs	r3, r3, #5
 80048da:	2164      	movs	r1, #100	; 0x64
 80048dc:	fb01 f303 	mul.w	r3, r1, r3
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	00db      	lsls	r3, r3, #3
 80048e4:	3332      	adds	r3, #50	; 0x32
 80048e6:	4a87      	ldr	r2, [pc, #540]	; (8004b04 <UART_SetConfig+0x38c>)
 80048e8:	fba2 2303 	umull	r2, r3, r2, r3
 80048ec:	095b      	lsrs	r3, r3, #5
 80048ee:	005b      	lsls	r3, r3, #1
 80048f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80048f4:	441e      	add	r6, r3
 80048f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048f8:	4618      	mov	r0, r3
 80048fa:	f04f 0100 	mov.w	r1, #0
 80048fe:	4602      	mov	r2, r0
 8004900:	460b      	mov	r3, r1
 8004902:	1894      	adds	r4, r2, r2
 8004904:	623c      	str	r4, [r7, #32]
 8004906:	415b      	adcs	r3, r3
 8004908:	627b      	str	r3, [r7, #36]	; 0x24
 800490a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800490e:	1812      	adds	r2, r2, r0
 8004910:	eb41 0303 	adc.w	r3, r1, r3
 8004914:	f04f 0400 	mov.w	r4, #0
 8004918:	f04f 0500 	mov.w	r5, #0
 800491c:	00dd      	lsls	r5, r3, #3
 800491e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004922:	00d4      	lsls	r4, r2, #3
 8004924:	4622      	mov	r2, r4
 8004926:	462b      	mov	r3, r5
 8004928:	1814      	adds	r4, r2, r0
 800492a:	653c      	str	r4, [r7, #80]	; 0x50
 800492c:	414b      	adcs	r3, r1
 800492e:	657b      	str	r3, [r7, #84]	; 0x54
 8004930:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	461a      	mov	r2, r3
 8004936:	f04f 0300 	mov.w	r3, #0
 800493a:	1891      	adds	r1, r2, r2
 800493c:	61b9      	str	r1, [r7, #24]
 800493e:	415b      	adcs	r3, r3
 8004940:	61fb      	str	r3, [r7, #28]
 8004942:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004946:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800494a:	f7fb fca9 	bl	80002a0 <__aeabi_uldivmod>
 800494e:	4602      	mov	r2, r0
 8004950:	460b      	mov	r3, r1
 8004952:	4b6c      	ldr	r3, [pc, #432]	; (8004b04 <UART_SetConfig+0x38c>)
 8004954:	fba3 1302 	umull	r1, r3, r3, r2
 8004958:	095b      	lsrs	r3, r3, #5
 800495a:	2164      	movs	r1, #100	; 0x64
 800495c:	fb01 f303 	mul.w	r3, r1, r3
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	00db      	lsls	r3, r3, #3
 8004964:	3332      	adds	r3, #50	; 0x32
 8004966:	4a67      	ldr	r2, [pc, #412]	; (8004b04 <UART_SetConfig+0x38c>)
 8004968:	fba2 2303 	umull	r2, r3, r2, r3
 800496c:	095b      	lsrs	r3, r3, #5
 800496e:	f003 0207 	and.w	r2, r3, #7
 8004972:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4432      	add	r2, r6
 8004978:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800497a:	e0b9      	b.n	8004af0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800497c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800497e:	461c      	mov	r4, r3
 8004980:	f04f 0500 	mov.w	r5, #0
 8004984:	4622      	mov	r2, r4
 8004986:	462b      	mov	r3, r5
 8004988:	1891      	adds	r1, r2, r2
 800498a:	6139      	str	r1, [r7, #16]
 800498c:	415b      	adcs	r3, r3
 800498e:	617b      	str	r3, [r7, #20]
 8004990:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004994:	1912      	adds	r2, r2, r4
 8004996:	eb45 0303 	adc.w	r3, r5, r3
 800499a:	f04f 0000 	mov.w	r0, #0
 800499e:	f04f 0100 	mov.w	r1, #0
 80049a2:	00d9      	lsls	r1, r3, #3
 80049a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80049a8:	00d0      	lsls	r0, r2, #3
 80049aa:	4602      	mov	r2, r0
 80049ac:	460b      	mov	r3, r1
 80049ae:	eb12 0804 	adds.w	r8, r2, r4
 80049b2:	eb43 0905 	adc.w	r9, r3, r5
 80049b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f04f 0100 	mov.w	r1, #0
 80049c0:	f04f 0200 	mov.w	r2, #0
 80049c4:	f04f 0300 	mov.w	r3, #0
 80049c8:	008b      	lsls	r3, r1, #2
 80049ca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80049ce:	0082      	lsls	r2, r0, #2
 80049d0:	4640      	mov	r0, r8
 80049d2:	4649      	mov	r1, r9
 80049d4:	f7fb fc64 	bl	80002a0 <__aeabi_uldivmod>
 80049d8:	4602      	mov	r2, r0
 80049da:	460b      	mov	r3, r1
 80049dc:	4b49      	ldr	r3, [pc, #292]	; (8004b04 <UART_SetConfig+0x38c>)
 80049de:	fba3 2302 	umull	r2, r3, r3, r2
 80049e2:	095b      	lsrs	r3, r3, #5
 80049e4:	011e      	lsls	r6, r3, #4
 80049e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049e8:	4618      	mov	r0, r3
 80049ea:	f04f 0100 	mov.w	r1, #0
 80049ee:	4602      	mov	r2, r0
 80049f0:	460b      	mov	r3, r1
 80049f2:	1894      	adds	r4, r2, r2
 80049f4:	60bc      	str	r4, [r7, #8]
 80049f6:	415b      	adcs	r3, r3
 80049f8:	60fb      	str	r3, [r7, #12]
 80049fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049fe:	1812      	adds	r2, r2, r0
 8004a00:	eb41 0303 	adc.w	r3, r1, r3
 8004a04:	f04f 0400 	mov.w	r4, #0
 8004a08:	f04f 0500 	mov.w	r5, #0
 8004a0c:	00dd      	lsls	r5, r3, #3
 8004a0e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004a12:	00d4      	lsls	r4, r2, #3
 8004a14:	4622      	mov	r2, r4
 8004a16:	462b      	mov	r3, r5
 8004a18:	1814      	adds	r4, r2, r0
 8004a1a:	64bc      	str	r4, [r7, #72]	; 0x48
 8004a1c:	414b      	adcs	r3, r1
 8004a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	4618      	mov	r0, r3
 8004a26:	f04f 0100 	mov.w	r1, #0
 8004a2a:	f04f 0200 	mov.w	r2, #0
 8004a2e:	f04f 0300 	mov.w	r3, #0
 8004a32:	008b      	lsls	r3, r1, #2
 8004a34:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004a38:	0082      	lsls	r2, r0, #2
 8004a3a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004a3e:	f7fb fc2f 	bl	80002a0 <__aeabi_uldivmod>
 8004a42:	4602      	mov	r2, r0
 8004a44:	460b      	mov	r3, r1
 8004a46:	4b2f      	ldr	r3, [pc, #188]	; (8004b04 <UART_SetConfig+0x38c>)
 8004a48:	fba3 1302 	umull	r1, r3, r3, r2
 8004a4c:	095b      	lsrs	r3, r3, #5
 8004a4e:	2164      	movs	r1, #100	; 0x64
 8004a50:	fb01 f303 	mul.w	r3, r1, r3
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	011b      	lsls	r3, r3, #4
 8004a58:	3332      	adds	r3, #50	; 0x32
 8004a5a:	4a2a      	ldr	r2, [pc, #168]	; (8004b04 <UART_SetConfig+0x38c>)
 8004a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a60:	095b      	lsrs	r3, r3, #5
 8004a62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a66:	441e      	add	r6, r3
 8004a68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f04f 0100 	mov.w	r1, #0
 8004a70:	4602      	mov	r2, r0
 8004a72:	460b      	mov	r3, r1
 8004a74:	1894      	adds	r4, r2, r2
 8004a76:	603c      	str	r4, [r7, #0]
 8004a78:	415b      	adcs	r3, r3
 8004a7a:	607b      	str	r3, [r7, #4]
 8004a7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a80:	1812      	adds	r2, r2, r0
 8004a82:	eb41 0303 	adc.w	r3, r1, r3
 8004a86:	f04f 0400 	mov.w	r4, #0
 8004a8a:	f04f 0500 	mov.w	r5, #0
 8004a8e:	00dd      	lsls	r5, r3, #3
 8004a90:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004a94:	00d4      	lsls	r4, r2, #3
 8004a96:	4622      	mov	r2, r4
 8004a98:	462b      	mov	r3, r5
 8004a9a:	eb12 0a00 	adds.w	sl, r2, r0
 8004a9e:	eb43 0b01 	adc.w	fp, r3, r1
 8004aa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f04f 0100 	mov.w	r1, #0
 8004aac:	f04f 0200 	mov.w	r2, #0
 8004ab0:	f04f 0300 	mov.w	r3, #0
 8004ab4:	008b      	lsls	r3, r1, #2
 8004ab6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004aba:	0082      	lsls	r2, r0, #2
 8004abc:	4650      	mov	r0, sl
 8004abe:	4659      	mov	r1, fp
 8004ac0:	f7fb fbee 	bl	80002a0 <__aeabi_uldivmod>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	4b0e      	ldr	r3, [pc, #56]	; (8004b04 <UART_SetConfig+0x38c>)
 8004aca:	fba3 1302 	umull	r1, r3, r3, r2
 8004ace:	095b      	lsrs	r3, r3, #5
 8004ad0:	2164      	movs	r1, #100	; 0x64
 8004ad2:	fb01 f303 	mul.w	r3, r1, r3
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	011b      	lsls	r3, r3, #4
 8004ada:	3332      	adds	r3, #50	; 0x32
 8004adc:	4a09      	ldr	r2, [pc, #36]	; (8004b04 <UART_SetConfig+0x38c>)
 8004ade:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae2:	095b      	lsrs	r3, r3, #5
 8004ae4:	f003 020f 	and.w	r2, r3, #15
 8004ae8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4432      	add	r2, r6
 8004aee:	609a      	str	r2, [r3, #8]
}
 8004af0:	bf00      	nop
 8004af2:	377c      	adds	r7, #124	; 0x7c
 8004af4:	46bd      	mov	sp, r7
 8004af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004afa:	bf00      	nop
 8004afc:	40011000 	.word	0x40011000
 8004b00:	40011400 	.word	0x40011400
 8004b04:	51eb851f 	.word	0x51eb851f

08004b08 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f103 0208 	add.w	r2, r3, #8
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8004b20:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f103 0208 	add.w	r2, r3, #8
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f103 0208 	add.w	r2, r3, #8
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004b3c:	bf00      	nop
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004b56:	bf00      	nop
 8004b58:	370c      	adds	r7, #12
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr

08004b62 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8004b62:	b480      	push	{r7}
 8004b64:	b085      	sub	sp, #20
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
 8004b6a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b78:	d103      	bne.n	8004b82 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	60fb      	str	r3, [r7, #12]
 8004b80:	e00c      	b.n	8004b9c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	3308      	adds	r3, #8
 8004b86:	60fb      	str	r3, [r7, #12]
 8004b88:	e002      	b.n	8004b90 <vListInsert+0x2e>
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	60fb      	str	r3, [r7, #12]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68ba      	ldr	r2, [r7, #8]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d2f6      	bcs.n	8004b8a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	685a      	ldr	r2, [r3, #4]
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	683a      	ldr	r2, [r7, #0]
 8004baa:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	683a      	ldr	r2, [r7, #0]
 8004bb6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	1c5a      	adds	r2, r3, #1
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	601a      	str	r2, [r3, #0]
}
 8004bc8:	bf00      	nop
 8004bca:	3714      	adds	r7, #20
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b085      	sub	sp, #20
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	6892      	ldr	r2, [r2, #8]
 8004bea:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	6852      	ldr	r2, [r2, #4]
 8004bf4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d103      	bne.n	8004c08 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	689a      	ldr	r2, [r3, #8]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	1e5a      	subs	r2, r3, #1
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3714      	adds	r7, #20
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b086      	sub	sp, #24
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8004c32:	2301      	movs	r3, #1
 8004c34:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d10a      	bne.n	8004c56 <xQueueGenericReset+0x2e>
        __asm volatile
 8004c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c44:	f383 8811 	msr	BASEPRI, r3
 8004c48:	f3bf 8f6f 	isb	sy
 8004c4c:	f3bf 8f4f 	dsb	sy
 8004c50:	60fb      	str	r3, [r7, #12]
    }
 8004c52:	bf00      	nop
 8004c54:	e7fe      	b.n	8004c54 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d05d      	beq.n	8004d18 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d059      	beq.n	8004d18 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c6c:	2100      	movs	r1, #0
 8004c6e:	fba3 2302 	umull	r2, r3, r3, r2
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d000      	beq.n	8004c78 <xQueueGenericReset+0x50>
 8004c76:	2101      	movs	r1, #1
 8004c78:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d14c      	bne.n	8004d18 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8004c7e:	f002 fd69 	bl	8007754 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c8a:	6939      	ldr	r1, [r7, #16]
 8004c8c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004c8e:	fb01 f303 	mul.w	r3, r1, r3
 8004c92:	441a      	add	r2, r3
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cae:	3b01      	subs	r3, #1
 8004cb0:	6939      	ldr	r1, [r7, #16]
 8004cb2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004cb4:	fb01 f303 	mul.w	r3, r1, r3
 8004cb8:	441a      	add	r2, r3
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	22ff      	movs	r2, #255	; 0xff
 8004cc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	22ff      	movs	r2, #255	; 0xff
 8004cca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d114      	bne.n	8004cfe <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d01a      	beq.n	8004d12 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	3310      	adds	r3, #16
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f001 f9c5 	bl	8006070 <xTaskRemoveFromEventList>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d012      	beq.n	8004d12 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004cec:	4b15      	ldr	r3, [pc, #84]	; (8004d44 <xQueueGenericReset+0x11c>)
 8004cee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cf2:	601a      	str	r2, [r3, #0]
 8004cf4:	f3bf 8f4f 	dsb	sy
 8004cf8:	f3bf 8f6f 	isb	sy
 8004cfc:	e009      	b.n	8004d12 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	3310      	adds	r3, #16
 8004d02:	4618      	mov	r0, r3
 8004d04:	f7ff ff00 	bl	8004b08 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	3324      	adds	r3, #36	; 0x24
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f7ff fefb 	bl	8004b08 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8004d12:	f002 fd4f 	bl	80077b4 <vPortExitCritical>
 8004d16:	e001      	b.n	8004d1c <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d10a      	bne.n	8004d38 <xQueueGenericReset+0x110>
        __asm volatile
 8004d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d26:	f383 8811 	msr	BASEPRI, r3
 8004d2a:	f3bf 8f6f 	isb	sy
 8004d2e:	f3bf 8f4f 	dsb	sy
 8004d32:	60bb      	str	r3, [r7, #8]
    }
 8004d34:	bf00      	nop
 8004d36:	e7fe      	b.n	8004d36 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8004d38:	697b      	ldr	r3, [r7, #20]
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3718      	adds	r7, #24
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	e000ed04 	.word	0xe000ed04

08004d48 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b08a      	sub	sp, #40	; 0x28
 8004d4c:	af02      	add	r7, sp, #8
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	4613      	mov	r3, r2
 8004d54:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8004d56:	2300      	movs	r3, #0
 8004d58:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d02e      	beq.n	8004dbe <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8004d60:	2100      	movs	r1, #0
 8004d62:	68ba      	ldr	r2, [r7, #8]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	fba3 2302 	umull	r2, r3, r3, r2
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d000      	beq.n	8004d70 <xQueueGenericCreate+0x28>
 8004d6e:	2101      	movs	r1, #1
 8004d70:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d123      	bne.n	8004dbe <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	68ba      	ldr	r2, [r7, #8]
 8004d7a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8004d7e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8004d82:	d81c      	bhi.n	8004dbe <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	68ba      	ldr	r2, [r7, #8]
 8004d88:	fb02 f303 	mul.w	r3, r2, r3
 8004d8c:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	3350      	adds	r3, #80	; 0x50
 8004d92:	4618      	mov	r0, r3
 8004d94:	f002 fe02 	bl	800799c <pvPortMalloc>
 8004d98:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d01c      	beq.n	8004dda <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	3350      	adds	r3, #80	; 0x50
 8004da8:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004daa:	79fa      	ldrb	r2, [r7, #7]
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	9300      	str	r3, [sp, #0]
 8004db0:	4613      	mov	r3, r2
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	68b9      	ldr	r1, [r7, #8]
 8004db6:	68f8      	ldr	r0, [r7, #12]
 8004db8:	f000 f814 	bl	8004de4 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8004dbc:	e00d      	b.n	8004dda <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d10a      	bne.n	8004dda <xQueueGenericCreate+0x92>
        __asm volatile
 8004dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc8:	f383 8811 	msr	BASEPRI, r3
 8004dcc:	f3bf 8f6f 	isb	sy
 8004dd0:	f3bf 8f4f 	dsb	sy
 8004dd4:	613b      	str	r3, [r7, #16]
    }
 8004dd6:	bf00      	nop
 8004dd8:	e7fe      	b.n	8004dd8 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8004dda:	69fb      	ldr	r3, [r7, #28]
    }
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3720      	adds	r7, #32
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	607a      	str	r2, [r7, #4]
 8004df0:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d103      	bne.n	8004e00 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	69ba      	ldr	r2, [r7, #24]
 8004dfc:	601a      	str	r2, [r3, #0]
 8004dfe:	e002      	b.n	8004e06 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	68ba      	ldr	r2, [r7, #8]
 8004e10:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004e12:	2101      	movs	r1, #1
 8004e14:	69b8      	ldr	r0, [r7, #24]
 8004e16:	f7ff ff07 	bl	8004c28 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	78fa      	ldrb	r2, [r7, #3]
 8004e1e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8004e22:	bf00      	nop
 8004e24:	3710      	adds	r7, #16
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
	...

08004e2c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b08e      	sub	sp, #56	; 0x38
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	607a      	str	r2, [r7, #4]
 8004e38:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8004e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d10a      	bne.n	8004e5e <xQueueGenericSend+0x32>
        __asm volatile
 8004e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e4c:	f383 8811 	msr	BASEPRI, r3
 8004e50:	f3bf 8f6f 	isb	sy
 8004e54:	f3bf 8f4f 	dsb	sy
 8004e58:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8004e5a:	bf00      	nop
 8004e5c:	e7fe      	b.n	8004e5c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d103      	bne.n	8004e6c <xQueueGenericSend+0x40>
 8004e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d101      	bne.n	8004e70 <xQueueGenericSend+0x44>
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e000      	b.n	8004e72 <xQueueGenericSend+0x46>
 8004e70:	2300      	movs	r3, #0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d10a      	bne.n	8004e8c <xQueueGenericSend+0x60>
        __asm volatile
 8004e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e7a:	f383 8811 	msr	BASEPRI, r3
 8004e7e:	f3bf 8f6f 	isb	sy
 8004e82:	f3bf 8f4f 	dsb	sy
 8004e86:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004e88:	bf00      	nop
 8004e8a:	e7fe      	b.n	8004e8a <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d103      	bne.n	8004e9a <xQueueGenericSend+0x6e>
 8004e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d101      	bne.n	8004e9e <xQueueGenericSend+0x72>
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e000      	b.n	8004ea0 <xQueueGenericSend+0x74>
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d10a      	bne.n	8004eba <xQueueGenericSend+0x8e>
        __asm volatile
 8004ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea8:	f383 8811 	msr	BASEPRI, r3
 8004eac:	f3bf 8f6f 	isb	sy
 8004eb0:	f3bf 8f4f 	dsb	sy
 8004eb4:	623b      	str	r3, [r7, #32]
    }
 8004eb6:	bf00      	nop
 8004eb8:	e7fe      	b.n	8004eb8 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004eba:	f001 fae9 	bl	8006490 <xTaskGetSchedulerState>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d102      	bne.n	8004eca <xQueueGenericSend+0x9e>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d101      	bne.n	8004ece <xQueueGenericSend+0xa2>
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e000      	b.n	8004ed0 <xQueueGenericSend+0xa4>
 8004ece:	2300      	movs	r3, #0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d10a      	bne.n	8004eea <xQueueGenericSend+0xbe>
        __asm volatile
 8004ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed8:	f383 8811 	msr	BASEPRI, r3
 8004edc:	f3bf 8f6f 	isb	sy
 8004ee0:	f3bf 8f4f 	dsb	sy
 8004ee4:	61fb      	str	r3, [r7, #28]
    }
 8004ee6:	bf00      	nop
 8004ee8:	e7fe      	b.n	8004ee8 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004eea:	f002 fc33 	bl	8007754 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d302      	bcc.n	8004f00 <xQueueGenericSend+0xd4>
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	2b02      	cmp	r3, #2
 8004efe:	d129      	bne.n	8004f54 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f00:	683a      	ldr	r2, [r7, #0]
 8004f02:	68b9      	ldr	r1, [r7, #8]
 8004f04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f06:	f000 fa37 	bl	8005378 <prvCopyDataToQueue>
 8004f0a:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d010      	beq.n	8004f36 <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f16:	3324      	adds	r3, #36	; 0x24
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f001 f8a9 	bl	8006070 <xTaskRemoveFromEventList>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d013      	beq.n	8004f4c <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8004f24:	4b3f      	ldr	r3, [pc, #252]	; (8005024 <xQueueGenericSend+0x1f8>)
 8004f26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f2a:	601a      	str	r2, [r3, #0]
 8004f2c:	f3bf 8f4f 	dsb	sy
 8004f30:	f3bf 8f6f 	isb	sy
 8004f34:	e00a      	b.n	8004f4c <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8004f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d007      	beq.n	8004f4c <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8004f3c:	4b39      	ldr	r3, [pc, #228]	; (8005024 <xQueueGenericSend+0x1f8>)
 8004f3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f42:	601a      	str	r2, [r3, #0]
 8004f44:	f3bf 8f4f 	dsb	sy
 8004f48:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8004f4c:	f002 fc32 	bl	80077b4 <vPortExitCritical>
                return pdPASS;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e063      	b.n	800501c <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d103      	bne.n	8004f62 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004f5a:	f002 fc2b 	bl	80077b4 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	e05c      	b.n	800501c <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d106      	bne.n	8004f76 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004f68:	f107 0314 	add.w	r3, r7, #20
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f001 f955 	bl	800621c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004f72:	2301      	movs	r3, #1
 8004f74:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004f76:	f002 fc1d 	bl	80077b4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004f7a:	f000 fd83 	bl	8005a84 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004f7e:	f002 fbe9 	bl	8007754 <vPortEnterCritical>
 8004f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f88:	b25b      	sxtb	r3, r3
 8004f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f8e:	d103      	bne.n	8004f98 <xQueueGenericSend+0x16c>
 8004f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f9e:	b25b      	sxtb	r3, r3
 8004fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa4:	d103      	bne.n	8004fae <xQueueGenericSend+0x182>
 8004fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fae:	f002 fc01 	bl	80077b4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004fb2:	1d3a      	adds	r2, r7, #4
 8004fb4:	f107 0314 	add.w	r3, r7, #20
 8004fb8:	4611      	mov	r1, r2
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f001 f944 	bl	8006248 <xTaskCheckForTimeOut>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d124      	bne.n	8005010 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004fc6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004fc8:	f000 face 	bl	8005568 <prvIsQueueFull>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d018      	beq.n	8005004 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd4:	3310      	adds	r3, #16
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	4611      	mov	r1, r2
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f000 ffde 	bl	8005f9c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8004fe0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004fe2:	f000 fa59 	bl	8005498 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8004fe6:	f000 fd5b 	bl	8005aa0 <xTaskResumeAll>
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	f47f af7c 	bne.w	8004eea <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8004ff2:	4b0c      	ldr	r3, [pc, #48]	; (8005024 <xQueueGenericSend+0x1f8>)
 8004ff4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ff8:	601a      	str	r2, [r3, #0]
 8004ffa:	f3bf 8f4f 	dsb	sy
 8004ffe:	f3bf 8f6f 	isb	sy
 8005002:	e772      	b.n	8004eea <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8005004:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005006:	f000 fa47 	bl	8005498 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800500a:	f000 fd49 	bl	8005aa0 <xTaskResumeAll>
 800500e:	e76c      	b.n	8004eea <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8005010:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005012:	f000 fa41 	bl	8005498 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005016:	f000 fd43 	bl	8005aa0 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800501a:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800501c:	4618      	mov	r0, r3
 800501e:	3738      	adds	r7, #56	; 0x38
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}
 8005024:	e000ed04 	.word	0xe000ed04

08005028 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b090      	sub	sp, #64	; 0x40
 800502c:	af00      	add	r7, sp, #0
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	60b9      	str	r1, [r7, #8]
 8005032:	607a      	str	r2, [r7, #4]
 8005034:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800503a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800503c:	2b00      	cmp	r3, #0
 800503e:	d10a      	bne.n	8005056 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8005040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005044:	f383 8811 	msr	BASEPRI, r3
 8005048:	f3bf 8f6f 	isb	sy
 800504c:	f3bf 8f4f 	dsb	sy
 8005050:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8005052:	bf00      	nop
 8005054:	e7fe      	b.n	8005054 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d103      	bne.n	8005064 <xQueueGenericSendFromISR+0x3c>
 800505c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800505e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005060:	2b00      	cmp	r3, #0
 8005062:	d101      	bne.n	8005068 <xQueueGenericSendFromISR+0x40>
 8005064:	2301      	movs	r3, #1
 8005066:	e000      	b.n	800506a <xQueueGenericSendFromISR+0x42>
 8005068:	2300      	movs	r3, #0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d10a      	bne.n	8005084 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 800506e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005072:	f383 8811 	msr	BASEPRI, r3
 8005076:	f3bf 8f6f 	isb	sy
 800507a:	f3bf 8f4f 	dsb	sy
 800507e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8005080:	bf00      	nop
 8005082:	e7fe      	b.n	8005082 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	2b02      	cmp	r3, #2
 8005088:	d103      	bne.n	8005092 <xQueueGenericSendFromISR+0x6a>
 800508a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800508c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800508e:	2b01      	cmp	r3, #1
 8005090:	d101      	bne.n	8005096 <xQueueGenericSendFromISR+0x6e>
 8005092:	2301      	movs	r3, #1
 8005094:	e000      	b.n	8005098 <xQueueGenericSendFromISR+0x70>
 8005096:	2300      	movs	r3, #0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d10a      	bne.n	80050b2 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 800509c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a0:	f383 8811 	msr	BASEPRI, r3
 80050a4:	f3bf 8f6f 	isb	sy
 80050a8:	f3bf 8f4f 	dsb	sy
 80050ac:	623b      	str	r3, [r7, #32]
    }
 80050ae:	bf00      	nop
 80050b0:	e7fe      	b.n	80050b0 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80050b2:	f002 fc33 	bl	800791c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80050b6:	f3ef 8211 	mrs	r2, BASEPRI
 80050ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050be:	f383 8811 	msr	BASEPRI, r3
 80050c2:	f3bf 8f6f 	isb	sy
 80050c6:	f3bf 8f4f 	dsb	sy
 80050ca:	61fa      	str	r2, [r7, #28]
 80050cc:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80050ce:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80050d0:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80050d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050da:	429a      	cmp	r2, r3
 80050dc:	d302      	bcc.n	80050e4 <xQueueGenericSendFromISR+0xbc>
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d13e      	bne.n	8005162 <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80050e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f2:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80050f4:	683a      	ldr	r2, [r7, #0]
 80050f6:	68b9      	ldr	r1, [r7, #8]
 80050f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80050fa:	f000 f93d 	bl	8005378 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80050fe:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005106:	d112      	bne.n	800512e <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800510a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510c:	2b00      	cmp	r3, #0
 800510e:	d025      	beq.n	800515c <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005112:	3324      	adds	r3, #36	; 0x24
 8005114:	4618      	mov	r0, r3
 8005116:	f000 ffab 	bl	8006070 <xTaskRemoveFromEventList>
 800511a:	4603      	mov	r3, r0
 800511c:	2b00      	cmp	r3, #0
 800511e:	d01d      	beq.n	800515c <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d01a      	beq.n	800515c <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2201      	movs	r2, #1
 800512a:	601a      	str	r2, [r3, #0]
 800512c:	e016      	b.n	800515c <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800512e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005132:	2b7f      	cmp	r3, #127	; 0x7f
 8005134:	d10a      	bne.n	800514c <xQueueGenericSendFromISR+0x124>
        __asm volatile
 8005136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800513a:	f383 8811 	msr	BASEPRI, r3
 800513e:	f3bf 8f6f 	isb	sy
 8005142:	f3bf 8f4f 	dsb	sy
 8005146:	617b      	str	r3, [r7, #20]
    }
 8005148:	bf00      	nop
 800514a:	e7fe      	b.n	800514a <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800514c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005150:	3301      	adds	r3, #1
 8005152:	b2db      	uxtb	r3, r3
 8005154:	b25a      	sxtb	r2, r3
 8005156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005158:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 800515c:	2301      	movs	r3, #1
 800515e:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8005160:	e001      	b.n	8005166 <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8005162:	2300      	movs	r3, #0
 8005164:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005168:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8005170:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8005172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005174:	4618      	mov	r0, r3
 8005176:	3740      	adds	r7, #64	; 0x40
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b08c      	sub	sp, #48	; 0x30
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8005188:	2300      	movs	r3, #0
 800518a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8005190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005192:	2b00      	cmp	r3, #0
 8005194:	d10a      	bne.n	80051ac <xQueueReceive+0x30>
        __asm volatile
 8005196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800519a:	f383 8811 	msr	BASEPRI, r3
 800519e:	f3bf 8f6f 	isb	sy
 80051a2:	f3bf 8f4f 	dsb	sy
 80051a6:	623b      	str	r3, [r7, #32]
    }
 80051a8:	bf00      	nop
 80051aa:	e7fe      	b.n	80051aa <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d103      	bne.n	80051ba <xQueueReceive+0x3e>
 80051b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d101      	bne.n	80051be <xQueueReceive+0x42>
 80051ba:	2301      	movs	r3, #1
 80051bc:	e000      	b.n	80051c0 <xQueueReceive+0x44>
 80051be:	2300      	movs	r3, #0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d10a      	bne.n	80051da <xQueueReceive+0x5e>
        __asm volatile
 80051c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c8:	f383 8811 	msr	BASEPRI, r3
 80051cc:	f3bf 8f6f 	isb	sy
 80051d0:	f3bf 8f4f 	dsb	sy
 80051d4:	61fb      	str	r3, [r7, #28]
    }
 80051d6:	bf00      	nop
 80051d8:	e7fe      	b.n	80051d8 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80051da:	f001 f959 	bl	8006490 <xTaskGetSchedulerState>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d102      	bne.n	80051ea <xQueueReceive+0x6e>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d101      	bne.n	80051ee <xQueueReceive+0x72>
 80051ea:	2301      	movs	r3, #1
 80051ec:	e000      	b.n	80051f0 <xQueueReceive+0x74>
 80051ee:	2300      	movs	r3, #0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d10a      	bne.n	800520a <xQueueReceive+0x8e>
        __asm volatile
 80051f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f8:	f383 8811 	msr	BASEPRI, r3
 80051fc:	f3bf 8f6f 	isb	sy
 8005200:	f3bf 8f4f 	dsb	sy
 8005204:	61bb      	str	r3, [r7, #24]
    }
 8005206:	bf00      	nop
 8005208:	e7fe      	b.n	8005208 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800520a:	f002 faa3 	bl	8007754 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800520e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005212:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005216:	2b00      	cmp	r3, #0
 8005218:	d01f      	beq.n	800525a <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800521a:	68b9      	ldr	r1, [r7, #8]
 800521c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800521e:	f000 f915 	bl	800544c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005224:	1e5a      	subs	r2, r3, #1
 8005226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005228:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800522a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00f      	beq.n	8005252 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005234:	3310      	adds	r3, #16
 8005236:	4618      	mov	r0, r3
 8005238:	f000 ff1a 	bl	8006070 <xTaskRemoveFromEventList>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d007      	beq.n	8005252 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8005242:	4b3d      	ldr	r3, [pc, #244]	; (8005338 <xQueueReceive+0x1bc>)
 8005244:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005248:	601a      	str	r2, [r3, #0]
 800524a:	f3bf 8f4f 	dsb	sy
 800524e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8005252:	f002 faaf 	bl	80077b4 <vPortExitCritical>
                return pdPASS;
 8005256:	2301      	movs	r3, #1
 8005258:	e069      	b.n	800532e <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d103      	bne.n	8005268 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005260:	f002 faa8 	bl	80077b4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8005264:	2300      	movs	r3, #0
 8005266:	e062      	b.n	800532e <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800526a:	2b00      	cmp	r3, #0
 800526c:	d106      	bne.n	800527c <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800526e:	f107 0310 	add.w	r3, r7, #16
 8005272:	4618      	mov	r0, r3
 8005274:	f000 ffd2 	bl	800621c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005278:	2301      	movs	r3, #1
 800527a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800527c:	f002 fa9a 	bl	80077b4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005280:	f000 fc00 	bl	8005a84 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005284:	f002 fa66 	bl	8007754 <vPortEnterCritical>
 8005288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800528a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800528e:	b25b      	sxtb	r3, r3
 8005290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005294:	d103      	bne.n	800529e <xQueueReceive+0x122>
 8005296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005298:	2200      	movs	r2, #0
 800529a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800529e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052a4:	b25b      	sxtb	r3, r3
 80052a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052aa:	d103      	bne.n	80052b4 <xQueueReceive+0x138>
 80052ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ae:	2200      	movs	r2, #0
 80052b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052b4:	f002 fa7e 	bl	80077b4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80052b8:	1d3a      	adds	r2, r7, #4
 80052ba:	f107 0310 	add.w	r3, r7, #16
 80052be:	4611      	mov	r1, r2
 80052c0:	4618      	mov	r0, r3
 80052c2:	f000 ffc1 	bl	8006248 <xTaskCheckForTimeOut>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d123      	bne.n	8005314 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80052cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052ce:	f000 f935 	bl	800553c <prvIsQueueEmpty>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d017      	beq.n	8005308 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80052d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052da:	3324      	adds	r3, #36	; 0x24
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	4611      	mov	r1, r2
 80052e0:	4618      	mov	r0, r3
 80052e2:	f000 fe5b 	bl	8005f9c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80052e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052e8:	f000 f8d6 	bl	8005498 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80052ec:	f000 fbd8 	bl	8005aa0 <xTaskResumeAll>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d189      	bne.n	800520a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80052f6:	4b10      	ldr	r3, [pc, #64]	; (8005338 <xQueueReceive+0x1bc>)
 80052f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052fc:	601a      	str	r2, [r3, #0]
 80052fe:	f3bf 8f4f 	dsb	sy
 8005302:	f3bf 8f6f 	isb	sy
 8005306:	e780      	b.n	800520a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8005308:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800530a:	f000 f8c5 	bl	8005498 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800530e:	f000 fbc7 	bl	8005aa0 <xTaskResumeAll>
 8005312:	e77a      	b.n	800520a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8005314:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005316:	f000 f8bf 	bl	8005498 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800531a:	f000 fbc1 	bl	8005aa0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800531e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005320:	f000 f90c 	bl	800553c <prvIsQueueEmpty>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	f43f af6f 	beq.w	800520a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800532c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800532e:	4618      	mov	r0, r3
 8005330:	3730      	adds	r7, #48	; 0x30
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	e000ed04 	.word	0xe000ed04

0800533c <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d10a      	bne.n	8005360 <uxQueueMessagesWaiting+0x24>
        __asm volatile
 800534a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800534e:	f383 8811 	msr	BASEPRI, r3
 8005352:	f3bf 8f6f 	isb	sy
 8005356:	f3bf 8f4f 	dsb	sy
 800535a:	60bb      	str	r3, [r7, #8]
    }
 800535c:	bf00      	nop
 800535e:	e7fe      	b.n	800535e <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 8005360:	f002 f9f8 	bl	8007754 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005368:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 800536a:	f002 fa23 	bl	80077b4 <vPortExitCritical>

    return uxReturn;
 800536e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005370:	4618      	mov	r0, r3
 8005372:	3710      	adds	r7, #16
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b086      	sub	sp, #24
 800537c:	af00      	add	r7, sp, #0
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	60b9      	str	r1, [r7, #8]
 8005382:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8005384:	2300      	movs	r3, #0
 8005386:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800538c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005392:	2b00      	cmp	r3, #0
 8005394:	d10d      	bne.n	80053b2 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d14d      	bne.n	800543a <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	4618      	mov	r0, r3
 80053a4:	f001 f892 	bl	80064cc <xTaskPriorityDisinherit>
 80053a8:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	609a      	str	r2, [r3, #8]
 80053b0:	e043      	b.n	800543a <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d119      	bne.n	80053ec <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6858      	ldr	r0, [r3, #4]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c0:	461a      	mov	r2, r3
 80053c2:	68b9      	ldr	r1, [r7, #8]
 80053c4:	f002 fd12 	bl	8007dec <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	685a      	ldr	r2, [r3, #4]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d0:	441a      	add	r2, r3
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	685a      	ldr	r2, [r3, #4]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	429a      	cmp	r2, r3
 80053e0:	d32b      	bcc.n	800543a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	605a      	str	r2, [r3, #4]
 80053ea:	e026      	b.n	800543a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	68d8      	ldr	r0, [r3, #12]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f4:	461a      	mov	r2, r3
 80053f6:	68b9      	ldr	r1, [r7, #8]
 80053f8:	f002 fcf8 	bl	8007dec <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	68da      	ldr	r2, [r3, #12]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005404:	425b      	negs	r3, r3
 8005406:	441a      	add	r2, r3
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	68da      	ldr	r2, [r3, #12]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	429a      	cmp	r2, r3
 8005416:	d207      	bcs.n	8005428 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	689a      	ldr	r2, [r3, #8]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005420:	425b      	negs	r3, r3
 8005422:	441a      	add	r2, r3
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2b02      	cmp	r3, #2
 800542c:	d105      	bne.n	800543a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d002      	beq.n	800543a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	3b01      	subs	r3, #1
 8005438:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	1c5a      	adds	r2, r3, #1
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8005442:	697b      	ldr	r3, [r7, #20]
}
 8005444:	4618      	mov	r0, r3
 8005446:	3718      	adds	r7, #24
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}

0800544c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b082      	sub	sp, #8
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545a:	2b00      	cmp	r3, #0
 800545c:	d018      	beq.n	8005490 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	68da      	ldr	r2, [r3, #12]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005466:	441a      	add	r2, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	68da      	ldr	r2, [r3, #12]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	429a      	cmp	r2, r3
 8005476:	d303      	bcc.n	8005480 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	68d9      	ldr	r1, [r3, #12]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005488:	461a      	mov	r2, r3
 800548a:	6838      	ldr	r0, [r7, #0]
 800548c:	f002 fcae 	bl	8007dec <memcpy>
    }
}
 8005490:	bf00      	nop
 8005492:	3708      	adds	r7, #8
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80054a0:	f002 f958 	bl	8007754 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054aa:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80054ac:	e011      	b.n	80054d2 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d012      	beq.n	80054dc <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	3324      	adds	r3, #36	; 0x24
 80054ba:	4618      	mov	r0, r3
 80054bc:	f000 fdd8 	bl	8006070 <xTaskRemoveFromEventList>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d001      	beq.n	80054ca <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80054c6:	f000 ff25 	bl	8006314 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80054ca:	7bfb      	ldrb	r3, [r7, #15]
 80054cc:	3b01      	subs	r3, #1
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80054d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	dce9      	bgt.n	80054ae <prvUnlockQueue+0x16>
 80054da:	e000      	b.n	80054de <prvUnlockQueue+0x46>
                        break;
 80054dc:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	22ff      	movs	r2, #255	; 0xff
 80054e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80054e6:	f002 f965 	bl	80077b4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80054ea:	f002 f933 	bl	8007754 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054f4:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80054f6:	e011      	b.n	800551c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d012      	beq.n	8005526 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	3310      	adds	r3, #16
 8005504:	4618      	mov	r0, r3
 8005506:	f000 fdb3 	bl	8006070 <xTaskRemoveFromEventList>
 800550a:	4603      	mov	r3, r0
 800550c:	2b00      	cmp	r3, #0
 800550e:	d001      	beq.n	8005514 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8005510:	f000 ff00 	bl	8006314 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8005514:	7bbb      	ldrb	r3, [r7, #14]
 8005516:	3b01      	subs	r3, #1
 8005518:	b2db      	uxtb	r3, r3
 800551a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800551c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005520:	2b00      	cmp	r3, #0
 8005522:	dce9      	bgt.n	80054f8 <prvUnlockQueue+0x60>
 8005524:	e000      	b.n	8005528 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8005526:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	22ff      	movs	r2, #255	; 0xff
 800552c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8005530:	f002 f940 	bl	80077b4 <vPortExitCritical>
}
 8005534:	bf00      	nop
 8005536:	3710      	adds	r7, #16
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005544:	f002 f906 	bl	8007754 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554c:	2b00      	cmp	r3, #0
 800554e:	d102      	bne.n	8005556 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8005550:	2301      	movs	r3, #1
 8005552:	60fb      	str	r3, [r7, #12]
 8005554:	e001      	b.n	800555a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8005556:	2300      	movs	r3, #0
 8005558:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800555a:	f002 f92b 	bl	80077b4 <vPortExitCritical>

    return xReturn;
 800555e:	68fb      	ldr	r3, [r7, #12]
}
 8005560:	4618      	mov	r0, r3
 8005562:	3710      	adds	r7, #16
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}

08005568 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005570:	f002 f8f0 	bl	8007754 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800557c:	429a      	cmp	r2, r3
 800557e:	d102      	bne.n	8005586 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8005580:	2301      	movs	r3, #1
 8005582:	60fb      	str	r3, [r7, #12]
 8005584:	e001      	b.n	800558a <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8005586:	2300      	movs	r3, #0
 8005588:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800558a:	f002 f913 	bl	80077b4 <vPortExitCritical>

    return xReturn;
 800558e:	68fb      	ldr	r3, [r7, #12]
}
 8005590:	4618      	mov	r0, r3
 8005592:	3710      	adds	r7, #16
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8005598:	b480      	push	{r7}
 800559a:	b087      	sub	sp, #28
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d10a      	bne.n	80055c0 <xQueueIsQueueFullFromISR+0x28>
        __asm volatile
 80055aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ae:	f383 8811 	msr	BASEPRI, r3
 80055b2:	f3bf 8f6f 	isb	sy
 80055b6:	f3bf 8f4f 	dsb	sy
 80055ba:	60fb      	str	r3, [r7, #12]
    }
 80055bc:	bf00      	nop
 80055be:	e7fe      	b.n	80055be <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d102      	bne.n	80055d2 <xQueueIsQueueFullFromISR+0x3a>
    {
        xReturn = pdTRUE;
 80055cc:	2301      	movs	r3, #1
 80055ce:	617b      	str	r3, [r7, #20]
 80055d0:	e001      	b.n	80055d6 <xQueueIsQueueFullFromISR+0x3e>
    }
    else
    {
        xReturn = pdFALSE;
 80055d2:	2300      	movs	r3, #0
 80055d4:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80055d6:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80055d8:	4618      	mov	r0, r3
 80055da:	371c      	adds	r7, #28
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr

080055e4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80055e4:	b480      	push	{r7}
 80055e6:	b087      	sub	sp, #28
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d10a      	bne.n	800560a <vQueueAddToRegistry+0x26>
        __asm volatile
 80055f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f8:	f383 8811 	msr	BASEPRI, r3
 80055fc:	f3bf 8f6f 	isb	sy
 8005600:	f3bf 8f4f 	dsb	sy
 8005604:	60fb      	str	r3, [r7, #12]
    }
 8005606:	bf00      	nop
 8005608:	e7fe      	b.n	8005608 <vQueueAddToRegistry+0x24>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800560a:	2300      	movs	r3, #0
 800560c:	613b      	str	r3, [r7, #16]

        if( pcQueueName != NULL )
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d024      	beq.n	800565e <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005614:	2300      	movs	r3, #0
 8005616:	617b      	str	r3, [r7, #20]
 8005618:	e01e      	b.n	8005658 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800561a:	4a18      	ldr	r2, [pc, #96]	; (800567c <vQueueAddToRegistry+0x98>)
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	00db      	lsls	r3, r3, #3
 8005620:	4413      	add	r3, r2
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	429a      	cmp	r2, r3
 8005628:	d105      	bne.n	8005636 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	00db      	lsls	r3, r3, #3
 800562e:	4a13      	ldr	r2, [pc, #76]	; (800567c <vQueueAddToRegistry+0x98>)
 8005630:	4413      	add	r3, r2
 8005632:	613b      	str	r3, [r7, #16]
                    break;
 8005634:	e013      	b.n	800565e <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d10a      	bne.n	8005652 <vQueueAddToRegistry+0x6e>
 800563c:	4a0f      	ldr	r2, [pc, #60]	; (800567c <vQueueAddToRegistry+0x98>)
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d104      	bne.n	8005652 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	00db      	lsls	r3, r3, #3
 800564c:	4a0b      	ldr	r2, [pc, #44]	; (800567c <vQueueAddToRegistry+0x98>)
 800564e:	4413      	add	r3, r2
 8005650:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	3301      	adds	r3, #1
 8005656:	617b      	str	r3, [r7, #20]
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	2b07      	cmp	r3, #7
 800565c:	d9dd      	bls.n	800561a <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d005      	beq.n	8005670 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	683a      	ldr	r2, [r7, #0]
 8005668:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8005670:	bf00      	nop
 8005672:	371c      	adds	r7, #28
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr
 800567c:	20012f60 	.word	0x20012f60

08005680 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8005680:	b580      	push	{r7, lr}
 8005682:	b086      	sub	sp, #24
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8005690:	f002 f860 	bl	8007754 <vPortEnterCritical>
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800569a:	b25b      	sxtb	r3, r3
 800569c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a0:	d103      	bne.n	80056aa <vQueueWaitForMessageRestricted+0x2a>
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056b0:	b25b      	sxtb	r3, r3
 80056b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056b6:	d103      	bne.n	80056c0 <vQueueWaitForMessageRestricted+0x40>
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056c0:	f002 f878 	bl	80077b4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d106      	bne.n	80056da <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	3324      	adds	r3, #36	; 0x24
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	68b9      	ldr	r1, [r7, #8]
 80056d4:	4618      	mov	r0, r3
 80056d6:	f000 fc85 	bl	8005fe4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80056da:	6978      	ldr	r0, [r7, #20]
 80056dc:	f7ff fedc 	bl	8005498 <prvUnlockQueue>
    }
 80056e0:	bf00      	nop
 80056e2:	3718      	adds	r7, #24
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b08c      	sub	sp, #48	; 0x30
 80056ec:	af04      	add	r7, sp, #16
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	603b      	str	r3, [r7, #0]
 80056f4:	4613      	mov	r3, r2
 80056f6:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80056f8:	88fb      	ldrh	r3, [r7, #6]
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	4618      	mov	r0, r3
 80056fe:	f002 f94d 	bl	800799c <pvPortMalloc>
 8005702:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d00e      	beq.n	8005728 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800570a:	2058      	movs	r0, #88	; 0x58
 800570c:	f002 f946 	bl	800799c <pvPortMalloc>
 8005710:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d003      	beq.n	8005720 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	697a      	ldr	r2, [r7, #20]
 800571c:	631a      	str	r2, [r3, #48]	; 0x30
 800571e:	e005      	b.n	800572c <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 8005720:	6978      	ldr	r0, [r7, #20]
 8005722:	f002 fa1b 	bl	8007b5c <vPortFree>
 8005726:	e001      	b.n	800572c <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8005728:	2300      	movs	r3, #0
 800572a:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d013      	beq.n	800575a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005732:	88fa      	ldrh	r2, [r7, #6]
 8005734:	2300      	movs	r3, #0
 8005736:	9303      	str	r3, [sp, #12]
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	9302      	str	r3, [sp, #8]
 800573c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800573e:	9301      	str	r3, [sp, #4]
 8005740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005742:	9300      	str	r3, [sp, #0]
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	68b9      	ldr	r1, [r7, #8]
 8005748:	68f8      	ldr	r0, [r7, #12]
 800574a:	f000 f80e 	bl	800576a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800574e:	69f8      	ldr	r0, [r7, #28]
 8005750:	f000 f8b0 	bl	80058b4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8005754:	2301      	movs	r3, #1
 8005756:	61bb      	str	r3, [r7, #24]
 8005758:	e002      	b.n	8005760 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800575a:	f04f 33ff 	mov.w	r3, #4294967295
 800575e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8005760:	69bb      	ldr	r3, [r7, #24]
    }
 8005762:	4618      	mov	r0, r3
 8005764:	3720      	adds	r7, #32
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}

0800576a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800576a:	b580      	push	{r7, lr}
 800576c:	b088      	sub	sp, #32
 800576e:	af00      	add	r7, sp, #0
 8005770:	60f8      	str	r0, [r7, #12]
 8005772:	60b9      	str	r1, [r7, #8]
 8005774:	607a      	str	r2, [r7, #4]
 8005776:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	461a      	mov	r2, r3
 8005782:	21a5      	movs	r1, #165	; 0xa5
 8005784:	f002 fb40 	bl	8007e08 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800578a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005792:	3b01      	subs	r3, #1
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	4413      	add	r3, r2
 8005798:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800579a:	69bb      	ldr	r3, [r7, #24]
 800579c:	f023 0307 	bic.w	r3, r3, #7
 80057a0:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	f003 0307 	and.w	r3, r3, #7
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d00a      	beq.n	80057c2 <prvInitialiseNewTask+0x58>
        __asm volatile
 80057ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b0:	f383 8811 	msr	BASEPRI, r3
 80057b4:	f3bf 8f6f 	isb	sy
 80057b8:	f3bf 8f4f 	dsb	sy
 80057bc:	617b      	str	r3, [r7, #20]
    }
 80057be:	bf00      	nop
 80057c0:	e7fe      	b.n	80057c0 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d01f      	beq.n	8005808 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80057c8:	2300      	movs	r3, #0
 80057ca:	61fb      	str	r3, [r7, #28]
 80057cc:	e012      	b.n	80057f4 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80057ce:	68ba      	ldr	r2, [r7, #8]
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	4413      	add	r3, r2
 80057d4:	7819      	ldrb	r1, [r3, #0]
 80057d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	4413      	add	r3, r2
 80057dc:	3334      	adds	r3, #52	; 0x34
 80057de:	460a      	mov	r2, r1
 80057e0:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80057e2:	68ba      	ldr	r2, [r7, #8]
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	4413      	add	r3, r2
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d006      	beq.n	80057fc <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	3301      	adds	r3, #1
 80057f2:	61fb      	str	r3, [r7, #28]
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	2b09      	cmp	r3, #9
 80057f8:	d9e9      	bls.n	80057ce <prvInitialiseNewTask+0x64>
 80057fa:	e000      	b.n	80057fe <prvInitialiseNewTask+0x94>
            {
                break;
 80057fc:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80057fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005800:	2200      	movs	r2, #0
 8005802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005806:	e003      	b.n	8005810 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800580a:	2200      	movs	r2, #0
 800580c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8005810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005812:	2b04      	cmp	r3, #4
 8005814:	d90a      	bls.n	800582c <prvInitialiseNewTask+0xc2>
        __asm volatile
 8005816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800581a:	f383 8811 	msr	BASEPRI, r3
 800581e:	f3bf 8f6f 	isb	sy
 8005822:	f3bf 8f4f 	dsb	sy
 8005826:	613b      	str	r3, [r7, #16]
    }
 8005828:	bf00      	nop
 800582a:	e7fe      	b.n	800582a <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800582c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800582e:	2b04      	cmp	r3, #4
 8005830:	d901      	bls.n	8005836 <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005832:	2304      	movs	r3, #4
 8005834:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8005836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005838:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800583a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800583c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800583e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005840:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8005842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005844:	2200      	movs	r2, #0
 8005846:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584a:	3304      	adds	r3, #4
 800584c:	4618      	mov	r0, r3
 800584e:	f7ff f97b 	bl	8004b48 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005854:	3318      	adds	r3, #24
 8005856:	4618      	mov	r0, r3
 8005858:	f7ff f976 	bl	8004b48 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800585c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005860:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005864:	f1c3 0205 	rsb	r2, r3, #5
 8005868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800586c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005870:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8005872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005874:	3350      	adds	r3, #80	; 0x50
 8005876:	2204      	movs	r2, #4
 8005878:	2100      	movs	r1, #0
 800587a:	4618      	mov	r0, r3
 800587c:	f002 fac4 	bl	8007e08 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8005880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005882:	3354      	adds	r3, #84	; 0x54
 8005884:	2201      	movs	r2, #1
 8005886:	2100      	movs	r1, #0
 8005888:	4618      	mov	r0, r3
 800588a:	f002 fabd 	bl	8007e08 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800588e:	683a      	ldr	r2, [r7, #0]
 8005890:	68f9      	ldr	r1, [r7, #12]
 8005892:	69b8      	ldr	r0, [r7, #24]
 8005894:	f001 fdb2 	bl	80073fc <pxPortInitialiseStack>
 8005898:	4602      	mov	r2, r0
 800589a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800589e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d002      	beq.n	80058aa <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80058a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058a8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80058aa:	bf00      	nop
 80058ac:	3720      	adds	r7, #32
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
	...

080058b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80058bc:	f001 ff4a 	bl	8007754 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80058c0:	4b40      	ldr	r3, [pc, #256]	; (80059c4 <prvAddNewTaskToReadyList+0x110>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	3301      	adds	r3, #1
 80058c6:	4a3f      	ldr	r2, [pc, #252]	; (80059c4 <prvAddNewTaskToReadyList+0x110>)
 80058c8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80058ca:	4b3f      	ldr	r3, [pc, #252]	; (80059c8 <prvAddNewTaskToReadyList+0x114>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d109      	bne.n	80058e6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80058d2:	4a3d      	ldr	r2, [pc, #244]	; (80059c8 <prvAddNewTaskToReadyList+0x114>)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80058d8:	4b3a      	ldr	r3, [pc, #232]	; (80059c4 <prvAddNewTaskToReadyList+0x110>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d110      	bne.n	8005902 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80058e0:	f000 fd3c 	bl	800635c <prvInitialiseTaskLists>
 80058e4:	e00d      	b.n	8005902 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80058e6:	4b39      	ldr	r3, [pc, #228]	; (80059cc <prvAddNewTaskToReadyList+0x118>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d109      	bne.n	8005902 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80058ee:	4b36      	ldr	r3, [pc, #216]	; (80059c8 <prvAddNewTaskToReadyList+0x114>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d802      	bhi.n	8005902 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80058fc:	4a32      	ldr	r2, [pc, #200]	; (80059c8 <prvAddNewTaskToReadyList+0x114>)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8005902:	4b33      	ldr	r3, [pc, #204]	; (80059d0 <prvAddNewTaskToReadyList+0x11c>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	3301      	adds	r3, #1
 8005908:	4a31      	ldr	r2, [pc, #196]	; (80059d0 <prvAddNewTaskToReadyList+0x11c>)
 800590a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800590c:	4b30      	ldr	r3, [pc, #192]	; (80059d0 <prvAddNewTaskToReadyList+0x11c>)
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005918:	2201      	movs	r2, #1
 800591a:	409a      	lsls	r2, r3
 800591c:	4b2d      	ldr	r3, [pc, #180]	; (80059d4 <prvAddNewTaskToReadyList+0x120>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4313      	orrs	r3, r2
 8005922:	4a2c      	ldr	r2, [pc, #176]	; (80059d4 <prvAddNewTaskToReadyList+0x120>)
 8005924:	6013      	str	r3, [r2, #0]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800592a:	492b      	ldr	r1, [pc, #172]	; (80059d8 <prvAddNewTaskToReadyList+0x124>)
 800592c:	4613      	mov	r3, r2
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	4413      	add	r3, r2
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	440b      	add	r3, r1
 8005936:	3304      	adds	r3, #4
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	60fb      	str	r3, [r7, #12]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	609a      	str	r2, [r3, #8]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	689a      	ldr	r2, [r3, #8]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	60da      	str	r2, [r3, #12]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	3204      	adds	r2, #4
 8005952:	605a      	str	r2, [r3, #4]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	1d1a      	adds	r2, r3, #4
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	609a      	str	r2, [r3, #8]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005960:	4613      	mov	r3, r2
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	4413      	add	r3, r2
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	4a1b      	ldr	r2, [pc, #108]	; (80059d8 <prvAddNewTaskToReadyList+0x124>)
 800596a:	441a      	add	r2, r3
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	615a      	str	r2, [r3, #20]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005974:	4918      	ldr	r1, [pc, #96]	; (80059d8 <prvAddNewTaskToReadyList+0x124>)
 8005976:	4613      	mov	r3, r2
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	4413      	add	r3, r2
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	440b      	add	r3, r1
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	1c59      	adds	r1, r3, #1
 8005984:	4814      	ldr	r0, [pc, #80]	; (80059d8 <prvAddNewTaskToReadyList+0x124>)
 8005986:	4613      	mov	r3, r2
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	4413      	add	r3, r2
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	4403      	add	r3, r0
 8005990:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8005992:	f001 ff0f 	bl	80077b4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8005996:	4b0d      	ldr	r3, [pc, #52]	; (80059cc <prvAddNewTaskToReadyList+0x118>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00e      	beq.n	80059bc <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800599e:	4b0a      	ldr	r3, [pc, #40]	; (80059c8 <prvAddNewTaskToReadyList+0x114>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d207      	bcs.n	80059bc <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80059ac:	4b0b      	ldr	r3, [pc, #44]	; (80059dc <prvAddNewTaskToReadyList+0x128>)
 80059ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059b2:	601a      	str	r2, [r3, #0]
 80059b4:	f3bf 8f4f 	dsb	sy
 80059b8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80059bc:	bf00      	nop
 80059be:	3710      	adds	r7, #16
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	200001e4 	.word	0x200001e4
 80059c8:	2000010c 	.word	0x2000010c
 80059cc:	200001f0 	.word	0x200001f0
 80059d0:	20000200 	.word	0x20000200
 80059d4:	200001ec 	.word	0x200001ec
 80059d8:	20000110 	.word	0x20000110
 80059dc:	e000ed04 	.word	0xe000ed04

080059e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b086      	sub	sp, #24
 80059e4:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80059e6:	4b20      	ldr	r3, [pc, #128]	; (8005a68 <vTaskStartScheduler+0x88>)
 80059e8:	9301      	str	r3, [sp, #4]
 80059ea:	2300      	movs	r3, #0
 80059ec:	9300      	str	r3, [sp, #0]
 80059ee:	2300      	movs	r3, #0
 80059f0:	2282      	movs	r2, #130	; 0x82
 80059f2:	491e      	ldr	r1, [pc, #120]	; (8005a6c <vTaskStartScheduler+0x8c>)
 80059f4:	481e      	ldr	r0, [pc, #120]	; (8005a70 <vTaskStartScheduler+0x90>)
 80059f6:	f7ff fe77 	bl	80056e8 <xTaskCreate>
 80059fa:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d102      	bne.n	8005a08 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8005a02:	f001 f985 	bl	8006d10 <xTimerCreateTimerTask>
 8005a06:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d116      	bne.n	8005a3c <vTaskStartScheduler+0x5c>
        __asm volatile
 8005a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a12:	f383 8811 	msr	BASEPRI, r3
 8005a16:	f3bf 8f6f 	isb	sy
 8005a1a:	f3bf 8f4f 	dsb	sy
 8005a1e:	60bb      	str	r3, [r7, #8]
    }
 8005a20:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8005a22:	4b14      	ldr	r3, [pc, #80]	; (8005a74 <vTaskStartScheduler+0x94>)
 8005a24:	f04f 32ff 	mov.w	r2, #4294967295
 8005a28:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8005a2a:	4b13      	ldr	r3, [pc, #76]	; (8005a78 <vTaskStartScheduler+0x98>)
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005a30:	4b12      	ldr	r3, [pc, #72]	; (8005a7c <vTaskStartScheduler+0x9c>)
 8005a32:	2200      	movs	r2, #0
 8005a34:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8005a36:	f001 fd6d 	bl	8007514 <xPortStartScheduler>
 8005a3a:	e00e      	b.n	8005a5a <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a42:	d10a      	bne.n	8005a5a <vTaskStartScheduler+0x7a>
        __asm volatile
 8005a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a48:	f383 8811 	msr	BASEPRI, r3
 8005a4c:	f3bf 8f6f 	isb	sy
 8005a50:	f3bf 8f4f 	dsb	sy
 8005a54:	607b      	str	r3, [r7, #4]
    }
 8005a56:	bf00      	nop
 8005a58:	e7fe      	b.n	8005a58 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8005a5a:	4b09      	ldr	r3, [pc, #36]	; (8005a80 <vTaskStartScheduler+0xa0>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
}
 8005a5e:	bf00      	nop
 8005a60:	3710      	adds	r7, #16
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	20000208 	.word	0x20000208
 8005a6c:	08009430 	.word	0x08009430
 8005a70:	0800632d 	.word	0x0800632d
 8005a74:	20000204 	.word	0x20000204
 8005a78:	200001f0 	.word	0x200001f0
 8005a7c:	200001e8 	.word	0x200001e8
 8005a80:	20000020 	.word	0x20000020

08005a84 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005a84:	b480      	push	{r7}
 8005a86:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8005a88:	4b04      	ldr	r3, [pc, #16]	; (8005a9c <vTaskSuspendAll+0x18>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	4a03      	ldr	r2, [pc, #12]	; (8005a9c <vTaskSuspendAll+0x18>)
 8005a90:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8005a92:	bf00      	nop
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr
 8005a9c:	2000020c 	.word	0x2000020c

08005aa0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b088      	sub	sp, #32
 8005aa4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8005aae:	4b71      	ldr	r3, [pc, #452]	; (8005c74 <xTaskResumeAll+0x1d4>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d10a      	bne.n	8005acc <xTaskResumeAll+0x2c>
        __asm volatile
 8005ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aba:	f383 8811 	msr	BASEPRI, r3
 8005abe:	f3bf 8f6f 	isb	sy
 8005ac2:	f3bf 8f4f 	dsb	sy
 8005ac6:	607b      	str	r3, [r7, #4]
    }
 8005ac8:	bf00      	nop
 8005aca:	e7fe      	b.n	8005aca <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8005acc:	f001 fe42 	bl	8007754 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8005ad0:	4b68      	ldr	r3, [pc, #416]	; (8005c74 <xTaskResumeAll+0x1d4>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	3b01      	subs	r3, #1
 8005ad6:	4a67      	ldr	r2, [pc, #412]	; (8005c74 <xTaskResumeAll+0x1d4>)
 8005ad8:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ada:	4b66      	ldr	r3, [pc, #408]	; (8005c74 <xTaskResumeAll+0x1d4>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	f040 80c0 	bne.w	8005c64 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005ae4:	4b64      	ldr	r3, [pc, #400]	; (8005c78 <xTaskResumeAll+0x1d8>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	f000 80bb 	beq.w	8005c64 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005aee:	e08a      	b.n	8005c06 <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005af0:	4b62      	ldr	r3, [pc, #392]	; (8005c7c <xTaskResumeAll+0x1dc>)
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005afc:	613b      	str	r3, [r7, #16]
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	69db      	ldr	r3, [r3, #28]
 8005b02:	69fa      	ldr	r2, [r7, #28]
 8005b04:	6a12      	ldr	r2, [r2, #32]
 8005b06:	609a      	str	r2, [r3, #8]
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	6a1b      	ldr	r3, [r3, #32]
 8005b0c:	69fa      	ldr	r2, [r7, #28]
 8005b0e:	69d2      	ldr	r2, [r2, #28]
 8005b10:	605a      	str	r2, [r3, #4]
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	685a      	ldr	r2, [r3, #4]
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	3318      	adds	r3, #24
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d103      	bne.n	8005b26 <xTaskResumeAll+0x86>
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	6a1a      	ldr	r2, [r3, #32]
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	605a      	str	r2, [r3, #4]
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	629a      	str	r2, [r3, #40]	; 0x28
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	1e5a      	subs	r2, r3, #1
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	695b      	ldr	r3, [r3, #20]
 8005b3a:	60fb      	str	r3, [r7, #12]
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	69fa      	ldr	r2, [r7, #28]
 8005b42:	68d2      	ldr	r2, [r2, #12]
 8005b44:	609a      	str	r2, [r3, #8]
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	69fa      	ldr	r2, [r7, #28]
 8005b4c:	6892      	ldr	r2, [r2, #8]
 8005b4e:	605a      	str	r2, [r3, #4]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	685a      	ldr	r2, [r3, #4]
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	3304      	adds	r3, #4
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d103      	bne.n	8005b64 <xTaskResumeAll+0xc4>
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	68da      	ldr	r2, [r3, #12]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	605a      	str	r2, [r3, #4]
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	2200      	movs	r2, #0
 8005b68:	615a      	str	r2, [r3, #20]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	1e5a      	subs	r2, r3, #1
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b78:	2201      	movs	r2, #1
 8005b7a:	409a      	lsls	r2, r3
 8005b7c:	4b40      	ldr	r3, [pc, #256]	; (8005c80 <xTaskResumeAll+0x1e0>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	4a3f      	ldr	r2, [pc, #252]	; (8005c80 <xTaskResumeAll+0x1e0>)
 8005b84:	6013      	str	r3, [r2, #0]
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b8a:	493e      	ldr	r1, [pc, #248]	; (8005c84 <xTaskResumeAll+0x1e4>)
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	4413      	add	r3, r2
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	440b      	add	r3, r1
 8005b96:	3304      	adds	r3, #4
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	60bb      	str	r3, [r7, #8]
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	68ba      	ldr	r2, [r7, #8]
 8005ba0:	609a      	str	r2, [r3, #8]
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	689a      	ldr	r2, [r3, #8]
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	60da      	str	r2, [r3, #12]
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	69fa      	ldr	r2, [r7, #28]
 8005bb0:	3204      	adds	r2, #4
 8005bb2:	605a      	str	r2, [r3, #4]
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	1d1a      	adds	r2, r3, #4
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	609a      	str	r2, [r3, #8]
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bc0:	4613      	mov	r3, r2
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	4413      	add	r3, r2
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	4a2e      	ldr	r2, [pc, #184]	; (8005c84 <xTaskResumeAll+0x1e4>)
 8005bca:	441a      	add	r2, r3
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	615a      	str	r2, [r3, #20]
 8005bd0:	69fb      	ldr	r3, [r7, #28]
 8005bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bd4:	492b      	ldr	r1, [pc, #172]	; (8005c84 <xTaskResumeAll+0x1e4>)
 8005bd6:	4613      	mov	r3, r2
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	4413      	add	r3, r2
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	440b      	add	r3, r1
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	1c59      	adds	r1, r3, #1
 8005be4:	4827      	ldr	r0, [pc, #156]	; (8005c84 <xTaskResumeAll+0x1e4>)
 8005be6:	4613      	mov	r3, r2
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	4413      	add	r3, r2
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	4403      	add	r3, r0
 8005bf0:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bf6:	4b24      	ldr	r3, [pc, #144]	; (8005c88 <xTaskResumeAll+0x1e8>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d302      	bcc.n	8005c06 <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8005c00:	4b22      	ldr	r3, [pc, #136]	; (8005c8c <xTaskResumeAll+0x1ec>)
 8005c02:	2201      	movs	r2, #1
 8005c04:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c06:	4b1d      	ldr	r3, [pc, #116]	; (8005c7c <xTaskResumeAll+0x1dc>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	f47f af70 	bne.w	8005af0 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d001      	beq.n	8005c1a <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8005c16:	f000 fc1f 	bl	8006458 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005c1a:	4b1d      	ldr	r3, [pc, #116]	; (8005c90 <xTaskResumeAll+0x1f0>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d010      	beq.n	8005c48 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8005c26:	f000 f847 	bl	8005cb8 <xTaskIncrementTick>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d002      	beq.n	8005c36 <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8005c30:	4b16      	ldr	r3, [pc, #88]	; (8005c8c <xTaskResumeAll+0x1ec>)
 8005c32:	2201      	movs	r2, #1
 8005c34:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	3b01      	subs	r3, #1
 8005c3a:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d1f1      	bne.n	8005c26 <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8005c42:	4b13      	ldr	r3, [pc, #76]	; (8005c90 <xTaskResumeAll+0x1f0>)
 8005c44:	2200      	movs	r2, #0
 8005c46:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8005c48:	4b10      	ldr	r3, [pc, #64]	; (8005c8c <xTaskResumeAll+0x1ec>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d009      	beq.n	8005c64 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8005c50:	2301      	movs	r3, #1
 8005c52:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8005c54:	4b0f      	ldr	r3, [pc, #60]	; (8005c94 <xTaskResumeAll+0x1f4>)
 8005c56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c5a:	601a      	str	r2, [r3, #0]
 8005c5c:	f3bf 8f4f 	dsb	sy
 8005c60:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8005c64:	f001 fda6 	bl	80077b4 <vPortExitCritical>

    return xAlreadyYielded;
 8005c68:	69bb      	ldr	r3, [r7, #24]
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3720      	adds	r7, #32
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	2000020c 	.word	0x2000020c
 8005c78:	200001e4 	.word	0x200001e4
 8005c7c:	200001a4 	.word	0x200001a4
 8005c80:	200001ec 	.word	0x200001ec
 8005c84:	20000110 	.word	0x20000110
 8005c88:	2000010c 	.word	0x2000010c
 8005c8c:	200001f8 	.word	0x200001f8
 8005c90:	200001f4 	.word	0x200001f4
 8005c94:	e000ed04 	.word	0xe000ed04

08005c98 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8005c9e:	4b05      	ldr	r3, [pc, #20]	; (8005cb4 <xTaskGetTickCount+0x1c>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8005ca4:	687b      	ldr	r3, [r7, #4]
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	370c      	adds	r7, #12
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop
 8005cb4:	200001e8 	.word	0x200001e8

08005cb8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b08a      	sub	sp, #40	; 0x28
 8005cbc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cc2:	4b7d      	ldr	r3, [pc, #500]	; (8005eb8 <xTaskIncrementTick+0x200>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	f040 80ec 	bne.w	8005ea4 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005ccc:	4b7b      	ldr	r3, [pc, #492]	; (8005ebc <xTaskIncrementTick+0x204>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	3301      	adds	r3, #1
 8005cd2:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8005cd4:	4a79      	ldr	r2, [pc, #484]	; (8005ebc <xTaskIncrementTick+0x204>)
 8005cd6:	6a3b      	ldr	r3, [r7, #32]
 8005cd8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005cda:	6a3b      	ldr	r3, [r7, #32]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d120      	bne.n	8005d22 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8005ce0:	4b77      	ldr	r3, [pc, #476]	; (8005ec0 <xTaskIncrementTick+0x208>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00a      	beq.n	8005d00 <xTaskIncrementTick+0x48>
        __asm volatile
 8005cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cee:	f383 8811 	msr	BASEPRI, r3
 8005cf2:	f3bf 8f6f 	isb	sy
 8005cf6:	f3bf 8f4f 	dsb	sy
 8005cfa:	607b      	str	r3, [r7, #4]
    }
 8005cfc:	bf00      	nop
 8005cfe:	e7fe      	b.n	8005cfe <xTaskIncrementTick+0x46>
 8005d00:	4b6f      	ldr	r3, [pc, #444]	; (8005ec0 <xTaskIncrementTick+0x208>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	61fb      	str	r3, [r7, #28]
 8005d06:	4b6f      	ldr	r3, [pc, #444]	; (8005ec4 <xTaskIncrementTick+0x20c>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a6d      	ldr	r2, [pc, #436]	; (8005ec0 <xTaskIncrementTick+0x208>)
 8005d0c:	6013      	str	r3, [r2, #0]
 8005d0e:	4a6d      	ldr	r2, [pc, #436]	; (8005ec4 <xTaskIncrementTick+0x20c>)
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	6013      	str	r3, [r2, #0]
 8005d14:	4b6c      	ldr	r3, [pc, #432]	; (8005ec8 <xTaskIncrementTick+0x210>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	3301      	adds	r3, #1
 8005d1a:	4a6b      	ldr	r2, [pc, #428]	; (8005ec8 <xTaskIncrementTick+0x210>)
 8005d1c:	6013      	str	r3, [r2, #0]
 8005d1e:	f000 fb9b 	bl	8006458 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8005d22:	4b6a      	ldr	r3, [pc, #424]	; (8005ecc <xTaskIncrementTick+0x214>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	6a3a      	ldr	r2, [r7, #32]
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	f0c0 80a6 	bcc.w	8005e7a <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d2e:	4b64      	ldr	r3, [pc, #400]	; (8005ec0 <xTaskIncrementTick+0x208>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d104      	bne.n	8005d42 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d38:	4b64      	ldr	r3, [pc, #400]	; (8005ecc <xTaskIncrementTick+0x214>)
 8005d3a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d3e:	601a      	str	r2, [r3, #0]
                    break;
 8005d40:	e09b      	b.n	8005e7a <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d42:	4b5f      	ldr	r3, [pc, #380]	; (8005ec0 <xTaskIncrementTick+0x208>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8005d52:	6a3a      	ldr	r2, [r7, #32]
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d203      	bcs.n	8005d62 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8005d5a:	4a5c      	ldr	r2, [pc, #368]	; (8005ecc <xTaskIncrementTick+0x214>)
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8005d60:	e08b      	b.n	8005e7a <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	695b      	ldr	r3, [r3, #20]
 8005d66:	613b      	str	r3, [r7, #16]
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	69ba      	ldr	r2, [r7, #24]
 8005d6e:	68d2      	ldr	r2, [r2, #12]
 8005d70:	609a      	str	r2, [r3, #8]
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	69ba      	ldr	r2, [r7, #24]
 8005d78:	6892      	ldr	r2, [r2, #8]
 8005d7a:	605a      	str	r2, [r3, #4]
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	685a      	ldr	r2, [r3, #4]
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	3304      	adds	r3, #4
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d103      	bne.n	8005d90 <xTaskIncrementTick+0xd8>
 8005d88:	69bb      	ldr	r3, [r7, #24]
 8005d8a:	68da      	ldr	r2, [r3, #12]
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	605a      	str	r2, [r3, #4]
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	2200      	movs	r2, #0
 8005d94:	615a      	str	r2, [r3, #20]
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	1e5a      	subs	r2, r3, #1
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005da0:	69bb      	ldr	r3, [r7, #24]
 8005da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d01e      	beq.n	8005de6 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dac:	60fb      	str	r3, [r7, #12]
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	69db      	ldr	r3, [r3, #28]
 8005db2:	69ba      	ldr	r2, [r7, #24]
 8005db4:	6a12      	ldr	r2, [r2, #32]
 8005db6:	609a      	str	r2, [r3, #8]
 8005db8:	69bb      	ldr	r3, [r7, #24]
 8005dba:	6a1b      	ldr	r3, [r3, #32]
 8005dbc:	69ba      	ldr	r2, [r7, #24]
 8005dbe:	69d2      	ldr	r2, [r2, #28]
 8005dc0:	605a      	str	r2, [r3, #4]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	685a      	ldr	r2, [r3, #4]
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	3318      	adds	r3, #24
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d103      	bne.n	8005dd6 <xTaskIncrementTick+0x11e>
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	6a1a      	ldr	r2, [r3, #32]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	605a      	str	r2, [r3, #4]
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	629a      	str	r2, [r3, #40]	; 0x28
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	1e5a      	subs	r2, r3, #1
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dea:	2201      	movs	r2, #1
 8005dec:	409a      	lsls	r2, r3
 8005dee:	4b38      	ldr	r3, [pc, #224]	; (8005ed0 <xTaskIncrementTick+0x218>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	4a36      	ldr	r2, [pc, #216]	; (8005ed0 <xTaskIncrementTick+0x218>)
 8005df6:	6013      	str	r3, [r2, #0]
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dfc:	4935      	ldr	r1, [pc, #212]	; (8005ed4 <xTaskIncrementTick+0x21c>)
 8005dfe:	4613      	mov	r3, r2
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	4413      	add	r3, r2
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	440b      	add	r3, r1
 8005e08:	3304      	adds	r3, #4
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	60bb      	str	r3, [r7, #8]
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	68ba      	ldr	r2, [r7, #8]
 8005e12:	609a      	str	r2, [r3, #8]
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	689a      	ldr	r2, [r3, #8]
 8005e18:	69bb      	ldr	r3, [r7, #24]
 8005e1a:	60da      	str	r2, [r3, #12]
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	69ba      	ldr	r2, [r7, #24]
 8005e22:	3204      	adds	r2, #4
 8005e24:	605a      	str	r2, [r3, #4]
 8005e26:	69bb      	ldr	r3, [r7, #24]
 8005e28:	1d1a      	adds	r2, r3, #4
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	609a      	str	r2, [r3, #8]
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e32:	4613      	mov	r3, r2
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	4413      	add	r3, r2
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	4a26      	ldr	r2, [pc, #152]	; (8005ed4 <xTaskIncrementTick+0x21c>)
 8005e3c:	441a      	add	r2, r3
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	615a      	str	r2, [r3, #20]
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e46:	4923      	ldr	r1, [pc, #140]	; (8005ed4 <xTaskIncrementTick+0x21c>)
 8005e48:	4613      	mov	r3, r2
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	4413      	add	r3, r2
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	440b      	add	r3, r1
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	1c59      	adds	r1, r3, #1
 8005e56:	481f      	ldr	r0, [pc, #124]	; (8005ed4 <xTaskIncrementTick+0x21c>)
 8005e58:	4613      	mov	r3, r2
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	4413      	add	r3, r2
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	4403      	add	r3, r0
 8005e62:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e68:	4b1b      	ldr	r3, [pc, #108]	; (8005ed8 <xTaskIncrementTick+0x220>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	f4ff af5d 	bcc.w	8005d2e <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8005e74:	2301      	movs	r3, #1
 8005e76:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e78:	e759      	b.n	8005d2e <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005e7a:	4b17      	ldr	r3, [pc, #92]	; (8005ed8 <xTaskIncrementTick+0x220>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e80:	4914      	ldr	r1, [pc, #80]	; (8005ed4 <xTaskIncrementTick+0x21c>)
 8005e82:	4613      	mov	r3, r2
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	4413      	add	r3, r2
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	440b      	add	r3, r1
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d901      	bls.n	8005e96 <xTaskIncrementTick+0x1de>
                {
                    xSwitchRequired = pdTRUE;
 8005e92:	2301      	movs	r3, #1
 8005e94:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8005e96:	4b11      	ldr	r3, [pc, #68]	; (8005edc <xTaskIncrementTick+0x224>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d007      	beq.n	8005eae <xTaskIncrementTick+0x1f6>
                {
                    xSwitchRequired = pdTRUE;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ea2:	e004      	b.n	8005eae <xTaskIncrementTick+0x1f6>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8005ea4:	4b0e      	ldr	r3, [pc, #56]	; (8005ee0 <xTaskIncrementTick+0x228>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	3301      	adds	r3, #1
 8005eaa:	4a0d      	ldr	r2, [pc, #52]	; (8005ee0 <xTaskIncrementTick+0x228>)
 8005eac:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8005eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3728      	adds	r7, #40	; 0x28
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	2000020c 	.word	0x2000020c
 8005ebc:	200001e8 	.word	0x200001e8
 8005ec0:	2000019c 	.word	0x2000019c
 8005ec4:	200001a0 	.word	0x200001a0
 8005ec8:	200001fc 	.word	0x200001fc
 8005ecc:	20000204 	.word	0x20000204
 8005ed0:	200001ec 	.word	0x200001ec
 8005ed4:	20000110 	.word	0x20000110
 8005ed8:	2000010c 	.word	0x2000010c
 8005edc:	200001f8 	.word	0x200001f8
 8005ee0:	200001f4 	.word	0x200001f4

08005ee4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b087      	sub	sp, #28
 8005ee8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005eea:	4b27      	ldr	r3, [pc, #156]	; (8005f88 <vTaskSwitchContext+0xa4>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d003      	beq.n	8005efa <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8005ef2:	4b26      	ldr	r3, [pc, #152]	; (8005f8c <vTaskSwitchContext+0xa8>)
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8005ef8:	e03f      	b.n	8005f7a <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8005efa:	4b24      	ldr	r3, [pc, #144]	; (8005f8c <vTaskSwitchContext+0xa8>)
 8005efc:	2200      	movs	r2, #0
 8005efe:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f00:	4b23      	ldr	r3, [pc, #140]	; (8005f90 <vTaskSwitchContext+0xac>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	fab3 f383 	clz	r3, r3
 8005f0c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8005f0e:	7afb      	ldrb	r3, [r7, #11]
 8005f10:	f1c3 031f 	rsb	r3, r3, #31
 8005f14:	617b      	str	r3, [r7, #20]
 8005f16:	491f      	ldr	r1, [pc, #124]	; (8005f94 <vTaskSwitchContext+0xb0>)
 8005f18:	697a      	ldr	r2, [r7, #20]
 8005f1a:	4613      	mov	r3, r2
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	4413      	add	r3, r2
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	440b      	add	r3, r1
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d10a      	bne.n	8005f40 <vTaskSwitchContext+0x5c>
        __asm volatile
 8005f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f2e:	f383 8811 	msr	BASEPRI, r3
 8005f32:	f3bf 8f6f 	isb	sy
 8005f36:	f3bf 8f4f 	dsb	sy
 8005f3a:	607b      	str	r3, [r7, #4]
    }
 8005f3c:	bf00      	nop
 8005f3e:	e7fe      	b.n	8005f3e <vTaskSwitchContext+0x5a>
 8005f40:	697a      	ldr	r2, [r7, #20]
 8005f42:	4613      	mov	r3, r2
 8005f44:	009b      	lsls	r3, r3, #2
 8005f46:	4413      	add	r3, r2
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	4a12      	ldr	r2, [pc, #72]	; (8005f94 <vTaskSwitchContext+0xb0>)
 8005f4c:	4413      	add	r3, r2
 8005f4e:	613b      	str	r3, [r7, #16]
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	685a      	ldr	r2, [r3, #4]
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	605a      	str	r2, [r3, #4]
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	685a      	ldr	r2, [r3, #4]
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	3308      	adds	r3, #8
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d104      	bne.n	8005f70 <vTaskSwitchContext+0x8c>
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	685a      	ldr	r2, [r3, #4]
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	605a      	str	r2, [r3, #4]
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	4a08      	ldr	r2, [pc, #32]	; (8005f98 <vTaskSwitchContext+0xb4>)
 8005f78:	6013      	str	r3, [r2, #0]
}
 8005f7a:	bf00      	nop
 8005f7c:	371c      	adds	r7, #28
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr
 8005f86:	bf00      	nop
 8005f88:	2000020c 	.word	0x2000020c
 8005f8c:	200001f8 	.word	0x200001f8
 8005f90:	200001ec 	.word	0x200001ec
 8005f94:	20000110 	.word	0x20000110
 8005f98:	2000010c 	.word	0x2000010c

08005f9c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d10a      	bne.n	8005fc2 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8005fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb0:	f383 8811 	msr	BASEPRI, r3
 8005fb4:	f3bf 8f6f 	isb	sy
 8005fb8:	f3bf 8f4f 	dsb	sy
 8005fbc:	60fb      	str	r3, [r7, #12]
    }
 8005fbe:	bf00      	nop
 8005fc0:	e7fe      	b.n	8005fc0 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005fc2:	4b07      	ldr	r3, [pc, #28]	; (8005fe0 <vTaskPlaceOnEventList+0x44>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	3318      	adds	r3, #24
 8005fc8:	4619      	mov	r1, r3
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f7fe fdc9 	bl	8004b62 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005fd0:	2101      	movs	r1, #1
 8005fd2:	6838      	ldr	r0, [r7, #0]
 8005fd4:	f000 fe1c 	bl	8006c10 <prvAddCurrentTaskToDelayedList>
}
 8005fd8:	bf00      	nop
 8005fda:	3710      	adds	r7, #16
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	2000010c 	.word	0x2000010c

08005fe4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b086      	sub	sp, #24
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d10a      	bne.n	800600c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8005ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ffa:	f383 8811 	msr	BASEPRI, r3
 8005ffe:	f3bf 8f6f 	isb	sy
 8006002:	f3bf 8f4f 	dsb	sy
 8006006:	613b      	str	r3, [r7, #16]
    }
 8006008:	bf00      	nop
 800600a:	e7fe      	b.n	800600a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	617b      	str	r3, [r7, #20]
 8006012:	4b16      	ldr	r3, [pc, #88]	; (800606c <vTaskPlaceOnEventListRestricted+0x88>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	697a      	ldr	r2, [r7, #20]
 8006018:	61da      	str	r2, [r3, #28]
 800601a:	4b14      	ldr	r3, [pc, #80]	; (800606c <vTaskPlaceOnEventListRestricted+0x88>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	697a      	ldr	r2, [r7, #20]
 8006020:	6892      	ldr	r2, [r2, #8]
 8006022:	621a      	str	r2, [r3, #32]
 8006024:	4b11      	ldr	r3, [pc, #68]	; (800606c <vTaskPlaceOnEventListRestricted+0x88>)
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	3218      	adds	r2, #24
 800602e:	605a      	str	r2, [r3, #4]
 8006030:	4b0e      	ldr	r3, [pc, #56]	; (800606c <vTaskPlaceOnEventListRestricted+0x88>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f103 0218 	add.w	r2, r3, #24
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	609a      	str	r2, [r3, #8]
 800603c:	4b0b      	ldr	r3, [pc, #44]	; (800606c <vTaskPlaceOnEventListRestricted+0x88>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	629a      	str	r2, [r3, #40]	; 0x28
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	1c5a      	adds	r2, r3, #1
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d002      	beq.n	800605a <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8006054:	f04f 33ff 	mov.w	r3, #4294967295
 8006058:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800605a:	6879      	ldr	r1, [r7, #4]
 800605c:	68b8      	ldr	r0, [r7, #8]
 800605e:	f000 fdd7 	bl	8006c10 <prvAddCurrentTaskToDelayedList>
    }
 8006062:	bf00      	nop
 8006064:	3718      	adds	r7, #24
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
 800606a:	bf00      	nop
 800606c:	2000010c 	.word	0x2000010c

08006070 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006070:	b480      	push	{r7}
 8006072:	b08b      	sub	sp, #44	; 0x2c
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8006080:	6a3b      	ldr	r3, [r7, #32]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d10a      	bne.n	800609c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8006086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800608a:	f383 8811 	msr	BASEPRI, r3
 800608e:	f3bf 8f6f 	isb	sy
 8006092:	f3bf 8f4f 	dsb	sy
 8006096:	60fb      	str	r3, [r7, #12]
    }
 8006098:	bf00      	nop
 800609a:	e7fe      	b.n	800609a <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800609c:	6a3b      	ldr	r3, [r7, #32]
 800609e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a0:	61fb      	str	r3, [r7, #28]
 80060a2:	6a3b      	ldr	r3, [r7, #32]
 80060a4:	69db      	ldr	r3, [r3, #28]
 80060a6:	6a3a      	ldr	r2, [r7, #32]
 80060a8:	6a12      	ldr	r2, [r2, #32]
 80060aa:	609a      	str	r2, [r3, #8]
 80060ac:	6a3b      	ldr	r3, [r7, #32]
 80060ae:	6a1b      	ldr	r3, [r3, #32]
 80060b0:	6a3a      	ldr	r2, [r7, #32]
 80060b2:	69d2      	ldr	r2, [r2, #28]
 80060b4:	605a      	str	r2, [r3, #4]
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	685a      	ldr	r2, [r3, #4]
 80060ba:	6a3b      	ldr	r3, [r7, #32]
 80060bc:	3318      	adds	r3, #24
 80060be:	429a      	cmp	r2, r3
 80060c0:	d103      	bne.n	80060ca <xTaskRemoveFromEventList+0x5a>
 80060c2:	6a3b      	ldr	r3, [r7, #32]
 80060c4:	6a1a      	ldr	r2, [r3, #32]
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	605a      	str	r2, [r3, #4]
 80060ca:	6a3b      	ldr	r3, [r7, #32]
 80060cc:	2200      	movs	r2, #0
 80060ce:	629a      	str	r2, [r3, #40]	; 0x28
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	1e5a      	subs	r2, r3, #1
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060da:	4b4a      	ldr	r3, [pc, #296]	; (8006204 <xTaskRemoveFromEventList+0x194>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d15e      	bne.n	80061a0 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80060e2:	6a3b      	ldr	r3, [r7, #32]
 80060e4:	695b      	ldr	r3, [r3, #20]
 80060e6:	617b      	str	r3, [r7, #20]
 80060e8:	6a3b      	ldr	r3, [r7, #32]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	6a3a      	ldr	r2, [r7, #32]
 80060ee:	68d2      	ldr	r2, [r2, #12]
 80060f0:	609a      	str	r2, [r3, #8]
 80060f2:	6a3b      	ldr	r3, [r7, #32]
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	6a3a      	ldr	r2, [r7, #32]
 80060f8:	6892      	ldr	r2, [r2, #8]
 80060fa:	605a      	str	r2, [r3, #4]
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	685a      	ldr	r2, [r3, #4]
 8006100:	6a3b      	ldr	r3, [r7, #32]
 8006102:	3304      	adds	r3, #4
 8006104:	429a      	cmp	r2, r3
 8006106:	d103      	bne.n	8006110 <xTaskRemoveFromEventList+0xa0>
 8006108:	6a3b      	ldr	r3, [r7, #32]
 800610a:	68da      	ldr	r2, [r3, #12]
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	605a      	str	r2, [r3, #4]
 8006110:	6a3b      	ldr	r3, [r7, #32]
 8006112:	2200      	movs	r2, #0
 8006114:	615a      	str	r2, [r3, #20]
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	1e5a      	subs	r2, r3, #1
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8006120:	6a3b      	ldr	r3, [r7, #32]
 8006122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006124:	2201      	movs	r2, #1
 8006126:	409a      	lsls	r2, r3
 8006128:	4b37      	ldr	r3, [pc, #220]	; (8006208 <xTaskRemoveFromEventList+0x198>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4313      	orrs	r3, r2
 800612e:	4a36      	ldr	r2, [pc, #216]	; (8006208 <xTaskRemoveFromEventList+0x198>)
 8006130:	6013      	str	r3, [r2, #0]
 8006132:	6a3b      	ldr	r3, [r7, #32]
 8006134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006136:	4935      	ldr	r1, [pc, #212]	; (800620c <xTaskRemoveFromEventList+0x19c>)
 8006138:	4613      	mov	r3, r2
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	4413      	add	r3, r2
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	440b      	add	r3, r1
 8006142:	3304      	adds	r3, #4
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	613b      	str	r3, [r7, #16]
 8006148:	6a3b      	ldr	r3, [r7, #32]
 800614a:	693a      	ldr	r2, [r7, #16]
 800614c:	609a      	str	r2, [r3, #8]
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	689a      	ldr	r2, [r3, #8]
 8006152:	6a3b      	ldr	r3, [r7, #32]
 8006154:	60da      	str	r2, [r3, #12]
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	6a3a      	ldr	r2, [r7, #32]
 800615c:	3204      	adds	r2, #4
 800615e:	605a      	str	r2, [r3, #4]
 8006160:	6a3b      	ldr	r3, [r7, #32]
 8006162:	1d1a      	adds	r2, r3, #4
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	609a      	str	r2, [r3, #8]
 8006168:	6a3b      	ldr	r3, [r7, #32]
 800616a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800616c:	4613      	mov	r3, r2
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	4413      	add	r3, r2
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	4a25      	ldr	r2, [pc, #148]	; (800620c <xTaskRemoveFromEventList+0x19c>)
 8006176:	441a      	add	r2, r3
 8006178:	6a3b      	ldr	r3, [r7, #32]
 800617a:	615a      	str	r2, [r3, #20]
 800617c:	6a3b      	ldr	r3, [r7, #32]
 800617e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006180:	4922      	ldr	r1, [pc, #136]	; (800620c <xTaskRemoveFromEventList+0x19c>)
 8006182:	4613      	mov	r3, r2
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	4413      	add	r3, r2
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	440b      	add	r3, r1
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	1c59      	adds	r1, r3, #1
 8006190:	481e      	ldr	r0, [pc, #120]	; (800620c <xTaskRemoveFromEventList+0x19c>)
 8006192:	4613      	mov	r3, r2
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	4413      	add	r3, r2
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	4403      	add	r3, r0
 800619c:	6019      	str	r1, [r3, #0]
 800619e:	e01b      	b.n	80061d8 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80061a0:	4b1b      	ldr	r3, [pc, #108]	; (8006210 <xTaskRemoveFromEventList+0x1a0>)
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	61bb      	str	r3, [r7, #24]
 80061a6:	6a3b      	ldr	r3, [r7, #32]
 80061a8:	69ba      	ldr	r2, [r7, #24]
 80061aa:	61da      	str	r2, [r3, #28]
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	689a      	ldr	r2, [r3, #8]
 80061b0:	6a3b      	ldr	r3, [r7, #32]
 80061b2:	621a      	str	r2, [r3, #32]
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	6a3a      	ldr	r2, [r7, #32]
 80061ba:	3218      	adds	r2, #24
 80061bc:	605a      	str	r2, [r3, #4]
 80061be:	6a3b      	ldr	r3, [r7, #32]
 80061c0:	f103 0218 	add.w	r2, r3, #24
 80061c4:	69bb      	ldr	r3, [r7, #24]
 80061c6:	609a      	str	r2, [r3, #8]
 80061c8:	6a3b      	ldr	r3, [r7, #32]
 80061ca:	4a11      	ldr	r2, [pc, #68]	; (8006210 <xTaskRemoveFromEventList+0x1a0>)
 80061cc:	629a      	str	r2, [r3, #40]	; 0x28
 80061ce:	4b10      	ldr	r3, [pc, #64]	; (8006210 <xTaskRemoveFromEventList+0x1a0>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	3301      	adds	r3, #1
 80061d4:	4a0e      	ldr	r2, [pc, #56]	; (8006210 <xTaskRemoveFromEventList+0x1a0>)
 80061d6:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80061d8:	6a3b      	ldr	r3, [r7, #32]
 80061da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061dc:	4b0d      	ldr	r3, [pc, #52]	; (8006214 <xTaskRemoveFromEventList+0x1a4>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d905      	bls.n	80061f2 <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80061e6:	2301      	movs	r3, #1
 80061e8:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80061ea:	4b0b      	ldr	r3, [pc, #44]	; (8006218 <xTaskRemoveFromEventList+0x1a8>)
 80061ec:	2201      	movs	r2, #1
 80061ee:	601a      	str	r2, [r3, #0]
 80061f0:	e001      	b.n	80061f6 <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 80061f2:	2300      	movs	r3, #0
 80061f4:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80061f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	372c      	adds	r7, #44	; 0x2c
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr
 8006204:	2000020c 	.word	0x2000020c
 8006208:	200001ec 	.word	0x200001ec
 800620c:	20000110 	.word	0x20000110
 8006210:	200001a4 	.word	0x200001a4
 8006214:	2000010c 	.word	0x2000010c
 8006218:	200001f8 	.word	0x200001f8

0800621c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006224:	4b06      	ldr	r3, [pc, #24]	; (8006240 <vTaskInternalSetTimeOutState+0x24>)
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800622c:	4b05      	ldr	r3, [pc, #20]	; (8006244 <vTaskInternalSetTimeOutState+0x28>)
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	605a      	str	r2, [r3, #4]
}
 8006234:	bf00      	nop
 8006236:	370c      	adds	r7, #12
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr
 8006240:	200001fc 	.word	0x200001fc
 8006244:	200001e8 	.word	0x200001e8

08006248 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b088      	sub	sp, #32
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d10a      	bne.n	800626e <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8006258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800625c:	f383 8811 	msr	BASEPRI, r3
 8006260:	f3bf 8f6f 	isb	sy
 8006264:	f3bf 8f4f 	dsb	sy
 8006268:	613b      	str	r3, [r7, #16]
    }
 800626a:	bf00      	nop
 800626c:	e7fe      	b.n	800626c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d10a      	bne.n	800628a <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8006274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006278:	f383 8811 	msr	BASEPRI, r3
 800627c:	f3bf 8f6f 	isb	sy
 8006280:	f3bf 8f4f 	dsb	sy
 8006284:	60fb      	str	r3, [r7, #12]
    }
 8006286:	bf00      	nop
 8006288:	e7fe      	b.n	8006288 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800628a:	f001 fa63 	bl	8007754 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800628e:	4b1f      	ldr	r3, [pc, #124]	; (800630c <xTaskCheckForTimeOut+0xc4>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	69ba      	ldr	r2, [r7, #24]
 800629a:	1ad3      	subs	r3, r2, r3
 800629c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a6:	d102      	bne.n	80062ae <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80062a8:	2300      	movs	r3, #0
 80062aa:	61fb      	str	r3, [r7, #28]
 80062ac:	e026      	b.n	80062fc <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	4b17      	ldr	r3, [pc, #92]	; (8006310 <xTaskCheckForTimeOut+0xc8>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d00a      	beq.n	80062d0 <xTaskCheckForTimeOut+0x88>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	69ba      	ldr	r2, [r7, #24]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d305      	bcc.n	80062d0 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80062c4:	2301      	movs	r3, #1
 80062c6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	2200      	movs	r2, #0
 80062cc:	601a      	str	r2, [r3, #0]
 80062ce:	e015      	b.n	80062fc <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	697a      	ldr	r2, [r7, #20]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d20b      	bcs.n	80062f2 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	1ad2      	subs	r2, r2, r3
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f7ff ff98 	bl	800621c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80062ec:	2300      	movs	r3, #0
 80062ee:	61fb      	str	r3, [r7, #28]
 80062f0:	e004      	b.n	80062fc <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	2200      	movs	r2, #0
 80062f6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80062f8:	2301      	movs	r3, #1
 80062fa:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80062fc:	f001 fa5a 	bl	80077b4 <vPortExitCritical>

    return xReturn;
 8006300:	69fb      	ldr	r3, [r7, #28]
}
 8006302:	4618      	mov	r0, r3
 8006304:	3720      	adds	r7, #32
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
 800630a:	bf00      	nop
 800630c:	200001e8 	.word	0x200001e8
 8006310:	200001fc 	.word	0x200001fc

08006314 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006314:	b480      	push	{r7}
 8006316:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8006318:	4b03      	ldr	r3, [pc, #12]	; (8006328 <vTaskMissedYield+0x14>)
 800631a:	2201      	movs	r2, #1
 800631c:	601a      	str	r2, [r3, #0]
}
 800631e:	bf00      	nop
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr
 8006328:	200001f8 	.word	0x200001f8

0800632c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b082      	sub	sp, #8
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8006334:	f000 f852 	bl	80063dc <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006338:	4b06      	ldr	r3, [pc, #24]	; (8006354 <prvIdleTask+0x28>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2b01      	cmp	r3, #1
 800633e:	d9f9      	bls.n	8006334 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8006340:	4b05      	ldr	r3, [pc, #20]	; (8006358 <prvIdleTask+0x2c>)
 8006342:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006346:	601a      	str	r2, [r3, #0]
 8006348:	f3bf 8f4f 	dsb	sy
 800634c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8006350:	e7f0      	b.n	8006334 <prvIdleTask+0x8>
 8006352:	bf00      	nop
 8006354:	20000110 	.word	0x20000110
 8006358:	e000ed04 	.word	0xe000ed04

0800635c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006362:	2300      	movs	r3, #0
 8006364:	607b      	str	r3, [r7, #4]
 8006366:	e00c      	b.n	8006382 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	4613      	mov	r3, r2
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	4413      	add	r3, r2
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	4a12      	ldr	r2, [pc, #72]	; (80063bc <prvInitialiseTaskLists+0x60>)
 8006374:	4413      	add	r3, r2
 8006376:	4618      	mov	r0, r3
 8006378:	f7fe fbc6 	bl	8004b08 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	3301      	adds	r3, #1
 8006380:	607b      	str	r3, [r7, #4]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2b04      	cmp	r3, #4
 8006386:	d9ef      	bls.n	8006368 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8006388:	480d      	ldr	r0, [pc, #52]	; (80063c0 <prvInitialiseTaskLists+0x64>)
 800638a:	f7fe fbbd 	bl	8004b08 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800638e:	480d      	ldr	r0, [pc, #52]	; (80063c4 <prvInitialiseTaskLists+0x68>)
 8006390:	f7fe fbba 	bl	8004b08 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8006394:	480c      	ldr	r0, [pc, #48]	; (80063c8 <prvInitialiseTaskLists+0x6c>)
 8006396:	f7fe fbb7 	bl	8004b08 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800639a:	480c      	ldr	r0, [pc, #48]	; (80063cc <prvInitialiseTaskLists+0x70>)
 800639c:	f7fe fbb4 	bl	8004b08 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80063a0:	480b      	ldr	r0, [pc, #44]	; (80063d0 <prvInitialiseTaskLists+0x74>)
 80063a2:	f7fe fbb1 	bl	8004b08 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80063a6:	4b0b      	ldr	r3, [pc, #44]	; (80063d4 <prvInitialiseTaskLists+0x78>)
 80063a8:	4a05      	ldr	r2, [pc, #20]	; (80063c0 <prvInitialiseTaskLists+0x64>)
 80063aa:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80063ac:	4b0a      	ldr	r3, [pc, #40]	; (80063d8 <prvInitialiseTaskLists+0x7c>)
 80063ae:	4a05      	ldr	r2, [pc, #20]	; (80063c4 <prvInitialiseTaskLists+0x68>)
 80063b0:	601a      	str	r2, [r3, #0]
}
 80063b2:	bf00      	nop
 80063b4:	3708      	adds	r7, #8
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	20000110 	.word	0x20000110
 80063c0:	20000174 	.word	0x20000174
 80063c4:	20000188 	.word	0x20000188
 80063c8:	200001a4 	.word	0x200001a4
 80063cc:	200001b8 	.word	0x200001b8
 80063d0:	200001d0 	.word	0x200001d0
 80063d4:	2000019c 	.word	0x2000019c
 80063d8:	200001a0 	.word	0x200001a0

080063dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b082      	sub	sp, #8
 80063e0:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80063e2:	e019      	b.n	8006418 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80063e4:	f001 f9b6 	bl	8007754 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063e8:	4b10      	ldr	r3, [pc, #64]	; (800642c <prvCheckTasksWaitingTermination+0x50>)
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	3304      	adds	r3, #4
 80063f4:	4618      	mov	r0, r3
 80063f6:	f7fe fbed 	bl	8004bd4 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80063fa:	4b0d      	ldr	r3, [pc, #52]	; (8006430 <prvCheckTasksWaitingTermination+0x54>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	3b01      	subs	r3, #1
 8006400:	4a0b      	ldr	r2, [pc, #44]	; (8006430 <prvCheckTasksWaitingTermination+0x54>)
 8006402:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8006404:	4b0b      	ldr	r3, [pc, #44]	; (8006434 <prvCheckTasksWaitingTermination+0x58>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	3b01      	subs	r3, #1
 800640a:	4a0a      	ldr	r2, [pc, #40]	; (8006434 <prvCheckTasksWaitingTermination+0x58>)
 800640c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800640e:	f001 f9d1 	bl	80077b4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f000 f810 	bl	8006438 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006418:	4b06      	ldr	r3, [pc, #24]	; (8006434 <prvCheckTasksWaitingTermination+0x58>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d1e1      	bne.n	80063e4 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8006420:	bf00      	nop
 8006422:	bf00      	nop
 8006424:	3708      	adds	r7, #8
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
 800642a:	bf00      	nop
 800642c:	200001b8 	.word	0x200001b8
 8006430:	200001e4 	.word	0x200001e4
 8006434:	200001cc 	.word	0x200001cc

08006438 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8006438:	b580      	push	{r7, lr}
 800643a:	b082      	sub	sp, #8
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006444:	4618      	mov	r0, r3
 8006446:	f001 fb89 	bl	8007b5c <vPortFree>
                vPortFree( pxTCB );
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f001 fb86 	bl	8007b5c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8006450:	bf00      	nop
 8006452:	3708      	adds	r7, #8
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006458:	b480      	push	{r7}
 800645a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800645c:	4b0a      	ldr	r3, [pc, #40]	; (8006488 <prvResetNextTaskUnblockTime+0x30>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d104      	bne.n	8006470 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8006466:	4b09      	ldr	r3, [pc, #36]	; (800648c <prvResetNextTaskUnblockTime+0x34>)
 8006468:	f04f 32ff 	mov.w	r2, #4294967295
 800646c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800646e:	e005      	b.n	800647c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006470:	4b05      	ldr	r3, [pc, #20]	; (8006488 <prvResetNextTaskUnblockTime+0x30>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a04      	ldr	r2, [pc, #16]	; (800648c <prvResetNextTaskUnblockTime+0x34>)
 800647a:	6013      	str	r3, [r2, #0]
}
 800647c:	bf00      	nop
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr
 8006486:	bf00      	nop
 8006488:	2000019c 	.word	0x2000019c
 800648c:	20000204 	.word	0x20000204

08006490 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8006490:	b480      	push	{r7}
 8006492:	b083      	sub	sp, #12
 8006494:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8006496:	4b0b      	ldr	r3, [pc, #44]	; (80064c4 <xTaskGetSchedulerState+0x34>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d102      	bne.n	80064a4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800649e:	2301      	movs	r3, #1
 80064a0:	607b      	str	r3, [r7, #4]
 80064a2:	e008      	b.n	80064b6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064a4:	4b08      	ldr	r3, [pc, #32]	; (80064c8 <xTaskGetSchedulerState+0x38>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d102      	bne.n	80064b2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80064ac:	2302      	movs	r3, #2
 80064ae:	607b      	str	r3, [r7, #4]
 80064b0:	e001      	b.n	80064b6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80064b2:	2300      	movs	r3, #0
 80064b4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80064b6:	687b      	ldr	r3, [r7, #4]
    }
 80064b8:	4618      	mov	r0, r3
 80064ba:	370c      	adds	r7, #12
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr
 80064c4:	200001f0 	.word	0x200001f0
 80064c8:	2000020c 	.word	0x2000020c

080064cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b088      	sub	sp, #32
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 80064d8:	2300      	movs	r3, #0
 80064da:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	f000 808c 	beq.w	80065fc <xTaskPriorityDisinherit+0x130>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80064e4:	4b48      	ldr	r3, [pc, #288]	; (8006608 <xTaskPriorityDisinherit+0x13c>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	69ba      	ldr	r2, [r7, #24]
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d00a      	beq.n	8006504 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 80064ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f2:	f383 8811 	msr	BASEPRI, r3
 80064f6:	f3bf 8f6f 	isb	sy
 80064fa:	f3bf 8f4f 	dsb	sy
 80064fe:	613b      	str	r3, [r7, #16]
    }
 8006500:	bf00      	nop
 8006502:	e7fe      	b.n	8006502 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 8006504:	69bb      	ldr	r3, [r7, #24]
 8006506:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006508:	2b00      	cmp	r3, #0
 800650a:	d10a      	bne.n	8006522 <xTaskPriorityDisinherit+0x56>
        __asm volatile
 800650c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006510:	f383 8811 	msr	BASEPRI, r3
 8006514:	f3bf 8f6f 	isb	sy
 8006518:	f3bf 8f4f 	dsb	sy
 800651c:	60fb      	str	r3, [r7, #12]
    }
 800651e:	bf00      	nop
 8006520:	e7fe      	b.n	8006520 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8006522:	69bb      	ldr	r3, [r7, #24]
 8006524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006526:	1e5a      	subs	r2, r3, #1
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800652c:	69bb      	ldr	r3, [r7, #24]
 800652e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006534:	429a      	cmp	r2, r3
 8006536:	d061      	beq.n	80065fc <xTaskPriorityDisinherit+0x130>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800653c:	2b00      	cmp	r3, #0
 800653e:	d15d      	bne.n	80065fc <xTaskPriorityDisinherit+0x130>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	3304      	adds	r3, #4
 8006544:	4618      	mov	r0, r3
 8006546:	f7fe fb45 	bl	8004bd4 <uxListRemove>
 800654a:	4603      	mov	r3, r0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d10a      	bne.n	8006566 <xTaskPriorityDisinherit+0x9a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006550:	69bb      	ldr	r3, [r7, #24]
 8006552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006554:	2201      	movs	r2, #1
 8006556:	fa02 f303 	lsl.w	r3, r2, r3
 800655a:	43da      	mvns	r2, r3
 800655c:	4b2b      	ldr	r3, [pc, #172]	; (800660c <xTaskPriorityDisinherit+0x140>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4013      	ands	r3, r2
 8006562:	4a2a      	ldr	r2, [pc, #168]	; (800660c <xTaskPriorityDisinherit+0x140>)
 8006564:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800656a:	69bb      	ldr	r3, [r7, #24]
 800656c:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800656e:	69bb      	ldr	r3, [r7, #24]
 8006570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006572:	f1c3 0205 	rsb	r2, r3, #5
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800657a:	69bb      	ldr	r3, [r7, #24]
 800657c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800657e:	2201      	movs	r2, #1
 8006580:	409a      	lsls	r2, r3
 8006582:	4b22      	ldr	r3, [pc, #136]	; (800660c <xTaskPriorityDisinherit+0x140>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4313      	orrs	r3, r2
 8006588:	4a20      	ldr	r2, [pc, #128]	; (800660c <xTaskPriorityDisinherit+0x140>)
 800658a:	6013      	str	r3, [r2, #0]
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006590:	491f      	ldr	r1, [pc, #124]	; (8006610 <xTaskPriorityDisinherit+0x144>)
 8006592:	4613      	mov	r3, r2
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	4413      	add	r3, r2
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	440b      	add	r3, r1
 800659c:	3304      	adds	r3, #4
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	617b      	str	r3, [r7, #20]
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	697a      	ldr	r2, [r7, #20]
 80065a6:	609a      	str	r2, [r3, #8]
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	689a      	ldr	r2, [r3, #8]
 80065ac:	69bb      	ldr	r3, [r7, #24]
 80065ae:	60da      	str	r2, [r3, #12]
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	69ba      	ldr	r2, [r7, #24]
 80065b6:	3204      	adds	r2, #4
 80065b8:	605a      	str	r2, [r3, #4]
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	1d1a      	adds	r2, r3, #4
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	609a      	str	r2, [r3, #8]
 80065c2:	69bb      	ldr	r3, [r7, #24]
 80065c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065c6:	4613      	mov	r3, r2
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	4413      	add	r3, r2
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	4a10      	ldr	r2, [pc, #64]	; (8006610 <xTaskPriorityDisinherit+0x144>)
 80065d0:	441a      	add	r2, r3
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	615a      	str	r2, [r3, #20]
 80065d6:	69bb      	ldr	r3, [r7, #24]
 80065d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065da:	490d      	ldr	r1, [pc, #52]	; (8006610 <xTaskPriorityDisinherit+0x144>)
 80065dc:	4613      	mov	r3, r2
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	4413      	add	r3, r2
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	440b      	add	r3, r1
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	1c59      	adds	r1, r3, #1
 80065ea:	4809      	ldr	r0, [pc, #36]	; (8006610 <xTaskPriorityDisinherit+0x144>)
 80065ec:	4613      	mov	r3, r2
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	4413      	add	r3, r2
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	4403      	add	r3, r0
 80065f6:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80065f8:	2301      	movs	r3, #1
 80065fa:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80065fc:	69fb      	ldr	r3, [r7, #28]
    }
 80065fe:	4618      	mov	r0, r3
 8006600:	3720      	adds	r7, #32
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	2000010c 	.word	0x2000010c
 800660c:	200001ec 	.word	0x200001ec
 8006610:	20000110 	.word	0x20000110

08006614 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8006614:	b580      	push	{r7, lr}
 8006616:	b086      	sub	sp, #24
 8006618:	af00      	add	r7, sp, #0
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	60b9      	str	r1, [r7, #8]
 800661e:	607a      	str	r2, [r7, #4]
 8006620:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d00a      	beq.n	800663e <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8006628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800662c:	f383 8811 	msr	BASEPRI, r3
 8006630:	f3bf 8f6f 	isb	sy
 8006634:	f3bf 8f4f 	dsb	sy
 8006638:	613b      	str	r3, [r7, #16]
    }
 800663a:	bf00      	nop
 800663c:	e7fe      	b.n	800663c <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 800663e:	f001 f889 	bl	8007754 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8006642:	4b32      	ldr	r3, [pc, #200]	; (800670c <xTaskGenericNotifyWait+0xf8>)
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	4413      	add	r3, r2
 800664a:	3354      	adds	r3, #84	; 0x54
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	b2db      	uxtb	r3, r3
 8006650:	2b02      	cmp	r3, #2
 8006652:	d022      	beq.n	800669a <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8006654:	4b2d      	ldr	r3, [pc, #180]	; (800670c <xTaskGenericNotifyWait+0xf8>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	68fa      	ldr	r2, [r7, #12]
 800665a:	3214      	adds	r2, #20
 800665c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006660:	68ba      	ldr	r2, [r7, #8]
 8006662:	43d2      	mvns	r2, r2
 8006664:	4011      	ands	r1, r2
 8006666:	68fa      	ldr	r2, [r7, #12]
 8006668:	3214      	adds	r2, #20
 800666a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 800666e:	4b27      	ldr	r3, [pc, #156]	; (800670c <xTaskGenericNotifyWait+0xf8>)
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	4413      	add	r3, r2
 8006676:	3354      	adds	r3, #84	; 0x54
 8006678:	2201      	movs	r2, #1
 800667a:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 800667c:	6a3b      	ldr	r3, [r7, #32]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d00b      	beq.n	800669a <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006682:	2101      	movs	r1, #1
 8006684:	6a38      	ldr	r0, [r7, #32]
 8006686:	f000 fac3 	bl	8006c10 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 800668a:	4b21      	ldr	r3, [pc, #132]	; (8006710 <xTaskGenericNotifyWait+0xfc>)
 800668c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006690:	601a      	str	r2, [r3, #0]
 8006692:	f3bf 8f4f 	dsb	sy
 8006696:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800669a:	f001 f88b 	bl	80077b4 <vPortExitCritical>

        taskENTER_CRITICAL();
 800669e:	f001 f859 	bl	8007754 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d007      	beq.n	80066b8 <xTaskGenericNotifyWait+0xa4>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80066a8:	4b18      	ldr	r3, [pc, #96]	; (800670c <xTaskGenericNotifyWait+0xf8>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	3214      	adds	r2, #20
 80066b0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80066b8:	4b14      	ldr	r3, [pc, #80]	; (800670c <xTaskGenericNotifyWait+0xf8>)
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	4413      	add	r3, r2
 80066c0:	3354      	adds	r3, #84	; 0x54
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	2b02      	cmp	r3, #2
 80066c8:	d002      	beq.n	80066d0 <xTaskGenericNotifyWait+0xbc>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80066ca:	2300      	movs	r3, #0
 80066cc:	617b      	str	r3, [r7, #20]
 80066ce:	e00e      	b.n	80066ee <xTaskGenericNotifyWait+0xda>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 80066d0:	4b0e      	ldr	r3, [pc, #56]	; (800670c <xTaskGenericNotifyWait+0xf8>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	68fa      	ldr	r2, [r7, #12]
 80066d6:	3214      	adds	r2, #20
 80066d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	43d2      	mvns	r2, r2
 80066e0:	4011      	ands	r1, r2
 80066e2:	68fa      	ldr	r2, [r7, #12]
 80066e4:	3214      	adds	r2, #20
 80066e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 80066ea:	2301      	movs	r3, #1
 80066ec:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 80066ee:	4b07      	ldr	r3, [pc, #28]	; (800670c <xTaskGenericNotifyWait+0xf8>)
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	4413      	add	r3, r2
 80066f6:	3354      	adds	r3, #84	; 0x54
 80066f8:	2200      	movs	r2, #0
 80066fa:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80066fc:	f001 f85a 	bl	80077b4 <vPortExitCritical>

        return xReturn;
 8006700:	697b      	ldr	r3, [r7, #20]
    }
 8006702:	4618      	mov	r0, r3
 8006704:	3718      	adds	r7, #24
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
 800670a:	bf00      	nop
 800670c:	2000010c 	.word	0x2000010c
 8006710:	e000ed04 	.word	0xe000ed04

08006714 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8006714:	b580      	push	{r7, lr}
 8006716:	b08e      	sub	sp, #56	; 0x38
 8006718:	af00      	add	r7, sp, #0
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	607a      	str	r2, [r7, #4]
 8006720:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8006722:	2301      	movs	r3, #1
 8006724:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d00a      	beq.n	8006742 <xTaskGenericNotify+0x2e>
        __asm volatile
 800672c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006730:	f383 8811 	msr	BASEPRI, r3
 8006734:	f3bf 8f6f 	isb	sy
 8006738:	f3bf 8f4f 	dsb	sy
 800673c:	623b      	str	r3, [r7, #32]
    }
 800673e:	bf00      	nop
 8006740:	e7fe      	b.n	8006740 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d10a      	bne.n	800675e <xTaskGenericNotify+0x4a>
        __asm volatile
 8006748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800674c:	f383 8811 	msr	BASEPRI, r3
 8006750:	f3bf 8f6f 	isb	sy
 8006754:	f3bf 8f4f 	dsb	sy
 8006758:	61fb      	str	r3, [r7, #28]
    }
 800675a:	bf00      	nop
 800675c:	e7fe      	b.n	800675c <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	633b      	str	r3, [r7, #48]	; 0x30

        taskENTER_CRITICAL();
 8006762:	f000 fff7 	bl	8007754 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8006766:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006768:	2b00      	cmp	r3, #0
 800676a:	d006      	beq.n	800677a <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 800676c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800676e:	68ba      	ldr	r2, [r7, #8]
 8006770:	3214      	adds	r2, #20
 8006772:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006776:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006778:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800677a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	4413      	add	r3, r2
 8006780:	3354      	adds	r3, #84	; 0x54
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8006788:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	4413      	add	r3, r2
 800678e:	3354      	adds	r3, #84	; 0x54
 8006790:	2202      	movs	r2, #2
 8006792:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8006794:	78fb      	ldrb	r3, [r7, #3]
 8006796:	2b04      	cmp	r3, #4
 8006798:	d83b      	bhi.n	8006812 <xTaskGenericNotify+0xfe>
 800679a:	a201      	add	r2, pc, #4	; (adr r2, 80067a0 <xTaskGenericNotify+0x8c>)
 800679c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a0:	08006831 	.word	0x08006831
 80067a4:	080067b5 	.word	0x080067b5
 80067a8:	080067d1 	.word	0x080067d1
 80067ac:	080067e9 	.word	0x080067e9
 80067b0:	080067f7 	.word	0x080067f7
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80067b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b6:	68ba      	ldr	r2, [r7, #8]
 80067b8:	3214      	adds	r2, #20
 80067ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	ea42 0103 	orr.w	r1, r2, r3
 80067c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c6:	68ba      	ldr	r2, [r7, #8]
 80067c8:	3214      	adds	r2, #20
 80067ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80067ce:	e032      	b.n	8006836 <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80067d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d2:	68ba      	ldr	r2, [r7, #8]
 80067d4:	3214      	adds	r2, #20
 80067d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067da:	1c59      	adds	r1, r3, #1
 80067dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067de:	68ba      	ldr	r2, [r7, #8]
 80067e0:	3214      	adds	r2, #20
 80067e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80067e6:	e026      	b.n	8006836 <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80067e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ea:	68ba      	ldr	r2, [r7, #8]
 80067ec:	3214      	adds	r2, #20
 80067ee:	6879      	ldr	r1, [r7, #4]
 80067f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80067f4:	e01f      	b.n	8006836 <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80067f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80067fa:	2b02      	cmp	r3, #2
 80067fc:	d006      	beq.n	800680c <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80067fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006800:	68ba      	ldr	r2, [r7, #8]
 8006802:	3214      	adds	r2, #20
 8006804:	6879      	ldr	r1, [r7, #4]
 8006806:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800680a:	e014      	b.n	8006836 <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 800680c:	2300      	movs	r3, #0
 800680e:	637b      	str	r3, [r7, #52]	; 0x34
                    break;
 8006810:	e011      	b.n	8006836 <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8006812:	4b4c      	ldr	r3, [pc, #304]	; (8006944 <xTaskGenericNotify+0x230>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00c      	beq.n	8006834 <xTaskGenericNotify+0x120>
        __asm volatile
 800681a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800681e:	f383 8811 	msr	BASEPRI, r3
 8006822:	f3bf 8f6f 	isb	sy
 8006826:	f3bf 8f4f 	dsb	sy
 800682a:	61bb      	str	r3, [r7, #24]
    }
 800682c:	bf00      	nop
 800682e:	e7fe      	b.n	800682e <xTaskGenericNotify+0x11a>
                    break;
 8006830:	bf00      	nop
 8006832:	e000      	b.n	8006836 <xTaskGenericNotify+0x122>

                    break;
 8006834:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006836:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800683a:	2b01      	cmp	r3, #1
 800683c:	d17b      	bne.n	8006936 <xTaskGenericNotify+0x222>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800683e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006840:	695b      	ldr	r3, [r3, #20]
 8006842:	62bb      	str	r3, [r7, #40]	; 0x28
 8006844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800684a:	68d2      	ldr	r2, [r2, #12]
 800684c:	609a      	str	r2, [r3, #8]
 800684e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006850:	68db      	ldr	r3, [r3, #12]
 8006852:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006854:	6892      	ldr	r2, [r2, #8]
 8006856:	605a      	str	r2, [r3, #4]
 8006858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800685a:	685a      	ldr	r2, [r3, #4]
 800685c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800685e:	3304      	adds	r3, #4
 8006860:	429a      	cmp	r2, r3
 8006862:	d103      	bne.n	800686c <xTaskGenericNotify+0x158>
 8006864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006866:	68da      	ldr	r2, [r3, #12]
 8006868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800686a:	605a      	str	r2, [r3, #4]
 800686c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800686e:	2200      	movs	r2, #0
 8006870:	615a      	str	r2, [r3, #20]
 8006872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	1e5a      	subs	r2, r3, #1
 8006878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800687a:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 800687c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800687e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006880:	2201      	movs	r2, #1
 8006882:	409a      	lsls	r2, r3
 8006884:	4b30      	ldr	r3, [pc, #192]	; (8006948 <xTaskGenericNotify+0x234>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4313      	orrs	r3, r2
 800688a:	4a2f      	ldr	r2, [pc, #188]	; (8006948 <xTaskGenericNotify+0x234>)
 800688c:	6013      	str	r3, [r2, #0]
 800688e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006892:	492e      	ldr	r1, [pc, #184]	; (800694c <xTaskGenericNotify+0x238>)
 8006894:	4613      	mov	r3, r2
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	4413      	add	r3, r2
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	440b      	add	r3, r1
 800689e:	3304      	adds	r3, #4
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	627b      	str	r3, [r7, #36]	; 0x24
 80068a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068a8:	609a      	str	r2, [r3, #8]
 80068aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ac:	689a      	ldr	r2, [r3, #8]
 80068ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b0:	60da      	str	r2, [r3, #12]
 80068b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068b8:	3204      	adds	r2, #4
 80068ba:	605a      	str	r2, [r3, #4]
 80068bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068be:	1d1a      	adds	r2, r3, #4
 80068c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c2:	609a      	str	r2, [r3, #8]
 80068c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068c8:	4613      	mov	r3, r2
 80068ca:	009b      	lsls	r3, r3, #2
 80068cc:	4413      	add	r3, r2
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	4a1e      	ldr	r2, [pc, #120]	; (800694c <xTaskGenericNotify+0x238>)
 80068d2:	441a      	add	r2, r3
 80068d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d6:	615a      	str	r2, [r3, #20]
 80068d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068dc:	491b      	ldr	r1, [pc, #108]	; (800694c <xTaskGenericNotify+0x238>)
 80068de:	4613      	mov	r3, r2
 80068e0:	009b      	lsls	r3, r3, #2
 80068e2:	4413      	add	r3, r2
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	440b      	add	r3, r1
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	1c59      	adds	r1, r3, #1
 80068ec:	4817      	ldr	r0, [pc, #92]	; (800694c <xTaskGenericNotify+0x238>)
 80068ee:	4613      	mov	r3, r2
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	4413      	add	r3, r2
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	4403      	add	r3, r0
 80068f8:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80068fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d00a      	beq.n	8006918 <xTaskGenericNotify+0x204>
        __asm volatile
 8006902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006906:	f383 8811 	msr	BASEPRI, r3
 800690a:	f3bf 8f6f 	isb	sy
 800690e:	f3bf 8f4f 	dsb	sy
 8006912:	617b      	str	r3, [r7, #20]
    }
 8006914:	bf00      	nop
 8006916:	e7fe      	b.n	8006916 <xTaskGenericNotify+0x202>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800691a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800691c:	4b0c      	ldr	r3, [pc, #48]	; (8006950 <xTaskGenericNotify+0x23c>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006922:	429a      	cmp	r2, r3
 8006924:	d907      	bls.n	8006936 <xTaskGenericNotify+0x222>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8006926:	4b0b      	ldr	r3, [pc, #44]	; (8006954 <xTaskGenericNotify+0x240>)
 8006928:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800692c:	601a      	str	r2, [r3, #0]
 800692e:	f3bf 8f4f 	dsb	sy
 8006932:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006936:	f000 ff3d 	bl	80077b4 <vPortExitCritical>

        return xReturn;
 800693a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 800693c:	4618      	mov	r0, r3
 800693e:	3738      	adds	r7, #56	; 0x38
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}
 8006944:	200001e8 	.word	0x200001e8
 8006948:	200001ec 	.word	0x200001ec
 800694c:	20000110 	.word	0x20000110
 8006950:	2000010c 	.word	0x2000010c
 8006954:	e000ed04 	.word	0xe000ed04

08006958 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8006958:	b580      	push	{r7, lr}
 800695a:	b092      	sub	sp, #72	; 0x48
 800695c:	af00      	add	r7, sp, #0
 800695e:	60f8      	str	r0, [r7, #12]
 8006960:	60b9      	str	r1, [r7, #8]
 8006962:	607a      	str	r2, [r7, #4]
 8006964:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8006966:	2301      	movs	r3, #1
 8006968:	647b      	str	r3, [r7, #68]	; 0x44
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d10a      	bne.n	8006986 <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8006970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006974:	f383 8811 	msr	BASEPRI, r3
 8006978:	f3bf 8f6f 	isb	sy
 800697c:	f3bf 8f4f 	dsb	sy
 8006980:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8006982:	bf00      	nop
 8006984:	e7fe      	b.n	8006984 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d00a      	beq.n	80069a2 <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 800698c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006990:	f383 8811 	msr	BASEPRI, r3
 8006994:	f3bf 8f6f 	isb	sy
 8006998:	f3bf 8f4f 	dsb	sy
 800699c:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800699e:	bf00      	nop
 80069a0:	e7fe      	b.n	80069a0 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80069a2:	f000 ffbb 	bl	800791c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	643b      	str	r3, [r7, #64]	; 0x40
        __asm volatile
 80069aa:	f3ef 8211 	mrs	r2, BASEPRI
 80069ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b2:	f383 8811 	msr	BASEPRI, r3
 80069b6:	f3bf 8f6f 	isb	sy
 80069ba:	f3bf 8f4f 	dsb	sy
 80069be:	623a      	str	r2, [r7, #32]
 80069c0:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 80069c2:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80069c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 80069c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d006      	beq.n	80069da <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80069cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069ce:	68ba      	ldr	r2, [r7, #8]
 80069d0:	3214      	adds	r2, #20
 80069d2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80069d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069d8:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80069da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	4413      	add	r3, r2
 80069e0:	3354      	adds	r3, #84	; 0x54
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80069e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	4413      	add	r3, r2
 80069ee:	3354      	adds	r3, #84	; 0x54
 80069f0:	2202      	movs	r2, #2
 80069f2:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80069f4:	78fb      	ldrb	r3, [r7, #3]
 80069f6:	2b04      	cmp	r3, #4
 80069f8:	d83b      	bhi.n	8006a72 <xTaskGenericNotifyFromISR+0x11a>
 80069fa:	a201      	add	r2, pc, #4	; (adr r2, 8006a00 <xTaskGenericNotifyFromISR+0xa8>)
 80069fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a00:	08006a91 	.word	0x08006a91
 8006a04:	08006a15 	.word	0x08006a15
 8006a08:	08006a31 	.word	0x08006a31
 8006a0c:	08006a49 	.word	0x08006a49
 8006a10:	08006a57 	.word	0x08006a57
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8006a14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a16:	68ba      	ldr	r2, [r7, #8]
 8006a18:	3214      	adds	r2, #20
 8006a1a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	ea42 0103 	orr.w	r1, r2, r3
 8006a24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a26:	68ba      	ldr	r2, [r7, #8]
 8006a28:	3214      	adds	r2, #20
 8006a2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006a2e:	e032      	b.n	8006a96 <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8006a30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a32:	68ba      	ldr	r2, [r7, #8]
 8006a34:	3214      	adds	r2, #20
 8006a36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a3a:	1c59      	adds	r1, r3, #1
 8006a3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a3e:	68ba      	ldr	r2, [r7, #8]
 8006a40:	3214      	adds	r2, #20
 8006a42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006a46:	e026      	b.n	8006a96 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006a48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a4a:	68ba      	ldr	r2, [r7, #8]
 8006a4c:	3214      	adds	r2, #20
 8006a4e:	6879      	ldr	r1, [r7, #4]
 8006a50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006a54:	e01f      	b.n	8006a96 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006a56:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006a5a:	2b02      	cmp	r3, #2
 8006a5c:	d006      	beq.n	8006a6c <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006a5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a60:	68ba      	ldr	r2, [r7, #8]
 8006a62:	3214      	adds	r2, #20
 8006a64:	6879      	ldr	r1, [r7, #4]
 8006a66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8006a6a:	e014      	b.n	8006a96 <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
 8006a70:	e011      	b.n	8006a96 <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8006a72:	4b60      	ldr	r3, [pc, #384]	; (8006bf4 <xTaskGenericNotifyFromISR+0x29c>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d00c      	beq.n	8006a94 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 8006a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a7e:	f383 8811 	msr	BASEPRI, r3
 8006a82:	f3bf 8f6f 	isb	sy
 8006a86:	f3bf 8f4f 	dsb	sy
 8006a8a:	61bb      	str	r3, [r7, #24]
    }
 8006a8c:	bf00      	nop
 8006a8e:	e7fe      	b.n	8006a8e <xTaskGenericNotifyFromISR+0x136>
                    break;
 8006a90:	bf00      	nop
 8006a92:	e000      	b.n	8006a96 <xTaskGenericNotifyFromISR+0x13e>
                    break;
 8006a94:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006a96:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	f040 809e 	bne.w	8006bdc <xTaskGenericNotifyFromISR+0x284>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006aa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d00a      	beq.n	8006abe <xTaskGenericNotifyFromISR+0x166>
        __asm volatile
 8006aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aac:	f383 8811 	msr	BASEPRI, r3
 8006ab0:	f3bf 8f6f 	isb	sy
 8006ab4:	f3bf 8f4f 	dsb	sy
 8006ab8:	617b      	str	r3, [r7, #20]
    }
 8006aba:	bf00      	nop
 8006abc:	e7fe      	b.n	8006abc <xTaskGenericNotifyFromISR+0x164>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006abe:	4b4e      	ldr	r3, [pc, #312]	; (8006bf8 <xTaskGenericNotifyFromISR+0x2a0>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d15e      	bne.n	8006b84 <xTaskGenericNotifyFromISR+0x22c>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8006ac6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ac8:	695b      	ldr	r3, [r3, #20]
 8006aca:	633b      	str	r3, [r7, #48]	; 0x30
 8006acc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ad2:	68d2      	ldr	r2, [r2, #12]
 8006ad4:	609a      	str	r2, [r3, #8]
 8006ad6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ad8:	68db      	ldr	r3, [r3, #12]
 8006ada:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006adc:	6892      	ldr	r2, [r2, #8]
 8006ade:	605a      	str	r2, [r3, #4]
 8006ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae2:	685a      	ldr	r2, [r3, #4]
 8006ae4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ae6:	3304      	adds	r3, #4
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d103      	bne.n	8006af4 <xTaskGenericNotifyFromISR+0x19c>
 8006aec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006aee:	68da      	ldr	r2, [r3, #12]
 8006af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af2:	605a      	str	r2, [r3, #4]
 8006af4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006af6:	2200      	movs	r2, #0
 8006af8:	615a      	str	r2, [r3, #20]
 8006afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	1e5a      	subs	r2, r3, #1
 8006b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b02:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8006b04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b08:	2201      	movs	r2, #1
 8006b0a:	409a      	lsls	r2, r3
 8006b0c:	4b3b      	ldr	r3, [pc, #236]	; (8006bfc <xTaskGenericNotifyFromISR+0x2a4>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4313      	orrs	r3, r2
 8006b12:	4a3a      	ldr	r2, [pc, #232]	; (8006bfc <xTaskGenericNotifyFromISR+0x2a4>)
 8006b14:	6013      	str	r3, [r2, #0]
 8006b16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b1a:	4939      	ldr	r1, [pc, #228]	; (8006c00 <xTaskGenericNotifyFromISR+0x2a8>)
 8006b1c:	4613      	mov	r3, r2
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	4413      	add	r3, r2
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	440b      	add	r3, r1
 8006b26:	3304      	adds	r3, #4
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b30:	609a      	str	r2, [r3, #8]
 8006b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b34:	689a      	ldr	r2, [r3, #8]
 8006b36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b38:	60da      	str	r2, [r3, #12]
 8006b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b40:	3204      	adds	r2, #4
 8006b42:	605a      	str	r2, [r3, #4]
 8006b44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b46:	1d1a      	adds	r2, r3, #4
 8006b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b4a:	609a      	str	r2, [r3, #8]
 8006b4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b50:	4613      	mov	r3, r2
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	4413      	add	r3, r2
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	4a29      	ldr	r2, [pc, #164]	; (8006c00 <xTaskGenericNotifyFromISR+0x2a8>)
 8006b5a:	441a      	add	r2, r3
 8006b5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b5e:	615a      	str	r2, [r3, #20]
 8006b60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b64:	4926      	ldr	r1, [pc, #152]	; (8006c00 <xTaskGenericNotifyFromISR+0x2a8>)
 8006b66:	4613      	mov	r3, r2
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	4413      	add	r3, r2
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	440b      	add	r3, r1
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	1c59      	adds	r1, r3, #1
 8006b74:	4822      	ldr	r0, [pc, #136]	; (8006c00 <xTaskGenericNotifyFromISR+0x2a8>)
 8006b76:	4613      	mov	r3, r2
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	4413      	add	r3, r2
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	4403      	add	r3, r0
 8006b80:	6019      	str	r1, [r3, #0]
 8006b82:	e01b      	b.n	8006bbc <xTaskGenericNotifyFromISR+0x264>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006b84:	4b1f      	ldr	r3, [pc, #124]	; (8006c04 <xTaskGenericNotifyFromISR+0x2ac>)
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	637b      	str	r3, [r7, #52]	; 0x34
 8006b8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b8e:	61da      	str	r2, [r3, #28]
 8006b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b92:	689a      	ldr	r2, [r3, #8]
 8006b94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b96:	621a      	str	r2, [r3, #32]
 8006b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b9e:	3218      	adds	r2, #24
 8006ba0:	605a      	str	r2, [r3, #4]
 8006ba2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ba4:	f103 0218 	add.w	r2, r3, #24
 8006ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006baa:	609a      	str	r2, [r3, #8]
 8006bac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bae:	4a15      	ldr	r2, [pc, #84]	; (8006c04 <xTaskGenericNotifyFromISR+0x2ac>)
 8006bb0:	629a      	str	r2, [r3, #40]	; 0x28
 8006bb2:	4b14      	ldr	r3, [pc, #80]	; (8006c04 <xTaskGenericNotifyFromISR+0x2ac>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	3301      	adds	r3, #1
 8006bb8:	4a12      	ldr	r2, [pc, #72]	; (8006c04 <xTaskGenericNotifyFromISR+0x2ac>)
 8006bba:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006bbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bc0:	4b11      	ldr	r3, [pc, #68]	; (8006c08 <xTaskGenericNotifyFromISR+0x2b0>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d908      	bls.n	8006bdc <xTaskGenericNotifyFromISR+0x284>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8006bca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d002      	beq.n	8006bd6 <xTaskGenericNotifyFromISR+0x27e>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8006bd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8006bd6:	4b0d      	ldr	r3, [pc, #52]	; (8006c0c <xTaskGenericNotifyFromISR+0x2b4>)
 8006bd8:	2201      	movs	r2, #1
 8006bda:	601a      	str	r2, [r3, #0]
 8006bdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bde:	613b      	str	r3, [r7, #16]
        __asm volatile
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	f383 8811 	msr	BASEPRI, r3
    }
 8006be6:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8006be8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
 8006bea:	4618      	mov	r0, r3
 8006bec:	3748      	adds	r7, #72	; 0x48
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
 8006bf2:	bf00      	nop
 8006bf4:	200001e8 	.word	0x200001e8
 8006bf8:	2000020c 	.word	0x2000020c
 8006bfc:	200001ec 	.word	0x200001ec
 8006c00:	20000110 	.word	0x20000110
 8006c04:	200001a4 	.word	0x200001a4
 8006c08:	2000010c 	.word	0x2000010c
 8006c0c:	200001f8 	.word	0x200001f8

08006c10 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b086      	sub	sp, #24
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8006c1a:	4b36      	ldr	r3, [pc, #216]	; (8006cf4 <prvAddCurrentTaskToDelayedList+0xe4>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c20:	4b35      	ldr	r3, [pc, #212]	; (8006cf8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	3304      	adds	r3, #4
 8006c26:	4618      	mov	r0, r3
 8006c28:	f7fd ffd4 	bl	8004bd4 <uxListRemove>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d10b      	bne.n	8006c4a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006c32:	4b31      	ldr	r3, [pc, #196]	; (8006cf8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c38:	2201      	movs	r2, #1
 8006c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c3e:	43da      	mvns	r2, r3
 8006c40:	4b2e      	ldr	r3, [pc, #184]	; (8006cfc <prvAddCurrentTaskToDelayedList+0xec>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4013      	ands	r3, r2
 8006c46:	4a2d      	ldr	r2, [pc, #180]	; (8006cfc <prvAddCurrentTaskToDelayedList+0xec>)
 8006c48:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c50:	d124      	bne.n	8006c9c <prvAddCurrentTaskToDelayedList+0x8c>
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d021      	beq.n	8006c9c <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c58:	4b29      	ldr	r3, [pc, #164]	; (8006d00 <prvAddCurrentTaskToDelayedList+0xf0>)
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	613b      	str	r3, [r7, #16]
 8006c5e:	4b26      	ldr	r3, [pc, #152]	; (8006cf8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	693a      	ldr	r2, [r7, #16]
 8006c64:	609a      	str	r2, [r3, #8]
 8006c66:	4b24      	ldr	r3, [pc, #144]	; (8006cf8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	693a      	ldr	r2, [r7, #16]
 8006c6c:	6892      	ldr	r2, [r2, #8]
 8006c6e:	60da      	str	r2, [r3, #12]
 8006c70:	4b21      	ldr	r3, [pc, #132]	; (8006cf8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	3204      	adds	r2, #4
 8006c7a:	605a      	str	r2, [r3, #4]
 8006c7c:	4b1e      	ldr	r3, [pc, #120]	; (8006cf8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	1d1a      	adds	r2, r3, #4
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	609a      	str	r2, [r3, #8]
 8006c86:	4b1c      	ldr	r3, [pc, #112]	; (8006cf8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a1d      	ldr	r2, [pc, #116]	; (8006d00 <prvAddCurrentTaskToDelayedList+0xf0>)
 8006c8c:	615a      	str	r2, [r3, #20]
 8006c8e:	4b1c      	ldr	r3, [pc, #112]	; (8006d00 <prvAddCurrentTaskToDelayedList+0xf0>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	3301      	adds	r3, #1
 8006c94:	4a1a      	ldr	r2, [pc, #104]	; (8006d00 <prvAddCurrentTaskToDelayedList+0xf0>)
 8006c96:	6013      	str	r3, [r2, #0]
 8006c98:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8006c9a:	e026      	b.n	8006cea <prvAddCurrentTaskToDelayedList+0xda>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8006c9c:	697a      	ldr	r2, [r7, #20]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	4413      	add	r3, r2
 8006ca2:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006ca4:	4b14      	ldr	r3, [pc, #80]	; (8006cf8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	68fa      	ldr	r2, [r7, #12]
 8006caa:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8006cac:	68fa      	ldr	r2, [r7, #12]
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d209      	bcs.n	8006cc8 <prvAddCurrentTaskToDelayedList+0xb8>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cb4:	4b13      	ldr	r3, [pc, #76]	; (8006d04 <prvAddCurrentTaskToDelayedList+0xf4>)
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	4b0f      	ldr	r3, [pc, #60]	; (8006cf8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	3304      	adds	r3, #4
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	4610      	mov	r0, r2
 8006cc2:	f7fd ff4e 	bl	8004b62 <vListInsert>
}
 8006cc6:	e010      	b.n	8006cea <prvAddCurrentTaskToDelayedList+0xda>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cc8:	4b0f      	ldr	r3, [pc, #60]	; (8006d08 <prvAddCurrentTaskToDelayedList+0xf8>)
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	4b0a      	ldr	r3, [pc, #40]	; (8006cf8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	3304      	adds	r3, #4
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	4610      	mov	r0, r2
 8006cd6:	f7fd ff44 	bl	8004b62 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8006cda:	4b0c      	ldr	r3, [pc, #48]	; (8006d0c <prvAddCurrentTaskToDelayedList+0xfc>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	68fa      	ldr	r2, [r7, #12]
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d202      	bcs.n	8006cea <prvAddCurrentTaskToDelayedList+0xda>
                        xNextTaskUnblockTime = xTimeToWake;
 8006ce4:	4a09      	ldr	r2, [pc, #36]	; (8006d0c <prvAddCurrentTaskToDelayedList+0xfc>)
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	6013      	str	r3, [r2, #0]
}
 8006cea:	bf00      	nop
 8006cec:	3718      	adds	r7, #24
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
 8006cf2:	bf00      	nop
 8006cf4:	200001e8 	.word	0x200001e8
 8006cf8:	2000010c 	.word	0x2000010c
 8006cfc:	200001ec 	.word	0x200001ec
 8006d00:	200001d0 	.word	0x200001d0
 8006d04:	200001a0 	.word	0x200001a0
 8006d08:	2000019c 	.word	0x2000019c
 8006d0c:	20000204 	.word	0x20000204

08006d10 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8006d16:	2300      	movs	r3, #0
 8006d18:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8006d1a:	f000 faef 	bl	80072fc <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8006d1e:	4b11      	ldr	r3, [pc, #68]	; (8006d64 <xTimerCreateTimerTask+0x54>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d00b      	beq.n	8006d3e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8006d26:	4b10      	ldr	r3, [pc, #64]	; (8006d68 <xTimerCreateTimerTask+0x58>)
 8006d28:	9301      	str	r3, [sp, #4]
 8006d2a:	2302      	movs	r3, #2
 8006d2c:	9300      	str	r3, [sp, #0]
 8006d2e:	2300      	movs	r3, #0
 8006d30:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006d34:	490d      	ldr	r1, [pc, #52]	; (8006d6c <xTimerCreateTimerTask+0x5c>)
 8006d36:	480e      	ldr	r0, [pc, #56]	; (8006d70 <xTimerCreateTimerTask+0x60>)
 8006d38:	f7fe fcd6 	bl	80056e8 <xTaskCreate>
 8006d3c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d10a      	bne.n	8006d5a <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8006d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d48:	f383 8811 	msr	BASEPRI, r3
 8006d4c:	f3bf 8f6f 	isb	sy
 8006d50:	f3bf 8f4f 	dsb	sy
 8006d54:	603b      	str	r3, [r7, #0]
    }
 8006d56:	bf00      	nop
 8006d58:	e7fe      	b.n	8006d58 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8006d5a:	687b      	ldr	r3, [r7, #4]
    }
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3708      	adds	r7, #8
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}
 8006d64:	20000240 	.word	0x20000240
 8006d68:	20000244 	.word	0x20000244
 8006d6c:	08009438 	.word	0x08009438
 8006d70:	08006f69 	.word	0x08006f69

08006d74 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b088      	sub	sp, #32
 8006d78:	af02      	add	r7, sp, #8
 8006d7a:	60f8      	str	r0, [r7, #12]
 8006d7c:	60b9      	str	r1, [r7, #8]
 8006d7e:	607a      	str	r2, [r7, #4]
 8006d80:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8006d82:	202c      	movs	r0, #44	; 0x2c
 8006d84:	f000 fe0a 	bl	800799c <pvPortMalloc>
 8006d88:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d00d      	beq.n	8006dac <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	9301      	str	r3, [sp, #4]
 8006d9c:	6a3b      	ldr	r3, [r7, #32]
 8006d9e:	9300      	str	r3, [sp, #0]
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	68b9      	ldr	r1, [r7, #8]
 8006da6:	68f8      	ldr	r0, [r7, #12]
 8006da8:	f000 f805 	bl	8006db6 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8006dac:	697b      	ldr	r3, [r7, #20]
        }
 8006dae:	4618      	mov	r0, r3
 8006db0:	3718      	adds	r7, #24
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}

08006db6 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b086      	sub	sp, #24
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	60f8      	str	r0, [r7, #12]
 8006dbe:	60b9      	str	r1, [r7, #8]
 8006dc0:	607a      	str	r2, [r7, #4]
 8006dc2:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d10a      	bne.n	8006de0 <prvInitialiseNewTimer+0x2a>
        __asm volatile
 8006dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dce:	f383 8811 	msr	BASEPRI, r3
 8006dd2:	f3bf 8f6f 	isb	sy
 8006dd6:	f3bf 8f4f 	dsb	sy
 8006dda:	617b      	str	r3, [r7, #20]
    }
 8006ddc:	bf00      	nop
 8006dde:	e7fe      	b.n	8006dde <prvInitialiseNewTimer+0x28>

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
 8006de0:	f000 fa8c 	bl	80072fc <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
 8006de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de6:	68fa      	ldr	r2, [r7, #12]
 8006de8:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dec:	68ba      	ldr	r2, [r7, #8]
 8006dee:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 8006df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df2:	683a      	ldr	r2, [r7, #0]
 8006df4:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df8:	6a3a      	ldr	r2, [r7, #32]
 8006dfa:	621a      	str	r2, [r3, #32]
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfe:	3304      	adds	r3, #4
 8006e00:	4618      	mov	r0, r3
 8006e02:	f7fd fea1 	bl	8004b48 <vListInitialiseItem>

        if( uxAutoReload != pdFALSE )
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d008      	beq.n	8006e1e <prvInitialiseNewTimer+0x68>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8006e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e12:	f043 0304 	orr.w	r3, r3, #4
 8006e16:	b2da      	uxtb	r2, r3
 8006e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        traceTIMER_CREATE( pxNewTimer );
    }
 8006e1e:	bf00      	nop
 8006e20:	3718      	adds	r7, #24
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
	...

08006e28 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b08a      	sub	sp, #40	; 0x28
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	60f8      	str	r0, [r7, #12]
 8006e30:	60b9      	str	r1, [r7, #8]
 8006e32:	607a      	str	r2, [r7, #4]
 8006e34:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8006e36:	2300      	movs	r3, #0
 8006e38:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d10a      	bne.n	8006e56 <xTimerGenericCommand+0x2e>
        __asm volatile
 8006e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e44:	f383 8811 	msr	BASEPRI, r3
 8006e48:	f3bf 8f6f 	isb	sy
 8006e4c:	f3bf 8f4f 	dsb	sy
 8006e50:	623b      	str	r3, [r7, #32]
    }
 8006e52:	bf00      	nop
 8006e54:	e7fe      	b.n	8006e54 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8006e56:	4b1a      	ldr	r3, [pc, #104]	; (8006ec0 <xTimerGenericCommand+0x98>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d02a      	beq.n	8006eb4 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	2b05      	cmp	r3, #5
 8006e6e:	dc18      	bgt.n	8006ea2 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006e70:	f7ff fb0e 	bl	8006490 <xTaskGetSchedulerState>
 8006e74:	4603      	mov	r3, r0
 8006e76:	2b02      	cmp	r3, #2
 8006e78:	d109      	bne.n	8006e8e <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006e7a:	4b11      	ldr	r3, [pc, #68]	; (8006ec0 <xTimerGenericCommand+0x98>)
 8006e7c:	6818      	ldr	r0, [r3, #0]
 8006e7e:	f107 0114 	add.w	r1, r7, #20
 8006e82:	2300      	movs	r3, #0
 8006e84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e86:	f7fd ffd1 	bl	8004e2c <xQueueGenericSend>
 8006e8a:	6278      	str	r0, [r7, #36]	; 0x24
 8006e8c:	e012      	b.n	8006eb4 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006e8e:	4b0c      	ldr	r3, [pc, #48]	; (8006ec0 <xTimerGenericCommand+0x98>)
 8006e90:	6818      	ldr	r0, [r3, #0]
 8006e92:	f107 0114 	add.w	r1, r7, #20
 8006e96:	2300      	movs	r3, #0
 8006e98:	2200      	movs	r2, #0
 8006e9a:	f7fd ffc7 	bl	8004e2c <xQueueGenericSend>
 8006e9e:	6278      	str	r0, [r7, #36]	; 0x24
 8006ea0:	e008      	b.n	8006eb4 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006ea2:	4b07      	ldr	r3, [pc, #28]	; (8006ec0 <xTimerGenericCommand+0x98>)
 8006ea4:	6818      	ldr	r0, [r3, #0]
 8006ea6:	f107 0114 	add.w	r1, r7, #20
 8006eaa:	2300      	movs	r3, #0
 8006eac:	683a      	ldr	r2, [r7, #0]
 8006eae:	f7fe f8bb 	bl	8005028 <xQueueGenericSendFromISR>
 8006eb2:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3728      	adds	r7, #40	; 0x28
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop
 8006ec0:	20000240 	.word	0x20000240

08006ec4 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b084      	sub	sp, #16
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	60f8      	str	r0, [r7, #12]
 8006ecc:	60b9      	str	r1, [r7, #8]
 8006ece:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8006ed0:	e008      	b.n	8006ee4 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	699b      	ldr	r3, [r3, #24]
 8006ed6:	68ba      	ldr	r2, [r7, #8]
 8006ed8:	4413      	add	r3, r2
 8006eda:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6a1b      	ldr	r3, [r3, #32]
 8006ee0:	68f8      	ldr	r0, [r7, #12]
 8006ee2:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	699a      	ldr	r2, [r3, #24]
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	18d1      	adds	r1, r2, r3
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	68f8      	ldr	r0, [r7, #12]
 8006ef2:	f000 f8dd 	bl	80070b0 <prvInsertTimerInActiveList>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d1ea      	bne.n	8006ed2 <prvReloadTimer+0xe>
        }
    }
 8006efc:	bf00      	nop
 8006efe:	bf00      	nop
 8006f00:	3710      	adds	r7, #16
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
	...

08006f08 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f12:	4b14      	ldr	r3, [pc, #80]	; (8006f64 <prvProcessExpiredTimer+0x5c>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	68db      	ldr	r3, [r3, #12]
 8006f1a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	3304      	adds	r3, #4
 8006f20:	4618      	mov	r0, r3
 8006f22:	f7fd fe57 	bl	8004bd4 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f2c:	f003 0304 	and.w	r3, r3, #4
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d005      	beq.n	8006f40 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8006f34:	683a      	ldr	r2, [r7, #0]
 8006f36:	6879      	ldr	r1, [r7, #4]
 8006f38:	68f8      	ldr	r0, [r7, #12]
 8006f3a:	f7ff ffc3 	bl	8006ec4 <prvReloadTimer>
 8006f3e:	e008      	b.n	8006f52 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f46:	f023 0301 	bic.w	r3, r3, #1
 8006f4a:	b2da      	uxtb	r2, r3
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	6a1b      	ldr	r3, [r3, #32]
 8006f56:	68f8      	ldr	r0, [r7, #12]
 8006f58:	4798      	blx	r3
    }
 8006f5a:	bf00      	nop
 8006f5c:	3710      	adds	r7, #16
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	bf00      	nop
 8006f64:	20000238 	.word	0x20000238

08006f68 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006f70:	f107 0308 	add.w	r3, r7, #8
 8006f74:	4618      	mov	r0, r3
 8006f76:	f000 f857 	bl	8007028 <prvGetNextExpireTime>
 8006f7a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	4619      	mov	r1, r3
 8006f80:	68f8      	ldr	r0, [r7, #12]
 8006f82:	f000 f803 	bl	8006f8c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8006f86:	f000 f8d5 	bl	8007134 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006f8a:	e7f1      	b.n	8006f70 <prvTimerTask+0x8>

08006f8c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b084      	sub	sp, #16
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8006f96:	f7fe fd75 	bl	8005a84 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006f9a:	f107 0308 	add.w	r3, r7, #8
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f000 f866 	bl	8007070 <prvSampleTimeNow>
 8006fa4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d130      	bne.n	800700e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d10a      	bne.n	8006fc8 <prvProcessTimerOrBlockTask+0x3c>
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d806      	bhi.n	8006fc8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8006fba:	f7fe fd71 	bl	8005aa0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006fbe:	68f9      	ldr	r1, [r7, #12]
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f7ff ffa1 	bl	8006f08 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8006fc6:	e024      	b.n	8007012 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d008      	beq.n	8006fe0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006fce:	4b13      	ldr	r3, [pc, #76]	; (800701c <prvProcessTimerOrBlockTask+0x90>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d101      	bne.n	8006fdc <prvProcessTimerOrBlockTask+0x50>
 8006fd8:	2301      	movs	r3, #1
 8006fda:	e000      	b.n	8006fde <prvProcessTimerOrBlockTask+0x52>
 8006fdc:	2300      	movs	r3, #0
 8006fde:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006fe0:	4b0f      	ldr	r3, [pc, #60]	; (8007020 <prvProcessTimerOrBlockTask+0x94>)
 8006fe2:	6818      	ldr	r0, [r3, #0]
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	1ad3      	subs	r3, r2, r3
 8006fea:	683a      	ldr	r2, [r7, #0]
 8006fec:	4619      	mov	r1, r3
 8006fee:	f7fe fb47 	bl	8005680 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8006ff2:	f7fe fd55 	bl	8005aa0 <xTaskResumeAll>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d10a      	bne.n	8007012 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8006ffc:	4b09      	ldr	r3, [pc, #36]	; (8007024 <prvProcessTimerOrBlockTask+0x98>)
 8006ffe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007002:	601a      	str	r2, [r3, #0]
 8007004:	f3bf 8f4f 	dsb	sy
 8007008:	f3bf 8f6f 	isb	sy
    }
 800700c:	e001      	b.n	8007012 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800700e:	f7fe fd47 	bl	8005aa0 <xTaskResumeAll>
    }
 8007012:	bf00      	nop
 8007014:	3710      	adds	r7, #16
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
 800701a:	bf00      	nop
 800701c:	2000023c 	.word	0x2000023c
 8007020:	20000240 	.word	0x20000240
 8007024:	e000ed04 	.word	0xe000ed04

08007028 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8007028:	b480      	push	{r7}
 800702a:	b085      	sub	sp, #20
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007030:	4b0e      	ldr	r3, [pc, #56]	; (800706c <prvGetNextExpireTime+0x44>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d101      	bne.n	800703e <prvGetNextExpireTime+0x16>
 800703a:	2201      	movs	r2, #1
 800703c:	e000      	b.n	8007040 <prvGetNextExpireTime+0x18>
 800703e:	2200      	movs	r2, #0
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d105      	bne.n	8007058 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800704c:	4b07      	ldr	r3, [pc, #28]	; (800706c <prvGetNextExpireTime+0x44>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	68db      	ldr	r3, [r3, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	60fb      	str	r3, [r7, #12]
 8007056:	e001      	b.n	800705c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8007058:	2300      	movs	r3, #0
 800705a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800705c:	68fb      	ldr	r3, [r7, #12]
    }
 800705e:	4618      	mov	r0, r3
 8007060:	3714      	adds	r7, #20
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr
 800706a:	bf00      	nop
 800706c:	20000238 	.word	0x20000238

08007070 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8007070:	b580      	push	{r7, lr}
 8007072:	b084      	sub	sp, #16
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8007078:	f7fe fe0e 	bl	8005c98 <xTaskGetTickCount>
 800707c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800707e:	4b0b      	ldr	r3, [pc, #44]	; (80070ac <prvSampleTimeNow+0x3c>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	68fa      	ldr	r2, [r7, #12]
 8007084:	429a      	cmp	r2, r3
 8007086:	d205      	bcs.n	8007094 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8007088:	f000 f912 	bl	80072b0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2201      	movs	r2, #1
 8007090:	601a      	str	r2, [r3, #0]
 8007092:	e002      	b.n	800709a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800709a:	4a04      	ldr	r2, [pc, #16]	; (80070ac <prvSampleTimeNow+0x3c>)
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80070a0:	68fb      	ldr	r3, [r7, #12]
    }
 80070a2:	4618      	mov	r0, r3
 80070a4:	3710      	adds	r7, #16
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	bf00      	nop
 80070ac:	20000248 	.word	0x20000248

080070b0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b086      	sub	sp, #24
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	60f8      	str	r0, [r7, #12]
 80070b8:	60b9      	str	r1, [r7, #8]
 80070ba:	607a      	str	r2, [r7, #4]
 80070bc:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80070be:	2300      	movs	r3, #0
 80070c0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	68ba      	ldr	r2, [r7, #8]
 80070c6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	68fa      	ldr	r2, [r7, #12]
 80070cc:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80070ce:	68ba      	ldr	r2, [r7, #8]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d812      	bhi.n	80070fc <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	1ad2      	subs	r2, r2, r3
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	699b      	ldr	r3, [r3, #24]
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d302      	bcc.n	80070ea <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80070e4:	2301      	movs	r3, #1
 80070e6:	617b      	str	r3, [r7, #20]
 80070e8:	e01b      	b.n	8007122 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80070ea:	4b10      	ldr	r3, [pc, #64]	; (800712c <prvInsertTimerInActiveList+0x7c>)
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	3304      	adds	r3, #4
 80070f2:	4619      	mov	r1, r3
 80070f4:	4610      	mov	r0, r2
 80070f6:	f7fd fd34 	bl	8004b62 <vListInsert>
 80070fa:	e012      	b.n	8007122 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	429a      	cmp	r2, r3
 8007102:	d206      	bcs.n	8007112 <prvInsertTimerInActiveList+0x62>
 8007104:	68ba      	ldr	r2, [r7, #8]
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	429a      	cmp	r2, r3
 800710a:	d302      	bcc.n	8007112 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800710c:	2301      	movs	r3, #1
 800710e:	617b      	str	r3, [r7, #20]
 8007110:	e007      	b.n	8007122 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007112:	4b07      	ldr	r3, [pc, #28]	; (8007130 <prvInsertTimerInActiveList+0x80>)
 8007114:	681a      	ldr	r2, [r3, #0]
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	3304      	adds	r3, #4
 800711a:	4619      	mov	r1, r3
 800711c:	4610      	mov	r0, r2
 800711e:	f7fd fd20 	bl	8004b62 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8007122:	697b      	ldr	r3, [r7, #20]
    }
 8007124:	4618      	mov	r0, r3
 8007126:	3718      	adds	r7, #24
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}
 800712c:	2000023c 	.word	0x2000023c
 8007130:	20000238 	.word	0x20000238

08007134 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8007134:	b580      	push	{r7, lr}
 8007136:	b088      	sub	sp, #32
 8007138:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800713a:	e0a6      	b.n	800728a <prvProcessReceivedCommands+0x156>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	2b00      	cmp	r3, #0
 8007140:	f2c0 80a2 	blt.w	8007288 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007148:	69fb      	ldr	r3, [r7, #28]
 800714a:	695b      	ldr	r3, [r3, #20]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d004      	beq.n	800715a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007150:	69fb      	ldr	r3, [r7, #28]
 8007152:	3304      	adds	r3, #4
 8007154:	4618      	mov	r0, r3
 8007156:	f7fd fd3d 	bl	8004bd4 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800715a:	1d3b      	adds	r3, r7, #4
 800715c:	4618      	mov	r0, r3
 800715e:	f7ff ff87 	bl	8007070 <prvSampleTimeNow>
 8007162:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	3b01      	subs	r3, #1
 8007168:	2b08      	cmp	r3, #8
 800716a:	f200 808e 	bhi.w	800728a <prvProcessReceivedCommands+0x156>
 800716e:	a201      	add	r2, pc, #4	; (adr r2, 8007174 <prvProcessReceivedCommands+0x40>)
 8007170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007174:	08007199 	.word	0x08007199
 8007178:	08007199 	.word	0x08007199
 800717c:	08007201 	.word	0x08007201
 8007180:	08007215 	.word	0x08007215
 8007184:	0800725f 	.word	0x0800725f
 8007188:	08007199 	.word	0x08007199
 800718c:	08007199 	.word	0x08007199
 8007190:	08007201 	.word	0x08007201
 8007194:	08007215 	.word	0x08007215
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007198:	69fb      	ldr	r3, [r7, #28]
 800719a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800719e:	f043 0301 	orr.w	r3, r3, #1
 80071a2:	b2da      	uxtb	r2, r3
 80071a4:	69fb      	ldr	r3, [r7, #28]
 80071a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80071aa:	68fa      	ldr	r2, [r7, #12]
 80071ac:	69fb      	ldr	r3, [r7, #28]
 80071ae:	699b      	ldr	r3, [r3, #24]
 80071b0:	18d1      	adds	r1, r2, r3
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	69ba      	ldr	r2, [r7, #24]
 80071b6:	69f8      	ldr	r0, [r7, #28]
 80071b8:	f7ff ff7a 	bl	80070b0 <prvInsertTimerInActiveList>
 80071bc:	4603      	mov	r3, r0
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d063      	beq.n	800728a <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80071c2:	69fb      	ldr	r3, [r7, #28]
 80071c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071c8:	f003 0304 	and.w	r3, r3, #4
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d009      	beq.n	80071e4 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80071d0:	68fa      	ldr	r2, [r7, #12]
 80071d2:	69fb      	ldr	r3, [r7, #28]
 80071d4:	699b      	ldr	r3, [r3, #24]
 80071d6:	4413      	add	r3, r2
 80071d8:	69ba      	ldr	r2, [r7, #24]
 80071da:	4619      	mov	r1, r3
 80071dc:	69f8      	ldr	r0, [r7, #28]
 80071de:	f7ff fe71 	bl	8006ec4 <prvReloadTimer>
 80071e2:	e008      	b.n	80071f6 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80071e4:	69fb      	ldr	r3, [r7, #28]
 80071e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071ea:	f023 0301 	bic.w	r3, r3, #1
 80071ee:	b2da      	uxtb	r2, r3
 80071f0:	69fb      	ldr	r3, [r7, #28]
 80071f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80071f6:	69fb      	ldr	r3, [r7, #28]
 80071f8:	6a1b      	ldr	r3, [r3, #32]
 80071fa:	69f8      	ldr	r0, [r7, #28]
 80071fc:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80071fe:	e044      	b.n	800728a <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007200:	69fb      	ldr	r3, [r7, #28]
 8007202:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007206:	f023 0301 	bic.w	r3, r3, #1
 800720a:	b2da      	uxtb	r2, r3
 800720c:	69fb      	ldr	r3, [r7, #28]
 800720e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8007212:	e03a      	b.n	800728a <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007214:	69fb      	ldr	r3, [r7, #28]
 8007216:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800721a:	f043 0301 	orr.w	r3, r3, #1
 800721e:	b2da      	uxtb	r2, r3
 8007220:	69fb      	ldr	r3, [r7, #28]
 8007222:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007226:	68fa      	ldr	r2, [r7, #12]
 8007228:	69fb      	ldr	r3, [r7, #28]
 800722a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800722c:	69fb      	ldr	r3, [r7, #28]
 800722e:	699b      	ldr	r3, [r3, #24]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d10a      	bne.n	800724a <prvProcessReceivedCommands+0x116>
        __asm volatile
 8007234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007238:	f383 8811 	msr	BASEPRI, r3
 800723c:	f3bf 8f6f 	isb	sy
 8007240:	f3bf 8f4f 	dsb	sy
 8007244:	617b      	str	r3, [r7, #20]
    }
 8007246:	bf00      	nop
 8007248:	e7fe      	b.n	8007248 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800724a:	69fb      	ldr	r3, [r7, #28]
 800724c:	699a      	ldr	r2, [r3, #24]
 800724e:	69bb      	ldr	r3, [r7, #24]
 8007250:	18d1      	adds	r1, r2, r3
 8007252:	69bb      	ldr	r3, [r7, #24]
 8007254:	69ba      	ldr	r2, [r7, #24]
 8007256:	69f8      	ldr	r0, [r7, #28]
 8007258:	f7ff ff2a 	bl	80070b0 <prvInsertTimerInActiveList>
                        break;
 800725c:	e015      	b.n	800728a <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800725e:	69fb      	ldr	r3, [r7, #28]
 8007260:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007264:	f003 0302 	and.w	r3, r3, #2
 8007268:	2b00      	cmp	r3, #0
 800726a:	d103      	bne.n	8007274 <prvProcessReceivedCommands+0x140>
                                {
                                    vPortFree( pxTimer );
 800726c:	69f8      	ldr	r0, [r7, #28]
 800726e:	f000 fc75 	bl	8007b5c <vPortFree>
 8007272:	e00a      	b.n	800728a <prvProcessReceivedCommands+0x156>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007274:	69fb      	ldr	r3, [r7, #28]
 8007276:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800727a:	f023 0301 	bic.w	r3, r3, #1
 800727e:	b2da      	uxtb	r2, r3
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8007286:	e000      	b.n	800728a <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8007288:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800728a:	4b08      	ldr	r3, [pc, #32]	; (80072ac <prvProcessReceivedCommands+0x178>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f107 0108 	add.w	r1, r7, #8
 8007292:	2200      	movs	r2, #0
 8007294:	4618      	mov	r0, r3
 8007296:	f7fd ff71 	bl	800517c <xQueueReceive>
 800729a:	4603      	mov	r3, r0
 800729c:	2b00      	cmp	r3, #0
 800729e:	f47f af4d 	bne.w	800713c <prvProcessReceivedCommands+0x8>
        }
    }
 80072a2:	bf00      	nop
 80072a4:	bf00      	nop
 80072a6:	3720      	adds	r7, #32
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}
 80072ac:	20000240 	.word	0x20000240

080072b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b082      	sub	sp, #8
 80072b4:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80072b6:	e009      	b.n	80072cc <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80072b8:	4b0e      	ldr	r3, [pc, #56]	; (80072f4 <prvSwitchTimerLists+0x44>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	68db      	ldr	r3, [r3, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80072c2:	f04f 31ff 	mov.w	r1, #4294967295
 80072c6:	6838      	ldr	r0, [r7, #0]
 80072c8:	f7ff fe1e 	bl	8006f08 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80072cc:	4b09      	ldr	r3, [pc, #36]	; (80072f4 <prvSwitchTimerLists+0x44>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d1f0      	bne.n	80072b8 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80072d6:	4b07      	ldr	r3, [pc, #28]	; (80072f4 <prvSwitchTimerLists+0x44>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80072dc:	4b06      	ldr	r3, [pc, #24]	; (80072f8 <prvSwitchTimerLists+0x48>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a04      	ldr	r2, [pc, #16]	; (80072f4 <prvSwitchTimerLists+0x44>)
 80072e2:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80072e4:	4a04      	ldr	r2, [pc, #16]	; (80072f8 <prvSwitchTimerLists+0x48>)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6013      	str	r3, [r2, #0]
    }
 80072ea:	bf00      	nop
 80072ec:	3708      	adds	r7, #8
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
 80072f2:	bf00      	nop
 80072f4:	20000238 	.word	0x20000238
 80072f8:	2000023c 	.word	0x2000023c

080072fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80072fc:	b580      	push	{r7, lr}
 80072fe:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8007300:	f000 fa28 	bl	8007754 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8007304:	4b12      	ldr	r3, [pc, #72]	; (8007350 <prvCheckForValidListAndQueue+0x54>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d11d      	bne.n	8007348 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800730c:	4811      	ldr	r0, [pc, #68]	; (8007354 <prvCheckForValidListAndQueue+0x58>)
 800730e:	f7fd fbfb 	bl	8004b08 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8007312:	4811      	ldr	r0, [pc, #68]	; (8007358 <prvCheckForValidListAndQueue+0x5c>)
 8007314:	f7fd fbf8 	bl	8004b08 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8007318:	4b10      	ldr	r3, [pc, #64]	; (800735c <prvCheckForValidListAndQueue+0x60>)
 800731a:	4a0e      	ldr	r2, [pc, #56]	; (8007354 <prvCheckForValidListAndQueue+0x58>)
 800731c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800731e:	4b10      	ldr	r3, [pc, #64]	; (8007360 <prvCheckForValidListAndQueue+0x64>)
 8007320:	4a0d      	ldr	r2, [pc, #52]	; (8007358 <prvCheckForValidListAndQueue+0x5c>)
 8007322:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8007324:	2200      	movs	r2, #0
 8007326:	210c      	movs	r1, #12
 8007328:	200a      	movs	r0, #10
 800732a:	f7fd fd0d 	bl	8004d48 <xQueueGenericCreate>
 800732e:	4603      	mov	r3, r0
 8007330:	4a07      	ldr	r2, [pc, #28]	; (8007350 <prvCheckForValidListAndQueue+0x54>)
 8007332:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8007334:	4b06      	ldr	r3, [pc, #24]	; (8007350 <prvCheckForValidListAndQueue+0x54>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d005      	beq.n	8007348 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800733c:	4b04      	ldr	r3, [pc, #16]	; (8007350 <prvCheckForValidListAndQueue+0x54>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4908      	ldr	r1, [pc, #32]	; (8007364 <prvCheckForValidListAndQueue+0x68>)
 8007342:	4618      	mov	r0, r3
 8007344:	f7fe f94e 	bl	80055e4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8007348:	f000 fa34 	bl	80077b4 <vPortExitCritical>
    }
 800734c:	bf00      	nop
 800734e:	bd80      	pop	{r7, pc}
 8007350:	20000240 	.word	0x20000240
 8007354:	20000210 	.word	0x20000210
 8007358:	20000224 	.word	0x20000224
 800735c:	20000238 	.word	0x20000238
 8007360:	2000023c 	.word	0x2000023c
 8007364:	08009440 	.word	0x08009440

08007368 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

    BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
    {
 8007368:	b580      	push	{r7, lr}
 800736a:	b086      	sub	sp, #24
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        Timer_t * pxTimer = xTimer;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	613b      	str	r3, [r7, #16]

        configASSERT( xTimer );
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d10a      	bne.n	8007390 <xTimerIsTimerActive+0x28>
        __asm volatile
 800737a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800737e:	f383 8811 	msr	BASEPRI, r3
 8007382:	f3bf 8f6f 	isb	sy
 8007386:	f3bf 8f4f 	dsb	sy
 800738a:	60fb      	str	r3, [r7, #12]
    }
 800738c:	bf00      	nop
 800738e:	e7fe      	b.n	800738e <xTimerIsTimerActive+0x26>

        /* Is the timer in the list of active timers? */
        taskENTER_CRITICAL();
 8007390:	f000 f9e0 	bl	8007754 <vPortEnterCritical>
        {
            if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800739a:	f003 0301 	and.w	r3, r3, #1
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d102      	bne.n	80073a8 <xTimerIsTimerActive+0x40>
            {
                xReturn = pdFALSE;
 80073a2:	2300      	movs	r3, #0
 80073a4:	617b      	str	r3, [r7, #20]
 80073a6:	e001      	b.n	80073ac <xTimerIsTimerActive+0x44>
            }
            else
            {
                xReturn = pdTRUE;
 80073a8:	2301      	movs	r3, #1
 80073aa:	617b      	str	r3, [r7, #20]
            }
        }
        taskEXIT_CRITICAL();
 80073ac:	f000 fa02 	bl	80077b4 <vPortExitCritical>

        return xReturn;
 80073b0:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 Can't be pointer to const due to the typedef. */
 80073b2:	4618      	mov	r0, r3
 80073b4:	3718      	adds	r7, #24
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}

080073ba <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 80073ba:	b580      	push	{r7, lr}
 80073bc:	b086      	sub	sp, #24
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        configASSERT( xTimer );
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d10a      	bne.n	80073e2 <pvTimerGetTimerID+0x28>
        __asm volatile
 80073cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d0:	f383 8811 	msr	BASEPRI, r3
 80073d4:	f3bf 8f6f 	isb	sy
 80073d8:	f3bf 8f4f 	dsb	sy
 80073dc:	60fb      	str	r3, [r7, #12]
    }
 80073de:	bf00      	nop
 80073e0:	e7fe      	b.n	80073e0 <pvTimerGetTimerID+0x26>

        taskENTER_CRITICAL();
 80073e2:	f000 f9b7 	bl	8007754 <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	69db      	ldr	r3, [r3, #28]
 80073ea:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 80073ec:	f000 f9e2 	bl	80077b4 <vPortExitCritical>

        return pvReturn;
 80073f0:	693b      	ldr	r3, [r7, #16]
    }
 80073f2:	4618      	mov	r0, r3
 80073f4:	3718      	adds	r7, #24
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
	...

080073fc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80073fc:	b480      	push	{r7}
 80073fe:	b085      	sub	sp, #20
 8007400:	af00      	add	r7, sp, #0
 8007402:	60f8      	str	r0, [r7, #12]
 8007404:	60b9      	str	r1, [r7, #8]
 8007406:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	3b04      	subs	r3, #4
 800740c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007414:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	3b04      	subs	r3, #4
 800741a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	f023 0201 	bic.w	r2, r3, #1
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	3b04      	subs	r3, #4
 800742a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800742c:	4a0c      	ldr	r2, [pc, #48]	; (8007460 <pxPortInitialiseStack+0x64>)
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	3b14      	subs	r3, #20
 8007436:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8007438:	687a      	ldr	r2, [r7, #4]
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	3b04      	subs	r3, #4
 8007442:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f06f 0202 	mvn.w	r2, #2
 800744a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	3b20      	subs	r3, #32
 8007450:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8007452:	68fb      	ldr	r3, [r7, #12]
}
 8007454:	4618      	mov	r0, r3
 8007456:	3714      	adds	r7, #20
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr
 8007460:	08007465 	.word	0x08007465

08007464 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007464:	b480      	push	{r7}
 8007466:	b085      	sub	sp, #20
 8007468:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800746a:	2300      	movs	r3, #0
 800746c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800746e:	4b12      	ldr	r3, [pc, #72]	; (80074b8 <prvTaskExitError+0x54>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007476:	d00a      	beq.n	800748e <prvTaskExitError+0x2a>
        __asm volatile
 8007478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800747c:	f383 8811 	msr	BASEPRI, r3
 8007480:	f3bf 8f6f 	isb	sy
 8007484:	f3bf 8f4f 	dsb	sy
 8007488:	60fb      	str	r3, [r7, #12]
    }
 800748a:	bf00      	nop
 800748c:	e7fe      	b.n	800748c <prvTaskExitError+0x28>
        __asm volatile
 800748e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007492:	f383 8811 	msr	BASEPRI, r3
 8007496:	f3bf 8f6f 	isb	sy
 800749a:	f3bf 8f4f 	dsb	sy
 800749e:	60bb      	str	r3, [r7, #8]
    }
 80074a0:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80074a2:	bf00      	nop
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d0fc      	beq.n	80074a4 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80074aa:	bf00      	nop
 80074ac:	bf00      	nop
 80074ae:	3714      	adds	r7, #20
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr
 80074b8:	20000024 	.word	0x20000024
 80074bc:	00000000 	.word	0x00000000

080074c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80074c0:	4b07      	ldr	r3, [pc, #28]	; (80074e0 <pxCurrentTCBConst2>)
 80074c2:	6819      	ldr	r1, [r3, #0]
 80074c4:	6808      	ldr	r0, [r1, #0]
 80074c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ca:	f380 8809 	msr	PSP, r0
 80074ce:	f3bf 8f6f 	isb	sy
 80074d2:	f04f 0000 	mov.w	r0, #0
 80074d6:	f380 8811 	msr	BASEPRI, r0
 80074da:	4770      	bx	lr
 80074dc:	f3af 8000 	nop.w

080074e0 <pxCurrentTCBConst2>:
 80074e0:	2000010c 	.word	0x2000010c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80074e4:	bf00      	nop
 80074e6:	bf00      	nop

080074e8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80074e8:	4808      	ldr	r0, [pc, #32]	; (800750c <prvPortStartFirstTask+0x24>)
 80074ea:	6800      	ldr	r0, [r0, #0]
 80074ec:	6800      	ldr	r0, [r0, #0]
 80074ee:	f380 8808 	msr	MSP, r0
 80074f2:	f04f 0000 	mov.w	r0, #0
 80074f6:	f380 8814 	msr	CONTROL, r0
 80074fa:	b662      	cpsie	i
 80074fc:	b661      	cpsie	f
 80074fe:	f3bf 8f4f 	dsb	sy
 8007502:	f3bf 8f6f 	isb	sy
 8007506:	df00      	svc	0
 8007508:	bf00      	nop
 800750a:	0000      	.short	0x0000
 800750c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8007510:	bf00      	nop
 8007512:	bf00      	nop

08007514 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b086      	sub	sp, #24
 8007518:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800751a:	4b46      	ldr	r3, [pc, #280]	; (8007634 <xPortStartScheduler+0x120>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a46      	ldr	r2, [pc, #280]	; (8007638 <xPortStartScheduler+0x124>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d10a      	bne.n	800753a <xPortStartScheduler+0x26>
        __asm volatile
 8007524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007528:	f383 8811 	msr	BASEPRI, r3
 800752c:	f3bf 8f6f 	isb	sy
 8007530:	f3bf 8f4f 	dsb	sy
 8007534:	613b      	str	r3, [r7, #16]
    }
 8007536:	bf00      	nop
 8007538:	e7fe      	b.n	8007538 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800753a:	4b3e      	ldr	r3, [pc, #248]	; (8007634 <xPortStartScheduler+0x120>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a3f      	ldr	r2, [pc, #252]	; (800763c <xPortStartScheduler+0x128>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d10a      	bne.n	800755a <xPortStartScheduler+0x46>
        __asm volatile
 8007544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007548:	f383 8811 	msr	BASEPRI, r3
 800754c:	f3bf 8f6f 	isb	sy
 8007550:	f3bf 8f4f 	dsb	sy
 8007554:	60fb      	str	r3, [r7, #12]
    }
 8007556:	bf00      	nop
 8007558:	e7fe      	b.n	8007558 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800755a:	4b39      	ldr	r3, [pc, #228]	; (8007640 <xPortStartScheduler+0x12c>)
 800755c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	b2db      	uxtb	r3, r3
 8007564:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	22ff      	movs	r2, #255	; 0xff
 800756a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	b2db      	uxtb	r3, r3
 8007572:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007574:	78fb      	ldrb	r3, [r7, #3]
 8007576:	b2db      	uxtb	r3, r3
 8007578:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800757c:	b2da      	uxtb	r2, r3
 800757e:	4b31      	ldr	r3, [pc, #196]	; (8007644 <xPortStartScheduler+0x130>)
 8007580:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007582:	4b31      	ldr	r3, [pc, #196]	; (8007648 <xPortStartScheduler+0x134>)
 8007584:	2207      	movs	r2, #7
 8007586:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007588:	e009      	b.n	800759e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800758a:	4b2f      	ldr	r3, [pc, #188]	; (8007648 <xPortStartScheduler+0x134>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	3b01      	subs	r3, #1
 8007590:	4a2d      	ldr	r2, [pc, #180]	; (8007648 <xPortStartScheduler+0x134>)
 8007592:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007594:	78fb      	ldrb	r3, [r7, #3]
 8007596:	b2db      	uxtb	r3, r3
 8007598:	005b      	lsls	r3, r3, #1
 800759a:	b2db      	uxtb	r3, r3
 800759c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800759e:	78fb      	ldrb	r3, [r7, #3]
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075a6:	2b80      	cmp	r3, #128	; 0x80
 80075a8:	d0ef      	beq.n	800758a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80075aa:	4b27      	ldr	r3, [pc, #156]	; (8007648 <xPortStartScheduler+0x134>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f1c3 0307 	rsb	r3, r3, #7
 80075b2:	2b04      	cmp	r3, #4
 80075b4:	d00a      	beq.n	80075cc <xPortStartScheduler+0xb8>
        __asm volatile
 80075b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ba:	f383 8811 	msr	BASEPRI, r3
 80075be:	f3bf 8f6f 	isb	sy
 80075c2:	f3bf 8f4f 	dsb	sy
 80075c6:	60bb      	str	r3, [r7, #8]
    }
 80075c8:	bf00      	nop
 80075ca:	e7fe      	b.n	80075ca <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80075cc:	4b1e      	ldr	r3, [pc, #120]	; (8007648 <xPortStartScheduler+0x134>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	021b      	lsls	r3, r3, #8
 80075d2:	4a1d      	ldr	r2, [pc, #116]	; (8007648 <xPortStartScheduler+0x134>)
 80075d4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80075d6:	4b1c      	ldr	r3, [pc, #112]	; (8007648 <xPortStartScheduler+0x134>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80075de:	4a1a      	ldr	r2, [pc, #104]	; (8007648 <xPortStartScheduler+0x134>)
 80075e0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	b2da      	uxtb	r2, r3
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80075ea:	4b18      	ldr	r3, [pc, #96]	; (800764c <xPortStartScheduler+0x138>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a17      	ldr	r2, [pc, #92]	; (800764c <xPortStartScheduler+0x138>)
 80075f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80075f4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80075f6:	4b15      	ldr	r3, [pc, #84]	; (800764c <xPortStartScheduler+0x138>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a14      	ldr	r2, [pc, #80]	; (800764c <xPortStartScheduler+0x138>)
 80075fc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007600:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8007602:	f000 f95b 	bl	80078bc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8007606:	4b12      	ldr	r3, [pc, #72]	; (8007650 <xPortStartScheduler+0x13c>)
 8007608:	2200      	movs	r2, #0
 800760a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800760c:	f000 f97a 	bl	8007904 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007610:	4b10      	ldr	r3, [pc, #64]	; (8007654 <xPortStartScheduler+0x140>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a0f      	ldr	r2, [pc, #60]	; (8007654 <xPortStartScheduler+0x140>)
 8007616:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800761a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800761c:	f7ff ff64 	bl	80074e8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8007620:	f7fe fc60 	bl	8005ee4 <vTaskSwitchContext>
    prvTaskExitError();
 8007624:	f7ff ff1e 	bl	8007464 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8007628:	2300      	movs	r3, #0
}
 800762a:	4618      	mov	r0, r3
 800762c:	3718      	adds	r7, #24
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
 8007632:	bf00      	nop
 8007634:	e000ed00 	.word	0xe000ed00
 8007638:	410fc271 	.word	0x410fc271
 800763c:	410fc270 	.word	0x410fc270
 8007640:	e000e400 	.word	0xe000e400
 8007644:	2000024c 	.word	0x2000024c
 8007648:	20000250 	.word	0x20000250
 800764c:	e000ed20 	.word	0xe000ed20
 8007650:	20000024 	.word	0x20000024
 8007654:	e000ef34 	.word	0xe000ef34

08007658 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8007658:	b480      	push	{r7}
 800765a:	b087      	sub	sp, #28
 800765c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800765e:	4b37      	ldr	r3, [pc, #220]	; (800773c <vInitPrioGroupValue+0xe4>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a37      	ldr	r2, [pc, #220]	; (8007740 <vInitPrioGroupValue+0xe8>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d10a      	bne.n	800767e <vInitPrioGroupValue+0x26>
        __asm volatile
 8007668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800766c:	f383 8811 	msr	BASEPRI, r3
 8007670:	f3bf 8f6f 	isb	sy
 8007674:	f3bf 8f4f 	dsb	sy
 8007678:	613b      	str	r3, [r7, #16]
    }
 800767a:	bf00      	nop
 800767c:	e7fe      	b.n	800767c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800767e:	4b2f      	ldr	r3, [pc, #188]	; (800773c <vInitPrioGroupValue+0xe4>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a30      	ldr	r2, [pc, #192]	; (8007744 <vInitPrioGroupValue+0xec>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d10a      	bne.n	800769e <vInitPrioGroupValue+0x46>
        __asm volatile
 8007688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800768c:	f383 8811 	msr	BASEPRI, r3
 8007690:	f3bf 8f6f 	isb	sy
 8007694:	f3bf 8f4f 	dsb	sy
 8007698:	60fb      	str	r3, [r7, #12]
    }
 800769a:	bf00      	nop
 800769c:	e7fe      	b.n	800769c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800769e:	4b2a      	ldr	r3, [pc, #168]	; (8007748 <vInitPrioGroupValue+0xf0>)
 80076a0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	781b      	ldrb	r3, [r3, #0]
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	22ff      	movs	r2, #255	; 0xff
 80076ae:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80076b8:	78fb      	ldrb	r3, [r7, #3]
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80076c0:	b2da      	uxtb	r2, r3
 80076c2:	4b22      	ldr	r3, [pc, #136]	; (800774c <vInitPrioGroupValue+0xf4>)
 80076c4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80076c6:	4b22      	ldr	r3, [pc, #136]	; (8007750 <vInitPrioGroupValue+0xf8>)
 80076c8:	2207      	movs	r2, #7
 80076ca:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80076cc:	e009      	b.n	80076e2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80076ce:	4b20      	ldr	r3, [pc, #128]	; (8007750 <vInitPrioGroupValue+0xf8>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	3b01      	subs	r3, #1
 80076d4:	4a1e      	ldr	r2, [pc, #120]	; (8007750 <vInitPrioGroupValue+0xf8>)
 80076d6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80076d8:	78fb      	ldrb	r3, [r7, #3]
 80076da:	b2db      	uxtb	r3, r3
 80076dc:	005b      	lsls	r3, r3, #1
 80076de:	b2db      	uxtb	r3, r3
 80076e0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80076e2:	78fb      	ldrb	r3, [r7, #3]
 80076e4:	b2db      	uxtb	r3, r3
 80076e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076ea:	2b80      	cmp	r3, #128	; 0x80
 80076ec:	d0ef      	beq.n	80076ce <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80076ee:	4b18      	ldr	r3, [pc, #96]	; (8007750 <vInitPrioGroupValue+0xf8>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f1c3 0307 	rsb	r3, r3, #7
 80076f6:	2b04      	cmp	r3, #4
 80076f8:	d00a      	beq.n	8007710 <vInitPrioGroupValue+0xb8>
        __asm volatile
 80076fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076fe:	f383 8811 	msr	BASEPRI, r3
 8007702:	f3bf 8f6f 	isb	sy
 8007706:	f3bf 8f4f 	dsb	sy
 800770a:	60bb      	str	r3, [r7, #8]
    }
 800770c:	bf00      	nop
 800770e:	e7fe      	b.n	800770e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007710:	4b0f      	ldr	r3, [pc, #60]	; (8007750 <vInitPrioGroupValue+0xf8>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	021b      	lsls	r3, r3, #8
 8007716:	4a0e      	ldr	r2, [pc, #56]	; (8007750 <vInitPrioGroupValue+0xf8>)
 8007718:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800771a:	4b0d      	ldr	r3, [pc, #52]	; (8007750 <vInitPrioGroupValue+0xf8>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007722:	4a0b      	ldr	r2, [pc, #44]	; (8007750 <vInitPrioGroupValue+0xf8>)
 8007724:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	b2da      	uxtb	r2, r3
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800772e:	bf00      	nop
 8007730:	371c      	adds	r7, #28
 8007732:	46bd      	mov	sp, r7
 8007734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007738:	4770      	bx	lr
 800773a:	bf00      	nop
 800773c:	e000ed00 	.word	0xe000ed00
 8007740:	410fc271 	.word	0x410fc271
 8007744:	410fc270 	.word	0x410fc270
 8007748:	e000e400 	.word	0xe000e400
 800774c:	2000024c 	.word	0x2000024c
 8007750:	20000250 	.word	0x20000250

08007754 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007754:	b480      	push	{r7}
 8007756:	b083      	sub	sp, #12
 8007758:	af00      	add	r7, sp, #0
        __asm volatile
 800775a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800775e:	f383 8811 	msr	BASEPRI, r3
 8007762:	f3bf 8f6f 	isb	sy
 8007766:	f3bf 8f4f 	dsb	sy
 800776a:	607b      	str	r3, [r7, #4]
    }
 800776c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800776e:	4b0f      	ldr	r3, [pc, #60]	; (80077ac <vPortEnterCritical+0x58>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	3301      	adds	r3, #1
 8007774:	4a0d      	ldr	r2, [pc, #52]	; (80077ac <vPortEnterCritical+0x58>)
 8007776:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8007778:	4b0c      	ldr	r3, [pc, #48]	; (80077ac <vPortEnterCritical+0x58>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	2b01      	cmp	r3, #1
 800777e:	d10f      	bne.n	80077a0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007780:	4b0b      	ldr	r3, [pc, #44]	; (80077b0 <vPortEnterCritical+0x5c>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	b2db      	uxtb	r3, r3
 8007786:	2b00      	cmp	r3, #0
 8007788:	d00a      	beq.n	80077a0 <vPortEnterCritical+0x4c>
        __asm volatile
 800778a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800778e:	f383 8811 	msr	BASEPRI, r3
 8007792:	f3bf 8f6f 	isb	sy
 8007796:	f3bf 8f4f 	dsb	sy
 800779a:	603b      	str	r3, [r7, #0]
    }
 800779c:	bf00      	nop
 800779e:	e7fe      	b.n	800779e <vPortEnterCritical+0x4a>
    }
}
 80077a0:	bf00      	nop
 80077a2:	370c      	adds	r7, #12
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr
 80077ac:	20000024 	.word	0x20000024
 80077b0:	e000ed04 	.word	0xe000ed04

080077b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80077b4:	b480      	push	{r7}
 80077b6:	b083      	sub	sp, #12
 80077b8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80077ba:	4b12      	ldr	r3, [pc, #72]	; (8007804 <vPortExitCritical+0x50>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d10a      	bne.n	80077d8 <vPortExitCritical+0x24>
        __asm volatile
 80077c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c6:	f383 8811 	msr	BASEPRI, r3
 80077ca:	f3bf 8f6f 	isb	sy
 80077ce:	f3bf 8f4f 	dsb	sy
 80077d2:	607b      	str	r3, [r7, #4]
    }
 80077d4:	bf00      	nop
 80077d6:	e7fe      	b.n	80077d6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80077d8:	4b0a      	ldr	r3, [pc, #40]	; (8007804 <vPortExitCritical+0x50>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	3b01      	subs	r3, #1
 80077de:	4a09      	ldr	r2, [pc, #36]	; (8007804 <vPortExitCritical+0x50>)
 80077e0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80077e2:	4b08      	ldr	r3, [pc, #32]	; (8007804 <vPortExitCritical+0x50>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d105      	bne.n	80077f6 <vPortExitCritical+0x42>
 80077ea:	2300      	movs	r3, #0
 80077ec:	603b      	str	r3, [r7, #0]
        __asm volatile
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	f383 8811 	msr	BASEPRI, r3
    }
 80077f4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80077f6:	bf00      	nop
 80077f8:	370c      	adds	r7, #12
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr
 8007802:	bf00      	nop
 8007804:	20000024 	.word	0x20000024
	...

08007810 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8007810:	f3ef 8009 	mrs	r0, PSP
 8007814:	f3bf 8f6f 	isb	sy
 8007818:	4b15      	ldr	r3, [pc, #84]	; (8007870 <pxCurrentTCBConst>)
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	f01e 0f10 	tst.w	lr, #16
 8007820:	bf08      	it	eq
 8007822:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007826:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800782a:	6010      	str	r0, [r2, #0]
 800782c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007830:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007834:	f380 8811 	msr	BASEPRI, r0
 8007838:	f3bf 8f4f 	dsb	sy
 800783c:	f3bf 8f6f 	isb	sy
 8007840:	f7fe fb50 	bl	8005ee4 <vTaskSwitchContext>
 8007844:	f04f 0000 	mov.w	r0, #0
 8007848:	f380 8811 	msr	BASEPRI, r0
 800784c:	bc09      	pop	{r0, r3}
 800784e:	6819      	ldr	r1, [r3, #0]
 8007850:	6808      	ldr	r0, [r1, #0]
 8007852:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007856:	f01e 0f10 	tst.w	lr, #16
 800785a:	bf08      	it	eq
 800785c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007860:	f380 8809 	msr	PSP, r0
 8007864:	f3bf 8f6f 	isb	sy
 8007868:	4770      	bx	lr
 800786a:	bf00      	nop
 800786c:	f3af 8000 	nop.w

08007870 <pxCurrentTCBConst>:
 8007870:	2000010c 	.word	0x2000010c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8007874:	bf00      	nop
 8007876:	bf00      	nop

08007878 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b082      	sub	sp, #8
 800787c:	af00      	add	r7, sp, #0
        __asm volatile
 800787e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007882:	f383 8811 	msr	BASEPRI, r3
 8007886:	f3bf 8f6f 	isb	sy
 800788a:	f3bf 8f4f 	dsb	sy
 800788e:	607b      	str	r3, [r7, #4]
    }
 8007890:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8007892:	f7fe fa11 	bl	8005cb8 <xTaskIncrementTick>
 8007896:	4603      	mov	r3, r0
 8007898:	2b00      	cmp	r3, #0
 800789a:	d003      	beq.n	80078a4 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800789c:	4b06      	ldr	r3, [pc, #24]	; (80078b8 <SysTick_Handler+0x40>)
 800789e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078a2:	601a      	str	r2, [r3, #0]
 80078a4:	2300      	movs	r3, #0
 80078a6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	f383 8811 	msr	BASEPRI, r3
    }
 80078ae:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 80078b0:	bf00      	nop
 80078b2:	3708      	adds	r7, #8
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}
 80078b8:	e000ed04 	.word	0xe000ed04

080078bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80078bc:	b480      	push	{r7}
 80078be:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80078c0:	4b0b      	ldr	r3, [pc, #44]	; (80078f0 <vPortSetupTimerInterrupt+0x34>)
 80078c2:	2200      	movs	r2, #0
 80078c4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80078c6:	4b0b      	ldr	r3, [pc, #44]	; (80078f4 <vPortSetupTimerInterrupt+0x38>)
 80078c8:	2200      	movs	r2, #0
 80078ca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80078cc:	4b0a      	ldr	r3, [pc, #40]	; (80078f8 <vPortSetupTimerInterrupt+0x3c>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a0a      	ldr	r2, [pc, #40]	; (80078fc <vPortSetupTimerInterrupt+0x40>)
 80078d2:	fba2 2303 	umull	r2, r3, r2, r3
 80078d6:	099b      	lsrs	r3, r3, #6
 80078d8:	4a09      	ldr	r2, [pc, #36]	; (8007900 <vPortSetupTimerInterrupt+0x44>)
 80078da:	3b01      	subs	r3, #1
 80078dc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80078de:	4b04      	ldr	r3, [pc, #16]	; (80078f0 <vPortSetupTimerInterrupt+0x34>)
 80078e0:	2207      	movs	r2, #7
 80078e2:	601a      	str	r2, [r3, #0]
}
 80078e4:	bf00      	nop
 80078e6:	46bd      	mov	sp, r7
 80078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ec:	4770      	bx	lr
 80078ee:	bf00      	nop
 80078f0:	e000e010 	.word	0xe000e010
 80078f4:	e000e018 	.word	0xe000e018
 80078f8:	20000010 	.word	0x20000010
 80078fc:	10624dd3 	.word	0x10624dd3
 8007900:	e000e014 	.word	0xe000e014

08007904 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8007904:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007914 <vPortEnableVFP+0x10>
 8007908:	6801      	ldr	r1, [r0, #0]
 800790a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800790e:	6001      	str	r1, [r0, #0]
 8007910:	4770      	bx	lr
 8007912:	0000      	.short	0x0000
 8007914:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8007918:	bf00      	nop
 800791a:	bf00      	nop

0800791c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800791c:	b480      	push	{r7}
 800791e:	b085      	sub	sp, #20
 8007920:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8007922:	f3ef 8305 	mrs	r3, IPSR
 8007926:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2b0f      	cmp	r3, #15
 800792c:	d914      	bls.n	8007958 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800792e:	4a17      	ldr	r2, [pc, #92]	; (800798c <vPortValidateInterruptPriority+0x70>)
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	4413      	add	r3, r2
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007938:	4b15      	ldr	r3, [pc, #84]	; (8007990 <vPortValidateInterruptPriority+0x74>)
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	7afa      	ldrb	r2, [r7, #11]
 800793e:	429a      	cmp	r2, r3
 8007940:	d20a      	bcs.n	8007958 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8007942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007946:	f383 8811 	msr	BASEPRI, r3
 800794a:	f3bf 8f6f 	isb	sy
 800794e:	f3bf 8f4f 	dsb	sy
 8007952:	607b      	str	r3, [r7, #4]
    }
 8007954:	bf00      	nop
 8007956:	e7fe      	b.n	8007956 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007958:	4b0e      	ldr	r3, [pc, #56]	; (8007994 <vPortValidateInterruptPriority+0x78>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007960:	4b0d      	ldr	r3, [pc, #52]	; (8007998 <vPortValidateInterruptPriority+0x7c>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	429a      	cmp	r2, r3
 8007966:	d90a      	bls.n	800797e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8007968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800796c:	f383 8811 	msr	BASEPRI, r3
 8007970:	f3bf 8f6f 	isb	sy
 8007974:	f3bf 8f4f 	dsb	sy
 8007978:	603b      	str	r3, [r7, #0]
    }
 800797a:	bf00      	nop
 800797c:	e7fe      	b.n	800797c <vPortValidateInterruptPriority+0x60>
    }
 800797e:	bf00      	nop
 8007980:	3714      	adds	r7, #20
 8007982:	46bd      	mov	sp, r7
 8007984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007988:	4770      	bx	lr
 800798a:	bf00      	nop
 800798c:	e000e3f0 	.word	0xe000e3f0
 8007990:	2000024c 	.word	0x2000024c
 8007994:	e000ed0c 	.word	0xe000ed0c
 8007998:	20000250 	.word	0x20000250

0800799c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b08a      	sub	sp, #40	; 0x28
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80079a4:	2300      	movs	r3, #0
 80079a6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80079a8:	f7fe f86c 	bl	8005a84 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80079ac:	4b65      	ldr	r3, [pc, #404]	; (8007b44 <pvPortMalloc+0x1a8>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d101      	bne.n	80079b8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80079b4:	f000 f934 	bl	8007c20 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80079b8:	4b63      	ldr	r3, [pc, #396]	; (8007b48 <pvPortMalloc+0x1ac>)
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	4013      	ands	r3, r2
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	f040 80a7 	bne.w	8007b14 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d02d      	beq.n	8007a28 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80079cc:	2208      	movs	r2, #8
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 80079d2:	687a      	ldr	r2, [r7, #4]
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d227      	bcs.n	8007a28 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80079d8:	2208      	movs	r2, #8
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	4413      	add	r3, r2
 80079de:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f003 0307 	and.w	r3, r3, #7
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d021      	beq.n	8007a2e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f023 0307 	bic.w	r3, r3, #7
 80079f0:	3308      	adds	r3, #8
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d214      	bcs.n	8007a22 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f023 0307 	bic.w	r3, r3, #7
 80079fe:	3308      	adds	r3, #8
 8007a00:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f003 0307 	and.w	r3, r3, #7
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d010      	beq.n	8007a2e <pvPortMalloc+0x92>
        __asm volatile
 8007a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a10:	f383 8811 	msr	BASEPRI, r3
 8007a14:	f3bf 8f6f 	isb	sy
 8007a18:	f3bf 8f4f 	dsb	sy
 8007a1c:	617b      	str	r3, [r7, #20]
    }
 8007a1e:	bf00      	nop
 8007a20:	e7fe      	b.n	8007a20 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8007a22:	2300      	movs	r3, #0
 8007a24:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007a26:	e002      	b.n	8007a2e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	607b      	str	r3, [r7, #4]
 8007a2c:	e000      	b.n	8007a30 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007a2e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d06e      	beq.n	8007b14 <pvPortMalloc+0x178>
 8007a36:	4b45      	ldr	r3, [pc, #276]	; (8007b4c <pvPortMalloc+0x1b0>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	687a      	ldr	r2, [r7, #4]
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d869      	bhi.n	8007b14 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8007a40:	4b43      	ldr	r3, [pc, #268]	; (8007b50 <pvPortMalloc+0x1b4>)
 8007a42:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8007a44:	4b42      	ldr	r3, [pc, #264]	; (8007b50 <pvPortMalloc+0x1b4>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007a4a:	e004      	b.n	8007a56 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8007a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8007a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	687a      	ldr	r2, [r7, #4]
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d903      	bls.n	8007a68 <pvPortMalloc+0xcc>
 8007a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d1f1      	bne.n	8007a4c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8007a68:	4b36      	ldr	r3, [pc, #216]	; (8007b44 <pvPortMalloc+0x1a8>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	d050      	beq.n	8007b14 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007a72:	6a3b      	ldr	r3, [r7, #32]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	2208      	movs	r2, #8
 8007a78:	4413      	add	r3, r2
 8007a7a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	6a3b      	ldr	r3, [r7, #32]
 8007a82:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a86:	685a      	ldr	r2, [r3, #4]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	1ad2      	subs	r2, r2, r3
 8007a8c:	2308      	movs	r3, #8
 8007a8e:	005b      	lsls	r3, r3, #1
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d91f      	bls.n	8007ad4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	4413      	add	r3, r2
 8007a9a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a9c:	69bb      	ldr	r3, [r7, #24]
 8007a9e:	f003 0307 	and.w	r3, r3, #7
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d00a      	beq.n	8007abc <pvPortMalloc+0x120>
        __asm volatile
 8007aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aaa:	f383 8811 	msr	BASEPRI, r3
 8007aae:	f3bf 8f6f 	isb	sy
 8007ab2:	f3bf 8f4f 	dsb	sy
 8007ab6:	613b      	str	r3, [r7, #16]
    }
 8007ab8:	bf00      	nop
 8007aba:	e7fe      	b.n	8007aba <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007abe:	685a      	ldr	r2, [r3, #4]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	1ad2      	subs	r2, r2, r3
 8007ac4:	69bb      	ldr	r3, [r7, #24]
 8007ac6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8007ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aca:	687a      	ldr	r2, [r7, #4]
 8007acc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007ace:	69b8      	ldr	r0, [r7, #24]
 8007ad0:	f000 f908 	bl	8007ce4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007ad4:	4b1d      	ldr	r3, [pc, #116]	; (8007b4c <pvPortMalloc+0x1b0>)
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	1ad3      	subs	r3, r2, r3
 8007ade:	4a1b      	ldr	r2, [pc, #108]	; (8007b4c <pvPortMalloc+0x1b0>)
 8007ae0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007ae2:	4b1a      	ldr	r3, [pc, #104]	; (8007b4c <pvPortMalloc+0x1b0>)
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	4b1b      	ldr	r3, [pc, #108]	; (8007b54 <pvPortMalloc+0x1b8>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d203      	bcs.n	8007af6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007aee:	4b17      	ldr	r3, [pc, #92]	; (8007b4c <pvPortMalloc+0x1b0>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a18      	ldr	r2, [pc, #96]	; (8007b54 <pvPortMalloc+0x1b8>)
 8007af4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af8:	685a      	ldr	r2, [r3, #4]
 8007afa:	4b13      	ldr	r3, [pc, #76]	; (8007b48 <pvPortMalloc+0x1ac>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	431a      	orrs	r2, r3
 8007b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b02:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8007b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b06:	2200      	movs	r2, #0
 8007b08:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8007b0a:	4b13      	ldr	r3, [pc, #76]	; (8007b58 <pvPortMalloc+0x1bc>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	3301      	adds	r3, #1
 8007b10:	4a11      	ldr	r2, [pc, #68]	; (8007b58 <pvPortMalloc+0x1bc>)
 8007b12:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8007b14:	f7fd ffc4 	bl	8005aa0 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b18:	69fb      	ldr	r3, [r7, #28]
 8007b1a:	f003 0307 	and.w	r3, r3, #7
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d00a      	beq.n	8007b38 <pvPortMalloc+0x19c>
        __asm volatile
 8007b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b26:	f383 8811 	msr	BASEPRI, r3
 8007b2a:	f3bf 8f6f 	isb	sy
 8007b2e:	f3bf 8f4f 	dsb	sy
 8007b32:	60fb      	str	r3, [r7, #12]
    }
 8007b34:	bf00      	nop
 8007b36:	e7fe      	b.n	8007b36 <pvPortMalloc+0x19a>
    return pvReturn;
 8007b38:	69fb      	ldr	r3, [r7, #28]
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3728      	adds	r7, #40	; 0x28
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}
 8007b42:	bf00      	nop
 8007b44:	20012e5c 	.word	0x20012e5c
 8007b48:	20012e70 	.word	0x20012e70
 8007b4c:	20012e60 	.word	0x20012e60
 8007b50:	20012e54 	.word	0x20012e54
 8007b54:	20012e64 	.word	0x20012e64
 8007b58:	20012e68 	.word	0x20012e68

08007b5c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b086      	sub	sp, #24
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d04d      	beq.n	8007c0a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8007b6e:	2308      	movs	r3, #8
 8007b70:	425b      	negs	r3, r3
 8007b72:	697a      	ldr	r2, [r7, #20]
 8007b74:	4413      	add	r3, r2
 8007b76:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	685a      	ldr	r2, [r3, #4]
 8007b80:	4b24      	ldr	r3, [pc, #144]	; (8007c14 <vPortFree+0xb8>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4013      	ands	r3, r2
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d10a      	bne.n	8007ba0 <vPortFree+0x44>
        __asm volatile
 8007b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b8e:	f383 8811 	msr	BASEPRI, r3
 8007b92:	f3bf 8f6f 	isb	sy
 8007b96:	f3bf 8f4f 	dsb	sy
 8007b9a:	60fb      	str	r3, [r7, #12]
    }
 8007b9c:	bf00      	nop
 8007b9e:	e7fe      	b.n	8007b9e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d00a      	beq.n	8007bbe <vPortFree+0x62>
        __asm volatile
 8007ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bac:	f383 8811 	msr	BASEPRI, r3
 8007bb0:	f3bf 8f6f 	isb	sy
 8007bb4:	f3bf 8f4f 	dsb	sy
 8007bb8:	60bb      	str	r3, [r7, #8]
    }
 8007bba:	bf00      	nop
 8007bbc:	e7fe      	b.n	8007bbc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	685a      	ldr	r2, [r3, #4]
 8007bc2:	4b14      	ldr	r3, [pc, #80]	; (8007c14 <vPortFree+0xb8>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4013      	ands	r3, r2
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d01e      	beq.n	8007c0a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d11a      	bne.n	8007c0a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	685a      	ldr	r2, [r3, #4]
 8007bd8:	4b0e      	ldr	r3, [pc, #56]	; (8007c14 <vPortFree+0xb8>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	43db      	mvns	r3, r3
 8007bde:	401a      	ands	r2, r3
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8007be4:	f7fd ff4e 	bl	8005a84 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	685a      	ldr	r2, [r3, #4]
 8007bec:	4b0a      	ldr	r3, [pc, #40]	; (8007c18 <vPortFree+0xbc>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4413      	add	r3, r2
 8007bf2:	4a09      	ldr	r2, [pc, #36]	; (8007c18 <vPortFree+0xbc>)
 8007bf4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007bf6:	6938      	ldr	r0, [r7, #16]
 8007bf8:	f000 f874 	bl	8007ce4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8007bfc:	4b07      	ldr	r3, [pc, #28]	; (8007c1c <vPortFree+0xc0>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	3301      	adds	r3, #1
 8007c02:	4a06      	ldr	r2, [pc, #24]	; (8007c1c <vPortFree+0xc0>)
 8007c04:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8007c06:	f7fd ff4b 	bl	8005aa0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8007c0a:	bf00      	nop
 8007c0c:	3718      	adds	r7, #24
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}
 8007c12:	bf00      	nop
 8007c14:	20012e70 	.word	0x20012e70
 8007c18:	20012e60 	.word	0x20012e60
 8007c1c:	20012e6c 	.word	0x20012e6c

08007c20 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8007c20:	b480      	push	{r7}
 8007c22:	b085      	sub	sp, #20
 8007c24:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007c26:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8007c2a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8007c2c:	4b27      	ldr	r3, [pc, #156]	; (8007ccc <prvHeapInit+0xac>)
 8007c2e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f003 0307 	and.w	r3, r3, #7
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d00c      	beq.n	8007c54 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	3307      	adds	r3, #7
 8007c3e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f023 0307 	bic.w	r3, r3, #7
 8007c46:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007c48:	68ba      	ldr	r2, [r7, #8]
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	1ad3      	subs	r3, r2, r3
 8007c4e:	4a1f      	ldr	r2, [pc, #124]	; (8007ccc <prvHeapInit+0xac>)
 8007c50:	4413      	add	r3, r2
 8007c52:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007c58:	4a1d      	ldr	r2, [pc, #116]	; (8007cd0 <prvHeapInit+0xb0>)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8007c5e:	4b1c      	ldr	r3, [pc, #112]	; (8007cd0 <prvHeapInit+0xb0>)
 8007c60:	2200      	movs	r2, #0
 8007c62:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	68ba      	ldr	r2, [r7, #8]
 8007c68:	4413      	add	r3, r2
 8007c6a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8007c6c:	2208      	movs	r2, #8
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	1a9b      	subs	r3, r3, r2
 8007c72:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f023 0307 	bic.w	r3, r3, #7
 8007c7a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	4a15      	ldr	r2, [pc, #84]	; (8007cd4 <prvHeapInit+0xb4>)
 8007c80:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8007c82:	4b14      	ldr	r3, [pc, #80]	; (8007cd4 <prvHeapInit+0xb4>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	2200      	movs	r2, #0
 8007c88:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8007c8a:	4b12      	ldr	r3, [pc, #72]	; (8007cd4 <prvHeapInit+0xb4>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	68fa      	ldr	r2, [r7, #12]
 8007c9a:	1ad2      	subs	r2, r2, r3
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007ca0:	4b0c      	ldr	r3, [pc, #48]	; (8007cd4 <prvHeapInit+0xb4>)
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	4a0a      	ldr	r2, [pc, #40]	; (8007cd8 <prvHeapInit+0xb8>)
 8007cae:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	4a09      	ldr	r2, [pc, #36]	; (8007cdc <prvHeapInit+0xbc>)
 8007cb6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007cb8:	4b09      	ldr	r3, [pc, #36]	; (8007ce0 <prvHeapInit+0xc0>)
 8007cba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007cbe:	601a      	str	r2, [r3, #0]
}
 8007cc0:	bf00      	nop
 8007cc2:	3714      	adds	r7, #20
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr
 8007ccc:	20000254 	.word	0x20000254
 8007cd0:	20012e54 	.word	0x20012e54
 8007cd4:	20012e5c 	.word	0x20012e5c
 8007cd8:	20012e64 	.word	0x20012e64
 8007cdc:	20012e60 	.word	0x20012e60
 8007ce0:	20012e70 	.word	0x20012e70

08007ce4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b085      	sub	sp, #20
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007cec:	4b28      	ldr	r3, [pc, #160]	; (8007d90 <prvInsertBlockIntoFreeList+0xac>)
 8007cee:	60fb      	str	r3, [r7, #12]
 8007cf0:	e002      	b.n	8007cf8 <prvInsertBlockIntoFreeList+0x14>
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	60fb      	str	r3, [r7, #12]
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d8f7      	bhi.n	8007cf2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	68ba      	ldr	r2, [r7, #8]
 8007d0c:	4413      	add	r3, r2
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	429a      	cmp	r2, r3
 8007d12:	d108      	bne.n	8007d26 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	685a      	ldr	r2, [r3, #4]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	441a      	add	r2, r3
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	68ba      	ldr	r2, [r7, #8]
 8007d30:	441a      	add	r2, r3
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d118      	bne.n	8007d6c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681a      	ldr	r2, [r3, #0]
 8007d3e:	4b15      	ldr	r3, [pc, #84]	; (8007d94 <prvInsertBlockIntoFreeList+0xb0>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	429a      	cmp	r2, r3
 8007d44:	d00d      	beq.n	8007d62 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	685a      	ldr	r2, [r3, #4]
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	441a      	add	r2, r3
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	681a      	ldr	r2, [r3, #0]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	601a      	str	r2, [r3, #0]
 8007d60:	e008      	b.n	8007d74 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007d62:	4b0c      	ldr	r3, [pc, #48]	; (8007d94 <prvInsertBlockIntoFreeList+0xb0>)
 8007d64:	681a      	ldr	r2, [r3, #0]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	601a      	str	r2, [r3, #0]
 8007d6a:	e003      	b.n	8007d74 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8007d74:	68fa      	ldr	r2, [r7, #12]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d002      	beq.n	8007d82 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007d82:	bf00      	nop
 8007d84:	3714      	adds	r7, #20
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr
 8007d8e:	bf00      	nop
 8007d90:	20012e54 	.word	0x20012e54
 8007d94:	20012e5c 	.word	0x20012e5c

08007d98 <__errno>:
 8007d98:	4b01      	ldr	r3, [pc, #4]	; (8007da0 <__errno+0x8>)
 8007d9a:	6818      	ldr	r0, [r3, #0]
 8007d9c:	4770      	bx	lr
 8007d9e:	bf00      	nop
 8007da0:	20000028 	.word	0x20000028

08007da4 <__libc_init_array>:
 8007da4:	b570      	push	{r4, r5, r6, lr}
 8007da6:	4d0d      	ldr	r5, [pc, #52]	; (8007ddc <__libc_init_array+0x38>)
 8007da8:	4c0d      	ldr	r4, [pc, #52]	; (8007de0 <__libc_init_array+0x3c>)
 8007daa:	1b64      	subs	r4, r4, r5
 8007dac:	10a4      	asrs	r4, r4, #2
 8007dae:	2600      	movs	r6, #0
 8007db0:	42a6      	cmp	r6, r4
 8007db2:	d109      	bne.n	8007dc8 <__libc_init_array+0x24>
 8007db4:	4d0b      	ldr	r5, [pc, #44]	; (8007de4 <__libc_init_array+0x40>)
 8007db6:	4c0c      	ldr	r4, [pc, #48]	; (8007de8 <__libc_init_array+0x44>)
 8007db8:	f001 f948 	bl	800904c <_init>
 8007dbc:	1b64      	subs	r4, r4, r5
 8007dbe:	10a4      	asrs	r4, r4, #2
 8007dc0:	2600      	movs	r6, #0
 8007dc2:	42a6      	cmp	r6, r4
 8007dc4:	d105      	bne.n	8007dd2 <__libc_init_array+0x2e>
 8007dc6:	bd70      	pop	{r4, r5, r6, pc}
 8007dc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dcc:	4798      	blx	r3
 8007dce:	3601      	adds	r6, #1
 8007dd0:	e7ee      	b.n	8007db0 <__libc_init_array+0xc>
 8007dd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dd6:	4798      	blx	r3
 8007dd8:	3601      	adds	r6, #1
 8007dda:	e7f2      	b.n	8007dc2 <__libc_init_array+0x1e>
 8007ddc:	08009500 	.word	0x08009500
 8007de0:	08009500 	.word	0x08009500
 8007de4:	08009500 	.word	0x08009500
 8007de8:	08009504 	.word	0x08009504

08007dec <memcpy>:
 8007dec:	440a      	add	r2, r1
 8007dee:	4291      	cmp	r1, r2
 8007df0:	f100 33ff 	add.w	r3, r0, #4294967295
 8007df4:	d100      	bne.n	8007df8 <memcpy+0xc>
 8007df6:	4770      	bx	lr
 8007df8:	b510      	push	{r4, lr}
 8007dfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007dfe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e02:	4291      	cmp	r1, r2
 8007e04:	d1f9      	bne.n	8007dfa <memcpy+0xe>
 8007e06:	bd10      	pop	{r4, pc}

08007e08 <memset>:
 8007e08:	4402      	add	r2, r0
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d100      	bne.n	8007e12 <memset+0xa>
 8007e10:	4770      	bx	lr
 8007e12:	f803 1b01 	strb.w	r1, [r3], #1
 8007e16:	e7f9      	b.n	8007e0c <memset+0x4>

08007e18 <iprintf>:
 8007e18:	b40f      	push	{r0, r1, r2, r3}
 8007e1a:	4b0a      	ldr	r3, [pc, #40]	; (8007e44 <iprintf+0x2c>)
 8007e1c:	b513      	push	{r0, r1, r4, lr}
 8007e1e:	681c      	ldr	r4, [r3, #0]
 8007e20:	b124      	cbz	r4, 8007e2c <iprintf+0x14>
 8007e22:	69a3      	ldr	r3, [r4, #24]
 8007e24:	b913      	cbnz	r3, 8007e2c <iprintf+0x14>
 8007e26:	4620      	mov	r0, r4
 8007e28:	f000 f886 	bl	8007f38 <__sinit>
 8007e2c:	ab05      	add	r3, sp, #20
 8007e2e:	9a04      	ldr	r2, [sp, #16]
 8007e30:	68a1      	ldr	r1, [r4, #8]
 8007e32:	9301      	str	r3, [sp, #4]
 8007e34:	4620      	mov	r0, r4
 8007e36:	f000 faff 	bl	8008438 <_vfiprintf_r>
 8007e3a:	b002      	add	sp, #8
 8007e3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e40:	b004      	add	sp, #16
 8007e42:	4770      	bx	lr
 8007e44:	20000028 	.word	0x20000028

08007e48 <siprintf>:
 8007e48:	b40e      	push	{r1, r2, r3}
 8007e4a:	b500      	push	{lr}
 8007e4c:	b09c      	sub	sp, #112	; 0x70
 8007e4e:	ab1d      	add	r3, sp, #116	; 0x74
 8007e50:	9002      	str	r0, [sp, #8]
 8007e52:	9006      	str	r0, [sp, #24]
 8007e54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007e58:	4809      	ldr	r0, [pc, #36]	; (8007e80 <siprintf+0x38>)
 8007e5a:	9107      	str	r1, [sp, #28]
 8007e5c:	9104      	str	r1, [sp, #16]
 8007e5e:	4909      	ldr	r1, [pc, #36]	; (8007e84 <siprintf+0x3c>)
 8007e60:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e64:	9105      	str	r1, [sp, #20]
 8007e66:	6800      	ldr	r0, [r0, #0]
 8007e68:	9301      	str	r3, [sp, #4]
 8007e6a:	a902      	add	r1, sp, #8
 8007e6c:	f000 f9ba 	bl	80081e4 <_svfiprintf_r>
 8007e70:	9b02      	ldr	r3, [sp, #8]
 8007e72:	2200      	movs	r2, #0
 8007e74:	701a      	strb	r2, [r3, #0]
 8007e76:	b01c      	add	sp, #112	; 0x70
 8007e78:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e7c:	b003      	add	sp, #12
 8007e7e:	4770      	bx	lr
 8007e80:	20000028 	.word	0x20000028
 8007e84:	ffff0208 	.word	0xffff0208

08007e88 <std>:
 8007e88:	2300      	movs	r3, #0
 8007e8a:	b510      	push	{r4, lr}
 8007e8c:	4604      	mov	r4, r0
 8007e8e:	e9c0 3300 	strd	r3, r3, [r0]
 8007e92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e96:	6083      	str	r3, [r0, #8]
 8007e98:	8181      	strh	r1, [r0, #12]
 8007e9a:	6643      	str	r3, [r0, #100]	; 0x64
 8007e9c:	81c2      	strh	r2, [r0, #14]
 8007e9e:	6183      	str	r3, [r0, #24]
 8007ea0:	4619      	mov	r1, r3
 8007ea2:	2208      	movs	r2, #8
 8007ea4:	305c      	adds	r0, #92	; 0x5c
 8007ea6:	f7ff ffaf 	bl	8007e08 <memset>
 8007eaa:	4b05      	ldr	r3, [pc, #20]	; (8007ec0 <std+0x38>)
 8007eac:	6263      	str	r3, [r4, #36]	; 0x24
 8007eae:	4b05      	ldr	r3, [pc, #20]	; (8007ec4 <std+0x3c>)
 8007eb0:	62a3      	str	r3, [r4, #40]	; 0x28
 8007eb2:	4b05      	ldr	r3, [pc, #20]	; (8007ec8 <std+0x40>)
 8007eb4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007eb6:	4b05      	ldr	r3, [pc, #20]	; (8007ecc <std+0x44>)
 8007eb8:	6224      	str	r4, [r4, #32]
 8007eba:	6323      	str	r3, [r4, #48]	; 0x30
 8007ebc:	bd10      	pop	{r4, pc}
 8007ebe:	bf00      	nop
 8007ec0:	080089e1 	.word	0x080089e1
 8007ec4:	08008a03 	.word	0x08008a03
 8007ec8:	08008a3b 	.word	0x08008a3b
 8007ecc:	08008a5f 	.word	0x08008a5f

08007ed0 <_cleanup_r>:
 8007ed0:	4901      	ldr	r1, [pc, #4]	; (8007ed8 <_cleanup_r+0x8>)
 8007ed2:	f000 b8af 	b.w	8008034 <_fwalk_reent>
 8007ed6:	bf00      	nop
 8007ed8:	08008d39 	.word	0x08008d39

08007edc <__sfmoreglue>:
 8007edc:	b570      	push	{r4, r5, r6, lr}
 8007ede:	1e4a      	subs	r2, r1, #1
 8007ee0:	2568      	movs	r5, #104	; 0x68
 8007ee2:	4355      	muls	r5, r2
 8007ee4:	460e      	mov	r6, r1
 8007ee6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007eea:	f000 f8c5 	bl	8008078 <_malloc_r>
 8007eee:	4604      	mov	r4, r0
 8007ef0:	b140      	cbz	r0, 8007f04 <__sfmoreglue+0x28>
 8007ef2:	2100      	movs	r1, #0
 8007ef4:	e9c0 1600 	strd	r1, r6, [r0]
 8007ef8:	300c      	adds	r0, #12
 8007efa:	60a0      	str	r0, [r4, #8]
 8007efc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007f00:	f7ff ff82 	bl	8007e08 <memset>
 8007f04:	4620      	mov	r0, r4
 8007f06:	bd70      	pop	{r4, r5, r6, pc}

08007f08 <__sfp_lock_acquire>:
 8007f08:	4801      	ldr	r0, [pc, #4]	; (8007f10 <__sfp_lock_acquire+0x8>)
 8007f0a:	f000 b8b3 	b.w	8008074 <__retarget_lock_acquire_recursive>
 8007f0e:	bf00      	nop
 8007f10:	20012fa8 	.word	0x20012fa8

08007f14 <__sfp_lock_release>:
 8007f14:	4801      	ldr	r0, [pc, #4]	; (8007f1c <__sfp_lock_release+0x8>)
 8007f16:	f000 b8ae 	b.w	8008076 <__retarget_lock_release_recursive>
 8007f1a:	bf00      	nop
 8007f1c:	20012fa8 	.word	0x20012fa8

08007f20 <__sinit_lock_acquire>:
 8007f20:	4801      	ldr	r0, [pc, #4]	; (8007f28 <__sinit_lock_acquire+0x8>)
 8007f22:	f000 b8a7 	b.w	8008074 <__retarget_lock_acquire_recursive>
 8007f26:	bf00      	nop
 8007f28:	20012fa3 	.word	0x20012fa3

08007f2c <__sinit_lock_release>:
 8007f2c:	4801      	ldr	r0, [pc, #4]	; (8007f34 <__sinit_lock_release+0x8>)
 8007f2e:	f000 b8a2 	b.w	8008076 <__retarget_lock_release_recursive>
 8007f32:	bf00      	nop
 8007f34:	20012fa3 	.word	0x20012fa3

08007f38 <__sinit>:
 8007f38:	b510      	push	{r4, lr}
 8007f3a:	4604      	mov	r4, r0
 8007f3c:	f7ff fff0 	bl	8007f20 <__sinit_lock_acquire>
 8007f40:	69a3      	ldr	r3, [r4, #24]
 8007f42:	b11b      	cbz	r3, 8007f4c <__sinit+0x14>
 8007f44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f48:	f7ff bff0 	b.w	8007f2c <__sinit_lock_release>
 8007f4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007f50:	6523      	str	r3, [r4, #80]	; 0x50
 8007f52:	4b13      	ldr	r3, [pc, #76]	; (8007fa0 <__sinit+0x68>)
 8007f54:	4a13      	ldr	r2, [pc, #76]	; (8007fa4 <__sinit+0x6c>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	62a2      	str	r2, [r4, #40]	; 0x28
 8007f5a:	42a3      	cmp	r3, r4
 8007f5c:	bf04      	itt	eq
 8007f5e:	2301      	moveq	r3, #1
 8007f60:	61a3      	streq	r3, [r4, #24]
 8007f62:	4620      	mov	r0, r4
 8007f64:	f000 f820 	bl	8007fa8 <__sfp>
 8007f68:	6060      	str	r0, [r4, #4]
 8007f6a:	4620      	mov	r0, r4
 8007f6c:	f000 f81c 	bl	8007fa8 <__sfp>
 8007f70:	60a0      	str	r0, [r4, #8]
 8007f72:	4620      	mov	r0, r4
 8007f74:	f000 f818 	bl	8007fa8 <__sfp>
 8007f78:	2200      	movs	r2, #0
 8007f7a:	60e0      	str	r0, [r4, #12]
 8007f7c:	2104      	movs	r1, #4
 8007f7e:	6860      	ldr	r0, [r4, #4]
 8007f80:	f7ff ff82 	bl	8007e88 <std>
 8007f84:	68a0      	ldr	r0, [r4, #8]
 8007f86:	2201      	movs	r2, #1
 8007f88:	2109      	movs	r1, #9
 8007f8a:	f7ff ff7d 	bl	8007e88 <std>
 8007f8e:	68e0      	ldr	r0, [r4, #12]
 8007f90:	2202      	movs	r2, #2
 8007f92:	2112      	movs	r1, #18
 8007f94:	f7ff ff78 	bl	8007e88 <std>
 8007f98:	2301      	movs	r3, #1
 8007f9a:	61a3      	str	r3, [r4, #24]
 8007f9c:	e7d2      	b.n	8007f44 <__sinit+0xc>
 8007f9e:	bf00      	nop
 8007fa0:	08009460 	.word	0x08009460
 8007fa4:	08007ed1 	.word	0x08007ed1

08007fa8 <__sfp>:
 8007fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007faa:	4607      	mov	r7, r0
 8007fac:	f7ff ffac 	bl	8007f08 <__sfp_lock_acquire>
 8007fb0:	4b1e      	ldr	r3, [pc, #120]	; (800802c <__sfp+0x84>)
 8007fb2:	681e      	ldr	r6, [r3, #0]
 8007fb4:	69b3      	ldr	r3, [r6, #24]
 8007fb6:	b913      	cbnz	r3, 8007fbe <__sfp+0x16>
 8007fb8:	4630      	mov	r0, r6
 8007fba:	f7ff ffbd 	bl	8007f38 <__sinit>
 8007fbe:	3648      	adds	r6, #72	; 0x48
 8007fc0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007fc4:	3b01      	subs	r3, #1
 8007fc6:	d503      	bpl.n	8007fd0 <__sfp+0x28>
 8007fc8:	6833      	ldr	r3, [r6, #0]
 8007fca:	b30b      	cbz	r3, 8008010 <__sfp+0x68>
 8007fcc:	6836      	ldr	r6, [r6, #0]
 8007fce:	e7f7      	b.n	8007fc0 <__sfp+0x18>
 8007fd0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007fd4:	b9d5      	cbnz	r5, 800800c <__sfp+0x64>
 8007fd6:	4b16      	ldr	r3, [pc, #88]	; (8008030 <__sfp+0x88>)
 8007fd8:	60e3      	str	r3, [r4, #12]
 8007fda:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007fde:	6665      	str	r5, [r4, #100]	; 0x64
 8007fe0:	f000 f847 	bl	8008072 <__retarget_lock_init_recursive>
 8007fe4:	f7ff ff96 	bl	8007f14 <__sfp_lock_release>
 8007fe8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007fec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007ff0:	6025      	str	r5, [r4, #0]
 8007ff2:	61a5      	str	r5, [r4, #24]
 8007ff4:	2208      	movs	r2, #8
 8007ff6:	4629      	mov	r1, r5
 8007ff8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007ffc:	f7ff ff04 	bl	8007e08 <memset>
 8008000:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008004:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008008:	4620      	mov	r0, r4
 800800a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800800c:	3468      	adds	r4, #104	; 0x68
 800800e:	e7d9      	b.n	8007fc4 <__sfp+0x1c>
 8008010:	2104      	movs	r1, #4
 8008012:	4638      	mov	r0, r7
 8008014:	f7ff ff62 	bl	8007edc <__sfmoreglue>
 8008018:	4604      	mov	r4, r0
 800801a:	6030      	str	r0, [r6, #0]
 800801c:	2800      	cmp	r0, #0
 800801e:	d1d5      	bne.n	8007fcc <__sfp+0x24>
 8008020:	f7ff ff78 	bl	8007f14 <__sfp_lock_release>
 8008024:	230c      	movs	r3, #12
 8008026:	603b      	str	r3, [r7, #0]
 8008028:	e7ee      	b.n	8008008 <__sfp+0x60>
 800802a:	bf00      	nop
 800802c:	08009460 	.word	0x08009460
 8008030:	ffff0001 	.word	0xffff0001

08008034 <_fwalk_reent>:
 8008034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008038:	4606      	mov	r6, r0
 800803a:	4688      	mov	r8, r1
 800803c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008040:	2700      	movs	r7, #0
 8008042:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008046:	f1b9 0901 	subs.w	r9, r9, #1
 800804a:	d505      	bpl.n	8008058 <_fwalk_reent+0x24>
 800804c:	6824      	ldr	r4, [r4, #0]
 800804e:	2c00      	cmp	r4, #0
 8008050:	d1f7      	bne.n	8008042 <_fwalk_reent+0xe>
 8008052:	4638      	mov	r0, r7
 8008054:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008058:	89ab      	ldrh	r3, [r5, #12]
 800805a:	2b01      	cmp	r3, #1
 800805c:	d907      	bls.n	800806e <_fwalk_reent+0x3a>
 800805e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008062:	3301      	adds	r3, #1
 8008064:	d003      	beq.n	800806e <_fwalk_reent+0x3a>
 8008066:	4629      	mov	r1, r5
 8008068:	4630      	mov	r0, r6
 800806a:	47c0      	blx	r8
 800806c:	4307      	orrs	r7, r0
 800806e:	3568      	adds	r5, #104	; 0x68
 8008070:	e7e9      	b.n	8008046 <_fwalk_reent+0x12>

08008072 <__retarget_lock_init_recursive>:
 8008072:	4770      	bx	lr

08008074 <__retarget_lock_acquire_recursive>:
 8008074:	4770      	bx	lr

08008076 <__retarget_lock_release_recursive>:
 8008076:	4770      	bx	lr

08008078 <_malloc_r>:
 8008078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800807a:	1ccd      	adds	r5, r1, #3
 800807c:	f025 0503 	bic.w	r5, r5, #3
 8008080:	3508      	adds	r5, #8
 8008082:	2d0c      	cmp	r5, #12
 8008084:	bf38      	it	cc
 8008086:	250c      	movcc	r5, #12
 8008088:	2d00      	cmp	r5, #0
 800808a:	4606      	mov	r6, r0
 800808c:	db01      	blt.n	8008092 <_malloc_r+0x1a>
 800808e:	42a9      	cmp	r1, r5
 8008090:	d903      	bls.n	800809a <_malloc_r+0x22>
 8008092:	230c      	movs	r3, #12
 8008094:	6033      	str	r3, [r6, #0]
 8008096:	2000      	movs	r0, #0
 8008098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800809a:	f000 ff19 	bl	8008ed0 <__malloc_lock>
 800809e:	4921      	ldr	r1, [pc, #132]	; (8008124 <_malloc_r+0xac>)
 80080a0:	680a      	ldr	r2, [r1, #0]
 80080a2:	4614      	mov	r4, r2
 80080a4:	b99c      	cbnz	r4, 80080ce <_malloc_r+0x56>
 80080a6:	4f20      	ldr	r7, [pc, #128]	; (8008128 <_malloc_r+0xb0>)
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	b923      	cbnz	r3, 80080b6 <_malloc_r+0x3e>
 80080ac:	4621      	mov	r1, r4
 80080ae:	4630      	mov	r0, r6
 80080b0:	f000 fc86 	bl	80089c0 <_sbrk_r>
 80080b4:	6038      	str	r0, [r7, #0]
 80080b6:	4629      	mov	r1, r5
 80080b8:	4630      	mov	r0, r6
 80080ba:	f000 fc81 	bl	80089c0 <_sbrk_r>
 80080be:	1c43      	adds	r3, r0, #1
 80080c0:	d123      	bne.n	800810a <_malloc_r+0x92>
 80080c2:	230c      	movs	r3, #12
 80080c4:	6033      	str	r3, [r6, #0]
 80080c6:	4630      	mov	r0, r6
 80080c8:	f000 ff08 	bl	8008edc <__malloc_unlock>
 80080cc:	e7e3      	b.n	8008096 <_malloc_r+0x1e>
 80080ce:	6823      	ldr	r3, [r4, #0]
 80080d0:	1b5b      	subs	r3, r3, r5
 80080d2:	d417      	bmi.n	8008104 <_malloc_r+0x8c>
 80080d4:	2b0b      	cmp	r3, #11
 80080d6:	d903      	bls.n	80080e0 <_malloc_r+0x68>
 80080d8:	6023      	str	r3, [r4, #0]
 80080da:	441c      	add	r4, r3
 80080dc:	6025      	str	r5, [r4, #0]
 80080de:	e004      	b.n	80080ea <_malloc_r+0x72>
 80080e0:	6863      	ldr	r3, [r4, #4]
 80080e2:	42a2      	cmp	r2, r4
 80080e4:	bf0c      	ite	eq
 80080e6:	600b      	streq	r3, [r1, #0]
 80080e8:	6053      	strne	r3, [r2, #4]
 80080ea:	4630      	mov	r0, r6
 80080ec:	f000 fef6 	bl	8008edc <__malloc_unlock>
 80080f0:	f104 000b 	add.w	r0, r4, #11
 80080f4:	1d23      	adds	r3, r4, #4
 80080f6:	f020 0007 	bic.w	r0, r0, #7
 80080fa:	1ac2      	subs	r2, r0, r3
 80080fc:	d0cc      	beq.n	8008098 <_malloc_r+0x20>
 80080fe:	1a1b      	subs	r3, r3, r0
 8008100:	50a3      	str	r3, [r4, r2]
 8008102:	e7c9      	b.n	8008098 <_malloc_r+0x20>
 8008104:	4622      	mov	r2, r4
 8008106:	6864      	ldr	r4, [r4, #4]
 8008108:	e7cc      	b.n	80080a4 <_malloc_r+0x2c>
 800810a:	1cc4      	adds	r4, r0, #3
 800810c:	f024 0403 	bic.w	r4, r4, #3
 8008110:	42a0      	cmp	r0, r4
 8008112:	d0e3      	beq.n	80080dc <_malloc_r+0x64>
 8008114:	1a21      	subs	r1, r4, r0
 8008116:	4630      	mov	r0, r6
 8008118:	f000 fc52 	bl	80089c0 <_sbrk_r>
 800811c:	3001      	adds	r0, #1
 800811e:	d1dd      	bne.n	80080dc <_malloc_r+0x64>
 8008120:	e7cf      	b.n	80080c2 <_malloc_r+0x4a>
 8008122:	bf00      	nop
 8008124:	20012e74 	.word	0x20012e74
 8008128:	20012e78 	.word	0x20012e78

0800812c <__ssputs_r>:
 800812c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008130:	688e      	ldr	r6, [r1, #8]
 8008132:	429e      	cmp	r6, r3
 8008134:	4682      	mov	sl, r0
 8008136:	460c      	mov	r4, r1
 8008138:	4690      	mov	r8, r2
 800813a:	461f      	mov	r7, r3
 800813c:	d838      	bhi.n	80081b0 <__ssputs_r+0x84>
 800813e:	898a      	ldrh	r2, [r1, #12]
 8008140:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008144:	d032      	beq.n	80081ac <__ssputs_r+0x80>
 8008146:	6825      	ldr	r5, [r4, #0]
 8008148:	6909      	ldr	r1, [r1, #16]
 800814a:	eba5 0901 	sub.w	r9, r5, r1
 800814e:	6965      	ldr	r5, [r4, #20]
 8008150:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008154:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008158:	3301      	adds	r3, #1
 800815a:	444b      	add	r3, r9
 800815c:	106d      	asrs	r5, r5, #1
 800815e:	429d      	cmp	r5, r3
 8008160:	bf38      	it	cc
 8008162:	461d      	movcc	r5, r3
 8008164:	0553      	lsls	r3, r2, #21
 8008166:	d531      	bpl.n	80081cc <__ssputs_r+0xa0>
 8008168:	4629      	mov	r1, r5
 800816a:	f7ff ff85 	bl	8008078 <_malloc_r>
 800816e:	4606      	mov	r6, r0
 8008170:	b950      	cbnz	r0, 8008188 <__ssputs_r+0x5c>
 8008172:	230c      	movs	r3, #12
 8008174:	f8ca 3000 	str.w	r3, [sl]
 8008178:	89a3      	ldrh	r3, [r4, #12]
 800817a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800817e:	81a3      	strh	r3, [r4, #12]
 8008180:	f04f 30ff 	mov.w	r0, #4294967295
 8008184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008188:	6921      	ldr	r1, [r4, #16]
 800818a:	464a      	mov	r2, r9
 800818c:	f7ff fe2e 	bl	8007dec <memcpy>
 8008190:	89a3      	ldrh	r3, [r4, #12]
 8008192:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800819a:	81a3      	strh	r3, [r4, #12]
 800819c:	6126      	str	r6, [r4, #16]
 800819e:	6165      	str	r5, [r4, #20]
 80081a0:	444e      	add	r6, r9
 80081a2:	eba5 0509 	sub.w	r5, r5, r9
 80081a6:	6026      	str	r6, [r4, #0]
 80081a8:	60a5      	str	r5, [r4, #8]
 80081aa:	463e      	mov	r6, r7
 80081ac:	42be      	cmp	r6, r7
 80081ae:	d900      	bls.n	80081b2 <__ssputs_r+0x86>
 80081b0:	463e      	mov	r6, r7
 80081b2:	4632      	mov	r2, r6
 80081b4:	6820      	ldr	r0, [r4, #0]
 80081b6:	4641      	mov	r1, r8
 80081b8:	f000 fe70 	bl	8008e9c <memmove>
 80081bc:	68a3      	ldr	r3, [r4, #8]
 80081be:	6822      	ldr	r2, [r4, #0]
 80081c0:	1b9b      	subs	r3, r3, r6
 80081c2:	4432      	add	r2, r6
 80081c4:	60a3      	str	r3, [r4, #8]
 80081c6:	6022      	str	r2, [r4, #0]
 80081c8:	2000      	movs	r0, #0
 80081ca:	e7db      	b.n	8008184 <__ssputs_r+0x58>
 80081cc:	462a      	mov	r2, r5
 80081ce:	f000 fedb 	bl	8008f88 <_realloc_r>
 80081d2:	4606      	mov	r6, r0
 80081d4:	2800      	cmp	r0, #0
 80081d6:	d1e1      	bne.n	800819c <__ssputs_r+0x70>
 80081d8:	6921      	ldr	r1, [r4, #16]
 80081da:	4650      	mov	r0, sl
 80081dc:	f000 fe84 	bl	8008ee8 <_free_r>
 80081e0:	e7c7      	b.n	8008172 <__ssputs_r+0x46>
	...

080081e4 <_svfiprintf_r>:
 80081e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081e8:	4698      	mov	r8, r3
 80081ea:	898b      	ldrh	r3, [r1, #12]
 80081ec:	061b      	lsls	r3, r3, #24
 80081ee:	b09d      	sub	sp, #116	; 0x74
 80081f0:	4607      	mov	r7, r0
 80081f2:	460d      	mov	r5, r1
 80081f4:	4614      	mov	r4, r2
 80081f6:	d50e      	bpl.n	8008216 <_svfiprintf_r+0x32>
 80081f8:	690b      	ldr	r3, [r1, #16]
 80081fa:	b963      	cbnz	r3, 8008216 <_svfiprintf_r+0x32>
 80081fc:	2140      	movs	r1, #64	; 0x40
 80081fe:	f7ff ff3b 	bl	8008078 <_malloc_r>
 8008202:	6028      	str	r0, [r5, #0]
 8008204:	6128      	str	r0, [r5, #16]
 8008206:	b920      	cbnz	r0, 8008212 <_svfiprintf_r+0x2e>
 8008208:	230c      	movs	r3, #12
 800820a:	603b      	str	r3, [r7, #0]
 800820c:	f04f 30ff 	mov.w	r0, #4294967295
 8008210:	e0d1      	b.n	80083b6 <_svfiprintf_r+0x1d2>
 8008212:	2340      	movs	r3, #64	; 0x40
 8008214:	616b      	str	r3, [r5, #20]
 8008216:	2300      	movs	r3, #0
 8008218:	9309      	str	r3, [sp, #36]	; 0x24
 800821a:	2320      	movs	r3, #32
 800821c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008220:	f8cd 800c 	str.w	r8, [sp, #12]
 8008224:	2330      	movs	r3, #48	; 0x30
 8008226:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80083d0 <_svfiprintf_r+0x1ec>
 800822a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800822e:	f04f 0901 	mov.w	r9, #1
 8008232:	4623      	mov	r3, r4
 8008234:	469a      	mov	sl, r3
 8008236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800823a:	b10a      	cbz	r2, 8008240 <_svfiprintf_r+0x5c>
 800823c:	2a25      	cmp	r2, #37	; 0x25
 800823e:	d1f9      	bne.n	8008234 <_svfiprintf_r+0x50>
 8008240:	ebba 0b04 	subs.w	fp, sl, r4
 8008244:	d00b      	beq.n	800825e <_svfiprintf_r+0x7a>
 8008246:	465b      	mov	r3, fp
 8008248:	4622      	mov	r2, r4
 800824a:	4629      	mov	r1, r5
 800824c:	4638      	mov	r0, r7
 800824e:	f7ff ff6d 	bl	800812c <__ssputs_r>
 8008252:	3001      	adds	r0, #1
 8008254:	f000 80aa 	beq.w	80083ac <_svfiprintf_r+0x1c8>
 8008258:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800825a:	445a      	add	r2, fp
 800825c:	9209      	str	r2, [sp, #36]	; 0x24
 800825e:	f89a 3000 	ldrb.w	r3, [sl]
 8008262:	2b00      	cmp	r3, #0
 8008264:	f000 80a2 	beq.w	80083ac <_svfiprintf_r+0x1c8>
 8008268:	2300      	movs	r3, #0
 800826a:	f04f 32ff 	mov.w	r2, #4294967295
 800826e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008272:	f10a 0a01 	add.w	sl, sl, #1
 8008276:	9304      	str	r3, [sp, #16]
 8008278:	9307      	str	r3, [sp, #28]
 800827a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800827e:	931a      	str	r3, [sp, #104]	; 0x68
 8008280:	4654      	mov	r4, sl
 8008282:	2205      	movs	r2, #5
 8008284:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008288:	4851      	ldr	r0, [pc, #324]	; (80083d0 <_svfiprintf_r+0x1ec>)
 800828a:	f7f7 ffb9 	bl	8000200 <memchr>
 800828e:	9a04      	ldr	r2, [sp, #16]
 8008290:	b9d8      	cbnz	r0, 80082ca <_svfiprintf_r+0xe6>
 8008292:	06d0      	lsls	r0, r2, #27
 8008294:	bf44      	itt	mi
 8008296:	2320      	movmi	r3, #32
 8008298:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800829c:	0711      	lsls	r1, r2, #28
 800829e:	bf44      	itt	mi
 80082a0:	232b      	movmi	r3, #43	; 0x2b
 80082a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082a6:	f89a 3000 	ldrb.w	r3, [sl]
 80082aa:	2b2a      	cmp	r3, #42	; 0x2a
 80082ac:	d015      	beq.n	80082da <_svfiprintf_r+0xf6>
 80082ae:	9a07      	ldr	r2, [sp, #28]
 80082b0:	4654      	mov	r4, sl
 80082b2:	2000      	movs	r0, #0
 80082b4:	f04f 0c0a 	mov.w	ip, #10
 80082b8:	4621      	mov	r1, r4
 80082ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082be:	3b30      	subs	r3, #48	; 0x30
 80082c0:	2b09      	cmp	r3, #9
 80082c2:	d94e      	bls.n	8008362 <_svfiprintf_r+0x17e>
 80082c4:	b1b0      	cbz	r0, 80082f4 <_svfiprintf_r+0x110>
 80082c6:	9207      	str	r2, [sp, #28]
 80082c8:	e014      	b.n	80082f4 <_svfiprintf_r+0x110>
 80082ca:	eba0 0308 	sub.w	r3, r0, r8
 80082ce:	fa09 f303 	lsl.w	r3, r9, r3
 80082d2:	4313      	orrs	r3, r2
 80082d4:	9304      	str	r3, [sp, #16]
 80082d6:	46a2      	mov	sl, r4
 80082d8:	e7d2      	b.n	8008280 <_svfiprintf_r+0x9c>
 80082da:	9b03      	ldr	r3, [sp, #12]
 80082dc:	1d19      	adds	r1, r3, #4
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	9103      	str	r1, [sp, #12]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	bfbb      	ittet	lt
 80082e6:	425b      	neglt	r3, r3
 80082e8:	f042 0202 	orrlt.w	r2, r2, #2
 80082ec:	9307      	strge	r3, [sp, #28]
 80082ee:	9307      	strlt	r3, [sp, #28]
 80082f0:	bfb8      	it	lt
 80082f2:	9204      	strlt	r2, [sp, #16]
 80082f4:	7823      	ldrb	r3, [r4, #0]
 80082f6:	2b2e      	cmp	r3, #46	; 0x2e
 80082f8:	d10c      	bne.n	8008314 <_svfiprintf_r+0x130>
 80082fa:	7863      	ldrb	r3, [r4, #1]
 80082fc:	2b2a      	cmp	r3, #42	; 0x2a
 80082fe:	d135      	bne.n	800836c <_svfiprintf_r+0x188>
 8008300:	9b03      	ldr	r3, [sp, #12]
 8008302:	1d1a      	adds	r2, r3, #4
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	9203      	str	r2, [sp, #12]
 8008308:	2b00      	cmp	r3, #0
 800830a:	bfb8      	it	lt
 800830c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008310:	3402      	adds	r4, #2
 8008312:	9305      	str	r3, [sp, #20]
 8008314:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80083e0 <_svfiprintf_r+0x1fc>
 8008318:	7821      	ldrb	r1, [r4, #0]
 800831a:	2203      	movs	r2, #3
 800831c:	4650      	mov	r0, sl
 800831e:	f7f7 ff6f 	bl	8000200 <memchr>
 8008322:	b140      	cbz	r0, 8008336 <_svfiprintf_r+0x152>
 8008324:	2340      	movs	r3, #64	; 0x40
 8008326:	eba0 000a 	sub.w	r0, r0, sl
 800832a:	fa03 f000 	lsl.w	r0, r3, r0
 800832e:	9b04      	ldr	r3, [sp, #16]
 8008330:	4303      	orrs	r3, r0
 8008332:	3401      	adds	r4, #1
 8008334:	9304      	str	r3, [sp, #16]
 8008336:	f814 1b01 	ldrb.w	r1, [r4], #1
 800833a:	4826      	ldr	r0, [pc, #152]	; (80083d4 <_svfiprintf_r+0x1f0>)
 800833c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008340:	2206      	movs	r2, #6
 8008342:	f7f7 ff5d 	bl	8000200 <memchr>
 8008346:	2800      	cmp	r0, #0
 8008348:	d038      	beq.n	80083bc <_svfiprintf_r+0x1d8>
 800834a:	4b23      	ldr	r3, [pc, #140]	; (80083d8 <_svfiprintf_r+0x1f4>)
 800834c:	bb1b      	cbnz	r3, 8008396 <_svfiprintf_r+0x1b2>
 800834e:	9b03      	ldr	r3, [sp, #12]
 8008350:	3307      	adds	r3, #7
 8008352:	f023 0307 	bic.w	r3, r3, #7
 8008356:	3308      	adds	r3, #8
 8008358:	9303      	str	r3, [sp, #12]
 800835a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800835c:	4433      	add	r3, r6
 800835e:	9309      	str	r3, [sp, #36]	; 0x24
 8008360:	e767      	b.n	8008232 <_svfiprintf_r+0x4e>
 8008362:	fb0c 3202 	mla	r2, ip, r2, r3
 8008366:	460c      	mov	r4, r1
 8008368:	2001      	movs	r0, #1
 800836a:	e7a5      	b.n	80082b8 <_svfiprintf_r+0xd4>
 800836c:	2300      	movs	r3, #0
 800836e:	3401      	adds	r4, #1
 8008370:	9305      	str	r3, [sp, #20]
 8008372:	4619      	mov	r1, r3
 8008374:	f04f 0c0a 	mov.w	ip, #10
 8008378:	4620      	mov	r0, r4
 800837a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800837e:	3a30      	subs	r2, #48	; 0x30
 8008380:	2a09      	cmp	r2, #9
 8008382:	d903      	bls.n	800838c <_svfiprintf_r+0x1a8>
 8008384:	2b00      	cmp	r3, #0
 8008386:	d0c5      	beq.n	8008314 <_svfiprintf_r+0x130>
 8008388:	9105      	str	r1, [sp, #20]
 800838a:	e7c3      	b.n	8008314 <_svfiprintf_r+0x130>
 800838c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008390:	4604      	mov	r4, r0
 8008392:	2301      	movs	r3, #1
 8008394:	e7f0      	b.n	8008378 <_svfiprintf_r+0x194>
 8008396:	ab03      	add	r3, sp, #12
 8008398:	9300      	str	r3, [sp, #0]
 800839a:	462a      	mov	r2, r5
 800839c:	4b0f      	ldr	r3, [pc, #60]	; (80083dc <_svfiprintf_r+0x1f8>)
 800839e:	a904      	add	r1, sp, #16
 80083a0:	4638      	mov	r0, r7
 80083a2:	f3af 8000 	nop.w
 80083a6:	1c42      	adds	r2, r0, #1
 80083a8:	4606      	mov	r6, r0
 80083aa:	d1d6      	bne.n	800835a <_svfiprintf_r+0x176>
 80083ac:	89ab      	ldrh	r3, [r5, #12]
 80083ae:	065b      	lsls	r3, r3, #25
 80083b0:	f53f af2c 	bmi.w	800820c <_svfiprintf_r+0x28>
 80083b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80083b6:	b01d      	add	sp, #116	; 0x74
 80083b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083bc:	ab03      	add	r3, sp, #12
 80083be:	9300      	str	r3, [sp, #0]
 80083c0:	462a      	mov	r2, r5
 80083c2:	4b06      	ldr	r3, [pc, #24]	; (80083dc <_svfiprintf_r+0x1f8>)
 80083c4:	a904      	add	r1, sp, #16
 80083c6:	4638      	mov	r0, r7
 80083c8:	f000 f9d4 	bl	8008774 <_printf_i>
 80083cc:	e7eb      	b.n	80083a6 <_svfiprintf_r+0x1c2>
 80083ce:	bf00      	nop
 80083d0:	080094c4 	.word	0x080094c4
 80083d4:	080094ce 	.word	0x080094ce
 80083d8:	00000000 	.word	0x00000000
 80083dc:	0800812d 	.word	0x0800812d
 80083e0:	080094ca 	.word	0x080094ca

080083e4 <__sfputc_r>:
 80083e4:	6893      	ldr	r3, [r2, #8]
 80083e6:	3b01      	subs	r3, #1
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	b410      	push	{r4}
 80083ec:	6093      	str	r3, [r2, #8]
 80083ee:	da08      	bge.n	8008402 <__sfputc_r+0x1e>
 80083f0:	6994      	ldr	r4, [r2, #24]
 80083f2:	42a3      	cmp	r3, r4
 80083f4:	db01      	blt.n	80083fa <__sfputc_r+0x16>
 80083f6:	290a      	cmp	r1, #10
 80083f8:	d103      	bne.n	8008402 <__sfputc_r+0x1e>
 80083fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083fe:	f000 bb33 	b.w	8008a68 <__swbuf_r>
 8008402:	6813      	ldr	r3, [r2, #0]
 8008404:	1c58      	adds	r0, r3, #1
 8008406:	6010      	str	r0, [r2, #0]
 8008408:	7019      	strb	r1, [r3, #0]
 800840a:	4608      	mov	r0, r1
 800840c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008410:	4770      	bx	lr

08008412 <__sfputs_r>:
 8008412:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008414:	4606      	mov	r6, r0
 8008416:	460f      	mov	r7, r1
 8008418:	4614      	mov	r4, r2
 800841a:	18d5      	adds	r5, r2, r3
 800841c:	42ac      	cmp	r4, r5
 800841e:	d101      	bne.n	8008424 <__sfputs_r+0x12>
 8008420:	2000      	movs	r0, #0
 8008422:	e007      	b.n	8008434 <__sfputs_r+0x22>
 8008424:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008428:	463a      	mov	r2, r7
 800842a:	4630      	mov	r0, r6
 800842c:	f7ff ffda 	bl	80083e4 <__sfputc_r>
 8008430:	1c43      	adds	r3, r0, #1
 8008432:	d1f3      	bne.n	800841c <__sfputs_r+0xa>
 8008434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008438 <_vfiprintf_r>:
 8008438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800843c:	460d      	mov	r5, r1
 800843e:	b09d      	sub	sp, #116	; 0x74
 8008440:	4614      	mov	r4, r2
 8008442:	4698      	mov	r8, r3
 8008444:	4606      	mov	r6, r0
 8008446:	b118      	cbz	r0, 8008450 <_vfiprintf_r+0x18>
 8008448:	6983      	ldr	r3, [r0, #24]
 800844a:	b90b      	cbnz	r3, 8008450 <_vfiprintf_r+0x18>
 800844c:	f7ff fd74 	bl	8007f38 <__sinit>
 8008450:	4b89      	ldr	r3, [pc, #548]	; (8008678 <_vfiprintf_r+0x240>)
 8008452:	429d      	cmp	r5, r3
 8008454:	d11b      	bne.n	800848e <_vfiprintf_r+0x56>
 8008456:	6875      	ldr	r5, [r6, #4]
 8008458:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800845a:	07d9      	lsls	r1, r3, #31
 800845c:	d405      	bmi.n	800846a <_vfiprintf_r+0x32>
 800845e:	89ab      	ldrh	r3, [r5, #12]
 8008460:	059a      	lsls	r2, r3, #22
 8008462:	d402      	bmi.n	800846a <_vfiprintf_r+0x32>
 8008464:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008466:	f7ff fe05 	bl	8008074 <__retarget_lock_acquire_recursive>
 800846a:	89ab      	ldrh	r3, [r5, #12]
 800846c:	071b      	lsls	r3, r3, #28
 800846e:	d501      	bpl.n	8008474 <_vfiprintf_r+0x3c>
 8008470:	692b      	ldr	r3, [r5, #16]
 8008472:	b9eb      	cbnz	r3, 80084b0 <_vfiprintf_r+0x78>
 8008474:	4629      	mov	r1, r5
 8008476:	4630      	mov	r0, r6
 8008478:	f000 fb5a 	bl	8008b30 <__swsetup_r>
 800847c:	b1c0      	cbz	r0, 80084b0 <_vfiprintf_r+0x78>
 800847e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008480:	07dc      	lsls	r4, r3, #31
 8008482:	d50e      	bpl.n	80084a2 <_vfiprintf_r+0x6a>
 8008484:	f04f 30ff 	mov.w	r0, #4294967295
 8008488:	b01d      	add	sp, #116	; 0x74
 800848a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800848e:	4b7b      	ldr	r3, [pc, #492]	; (800867c <_vfiprintf_r+0x244>)
 8008490:	429d      	cmp	r5, r3
 8008492:	d101      	bne.n	8008498 <_vfiprintf_r+0x60>
 8008494:	68b5      	ldr	r5, [r6, #8]
 8008496:	e7df      	b.n	8008458 <_vfiprintf_r+0x20>
 8008498:	4b79      	ldr	r3, [pc, #484]	; (8008680 <_vfiprintf_r+0x248>)
 800849a:	429d      	cmp	r5, r3
 800849c:	bf08      	it	eq
 800849e:	68f5      	ldreq	r5, [r6, #12]
 80084a0:	e7da      	b.n	8008458 <_vfiprintf_r+0x20>
 80084a2:	89ab      	ldrh	r3, [r5, #12]
 80084a4:	0598      	lsls	r0, r3, #22
 80084a6:	d4ed      	bmi.n	8008484 <_vfiprintf_r+0x4c>
 80084a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084aa:	f7ff fde4 	bl	8008076 <__retarget_lock_release_recursive>
 80084ae:	e7e9      	b.n	8008484 <_vfiprintf_r+0x4c>
 80084b0:	2300      	movs	r3, #0
 80084b2:	9309      	str	r3, [sp, #36]	; 0x24
 80084b4:	2320      	movs	r3, #32
 80084b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80084ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80084be:	2330      	movs	r3, #48	; 0x30
 80084c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008684 <_vfiprintf_r+0x24c>
 80084c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80084c8:	f04f 0901 	mov.w	r9, #1
 80084cc:	4623      	mov	r3, r4
 80084ce:	469a      	mov	sl, r3
 80084d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084d4:	b10a      	cbz	r2, 80084da <_vfiprintf_r+0xa2>
 80084d6:	2a25      	cmp	r2, #37	; 0x25
 80084d8:	d1f9      	bne.n	80084ce <_vfiprintf_r+0x96>
 80084da:	ebba 0b04 	subs.w	fp, sl, r4
 80084de:	d00b      	beq.n	80084f8 <_vfiprintf_r+0xc0>
 80084e0:	465b      	mov	r3, fp
 80084e2:	4622      	mov	r2, r4
 80084e4:	4629      	mov	r1, r5
 80084e6:	4630      	mov	r0, r6
 80084e8:	f7ff ff93 	bl	8008412 <__sfputs_r>
 80084ec:	3001      	adds	r0, #1
 80084ee:	f000 80aa 	beq.w	8008646 <_vfiprintf_r+0x20e>
 80084f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084f4:	445a      	add	r2, fp
 80084f6:	9209      	str	r2, [sp, #36]	; 0x24
 80084f8:	f89a 3000 	ldrb.w	r3, [sl]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	f000 80a2 	beq.w	8008646 <_vfiprintf_r+0x20e>
 8008502:	2300      	movs	r3, #0
 8008504:	f04f 32ff 	mov.w	r2, #4294967295
 8008508:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800850c:	f10a 0a01 	add.w	sl, sl, #1
 8008510:	9304      	str	r3, [sp, #16]
 8008512:	9307      	str	r3, [sp, #28]
 8008514:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008518:	931a      	str	r3, [sp, #104]	; 0x68
 800851a:	4654      	mov	r4, sl
 800851c:	2205      	movs	r2, #5
 800851e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008522:	4858      	ldr	r0, [pc, #352]	; (8008684 <_vfiprintf_r+0x24c>)
 8008524:	f7f7 fe6c 	bl	8000200 <memchr>
 8008528:	9a04      	ldr	r2, [sp, #16]
 800852a:	b9d8      	cbnz	r0, 8008564 <_vfiprintf_r+0x12c>
 800852c:	06d1      	lsls	r1, r2, #27
 800852e:	bf44      	itt	mi
 8008530:	2320      	movmi	r3, #32
 8008532:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008536:	0713      	lsls	r3, r2, #28
 8008538:	bf44      	itt	mi
 800853a:	232b      	movmi	r3, #43	; 0x2b
 800853c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008540:	f89a 3000 	ldrb.w	r3, [sl]
 8008544:	2b2a      	cmp	r3, #42	; 0x2a
 8008546:	d015      	beq.n	8008574 <_vfiprintf_r+0x13c>
 8008548:	9a07      	ldr	r2, [sp, #28]
 800854a:	4654      	mov	r4, sl
 800854c:	2000      	movs	r0, #0
 800854e:	f04f 0c0a 	mov.w	ip, #10
 8008552:	4621      	mov	r1, r4
 8008554:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008558:	3b30      	subs	r3, #48	; 0x30
 800855a:	2b09      	cmp	r3, #9
 800855c:	d94e      	bls.n	80085fc <_vfiprintf_r+0x1c4>
 800855e:	b1b0      	cbz	r0, 800858e <_vfiprintf_r+0x156>
 8008560:	9207      	str	r2, [sp, #28]
 8008562:	e014      	b.n	800858e <_vfiprintf_r+0x156>
 8008564:	eba0 0308 	sub.w	r3, r0, r8
 8008568:	fa09 f303 	lsl.w	r3, r9, r3
 800856c:	4313      	orrs	r3, r2
 800856e:	9304      	str	r3, [sp, #16]
 8008570:	46a2      	mov	sl, r4
 8008572:	e7d2      	b.n	800851a <_vfiprintf_r+0xe2>
 8008574:	9b03      	ldr	r3, [sp, #12]
 8008576:	1d19      	adds	r1, r3, #4
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	9103      	str	r1, [sp, #12]
 800857c:	2b00      	cmp	r3, #0
 800857e:	bfbb      	ittet	lt
 8008580:	425b      	neglt	r3, r3
 8008582:	f042 0202 	orrlt.w	r2, r2, #2
 8008586:	9307      	strge	r3, [sp, #28]
 8008588:	9307      	strlt	r3, [sp, #28]
 800858a:	bfb8      	it	lt
 800858c:	9204      	strlt	r2, [sp, #16]
 800858e:	7823      	ldrb	r3, [r4, #0]
 8008590:	2b2e      	cmp	r3, #46	; 0x2e
 8008592:	d10c      	bne.n	80085ae <_vfiprintf_r+0x176>
 8008594:	7863      	ldrb	r3, [r4, #1]
 8008596:	2b2a      	cmp	r3, #42	; 0x2a
 8008598:	d135      	bne.n	8008606 <_vfiprintf_r+0x1ce>
 800859a:	9b03      	ldr	r3, [sp, #12]
 800859c:	1d1a      	adds	r2, r3, #4
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	9203      	str	r2, [sp, #12]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	bfb8      	it	lt
 80085a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80085aa:	3402      	adds	r4, #2
 80085ac:	9305      	str	r3, [sp, #20]
 80085ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008694 <_vfiprintf_r+0x25c>
 80085b2:	7821      	ldrb	r1, [r4, #0]
 80085b4:	2203      	movs	r2, #3
 80085b6:	4650      	mov	r0, sl
 80085b8:	f7f7 fe22 	bl	8000200 <memchr>
 80085bc:	b140      	cbz	r0, 80085d0 <_vfiprintf_r+0x198>
 80085be:	2340      	movs	r3, #64	; 0x40
 80085c0:	eba0 000a 	sub.w	r0, r0, sl
 80085c4:	fa03 f000 	lsl.w	r0, r3, r0
 80085c8:	9b04      	ldr	r3, [sp, #16]
 80085ca:	4303      	orrs	r3, r0
 80085cc:	3401      	adds	r4, #1
 80085ce:	9304      	str	r3, [sp, #16]
 80085d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085d4:	482c      	ldr	r0, [pc, #176]	; (8008688 <_vfiprintf_r+0x250>)
 80085d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80085da:	2206      	movs	r2, #6
 80085dc:	f7f7 fe10 	bl	8000200 <memchr>
 80085e0:	2800      	cmp	r0, #0
 80085e2:	d03f      	beq.n	8008664 <_vfiprintf_r+0x22c>
 80085e4:	4b29      	ldr	r3, [pc, #164]	; (800868c <_vfiprintf_r+0x254>)
 80085e6:	bb1b      	cbnz	r3, 8008630 <_vfiprintf_r+0x1f8>
 80085e8:	9b03      	ldr	r3, [sp, #12]
 80085ea:	3307      	adds	r3, #7
 80085ec:	f023 0307 	bic.w	r3, r3, #7
 80085f0:	3308      	adds	r3, #8
 80085f2:	9303      	str	r3, [sp, #12]
 80085f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085f6:	443b      	add	r3, r7
 80085f8:	9309      	str	r3, [sp, #36]	; 0x24
 80085fa:	e767      	b.n	80084cc <_vfiprintf_r+0x94>
 80085fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8008600:	460c      	mov	r4, r1
 8008602:	2001      	movs	r0, #1
 8008604:	e7a5      	b.n	8008552 <_vfiprintf_r+0x11a>
 8008606:	2300      	movs	r3, #0
 8008608:	3401      	adds	r4, #1
 800860a:	9305      	str	r3, [sp, #20]
 800860c:	4619      	mov	r1, r3
 800860e:	f04f 0c0a 	mov.w	ip, #10
 8008612:	4620      	mov	r0, r4
 8008614:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008618:	3a30      	subs	r2, #48	; 0x30
 800861a:	2a09      	cmp	r2, #9
 800861c:	d903      	bls.n	8008626 <_vfiprintf_r+0x1ee>
 800861e:	2b00      	cmp	r3, #0
 8008620:	d0c5      	beq.n	80085ae <_vfiprintf_r+0x176>
 8008622:	9105      	str	r1, [sp, #20]
 8008624:	e7c3      	b.n	80085ae <_vfiprintf_r+0x176>
 8008626:	fb0c 2101 	mla	r1, ip, r1, r2
 800862a:	4604      	mov	r4, r0
 800862c:	2301      	movs	r3, #1
 800862e:	e7f0      	b.n	8008612 <_vfiprintf_r+0x1da>
 8008630:	ab03      	add	r3, sp, #12
 8008632:	9300      	str	r3, [sp, #0]
 8008634:	462a      	mov	r2, r5
 8008636:	4b16      	ldr	r3, [pc, #88]	; (8008690 <_vfiprintf_r+0x258>)
 8008638:	a904      	add	r1, sp, #16
 800863a:	4630      	mov	r0, r6
 800863c:	f3af 8000 	nop.w
 8008640:	4607      	mov	r7, r0
 8008642:	1c78      	adds	r0, r7, #1
 8008644:	d1d6      	bne.n	80085f4 <_vfiprintf_r+0x1bc>
 8008646:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008648:	07d9      	lsls	r1, r3, #31
 800864a:	d405      	bmi.n	8008658 <_vfiprintf_r+0x220>
 800864c:	89ab      	ldrh	r3, [r5, #12]
 800864e:	059a      	lsls	r2, r3, #22
 8008650:	d402      	bmi.n	8008658 <_vfiprintf_r+0x220>
 8008652:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008654:	f7ff fd0f 	bl	8008076 <__retarget_lock_release_recursive>
 8008658:	89ab      	ldrh	r3, [r5, #12]
 800865a:	065b      	lsls	r3, r3, #25
 800865c:	f53f af12 	bmi.w	8008484 <_vfiprintf_r+0x4c>
 8008660:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008662:	e711      	b.n	8008488 <_vfiprintf_r+0x50>
 8008664:	ab03      	add	r3, sp, #12
 8008666:	9300      	str	r3, [sp, #0]
 8008668:	462a      	mov	r2, r5
 800866a:	4b09      	ldr	r3, [pc, #36]	; (8008690 <_vfiprintf_r+0x258>)
 800866c:	a904      	add	r1, sp, #16
 800866e:	4630      	mov	r0, r6
 8008670:	f000 f880 	bl	8008774 <_printf_i>
 8008674:	e7e4      	b.n	8008640 <_vfiprintf_r+0x208>
 8008676:	bf00      	nop
 8008678:	08009484 	.word	0x08009484
 800867c:	080094a4 	.word	0x080094a4
 8008680:	08009464 	.word	0x08009464
 8008684:	080094c4 	.word	0x080094c4
 8008688:	080094ce 	.word	0x080094ce
 800868c:	00000000 	.word	0x00000000
 8008690:	08008413 	.word	0x08008413
 8008694:	080094ca 	.word	0x080094ca

08008698 <_printf_common>:
 8008698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800869c:	4616      	mov	r6, r2
 800869e:	4699      	mov	r9, r3
 80086a0:	688a      	ldr	r2, [r1, #8]
 80086a2:	690b      	ldr	r3, [r1, #16]
 80086a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80086a8:	4293      	cmp	r3, r2
 80086aa:	bfb8      	it	lt
 80086ac:	4613      	movlt	r3, r2
 80086ae:	6033      	str	r3, [r6, #0]
 80086b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80086b4:	4607      	mov	r7, r0
 80086b6:	460c      	mov	r4, r1
 80086b8:	b10a      	cbz	r2, 80086be <_printf_common+0x26>
 80086ba:	3301      	adds	r3, #1
 80086bc:	6033      	str	r3, [r6, #0]
 80086be:	6823      	ldr	r3, [r4, #0]
 80086c0:	0699      	lsls	r1, r3, #26
 80086c2:	bf42      	ittt	mi
 80086c4:	6833      	ldrmi	r3, [r6, #0]
 80086c6:	3302      	addmi	r3, #2
 80086c8:	6033      	strmi	r3, [r6, #0]
 80086ca:	6825      	ldr	r5, [r4, #0]
 80086cc:	f015 0506 	ands.w	r5, r5, #6
 80086d0:	d106      	bne.n	80086e0 <_printf_common+0x48>
 80086d2:	f104 0a19 	add.w	sl, r4, #25
 80086d6:	68e3      	ldr	r3, [r4, #12]
 80086d8:	6832      	ldr	r2, [r6, #0]
 80086da:	1a9b      	subs	r3, r3, r2
 80086dc:	42ab      	cmp	r3, r5
 80086de:	dc26      	bgt.n	800872e <_printf_common+0x96>
 80086e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80086e4:	1e13      	subs	r3, r2, #0
 80086e6:	6822      	ldr	r2, [r4, #0]
 80086e8:	bf18      	it	ne
 80086ea:	2301      	movne	r3, #1
 80086ec:	0692      	lsls	r2, r2, #26
 80086ee:	d42b      	bmi.n	8008748 <_printf_common+0xb0>
 80086f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80086f4:	4649      	mov	r1, r9
 80086f6:	4638      	mov	r0, r7
 80086f8:	47c0      	blx	r8
 80086fa:	3001      	adds	r0, #1
 80086fc:	d01e      	beq.n	800873c <_printf_common+0xa4>
 80086fe:	6823      	ldr	r3, [r4, #0]
 8008700:	68e5      	ldr	r5, [r4, #12]
 8008702:	6832      	ldr	r2, [r6, #0]
 8008704:	f003 0306 	and.w	r3, r3, #6
 8008708:	2b04      	cmp	r3, #4
 800870a:	bf08      	it	eq
 800870c:	1aad      	subeq	r5, r5, r2
 800870e:	68a3      	ldr	r3, [r4, #8]
 8008710:	6922      	ldr	r2, [r4, #16]
 8008712:	bf0c      	ite	eq
 8008714:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008718:	2500      	movne	r5, #0
 800871a:	4293      	cmp	r3, r2
 800871c:	bfc4      	itt	gt
 800871e:	1a9b      	subgt	r3, r3, r2
 8008720:	18ed      	addgt	r5, r5, r3
 8008722:	2600      	movs	r6, #0
 8008724:	341a      	adds	r4, #26
 8008726:	42b5      	cmp	r5, r6
 8008728:	d11a      	bne.n	8008760 <_printf_common+0xc8>
 800872a:	2000      	movs	r0, #0
 800872c:	e008      	b.n	8008740 <_printf_common+0xa8>
 800872e:	2301      	movs	r3, #1
 8008730:	4652      	mov	r2, sl
 8008732:	4649      	mov	r1, r9
 8008734:	4638      	mov	r0, r7
 8008736:	47c0      	blx	r8
 8008738:	3001      	adds	r0, #1
 800873a:	d103      	bne.n	8008744 <_printf_common+0xac>
 800873c:	f04f 30ff 	mov.w	r0, #4294967295
 8008740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008744:	3501      	adds	r5, #1
 8008746:	e7c6      	b.n	80086d6 <_printf_common+0x3e>
 8008748:	18e1      	adds	r1, r4, r3
 800874a:	1c5a      	adds	r2, r3, #1
 800874c:	2030      	movs	r0, #48	; 0x30
 800874e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008752:	4422      	add	r2, r4
 8008754:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008758:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800875c:	3302      	adds	r3, #2
 800875e:	e7c7      	b.n	80086f0 <_printf_common+0x58>
 8008760:	2301      	movs	r3, #1
 8008762:	4622      	mov	r2, r4
 8008764:	4649      	mov	r1, r9
 8008766:	4638      	mov	r0, r7
 8008768:	47c0      	blx	r8
 800876a:	3001      	adds	r0, #1
 800876c:	d0e6      	beq.n	800873c <_printf_common+0xa4>
 800876e:	3601      	adds	r6, #1
 8008770:	e7d9      	b.n	8008726 <_printf_common+0x8e>
	...

08008774 <_printf_i>:
 8008774:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008778:	460c      	mov	r4, r1
 800877a:	4691      	mov	r9, r2
 800877c:	7e27      	ldrb	r7, [r4, #24]
 800877e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008780:	2f78      	cmp	r7, #120	; 0x78
 8008782:	4680      	mov	r8, r0
 8008784:	469a      	mov	sl, r3
 8008786:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800878a:	d807      	bhi.n	800879c <_printf_i+0x28>
 800878c:	2f62      	cmp	r7, #98	; 0x62
 800878e:	d80a      	bhi.n	80087a6 <_printf_i+0x32>
 8008790:	2f00      	cmp	r7, #0
 8008792:	f000 80d8 	beq.w	8008946 <_printf_i+0x1d2>
 8008796:	2f58      	cmp	r7, #88	; 0x58
 8008798:	f000 80a3 	beq.w	80088e2 <_printf_i+0x16e>
 800879c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80087a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80087a4:	e03a      	b.n	800881c <_printf_i+0xa8>
 80087a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80087aa:	2b15      	cmp	r3, #21
 80087ac:	d8f6      	bhi.n	800879c <_printf_i+0x28>
 80087ae:	a001      	add	r0, pc, #4	; (adr r0, 80087b4 <_printf_i+0x40>)
 80087b0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80087b4:	0800880d 	.word	0x0800880d
 80087b8:	08008821 	.word	0x08008821
 80087bc:	0800879d 	.word	0x0800879d
 80087c0:	0800879d 	.word	0x0800879d
 80087c4:	0800879d 	.word	0x0800879d
 80087c8:	0800879d 	.word	0x0800879d
 80087cc:	08008821 	.word	0x08008821
 80087d0:	0800879d 	.word	0x0800879d
 80087d4:	0800879d 	.word	0x0800879d
 80087d8:	0800879d 	.word	0x0800879d
 80087dc:	0800879d 	.word	0x0800879d
 80087e0:	0800892d 	.word	0x0800892d
 80087e4:	08008851 	.word	0x08008851
 80087e8:	0800890f 	.word	0x0800890f
 80087ec:	0800879d 	.word	0x0800879d
 80087f0:	0800879d 	.word	0x0800879d
 80087f4:	0800894f 	.word	0x0800894f
 80087f8:	0800879d 	.word	0x0800879d
 80087fc:	08008851 	.word	0x08008851
 8008800:	0800879d 	.word	0x0800879d
 8008804:	0800879d 	.word	0x0800879d
 8008808:	08008917 	.word	0x08008917
 800880c:	680b      	ldr	r3, [r1, #0]
 800880e:	1d1a      	adds	r2, r3, #4
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	600a      	str	r2, [r1, #0]
 8008814:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008818:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800881c:	2301      	movs	r3, #1
 800881e:	e0a3      	b.n	8008968 <_printf_i+0x1f4>
 8008820:	6825      	ldr	r5, [r4, #0]
 8008822:	6808      	ldr	r0, [r1, #0]
 8008824:	062e      	lsls	r6, r5, #24
 8008826:	f100 0304 	add.w	r3, r0, #4
 800882a:	d50a      	bpl.n	8008842 <_printf_i+0xce>
 800882c:	6805      	ldr	r5, [r0, #0]
 800882e:	600b      	str	r3, [r1, #0]
 8008830:	2d00      	cmp	r5, #0
 8008832:	da03      	bge.n	800883c <_printf_i+0xc8>
 8008834:	232d      	movs	r3, #45	; 0x2d
 8008836:	426d      	negs	r5, r5
 8008838:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800883c:	485e      	ldr	r0, [pc, #376]	; (80089b8 <_printf_i+0x244>)
 800883e:	230a      	movs	r3, #10
 8008840:	e019      	b.n	8008876 <_printf_i+0x102>
 8008842:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008846:	6805      	ldr	r5, [r0, #0]
 8008848:	600b      	str	r3, [r1, #0]
 800884a:	bf18      	it	ne
 800884c:	b22d      	sxthne	r5, r5
 800884e:	e7ef      	b.n	8008830 <_printf_i+0xbc>
 8008850:	680b      	ldr	r3, [r1, #0]
 8008852:	6825      	ldr	r5, [r4, #0]
 8008854:	1d18      	adds	r0, r3, #4
 8008856:	6008      	str	r0, [r1, #0]
 8008858:	0628      	lsls	r0, r5, #24
 800885a:	d501      	bpl.n	8008860 <_printf_i+0xec>
 800885c:	681d      	ldr	r5, [r3, #0]
 800885e:	e002      	b.n	8008866 <_printf_i+0xf2>
 8008860:	0669      	lsls	r1, r5, #25
 8008862:	d5fb      	bpl.n	800885c <_printf_i+0xe8>
 8008864:	881d      	ldrh	r5, [r3, #0]
 8008866:	4854      	ldr	r0, [pc, #336]	; (80089b8 <_printf_i+0x244>)
 8008868:	2f6f      	cmp	r7, #111	; 0x6f
 800886a:	bf0c      	ite	eq
 800886c:	2308      	moveq	r3, #8
 800886e:	230a      	movne	r3, #10
 8008870:	2100      	movs	r1, #0
 8008872:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008876:	6866      	ldr	r6, [r4, #4]
 8008878:	60a6      	str	r6, [r4, #8]
 800887a:	2e00      	cmp	r6, #0
 800887c:	bfa2      	ittt	ge
 800887e:	6821      	ldrge	r1, [r4, #0]
 8008880:	f021 0104 	bicge.w	r1, r1, #4
 8008884:	6021      	strge	r1, [r4, #0]
 8008886:	b90d      	cbnz	r5, 800888c <_printf_i+0x118>
 8008888:	2e00      	cmp	r6, #0
 800888a:	d04d      	beq.n	8008928 <_printf_i+0x1b4>
 800888c:	4616      	mov	r6, r2
 800888e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008892:	fb03 5711 	mls	r7, r3, r1, r5
 8008896:	5dc7      	ldrb	r7, [r0, r7]
 8008898:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800889c:	462f      	mov	r7, r5
 800889e:	42bb      	cmp	r3, r7
 80088a0:	460d      	mov	r5, r1
 80088a2:	d9f4      	bls.n	800888e <_printf_i+0x11a>
 80088a4:	2b08      	cmp	r3, #8
 80088a6:	d10b      	bne.n	80088c0 <_printf_i+0x14c>
 80088a8:	6823      	ldr	r3, [r4, #0]
 80088aa:	07df      	lsls	r7, r3, #31
 80088ac:	d508      	bpl.n	80088c0 <_printf_i+0x14c>
 80088ae:	6923      	ldr	r3, [r4, #16]
 80088b0:	6861      	ldr	r1, [r4, #4]
 80088b2:	4299      	cmp	r1, r3
 80088b4:	bfde      	ittt	le
 80088b6:	2330      	movle	r3, #48	; 0x30
 80088b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80088bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80088c0:	1b92      	subs	r2, r2, r6
 80088c2:	6122      	str	r2, [r4, #16]
 80088c4:	f8cd a000 	str.w	sl, [sp]
 80088c8:	464b      	mov	r3, r9
 80088ca:	aa03      	add	r2, sp, #12
 80088cc:	4621      	mov	r1, r4
 80088ce:	4640      	mov	r0, r8
 80088d0:	f7ff fee2 	bl	8008698 <_printf_common>
 80088d4:	3001      	adds	r0, #1
 80088d6:	d14c      	bne.n	8008972 <_printf_i+0x1fe>
 80088d8:	f04f 30ff 	mov.w	r0, #4294967295
 80088dc:	b004      	add	sp, #16
 80088de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088e2:	4835      	ldr	r0, [pc, #212]	; (80089b8 <_printf_i+0x244>)
 80088e4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80088e8:	6823      	ldr	r3, [r4, #0]
 80088ea:	680e      	ldr	r6, [r1, #0]
 80088ec:	061f      	lsls	r7, r3, #24
 80088ee:	f856 5b04 	ldr.w	r5, [r6], #4
 80088f2:	600e      	str	r6, [r1, #0]
 80088f4:	d514      	bpl.n	8008920 <_printf_i+0x1ac>
 80088f6:	07d9      	lsls	r1, r3, #31
 80088f8:	bf44      	itt	mi
 80088fa:	f043 0320 	orrmi.w	r3, r3, #32
 80088fe:	6023      	strmi	r3, [r4, #0]
 8008900:	b91d      	cbnz	r5, 800890a <_printf_i+0x196>
 8008902:	6823      	ldr	r3, [r4, #0]
 8008904:	f023 0320 	bic.w	r3, r3, #32
 8008908:	6023      	str	r3, [r4, #0]
 800890a:	2310      	movs	r3, #16
 800890c:	e7b0      	b.n	8008870 <_printf_i+0xfc>
 800890e:	6823      	ldr	r3, [r4, #0]
 8008910:	f043 0320 	orr.w	r3, r3, #32
 8008914:	6023      	str	r3, [r4, #0]
 8008916:	2378      	movs	r3, #120	; 0x78
 8008918:	4828      	ldr	r0, [pc, #160]	; (80089bc <_printf_i+0x248>)
 800891a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800891e:	e7e3      	b.n	80088e8 <_printf_i+0x174>
 8008920:	065e      	lsls	r6, r3, #25
 8008922:	bf48      	it	mi
 8008924:	b2ad      	uxthmi	r5, r5
 8008926:	e7e6      	b.n	80088f6 <_printf_i+0x182>
 8008928:	4616      	mov	r6, r2
 800892a:	e7bb      	b.n	80088a4 <_printf_i+0x130>
 800892c:	680b      	ldr	r3, [r1, #0]
 800892e:	6826      	ldr	r6, [r4, #0]
 8008930:	6960      	ldr	r0, [r4, #20]
 8008932:	1d1d      	adds	r5, r3, #4
 8008934:	600d      	str	r5, [r1, #0]
 8008936:	0635      	lsls	r5, r6, #24
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	d501      	bpl.n	8008940 <_printf_i+0x1cc>
 800893c:	6018      	str	r0, [r3, #0]
 800893e:	e002      	b.n	8008946 <_printf_i+0x1d2>
 8008940:	0671      	lsls	r1, r6, #25
 8008942:	d5fb      	bpl.n	800893c <_printf_i+0x1c8>
 8008944:	8018      	strh	r0, [r3, #0]
 8008946:	2300      	movs	r3, #0
 8008948:	6123      	str	r3, [r4, #16]
 800894a:	4616      	mov	r6, r2
 800894c:	e7ba      	b.n	80088c4 <_printf_i+0x150>
 800894e:	680b      	ldr	r3, [r1, #0]
 8008950:	1d1a      	adds	r2, r3, #4
 8008952:	600a      	str	r2, [r1, #0]
 8008954:	681e      	ldr	r6, [r3, #0]
 8008956:	6862      	ldr	r2, [r4, #4]
 8008958:	2100      	movs	r1, #0
 800895a:	4630      	mov	r0, r6
 800895c:	f7f7 fc50 	bl	8000200 <memchr>
 8008960:	b108      	cbz	r0, 8008966 <_printf_i+0x1f2>
 8008962:	1b80      	subs	r0, r0, r6
 8008964:	6060      	str	r0, [r4, #4]
 8008966:	6863      	ldr	r3, [r4, #4]
 8008968:	6123      	str	r3, [r4, #16]
 800896a:	2300      	movs	r3, #0
 800896c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008970:	e7a8      	b.n	80088c4 <_printf_i+0x150>
 8008972:	6923      	ldr	r3, [r4, #16]
 8008974:	4632      	mov	r2, r6
 8008976:	4649      	mov	r1, r9
 8008978:	4640      	mov	r0, r8
 800897a:	47d0      	blx	sl
 800897c:	3001      	adds	r0, #1
 800897e:	d0ab      	beq.n	80088d8 <_printf_i+0x164>
 8008980:	6823      	ldr	r3, [r4, #0]
 8008982:	079b      	lsls	r3, r3, #30
 8008984:	d413      	bmi.n	80089ae <_printf_i+0x23a>
 8008986:	68e0      	ldr	r0, [r4, #12]
 8008988:	9b03      	ldr	r3, [sp, #12]
 800898a:	4298      	cmp	r0, r3
 800898c:	bfb8      	it	lt
 800898e:	4618      	movlt	r0, r3
 8008990:	e7a4      	b.n	80088dc <_printf_i+0x168>
 8008992:	2301      	movs	r3, #1
 8008994:	4632      	mov	r2, r6
 8008996:	4649      	mov	r1, r9
 8008998:	4640      	mov	r0, r8
 800899a:	47d0      	blx	sl
 800899c:	3001      	adds	r0, #1
 800899e:	d09b      	beq.n	80088d8 <_printf_i+0x164>
 80089a0:	3501      	adds	r5, #1
 80089a2:	68e3      	ldr	r3, [r4, #12]
 80089a4:	9903      	ldr	r1, [sp, #12]
 80089a6:	1a5b      	subs	r3, r3, r1
 80089a8:	42ab      	cmp	r3, r5
 80089aa:	dcf2      	bgt.n	8008992 <_printf_i+0x21e>
 80089ac:	e7eb      	b.n	8008986 <_printf_i+0x212>
 80089ae:	2500      	movs	r5, #0
 80089b0:	f104 0619 	add.w	r6, r4, #25
 80089b4:	e7f5      	b.n	80089a2 <_printf_i+0x22e>
 80089b6:	bf00      	nop
 80089b8:	080094d5 	.word	0x080094d5
 80089bc:	080094e6 	.word	0x080094e6

080089c0 <_sbrk_r>:
 80089c0:	b538      	push	{r3, r4, r5, lr}
 80089c2:	4d06      	ldr	r5, [pc, #24]	; (80089dc <_sbrk_r+0x1c>)
 80089c4:	2300      	movs	r3, #0
 80089c6:	4604      	mov	r4, r0
 80089c8:	4608      	mov	r0, r1
 80089ca:	602b      	str	r3, [r5, #0]
 80089cc:	f7f8 fd7a 	bl	80014c4 <_sbrk>
 80089d0:	1c43      	adds	r3, r0, #1
 80089d2:	d102      	bne.n	80089da <_sbrk_r+0x1a>
 80089d4:	682b      	ldr	r3, [r5, #0]
 80089d6:	b103      	cbz	r3, 80089da <_sbrk_r+0x1a>
 80089d8:	6023      	str	r3, [r4, #0]
 80089da:	bd38      	pop	{r3, r4, r5, pc}
 80089dc:	20012fac 	.word	0x20012fac

080089e0 <__sread>:
 80089e0:	b510      	push	{r4, lr}
 80089e2:	460c      	mov	r4, r1
 80089e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089e8:	f000 faf4 	bl	8008fd4 <_read_r>
 80089ec:	2800      	cmp	r0, #0
 80089ee:	bfab      	itete	ge
 80089f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80089f2:	89a3      	ldrhlt	r3, [r4, #12]
 80089f4:	181b      	addge	r3, r3, r0
 80089f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80089fa:	bfac      	ite	ge
 80089fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80089fe:	81a3      	strhlt	r3, [r4, #12]
 8008a00:	bd10      	pop	{r4, pc}

08008a02 <__swrite>:
 8008a02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a06:	461f      	mov	r7, r3
 8008a08:	898b      	ldrh	r3, [r1, #12]
 8008a0a:	05db      	lsls	r3, r3, #23
 8008a0c:	4605      	mov	r5, r0
 8008a0e:	460c      	mov	r4, r1
 8008a10:	4616      	mov	r6, r2
 8008a12:	d505      	bpl.n	8008a20 <__swrite+0x1e>
 8008a14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a18:	2302      	movs	r3, #2
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	f000 f9c8 	bl	8008db0 <_lseek_r>
 8008a20:	89a3      	ldrh	r3, [r4, #12]
 8008a22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a2a:	81a3      	strh	r3, [r4, #12]
 8008a2c:	4632      	mov	r2, r6
 8008a2e:	463b      	mov	r3, r7
 8008a30:	4628      	mov	r0, r5
 8008a32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a36:	f000 b869 	b.w	8008b0c <_write_r>

08008a3a <__sseek>:
 8008a3a:	b510      	push	{r4, lr}
 8008a3c:	460c      	mov	r4, r1
 8008a3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a42:	f000 f9b5 	bl	8008db0 <_lseek_r>
 8008a46:	1c43      	adds	r3, r0, #1
 8008a48:	89a3      	ldrh	r3, [r4, #12]
 8008a4a:	bf15      	itete	ne
 8008a4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008a4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008a52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008a56:	81a3      	strheq	r3, [r4, #12]
 8008a58:	bf18      	it	ne
 8008a5a:	81a3      	strhne	r3, [r4, #12]
 8008a5c:	bd10      	pop	{r4, pc}

08008a5e <__sclose>:
 8008a5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a62:	f000 b8d3 	b.w	8008c0c <_close_r>
	...

08008a68 <__swbuf_r>:
 8008a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a6a:	460e      	mov	r6, r1
 8008a6c:	4614      	mov	r4, r2
 8008a6e:	4605      	mov	r5, r0
 8008a70:	b118      	cbz	r0, 8008a7a <__swbuf_r+0x12>
 8008a72:	6983      	ldr	r3, [r0, #24]
 8008a74:	b90b      	cbnz	r3, 8008a7a <__swbuf_r+0x12>
 8008a76:	f7ff fa5f 	bl	8007f38 <__sinit>
 8008a7a:	4b21      	ldr	r3, [pc, #132]	; (8008b00 <__swbuf_r+0x98>)
 8008a7c:	429c      	cmp	r4, r3
 8008a7e:	d12b      	bne.n	8008ad8 <__swbuf_r+0x70>
 8008a80:	686c      	ldr	r4, [r5, #4]
 8008a82:	69a3      	ldr	r3, [r4, #24]
 8008a84:	60a3      	str	r3, [r4, #8]
 8008a86:	89a3      	ldrh	r3, [r4, #12]
 8008a88:	071a      	lsls	r2, r3, #28
 8008a8a:	d52f      	bpl.n	8008aec <__swbuf_r+0x84>
 8008a8c:	6923      	ldr	r3, [r4, #16]
 8008a8e:	b36b      	cbz	r3, 8008aec <__swbuf_r+0x84>
 8008a90:	6923      	ldr	r3, [r4, #16]
 8008a92:	6820      	ldr	r0, [r4, #0]
 8008a94:	1ac0      	subs	r0, r0, r3
 8008a96:	6963      	ldr	r3, [r4, #20]
 8008a98:	b2f6      	uxtb	r6, r6
 8008a9a:	4283      	cmp	r3, r0
 8008a9c:	4637      	mov	r7, r6
 8008a9e:	dc04      	bgt.n	8008aaa <__swbuf_r+0x42>
 8008aa0:	4621      	mov	r1, r4
 8008aa2:	4628      	mov	r0, r5
 8008aa4:	f000 f948 	bl	8008d38 <_fflush_r>
 8008aa8:	bb30      	cbnz	r0, 8008af8 <__swbuf_r+0x90>
 8008aaa:	68a3      	ldr	r3, [r4, #8]
 8008aac:	3b01      	subs	r3, #1
 8008aae:	60a3      	str	r3, [r4, #8]
 8008ab0:	6823      	ldr	r3, [r4, #0]
 8008ab2:	1c5a      	adds	r2, r3, #1
 8008ab4:	6022      	str	r2, [r4, #0]
 8008ab6:	701e      	strb	r6, [r3, #0]
 8008ab8:	6963      	ldr	r3, [r4, #20]
 8008aba:	3001      	adds	r0, #1
 8008abc:	4283      	cmp	r3, r0
 8008abe:	d004      	beq.n	8008aca <__swbuf_r+0x62>
 8008ac0:	89a3      	ldrh	r3, [r4, #12]
 8008ac2:	07db      	lsls	r3, r3, #31
 8008ac4:	d506      	bpl.n	8008ad4 <__swbuf_r+0x6c>
 8008ac6:	2e0a      	cmp	r6, #10
 8008ac8:	d104      	bne.n	8008ad4 <__swbuf_r+0x6c>
 8008aca:	4621      	mov	r1, r4
 8008acc:	4628      	mov	r0, r5
 8008ace:	f000 f933 	bl	8008d38 <_fflush_r>
 8008ad2:	b988      	cbnz	r0, 8008af8 <__swbuf_r+0x90>
 8008ad4:	4638      	mov	r0, r7
 8008ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ad8:	4b0a      	ldr	r3, [pc, #40]	; (8008b04 <__swbuf_r+0x9c>)
 8008ada:	429c      	cmp	r4, r3
 8008adc:	d101      	bne.n	8008ae2 <__swbuf_r+0x7a>
 8008ade:	68ac      	ldr	r4, [r5, #8]
 8008ae0:	e7cf      	b.n	8008a82 <__swbuf_r+0x1a>
 8008ae2:	4b09      	ldr	r3, [pc, #36]	; (8008b08 <__swbuf_r+0xa0>)
 8008ae4:	429c      	cmp	r4, r3
 8008ae6:	bf08      	it	eq
 8008ae8:	68ec      	ldreq	r4, [r5, #12]
 8008aea:	e7ca      	b.n	8008a82 <__swbuf_r+0x1a>
 8008aec:	4621      	mov	r1, r4
 8008aee:	4628      	mov	r0, r5
 8008af0:	f000 f81e 	bl	8008b30 <__swsetup_r>
 8008af4:	2800      	cmp	r0, #0
 8008af6:	d0cb      	beq.n	8008a90 <__swbuf_r+0x28>
 8008af8:	f04f 37ff 	mov.w	r7, #4294967295
 8008afc:	e7ea      	b.n	8008ad4 <__swbuf_r+0x6c>
 8008afe:	bf00      	nop
 8008b00:	08009484 	.word	0x08009484
 8008b04:	080094a4 	.word	0x080094a4
 8008b08:	08009464 	.word	0x08009464

08008b0c <_write_r>:
 8008b0c:	b538      	push	{r3, r4, r5, lr}
 8008b0e:	4d07      	ldr	r5, [pc, #28]	; (8008b2c <_write_r+0x20>)
 8008b10:	4604      	mov	r4, r0
 8008b12:	4608      	mov	r0, r1
 8008b14:	4611      	mov	r1, r2
 8008b16:	2200      	movs	r2, #0
 8008b18:	602a      	str	r2, [r5, #0]
 8008b1a:	461a      	mov	r2, r3
 8008b1c:	f7f8 fc81 	bl	8001422 <_write>
 8008b20:	1c43      	adds	r3, r0, #1
 8008b22:	d102      	bne.n	8008b2a <_write_r+0x1e>
 8008b24:	682b      	ldr	r3, [r5, #0]
 8008b26:	b103      	cbz	r3, 8008b2a <_write_r+0x1e>
 8008b28:	6023      	str	r3, [r4, #0]
 8008b2a:	bd38      	pop	{r3, r4, r5, pc}
 8008b2c:	20012fac 	.word	0x20012fac

08008b30 <__swsetup_r>:
 8008b30:	4b32      	ldr	r3, [pc, #200]	; (8008bfc <__swsetup_r+0xcc>)
 8008b32:	b570      	push	{r4, r5, r6, lr}
 8008b34:	681d      	ldr	r5, [r3, #0]
 8008b36:	4606      	mov	r6, r0
 8008b38:	460c      	mov	r4, r1
 8008b3a:	b125      	cbz	r5, 8008b46 <__swsetup_r+0x16>
 8008b3c:	69ab      	ldr	r3, [r5, #24]
 8008b3e:	b913      	cbnz	r3, 8008b46 <__swsetup_r+0x16>
 8008b40:	4628      	mov	r0, r5
 8008b42:	f7ff f9f9 	bl	8007f38 <__sinit>
 8008b46:	4b2e      	ldr	r3, [pc, #184]	; (8008c00 <__swsetup_r+0xd0>)
 8008b48:	429c      	cmp	r4, r3
 8008b4a:	d10f      	bne.n	8008b6c <__swsetup_r+0x3c>
 8008b4c:	686c      	ldr	r4, [r5, #4]
 8008b4e:	89a3      	ldrh	r3, [r4, #12]
 8008b50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b54:	0719      	lsls	r1, r3, #28
 8008b56:	d42c      	bmi.n	8008bb2 <__swsetup_r+0x82>
 8008b58:	06dd      	lsls	r5, r3, #27
 8008b5a:	d411      	bmi.n	8008b80 <__swsetup_r+0x50>
 8008b5c:	2309      	movs	r3, #9
 8008b5e:	6033      	str	r3, [r6, #0]
 8008b60:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008b64:	81a3      	strh	r3, [r4, #12]
 8008b66:	f04f 30ff 	mov.w	r0, #4294967295
 8008b6a:	e03e      	b.n	8008bea <__swsetup_r+0xba>
 8008b6c:	4b25      	ldr	r3, [pc, #148]	; (8008c04 <__swsetup_r+0xd4>)
 8008b6e:	429c      	cmp	r4, r3
 8008b70:	d101      	bne.n	8008b76 <__swsetup_r+0x46>
 8008b72:	68ac      	ldr	r4, [r5, #8]
 8008b74:	e7eb      	b.n	8008b4e <__swsetup_r+0x1e>
 8008b76:	4b24      	ldr	r3, [pc, #144]	; (8008c08 <__swsetup_r+0xd8>)
 8008b78:	429c      	cmp	r4, r3
 8008b7a:	bf08      	it	eq
 8008b7c:	68ec      	ldreq	r4, [r5, #12]
 8008b7e:	e7e6      	b.n	8008b4e <__swsetup_r+0x1e>
 8008b80:	0758      	lsls	r0, r3, #29
 8008b82:	d512      	bpl.n	8008baa <__swsetup_r+0x7a>
 8008b84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b86:	b141      	cbz	r1, 8008b9a <__swsetup_r+0x6a>
 8008b88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b8c:	4299      	cmp	r1, r3
 8008b8e:	d002      	beq.n	8008b96 <__swsetup_r+0x66>
 8008b90:	4630      	mov	r0, r6
 8008b92:	f000 f9a9 	bl	8008ee8 <_free_r>
 8008b96:	2300      	movs	r3, #0
 8008b98:	6363      	str	r3, [r4, #52]	; 0x34
 8008b9a:	89a3      	ldrh	r3, [r4, #12]
 8008b9c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008ba0:	81a3      	strh	r3, [r4, #12]
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	6063      	str	r3, [r4, #4]
 8008ba6:	6923      	ldr	r3, [r4, #16]
 8008ba8:	6023      	str	r3, [r4, #0]
 8008baa:	89a3      	ldrh	r3, [r4, #12]
 8008bac:	f043 0308 	orr.w	r3, r3, #8
 8008bb0:	81a3      	strh	r3, [r4, #12]
 8008bb2:	6923      	ldr	r3, [r4, #16]
 8008bb4:	b94b      	cbnz	r3, 8008bca <__swsetup_r+0x9a>
 8008bb6:	89a3      	ldrh	r3, [r4, #12]
 8008bb8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008bbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008bc0:	d003      	beq.n	8008bca <__swsetup_r+0x9a>
 8008bc2:	4621      	mov	r1, r4
 8008bc4:	4630      	mov	r0, r6
 8008bc6:	f000 f929 	bl	8008e1c <__smakebuf_r>
 8008bca:	89a0      	ldrh	r0, [r4, #12]
 8008bcc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008bd0:	f010 0301 	ands.w	r3, r0, #1
 8008bd4:	d00a      	beq.n	8008bec <__swsetup_r+0xbc>
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	60a3      	str	r3, [r4, #8]
 8008bda:	6963      	ldr	r3, [r4, #20]
 8008bdc:	425b      	negs	r3, r3
 8008bde:	61a3      	str	r3, [r4, #24]
 8008be0:	6923      	ldr	r3, [r4, #16]
 8008be2:	b943      	cbnz	r3, 8008bf6 <__swsetup_r+0xc6>
 8008be4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008be8:	d1ba      	bne.n	8008b60 <__swsetup_r+0x30>
 8008bea:	bd70      	pop	{r4, r5, r6, pc}
 8008bec:	0781      	lsls	r1, r0, #30
 8008bee:	bf58      	it	pl
 8008bf0:	6963      	ldrpl	r3, [r4, #20]
 8008bf2:	60a3      	str	r3, [r4, #8]
 8008bf4:	e7f4      	b.n	8008be0 <__swsetup_r+0xb0>
 8008bf6:	2000      	movs	r0, #0
 8008bf8:	e7f7      	b.n	8008bea <__swsetup_r+0xba>
 8008bfa:	bf00      	nop
 8008bfc:	20000028 	.word	0x20000028
 8008c00:	08009484 	.word	0x08009484
 8008c04:	080094a4 	.word	0x080094a4
 8008c08:	08009464 	.word	0x08009464

08008c0c <_close_r>:
 8008c0c:	b538      	push	{r3, r4, r5, lr}
 8008c0e:	4d06      	ldr	r5, [pc, #24]	; (8008c28 <_close_r+0x1c>)
 8008c10:	2300      	movs	r3, #0
 8008c12:	4604      	mov	r4, r0
 8008c14:	4608      	mov	r0, r1
 8008c16:	602b      	str	r3, [r5, #0]
 8008c18:	f7f8 fc1f 	bl	800145a <_close>
 8008c1c:	1c43      	adds	r3, r0, #1
 8008c1e:	d102      	bne.n	8008c26 <_close_r+0x1a>
 8008c20:	682b      	ldr	r3, [r5, #0]
 8008c22:	b103      	cbz	r3, 8008c26 <_close_r+0x1a>
 8008c24:	6023      	str	r3, [r4, #0]
 8008c26:	bd38      	pop	{r3, r4, r5, pc}
 8008c28:	20012fac 	.word	0x20012fac

08008c2c <__sflush_r>:
 8008c2c:	898a      	ldrh	r2, [r1, #12]
 8008c2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c32:	4605      	mov	r5, r0
 8008c34:	0710      	lsls	r0, r2, #28
 8008c36:	460c      	mov	r4, r1
 8008c38:	d458      	bmi.n	8008cec <__sflush_r+0xc0>
 8008c3a:	684b      	ldr	r3, [r1, #4]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	dc05      	bgt.n	8008c4c <__sflush_r+0x20>
 8008c40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	dc02      	bgt.n	8008c4c <__sflush_r+0x20>
 8008c46:	2000      	movs	r0, #0
 8008c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c4e:	2e00      	cmp	r6, #0
 8008c50:	d0f9      	beq.n	8008c46 <__sflush_r+0x1a>
 8008c52:	2300      	movs	r3, #0
 8008c54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008c58:	682f      	ldr	r7, [r5, #0]
 8008c5a:	602b      	str	r3, [r5, #0]
 8008c5c:	d032      	beq.n	8008cc4 <__sflush_r+0x98>
 8008c5e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008c60:	89a3      	ldrh	r3, [r4, #12]
 8008c62:	075a      	lsls	r2, r3, #29
 8008c64:	d505      	bpl.n	8008c72 <__sflush_r+0x46>
 8008c66:	6863      	ldr	r3, [r4, #4]
 8008c68:	1ac0      	subs	r0, r0, r3
 8008c6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008c6c:	b10b      	cbz	r3, 8008c72 <__sflush_r+0x46>
 8008c6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008c70:	1ac0      	subs	r0, r0, r3
 8008c72:	2300      	movs	r3, #0
 8008c74:	4602      	mov	r2, r0
 8008c76:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c78:	6a21      	ldr	r1, [r4, #32]
 8008c7a:	4628      	mov	r0, r5
 8008c7c:	47b0      	blx	r6
 8008c7e:	1c43      	adds	r3, r0, #1
 8008c80:	89a3      	ldrh	r3, [r4, #12]
 8008c82:	d106      	bne.n	8008c92 <__sflush_r+0x66>
 8008c84:	6829      	ldr	r1, [r5, #0]
 8008c86:	291d      	cmp	r1, #29
 8008c88:	d82c      	bhi.n	8008ce4 <__sflush_r+0xb8>
 8008c8a:	4a2a      	ldr	r2, [pc, #168]	; (8008d34 <__sflush_r+0x108>)
 8008c8c:	40ca      	lsrs	r2, r1
 8008c8e:	07d6      	lsls	r6, r2, #31
 8008c90:	d528      	bpl.n	8008ce4 <__sflush_r+0xb8>
 8008c92:	2200      	movs	r2, #0
 8008c94:	6062      	str	r2, [r4, #4]
 8008c96:	04d9      	lsls	r1, r3, #19
 8008c98:	6922      	ldr	r2, [r4, #16]
 8008c9a:	6022      	str	r2, [r4, #0]
 8008c9c:	d504      	bpl.n	8008ca8 <__sflush_r+0x7c>
 8008c9e:	1c42      	adds	r2, r0, #1
 8008ca0:	d101      	bne.n	8008ca6 <__sflush_r+0x7a>
 8008ca2:	682b      	ldr	r3, [r5, #0]
 8008ca4:	b903      	cbnz	r3, 8008ca8 <__sflush_r+0x7c>
 8008ca6:	6560      	str	r0, [r4, #84]	; 0x54
 8008ca8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008caa:	602f      	str	r7, [r5, #0]
 8008cac:	2900      	cmp	r1, #0
 8008cae:	d0ca      	beq.n	8008c46 <__sflush_r+0x1a>
 8008cb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008cb4:	4299      	cmp	r1, r3
 8008cb6:	d002      	beq.n	8008cbe <__sflush_r+0x92>
 8008cb8:	4628      	mov	r0, r5
 8008cba:	f000 f915 	bl	8008ee8 <_free_r>
 8008cbe:	2000      	movs	r0, #0
 8008cc0:	6360      	str	r0, [r4, #52]	; 0x34
 8008cc2:	e7c1      	b.n	8008c48 <__sflush_r+0x1c>
 8008cc4:	6a21      	ldr	r1, [r4, #32]
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	4628      	mov	r0, r5
 8008cca:	47b0      	blx	r6
 8008ccc:	1c41      	adds	r1, r0, #1
 8008cce:	d1c7      	bne.n	8008c60 <__sflush_r+0x34>
 8008cd0:	682b      	ldr	r3, [r5, #0]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d0c4      	beq.n	8008c60 <__sflush_r+0x34>
 8008cd6:	2b1d      	cmp	r3, #29
 8008cd8:	d001      	beq.n	8008cde <__sflush_r+0xb2>
 8008cda:	2b16      	cmp	r3, #22
 8008cdc:	d101      	bne.n	8008ce2 <__sflush_r+0xb6>
 8008cde:	602f      	str	r7, [r5, #0]
 8008ce0:	e7b1      	b.n	8008c46 <__sflush_r+0x1a>
 8008ce2:	89a3      	ldrh	r3, [r4, #12]
 8008ce4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ce8:	81a3      	strh	r3, [r4, #12]
 8008cea:	e7ad      	b.n	8008c48 <__sflush_r+0x1c>
 8008cec:	690f      	ldr	r7, [r1, #16]
 8008cee:	2f00      	cmp	r7, #0
 8008cf0:	d0a9      	beq.n	8008c46 <__sflush_r+0x1a>
 8008cf2:	0793      	lsls	r3, r2, #30
 8008cf4:	680e      	ldr	r6, [r1, #0]
 8008cf6:	bf08      	it	eq
 8008cf8:	694b      	ldreq	r3, [r1, #20]
 8008cfa:	600f      	str	r7, [r1, #0]
 8008cfc:	bf18      	it	ne
 8008cfe:	2300      	movne	r3, #0
 8008d00:	eba6 0807 	sub.w	r8, r6, r7
 8008d04:	608b      	str	r3, [r1, #8]
 8008d06:	f1b8 0f00 	cmp.w	r8, #0
 8008d0a:	dd9c      	ble.n	8008c46 <__sflush_r+0x1a>
 8008d0c:	6a21      	ldr	r1, [r4, #32]
 8008d0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008d10:	4643      	mov	r3, r8
 8008d12:	463a      	mov	r2, r7
 8008d14:	4628      	mov	r0, r5
 8008d16:	47b0      	blx	r6
 8008d18:	2800      	cmp	r0, #0
 8008d1a:	dc06      	bgt.n	8008d2a <__sflush_r+0xfe>
 8008d1c:	89a3      	ldrh	r3, [r4, #12]
 8008d1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d22:	81a3      	strh	r3, [r4, #12]
 8008d24:	f04f 30ff 	mov.w	r0, #4294967295
 8008d28:	e78e      	b.n	8008c48 <__sflush_r+0x1c>
 8008d2a:	4407      	add	r7, r0
 8008d2c:	eba8 0800 	sub.w	r8, r8, r0
 8008d30:	e7e9      	b.n	8008d06 <__sflush_r+0xda>
 8008d32:	bf00      	nop
 8008d34:	20400001 	.word	0x20400001

08008d38 <_fflush_r>:
 8008d38:	b538      	push	{r3, r4, r5, lr}
 8008d3a:	690b      	ldr	r3, [r1, #16]
 8008d3c:	4605      	mov	r5, r0
 8008d3e:	460c      	mov	r4, r1
 8008d40:	b913      	cbnz	r3, 8008d48 <_fflush_r+0x10>
 8008d42:	2500      	movs	r5, #0
 8008d44:	4628      	mov	r0, r5
 8008d46:	bd38      	pop	{r3, r4, r5, pc}
 8008d48:	b118      	cbz	r0, 8008d52 <_fflush_r+0x1a>
 8008d4a:	6983      	ldr	r3, [r0, #24]
 8008d4c:	b90b      	cbnz	r3, 8008d52 <_fflush_r+0x1a>
 8008d4e:	f7ff f8f3 	bl	8007f38 <__sinit>
 8008d52:	4b14      	ldr	r3, [pc, #80]	; (8008da4 <_fflush_r+0x6c>)
 8008d54:	429c      	cmp	r4, r3
 8008d56:	d11b      	bne.n	8008d90 <_fflush_r+0x58>
 8008d58:	686c      	ldr	r4, [r5, #4]
 8008d5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d0ef      	beq.n	8008d42 <_fflush_r+0xa>
 8008d62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008d64:	07d0      	lsls	r0, r2, #31
 8008d66:	d404      	bmi.n	8008d72 <_fflush_r+0x3a>
 8008d68:	0599      	lsls	r1, r3, #22
 8008d6a:	d402      	bmi.n	8008d72 <_fflush_r+0x3a>
 8008d6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d6e:	f7ff f981 	bl	8008074 <__retarget_lock_acquire_recursive>
 8008d72:	4628      	mov	r0, r5
 8008d74:	4621      	mov	r1, r4
 8008d76:	f7ff ff59 	bl	8008c2c <__sflush_r>
 8008d7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d7c:	07da      	lsls	r2, r3, #31
 8008d7e:	4605      	mov	r5, r0
 8008d80:	d4e0      	bmi.n	8008d44 <_fflush_r+0xc>
 8008d82:	89a3      	ldrh	r3, [r4, #12]
 8008d84:	059b      	lsls	r3, r3, #22
 8008d86:	d4dd      	bmi.n	8008d44 <_fflush_r+0xc>
 8008d88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d8a:	f7ff f974 	bl	8008076 <__retarget_lock_release_recursive>
 8008d8e:	e7d9      	b.n	8008d44 <_fflush_r+0xc>
 8008d90:	4b05      	ldr	r3, [pc, #20]	; (8008da8 <_fflush_r+0x70>)
 8008d92:	429c      	cmp	r4, r3
 8008d94:	d101      	bne.n	8008d9a <_fflush_r+0x62>
 8008d96:	68ac      	ldr	r4, [r5, #8]
 8008d98:	e7df      	b.n	8008d5a <_fflush_r+0x22>
 8008d9a:	4b04      	ldr	r3, [pc, #16]	; (8008dac <_fflush_r+0x74>)
 8008d9c:	429c      	cmp	r4, r3
 8008d9e:	bf08      	it	eq
 8008da0:	68ec      	ldreq	r4, [r5, #12]
 8008da2:	e7da      	b.n	8008d5a <_fflush_r+0x22>
 8008da4:	08009484 	.word	0x08009484
 8008da8:	080094a4 	.word	0x080094a4
 8008dac:	08009464 	.word	0x08009464

08008db0 <_lseek_r>:
 8008db0:	b538      	push	{r3, r4, r5, lr}
 8008db2:	4d07      	ldr	r5, [pc, #28]	; (8008dd0 <_lseek_r+0x20>)
 8008db4:	4604      	mov	r4, r0
 8008db6:	4608      	mov	r0, r1
 8008db8:	4611      	mov	r1, r2
 8008dba:	2200      	movs	r2, #0
 8008dbc:	602a      	str	r2, [r5, #0]
 8008dbe:	461a      	mov	r2, r3
 8008dc0:	f7f8 fb72 	bl	80014a8 <_lseek>
 8008dc4:	1c43      	adds	r3, r0, #1
 8008dc6:	d102      	bne.n	8008dce <_lseek_r+0x1e>
 8008dc8:	682b      	ldr	r3, [r5, #0]
 8008dca:	b103      	cbz	r3, 8008dce <_lseek_r+0x1e>
 8008dcc:	6023      	str	r3, [r4, #0]
 8008dce:	bd38      	pop	{r3, r4, r5, pc}
 8008dd0:	20012fac 	.word	0x20012fac

08008dd4 <__swhatbuf_r>:
 8008dd4:	b570      	push	{r4, r5, r6, lr}
 8008dd6:	460e      	mov	r6, r1
 8008dd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ddc:	2900      	cmp	r1, #0
 8008dde:	b096      	sub	sp, #88	; 0x58
 8008de0:	4614      	mov	r4, r2
 8008de2:	461d      	mov	r5, r3
 8008de4:	da07      	bge.n	8008df6 <__swhatbuf_r+0x22>
 8008de6:	2300      	movs	r3, #0
 8008de8:	602b      	str	r3, [r5, #0]
 8008dea:	89b3      	ldrh	r3, [r6, #12]
 8008dec:	061a      	lsls	r2, r3, #24
 8008dee:	d410      	bmi.n	8008e12 <__swhatbuf_r+0x3e>
 8008df0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008df4:	e00e      	b.n	8008e14 <__swhatbuf_r+0x40>
 8008df6:	466a      	mov	r2, sp
 8008df8:	f000 f8fe 	bl	8008ff8 <_fstat_r>
 8008dfc:	2800      	cmp	r0, #0
 8008dfe:	dbf2      	blt.n	8008de6 <__swhatbuf_r+0x12>
 8008e00:	9a01      	ldr	r2, [sp, #4]
 8008e02:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008e06:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008e0a:	425a      	negs	r2, r3
 8008e0c:	415a      	adcs	r2, r3
 8008e0e:	602a      	str	r2, [r5, #0]
 8008e10:	e7ee      	b.n	8008df0 <__swhatbuf_r+0x1c>
 8008e12:	2340      	movs	r3, #64	; 0x40
 8008e14:	2000      	movs	r0, #0
 8008e16:	6023      	str	r3, [r4, #0]
 8008e18:	b016      	add	sp, #88	; 0x58
 8008e1a:	bd70      	pop	{r4, r5, r6, pc}

08008e1c <__smakebuf_r>:
 8008e1c:	898b      	ldrh	r3, [r1, #12]
 8008e1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008e20:	079d      	lsls	r5, r3, #30
 8008e22:	4606      	mov	r6, r0
 8008e24:	460c      	mov	r4, r1
 8008e26:	d507      	bpl.n	8008e38 <__smakebuf_r+0x1c>
 8008e28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008e2c:	6023      	str	r3, [r4, #0]
 8008e2e:	6123      	str	r3, [r4, #16]
 8008e30:	2301      	movs	r3, #1
 8008e32:	6163      	str	r3, [r4, #20]
 8008e34:	b002      	add	sp, #8
 8008e36:	bd70      	pop	{r4, r5, r6, pc}
 8008e38:	ab01      	add	r3, sp, #4
 8008e3a:	466a      	mov	r2, sp
 8008e3c:	f7ff ffca 	bl	8008dd4 <__swhatbuf_r>
 8008e40:	9900      	ldr	r1, [sp, #0]
 8008e42:	4605      	mov	r5, r0
 8008e44:	4630      	mov	r0, r6
 8008e46:	f7ff f917 	bl	8008078 <_malloc_r>
 8008e4a:	b948      	cbnz	r0, 8008e60 <__smakebuf_r+0x44>
 8008e4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e50:	059a      	lsls	r2, r3, #22
 8008e52:	d4ef      	bmi.n	8008e34 <__smakebuf_r+0x18>
 8008e54:	f023 0303 	bic.w	r3, r3, #3
 8008e58:	f043 0302 	orr.w	r3, r3, #2
 8008e5c:	81a3      	strh	r3, [r4, #12]
 8008e5e:	e7e3      	b.n	8008e28 <__smakebuf_r+0xc>
 8008e60:	4b0d      	ldr	r3, [pc, #52]	; (8008e98 <__smakebuf_r+0x7c>)
 8008e62:	62b3      	str	r3, [r6, #40]	; 0x28
 8008e64:	89a3      	ldrh	r3, [r4, #12]
 8008e66:	6020      	str	r0, [r4, #0]
 8008e68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e6c:	81a3      	strh	r3, [r4, #12]
 8008e6e:	9b00      	ldr	r3, [sp, #0]
 8008e70:	6163      	str	r3, [r4, #20]
 8008e72:	9b01      	ldr	r3, [sp, #4]
 8008e74:	6120      	str	r0, [r4, #16]
 8008e76:	b15b      	cbz	r3, 8008e90 <__smakebuf_r+0x74>
 8008e78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e7c:	4630      	mov	r0, r6
 8008e7e:	f000 f8cd 	bl	800901c <_isatty_r>
 8008e82:	b128      	cbz	r0, 8008e90 <__smakebuf_r+0x74>
 8008e84:	89a3      	ldrh	r3, [r4, #12]
 8008e86:	f023 0303 	bic.w	r3, r3, #3
 8008e8a:	f043 0301 	orr.w	r3, r3, #1
 8008e8e:	81a3      	strh	r3, [r4, #12]
 8008e90:	89a0      	ldrh	r0, [r4, #12]
 8008e92:	4305      	orrs	r5, r0
 8008e94:	81a5      	strh	r5, [r4, #12]
 8008e96:	e7cd      	b.n	8008e34 <__smakebuf_r+0x18>
 8008e98:	08007ed1 	.word	0x08007ed1

08008e9c <memmove>:
 8008e9c:	4288      	cmp	r0, r1
 8008e9e:	b510      	push	{r4, lr}
 8008ea0:	eb01 0402 	add.w	r4, r1, r2
 8008ea4:	d902      	bls.n	8008eac <memmove+0x10>
 8008ea6:	4284      	cmp	r4, r0
 8008ea8:	4623      	mov	r3, r4
 8008eaa:	d807      	bhi.n	8008ebc <memmove+0x20>
 8008eac:	1e43      	subs	r3, r0, #1
 8008eae:	42a1      	cmp	r1, r4
 8008eb0:	d008      	beq.n	8008ec4 <memmove+0x28>
 8008eb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008eb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008eba:	e7f8      	b.n	8008eae <memmove+0x12>
 8008ebc:	4402      	add	r2, r0
 8008ebe:	4601      	mov	r1, r0
 8008ec0:	428a      	cmp	r2, r1
 8008ec2:	d100      	bne.n	8008ec6 <memmove+0x2a>
 8008ec4:	bd10      	pop	{r4, pc}
 8008ec6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008eca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008ece:	e7f7      	b.n	8008ec0 <memmove+0x24>

08008ed0 <__malloc_lock>:
 8008ed0:	4801      	ldr	r0, [pc, #4]	; (8008ed8 <__malloc_lock+0x8>)
 8008ed2:	f7ff b8cf 	b.w	8008074 <__retarget_lock_acquire_recursive>
 8008ed6:	bf00      	nop
 8008ed8:	20012fa4 	.word	0x20012fa4

08008edc <__malloc_unlock>:
 8008edc:	4801      	ldr	r0, [pc, #4]	; (8008ee4 <__malloc_unlock+0x8>)
 8008ede:	f7ff b8ca 	b.w	8008076 <__retarget_lock_release_recursive>
 8008ee2:	bf00      	nop
 8008ee4:	20012fa4 	.word	0x20012fa4

08008ee8 <_free_r>:
 8008ee8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008eea:	2900      	cmp	r1, #0
 8008eec:	d048      	beq.n	8008f80 <_free_r+0x98>
 8008eee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ef2:	9001      	str	r0, [sp, #4]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	f1a1 0404 	sub.w	r4, r1, #4
 8008efa:	bfb8      	it	lt
 8008efc:	18e4      	addlt	r4, r4, r3
 8008efe:	f7ff ffe7 	bl	8008ed0 <__malloc_lock>
 8008f02:	4a20      	ldr	r2, [pc, #128]	; (8008f84 <_free_r+0x9c>)
 8008f04:	9801      	ldr	r0, [sp, #4]
 8008f06:	6813      	ldr	r3, [r2, #0]
 8008f08:	4615      	mov	r5, r2
 8008f0a:	b933      	cbnz	r3, 8008f1a <_free_r+0x32>
 8008f0c:	6063      	str	r3, [r4, #4]
 8008f0e:	6014      	str	r4, [r2, #0]
 8008f10:	b003      	add	sp, #12
 8008f12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f16:	f7ff bfe1 	b.w	8008edc <__malloc_unlock>
 8008f1a:	42a3      	cmp	r3, r4
 8008f1c:	d90b      	bls.n	8008f36 <_free_r+0x4e>
 8008f1e:	6821      	ldr	r1, [r4, #0]
 8008f20:	1862      	adds	r2, r4, r1
 8008f22:	4293      	cmp	r3, r2
 8008f24:	bf04      	itt	eq
 8008f26:	681a      	ldreq	r2, [r3, #0]
 8008f28:	685b      	ldreq	r3, [r3, #4]
 8008f2a:	6063      	str	r3, [r4, #4]
 8008f2c:	bf04      	itt	eq
 8008f2e:	1852      	addeq	r2, r2, r1
 8008f30:	6022      	streq	r2, [r4, #0]
 8008f32:	602c      	str	r4, [r5, #0]
 8008f34:	e7ec      	b.n	8008f10 <_free_r+0x28>
 8008f36:	461a      	mov	r2, r3
 8008f38:	685b      	ldr	r3, [r3, #4]
 8008f3a:	b10b      	cbz	r3, 8008f40 <_free_r+0x58>
 8008f3c:	42a3      	cmp	r3, r4
 8008f3e:	d9fa      	bls.n	8008f36 <_free_r+0x4e>
 8008f40:	6811      	ldr	r1, [r2, #0]
 8008f42:	1855      	adds	r5, r2, r1
 8008f44:	42a5      	cmp	r5, r4
 8008f46:	d10b      	bne.n	8008f60 <_free_r+0x78>
 8008f48:	6824      	ldr	r4, [r4, #0]
 8008f4a:	4421      	add	r1, r4
 8008f4c:	1854      	adds	r4, r2, r1
 8008f4e:	42a3      	cmp	r3, r4
 8008f50:	6011      	str	r1, [r2, #0]
 8008f52:	d1dd      	bne.n	8008f10 <_free_r+0x28>
 8008f54:	681c      	ldr	r4, [r3, #0]
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	6053      	str	r3, [r2, #4]
 8008f5a:	4421      	add	r1, r4
 8008f5c:	6011      	str	r1, [r2, #0]
 8008f5e:	e7d7      	b.n	8008f10 <_free_r+0x28>
 8008f60:	d902      	bls.n	8008f68 <_free_r+0x80>
 8008f62:	230c      	movs	r3, #12
 8008f64:	6003      	str	r3, [r0, #0]
 8008f66:	e7d3      	b.n	8008f10 <_free_r+0x28>
 8008f68:	6825      	ldr	r5, [r4, #0]
 8008f6a:	1961      	adds	r1, r4, r5
 8008f6c:	428b      	cmp	r3, r1
 8008f6e:	bf04      	itt	eq
 8008f70:	6819      	ldreq	r1, [r3, #0]
 8008f72:	685b      	ldreq	r3, [r3, #4]
 8008f74:	6063      	str	r3, [r4, #4]
 8008f76:	bf04      	itt	eq
 8008f78:	1949      	addeq	r1, r1, r5
 8008f7a:	6021      	streq	r1, [r4, #0]
 8008f7c:	6054      	str	r4, [r2, #4]
 8008f7e:	e7c7      	b.n	8008f10 <_free_r+0x28>
 8008f80:	b003      	add	sp, #12
 8008f82:	bd30      	pop	{r4, r5, pc}
 8008f84:	20012e74 	.word	0x20012e74

08008f88 <_realloc_r>:
 8008f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f8a:	4607      	mov	r7, r0
 8008f8c:	4614      	mov	r4, r2
 8008f8e:	460e      	mov	r6, r1
 8008f90:	b921      	cbnz	r1, 8008f9c <_realloc_r+0x14>
 8008f92:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008f96:	4611      	mov	r1, r2
 8008f98:	f7ff b86e 	b.w	8008078 <_malloc_r>
 8008f9c:	b922      	cbnz	r2, 8008fa8 <_realloc_r+0x20>
 8008f9e:	f7ff ffa3 	bl	8008ee8 <_free_r>
 8008fa2:	4625      	mov	r5, r4
 8008fa4:	4628      	mov	r0, r5
 8008fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fa8:	f000 f848 	bl	800903c <_malloc_usable_size_r>
 8008fac:	42a0      	cmp	r0, r4
 8008fae:	d20f      	bcs.n	8008fd0 <_realloc_r+0x48>
 8008fb0:	4621      	mov	r1, r4
 8008fb2:	4638      	mov	r0, r7
 8008fb4:	f7ff f860 	bl	8008078 <_malloc_r>
 8008fb8:	4605      	mov	r5, r0
 8008fba:	2800      	cmp	r0, #0
 8008fbc:	d0f2      	beq.n	8008fa4 <_realloc_r+0x1c>
 8008fbe:	4631      	mov	r1, r6
 8008fc0:	4622      	mov	r2, r4
 8008fc2:	f7fe ff13 	bl	8007dec <memcpy>
 8008fc6:	4631      	mov	r1, r6
 8008fc8:	4638      	mov	r0, r7
 8008fca:	f7ff ff8d 	bl	8008ee8 <_free_r>
 8008fce:	e7e9      	b.n	8008fa4 <_realloc_r+0x1c>
 8008fd0:	4635      	mov	r5, r6
 8008fd2:	e7e7      	b.n	8008fa4 <_realloc_r+0x1c>

08008fd4 <_read_r>:
 8008fd4:	b538      	push	{r3, r4, r5, lr}
 8008fd6:	4d07      	ldr	r5, [pc, #28]	; (8008ff4 <_read_r+0x20>)
 8008fd8:	4604      	mov	r4, r0
 8008fda:	4608      	mov	r0, r1
 8008fdc:	4611      	mov	r1, r2
 8008fde:	2200      	movs	r2, #0
 8008fe0:	602a      	str	r2, [r5, #0]
 8008fe2:	461a      	mov	r2, r3
 8008fe4:	f7f8 fa00 	bl	80013e8 <_read>
 8008fe8:	1c43      	adds	r3, r0, #1
 8008fea:	d102      	bne.n	8008ff2 <_read_r+0x1e>
 8008fec:	682b      	ldr	r3, [r5, #0]
 8008fee:	b103      	cbz	r3, 8008ff2 <_read_r+0x1e>
 8008ff0:	6023      	str	r3, [r4, #0]
 8008ff2:	bd38      	pop	{r3, r4, r5, pc}
 8008ff4:	20012fac 	.word	0x20012fac

08008ff8 <_fstat_r>:
 8008ff8:	b538      	push	{r3, r4, r5, lr}
 8008ffa:	4d07      	ldr	r5, [pc, #28]	; (8009018 <_fstat_r+0x20>)
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	4604      	mov	r4, r0
 8009000:	4608      	mov	r0, r1
 8009002:	4611      	mov	r1, r2
 8009004:	602b      	str	r3, [r5, #0]
 8009006:	f7f8 fa34 	bl	8001472 <_fstat>
 800900a:	1c43      	adds	r3, r0, #1
 800900c:	d102      	bne.n	8009014 <_fstat_r+0x1c>
 800900e:	682b      	ldr	r3, [r5, #0]
 8009010:	b103      	cbz	r3, 8009014 <_fstat_r+0x1c>
 8009012:	6023      	str	r3, [r4, #0]
 8009014:	bd38      	pop	{r3, r4, r5, pc}
 8009016:	bf00      	nop
 8009018:	20012fac 	.word	0x20012fac

0800901c <_isatty_r>:
 800901c:	b538      	push	{r3, r4, r5, lr}
 800901e:	4d06      	ldr	r5, [pc, #24]	; (8009038 <_isatty_r+0x1c>)
 8009020:	2300      	movs	r3, #0
 8009022:	4604      	mov	r4, r0
 8009024:	4608      	mov	r0, r1
 8009026:	602b      	str	r3, [r5, #0]
 8009028:	f7f8 fa33 	bl	8001492 <_isatty>
 800902c:	1c43      	adds	r3, r0, #1
 800902e:	d102      	bne.n	8009036 <_isatty_r+0x1a>
 8009030:	682b      	ldr	r3, [r5, #0]
 8009032:	b103      	cbz	r3, 8009036 <_isatty_r+0x1a>
 8009034:	6023      	str	r3, [r4, #0]
 8009036:	bd38      	pop	{r3, r4, r5, pc}
 8009038:	20012fac 	.word	0x20012fac

0800903c <_malloc_usable_size_r>:
 800903c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009040:	1f18      	subs	r0, r3, #4
 8009042:	2b00      	cmp	r3, #0
 8009044:	bfbc      	itt	lt
 8009046:	580b      	ldrlt	r3, [r1, r0]
 8009048:	18c0      	addlt	r0, r0, r3
 800904a:	4770      	bx	lr

0800904c <_init>:
 800904c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800904e:	bf00      	nop
 8009050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009052:	bc08      	pop	{r3}
 8009054:	469e      	mov	lr, r3
 8009056:	4770      	bx	lr

08009058 <_fini>:
 8009058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800905a:	bf00      	nop
 800905c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800905e:	bc08      	pop	{r3}
 8009060:	469e      	mov	lr, r3
 8009062:	4770      	bx	lr
