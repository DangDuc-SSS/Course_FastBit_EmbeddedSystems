
003LED_Block_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005724  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  080058b4  080058b4  000158b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059f0  080059f0  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  080059f0  080059f0  000159f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059f8  080059f8  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059f8  080059f8  000159f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059fc  080059fc  000159fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08005a00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          00014414  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20014430  20014430  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016d16  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ddd  00000000  00000000  00036d62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001130  00000000  00000000  00039b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fc8  00000000  00000000  0003ac70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023844  00000000  00000000  0003bc38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000134e8  00000000  00000000  0005f47c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d712d  00000000  00000000  00072964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00149a91  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004758  00000000  00000000  00149ae4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800589c 	.word	0x0800589c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	0800589c 	.word	0x0800589c

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20014388 	.word	0x20014388

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b96e 	b.w	8000558 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	468c      	mov	ip, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	f040 8083 	bne.w	80003aa <__udivmoddi4+0x116>
 80002a4:	428a      	cmp	r2, r1
 80002a6:	4617      	mov	r7, r2
 80002a8:	d947      	bls.n	800033a <__udivmoddi4+0xa6>
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	b142      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002b0:	f1c2 0020 	rsb	r0, r2, #32
 80002b4:	fa24 f000 	lsr.w	r0, r4, r0
 80002b8:	4091      	lsls	r1, r2
 80002ba:	4097      	lsls	r7, r2
 80002bc:	ea40 0c01 	orr.w	ip, r0, r1
 80002c0:	4094      	lsls	r4, r2
 80002c2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002c6:	0c23      	lsrs	r3, r4, #16
 80002c8:	fbbc f6f8 	udiv	r6, ip, r8
 80002cc:	fa1f fe87 	uxth.w	lr, r7
 80002d0:	fb08 c116 	mls	r1, r8, r6, ip
 80002d4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002d8:	fb06 f10e 	mul.w	r1, r6, lr
 80002dc:	4299      	cmp	r1, r3
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x60>
 80002e0:	18fb      	adds	r3, r7, r3
 80002e2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002e6:	f080 8119 	bcs.w	800051c <__udivmoddi4+0x288>
 80002ea:	4299      	cmp	r1, r3
 80002ec:	f240 8116 	bls.w	800051c <__udivmoddi4+0x288>
 80002f0:	3e02      	subs	r6, #2
 80002f2:	443b      	add	r3, r7
 80002f4:	1a5b      	subs	r3, r3, r1
 80002f6:	b2a4      	uxth	r4, r4
 80002f8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002fc:	fb08 3310 	mls	r3, r8, r0, r3
 8000300:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000304:	fb00 fe0e 	mul.w	lr, r0, lr
 8000308:	45a6      	cmp	lr, r4
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x8c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	f080 8105 	bcs.w	8000520 <__udivmoddi4+0x28c>
 8000316:	45a6      	cmp	lr, r4
 8000318:	f240 8102 	bls.w	8000520 <__udivmoddi4+0x28c>
 800031c:	3802      	subs	r0, #2
 800031e:	443c      	add	r4, r7
 8000320:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000324:	eba4 040e 	sub.w	r4, r4, lr
 8000328:	2600      	movs	r6, #0
 800032a:	b11d      	cbz	r5, 8000334 <__udivmoddi4+0xa0>
 800032c:	40d4      	lsrs	r4, r2
 800032e:	2300      	movs	r3, #0
 8000330:	e9c5 4300 	strd	r4, r3, [r5]
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	b902      	cbnz	r2, 800033e <__udivmoddi4+0xaa>
 800033c:	deff      	udf	#255	; 0xff
 800033e:	fab2 f282 	clz	r2, r2
 8000342:	2a00      	cmp	r2, #0
 8000344:	d150      	bne.n	80003e8 <__udivmoddi4+0x154>
 8000346:	1bcb      	subs	r3, r1, r7
 8000348:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800034c:	fa1f f887 	uxth.w	r8, r7
 8000350:	2601      	movs	r6, #1
 8000352:	fbb3 fcfe 	udiv	ip, r3, lr
 8000356:	0c21      	lsrs	r1, r4, #16
 8000358:	fb0e 331c 	mls	r3, lr, ip, r3
 800035c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000360:	fb08 f30c 	mul.w	r3, r8, ip
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xe4>
 8000368:	1879      	adds	r1, r7, r1
 800036a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0xe2>
 8000370:	428b      	cmp	r3, r1
 8000372:	f200 80e9 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 8000376:	4684      	mov	ip, r0
 8000378:	1ac9      	subs	r1, r1, r3
 800037a:	b2a3      	uxth	r3, r4
 800037c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000380:	fb0e 1110 	mls	r1, lr, r0, r1
 8000384:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000388:	fb08 f800 	mul.w	r8, r8, r0
 800038c:	45a0      	cmp	r8, r4
 800038e:	d907      	bls.n	80003a0 <__udivmoddi4+0x10c>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 33ff 	add.w	r3, r0, #4294967295
 8000396:	d202      	bcs.n	800039e <__udivmoddi4+0x10a>
 8000398:	45a0      	cmp	r8, r4
 800039a:	f200 80d9 	bhi.w	8000550 <__udivmoddi4+0x2bc>
 800039e:	4618      	mov	r0, r3
 80003a0:	eba4 0408 	sub.w	r4, r4, r8
 80003a4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a8:	e7bf      	b.n	800032a <__udivmoddi4+0x96>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0x12e>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80b1 	beq.w	8000516 <__udivmoddi4+0x282>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x1cc>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0x140>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80b8 	bhi.w	8000544 <__udivmoddi4+0x2b0>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0103 	sbc.w	r1, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	468c      	mov	ip, r1
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0a8      	beq.n	8000334 <__udivmoddi4+0xa0>
 80003e2:	e9c5 4c00 	strd	r4, ip, [r5]
 80003e6:	e7a5      	b.n	8000334 <__udivmoddi4+0xa0>
 80003e8:	f1c2 0320 	rsb	r3, r2, #32
 80003ec:	fa20 f603 	lsr.w	r6, r0, r3
 80003f0:	4097      	lsls	r7, r2
 80003f2:	fa01 f002 	lsl.w	r0, r1, r2
 80003f6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fa:	40d9      	lsrs	r1, r3
 80003fc:	4330      	orrs	r0, r6
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	fbb1 f6fe 	udiv	r6, r1, lr
 8000404:	fa1f f887 	uxth.w	r8, r7
 8000408:	fb0e 1116 	mls	r1, lr, r6, r1
 800040c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000410:	fb06 f108 	mul.w	r1, r6, r8
 8000414:	4299      	cmp	r1, r3
 8000416:	fa04 f402 	lsl.w	r4, r4, r2
 800041a:	d909      	bls.n	8000430 <__udivmoddi4+0x19c>
 800041c:	18fb      	adds	r3, r7, r3
 800041e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000422:	f080 808d 	bcs.w	8000540 <__udivmoddi4+0x2ac>
 8000426:	4299      	cmp	r1, r3
 8000428:	f240 808a 	bls.w	8000540 <__udivmoddi4+0x2ac>
 800042c:	3e02      	subs	r6, #2
 800042e:	443b      	add	r3, r7
 8000430:	1a5b      	subs	r3, r3, r1
 8000432:	b281      	uxth	r1, r0
 8000434:	fbb3 f0fe 	udiv	r0, r3, lr
 8000438:	fb0e 3310 	mls	r3, lr, r0, r3
 800043c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000440:	fb00 f308 	mul.w	r3, r0, r8
 8000444:	428b      	cmp	r3, r1
 8000446:	d907      	bls.n	8000458 <__udivmoddi4+0x1c4>
 8000448:	1879      	adds	r1, r7, r1
 800044a:	f100 3cff 	add.w	ip, r0, #4294967295
 800044e:	d273      	bcs.n	8000538 <__udivmoddi4+0x2a4>
 8000450:	428b      	cmp	r3, r1
 8000452:	d971      	bls.n	8000538 <__udivmoddi4+0x2a4>
 8000454:	3802      	subs	r0, #2
 8000456:	4439      	add	r1, r7
 8000458:	1acb      	subs	r3, r1, r3
 800045a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800045e:	e778      	b.n	8000352 <__udivmoddi4+0xbe>
 8000460:	f1c6 0c20 	rsb	ip, r6, #32
 8000464:	fa03 f406 	lsl.w	r4, r3, r6
 8000468:	fa22 f30c 	lsr.w	r3, r2, ip
 800046c:	431c      	orrs	r4, r3
 800046e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800047a:	fa21 f10c 	lsr.w	r1, r1, ip
 800047e:	431f      	orrs	r7, r3
 8000480:	0c3b      	lsrs	r3, r7, #16
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fa1f f884 	uxth.w	r8, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000492:	fb09 fa08 	mul.w	sl, r9, r8
 8000496:	458a      	cmp	sl, r1
 8000498:	fa02 f206 	lsl.w	r2, r2, r6
 800049c:	fa00 f306 	lsl.w	r3, r0, r6
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x220>
 80004a2:	1861      	adds	r1, r4, r1
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	d248      	bcs.n	800053c <__udivmoddi4+0x2a8>
 80004aa:	458a      	cmp	sl, r1
 80004ac:	d946      	bls.n	800053c <__udivmoddi4+0x2a8>
 80004ae:	f1a9 0902 	sub.w	r9, r9, #2
 80004b2:	4421      	add	r1, r4
 80004b4:	eba1 010a 	sub.w	r1, r1, sl
 80004b8:	b2bf      	uxth	r7, r7
 80004ba:	fbb1 f0fe 	udiv	r0, r1, lr
 80004be:	fb0e 1110 	mls	r1, lr, r0, r1
 80004c2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004c6:	fb00 f808 	mul.w	r8, r0, r8
 80004ca:	45b8      	cmp	r8, r7
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x24a>
 80004ce:	19e7      	adds	r7, r4, r7
 80004d0:	f100 31ff 	add.w	r1, r0, #4294967295
 80004d4:	d22e      	bcs.n	8000534 <__udivmoddi4+0x2a0>
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d92c      	bls.n	8000534 <__udivmoddi4+0x2a0>
 80004da:	3802      	subs	r0, #2
 80004dc:	4427      	add	r7, r4
 80004de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e2:	eba7 0708 	sub.w	r7, r7, r8
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	454f      	cmp	r7, r9
 80004ec:	46c6      	mov	lr, r8
 80004ee:	4649      	mov	r1, r9
 80004f0:	d31a      	bcc.n	8000528 <__udivmoddi4+0x294>
 80004f2:	d017      	beq.n	8000524 <__udivmoddi4+0x290>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x27a>
 80004f6:	ebb3 020e 	subs.w	r2, r3, lr
 80004fa:	eb67 0701 	sbc.w	r7, r7, r1
 80004fe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000502:	40f2      	lsrs	r2, r6
 8000504:	ea4c 0202 	orr.w	r2, ip, r2
 8000508:	40f7      	lsrs	r7, r6
 800050a:	e9c5 2700 	strd	r2, r7, [r5]
 800050e:	2600      	movs	r6, #0
 8000510:	4631      	mov	r1, r6
 8000512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000516:	462e      	mov	r6, r5
 8000518:	4628      	mov	r0, r5
 800051a:	e70b      	b.n	8000334 <__udivmoddi4+0xa0>
 800051c:	4606      	mov	r6, r0
 800051e:	e6e9      	b.n	80002f4 <__udivmoddi4+0x60>
 8000520:	4618      	mov	r0, r3
 8000522:	e6fd      	b.n	8000320 <__udivmoddi4+0x8c>
 8000524:	4543      	cmp	r3, r8
 8000526:	d2e5      	bcs.n	80004f4 <__udivmoddi4+0x260>
 8000528:	ebb8 0e02 	subs.w	lr, r8, r2
 800052c:	eb69 0104 	sbc.w	r1, r9, r4
 8000530:	3801      	subs	r0, #1
 8000532:	e7df      	b.n	80004f4 <__udivmoddi4+0x260>
 8000534:	4608      	mov	r0, r1
 8000536:	e7d2      	b.n	80004de <__udivmoddi4+0x24a>
 8000538:	4660      	mov	r0, ip
 800053a:	e78d      	b.n	8000458 <__udivmoddi4+0x1c4>
 800053c:	4681      	mov	r9, r0
 800053e:	e7b9      	b.n	80004b4 <__udivmoddi4+0x220>
 8000540:	4666      	mov	r6, ip
 8000542:	e775      	b.n	8000430 <__udivmoddi4+0x19c>
 8000544:	4630      	mov	r0, r6
 8000546:	e74a      	b.n	80003de <__udivmoddi4+0x14a>
 8000548:	f1ac 0c02 	sub.w	ip, ip, #2
 800054c:	4439      	add	r1, r7
 800054e:	e713      	b.n	8000378 <__udivmoddi4+0xe4>
 8000550:	3802      	subs	r0, #2
 8000552:	443c      	add	r4, r7
 8000554:	e724      	b.n	80003a0 <__udivmoddi4+0x10c>
 8000556:	bf00      	nop

08000558 <__aeabi_idiv0>:
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop

0800055c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b08a      	sub	sp, #40	; 0x28
 8000560:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000562:	f000 fb77 	bl	8000c54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000566:	f000 f86f 	bl	8000648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056a:	f000 f8d7 	bl	800071c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  // Enable the CYCCNT counter
  DWT_CTRL |= (1 << 0);
 800056e:	4b2e      	ldr	r3, [pc, #184]	; (8000628 <main+0xcc>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4a2d      	ldr	r2, [pc, #180]	; (8000628 <main+0xcc>)
 8000574:	f043 0301 	orr.w	r3, r3, #1
 8000578:	6013      	str	r3, [r2, #0]

  SEGGER_UART_init(500000);
 800057a:	482c      	ldr	r0, [pc, #176]	; (800062c <main+0xd0>)
 800057c:	f003 fb48 	bl	8003c10 <SEGGER_UART_init>

  SEGGER_SYSVIEW_Conf();
 8000580:	f003 f978 	bl	8003874 <SEGGER_SYSVIEW_Conf>

  SEGGER_SYSVIEW_Start();
 8000584:	f004 fb56 	bl	8004c34 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(led_green_handler, "led_green_task", 200, NULL, 2, &task1_handle);
 8000588:	f107 030c 	add.w	r3, r7, #12
 800058c:	9301      	str	r3, [sp, #4]
 800058e:	2302      	movs	r3, #2
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	2300      	movs	r3, #0
 8000594:	22c8      	movs	r2, #200	; 0xc8
 8000596:	4926      	ldr	r1, [pc, #152]	; (8000630 <main+0xd4>)
 8000598:	4826      	ldr	r0, [pc, #152]	; (8000634 <main+0xd8>)
 800059a:	f001 fe1f 	bl	80021dc <xTaskCreate>
 800059e:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 80005a0:	69fb      	ldr	r3, [r7, #28]
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	d00a      	beq.n	80005bc <main+0x60>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005aa:	f383 8811 	msr	BASEPRI, r3
 80005ae:	f3bf 8f6f 	isb	sy
 80005b2:	f3bf 8f4f 	dsb	sy
 80005b6:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005b8:	bf00      	nop
 80005ba:	e7fe      	b.n	80005ba <main+0x5e>

  status = xTaskCreate(led_orange_handler, "led_orange_task", 200, NULL, 2, &task2_handle);
 80005bc:	f107 0308 	add.w	r3, r7, #8
 80005c0:	9301      	str	r3, [sp, #4]
 80005c2:	2302      	movs	r3, #2
 80005c4:	9300      	str	r3, [sp, #0]
 80005c6:	2300      	movs	r3, #0
 80005c8:	22c8      	movs	r2, #200	; 0xc8
 80005ca:	491b      	ldr	r1, [pc, #108]	; (8000638 <main+0xdc>)
 80005cc:	481b      	ldr	r0, [pc, #108]	; (800063c <main+0xe0>)
 80005ce:	f001 fe05 	bl	80021dc <xTaskCreate>
 80005d2:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 80005d4:	69fb      	ldr	r3, [r7, #28]
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d00a      	beq.n	80005f0 <main+0x94>
        __asm volatile
 80005da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005de:	f383 8811 	msr	BASEPRI, r3
 80005e2:	f3bf 8f6f 	isb	sy
 80005e6:	f3bf 8f4f 	dsb	sy
 80005ea:	617b      	str	r3, [r7, #20]
    }
 80005ec:	bf00      	nop
 80005ee:	e7fe      	b.n	80005ee <main+0x92>

  status = xTaskCreate(led_red_handler, "led_red_task", 200, NULL, 2, &task3_handle);
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	9301      	str	r3, [sp, #4]
 80005f4:	2302      	movs	r3, #2
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	2300      	movs	r3, #0
 80005fa:	22c8      	movs	r2, #200	; 0xc8
 80005fc:	4910      	ldr	r1, [pc, #64]	; (8000640 <main+0xe4>)
 80005fe:	4811      	ldr	r0, [pc, #68]	; (8000644 <main+0xe8>)
 8000600:	f001 fdec 	bl	80021dc <xTaskCreate>
 8000604:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 8000606:	69fb      	ldr	r3, [r7, #28]
 8000608:	2b01      	cmp	r3, #1
 800060a:	d00a      	beq.n	8000622 <main+0xc6>
        __asm volatile
 800060c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000610:	f383 8811 	msr	BASEPRI, r3
 8000614:	f3bf 8f6f 	isb	sy
 8000618:	f3bf 8f4f 	dsb	sy
 800061c:	613b      	str	r3, [r7, #16]
    }
 800061e:	bf00      	nop
 8000620:	e7fe      	b.n	8000620 <main+0xc4>

  // start the freeRTOS schedular
  vTaskStartScheduler();
 8000622:	f001 fff7 	bl	8002614 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000626:	e7fe      	b.n	8000626 <main+0xca>
 8000628:	e0001000 	.word	0xe0001000
 800062c:	0007a120 	.word	0x0007a120
 8000630:	080058b4 	.word	0x080058b4
 8000634:	080009d9 	.word	0x080009d9
 8000638:	080058c4 	.word	0x080058c4
 800063c:	08000a09 	.word	0x08000a09
 8000640:	080058d4 	.word	0x080058d4
 8000644:	08000a39 	.word	0x08000a39

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b094      	sub	sp, #80	; 0x50
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 0320 	add.w	r3, r7, #32
 8000652:	2230      	movs	r2, #48	; 0x30
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f005 f918 	bl	800588c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	f107 030c 	add.w	r3, r7, #12
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800066c:	2300      	movs	r3, #0
 800066e:	60bb      	str	r3, [r7, #8]
 8000670:	4b28      	ldr	r3, [pc, #160]	; (8000714 <SystemClock_Config+0xcc>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000674:	4a27      	ldr	r2, [pc, #156]	; (8000714 <SystemClock_Config+0xcc>)
 8000676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800067a:	6413      	str	r3, [r2, #64]	; 0x40
 800067c:	4b25      	ldr	r3, [pc, #148]	; (8000714 <SystemClock_Config+0xcc>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000684:	60bb      	str	r3, [r7, #8]
 8000686:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000688:	2300      	movs	r3, #0
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	4b22      	ldr	r3, [pc, #136]	; (8000718 <SystemClock_Config+0xd0>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a21      	ldr	r2, [pc, #132]	; (8000718 <SystemClock_Config+0xd0>)
 8000692:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000696:	6013      	str	r3, [r2, #0]
 8000698:	4b1f      	ldr	r3, [pc, #124]	; (8000718 <SystemClock_Config+0xd0>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a4:	2302      	movs	r3, #2
 80006a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a8:	2301      	movs	r3, #1
 80006aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ac:	2310      	movs	r3, #16
 80006ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b0:	2302      	movs	r3, #2
 80006b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b4:	2300      	movs	r3, #0
 80006b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006b8:	2308      	movs	r3, #8
 80006ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80006bc:	2332      	movs	r3, #50	; 0x32
 80006be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006c0:	2304      	movs	r3, #4
 80006c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006c4:	2307      	movs	r3, #7
 80006c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c8:	f107 0320 	add.w	r3, r7, #32
 80006cc:	4618      	mov	r0, r3
 80006ce:	f000 fdb5 	bl	800123c <HAL_RCC_OscConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006d8:	f000 f9d8 	bl	8000a8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006dc:	230f      	movs	r3, #15
 80006de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e0:	2302      	movs	r3, #2
 80006e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006f4:	f107 030c 	add.w	r3, r7, #12
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f001 f816 	bl	800172c <HAL_RCC_ClockConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000706:	f000 f9c1 	bl	8000a8c <Error_Handler>
  }
}
 800070a:	bf00      	nop
 800070c:	3750      	adds	r7, #80	; 0x50
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40023800 	.word	0x40023800
 8000718:	40007000 	.word	0x40007000

0800071c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08c      	sub	sp, #48	; 0x30
 8000720:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000722:	f107 031c 	add.w	r3, r7, #28
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	61bb      	str	r3, [r7, #24]
 8000736:	4ba2      	ldr	r3, [pc, #648]	; (80009c0 <MX_GPIO_Init+0x2a4>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4aa1      	ldr	r2, [pc, #644]	; (80009c0 <MX_GPIO_Init+0x2a4>)
 800073c:	f043 0310 	orr.w	r3, r3, #16
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b9f      	ldr	r3, [pc, #636]	; (80009c0 <MX_GPIO_Init+0x2a4>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0310 	and.w	r3, r3, #16
 800074a:	61bb      	str	r3, [r7, #24]
 800074c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	617b      	str	r3, [r7, #20]
 8000752:	4b9b      	ldr	r3, [pc, #620]	; (80009c0 <MX_GPIO_Init+0x2a4>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a9a      	ldr	r2, [pc, #616]	; (80009c0 <MX_GPIO_Init+0x2a4>)
 8000758:	f043 0304 	orr.w	r3, r3, #4
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b98      	ldr	r3, [pc, #608]	; (80009c0 <MX_GPIO_Init+0x2a4>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0304 	and.w	r3, r3, #4
 8000766:	617b      	str	r3, [r7, #20]
 8000768:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]
 800076e:	4b94      	ldr	r3, [pc, #592]	; (80009c0 <MX_GPIO_Init+0x2a4>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a93      	ldr	r2, [pc, #588]	; (80009c0 <MX_GPIO_Init+0x2a4>)
 8000774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b91      	ldr	r3, [pc, #580]	; (80009c0 <MX_GPIO_Init+0x2a4>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000782:	613b      	str	r3, [r7, #16]
 8000784:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	60fb      	str	r3, [r7, #12]
 800078a:	4b8d      	ldr	r3, [pc, #564]	; (80009c0 <MX_GPIO_Init+0x2a4>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a8c      	ldr	r2, [pc, #560]	; (80009c0 <MX_GPIO_Init+0x2a4>)
 8000790:	f043 0301 	orr.w	r3, r3, #1
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b8a      	ldr	r3, [pc, #552]	; (80009c0 <MX_GPIO_Init+0x2a4>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	60bb      	str	r3, [r7, #8]
 80007a6:	4b86      	ldr	r3, [pc, #536]	; (80009c0 <MX_GPIO_Init+0x2a4>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a85      	ldr	r2, [pc, #532]	; (80009c0 <MX_GPIO_Init+0x2a4>)
 80007ac:	f043 0302 	orr.w	r3, r3, #2
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b83      	ldr	r3, [pc, #524]	; (80009c0 <MX_GPIO_Init+0x2a4>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0302 	and.w	r3, r3, #2
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	4b7f      	ldr	r3, [pc, #508]	; (80009c0 <MX_GPIO_Init+0x2a4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a7e      	ldr	r2, [pc, #504]	; (80009c0 <MX_GPIO_Init+0x2a4>)
 80007c8:	f043 0308 	orr.w	r3, r3, #8
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b7c      	ldr	r3, [pc, #496]	; (80009c0 <MX_GPIO_Init+0x2a4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0308 	and.w	r3, r3, #8
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	2108      	movs	r1, #8
 80007de:	4879      	ldr	r0, [pc, #484]	; (80009c4 <MX_GPIO_Init+0x2a8>)
 80007e0:	f000 fcf8 	bl	80011d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007e4:	2201      	movs	r2, #1
 80007e6:	2101      	movs	r1, #1
 80007e8:	4877      	ldr	r0, [pc, #476]	; (80009c8 <MX_GPIO_Init+0x2ac>)
 80007ea:	f000 fcf3 	bl	80011d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007ee:	2200      	movs	r2, #0
 80007f0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007f4:	4875      	ldr	r0, [pc, #468]	; (80009cc <MX_GPIO_Init+0x2b0>)
 80007f6:	f000 fced 	bl	80011d4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007fa:	2308      	movs	r3, #8
 80007fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fe:	2301      	movs	r3, #1
 8000800:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000806:	2300      	movs	r3, #0
 8000808:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800080a:	f107 031c 	add.w	r3, r7, #28
 800080e:	4619      	mov	r1, r3
 8000810:	486c      	ldr	r0, [pc, #432]	; (80009c4 <MX_GPIO_Init+0x2a8>)
 8000812:	f000 fb43 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000816:	2301      	movs	r3, #1
 8000818:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081a:	2301      	movs	r3, #1
 800081c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000822:	2300      	movs	r3, #0
 8000824:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000826:	f107 031c 	add.w	r3, r7, #28
 800082a:	4619      	mov	r1, r3
 800082c:	4866      	ldr	r0, [pc, #408]	; (80009c8 <MX_GPIO_Init+0x2ac>)
 800082e:	f000 fb35 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000832:	2308      	movs	r3, #8
 8000834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000836:	2302      	movs	r3, #2
 8000838:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083e:	2300      	movs	r3, #0
 8000840:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000842:	2305      	movs	r3, #5
 8000844:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000846:	f107 031c 	add.w	r3, r7, #28
 800084a:	4619      	mov	r1, r3
 800084c:	485e      	ldr	r0, [pc, #376]	; (80009c8 <MX_GPIO_Init+0x2ac>)
 800084e:	f000 fb25 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000852:	2301      	movs	r3, #1
 8000854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000856:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800085a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000860:	f107 031c 	add.w	r3, r7, #28
 8000864:	4619      	mov	r1, r3
 8000866:	485a      	ldr	r0, [pc, #360]	; (80009d0 <MX_GPIO_Init+0x2b4>)
 8000868:	f000 fb18 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800086c:	2310      	movs	r3, #16
 800086e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000870:	2302      	movs	r3, #2
 8000872:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000878:	2300      	movs	r3, #0
 800087a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800087c:	2306      	movs	r3, #6
 800087e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000880:	f107 031c 	add.w	r3, r7, #28
 8000884:	4619      	mov	r1, r3
 8000886:	4852      	ldr	r0, [pc, #328]	; (80009d0 <MX_GPIO_Init+0x2b4>)
 8000888:	f000 fb08 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800088c:	23e0      	movs	r3, #224	; 0xe0
 800088e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000890:	2302      	movs	r3, #2
 8000892:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000898:	2300      	movs	r3, #0
 800089a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800089c:	2305      	movs	r3, #5
 800089e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a0:	f107 031c 	add.w	r3, r7, #28
 80008a4:	4619      	mov	r1, r3
 80008a6:	484a      	ldr	r0, [pc, #296]	; (80009d0 <MX_GPIO_Init+0x2b4>)
 80008a8:	f000 faf8 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008ac:	2304      	movs	r3, #4
 80008ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b0:	2300      	movs	r3, #0
 80008b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008b8:	f107 031c 	add.w	r3, r7, #28
 80008bc:	4619      	mov	r1, r3
 80008be:	4845      	ldr	r0, [pc, #276]	; (80009d4 <MX_GPIO_Init+0x2b8>)
 80008c0:	f000 faec 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ca:	2302      	movs	r3, #2
 80008cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008d6:	2305      	movs	r3, #5
 80008d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	4619      	mov	r1, r3
 80008e0:	483c      	ldr	r0, [pc, #240]	; (80009d4 <MX_GPIO_Init+0x2b8>)
 80008e2:	f000 fadb 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008e6:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008ea:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ec:	2301      	movs	r3, #1
 80008ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2300      	movs	r3, #0
 80008f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008f8:	f107 031c 	add.w	r3, r7, #28
 80008fc:	4619      	mov	r1, r3
 80008fe:	4833      	ldr	r0, [pc, #204]	; (80009cc <MX_GPIO_Init+0x2b0>)
 8000900:	f000 facc 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000904:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090a:	2302      	movs	r3, #2
 800090c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000912:	2300      	movs	r3, #0
 8000914:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000916:	2306      	movs	r3, #6
 8000918:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	4619      	mov	r1, r3
 8000920:	4829      	ldr	r0, [pc, #164]	; (80009c8 <MX_GPIO_Init+0x2ac>)
 8000922:	f000 fabb 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000926:	f44f 7300 	mov.w	r3, #512	; 0x200
 800092a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800092c:	2300      	movs	r3, #0
 800092e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000934:	f107 031c 	add.w	r3, r7, #28
 8000938:	4619      	mov	r1, r3
 800093a:	4825      	ldr	r0, [pc, #148]	; (80009d0 <MX_GPIO_Init+0x2b4>)
 800093c:	f000 faae 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000940:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000946:	2302      	movs	r3, #2
 8000948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2300      	movs	r3, #0
 8000950:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000952:	230a      	movs	r3, #10
 8000954:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000956:	f107 031c 	add.w	r3, r7, #28
 800095a:	4619      	mov	r1, r3
 800095c:	481c      	ldr	r0, [pc, #112]	; (80009d0 <MX_GPIO_Init+0x2b4>)
 800095e:	f000 fa9d 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000962:	2320      	movs	r3, #32
 8000964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000966:	2300      	movs	r3, #0
 8000968:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	4619      	mov	r1, r3
 8000974:	4815      	ldr	r0, [pc, #84]	; (80009cc <MX_GPIO_Init+0x2b0>)
 8000976:	f000 fa91 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800097a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800097e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000980:	2312      	movs	r3, #18
 8000982:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000988:	2300      	movs	r3, #0
 800098a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800098c:	2304      	movs	r3, #4
 800098e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000990:	f107 031c 	add.w	r3, r7, #28
 8000994:	4619      	mov	r1, r3
 8000996:	480f      	ldr	r0, [pc, #60]	; (80009d4 <MX_GPIO_Init+0x2b8>)
 8000998:	f000 fa80 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800099c:	2302      	movs	r3, #2
 800099e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009a0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	4804      	ldr	r0, [pc, #16]	; (80009c4 <MX_GPIO_Init+0x2a8>)
 80009b2:	f000 fa73 	bl	8000e9c <HAL_GPIO_Init>

}
 80009b6:	bf00      	nop
 80009b8:	3730      	adds	r7, #48	; 0x30
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40023800 	.word	0x40023800
 80009c4:	40021000 	.word	0x40021000
 80009c8:	40020800 	.word	0x40020800
 80009cc:	40020c00 	.word	0x40020c00
 80009d0:	40020000 	.word	0x40020000
 80009d4:	40020400 	.word	0x40020400

080009d8 <led_green_handler>:

/* USER CODE BEGIN 4 */
static void led_green_handler(void *parameters)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;

	last_wakeup_time = xTaskGetTickCount();
 80009e0:	f001 ff82 	bl	80028e8 <xTaskGetTickCount>
 80009e4:	4603      	mov	r3, r0
 80009e6:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		//SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 80009e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009ec:	4805      	ldr	r0, [pc, #20]	; (8000a04 <led_green_handler+0x2c>)
 80009ee:	f000 fc0a 	bl	8001206 <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&last_wakeup_time, pdMS_TO_TICKS(1000));
 80009f2:	f107 030c 	add.w	r3, r7, #12
 80009f6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009fa:	4618      	mov	r0, r3
 80009fc:	f001 fd88 	bl	8002510 <xTaskDelayUntil>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 8000a00:	e7f2      	b.n	80009e8 <led_green_handler+0x10>
 8000a02:	bf00      	nop
 8000a04:	40020c00 	.word	0x40020c00

08000a08 <led_orange_handler>:
	}
}

static void led_orange_handler(void *parameters)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;

	last_wakeup_time = xTaskGetTickCount();
 8000a10:	f001 ff6a 	bl	80028e8 <xTaskGetTickCount>
 8000a14:	4603      	mov	r3, r0
 8000a16:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		//SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
		HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN);
 8000a18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a1c:	4805      	ldr	r0, [pc, #20]	; (8000a34 <led_orange_handler+0x2c>)
 8000a1e:	f000 fbf2 	bl	8001206 <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&last_wakeup_time, pdMS_TO_TICKS(800));
 8000a22:	f107 030c 	add.w	r3, r7, #12
 8000a26:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f001 fd70 	bl	8002510 <xTaskDelayUntil>
		HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN);
 8000a30:	e7f2      	b.n	8000a18 <led_orange_handler+0x10>
 8000a32:	bf00      	nop
 8000a34:	40020c00 	.word	0x40020c00

08000a38 <led_red_handler>:
	}
}

static void led_red_handler(void *parameters)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;

	last_wakeup_time = xTaskGetTickCount();
 8000a40:	f001 ff52 	bl	80028e8 <xTaskGetTickCount>
 8000a44:	4603      	mov	r3, r0
 8000a46:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		//SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000a48:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a4c:	4805      	ldr	r0, [pc, #20]	; (8000a64 <led_red_handler+0x2c>)
 8000a4e:	f000 fbda 	bl	8001206 <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&last_wakeup_time, pdMS_TO_TICKS(400));
 8000a52:	f107 030c 	add.w	r3, r7, #12
 8000a56:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f001 fd58 	bl	8002510 <xTaskDelayUntil>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000a60:	e7f2      	b.n	8000a48 <led_red_handler+0x10>
 8000a62:	bf00      	nop
 8000a64:	40020c00 	.word	0x40020c00

08000a68 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a04      	ldr	r2, [pc, #16]	; (8000a88 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d101      	bne.n	8000a7e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a7a:	f000 f90d 	bl	8000c98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40001000 	.word	0x40001000

08000a8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a90:	b672      	cpsid	i
}
 8000a92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <Error_Handler+0x8>
	...

08000a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	607b      	str	r3, [r7, #4]
 8000aa2:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa6:	4a0f      	ldr	r2, [pc, #60]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000aa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aac:	6453      	str	r3, [r2, #68]	; 0x44
 8000aae:	4b0d      	ldr	r3, [pc, #52]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	603b      	str	r3, [r7, #0]
 8000abe:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac2:	4a08      	ldr	r2, [pc, #32]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aca:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 8000ad6:	f002 fb17 	bl	8003108 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40023800 	.word	0x40023800

08000ae8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08c      	sub	sp, #48	; 0x30
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000af0:	2300      	movs	r3, #0
 8000af2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000af4:	2300      	movs	r3, #0
 8000af6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000af8:	2200      	movs	r2, #0
 8000afa:	6879      	ldr	r1, [r7, #4]
 8000afc:	2036      	movs	r0, #54	; 0x36
 8000afe:	f000 f9a3 	bl	8000e48 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b02:	2036      	movs	r0, #54	; 0x36
 8000b04:	f000 f9bc 	bl	8000e80 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	4b1f      	ldr	r3, [pc, #124]	; (8000b8c <HAL_InitTick+0xa4>)
 8000b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b10:	4a1e      	ldr	r2, [pc, #120]	; (8000b8c <HAL_InitTick+0xa4>)
 8000b12:	f043 0310 	orr.w	r3, r3, #16
 8000b16:	6413      	str	r3, [r2, #64]	; 0x40
 8000b18:	4b1c      	ldr	r3, [pc, #112]	; (8000b8c <HAL_InitTick+0xa4>)
 8000b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1c:	f003 0310 	and.w	r3, r3, #16
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b24:	f107 0210 	add.w	r2, r7, #16
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	4611      	mov	r1, r2
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f000 ffe4 	bl	8001afc <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000b34:	f000 ffce 	bl	8001ad4 <HAL_RCC_GetPCLK1Freq>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	005b      	lsls	r3, r3, #1
 8000b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b40:	4a13      	ldr	r2, [pc, #76]	; (8000b90 <HAL_InitTick+0xa8>)
 8000b42:	fba2 2303 	umull	r2, r3, r2, r3
 8000b46:	0c9b      	lsrs	r3, r3, #18
 8000b48:	3b01      	subs	r3, #1
 8000b4a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b4c:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <HAL_InitTick+0xac>)
 8000b4e:	4a12      	ldr	r2, [pc, #72]	; (8000b98 <HAL_InitTick+0xb0>)
 8000b50:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b52:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <HAL_InitTick+0xac>)
 8000b54:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b58:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b5a:	4a0e      	ldr	r2, [pc, #56]	; (8000b94 <HAL_InitTick+0xac>)
 8000b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b5e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b60:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <HAL_InitTick+0xac>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b66:	4b0b      	ldr	r3, [pc, #44]	; (8000b94 <HAL_InitTick+0xac>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000b6c:	4809      	ldr	r0, [pc, #36]	; (8000b94 <HAL_InitTick+0xac>)
 8000b6e:	f000 fff7 	bl	8001b60 <HAL_TIM_Base_Init>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d104      	bne.n	8000b82 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000b78:	4806      	ldr	r0, [pc, #24]	; (8000b94 <HAL_InitTick+0xac>)
 8000b7a:	f001 f84b 	bl	8001c14 <HAL_TIM_Base_Start_IT>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	e000      	b.n	8000b84 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b82:	2301      	movs	r3, #1
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3730      	adds	r7, #48	; 0x30
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	431bde83 	.word	0x431bde83
 8000b94:	2001433c 	.word	0x2001433c
 8000b98:	40001000 	.word	0x40001000

08000b9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <NMI_Handler+0x4>

08000ba2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ba6:	e7fe      	b.n	8000ba6 <HardFault_Handler+0x4>

08000ba8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bac:	e7fe      	b.n	8000bac <MemManage_Handler+0x4>

08000bae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bb2:	e7fe      	b.n	8000bb2 <BusFault_Handler+0x4>

08000bb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <UsageFault_Handler+0x4>

08000bba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000bcc:	4802      	ldr	r0, [pc, #8]	; (8000bd8 <TIM6_DAC_IRQHandler+0x10>)
 8000bce:	f001 f891 	bl	8001cf4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	2001433c 	.word	0x2001433c

08000bdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <SystemInit+0x20>)
 8000be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000be6:	4a05      	ldr	r2, [pc, #20]	; (8000bfc <SystemInit+0x20>)
 8000be8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c04:	480d      	ldr	r0, [pc, #52]	; (8000c3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c06:	490e      	ldr	r1, [pc, #56]	; (8000c40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c08:	4a0e      	ldr	r2, [pc, #56]	; (8000c44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c0c:	e002      	b.n	8000c14 <LoopCopyDataInit>

08000c0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c12:	3304      	adds	r3, #4

08000c14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c18:	d3f9      	bcc.n	8000c0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c1a:	4a0b      	ldr	r2, [pc, #44]	; (8000c48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c1c:	4c0b      	ldr	r4, [pc, #44]	; (8000c4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c20:	e001      	b.n	8000c26 <LoopFillZerobss>

08000c22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c24:	3204      	adds	r2, #4

08000c26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c28:	d3fb      	bcc.n	8000c22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c2a:	f7ff ffd7 	bl	8000bdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c2e:	f004 fded 	bl	800580c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c32:	f7ff fc93 	bl	800055c <main>
  bx  lr    
 8000c36:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c40:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000c44:	08005a00 	.word	0x08005a00
  ldr r2, =_sbss
 8000c48:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000c4c:	20014430 	.word	0x20014430

08000c50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c50:	e7fe      	b.n	8000c50 <ADC_IRQHandler>
	...

08000c54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c58:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <HAL_Init+0x40>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a0d      	ldr	r2, [pc, #52]	; (8000c94 <HAL_Init+0x40>)
 8000c5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c64:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <HAL_Init+0x40>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a0a      	ldr	r2, [pc, #40]	; (8000c94 <HAL_Init+0x40>)
 8000c6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c70:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <HAL_Init+0x40>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a07      	ldr	r2, [pc, #28]	; (8000c94 <HAL_Init+0x40>)
 8000c76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c7c:	2003      	movs	r0, #3
 8000c7e:	f000 f8d8 	bl	8000e32 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c82:	200f      	movs	r0, #15
 8000c84:	f7ff ff30 	bl	8000ae8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c88:	f7ff ff06 	bl	8000a98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c8c:	2300      	movs	r3, #0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40023c00 	.word	0x40023c00

08000c98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <HAL_IncTick+0x20>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <HAL_IncTick+0x24>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	4a04      	ldr	r2, [pc, #16]	; (8000cbc <HAL_IncTick+0x24>)
 8000caa:	6013      	str	r3, [r2, #0]
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	20000008 	.word	0x20000008
 8000cbc:	20014384 	.word	0x20014384

08000cc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc4:	4b03      	ldr	r3, [pc, #12]	; (8000cd4 <HAL_GetTick+0x14>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	20014384 	.word	0x20014384

08000cd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	f003 0307 	and.w	r3, r3, #7
 8000ce6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce8:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__NVIC_SetPriorityGrouping+0x44>)
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cee:	68ba      	ldr	r2, [r7, #8]
 8000cf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d0a:	4a04      	ldr	r2, [pc, #16]	; (8000d1c <__NVIC_SetPriorityGrouping+0x44>)
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	60d3      	str	r3, [r2, #12]
}
 8000d10:	bf00      	nop
 8000d12:	3714      	adds	r7, #20
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d24:	4b04      	ldr	r3, [pc, #16]	; (8000d38 <__NVIC_GetPriorityGrouping+0x18>)
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	0a1b      	lsrs	r3, r3, #8
 8000d2a:	f003 0307 	and.w	r3, r3, #7
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	db0b      	blt.n	8000d66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	f003 021f 	and.w	r2, r3, #31
 8000d54:	4907      	ldr	r1, [pc, #28]	; (8000d74 <__NVIC_EnableIRQ+0x38>)
 8000d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5a:	095b      	lsrs	r3, r3, #5
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d66:	bf00      	nop
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	e000e100 	.word	0xe000e100

08000d78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	6039      	str	r1, [r7, #0]
 8000d82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	db0a      	blt.n	8000da2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	b2da      	uxtb	r2, r3
 8000d90:	490c      	ldr	r1, [pc, #48]	; (8000dc4 <__NVIC_SetPriority+0x4c>)
 8000d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d96:	0112      	lsls	r2, r2, #4
 8000d98:	b2d2      	uxtb	r2, r2
 8000d9a:	440b      	add	r3, r1
 8000d9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000da0:	e00a      	b.n	8000db8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	b2da      	uxtb	r2, r3
 8000da6:	4908      	ldr	r1, [pc, #32]	; (8000dc8 <__NVIC_SetPriority+0x50>)
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	f003 030f 	and.w	r3, r3, #15
 8000dae:	3b04      	subs	r3, #4
 8000db0:	0112      	lsls	r2, r2, #4
 8000db2:	b2d2      	uxtb	r2, r2
 8000db4:	440b      	add	r3, r1
 8000db6:	761a      	strb	r2, [r3, #24]
}
 8000db8:	bf00      	nop
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	e000e100 	.word	0xe000e100
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b089      	sub	sp, #36	; 0x24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	f003 0307 	and.w	r3, r3, #7
 8000dde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	f1c3 0307 	rsb	r3, r3, #7
 8000de6:	2b04      	cmp	r3, #4
 8000de8:	bf28      	it	cs
 8000dea:	2304      	movcs	r3, #4
 8000dec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	3304      	adds	r3, #4
 8000df2:	2b06      	cmp	r3, #6
 8000df4:	d902      	bls.n	8000dfc <NVIC_EncodePriority+0x30>
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	3b03      	subs	r3, #3
 8000dfa:	e000      	b.n	8000dfe <NVIC_EncodePriority+0x32>
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e00:	f04f 32ff 	mov.w	r2, #4294967295
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	43da      	mvns	r2, r3
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	401a      	ands	r2, r3
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e14:	f04f 31ff 	mov.w	r1, #4294967295
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1e:	43d9      	mvns	r1, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e24:	4313      	orrs	r3, r2
         );
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3724      	adds	r7, #36	; 0x24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr

08000e32 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b082      	sub	sp, #8
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f7ff ff4c 	bl	8000cd8 <__NVIC_SetPriorityGrouping>
}
 8000e40:	bf00      	nop
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
 8000e54:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e56:	2300      	movs	r3, #0
 8000e58:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e5a:	f7ff ff61 	bl	8000d20 <__NVIC_GetPriorityGrouping>
 8000e5e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e60:	687a      	ldr	r2, [r7, #4]
 8000e62:	68b9      	ldr	r1, [r7, #8]
 8000e64:	6978      	ldr	r0, [r7, #20]
 8000e66:	f7ff ffb1 	bl	8000dcc <NVIC_EncodePriority>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e70:	4611      	mov	r1, r2
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff ff80 	bl	8000d78 <__NVIC_SetPriority>
}
 8000e78:	bf00      	nop
 8000e7a:	3718      	adds	r7, #24
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff ff54 	bl	8000d3c <__NVIC_EnableIRQ>
}
 8000e94:	bf00      	nop
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b089      	sub	sp, #36	; 0x24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61fb      	str	r3, [r7, #28]
 8000eb6:	e16b      	b.n	8001190 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000eb8:	2201      	movs	r2, #1
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	697a      	ldr	r2, [r7, #20]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	f040 815a 	bne.w	800118a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f003 0303 	and.w	r3, r3, #3
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d005      	beq.n	8000eee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d130      	bne.n	8000f50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	2203      	movs	r2, #3
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	43db      	mvns	r3, r3
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	4013      	ands	r3, r2
 8000f04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	68da      	ldr	r2, [r3, #12]
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f24:	2201      	movs	r2, #1
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	4013      	ands	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	091b      	lsrs	r3, r3, #4
 8000f3a:	f003 0201 	and.w	r2, r3, #1
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f003 0303 	and.w	r3, r3, #3
 8000f58:	2b03      	cmp	r3, #3
 8000f5a:	d017      	beq.n	8000f8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	2203      	movs	r2, #3
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4013      	ands	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	689a      	ldr	r2, [r3, #8]
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f003 0303 	and.w	r3, r3, #3
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d123      	bne.n	8000fe0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	08da      	lsrs	r2, r3, #3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3208      	adds	r2, #8
 8000fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	f003 0307 	and.w	r3, r3, #7
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	220f      	movs	r2, #15
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	691a      	ldr	r2, [r3, #16]
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	08da      	lsrs	r2, r3, #3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	3208      	adds	r2, #8
 8000fda:	69b9      	ldr	r1, [r7, #24]
 8000fdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	2203      	movs	r2, #3
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f003 0203 	and.w	r2, r3, #3
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4313      	orrs	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800101c:	2b00      	cmp	r3, #0
 800101e:	f000 80b4 	beq.w	800118a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	4b60      	ldr	r3, [pc, #384]	; (80011a8 <HAL_GPIO_Init+0x30c>)
 8001028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102a:	4a5f      	ldr	r2, [pc, #380]	; (80011a8 <HAL_GPIO_Init+0x30c>)
 800102c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001030:	6453      	str	r3, [r2, #68]	; 0x44
 8001032:	4b5d      	ldr	r3, [pc, #372]	; (80011a8 <HAL_GPIO_Init+0x30c>)
 8001034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001036:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800103e:	4a5b      	ldr	r2, [pc, #364]	; (80011ac <HAL_GPIO_Init+0x310>)
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	089b      	lsrs	r3, r3, #2
 8001044:	3302      	adds	r3, #2
 8001046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800104a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	f003 0303 	and.w	r3, r3, #3
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	220f      	movs	r2, #15
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	43db      	mvns	r3, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4013      	ands	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a52      	ldr	r2, [pc, #328]	; (80011b0 <HAL_GPIO_Init+0x314>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d02b      	beq.n	80010c2 <HAL_GPIO_Init+0x226>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a51      	ldr	r2, [pc, #324]	; (80011b4 <HAL_GPIO_Init+0x318>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d025      	beq.n	80010be <HAL_GPIO_Init+0x222>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a50      	ldr	r2, [pc, #320]	; (80011b8 <HAL_GPIO_Init+0x31c>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d01f      	beq.n	80010ba <HAL_GPIO_Init+0x21e>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a4f      	ldr	r2, [pc, #316]	; (80011bc <HAL_GPIO_Init+0x320>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d019      	beq.n	80010b6 <HAL_GPIO_Init+0x21a>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a4e      	ldr	r2, [pc, #312]	; (80011c0 <HAL_GPIO_Init+0x324>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d013      	beq.n	80010b2 <HAL_GPIO_Init+0x216>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a4d      	ldr	r2, [pc, #308]	; (80011c4 <HAL_GPIO_Init+0x328>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d00d      	beq.n	80010ae <HAL_GPIO_Init+0x212>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a4c      	ldr	r2, [pc, #304]	; (80011c8 <HAL_GPIO_Init+0x32c>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d007      	beq.n	80010aa <HAL_GPIO_Init+0x20e>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a4b      	ldr	r2, [pc, #300]	; (80011cc <HAL_GPIO_Init+0x330>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d101      	bne.n	80010a6 <HAL_GPIO_Init+0x20a>
 80010a2:	2307      	movs	r3, #7
 80010a4:	e00e      	b.n	80010c4 <HAL_GPIO_Init+0x228>
 80010a6:	2308      	movs	r3, #8
 80010a8:	e00c      	b.n	80010c4 <HAL_GPIO_Init+0x228>
 80010aa:	2306      	movs	r3, #6
 80010ac:	e00a      	b.n	80010c4 <HAL_GPIO_Init+0x228>
 80010ae:	2305      	movs	r3, #5
 80010b0:	e008      	b.n	80010c4 <HAL_GPIO_Init+0x228>
 80010b2:	2304      	movs	r3, #4
 80010b4:	e006      	b.n	80010c4 <HAL_GPIO_Init+0x228>
 80010b6:	2303      	movs	r3, #3
 80010b8:	e004      	b.n	80010c4 <HAL_GPIO_Init+0x228>
 80010ba:	2302      	movs	r3, #2
 80010bc:	e002      	b.n	80010c4 <HAL_GPIO_Init+0x228>
 80010be:	2301      	movs	r3, #1
 80010c0:	e000      	b.n	80010c4 <HAL_GPIO_Init+0x228>
 80010c2:	2300      	movs	r3, #0
 80010c4:	69fa      	ldr	r2, [r7, #28]
 80010c6:	f002 0203 	and.w	r2, r2, #3
 80010ca:	0092      	lsls	r2, r2, #2
 80010cc:	4093      	lsls	r3, r2
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010d4:	4935      	ldr	r1, [pc, #212]	; (80011ac <HAL_GPIO_Init+0x310>)
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	089b      	lsrs	r3, r3, #2
 80010da:	3302      	adds	r3, #2
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010e2:	4b3b      	ldr	r3, [pc, #236]	; (80011d0 <HAL_GPIO_Init+0x334>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	43db      	mvns	r3, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4013      	ands	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d003      	beq.n	8001106 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	4313      	orrs	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001106:	4a32      	ldr	r2, [pc, #200]	; (80011d0 <HAL_GPIO_Init+0x334>)
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800110c:	4b30      	ldr	r3, [pc, #192]	; (80011d0 <HAL_GPIO_Init+0x334>)
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	43db      	mvns	r3, r3
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4013      	ands	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001124:	2b00      	cmp	r3, #0
 8001126:	d003      	beq.n	8001130 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	4313      	orrs	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001130:	4a27      	ldr	r2, [pc, #156]	; (80011d0 <HAL_GPIO_Init+0x334>)
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001136:	4b26      	ldr	r3, [pc, #152]	; (80011d0 <HAL_GPIO_Init+0x334>)
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	43db      	mvns	r3, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4013      	ands	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d003      	beq.n	800115a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	4313      	orrs	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800115a:	4a1d      	ldr	r2, [pc, #116]	; (80011d0 <HAL_GPIO_Init+0x334>)
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001160:	4b1b      	ldr	r3, [pc, #108]	; (80011d0 <HAL_GPIO_Init+0x334>)
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	43db      	mvns	r3, r3
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4013      	ands	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d003      	beq.n	8001184 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	4313      	orrs	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001184:	4a12      	ldr	r2, [pc, #72]	; (80011d0 <HAL_GPIO_Init+0x334>)
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	3301      	adds	r3, #1
 800118e:	61fb      	str	r3, [r7, #28]
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	2b0f      	cmp	r3, #15
 8001194:	f67f ae90 	bls.w	8000eb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001198:	bf00      	nop
 800119a:	bf00      	nop
 800119c:	3724      	adds	r7, #36	; 0x24
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40013800 	.word	0x40013800
 80011b0:	40020000 	.word	0x40020000
 80011b4:	40020400 	.word	0x40020400
 80011b8:	40020800 	.word	0x40020800
 80011bc:	40020c00 	.word	0x40020c00
 80011c0:	40021000 	.word	0x40021000
 80011c4:	40021400 	.word	0x40021400
 80011c8:	40021800 	.word	0x40021800
 80011cc:	40021c00 	.word	0x40021c00
 80011d0:	40013c00 	.word	0x40013c00

080011d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	460b      	mov	r3, r1
 80011de:	807b      	strh	r3, [r7, #2]
 80011e0:	4613      	mov	r3, r2
 80011e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011e4:	787b      	ldrb	r3, [r7, #1]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d003      	beq.n	80011f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011ea:	887a      	ldrh	r2, [r7, #2]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011f0:	e003      	b.n	80011fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011f2:	887b      	ldrh	r3, [r7, #2]
 80011f4:	041a      	lsls	r2, r3, #16
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	619a      	str	r2, [r3, #24]
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001206:	b480      	push	{r7}
 8001208:	b085      	sub	sp, #20
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
 800120e:	460b      	mov	r3, r1
 8001210:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	695b      	ldr	r3, [r3, #20]
 8001216:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001218:	887a      	ldrh	r2, [r7, #2]
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	4013      	ands	r3, r2
 800121e:	041a      	lsls	r2, r3, #16
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	43d9      	mvns	r1, r3
 8001224:	887b      	ldrh	r3, [r7, #2]
 8001226:	400b      	ands	r3, r1
 8001228:	431a      	orrs	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	619a      	str	r2, [r3, #24]
}
 800122e:	bf00      	nop
 8001230:	3714      	adds	r7, #20
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
	...

0800123c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d101      	bne.n	800124e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e264      	b.n	8001718 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	2b00      	cmp	r3, #0
 8001258:	d075      	beq.n	8001346 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800125a:	4ba3      	ldr	r3, [pc, #652]	; (80014e8 <HAL_RCC_OscConfig+0x2ac>)
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	f003 030c 	and.w	r3, r3, #12
 8001262:	2b04      	cmp	r3, #4
 8001264:	d00c      	beq.n	8001280 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001266:	4ba0      	ldr	r3, [pc, #640]	; (80014e8 <HAL_RCC_OscConfig+0x2ac>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800126e:	2b08      	cmp	r3, #8
 8001270:	d112      	bne.n	8001298 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001272:	4b9d      	ldr	r3, [pc, #628]	; (80014e8 <HAL_RCC_OscConfig+0x2ac>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800127a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800127e:	d10b      	bne.n	8001298 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001280:	4b99      	ldr	r3, [pc, #612]	; (80014e8 <HAL_RCC_OscConfig+0x2ac>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d05b      	beq.n	8001344 <HAL_RCC_OscConfig+0x108>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d157      	bne.n	8001344 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e23f      	b.n	8001718 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012a0:	d106      	bne.n	80012b0 <HAL_RCC_OscConfig+0x74>
 80012a2:	4b91      	ldr	r3, [pc, #580]	; (80014e8 <HAL_RCC_OscConfig+0x2ac>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a90      	ldr	r2, [pc, #576]	; (80014e8 <HAL_RCC_OscConfig+0x2ac>)
 80012a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012ac:	6013      	str	r3, [r2, #0]
 80012ae:	e01d      	b.n	80012ec <HAL_RCC_OscConfig+0xb0>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012b8:	d10c      	bne.n	80012d4 <HAL_RCC_OscConfig+0x98>
 80012ba:	4b8b      	ldr	r3, [pc, #556]	; (80014e8 <HAL_RCC_OscConfig+0x2ac>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a8a      	ldr	r2, [pc, #552]	; (80014e8 <HAL_RCC_OscConfig+0x2ac>)
 80012c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012c4:	6013      	str	r3, [r2, #0]
 80012c6:	4b88      	ldr	r3, [pc, #544]	; (80014e8 <HAL_RCC_OscConfig+0x2ac>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a87      	ldr	r2, [pc, #540]	; (80014e8 <HAL_RCC_OscConfig+0x2ac>)
 80012cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012d0:	6013      	str	r3, [r2, #0]
 80012d2:	e00b      	b.n	80012ec <HAL_RCC_OscConfig+0xb0>
 80012d4:	4b84      	ldr	r3, [pc, #528]	; (80014e8 <HAL_RCC_OscConfig+0x2ac>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a83      	ldr	r2, [pc, #524]	; (80014e8 <HAL_RCC_OscConfig+0x2ac>)
 80012da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012de:	6013      	str	r3, [r2, #0]
 80012e0:	4b81      	ldr	r3, [pc, #516]	; (80014e8 <HAL_RCC_OscConfig+0x2ac>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a80      	ldr	r2, [pc, #512]	; (80014e8 <HAL_RCC_OscConfig+0x2ac>)
 80012e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d013      	beq.n	800131c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f4:	f7ff fce4 	bl	8000cc0 <HAL_GetTick>
 80012f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012fa:	e008      	b.n	800130e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012fc:	f7ff fce0 	bl	8000cc0 <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	2b64      	cmp	r3, #100	; 0x64
 8001308:	d901      	bls.n	800130e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e204      	b.n	8001718 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130e:	4b76      	ldr	r3, [pc, #472]	; (80014e8 <HAL_RCC_OscConfig+0x2ac>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d0f0      	beq.n	80012fc <HAL_RCC_OscConfig+0xc0>
 800131a:	e014      	b.n	8001346 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131c:	f7ff fcd0 	bl	8000cc0 <HAL_GetTick>
 8001320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001322:	e008      	b.n	8001336 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001324:	f7ff fccc 	bl	8000cc0 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b64      	cmp	r3, #100	; 0x64
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e1f0      	b.n	8001718 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001336:	4b6c      	ldr	r3, [pc, #432]	; (80014e8 <HAL_RCC_OscConfig+0x2ac>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1f0      	bne.n	8001324 <HAL_RCC_OscConfig+0xe8>
 8001342:	e000      	b.n	8001346 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001344:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	2b00      	cmp	r3, #0
 8001350:	d063      	beq.n	800141a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001352:	4b65      	ldr	r3, [pc, #404]	; (80014e8 <HAL_RCC_OscConfig+0x2ac>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	f003 030c 	and.w	r3, r3, #12
 800135a:	2b00      	cmp	r3, #0
 800135c:	d00b      	beq.n	8001376 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800135e:	4b62      	ldr	r3, [pc, #392]	; (80014e8 <HAL_RCC_OscConfig+0x2ac>)
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001366:	2b08      	cmp	r3, #8
 8001368:	d11c      	bne.n	80013a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800136a:	4b5f      	ldr	r3, [pc, #380]	; (80014e8 <HAL_RCC_OscConfig+0x2ac>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d116      	bne.n	80013a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001376:	4b5c      	ldr	r3, [pc, #368]	; (80014e8 <HAL_RCC_OscConfig+0x2ac>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	2b00      	cmp	r3, #0
 8001380:	d005      	beq.n	800138e <HAL_RCC_OscConfig+0x152>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d001      	beq.n	800138e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e1c4      	b.n	8001718 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800138e:	4b56      	ldr	r3, [pc, #344]	; (80014e8 <HAL_RCC_OscConfig+0x2ac>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	691b      	ldr	r3, [r3, #16]
 800139a:	00db      	lsls	r3, r3, #3
 800139c:	4952      	ldr	r1, [pc, #328]	; (80014e8 <HAL_RCC_OscConfig+0x2ac>)
 800139e:	4313      	orrs	r3, r2
 80013a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013a2:	e03a      	b.n	800141a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d020      	beq.n	80013ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013ac:	4b4f      	ldr	r3, [pc, #316]	; (80014ec <HAL_RCC_OscConfig+0x2b0>)
 80013ae:	2201      	movs	r2, #1
 80013b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b2:	f7ff fc85 	bl	8000cc0 <HAL_GetTick>
 80013b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b8:	e008      	b.n	80013cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013ba:	f7ff fc81 	bl	8000cc0 <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d901      	bls.n	80013cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e1a5      	b.n	8001718 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013cc:	4b46      	ldr	r3, [pc, #280]	; (80014e8 <HAL_RCC_OscConfig+0x2ac>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0302 	and.w	r3, r3, #2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d0f0      	beq.n	80013ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d8:	4b43      	ldr	r3, [pc, #268]	; (80014e8 <HAL_RCC_OscConfig+0x2ac>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	691b      	ldr	r3, [r3, #16]
 80013e4:	00db      	lsls	r3, r3, #3
 80013e6:	4940      	ldr	r1, [pc, #256]	; (80014e8 <HAL_RCC_OscConfig+0x2ac>)
 80013e8:	4313      	orrs	r3, r2
 80013ea:	600b      	str	r3, [r1, #0]
 80013ec:	e015      	b.n	800141a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ee:	4b3f      	ldr	r3, [pc, #252]	; (80014ec <HAL_RCC_OscConfig+0x2b0>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f4:	f7ff fc64 	bl	8000cc0 <HAL_GetTick>
 80013f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013fa:	e008      	b.n	800140e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013fc:	f7ff fc60 	bl	8000cc0 <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2b02      	cmp	r3, #2
 8001408:	d901      	bls.n	800140e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e184      	b.n	8001718 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800140e:	4b36      	ldr	r3, [pc, #216]	; (80014e8 <HAL_RCC_OscConfig+0x2ac>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d1f0      	bne.n	80013fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0308 	and.w	r3, r3, #8
 8001422:	2b00      	cmp	r3, #0
 8001424:	d030      	beq.n	8001488 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d016      	beq.n	800145c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800142e:	4b30      	ldr	r3, [pc, #192]	; (80014f0 <HAL_RCC_OscConfig+0x2b4>)
 8001430:	2201      	movs	r2, #1
 8001432:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001434:	f7ff fc44 	bl	8000cc0 <HAL_GetTick>
 8001438:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800143a:	e008      	b.n	800144e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800143c:	f7ff fc40 	bl	8000cc0 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b02      	cmp	r3, #2
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e164      	b.n	8001718 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800144e:	4b26      	ldr	r3, [pc, #152]	; (80014e8 <HAL_RCC_OscConfig+0x2ac>)
 8001450:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d0f0      	beq.n	800143c <HAL_RCC_OscConfig+0x200>
 800145a:	e015      	b.n	8001488 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800145c:	4b24      	ldr	r3, [pc, #144]	; (80014f0 <HAL_RCC_OscConfig+0x2b4>)
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001462:	f7ff fc2d 	bl	8000cc0 <HAL_GetTick>
 8001466:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001468:	e008      	b.n	800147c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800146a:	f7ff fc29 	bl	8000cc0 <HAL_GetTick>
 800146e:	4602      	mov	r2, r0
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	2b02      	cmp	r3, #2
 8001476:	d901      	bls.n	800147c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	e14d      	b.n	8001718 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800147c:	4b1a      	ldr	r3, [pc, #104]	; (80014e8 <HAL_RCC_OscConfig+0x2ac>)
 800147e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001480:	f003 0302 	and.w	r3, r3, #2
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1f0      	bne.n	800146a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0304 	and.w	r3, r3, #4
 8001490:	2b00      	cmp	r3, #0
 8001492:	f000 80a0 	beq.w	80015d6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001496:	2300      	movs	r3, #0
 8001498:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800149a:	4b13      	ldr	r3, [pc, #76]	; (80014e8 <HAL_RCC_OscConfig+0x2ac>)
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d10f      	bne.n	80014c6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	60bb      	str	r3, [r7, #8]
 80014aa:	4b0f      	ldr	r3, [pc, #60]	; (80014e8 <HAL_RCC_OscConfig+0x2ac>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	4a0e      	ldr	r2, [pc, #56]	; (80014e8 <HAL_RCC_OscConfig+0x2ac>)
 80014b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b4:	6413      	str	r3, [r2, #64]	; 0x40
 80014b6:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <HAL_RCC_OscConfig+0x2ac>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014be:	60bb      	str	r3, [r7, #8]
 80014c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014c2:	2301      	movs	r3, #1
 80014c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014c6:	4b0b      	ldr	r3, [pc, #44]	; (80014f4 <HAL_RCC_OscConfig+0x2b8>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d121      	bne.n	8001516 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014d2:	4b08      	ldr	r3, [pc, #32]	; (80014f4 <HAL_RCC_OscConfig+0x2b8>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a07      	ldr	r2, [pc, #28]	; (80014f4 <HAL_RCC_OscConfig+0x2b8>)
 80014d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014de:	f7ff fbef 	bl	8000cc0 <HAL_GetTick>
 80014e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e4:	e011      	b.n	800150a <HAL_RCC_OscConfig+0x2ce>
 80014e6:	bf00      	nop
 80014e8:	40023800 	.word	0x40023800
 80014ec:	42470000 	.word	0x42470000
 80014f0:	42470e80 	.word	0x42470e80
 80014f4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014f8:	f7ff fbe2 	bl	8000cc0 <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b02      	cmp	r3, #2
 8001504:	d901      	bls.n	800150a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e106      	b.n	8001718 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800150a:	4b85      	ldr	r3, [pc, #532]	; (8001720 <HAL_RCC_OscConfig+0x4e4>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001512:	2b00      	cmp	r3, #0
 8001514:	d0f0      	beq.n	80014f8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d106      	bne.n	800152c <HAL_RCC_OscConfig+0x2f0>
 800151e:	4b81      	ldr	r3, [pc, #516]	; (8001724 <HAL_RCC_OscConfig+0x4e8>)
 8001520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001522:	4a80      	ldr	r2, [pc, #512]	; (8001724 <HAL_RCC_OscConfig+0x4e8>)
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	6713      	str	r3, [r2, #112]	; 0x70
 800152a:	e01c      	b.n	8001566 <HAL_RCC_OscConfig+0x32a>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	2b05      	cmp	r3, #5
 8001532:	d10c      	bne.n	800154e <HAL_RCC_OscConfig+0x312>
 8001534:	4b7b      	ldr	r3, [pc, #492]	; (8001724 <HAL_RCC_OscConfig+0x4e8>)
 8001536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001538:	4a7a      	ldr	r2, [pc, #488]	; (8001724 <HAL_RCC_OscConfig+0x4e8>)
 800153a:	f043 0304 	orr.w	r3, r3, #4
 800153e:	6713      	str	r3, [r2, #112]	; 0x70
 8001540:	4b78      	ldr	r3, [pc, #480]	; (8001724 <HAL_RCC_OscConfig+0x4e8>)
 8001542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001544:	4a77      	ldr	r2, [pc, #476]	; (8001724 <HAL_RCC_OscConfig+0x4e8>)
 8001546:	f043 0301 	orr.w	r3, r3, #1
 800154a:	6713      	str	r3, [r2, #112]	; 0x70
 800154c:	e00b      	b.n	8001566 <HAL_RCC_OscConfig+0x32a>
 800154e:	4b75      	ldr	r3, [pc, #468]	; (8001724 <HAL_RCC_OscConfig+0x4e8>)
 8001550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001552:	4a74      	ldr	r2, [pc, #464]	; (8001724 <HAL_RCC_OscConfig+0x4e8>)
 8001554:	f023 0301 	bic.w	r3, r3, #1
 8001558:	6713      	str	r3, [r2, #112]	; 0x70
 800155a:	4b72      	ldr	r3, [pc, #456]	; (8001724 <HAL_RCC_OscConfig+0x4e8>)
 800155c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800155e:	4a71      	ldr	r2, [pc, #452]	; (8001724 <HAL_RCC_OscConfig+0x4e8>)
 8001560:	f023 0304 	bic.w	r3, r3, #4
 8001564:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d015      	beq.n	800159a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800156e:	f7ff fba7 	bl	8000cc0 <HAL_GetTick>
 8001572:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001574:	e00a      	b.n	800158c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001576:	f7ff fba3 	bl	8000cc0 <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	f241 3288 	movw	r2, #5000	; 0x1388
 8001584:	4293      	cmp	r3, r2
 8001586:	d901      	bls.n	800158c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e0c5      	b.n	8001718 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800158c:	4b65      	ldr	r3, [pc, #404]	; (8001724 <HAL_RCC_OscConfig+0x4e8>)
 800158e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d0ee      	beq.n	8001576 <HAL_RCC_OscConfig+0x33a>
 8001598:	e014      	b.n	80015c4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800159a:	f7ff fb91 	bl	8000cc0 <HAL_GetTick>
 800159e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015a0:	e00a      	b.n	80015b8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015a2:	f7ff fb8d 	bl	8000cc0 <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d901      	bls.n	80015b8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80015b4:	2303      	movs	r3, #3
 80015b6:	e0af      	b.n	8001718 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015b8:	4b5a      	ldr	r3, [pc, #360]	; (8001724 <HAL_RCC_OscConfig+0x4e8>)
 80015ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015bc:	f003 0302 	and.w	r3, r3, #2
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d1ee      	bne.n	80015a2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015c4:	7dfb      	ldrb	r3, [r7, #23]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d105      	bne.n	80015d6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015ca:	4b56      	ldr	r3, [pc, #344]	; (8001724 <HAL_RCC_OscConfig+0x4e8>)
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	4a55      	ldr	r2, [pc, #340]	; (8001724 <HAL_RCC_OscConfig+0x4e8>)
 80015d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	699b      	ldr	r3, [r3, #24]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	f000 809b 	beq.w	8001716 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015e0:	4b50      	ldr	r3, [pc, #320]	; (8001724 <HAL_RCC_OscConfig+0x4e8>)
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f003 030c 	and.w	r3, r3, #12
 80015e8:	2b08      	cmp	r3, #8
 80015ea:	d05c      	beq.n	80016a6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d141      	bne.n	8001678 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015f4:	4b4c      	ldr	r3, [pc, #304]	; (8001728 <HAL_RCC_OscConfig+0x4ec>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015fa:	f7ff fb61 	bl	8000cc0 <HAL_GetTick>
 80015fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001600:	e008      	b.n	8001614 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001602:	f7ff fb5d 	bl	8000cc0 <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e081      	b.n	8001718 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001614:	4b43      	ldr	r3, [pc, #268]	; (8001724 <HAL_RCC_OscConfig+0x4e8>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d1f0      	bne.n	8001602 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	69da      	ldr	r2, [r3, #28]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a1b      	ldr	r3, [r3, #32]
 8001628:	431a      	orrs	r2, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162e:	019b      	lsls	r3, r3, #6
 8001630:	431a      	orrs	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001636:	085b      	lsrs	r3, r3, #1
 8001638:	3b01      	subs	r3, #1
 800163a:	041b      	lsls	r3, r3, #16
 800163c:	431a      	orrs	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001642:	061b      	lsls	r3, r3, #24
 8001644:	4937      	ldr	r1, [pc, #220]	; (8001724 <HAL_RCC_OscConfig+0x4e8>)
 8001646:	4313      	orrs	r3, r2
 8001648:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800164a:	4b37      	ldr	r3, [pc, #220]	; (8001728 <HAL_RCC_OscConfig+0x4ec>)
 800164c:	2201      	movs	r2, #1
 800164e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001650:	f7ff fb36 	bl	8000cc0 <HAL_GetTick>
 8001654:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001656:	e008      	b.n	800166a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001658:	f7ff fb32 	bl	8000cc0 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b02      	cmp	r3, #2
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e056      	b.n	8001718 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800166a:	4b2e      	ldr	r3, [pc, #184]	; (8001724 <HAL_RCC_OscConfig+0x4e8>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d0f0      	beq.n	8001658 <HAL_RCC_OscConfig+0x41c>
 8001676:	e04e      	b.n	8001716 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001678:	4b2b      	ldr	r3, [pc, #172]	; (8001728 <HAL_RCC_OscConfig+0x4ec>)
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167e:	f7ff fb1f 	bl	8000cc0 <HAL_GetTick>
 8001682:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001684:	e008      	b.n	8001698 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001686:	f7ff fb1b 	bl	8000cc0 <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	2b02      	cmp	r3, #2
 8001692:	d901      	bls.n	8001698 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001694:	2303      	movs	r3, #3
 8001696:	e03f      	b.n	8001718 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001698:	4b22      	ldr	r3, [pc, #136]	; (8001724 <HAL_RCC_OscConfig+0x4e8>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d1f0      	bne.n	8001686 <HAL_RCC_OscConfig+0x44a>
 80016a4:	e037      	b.n	8001716 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	699b      	ldr	r3, [r3, #24]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d101      	bne.n	80016b2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e032      	b.n	8001718 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016b2:	4b1c      	ldr	r3, [pc, #112]	; (8001724 <HAL_RCC_OscConfig+0x4e8>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d028      	beq.n	8001712 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d121      	bne.n	8001712 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016d8:	429a      	cmp	r2, r3
 80016da:	d11a      	bne.n	8001712 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016dc:	68fa      	ldr	r2, [r7, #12]
 80016de:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016e2:	4013      	ands	r3, r2
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016e8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d111      	bne.n	8001712 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f8:	085b      	lsrs	r3, r3, #1
 80016fa:	3b01      	subs	r3, #1
 80016fc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016fe:	429a      	cmp	r2, r3
 8001700:	d107      	bne.n	8001712 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800170e:	429a      	cmp	r2, r3
 8001710:	d001      	beq.n	8001716 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e000      	b.n	8001718 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001716:	2300      	movs	r3, #0
}
 8001718:	4618      	mov	r0, r3
 800171a:	3718      	adds	r7, #24
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	40007000 	.word	0x40007000
 8001724:	40023800 	.word	0x40023800
 8001728:	42470060 	.word	0x42470060

0800172c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d101      	bne.n	8001740 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e0cc      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001740:	4b68      	ldr	r3, [pc, #416]	; (80018e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0307 	and.w	r3, r3, #7
 8001748:	683a      	ldr	r2, [r7, #0]
 800174a:	429a      	cmp	r2, r3
 800174c:	d90c      	bls.n	8001768 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800174e:	4b65      	ldr	r3, [pc, #404]	; (80018e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001750:	683a      	ldr	r2, [r7, #0]
 8001752:	b2d2      	uxtb	r2, r2
 8001754:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001756:	4b63      	ldr	r3, [pc, #396]	; (80018e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0307 	and.w	r3, r3, #7
 800175e:	683a      	ldr	r2, [r7, #0]
 8001760:	429a      	cmp	r2, r3
 8001762:	d001      	beq.n	8001768 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e0b8      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0302 	and.w	r3, r3, #2
 8001770:	2b00      	cmp	r3, #0
 8001772:	d020      	beq.n	80017b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0304 	and.w	r3, r3, #4
 800177c:	2b00      	cmp	r3, #0
 800177e:	d005      	beq.n	800178c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001780:	4b59      	ldr	r3, [pc, #356]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	4a58      	ldr	r2, [pc, #352]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001786:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800178a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0308 	and.w	r3, r3, #8
 8001794:	2b00      	cmp	r3, #0
 8001796:	d005      	beq.n	80017a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001798:	4b53      	ldr	r3, [pc, #332]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	4a52      	ldr	r2, [pc, #328]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 800179e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017a4:	4b50      	ldr	r3, [pc, #320]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	494d      	ldr	r1, [pc, #308]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80017b2:	4313      	orrs	r3, r2
 80017b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d044      	beq.n	800184c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d107      	bne.n	80017da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ca:	4b47      	ldr	r3, [pc, #284]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d119      	bne.n	800180a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e07f      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d003      	beq.n	80017ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017e6:	2b03      	cmp	r3, #3
 80017e8:	d107      	bne.n	80017fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ea:	4b3f      	ldr	r3, [pc, #252]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d109      	bne.n	800180a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e06f      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017fa:	4b3b      	ldr	r3, [pc, #236]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e067      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800180a:	4b37      	ldr	r3, [pc, #220]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f023 0203 	bic.w	r2, r3, #3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	4934      	ldr	r1, [pc, #208]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001818:	4313      	orrs	r3, r2
 800181a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800181c:	f7ff fa50 	bl	8000cc0 <HAL_GetTick>
 8001820:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001822:	e00a      	b.n	800183a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001824:	f7ff fa4c 	bl	8000cc0 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001832:	4293      	cmp	r3, r2
 8001834:	d901      	bls.n	800183a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e04f      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800183a:	4b2b      	ldr	r3, [pc, #172]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f003 020c 	and.w	r2, r3, #12
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	429a      	cmp	r2, r3
 800184a:	d1eb      	bne.n	8001824 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800184c:	4b25      	ldr	r3, [pc, #148]	; (80018e4 <HAL_RCC_ClockConfig+0x1b8>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0307 	and.w	r3, r3, #7
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	429a      	cmp	r2, r3
 8001858:	d20c      	bcs.n	8001874 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800185a:	4b22      	ldr	r3, [pc, #136]	; (80018e4 <HAL_RCC_ClockConfig+0x1b8>)
 800185c:	683a      	ldr	r2, [r7, #0]
 800185e:	b2d2      	uxtb	r2, r2
 8001860:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001862:	4b20      	ldr	r3, [pc, #128]	; (80018e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0307 	and.w	r3, r3, #7
 800186a:	683a      	ldr	r2, [r7, #0]
 800186c:	429a      	cmp	r2, r3
 800186e:	d001      	beq.n	8001874 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e032      	b.n	80018da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0304 	and.w	r3, r3, #4
 800187c:	2b00      	cmp	r3, #0
 800187e:	d008      	beq.n	8001892 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001880:	4b19      	ldr	r3, [pc, #100]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	4916      	ldr	r1, [pc, #88]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 800188e:	4313      	orrs	r3, r2
 8001890:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0308 	and.w	r3, r3, #8
 800189a:	2b00      	cmp	r3, #0
 800189c:	d009      	beq.n	80018b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800189e:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	490e      	ldr	r1, [pc, #56]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80018ae:	4313      	orrs	r3, r2
 80018b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018b2:	f000 f821 	bl	80018f8 <HAL_RCC_GetSysClockFreq>
 80018b6:	4602      	mov	r2, r0
 80018b8:	4b0b      	ldr	r3, [pc, #44]	; (80018e8 <HAL_RCC_ClockConfig+0x1bc>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	091b      	lsrs	r3, r3, #4
 80018be:	f003 030f 	and.w	r3, r3, #15
 80018c2:	490a      	ldr	r1, [pc, #40]	; (80018ec <HAL_RCC_ClockConfig+0x1c0>)
 80018c4:	5ccb      	ldrb	r3, [r1, r3]
 80018c6:	fa22 f303 	lsr.w	r3, r2, r3
 80018ca:	4a09      	ldr	r2, [pc, #36]	; (80018f0 <HAL_RCC_ClockConfig+0x1c4>)
 80018cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018ce:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <HAL_RCC_ClockConfig+0x1c8>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff f908 	bl	8000ae8 <HAL_InitTick>

  return HAL_OK;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40023c00 	.word	0x40023c00
 80018e8:	40023800 	.word	0x40023800
 80018ec:	080059ac 	.word	0x080059ac
 80018f0:	20000000 	.word	0x20000000
 80018f4:	20000004 	.word	0x20000004

080018f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018fc:	b084      	sub	sp, #16
 80018fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001900:	2300      	movs	r3, #0
 8001902:	607b      	str	r3, [r7, #4]
 8001904:	2300      	movs	r3, #0
 8001906:	60fb      	str	r3, [r7, #12]
 8001908:	2300      	movs	r3, #0
 800190a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800190c:	2300      	movs	r3, #0
 800190e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001910:	4b67      	ldr	r3, [pc, #412]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	f003 030c 	and.w	r3, r3, #12
 8001918:	2b08      	cmp	r3, #8
 800191a:	d00d      	beq.n	8001938 <HAL_RCC_GetSysClockFreq+0x40>
 800191c:	2b08      	cmp	r3, #8
 800191e:	f200 80bd 	bhi.w	8001a9c <HAL_RCC_GetSysClockFreq+0x1a4>
 8001922:	2b00      	cmp	r3, #0
 8001924:	d002      	beq.n	800192c <HAL_RCC_GetSysClockFreq+0x34>
 8001926:	2b04      	cmp	r3, #4
 8001928:	d003      	beq.n	8001932 <HAL_RCC_GetSysClockFreq+0x3a>
 800192a:	e0b7      	b.n	8001a9c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800192c:	4b61      	ldr	r3, [pc, #388]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800192e:	60bb      	str	r3, [r7, #8]
       break;
 8001930:	e0b7      	b.n	8001aa2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001932:	4b61      	ldr	r3, [pc, #388]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001934:	60bb      	str	r3, [r7, #8]
      break;
 8001936:	e0b4      	b.n	8001aa2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001938:	4b5d      	ldr	r3, [pc, #372]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001940:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001942:	4b5b      	ldr	r3, [pc, #364]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d04d      	beq.n	80019ea <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800194e:	4b58      	ldr	r3, [pc, #352]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	099b      	lsrs	r3, r3, #6
 8001954:	461a      	mov	r2, r3
 8001956:	f04f 0300 	mov.w	r3, #0
 800195a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800195e:	f04f 0100 	mov.w	r1, #0
 8001962:	ea02 0800 	and.w	r8, r2, r0
 8001966:	ea03 0901 	and.w	r9, r3, r1
 800196a:	4640      	mov	r0, r8
 800196c:	4649      	mov	r1, r9
 800196e:	f04f 0200 	mov.w	r2, #0
 8001972:	f04f 0300 	mov.w	r3, #0
 8001976:	014b      	lsls	r3, r1, #5
 8001978:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800197c:	0142      	lsls	r2, r0, #5
 800197e:	4610      	mov	r0, r2
 8001980:	4619      	mov	r1, r3
 8001982:	ebb0 0008 	subs.w	r0, r0, r8
 8001986:	eb61 0109 	sbc.w	r1, r1, r9
 800198a:	f04f 0200 	mov.w	r2, #0
 800198e:	f04f 0300 	mov.w	r3, #0
 8001992:	018b      	lsls	r3, r1, #6
 8001994:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001998:	0182      	lsls	r2, r0, #6
 800199a:	1a12      	subs	r2, r2, r0
 800199c:	eb63 0301 	sbc.w	r3, r3, r1
 80019a0:	f04f 0000 	mov.w	r0, #0
 80019a4:	f04f 0100 	mov.w	r1, #0
 80019a8:	00d9      	lsls	r1, r3, #3
 80019aa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80019ae:	00d0      	lsls	r0, r2, #3
 80019b0:	4602      	mov	r2, r0
 80019b2:	460b      	mov	r3, r1
 80019b4:	eb12 0208 	adds.w	r2, r2, r8
 80019b8:	eb43 0309 	adc.w	r3, r3, r9
 80019bc:	f04f 0000 	mov.w	r0, #0
 80019c0:	f04f 0100 	mov.w	r1, #0
 80019c4:	0259      	lsls	r1, r3, #9
 80019c6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80019ca:	0250      	lsls	r0, r2, #9
 80019cc:	4602      	mov	r2, r0
 80019ce:	460b      	mov	r3, r1
 80019d0:	4610      	mov	r0, r2
 80019d2:	4619      	mov	r1, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	461a      	mov	r2, r3
 80019d8:	f04f 0300 	mov.w	r3, #0
 80019dc:	f7fe fc42 	bl	8000264 <__aeabi_uldivmod>
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	4613      	mov	r3, r2
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	e04a      	b.n	8001a80 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019ea:	4b31      	ldr	r3, [pc, #196]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	099b      	lsrs	r3, r3, #6
 80019f0:	461a      	mov	r2, r3
 80019f2:	f04f 0300 	mov.w	r3, #0
 80019f6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80019fa:	f04f 0100 	mov.w	r1, #0
 80019fe:	ea02 0400 	and.w	r4, r2, r0
 8001a02:	ea03 0501 	and.w	r5, r3, r1
 8001a06:	4620      	mov	r0, r4
 8001a08:	4629      	mov	r1, r5
 8001a0a:	f04f 0200 	mov.w	r2, #0
 8001a0e:	f04f 0300 	mov.w	r3, #0
 8001a12:	014b      	lsls	r3, r1, #5
 8001a14:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a18:	0142      	lsls	r2, r0, #5
 8001a1a:	4610      	mov	r0, r2
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	1b00      	subs	r0, r0, r4
 8001a20:	eb61 0105 	sbc.w	r1, r1, r5
 8001a24:	f04f 0200 	mov.w	r2, #0
 8001a28:	f04f 0300 	mov.w	r3, #0
 8001a2c:	018b      	lsls	r3, r1, #6
 8001a2e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a32:	0182      	lsls	r2, r0, #6
 8001a34:	1a12      	subs	r2, r2, r0
 8001a36:	eb63 0301 	sbc.w	r3, r3, r1
 8001a3a:	f04f 0000 	mov.w	r0, #0
 8001a3e:	f04f 0100 	mov.w	r1, #0
 8001a42:	00d9      	lsls	r1, r3, #3
 8001a44:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a48:	00d0      	lsls	r0, r2, #3
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	1912      	adds	r2, r2, r4
 8001a50:	eb45 0303 	adc.w	r3, r5, r3
 8001a54:	f04f 0000 	mov.w	r0, #0
 8001a58:	f04f 0100 	mov.w	r1, #0
 8001a5c:	0299      	lsls	r1, r3, #10
 8001a5e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001a62:	0290      	lsls	r0, r2, #10
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	4610      	mov	r0, r2
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	461a      	mov	r2, r3
 8001a70:	f04f 0300 	mov.w	r3, #0
 8001a74:	f7fe fbf6 	bl	8000264 <__aeabi_uldivmod>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a80:	4b0b      	ldr	r3, [pc, #44]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	0c1b      	lsrs	r3, r3, #16
 8001a86:	f003 0303 	and.w	r3, r3, #3
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001a90:	68fa      	ldr	r2, [r7, #12]
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a98:	60bb      	str	r3, [r7, #8]
      break;
 8001a9a:	e002      	b.n	8001aa2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a9c:	4b05      	ldr	r3, [pc, #20]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001a9e:	60bb      	str	r3, [r7, #8]
      break;
 8001aa0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001aa2:	68bb      	ldr	r3, [r7, #8]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3710      	adds	r7, #16
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001aae:	bf00      	nop
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	00f42400 	.word	0x00f42400
 8001ab8:	007a1200 	.word	0x007a1200

08001abc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ac0:	4b03      	ldr	r3, [pc, #12]	; (8001ad0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	20000000 	.word	0x20000000

08001ad4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ad8:	f7ff fff0 	bl	8001abc <HAL_RCC_GetHCLKFreq>
 8001adc:	4602      	mov	r2, r0
 8001ade:	4b05      	ldr	r3, [pc, #20]	; (8001af4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	0a9b      	lsrs	r3, r3, #10
 8001ae4:	f003 0307 	and.w	r3, r3, #7
 8001ae8:	4903      	ldr	r1, [pc, #12]	; (8001af8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001aea:	5ccb      	ldrb	r3, [r1, r3]
 8001aec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40023800 	.word	0x40023800
 8001af8:	080059bc 	.word	0x080059bc

08001afc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	220f      	movs	r2, #15
 8001b0a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b0c:	4b12      	ldr	r3, [pc, #72]	; (8001b58 <HAL_RCC_GetClockConfig+0x5c>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f003 0203 	and.w	r2, r3, #3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b18:	4b0f      	ldr	r3, [pc, #60]	; (8001b58 <HAL_RCC_GetClockConfig+0x5c>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b24:	4b0c      	ldr	r3, [pc, #48]	; (8001b58 <HAL_RCC_GetClockConfig+0x5c>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b30:	4b09      	ldr	r3, [pc, #36]	; (8001b58 <HAL_RCC_GetClockConfig+0x5c>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	08db      	lsrs	r3, r3, #3
 8001b36:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b3e:	4b07      	ldr	r3, [pc, #28]	; (8001b5c <HAL_RCC_GetClockConfig+0x60>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0207 	and.w	r2, r3, #7
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	601a      	str	r2, [r3, #0]
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	40023800 	.word	0x40023800
 8001b5c:	40023c00 	.word	0x40023c00

08001b60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d101      	bne.n	8001b72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e041      	b.n	8001bf6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d106      	bne.n	8001b8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 f839 	bl	8001bfe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2202      	movs	r2, #2
 8001b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	3304      	adds	r3, #4
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4610      	mov	r0, r2
 8001ba0:	f000 f9d8 	bl	8001f54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	b083      	sub	sp, #12
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
	...

08001c14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d001      	beq.n	8001c2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e04e      	b.n	8001cca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2202      	movs	r2, #2
 8001c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	68da      	ldr	r2, [r3, #12]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f042 0201 	orr.w	r2, r2, #1
 8001c42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a23      	ldr	r2, [pc, #140]	; (8001cd8 <HAL_TIM_Base_Start_IT+0xc4>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d022      	beq.n	8001c94 <HAL_TIM_Base_Start_IT+0x80>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c56:	d01d      	beq.n	8001c94 <HAL_TIM_Base_Start_IT+0x80>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a1f      	ldr	r2, [pc, #124]	; (8001cdc <HAL_TIM_Base_Start_IT+0xc8>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d018      	beq.n	8001c94 <HAL_TIM_Base_Start_IT+0x80>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a1e      	ldr	r2, [pc, #120]	; (8001ce0 <HAL_TIM_Base_Start_IT+0xcc>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d013      	beq.n	8001c94 <HAL_TIM_Base_Start_IT+0x80>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a1c      	ldr	r2, [pc, #112]	; (8001ce4 <HAL_TIM_Base_Start_IT+0xd0>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d00e      	beq.n	8001c94 <HAL_TIM_Base_Start_IT+0x80>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a1b      	ldr	r2, [pc, #108]	; (8001ce8 <HAL_TIM_Base_Start_IT+0xd4>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d009      	beq.n	8001c94 <HAL_TIM_Base_Start_IT+0x80>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a19      	ldr	r2, [pc, #100]	; (8001cec <HAL_TIM_Base_Start_IT+0xd8>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d004      	beq.n	8001c94 <HAL_TIM_Base_Start_IT+0x80>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a18      	ldr	r2, [pc, #96]	; (8001cf0 <HAL_TIM_Base_Start_IT+0xdc>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d111      	bne.n	8001cb8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f003 0307 	and.w	r3, r3, #7
 8001c9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2b06      	cmp	r3, #6
 8001ca4:	d010      	beq.n	8001cc8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f042 0201 	orr.w	r2, r2, #1
 8001cb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cb6:	e007      	b.n	8001cc8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f042 0201 	orr.w	r2, r2, #1
 8001cc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3714      	adds	r7, #20
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	40010000 	.word	0x40010000
 8001cdc:	40000400 	.word	0x40000400
 8001ce0:	40000800 	.word	0x40000800
 8001ce4:	40000c00 	.word	0x40000c00
 8001ce8:	40010400 	.word	0x40010400
 8001cec:	40014000 	.word	0x40014000
 8001cf0:	40001800 	.word	0x40001800

08001cf4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	691b      	ldr	r3, [r3, #16]
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d122      	bne.n	8001d50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	f003 0302 	and.w	r3, r3, #2
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d11b      	bne.n	8001d50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f06f 0202 	mvn.w	r2, #2
 8001d20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2201      	movs	r2, #1
 8001d26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	f003 0303 	and.w	r3, r3, #3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 f8ee 	bl	8001f18 <HAL_TIM_IC_CaptureCallback>
 8001d3c:	e005      	b.n	8001d4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f000 f8e0 	bl	8001f04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 f8f1 	bl	8001f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	f003 0304 	and.w	r3, r3, #4
 8001d5a:	2b04      	cmp	r3, #4
 8001d5c:	d122      	bne.n	8001da4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	f003 0304 	and.w	r3, r3, #4
 8001d68:	2b04      	cmp	r3, #4
 8001d6a:	d11b      	bne.n	8001da4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f06f 0204 	mvn.w	r2, #4
 8001d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2202      	movs	r2, #2
 8001d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f8c4 	bl	8001f18 <HAL_TIM_IC_CaptureCallback>
 8001d90:	e005      	b.n	8001d9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 f8b6 	bl	8001f04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f000 f8c7 	bl	8001f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	f003 0308 	and.w	r3, r3, #8
 8001dae:	2b08      	cmp	r3, #8
 8001db0:	d122      	bne.n	8001df8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	f003 0308 	and.w	r3, r3, #8
 8001dbc:	2b08      	cmp	r3, #8
 8001dbe:	d11b      	bne.n	8001df8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f06f 0208 	mvn.w	r2, #8
 8001dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2204      	movs	r2, #4
 8001dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	f003 0303 	and.w	r3, r3, #3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 f89a 	bl	8001f18 <HAL_TIM_IC_CaptureCallback>
 8001de4:	e005      	b.n	8001df2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 f88c 	bl	8001f04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f000 f89d 	bl	8001f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	f003 0310 	and.w	r3, r3, #16
 8001e02:	2b10      	cmp	r3, #16
 8001e04:	d122      	bne.n	8001e4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	f003 0310 	and.w	r3, r3, #16
 8001e10:	2b10      	cmp	r3, #16
 8001e12:	d11b      	bne.n	8001e4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f06f 0210 	mvn.w	r2, #16
 8001e1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2208      	movs	r2, #8
 8001e22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	69db      	ldr	r3, [r3, #28]
 8001e2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f000 f870 	bl	8001f18 <HAL_TIM_IC_CaptureCallback>
 8001e38:	e005      	b.n	8001e46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 f862 	bl	8001f04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f000 f873 	bl	8001f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d10e      	bne.n	8001e78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d107      	bne.n	8001e78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f06f 0201 	mvn.w	r2, #1
 8001e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7fe fdf8 	bl	8000a68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e82:	2b80      	cmp	r3, #128	; 0x80
 8001e84:	d10e      	bne.n	8001ea4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e90:	2b80      	cmp	r3, #128	; 0x80
 8001e92:	d107      	bne.n	8001ea4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 f902 	bl	80020a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eae:	2b40      	cmp	r3, #64	; 0x40
 8001eb0:	d10e      	bne.n	8001ed0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ebc:	2b40      	cmp	r3, #64	; 0x40
 8001ebe:	d107      	bne.n	8001ed0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 f838 	bl	8001f40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	f003 0320 	and.w	r3, r3, #32
 8001eda:	2b20      	cmp	r3, #32
 8001edc:	d10e      	bne.n	8001efc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	f003 0320 	and.w	r3, r3, #32
 8001ee8:	2b20      	cmp	r3, #32
 8001eea:	d107      	bne.n	8001efc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f06f 0220 	mvn.w	r2, #32
 8001ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 f8cc 	bl	8002094 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001efc:	bf00      	nop
 8001efe:	3708      	adds	r7, #8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4a40      	ldr	r2, [pc, #256]	; (8002068 <TIM_Base_SetConfig+0x114>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d013      	beq.n	8001f94 <TIM_Base_SetConfig+0x40>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f72:	d00f      	beq.n	8001f94 <TIM_Base_SetConfig+0x40>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a3d      	ldr	r2, [pc, #244]	; (800206c <TIM_Base_SetConfig+0x118>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d00b      	beq.n	8001f94 <TIM_Base_SetConfig+0x40>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4a3c      	ldr	r2, [pc, #240]	; (8002070 <TIM_Base_SetConfig+0x11c>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d007      	beq.n	8001f94 <TIM_Base_SetConfig+0x40>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a3b      	ldr	r2, [pc, #236]	; (8002074 <TIM_Base_SetConfig+0x120>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d003      	beq.n	8001f94 <TIM_Base_SetConfig+0x40>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a3a      	ldr	r2, [pc, #232]	; (8002078 <TIM_Base_SetConfig+0x124>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d108      	bne.n	8001fa6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	68fa      	ldr	r2, [r7, #12]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a2f      	ldr	r2, [pc, #188]	; (8002068 <TIM_Base_SetConfig+0x114>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d02b      	beq.n	8002006 <TIM_Base_SetConfig+0xb2>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fb4:	d027      	beq.n	8002006 <TIM_Base_SetConfig+0xb2>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a2c      	ldr	r2, [pc, #176]	; (800206c <TIM_Base_SetConfig+0x118>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d023      	beq.n	8002006 <TIM_Base_SetConfig+0xb2>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a2b      	ldr	r2, [pc, #172]	; (8002070 <TIM_Base_SetConfig+0x11c>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d01f      	beq.n	8002006 <TIM_Base_SetConfig+0xb2>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a2a      	ldr	r2, [pc, #168]	; (8002074 <TIM_Base_SetConfig+0x120>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d01b      	beq.n	8002006 <TIM_Base_SetConfig+0xb2>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a29      	ldr	r2, [pc, #164]	; (8002078 <TIM_Base_SetConfig+0x124>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d017      	beq.n	8002006 <TIM_Base_SetConfig+0xb2>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a28      	ldr	r2, [pc, #160]	; (800207c <TIM_Base_SetConfig+0x128>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d013      	beq.n	8002006 <TIM_Base_SetConfig+0xb2>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a27      	ldr	r2, [pc, #156]	; (8002080 <TIM_Base_SetConfig+0x12c>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d00f      	beq.n	8002006 <TIM_Base_SetConfig+0xb2>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a26      	ldr	r2, [pc, #152]	; (8002084 <TIM_Base_SetConfig+0x130>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d00b      	beq.n	8002006 <TIM_Base_SetConfig+0xb2>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a25      	ldr	r2, [pc, #148]	; (8002088 <TIM_Base_SetConfig+0x134>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d007      	beq.n	8002006 <TIM_Base_SetConfig+0xb2>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a24      	ldr	r2, [pc, #144]	; (800208c <TIM_Base_SetConfig+0x138>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d003      	beq.n	8002006 <TIM_Base_SetConfig+0xb2>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a23      	ldr	r2, [pc, #140]	; (8002090 <TIM_Base_SetConfig+0x13c>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d108      	bne.n	8002018 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800200c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	4313      	orrs	r3, r2
 8002016:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	695b      	ldr	r3, [r3, #20]
 8002022:	4313      	orrs	r3, r2
 8002024:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	68fa      	ldr	r2, [r7, #12]
 800202a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a0a      	ldr	r2, [pc, #40]	; (8002068 <TIM_Base_SetConfig+0x114>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d003      	beq.n	800204c <TIM_Base_SetConfig+0xf8>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a0c      	ldr	r2, [pc, #48]	; (8002078 <TIM_Base_SetConfig+0x124>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d103      	bne.n	8002054 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	691a      	ldr	r2, [r3, #16]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	615a      	str	r2, [r3, #20]
}
 800205a:	bf00      	nop
 800205c:	3714      	adds	r7, #20
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	40010000 	.word	0x40010000
 800206c:	40000400 	.word	0x40000400
 8002070:	40000800 	.word	0x40000800
 8002074:	40000c00 	.word	0x40000c00
 8002078:	40010400 	.word	0x40010400
 800207c:	40014000 	.word	0x40014000
 8002080:	40014400 	.word	0x40014400
 8002084:	40014800 	.word	0x40014800
 8002088:	40001800 	.word	0x40001800
 800208c:	40001c00 	.word	0x40001c00
 8002090:	40002000 	.word	0x40002000

08002094 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f103 0208 	add.w	r2, r3, #8
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f04f 32ff 	mov.w	r2, #4294967295
 80020d4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f103 0208 	add.w	r2, r3, #8
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f103 0208 	add.w	r2, r3, #8
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800210a:	bf00      	nop
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr

08002116 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002116:	b480      	push	{r7}
 8002118:	b085      	sub	sp, #20
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
 800211e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800212c:	d103      	bne.n	8002136 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	60fb      	str	r3, [r7, #12]
 8002134:	e00c      	b.n	8002150 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	3308      	adds	r3, #8
 800213a:	60fb      	str	r3, [r7, #12]
 800213c:	e002      	b.n	8002144 <vListInsert+0x2e>
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68ba      	ldr	r2, [r7, #8]
 800214c:	429a      	cmp	r2, r3
 800214e:	d2f6      	bcs.n	800213e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	685a      	ldr	r2, [r3, #4]
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	1c5a      	adds	r2, r3, #1
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	601a      	str	r2, [r3, #0]
}
 800217c:	bf00      	nop
 800217e:	3714      	adds	r7, #20
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	6892      	ldr	r2, [r2, #8]
 800219e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	6852      	ldr	r2, [r2, #4]
 80021a8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d103      	bne.n	80021bc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	1e5a      	subs	r2, r3, #1
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3714      	adds	r7, #20
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80021dc:	b580      	push	{r7, lr}
 80021de:	b08c      	sub	sp, #48	; 0x30
 80021e0:	af04      	add	r7, sp, #16
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	603b      	str	r3, [r7, #0]
 80021e8:	4613      	mov	r3, r2
 80021ea:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80021ec:	88fb      	ldrh	r3, [r7, #6]
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	4618      	mov	r0, r3
 80021f2:	f001 f933 	bl	800345c <pvPortMalloc>
 80021f6:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00e      	beq.n	800221c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80021fe:	2058      	movs	r0, #88	; 0x58
 8002200:	f001 f92c 	bl	800345c <pvPortMalloc>
 8002204:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d003      	beq.n	8002214 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	697a      	ldr	r2, [r7, #20]
 8002210:	631a      	str	r2, [r3, #48]	; 0x30
 8002212:	e005      	b.n	8002220 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 8002214:	6978      	ldr	r0, [r7, #20]
 8002216:	f001 fa01 	bl	800361c <vPortFree>
 800221a:	e001      	b.n	8002220 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800221c:	2300      	movs	r3, #0
 800221e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d013      	beq.n	800224e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002226:	88fa      	ldrh	r2, [r7, #6]
 8002228:	2300      	movs	r3, #0
 800222a:	9303      	str	r3, [sp, #12]
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	9302      	str	r3, [sp, #8]
 8002230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002232:	9301      	str	r3, [sp, #4]
 8002234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002236:	9300      	str	r3, [sp, #0]
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	68b9      	ldr	r1, [r7, #8]
 800223c:	68f8      	ldr	r0, [r7, #12]
 800223e:	f000 f80e 	bl	800225e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002242:	69f8      	ldr	r0, [r7, #28]
 8002244:	f000 f8b0 	bl	80023a8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002248:	2301      	movs	r3, #1
 800224a:	61bb      	str	r3, [r7, #24]
 800224c:	e002      	b.n	8002254 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800224e:	f04f 33ff 	mov.w	r3, #4294967295
 8002252:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002254:	69bb      	ldr	r3, [r7, #24]
    }
 8002256:	4618      	mov	r0, r3
 8002258:	3720      	adds	r7, #32
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b088      	sub	sp, #32
 8002262:	af00      	add	r7, sp, #0
 8002264:	60f8      	str	r0, [r7, #12]
 8002266:	60b9      	str	r1, [r7, #8]
 8002268:	607a      	str	r2, [r7, #4]
 800226a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800226c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800226e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	461a      	mov	r2, r3
 8002276:	21a5      	movs	r1, #165	; 0xa5
 8002278:	f003 fb08 	bl	800588c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800227c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800227e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002286:	3b01      	subs	r3, #1
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	4413      	add	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	f023 0307 	bic.w	r3, r3, #7
 8002294:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	f003 0307 	and.w	r3, r3, #7
 800229c:	2b00      	cmp	r3, #0
 800229e:	d00a      	beq.n	80022b6 <prvInitialiseNewTask+0x58>
        __asm volatile
 80022a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022a4:	f383 8811 	msr	BASEPRI, r3
 80022a8:	f3bf 8f6f 	isb	sy
 80022ac:	f3bf 8f4f 	dsb	sy
 80022b0:	617b      	str	r3, [r7, #20]
    }
 80022b2:	bf00      	nop
 80022b4:	e7fe      	b.n	80022b4 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d01f      	beq.n	80022fc <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80022bc:	2300      	movs	r3, #0
 80022be:	61fb      	str	r3, [r7, #28]
 80022c0:	e012      	b.n	80022e8 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80022c2:	68ba      	ldr	r2, [r7, #8]
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	4413      	add	r3, r2
 80022c8:	7819      	ldrb	r1, [r3, #0]
 80022ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	4413      	add	r3, r2
 80022d0:	3334      	adds	r3, #52	; 0x34
 80022d2:	460a      	mov	r2, r1
 80022d4:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80022d6:	68ba      	ldr	r2, [r7, #8]
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	4413      	add	r3, r2
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d006      	beq.n	80022f0 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	3301      	adds	r3, #1
 80022e6:	61fb      	str	r3, [r7, #28]
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	2b09      	cmp	r3, #9
 80022ec:	d9e9      	bls.n	80022c2 <prvInitialiseNewTask+0x64>
 80022ee:	e000      	b.n	80022f2 <prvInitialiseNewTask+0x94>
            {
                break;
 80022f0:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80022f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80022fa:	e003      	b.n	8002304 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80022fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002306:	2b04      	cmp	r3, #4
 8002308:	d90a      	bls.n	8002320 <prvInitialiseNewTask+0xc2>
        __asm volatile
 800230a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800230e:	f383 8811 	msr	BASEPRI, r3
 8002312:	f3bf 8f6f 	isb	sy
 8002316:	f3bf 8f4f 	dsb	sy
 800231a:	613b      	str	r3, [r7, #16]
    }
 800231c:	bf00      	nop
 800231e:	e7fe      	b.n	800231e <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002322:	2b04      	cmp	r3, #4
 8002324:	d901      	bls.n	800232a <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002326:	2304      	movs	r3, #4
 8002328:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800232a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800232c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800232e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002332:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002334:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002338:	2200      	movs	r2, #0
 800233a:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800233c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800233e:	3304      	adds	r3, #4
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff fedb 	bl	80020fc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002348:	3318      	adds	r3, #24
 800234a:	4618      	mov	r0, r3
 800234c:	f7ff fed6 	bl	80020fc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002352:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002354:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002358:	f1c3 0205 	rsb	r2, r3, #5
 800235c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800235e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002362:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002364:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002368:	3350      	adds	r3, #80	; 0x50
 800236a:	2204      	movs	r2, #4
 800236c:	2100      	movs	r1, #0
 800236e:	4618      	mov	r0, r3
 8002370:	f003 fa8c 	bl	800588c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002376:	3354      	adds	r3, #84	; 0x54
 8002378:	2201      	movs	r2, #1
 800237a:	2100      	movs	r1, #0
 800237c:	4618      	mov	r0, r3
 800237e:	f003 fa85 	bl	800588c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002382:	683a      	ldr	r2, [r7, #0]
 8002384:	68f9      	ldr	r1, [r7, #12]
 8002386:	69b8      	ldr	r0, [r7, #24]
 8002388:	f000 fd92 	bl	8002eb0 <pxPortInitialiseStack>
 800238c:	4602      	mov	r2, r0
 800238e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002390:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002394:	2b00      	cmp	r3, #0
 8002396:	d002      	beq.n	800239e <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800239a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800239c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800239e:	bf00      	nop
 80023a0:	3720      	adds	r7, #32
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
	...

080023a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80023a8:	b5b0      	push	{r4, r5, r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af02      	add	r7, sp, #8
 80023ae:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80023b0:	f000 ff28 	bl	8003204 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80023b4:	4b4f      	ldr	r3, [pc, #316]	; (80024f4 <prvAddNewTaskToReadyList+0x14c>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	3301      	adds	r3, #1
 80023ba:	4a4e      	ldr	r2, [pc, #312]	; (80024f4 <prvAddNewTaskToReadyList+0x14c>)
 80023bc:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80023be:	4b4e      	ldr	r3, [pc, #312]	; (80024f8 <prvAddNewTaskToReadyList+0x150>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d109      	bne.n	80023da <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80023c6:	4a4c      	ldr	r2, [pc, #304]	; (80024f8 <prvAddNewTaskToReadyList+0x150>)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80023cc:	4b49      	ldr	r3, [pc, #292]	; (80024f4 <prvAddNewTaskToReadyList+0x14c>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d110      	bne.n	80023f6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80023d4:	f000 fc46 	bl	8002c64 <prvInitialiseTaskLists>
 80023d8:	e00d      	b.n	80023f6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80023da:	4b48      	ldr	r3, [pc, #288]	; (80024fc <prvAddNewTaskToReadyList+0x154>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d109      	bne.n	80023f6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80023e2:	4b45      	ldr	r3, [pc, #276]	; (80024f8 <prvAddNewTaskToReadyList+0x150>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d802      	bhi.n	80023f6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80023f0:	4a41      	ldr	r2, [pc, #260]	; (80024f8 <prvAddNewTaskToReadyList+0x150>)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80023f6:	4b42      	ldr	r3, [pc, #264]	; (8002500 <prvAddNewTaskToReadyList+0x158>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	3301      	adds	r3, #1
 80023fc:	4a40      	ldr	r2, [pc, #256]	; (8002500 <prvAddNewTaskToReadyList+0x158>)
 80023fe:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002400:	4b3f      	ldr	r3, [pc, #252]	; (8002500 <prvAddNewTaskToReadyList+0x158>)
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d016      	beq.n	800243c <prvAddNewTaskToReadyList+0x94>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4618      	mov	r0, r3
 8002412:	f002 ff6f 	bl	80052f4 <SEGGER_SYSVIEW_OnTaskCreate>
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002426:	461d      	mov	r5, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	461c      	mov	r4, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002432:	1ae3      	subs	r3, r4, r3
 8002434:	9300      	str	r3, [sp, #0]
 8002436:	462b      	mov	r3, r5
 8002438:	f001 fab6 	bl	80039a8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4618      	mov	r0, r3
 8002440:	f002 ffdc 	bl	80053fc <SEGGER_SYSVIEW_OnTaskStartReady>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002448:	2201      	movs	r2, #1
 800244a:	409a      	lsls	r2, r3
 800244c:	4b2d      	ldr	r3, [pc, #180]	; (8002504 <prvAddNewTaskToReadyList+0x15c>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4313      	orrs	r3, r2
 8002452:	4a2c      	ldr	r2, [pc, #176]	; (8002504 <prvAddNewTaskToReadyList+0x15c>)
 8002454:	6013      	str	r3, [r2, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800245a:	492b      	ldr	r1, [pc, #172]	; (8002508 <prvAddNewTaskToReadyList+0x160>)
 800245c:	4613      	mov	r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	4413      	add	r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	440b      	add	r3, r1
 8002466:	3304      	adds	r3, #4
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	60fb      	str	r3, [r7, #12]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	609a      	str	r2, [r3, #8]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	689a      	ldr	r2, [r3, #8]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	60da      	str	r2, [r3, #12]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	3204      	adds	r2, #4
 8002482:	605a      	str	r2, [r3, #4]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	1d1a      	adds	r2, r3, #4
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	609a      	str	r2, [r3, #8]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002490:	4613      	mov	r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	4413      	add	r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	4a1b      	ldr	r2, [pc, #108]	; (8002508 <prvAddNewTaskToReadyList+0x160>)
 800249a:	441a      	add	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	615a      	str	r2, [r3, #20]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024a4:	4918      	ldr	r1, [pc, #96]	; (8002508 <prvAddNewTaskToReadyList+0x160>)
 80024a6:	4613      	mov	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	4413      	add	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	440b      	add	r3, r1
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	1c59      	adds	r1, r3, #1
 80024b4:	4814      	ldr	r0, [pc, #80]	; (8002508 <prvAddNewTaskToReadyList+0x160>)
 80024b6:	4613      	mov	r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	4413      	add	r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	4403      	add	r3, r0
 80024c0:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80024c2:	f000 fecf 	bl	8003264 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80024c6:	4b0d      	ldr	r3, [pc, #52]	; (80024fc <prvAddNewTaskToReadyList+0x154>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00e      	beq.n	80024ec <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80024ce:	4b0a      	ldr	r3, [pc, #40]	; (80024f8 <prvAddNewTaskToReadyList+0x150>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d8:	429a      	cmp	r2, r3
 80024da:	d207      	bcs.n	80024ec <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80024dc:	4b0b      	ldr	r3, [pc, #44]	; (800250c <prvAddNewTaskToReadyList+0x164>)
 80024de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	f3bf 8f4f 	dsb	sy
 80024e8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80024ec:	bf00      	nop
 80024ee:	3710      	adds	r7, #16
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bdb0      	pop	{r4, r5, r7, pc}
 80024f4:	20000110 	.word	0x20000110
 80024f8:	20000038 	.word	0x20000038
 80024fc:	2000011c 	.word	0x2000011c
 8002500:	2000012c 	.word	0x2000012c
 8002504:	20000118 	.word	0x20000118
 8002508:	2000003c 	.word	0x2000003c
 800250c:	e000ed04 	.word	0xe000ed04

08002510 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 8002510:	b580      	push	{r7, lr}
 8002512:	b08a      	sub	sp, #40	; 0x28
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800251a:	2300      	movs	r3, #0
 800251c:	627b      	str	r3, [r7, #36]	; 0x24

        configASSERT( pxPreviousWakeTime );
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d10a      	bne.n	800253a <xTaskDelayUntil+0x2a>
        __asm volatile
 8002524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002528:	f383 8811 	msr	BASEPRI, r3
 800252c:	f3bf 8f6f 	isb	sy
 8002530:	f3bf 8f4f 	dsb	sy
 8002534:	617b      	str	r3, [r7, #20]
    }
 8002536:	bf00      	nop
 8002538:	e7fe      	b.n	8002538 <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d10a      	bne.n	8002556 <xTaskDelayUntil+0x46>
        __asm volatile
 8002540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002544:	f383 8811 	msr	BASEPRI, r3
 8002548:	f3bf 8f6f 	isb	sy
 800254c:	f3bf 8f4f 	dsb	sy
 8002550:	613b      	str	r3, [r7, #16]
    }
 8002552:	bf00      	nop
 8002554:	e7fe      	b.n	8002554 <xTaskDelayUntil+0x44>
        configASSERT( uxSchedulerSuspended == 0 );
 8002556:	4b2c      	ldr	r3, [pc, #176]	; (8002608 <xTaskDelayUntil+0xf8>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00a      	beq.n	8002574 <xTaskDelayUntil+0x64>
        __asm volatile
 800255e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002562:	f383 8811 	msr	BASEPRI, r3
 8002566:	f3bf 8f6f 	isb	sy
 800256a:	f3bf 8f4f 	dsb	sy
 800256e:	60fb      	str	r3, [r7, #12]
    }
 8002570:	bf00      	nop
 8002572:	e7fe      	b.n	8002572 <xTaskDelayUntil+0x62>

        vTaskSuspendAll();
 8002574:	f000 f8aa 	bl	80026cc <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 8002578:	4b24      	ldr	r3, [pc, #144]	; (800260c <xTaskDelayUntil+0xfc>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	683a      	ldr	r2, [r7, #0]
 8002584:	4413      	add	r3, r2
 8002586:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	6a3a      	ldr	r2, [r7, #32]
 800258e:	429a      	cmp	r2, r3
 8002590:	d20b      	bcs.n	80025aa <xTaskDelayUntil+0x9a>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	69fa      	ldr	r2, [r7, #28]
 8002598:	429a      	cmp	r2, r3
 800259a:	d211      	bcs.n	80025c0 <xTaskDelayUntil+0xb0>
 800259c:	69fa      	ldr	r2, [r7, #28]
 800259e:	6a3b      	ldr	r3, [r7, #32]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d90d      	bls.n	80025c0 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 80025a4:	2301      	movs	r3, #1
 80025a6:	627b      	str	r3, [r7, #36]	; 0x24
 80025a8:	e00a      	b.n	80025c0 <xTaskDelayUntil+0xb0>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	69fa      	ldr	r2, [r7, #28]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d303      	bcc.n	80025bc <xTaskDelayUntil+0xac>
 80025b4:	69fa      	ldr	r2, [r7, #28]
 80025b6:	6a3b      	ldr	r3, [r7, #32]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d901      	bls.n	80025c0 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 80025bc:	2301      	movs	r3, #1
 80025be:	627b      	str	r3, [r7, #36]	; 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	69fa      	ldr	r2, [r7, #28]
 80025c4:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 80025c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d009      	beq.n	80025e0 <xTaskDelayUntil+0xd0>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );
 80025cc:	2024      	movs	r0, #36	; 0x24
 80025ce:	f002 fa7d 	bl	8004acc <SEGGER_SYSVIEW_RecordVoid>

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80025d2:	69fa      	ldr	r2, [r7, #28]
 80025d4:	6a3b      	ldr	r3, [r7, #32]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	2100      	movs	r1, #0
 80025da:	4618      	mov	r0, r3
 80025dc:	f000 fbdc 	bl	8002d98 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 80025e0:	f000 f882 	bl	80026e8 <xTaskResumeAll>
 80025e4:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d107      	bne.n	80025fc <xTaskDelayUntil+0xec>
        {
            portYIELD_WITHIN_API();
 80025ec:	4b08      	ldr	r3, [pc, #32]	; (8002610 <xTaskDelayUntil+0x100>)
 80025ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	f3bf 8f4f 	dsb	sy
 80025f8:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 80025fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80025fe:	4618      	mov	r0, r3
 8002600:	3728      	adds	r7, #40	; 0x28
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	20000138 	.word	0x20000138
 800260c:	20000114 	.word	0x20000114
 8002610:	e000ed04 	.word	0xe000ed04

08002614 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800261a:	4b24      	ldr	r3, [pc, #144]	; (80026ac <vTaskStartScheduler+0x98>)
 800261c:	9301      	str	r3, [sp, #4]
 800261e:	2300      	movs	r3, #0
 8002620:	9300      	str	r3, [sp, #0]
 8002622:	2300      	movs	r3, #0
 8002624:	2282      	movs	r2, #130	; 0x82
 8002626:	4922      	ldr	r1, [pc, #136]	; (80026b0 <vTaskStartScheduler+0x9c>)
 8002628:	4822      	ldr	r0, [pc, #136]	; (80026b4 <vTaskStartScheduler+0xa0>)
 800262a:	f7ff fdd7 	bl	80021dc <xTaskCreate>
 800262e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d124      	bne.n	8002680 <vTaskStartScheduler+0x6c>
        __asm volatile
 8002636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800263a:	f383 8811 	msr	BASEPRI, r3
 800263e:	f3bf 8f6f 	isb	sy
 8002642:	f3bf 8f4f 	dsb	sy
 8002646:	60bb      	str	r3, [r7, #8]
    }
 8002648:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800264a:	4b1b      	ldr	r3, [pc, #108]	; (80026b8 <vTaskStartScheduler+0xa4>)
 800264c:	f04f 32ff 	mov.w	r2, #4294967295
 8002650:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002652:	4b1a      	ldr	r3, [pc, #104]	; (80026bc <vTaskStartScheduler+0xa8>)
 8002654:	2201      	movs	r2, #1
 8002656:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002658:	4b19      	ldr	r3, [pc, #100]	; (80026c0 <vTaskStartScheduler+0xac>)
 800265a:	2200      	movs	r2, #0
 800265c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800265e:	4b19      	ldr	r3, [pc, #100]	; (80026c4 <vTaskStartScheduler+0xb0>)
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	4b12      	ldr	r3, [pc, #72]	; (80026ac <vTaskStartScheduler+0x98>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	429a      	cmp	r2, r3
 8002668:	d102      	bne.n	8002670 <vTaskStartScheduler+0x5c>
 800266a:	f002 fe27 	bl	80052bc <SEGGER_SYSVIEW_OnIdle>
 800266e:	e004      	b.n	800267a <vTaskStartScheduler+0x66>
 8002670:	4b14      	ldr	r3, [pc, #80]	; (80026c4 <vTaskStartScheduler+0xb0>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4618      	mov	r0, r3
 8002676:	f002 fe7f 	bl	8005378 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800267a:	f000 fca3 	bl	8002fc4 <xPortStartScheduler>
 800267e:	e00e      	b.n	800269e <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002686:	d10a      	bne.n	800269e <vTaskStartScheduler+0x8a>
        __asm volatile
 8002688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800268c:	f383 8811 	msr	BASEPRI, r3
 8002690:	f3bf 8f6f 	isb	sy
 8002694:	f3bf 8f4f 	dsb	sy
 8002698:	607b      	str	r3, [r7, #4]
    }
 800269a:	bf00      	nop
 800269c:	e7fe      	b.n	800269c <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800269e:	4b0a      	ldr	r3, [pc, #40]	; (80026c8 <vTaskStartScheduler+0xb4>)
 80026a0:	681b      	ldr	r3, [r3, #0]
}
 80026a2:	bf00      	nop
 80026a4:	3710      	adds	r7, #16
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	20000134 	.word	0x20000134
 80026b0:	080058e4 	.word	0x080058e4
 80026b4:	08002c35 	.word	0x08002c35
 80026b8:	20000130 	.word	0x20000130
 80026bc:	2000011c 	.word	0x2000011c
 80026c0:	20000114 	.word	0x20000114
 80026c4:	20000038 	.word	0x20000038
 80026c8:	2000000c 	.word	0x2000000c

080026cc <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80026d0:	4b04      	ldr	r3, [pc, #16]	; (80026e4 <vTaskSuspendAll+0x18>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	3301      	adds	r3, #1
 80026d6:	4a03      	ldr	r2, [pc, #12]	; (80026e4 <vTaskSuspendAll+0x18>)
 80026d8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80026da:	bf00      	nop
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr
 80026e4:	20000138 	.word	0x20000138

080026e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b088      	sub	sp, #32
 80026ec:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80026ee:	2300      	movs	r3, #0
 80026f0:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80026f2:	2300      	movs	r3, #0
 80026f4:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80026f6:	4b73      	ldr	r3, [pc, #460]	; (80028c4 <xTaskResumeAll+0x1dc>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d10a      	bne.n	8002714 <xTaskResumeAll+0x2c>
        __asm volatile
 80026fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002702:	f383 8811 	msr	BASEPRI, r3
 8002706:	f3bf 8f6f 	isb	sy
 800270a:	f3bf 8f4f 	dsb	sy
 800270e:	607b      	str	r3, [r7, #4]
    }
 8002710:	bf00      	nop
 8002712:	e7fe      	b.n	8002712 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002714:	f000 fd76 	bl	8003204 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002718:	4b6a      	ldr	r3, [pc, #424]	; (80028c4 <xTaskResumeAll+0x1dc>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	3b01      	subs	r3, #1
 800271e:	4a69      	ldr	r2, [pc, #420]	; (80028c4 <xTaskResumeAll+0x1dc>)
 8002720:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002722:	4b68      	ldr	r3, [pc, #416]	; (80028c4 <xTaskResumeAll+0x1dc>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2b00      	cmp	r3, #0
 8002728:	f040 80c4 	bne.w	80028b4 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800272c:	4b66      	ldr	r3, [pc, #408]	; (80028c8 <xTaskResumeAll+0x1e0>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	f000 80bf 	beq.w	80028b4 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002736:	e08e      	b.n	8002856 <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002738:	4b64      	ldr	r3, [pc, #400]	; (80028cc <xTaskResumeAll+0x1e4>)
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002744:	613b      	str	r3, [r7, #16]
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	69db      	ldr	r3, [r3, #28]
 800274a:	69fa      	ldr	r2, [r7, #28]
 800274c:	6a12      	ldr	r2, [r2, #32]
 800274e:	609a      	str	r2, [r3, #8]
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	6a1b      	ldr	r3, [r3, #32]
 8002754:	69fa      	ldr	r2, [r7, #28]
 8002756:	69d2      	ldr	r2, [r2, #28]
 8002758:	605a      	str	r2, [r3, #4]
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	685a      	ldr	r2, [r3, #4]
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	3318      	adds	r3, #24
 8002762:	429a      	cmp	r2, r3
 8002764:	d103      	bne.n	800276e <xTaskResumeAll+0x86>
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	6a1a      	ldr	r2, [r3, #32]
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	605a      	str	r2, [r3, #4]
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	2200      	movs	r2, #0
 8002772:	629a      	str	r2, [r3, #40]	; 0x28
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	1e5a      	subs	r2, r3, #1
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	695b      	ldr	r3, [r3, #20]
 8002782:	60fb      	str	r3, [r7, #12]
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	69fa      	ldr	r2, [r7, #28]
 800278a:	68d2      	ldr	r2, [r2, #12]
 800278c:	609a      	str	r2, [r3, #8]
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	69fa      	ldr	r2, [r7, #28]
 8002794:	6892      	ldr	r2, [r2, #8]
 8002796:	605a      	str	r2, [r3, #4]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	685a      	ldr	r2, [r3, #4]
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	3304      	adds	r3, #4
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d103      	bne.n	80027ac <xTaskResumeAll+0xc4>
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	68da      	ldr	r2, [r3, #12]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	605a      	str	r2, [r3, #4]
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	2200      	movs	r2, #0
 80027b0:	615a      	str	r2, [r3, #20]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	1e5a      	subs	r2, r3, #1
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	4618      	mov	r0, r3
 80027c0:	f002 fe1c 	bl	80053fc <SEGGER_SYSVIEW_OnTaskStartReady>
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c8:	2201      	movs	r2, #1
 80027ca:	409a      	lsls	r2, r3
 80027cc:	4b40      	ldr	r3, [pc, #256]	; (80028d0 <xTaskResumeAll+0x1e8>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	4a3f      	ldr	r2, [pc, #252]	; (80028d0 <xTaskResumeAll+0x1e8>)
 80027d4:	6013      	str	r3, [r2, #0]
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027da:	493e      	ldr	r1, [pc, #248]	; (80028d4 <xTaskResumeAll+0x1ec>)
 80027dc:	4613      	mov	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4413      	add	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	440b      	add	r3, r1
 80027e6:	3304      	adds	r3, #4
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	60bb      	str	r3, [r7, #8]
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	68ba      	ldr	r2, [r7, #8]
 80027f0:	609a      	str	r2, [r3, #8]
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	689a      	ldr	r2, [r3, #8]
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	60da      	str	r2, [r3, #12]
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	69fa      	ldr	r2, [r7, #28]
 8002800:	3204      	adds	r2, #4
 8002802:	605a      	str	r2, [r3, #4]
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	1d1a      	adds	r2, r3, #4
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	609a      	str	r2, [r3, #8]
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002810:	4613      	mov	r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	4413      	add	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4a2e      	ldr	r2, [pc, #184]	; (80028d4 <xTaskResumeAll+0x1ec>)
 800281a:	441a      	add	r2, r3
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	615a      	str	r2, [r3, #20]
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002824:	492b      	ldr	r1, [pc, #172]	; (80028d4 <xTaskResumeAll+0x1ec>)
 8002826:	4613      	mov	r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	4413      	add	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	440b      	add	r3, r1
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	1c59      	adds	r1, r3, #1
 8002834:	4827      	ldr	r0, [pc, #156]	; (80028d4 <xTaskResumeAll+0x1ec>)
 8002836:	4613      	mov	r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	4413      	add	r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	4403      	add	r3, r0
 8002840:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002846:	4b24      	ldr	r3, [pc, #144]	; (80028d8 <xTaskResumeAll+0x1f0>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284c:	429a      	cmp	r2, r3
 800284e:	d302      	bcc.n	8002856 <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8002850:	4b22      	ldr	r3, [pc, #136]	; (80028dc <xTaskResumeAll+0x1f4>)
 8002852:	2201      	movs	r2, #1
 8002854:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002856:	4b1d      	ldr	r3, [pc, #116]	; (80028cc <xTaskResumeAll+0x1e4>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2b00      	cmp	r3, #0
 800285c:	f47f af6c 	bne.w	8002738 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002866:	f000 fa7b 	bl	8002d60 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800286a:	4b1d      	ldr	r3, [pc, #116]	; (80028e0 <xTaskResumeAll+0x1f8>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d010      	beq.n	8002898 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002876:	f000 f859 	bl	800292c <xTaskIncrementTick>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d002      	beq.n	8002886 <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8002880:	4b16      	ldr	r3, [pc, #88]	; (80028dc <xTaskResumeAll+0x1f4>)
 8002882:	2201      	movs	r2, #1
 8002884:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	3b01      	subs	r3, #1
 800288a:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1f1      	bne.n	8002876 <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8002892:	4b13      	ldr	r3, [pc, #76]	; (80028e0 <xTaskResumeAll+0x1f8>)
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002898:	4b10      	ldr	r3, [pc, #64]	; (80028dc <xTaskResumeAll+0x1f4>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d009      	beq.n	80028b4 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80028a0:	2301      	movs	r3, #1
 80028a2:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80028a4:	4b0f      	ldr	r3, [pc, #60]	; (80028e4 <xTaskResumeAll+0x1fc>)
 80028a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	f3bf 8f4f 	dsb	sy
 80028b0:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80028b4:	f000 fcd6 	bl	8003264 <vPortExitCritical>

    return xAlreadyYielded;
 80028b8:	69bb      	ldr	r3, [r7, #24]
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3720      	adds	r7, #32
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	20000138 	.word	0x20000138
 80028c8:	20000110 	.word	0x20000110
 80028cc:	200000d0 	.word	0x200000d0
 80028d0:	20000118 	.word	0x20000118
 80028d4:	2000003c 	.word	0x2000003c
 80028d8:	20000038 	.word	0x20000038
 80028dc:	20000124 	.word	0x20000124
 80028e0:	20000120 	.word	0x20000120
 80028e4:	e000ed04 	.word	0xe000ed04

080028e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80028ee:	4b05      	ldr	r3, [pc, #20]	; (8002904 <xTaskGetTickCount+0x1c>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80028f4:	687b      	ldr	r3, [r7, #4]
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	20000114 	.word	0x20000114

08002908 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800290e:	f000 fd65 	bl	80033dc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002912:	2300      	movs	r3, #0
 8002914:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002916:	4b04      	ldr	r3, [pc, #16]	; (8002928 <xTaskGetTickCountFromISR+0x20>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800291c:	683b      	ldr	r3, [r7, #0]
}
 800291e:	4618      	mov	r0, r3
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	20000114 	.word	0x20000114

0800292c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b08a      	sub	sp, #40	; 0x28
 8002930:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002932:	2300      	movs	r3, #0
 8002934:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002936:	4b7f      	ldr	r3, [pc, #508]	; (8002b34 <xTaskIncrementTick+0x208>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2b00      	cmp	r3, #0
 800293c:	f040 80f0 	bne.w	8002b20 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002940:	4b7d      	ldr	r3, [pc, #500]	; (8002b38 <xTaskIncrementTick+0x20c>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	3301      	adds	r3, #1
 8002946:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002948:	4a7b      	ldr	r2, [pc, #492]	; (8002b38 <xTaskIncrementTick+0x20c>)
 800294a:	6a3b      	ldr	r3, [r7, #32]
 800294c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800294e:	6a3b      	ldr	r3, [r7, #32]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d120      	bne.n	8002996 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002954:	4b79      	ldr	r3, [pc, #484]	; (8002b3c <xTaskIncrementTick+0x210>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00a      	beq.n	8002974 <xTaskIncrementTick+0x48>
        __asm volatile
 800295e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002962:	f383 8811 	msr	BASEPRI, r3
 8002966:	f3bf 8f6f 	isb	sy
 800296a:	f3bf 8f4f 	dsb	sy
 800296e:	607b      	str	r3, [r7, #4]
    }
 8002970:	bf00      	nop
 8002972:	e7fe      	b.n	8002972 <xTaskIncrementTick+0x46>
 8002974:	4b71      	ldr	r3, [pc, #452]	; (8002b3c <xTaskIncrementTick+0x210>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	61fb      	str	r3, [r7, #28]
 800297a:	4b71      	ldr	r3, [pc, #452]	; (8002b40 <xTaskIncrementTick+0x214>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a6f      	ldr	r2, [pc, #444]	; (8002b3c <xTaskIncrementTick+0x210>)
 8002980:	6013      	str	r3, [r2, #0]
 8002982:	4a6f      	ldr	r2, [pc, #444]	; (8002b40 <xTaskIncrementTick+0x214>)
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	6013      	str	r3, [r2, #0]
 8002988:	4b6e      	ldr	r3, [pc, #440]	; (8002b44 <xTaskIncrementTick+0x218>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	3301      	adds	r3, #1
 800298e:	4a6d      	ldr	r2, [pc, #436]	; (8002b44 <xTaskIncrementTick+0x218>)
 8002990:	6013      	str	r3, [r2, #0]
 8002992:	f000 f9e5 	bl	8002d60 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002996:	4b6c      	ldr	r3, [pc, #432]	; (8002b48 <xTaskIncrementTick+0x21c>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	6a3a      	ldr	r2, [r7, #32]
 800299c:	429a      	cmp	r2, r3
 800299e:	f0c0 80aa 	bcc.w	8002af6 <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80029a2:	4b66      	ldr	r3, [pc, #408]	; (8002b3c <xTaskIncrementTick+0x210>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d104      	bne.n	80029b6 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029ac:	4b66      	ldr	r3, [pc, #408]	; (8002b48 <xTaskIncrementTick+0x21c>)
 80029ae:	f04f 32ff 	mov.w	r2, #4294967295
 80029b2:	601a      	str	r2, [r3, #0]
                    break;
 80029b4:	e09f      	b.n	8002af6 <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80029b6:	4b61      	ldr	r3, [pc, #388]	; (8002b3c <xTaskIncrementTick+0x210>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80029c6:	6a3a      	ldr	r2, [r7, #32]
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d203      	bcs.n	80029d6 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80029ce:	4a5e      	ldr	r2, [pc, #376]	; (8002b48 <xTaskIncrementTick+0x21c>)
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80029d4:	e08f      	b.n	8002af6 <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	613b      	str	r3, [r7, #16]
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	68d2      	ldr	r2, [r2, #12]
 80029e4:	609a      	str	r2, [r3, #8]
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	69ba      	ldr	r2, [r7, #24]
 80029ec:	6892      	ldr	r2, [r2, #8]
 80029ee:	605a      	str	r2, [r3, #4]
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	685a      	ldr	r2, [r3, #4]
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	3304      	adds	r3, #4
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d103      	bne.n	8002a04 <xTaskIncrementTick+0xd8>
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	68da      	ldr	r2, [r3, #12]
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	605a      	str	r2, [r3, #4]
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	2200      	movs	r2, #0
 8002a08:	615a      	str	r2, [r3, #20]
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	1e5a      	subs	r2, r3, #1
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d01e      	beq.n	8002a5a <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a20:	60fb      	str	r3, [r7, #12]
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	69db      	ldr	r3, [r3, #28]
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	6a12      	ldr	r2, [r2, #32]
 8002a2a:	609a      	str	r2, [r3, #8]
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	6a1b      	ldr	r3, [r3, #32]
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	69d2      	ldr	r2, [r2, #28]
 8002a34:	605a      	str	r2, [r3, #4]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	685a      	ldr	r2, [r3, #4]
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	3318      	adds	r3, #24
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d103      	bne.n	8002a4a <xTaskIncrementTick+0x11e>
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	6a1a      	ldr	r2, [r3, #32]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	605a      	str	r2, [r3, #4]
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	629a      	str	r2, [r3, #40]	; 0x28
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	1e5a      	subs	r2, r3, #1
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f002 fccd 	bl	80053fc <SEGGER_SYSVIEW_OnTaskStartReady>
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a66:	2201      	movs	r2, #1
 8002a68:	409a      	lsls	r2, r3
 8002a6a:	4b38      	ldr	r3, [pc, #224]	; (8002b4c <xTaskIncrementTick+0x220>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	4a36      	ldr	r2, [pc, #216]	; (8002b4c <xTaskIncrementTick+0x220>)
 8002a72:	6013      	str	r3, [r2, #0]
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a78:	4935      	ldr	r1, [pc, #212]	; (8002b50 <xTaskIncrementTick+0x224>)
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	4413      	add	r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	440b      	add	r3, r1
 8002a84:	3304      	adds	r3, #4
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	60bb      	str	r3, [r7, #8]
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	68ba      	ldr	r2, [r7, #8]
 8002a8e:	609a      	str	r2, [r3, #8]
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	689a      	ldr	r2, [r3, #8]
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	60da      	str	r2, [r3, #12]
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	3204      	adds	r2, #4
 8002aa0:	605a      	str	r2, [r3, #4]
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	1d1a      	adds	r2, r3, #4
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	609a      	str	r2, [r3, #8]
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aae:	4613      	mov	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	4413      	add	r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	4a26      	ldr	r2, [pc, #152]	; (8002b50 <xTaskIncrementTick+0x224>)
 8002ab8:	441a      	add	r2, r3
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	615a      	str	r2, [r3, #20]
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ac2:	4923      	ldr	r1, [pc, #140]	; (8002b50 <xTaskIncrementTick+0x224>)
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	4413      	add	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	440b      	add	r3, r1
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	1c59      	adds	r1, r3, #1
 8002ad2:	481f      	ldr	r0, [pc, #124]	; (8002b50 <xTaskIncrementTick+0x224>)
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	4413      	add	r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	4403      	add	r3, r0
 8002ade:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ae4:	4b1b      	ldr	r3, [pc, #108]	; (8002b54 <xTaskIncrementTick+0x228>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aea:	429a      	cmp	r2, r3
 8002aec:	f4ff af59 	bcc.w	80029a2 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8002af0:	2301      	movs	r3, #1
 8002af2:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002af4:	e755      	b.n	80029a2 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002af6:	4b17      	ldr	r3, [pc, #92]	; (8002b54 <xTaskIncrementTick+0x228>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002afc:	4914      	ldr	r1, [pc, #80]	; (8002b50 <xTaskIncrementTick+0x224>)
 8002afe:	4613      	mov	r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4413      	add	r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	440b      	add	r3, r1
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d901      	bls.n	8002b12 <xTaskIncrementTick+0x1e6>
                {
                    xSwitchRequired = pdTRUE;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002b12:	4b11      	ldr	r3, [pc, #68]	; (8002b58 <xTaskIncrementTick+0x22c>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d007      	beq.n	8002b2a <xTaskIncrementTick+0x1fe>
                {
                    xSwitchRequired = pdTRUE;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b1e:	e004      	b.n	8002b2a <xTaskIncrementTick+0x1fe>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002b20:	4b0e      	ldr	r3, [pc, #56]	; (8002b5c <xTaskIncrementTick+0x230>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	3301      	adds	r3, #1
 8002b26:	4a0d      	ldr	r2, [pc, #52]	; (8002b5c <xTaskIncrementTick+0x230>)
 8002b28:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3728      	adds	r7, #40	; 0x28
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	20000138 	.word	0x20000138
 8002b38:	20000114 	.word	0x20000114
 8002b3c:	200000c8 	.word	0x200000c8
 8002b40:	200000cc 	.word	0x200000cc
 8002b44:	20000128 	.word	0x20000128
 8002b48:	20000130 	.word	0x20000130
 8002b4c:	20000118 	.word	0x20000118
 8002b50:	2000003c 	.word	0x2000003c
 8002b54:	20000038 	.word	0x20000038
 8002b58:	20000124 	.word	0x20000124
 8002b5c:	20000120 	.word	0x20000120

08002b60 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002b66:	4b2d      	ldr	r3, [pc, #180]	; (8002c1c <vTaskSwitchContext+0xbc>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d003      	beq.n	8002b76 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002b6e:	4b2c      	ldr	r3, [pc, #176]	; (8002c20 <vTaskSwitchContext+0xc0>)
 8002b70:	2201      	movs	r2, #1
 8002b72:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002b74:	e04d      	b.n	8002c12 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002b76:	4b2a      	ldr	r3, [pc, #168]	; (8002c20 <vTaskSwitchContext+0xc0>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b7c:	4b29      	ldr	r3, [pc, #164]	; (8002c24 <vTaskSwitchContext+0xc4>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	fab3 f383 	clz	r3, r3
 8002b88:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002b8a:	7afb      	ldrb	r3, [r7, #11]
 8002b8c:	f1c3 031f 	rsb	r3, r3, #31
 8002b90:	617b      	str	r3, [r7, #20]
 8002b92:	4925      	ldr	r1, [pc, #148]	; (8002c28 <vTaskSwitchContext+0xc8>)
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	4613      	mov	r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	4413      	add	r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	440b      	add	r3, r1
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d10a      	bne.n	8002bbc <vTaskSwitchContext+0x5c>
        __asm volatile
 8002ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002baa:	f383 8811 	msr	BASEPRI, r3
 8002bae:	f3bf 8f6f 	isb	sy
 8002bb2:	f3bf 8f4f 	dsb	sy
 8002bb6:	607b      	str	r3, [r7, #4]
    }
 8002bb8:	bf00      	nop
 8002bba:	e7fe      	b.n	8002bba <vTaskSwitchContext+0x5a>
 8002bbc:	697a      	ldr	r2, [r7, #20]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	4413      	add	r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	4a18      	ldr	r2, [pc, #96]	; (8002c28 <vTaskSwitchContext+0xc8>)
 8002bc8:	4413      	add	r3, r2
 8002bca:	613b      	str	r3, [r7, #16]
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	685a      	ldr	r2, [r3, #4]
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	605a      	str	r2, [r3, #4]
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	685a      	ldr	r2, [r3, #4]
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	3308      	adds	r3, #8
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d104      	bne.n	8002bec <vTaskSwitchContext+0x8c>
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	685a      	ldr	r2, [r3, #4]
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	605a      	str	r2, [r3, #4]
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	4a0e      	ldr	r2, [pc, #56]	; (8002c2c <vTaskSwitchContext+0xcc>)
 8002bf4:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002bf6:	4b0d      	ldr	r3, [pc, #52]	; (8002c2c <vTaskSwitchContext+0xcc>)
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	4b0d      	ldr	r3, [pc, #52]	; (8002c30 <vTaskSwitchContext+0xd0>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d102      	bne.n	8002c08 <vTaskSwitchContext+0xa8>
 8002c02:	f002 fb5b 	bl	80052bc <SEGGER_SYSVIEW_OnIdle>
}
 8002c06:	e004      	b.n	8002c12 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002c08:	4b08      	ldr	r3, [pc, #32]	; (8002c2c <vTaskSwitchContext+0xcc>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f002 fbb3 	bl	8005378 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002c12:	bf00      	nop
 8002c14:	3718      	adds	r7, #24
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	20000138 	.word	0x20000138
 8002c20:	20000124 	.word	0x20000124
 8002c24:	20000118 	.word	0x20000118
 8002c28:	2000003c 	.word	0x2000003c
 8002c2c:	20000038 	.word	0x20000038
 8002c30:	20000134 	.word	0x20000134

08002c34 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002c3c:	f000 f852 	bl	8002ce4 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002c40:	4b06      	ldr	r3, [pc, #24]	; (8002c5c <prvIdleTask+0x28>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d9f9      	bls.n	8002c3c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002c48:	4b05      	ldr	r3, [pc, #20]	; (8002c60 <prvIdleTask+0x2c>)
 8002c4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c4e:	601a      	str	r2, [r3, #0]
 8002c50:	f3bf 8f4f 	dsb	sy
 8002c54:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002c58:	e7f0      	b.n	8002c3c <prvIdleTask+0x8>
 8002c5a:	bf00      	nop
 8002c5c:	2000003c 	.word	0x2000003c
 8002c60:	e000ed04 	.word	0xe000ed04

08002c64 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	607b      	str	r3, [r7, #4]
 8002c6e:	e00c      	b.n	8002c8a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	4613      	mov	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	4413      	add	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	4a12      	ldr	r2, [pc, #72]	; (8002cc4 <prvInitialiseTaskLists+0x60>)
 8002c7c:	4413      	add	r3, r2
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7ff fa1c 	bl	80020bc <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	3301      	adds	r3, #1
 8002c88:	607b      	str	r3, [r7, #4]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2b04      	cmp	r3, #4
 8002c8e:	d9ef      	bls.n	8002c70 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002c90:	480d      	ldr	r0, [pc, #52]	; (8002cc8 <prvInitialiseTaskLists+0x64>)
 8002c92:	f7ff fa13 	bl	80020bc <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002c96:	480d      	ldr	r0, [pc, #52]	; (8002ccc <prvInitialiseTaskLists+0x68>)
 8002c98:	f7ff fa10 	bl	80020bc <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002c9c:	480c      	ldr	r0, [pc, #48]	; (8002cd0 <prvInitialiseTaskLists+0x6c>)
 8002c9e:	f7ff fa0d 	bl	80020bc <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002ca2:	480c      	ldr	r0, [pc, #48]	; (8002cd4 <prvInitialiseTaskLists+0x70>)
 8002ca4:	f7ff fa0a 	bl	80020bc <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002ca8:	480b      	ldr	r0, [pc, #44]	; (8002cd8 <prvInitialiseTaskLists+0x74>)
 8002caa:	f7ff fa07 	bl	80020bc <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002cae:	4b0b      	ldr	r3, [pc, #44]	; (8002cdc <prvInitialiseTaskLists+0x78>)
 8002cb0:	4a05      	ldr	r2, [pc, #20]	; (8002cc8 <prvInitialiseTaskLists+0x64>)
 8002cb2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002cb4:	4b0a      	ldr	r3, [pc, #40]	; (8002ce0 <prvInitialiseTaskLists+0x7c>)
 8002cb6:	4a05      	ldr	r2, [pc, #20]	; (8002ccc <prvInitialiseTaskLists+0x68>)
 8002cb8:	601a      	str	r2, [r3, #0]
}
 8002cba:	bf00      	nop
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	2000003c 	.word	0x2000003c
 8002cc8:	200000a0 	.word	0x200000a0
 8002ccc:	200000b4 	.word	0x200000b4
 8002cd0:	200000d0 	.word	0x200000d0
 8002cd4:	200000e4 	.word	0x200000e4
 8002cd8:	200000fc 	.word	0x200000fc
 8002cdc:	200000c8 	.word	0x200000c8
 8002ce0:	200000cc 	.word	0x200000cc

08002ce4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002cea:	e019      	b.n	8002d20 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002cec:	f000 fa8a 	bl	8003204 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002cf0:	4b10      	ldr	r3, [pc, #64]	; (8002d34 <prvCheckTasksWaitingTermination+0x50>)
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	3304      	adds	r3, #4
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff fa43 	bl	8002188 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002d02:	4b0d      	ldr	r3, [pc, #52]	; (8002d38 <prvCheckTasksWaitingTermination+0x54>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	3b01      	subs	r3, #1
 8002d08:	4a0b      	ldr	r2, [pc, #44]	; (8002d38 <prvCheckTasksWaitingTermination+0x54>)
 8002d0a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002d0c:	4b0b      	ldr	r3, [pc, #44]	; (8002d3c <prvCheckTasksWaitingTermination+0x58>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	3b01      	subs	r3, #1
 8002d12:	4a0a      	ldr	r2, [pc, #40]	; (8002d3c <prvCheckTasksWaitingTermination+0x58>)
 8002d14:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002d16:	f000 faa5 	bl	8003264 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 f810 	bl	8002d40 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002d20:	4b06      	ldr	r3, [pc, #24]	; (8002d3c <prvCheckTasksWaitingTermination+0x58>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d1e1      	bne.n	8002cec <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002d28:	bf00      	nop
 8002d2a:	bf00      	nop
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	200000e4 	.word	0x200000e4
 8002d38:	20000110 	.word	0x20000110
 8002d3c:	200000f8 	.word	0x200000f8

08002d40 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f000 fc65 	bl	800361c <vPortFree>
                vPortFree( pxTCB );
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 fc62 	bl	800361c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002d58:	bf00      	nop
 8002d5a:	3708      	adds	r7, #8
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d64:	4b0a      	ldr	r3, [pc, #40]	; (8002d90 <prvResetNextTaskUnblockTime+0x30>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d104      	bne.n	8002d78 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002d6e:	4b09      	ldr	r3, [pc, #36]	; (8002d94 <prvResetNextTaskUnblockTime+0x34>)
 8002d70:	f04f 32ff 	mov.w	r2, #4294967295
 8002d74:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002d76:	e005      	b.n	8002d84 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002d78:	4b05      	ldr	r3, [pc, #20]	; (8002d90 <prvResetNextTaskUnblockTime+0x30>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a04      	ldr	r2, [pc, #16]	; (8002d94 <prvResetNextTaskUnblockTime+0x34>)
 8002d82:	6013      	str	r3, [r2, #0]
}
 8002d84:	bf00      	nop
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	200000c8 	.word	0x200000c8
 8002d94:	20000130 	.word	0x20000130

08002d98 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002da2:	4b3c      	ldr	r3, [pc, #240]	; (8002e94 <prvAddCurrentTaskToDelayedList+0xfc>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002da8:	4b3b      	ldr	r3, [pc, #236]	; (8002e98 <prvAddCurrentTaskToDelayedList+0x100>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	3304      	adds	r3, #4
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7ff f9ea 	bl	8002188 <uxListRemove>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d10b      	bne.n	8002dd2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002dba:	4b37      	ldr	r3, [pc, #220]	; (8002e98 <prvAddCurrentTaskToDelayedList+0x100>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc6:	43da      	mvns	r2, r3
 8002dc8:	4b34      	ldr	r3, [pc, #208]	; (8002e9c <prvAddCurrentTaskToDelayedList+0x104>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	4a33      	ldr	r2, [pc, #204]	; (8002e9c <prvAddCurrentTaskToDelayedList+0x104>)
 8002dd0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd8:	d124      	bne.n	8002e24 <prvAddCurrentTaskToDelayedList+0x8c>
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d021      	beq.n	8002e24 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002de0:	4b2f      	ldr	r3, [pc, #188]	; (8002ea0 <prvAddCurrentTaskToDelayedList+0x108>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	613b      	str	r3, [r7, #16]
 8002de6:	4b2c      	ldr	r3, [pc, #176]	; (8002e98 <prvAddCurrentTaskToDelayedList+0x100>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	693a      	ldr	r2, [r7, #16]
 8002dec:	609a      	str	r2, [r3, #8]
 8002dee:	4b2a      	ldr	r3, [pc, #168]	; (8002e98 <prvAddCurrentTaskToDelayedList+0x100>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	6892      	ldr	r2, [r2, #8]
 8002df6:	60da      	str	r2, [r3, #12]
 8002df8:	4b27      	ldr	r3, [pc, #156]	; (8002e98 <prvAddCurrentTaskToDelayedList+0x100>)
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	3204      	adds	r2, #4
 8002e02:	605a      	str	r2, [r3, #4]
 8002e04:	4b24      	ldr	r3, [pc, #144]	; (8002e98 <prvAddCurrentTaskToDelayedList+0x100>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	1d1a      	adds	r2, r3, #4
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	609a      	str	r2, [r3, #8]
 8002e0e:	4b22      	ldr	r3, [pc, #136]	; (8002e98 <prvAddCurrentTaskToDelayedList+0x100>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a23      	ldr	r2, [pc, #140]	; (8002ea0 <prvAddCurrentTaskToDelayedList+0x108>)
 8002e14:	615a      	str	r2, [r3, #20]
 8002e16:	4b22      	ldr	r3, [pc, #136]	; (8002ea0 <prvAddCurrentTaskToDelayedList+0x108>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	4a20      	ldr	r2, [pc, #128]	; (8002ea0 <prvAddCurrentTaskToDelayedList+0x108>)
 8002e1e:	6013      	str	r3, [r2, #0]
 8002e20:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002e22:	e032      	b.n	8002e8a <prvAddCurrentTaskToDelayedList+0xf2>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8002e24:	697a      	ldr	r2, [r7, #20]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4413      	add	r3, r2
 8002e2a:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002e2c:	4b1a      	ldr	r3, [pc, #104]	; (8002e98 <prvAddCurrentTaskToDelayedList+0x100>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8002e34:	68fa      	ldr	r2, [r7, #12]
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d20f      	bcs.n	8002e5c <prvAddCurrentTaskToDelayedList+0xc4>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8002e3c:	4b16      	ldr	r3, [pc, #88]	; (8002e98 <prvAddCurrentTaskToDelayedList+0x100>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2104      	movs	r1, #4
 8002e42:	4618      	mov	r0, r3
 8002e44:	f002 fb1c 	bl	8005480 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e48:	4b16      	ldr	r3, [pc, #88]	; (8002ea4 <prvAddCurrentTaskToDelayedList+0x10c>)
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	4b12      	ldr	r3, [pc, #72]	; (8002e98 <prvAddCurrentTaskToDelayedList+0x100>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	3304      	adds	r3, #4
 8002e52:	4619      	mov	r1, r3
 8002e54:	4610      	mov	r0, r2
 8002e56:	f7ff f95e 	bl	8002116 <vListInsert>
}
 8002e5a:	e016      	b.n	8002e8a <prvAddCurrentTaskToDelayedList+0xf2>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8002e5c:	4b0e      	ldr	r3, [pc, #56]	; (8002e98 <prvAddCurrentTaskToDelayedList+0x100>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2104      	movs	r1, #4
 8002e62:	4618      	mov	r0, r3
 8002e64:	f002 fb0c 	bl	8005480 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e68:	4b0f      	ldr	r3, [pc, #60]	; (8002ea8 <prvAddCurrentTaskToDelayedList+0x110>)
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	4b0a      	ldr	r3, [pc, #40]	; (8002e98 <prvAddCurrentTaskToDelayedList+0x100>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	3304      	adds	r3, #4
 8002e72:	4619      	mov	r1, r3
 8002e74:	4610      	mov	r0, r2
 8002e76:	f7ff f94e 	bl	8002116 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8002e7a:	4b0c      	ldr	r3, [pc, #48]	; (8002eac <prvAddCurrentTaskToDelayedList+0x114>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d202      	bcs.n	8002e8a <prvAddCurrentTaskToDelayedList+0xf2>
                        xNextTaskUnblockTime = xTimeToWake;
 8002e84:	4a09      	ldr	r2, [pc, #36]	; (8002eac <prvAddCurrentTaskToDelayedList+0x114>)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6013      	str	r3, [r2, #0]
}
 8002e8a:	bf00      	nop
 8002e8c:	3718      	adds	r7, #24
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	20000114 	.word	0x20000114
 8002e98:	20000038 	.word	0x20000038
 8002e9c:	20000118 	.word	0x20000118
 8002ea0:	200000fc 	.word	0x200000fc
 8002ea4:	200000cc 	.word	0x200000cc
 8002ea8:	200000c8 	.word	0x200000c8
 8002eac:	20000130 	.word	0x20000130

08002eb0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b085      	sub	sp, #20
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	3b04      	subs	r3, #4
 8002ec0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ec8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	3b04      	subs	r3, #4
 8002ece:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	f023 0201 	bic.w	r2, r3, #1
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	3b04      	subs	r3, #4
 8002ede:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002ee0:	4a0c      	ldr	r2, [pc, #48]	; (8002f14 <pxPortInitialiseStack+0x64>)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	3b14      	subs	r3, #20
 8002eea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	3b04      	subs	r3, #4
 8002ef6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f06f 0202 	mvn.w	r2, #2
 8002efe:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	3b20      	subs	r3, #32
 8002f04:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002f06:	68fb      	ldr	r3, [r7, #12]
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3714      	adds	r7, #20
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr
 8002f14:	08002f19 	.word	0x08002f19

08002f18 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002f22:	4b12      	ldr	r3, [pc, #72]	; (8002f6c <prvTaskExitError+0x54>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f2a:	d00a      	beq.n	8002f42 <prvTaskExitError+0x2a>
        __asm volatile
 8002f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f30:	f383 8811 	msr	BASEPRI, r3
 8002f34:	f3bf 8f6f 	isb	sy
 8002f38:	f3bf 8f4f 	dsb	sy
 8002f3c:	60fb      	str	r3, [r7, #12]
    }
 8002f3e:	bf00      	nop
 8002f40:	e7fe      	b.n	8002f40 <prvTaskExitError+0x28>
        __asm volatile
 8002f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f46:	f383 8811 	msr	BASEPRI, r3
 8002f4a:	f3bf 8f6f 	isb	sy
 8002f4e:	f3bf 8f4f 	dsb	sy
 8002f52:	60bb      	str	r3, [r7, #8]
    }
 8002f54:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002f56:	bf00      	nop
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d0fc      	beq.n	8002f58 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002f5e:	bf00      	nop
 8002f60:	bf00      	nop
 8002f62:	3714      	adds	r7, #20
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr
 8002f6c:	20000010 	.word	0x20000010

08002f70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002f70:	4b07      	ldr	r3, [pc, #28]	; (8002f90 <pxCurrentTCBConst2>)
 8002f72:	6819      	ldr	r1, [r3, #0]
 8002f74:	6808      	ldr	r0, [r1, #0]
 8002f76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f7a:	f380 8809 	msr	PSP, r0
 8002f7e:	f3bf 8f6f 	isb	sy
 8002f82:	f04f 0000 	mov.w	r0, #0
 8002f86:	f380 8811 	msr	BASEPRI, r0
 8002f8a:	4770      	bx	lr
 8002f8c:	f3af 8000 	nop.w

08002f90 <pxCurrentTCBConst2>:
 8002f90:	20000038 	.word	0x20000038
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002f94:	bf00      	nop
 8002f96:	bf00      	nop

08002f98 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002f98:	4808      	ldr	r0, [pc, #32]	; (8002fbc <prvPortStartFirstTask+0x24>)
 8002f9a:	6800      	ldr	r0, [r0, #0]
 8002f9c:	6800      	ldr	r0, [r0, #0]
 8002f9e:	f380 8808 	msr	MSP, r0
 8002fa2:	f04f 0000 	mov.w	r0, #0
 8002fa6:	f380 8814 	msr	CONTROL, r0
 8002faa:	b662      	cpsie	i
 8002fac:	b661      	cpsie	f
 8002fae:	f3bf 8f4f 	dsb	sy
 8002fb2:	f3bf 8f6f 	isb	sy
 8002fb6:	df00      	svc	0
 8002fb8:	bf00      	nop
 8002fba:	0000      	.short	0x0000
 8002fbc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002fc0:	bf00      	nop
 8002fc2:	bf00      	nop

08002fc4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b086      	sub	sp, #24
 8002fc8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002fca:	4b46      	ldr	r3, [pc, #280]	; (80030e4 <xPortStartScheduler+0x120>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a46      	ldr	r2, [pc, #280]	; (80030e8 <xPortStartScheduler+0x124>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d10a      	bne.n	8002fea <xPortStartScheduler+0x26>
        __asm volatile
 8002fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fd8:	f383 8811 	msr	BASEPRI, r3
 8002fdc:	f3bf 8f6f 	isb	sy
 8002fe0:	f3bf 8f4f 	dsb	sy
 8002fe4:	613b      	str	r3, [r7, #16]
    }
 8002fe6:	bf00      	nop
 8002fe8:	e7fe      	b.n	8002fe8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002fea:	4b3e      	ldr	r3, [pc, #248]	; (80030e4 <xPortStartScheduler+0x120>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a3f      	ldr	r2, [pc, #252]	; (80030ec <xPortStartScheduler+0x128>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d10a      	bne.n	800300a <xPortStartScheduler+0x46>
        __asm volatile
 8002ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff8:	f383 8811 	msr	BASEPRI, r3
 8002ffc:	f3bf 8f6f 	isb	sy
 8003000:	f3bf 8f4f 	dsb	sy
 8003004:	60fb      	str	r3, [r7, #12]
    }
 8003006:	bf00      	nop
 8003008:	e7fe      	b.n	8003008 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800300a:	4b39      	ldr	r3, [pc, #228]	; (80030f0 <xPortStartScheduler+0x12c>)
 800300c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	b2db      	uxtb	r3, r3
 8003014:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	22ff      	movs	r2, #255	; 0xff
 800301a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	b2db      	uxtb	r3, r3
 8003022:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003024:	78fb      	ldrb	r3, [r7, #3]
 8003026:	b2db      	uxtb	r3, r3
 8003028:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800302c:	b2da      	uxtb	r2, r3
 800302e:	4b31      	ldr	r3, [pc, #196]	; (80030f4 <xPortStartScheduler+0x130>)
 8003030:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003032:	4b31      	ldr	r3, [pc, #196]	; (80030f8 <xPortStartScheduler+0x134>)
 8003034:	2207      	movs	r2, #7
 8003036:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003038:	e009      	b.n	800304e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800303a:	4b2f      	ldr	r3, [pc, #188]	; (80030f8 <xPortStartScheduler+0x134>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	3b01      	subs	r3, #1
 8003040:	4a2d      	ldr	r2, [pc, #180]	; (80030f8 <xPortStartScheduler+0x134>)
 8003042:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003044:	78fb      	ldrb	r3, [r7, #3]
 8003046:	b2db      	uxtb	r3, r3
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	b2db      	uxtb	r3, r3
 800304c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800304e:	78fb      	ldrb	r3, [r7, #3]
 8003050:	b2db      	uxtb	r3, r3
 8003052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003056:	2b80      	cmp	r3, #128	; 0x80
 8003058:	d0ef      	beq.n	800303a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800305a:	4b27      	ldr	r3, [pc, #156]	; (80030f8 <xPortStartScheduler+0x134>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f1c3 0307 	rsb	r3, r3, #7
 8003062:	2b04      	cmp	r3, #4
 8003064:	d00a      	beq.n	800307c <xPortStartScheduler+0xb8>
        __asm volatile
 8003066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800306a:	f383 8811 	msr	BASEPRI, r3
 800306e:	f3bf 8f6f 	isb	sy
 8003072:	f3bf 8f4f 	dsb	sy
 8003076:	60bb      	str	r3, [r7, #8]
    }
 8003078:	bf00      	nop
 800307a:	e7fe      	b.n	800307a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800307c:	4b1e      	ldr	r3, [pc, #120]	; (80030f8 <xPortStartScheduler+0x134>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	021b      	lsls	r3, r3, #8
 8003082:	4a1d      	ldr	r2, [pc, #116]	; (80030f8 <xPortStartScheduler+0x134>)
 8003084:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003086:	4b1c      	ldr	r3, [pc, #112]	; (80030f8 <xPortStartScheduler+0x134>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800308e:	4a1a      	ldr	r2, [pc, #104]	; (80030f8 <xPortStartScheduler+0x134>)
 8003090:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	b2da      	uxtb	r2, r3
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800309a:	4b18      	ldr	r3, [pc, #96]	; (80030fc <xPortStartScheduler+0x138>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a17      	ldr	r2, [pc, #92]	; (80030fc <xPortStartScheduler+0x138>)
 80030a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030a4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80030a6:	4b15      	ldr	r3, [pc, #84]	; (80030fc <xPortStartScheduler+0x138>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a14      	ldr	r2, [pc, #80]	; (80030fc <xPortStartScheduler+0x138>)
 80030ac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80030b0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80030b2:	f000 f963 	bl	800337c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80030b6:	4b12      	ldr	r3, [pc, #72]	; (8003100 <xPortStartScheduler+0x13c>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80030bc:	f000 f982 	bl	80033c4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80030c0:	4b10      	ldr	r3, [pc, #64]	; (8003104 <xPortStartScheduler+0x140>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a0f      	ldr	r2, [pc, #60]	; (8003104 <xPortStartScheduler+0x140>)
 80030c6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80030ca:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80030cc:	f7ff ff64 	bl	8002f98 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80030d0:	f7ff fd46 	bl	8002b60 <vTaskSwitchContext>
    prvTaskExitError();
 80030d4:	f7ff ff20 	bl	8002f18 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3718      	adds	r7, #24
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	e000ed00 	.word	0xe000ed00
 80030e8:	410fc271 	.word	0x410fc271
 80030ec:	410fc270 	.word	0x410fc270
 80030f0:	e000e400 	.word	0xe000e400
 80030f4:	2000013c 	.word	0x2000013c
 80030f8:	20000140 	.word	0x20000140
 80030fc:	e000ed20 	.word	0xe000ed20
 8003100:	20000010 	.word	0x20000010
 8003104:	e000ef34 	.word	0xe000ef34

08003108 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8003108:	b480      	push	{r7}
 800310a:	b087      	sub	sp, #28
 800310c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800310e:	4b37      	ldr	r3, [pc, #220]	; (80031ec <vInitPrioGroupValue+0xe4>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a37      	ldr	r2, [pc, #220]	; (80031f0 <vInitPrioGroupValue+0xe8>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d10a      	bne.n	800312e <vInitPrioGroupValue+0x26>
        __asm volatile
 8003118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800311c:	f383 8811 	msr	BASEPRI, r3
 8003120:	f3bf 8f6f 	isb	sy
 8003124:	f3bf 8f4f 	dsb	sy
 8003128:	613b      	str	r3, [r7, #16]
    }
 800312a:	bf00      	nop
 800312c:	e7fe      	b.n	800312c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800312e:	4b2f      	ldr	r3, [pc, #188]	; (80031ec <vInitPrioGroupValue+0xe4>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a30      	ldr	r2, [pc, #192]	; (80031f4 <vInitPrioGroupValue+0xec>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d10a      	bne.n	800314e <vInitPrioGroupValue+0x46>
        __asm volatile
 8003138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800313c:	f383 8811 	msr	BASEPRI, r3
 8003140:	f3bf 8f6f 	isb	sy
 8003144:	f3bf 8f4f 	dsb	sy
 8003148:	60fb      	str	r3, [r7, #12]
    }
 800314a:	bf00      	nop
 800314c:	e7fe      	b.n	800314c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800314e:	4b2a      	ldr	r3, [pc, #168]	; (80031f8 <vInitPrioGroupValue+0xf0>)
 8003150:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	b2db      	uxtb	r3, r3
 8003158:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	22ff      	movs	r2, #255	; 0xff
 800315e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	b2db      	uxtb	r3, r3
 8003166:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003168:	78fb      	ldrb	r3, [r7, #3]
 800316a:	b2db      	uxtb	r3, r3
 800316c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003170:	b2da      	uxtb	r2, r3
 8003172:	4b22      	ldr	r3, [pc, #136]	; (80031fc <vInitPrioGroupValue+0xf4>)
 8003174:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003176:	4b22      	ldr	r3, [pc, #136]	; (8003200 <vInitPrioGroupValue+0xf8>)
 8003178:	2207      	movs	r2, #7
 800317a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800317c:	e009      	b.n	8003192 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800317e:	4b20      	ldr	r3, [pc, #128]	; (8003200 <vInitPrioGroupValue+0xf8>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	3b01      	subs	r3, #1
 8003184:	4a1e      	ldr	r2, [pc, #120]	; (8003200 <vInitPrioGroupValue+0xf8>)
 8003186:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003188:	78fb      	ldrb	r3, [r7, #3]
 800318a:	b2db      	uxtb	r3, r3
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	b2db      	uxtb	r3, r3
 8003190:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003192:	78fb      	ldrb	r3, [r7, #3]
 8003194:	b2db      	uxtb	r3, r3
 8003196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800319a:	2b80      	cmp	r3, #128	; 0x80
 800319c:	d0ef      	beq.n	800317e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800319e:	4b18      	ldr	r3, [pc, #96]	; (8003200 <vInitPrioGroupValue+0xf8>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f1c3 0307 	rsb	r3, r3, #7
 80031a6:	2b04      	cmp	r3, #4
 80031a8:	d00a      	beq.n	80031c0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 80031aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ae:	f383 8811 	msr	BASEPRI, r3
 80031b2:	f3bf 8f6f 	isb	sy
 80031b6:	f3bf 8f4f 	dsb	sy
 80031ba:	60bb      	str	r3, [r7, #8]
    }
 80031bc:	bf00      	nop
 80031be:	e7fe      	b.n	80031be <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80031c0:	4b0f      	ldr	r3, [pc, #60]	; (8003200 <vInitPrioGroupValue+0xf8>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	021b      	lsls	r3, r3, #8
 80031c6:	4a0e      	ldr	r2, [pc, #56]	; (8003200 <vInitPrioGroupValue+0xf8>)
 80031c8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80031ca:	4b0d      	ldr	r3, [pc, #52]	; (8003200 <vInitPrioGroupValue+0xf8>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80031d2:	4a0b      	ldr	r2, [pc, #44]	; (8003200 <vInitPrioGroupValue+0xf8>)
 80031d4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	b2da      	uxtb	r2, r3
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80031de:	bf00      	nop
 80031e0:	371c      	adds	r7, #28
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	e000ed00 	.word	0xe000ed00
 80031f0:	410fc271 	.word	0x410fc271
 80031f4:	410fc270 	.word	0x410fc270
 80031f8:	e000e400 	.word	0xe000e400
 80031fc:	2000013c 	.word	0x2000013c
 8003200:	20000140 	.word	0x20000140

08003204 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
        __asm volatile
 800320a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800320e:	f383 8811 	msr	BASEPRI, r3
 8003212:	f3bf 8f6f 	isb	sy
 8003216:	f3bf 8f4f 	dsb	sy
 800321a:	607b      	str	r3, [r7, #4]
    }
 800321c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800321e:	4b0f      	ldr	r3, [pc, #60]	; (800325c <vPortEnterCritical+0x58>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	3301      	adds	r3, #1
 8003224:	4a0d      	ldr	r2, [pc, #52]	; (800325c <vPortEnterCritical+0x58>)
 8003226:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003228:	4b0c      	ldr	r3, [pc, #48]	; (800325c <vPortEnterCritical+0x58>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d10f      	bne.n	8003250 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003230:	4b0b      	ldr	r3, [pc, #44]	; (8003260 <vPortEnterCritical+0x5c>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00a      	beq.n	8003250 <vPortEnterCritical+0x4c>
        __asm volatile
 800323a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800323e:	f383 8811 	msr	BASEPRI, r3
 8003242:	f3bf 8f6f 	isb	sy
 8003246:	f3bf 8f4f 	dsb	sy
 800324a:	603b      	str	r3, [r7, #0]
    }
 800324c:	bf00      	nop
 800324e:	e7fe      	b.n	800324e <vPortEnterCritical+0x4a>
    }
}
 8003250:	bf00      	nop
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr
 800325c:	20000010 	.word	0x20000010
 8003260:	e000ed04 	.word	0xe000ed04

08003264 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800326a:	4b12      	ldr	r3, [pc, #72]	; (80032b4 <vPortExitCritical+0x50>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d10a      	bne.n	8003288 <vPortExitCritical+0x24>
        __asm volatile
 8003272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003276:	f383 8811 	msr	BASEPRI, r3
 800327a:	f3bf 8f6f 	isb	sy
 800327e:	f3bf 8f4f 	dsb	sy
 8003282:	607b      	str	r3, [r7, #4]
    }
 8003284:	bf00      	nop
 8003286:	e7fe      	b.n	8003286 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003288:	4b0a      	ldr	r3, [pc, #40]	; (80032b4 <vPortExitCritical+0x50>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	3b01      	subs	r3, #1
 800328e:	4a09      	ldr	r2, [pc, #36]	; (80032b4 <vPortExitCritical+0x50>)
 8003290:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003292:	4b08      	ldr	r3, [pc, #32]	; (80032b4 <vPortExitCritical+0x50>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d105      	bne.n	80032a6 <vPortExitCritical+0x42>
 800329a:	2300      	movs	r3, #0
 800329c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80032a4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80032a6:	bf00      	nop
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	20000010 	.word	0x20000010
	...

080032c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80032c0:	f3ef 8009 	mrs	r0, PSP
 80032c4:	f3bf 8f6f 	isb	sy
 80032c8:	4b15      	ldr	r3, [pc, #84]	; (8003320 <pxCurrentTCBConst>)
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	f01e 0f10 	tst.w	lr, #16
 80032d0:	bf08      	it	eq
 80032d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80032d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032da:	6010      	str	r0, [r2, #0]
 80032dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80032e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80032e4:	f380 8811 	msr	BASEPRI, r0
 80032e8:	f3bf 8f4f 	dsb	sy
 80032ec:	f3bf 8f6f 	isb	sy
 80032f0:	f7ff fc36 	bl	8002b60 <vTaskSwitchContext>
 80032f4:	f04f 0000 	mov.w	r0, #0
 80032f8:	f380 8811 	msr	BASEPRI, r0
 80032fc:	bc09      	pop	{r0, r3}
 80032fe:	6819      	ldr	r1, [r3, #0]
 8003300:	6808      	ldr	r0, [r1, #0]
 8003302:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003306:	f01e 0f10 	tst.w	lr, #16
 800330a:	bf08      	it	eq
 800330c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003310:	f380 8809 	msr	PSP, r0
 8003314:	f3bf 8f6f 	isb	sy
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	f3af 8000 	nop.w

08003320 <pxCurrentTCBConst>:
 8003320:	20000038 	.word	0x20000038
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003324:	bf00      	nop
 8003326:	bf00      	nop

08003328 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
        __asm volatile
 800332e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003332:	f383 8811 	msr	BASEPRI, r3
 8003336:	f3bf 8f6f 	isb	sy
 800333a:	f3bf 8f4f 	dsb	sy
 800333e:	607b      	str	r3, [r7, #4]
    }
 8003340:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003342:	f001 ff41 	bl	80051c8 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003346:	f7ff faf1 	bl	800292c <xTaskIncrementTick>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d006      	beq.n	800335e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003350:	f001 ff98 	bl	8005284 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003354:	4b08      	ldr	r3, [pc, #32]	; (8003378 <SysTick_Handler+0x50>)
 8003356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800335a:	601a      	str	r2, [r3, #0]
 800335c:	e001      	b.n	8003362 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800335e:	f001 ff75 	bl	800524c <SEGGER_SYSVIEW_RecordExitISR>
 8003362:	2300      	movs	r3, #0
 8003364:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	f383 8811 	msr	BASEPRI, r3
    }
 800336c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800336e:	bf00      	nop
 8003370:	3708      	adds	r7, #8
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	e000ed04 	.word	0xe000ed04

0800337c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003380:	4b0b      	ldr	r3, [pc, #44]	; (80033b0 <vPortSetupTimerInterrupt+0x34>)
 8003382:	2200      	movs	r2, #0
 8003384:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003386:	4b0b      	ldr	r3, [pc, #44]	; (80033b4 <vPortSetupTimerInterrupt+0x38>)
 8003388:	2200      	movs	r2, #0
 800338a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800338c:	4b0a      	ldr	r3, [pc, #40]	; (80033b8 <vPortSetupTimerInterrupt+0x3c>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a0a      	ldr	r2, [pc, #40]	; (80033bc <vPortSetupTimerInterrupt+0x40>)
 8003392:	fba2 2303 	umull	r2, r3, r2, r3
 8003396:	099b      	lsrs	r3, r3, #6
 8003398:	4a09      	ldr	r2, [pc, #36]	; (80033c0 <vPortSetupTimerInterrupt+0x44>)
 800339a:	3b01      	subs	r3, #1
 800339c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800339e:	4b04      	ldr	r3, [pc, #16]	; (80033b0 <vPortSetupTimerInterrupt+0x34>)
 80033a0:	2207      	movs	r2, #7
 80033a2:	601a      	str	r2, [r3, #0]
}
 80033a4:	bf00      	nop
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	e000e010 	.word	0xe000e010
 80033b4:	e000e018 	.word	0xe000e018
 80033b8:	20000000 	.word	0x20000000
 80033bc:	10624dd3 	.word	0x10624dd3
 80033c0:	e000e014 	.word	0xe000e014

080033c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80033c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80033d4 <vPortEnableVFP+0x10>
 80033c8:	6801      	ldr	r1, [r0, #0]
 80033ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80033ce:	6001      	str	r1, [r0, #0]
 80033d0:	4770      	bx	lr
 80033d2:	0000      	.short	0x0000
 80033d4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80033d8:	bf00      	nop
 80033da:	bf00      	nop

080033dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80033dc:	b480      	push	{r7}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80033e2:	f3ef 8305 	mrs	r3, IPSR
 80033e6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2b0f      	cmp	r3, #15
 80033ec:	d914      	bls.n	8003418 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80033ee:	4a17      	ldr	r2, [pc, #92]	; (800344c <vPortValidateInterruptPriority+0x70>)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	4413      	add	r3, r2
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80033f8:	4b15      	ldr	r3, [pc, #84]	; (8003450 <vPortValidateInterruptPriority+0x74>)
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	7afa      	ldrb	r2, [r7, #11]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d20a      	bcs.n	8003418 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003406:	f383 8811 	msr	BASEPRI, r3
 800340a:	f3bf 8f6f 	isb	sy
 800340e:	f3bf 8f4f 	dsb	sy
 8003412:	607b      	str	r3, [r7, #4]
    }
 8003414:	bf00      	nop
 8003416:	e7fe      	b.n	8003416 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003418:	4b0e      	ldr	r3, [pc, #56]	; (8003454 <vPortValidateInterruptPriority+0x78>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003420:	4b0d      	ldr	r3, [pc, #52]	; (8003458 <vPortValidateInterruptPriority+0x7c>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	429a      	cmp	r2, r3
 8003426:	d90a      	bls.n	800343e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800342c:	f383 8811 	msr	BASEPRI, r3
 8003430:	f3bf 8f6f 	isb	sy
 8003434:	f3bf 8f4f 	dsb	sy
 8003438:	603b      	str	r3, [r7, #0]
    }
 800343a:	bf00      	nop
 800343c:	e7fe      	b.n	800343c <vPortValidateInterruptPriority+0x60>
    }
 800343e:	bf00      	nop
 8003440:	3714      	adds	r7, #20
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	e000e3f0 	.word	0xe000e3f0
 8003450:	2000013c 	.word	0x2000013c
 8003454:	e000ed0c 	.word	0xe000ed0c
 8003458:	20000140 	.word	0x20000140

0800345c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b08a      	sub	sp, #40	; 0x28
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003464:	2300      	movs	r3, #0
 8003466:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003468:	f7ff f930 	bl	80026cc <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800346c:	4b65      	ldr	r3, [pc, #404]	; (8003604 <pvPortMalloc+0x1a8>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d101      	bne.n	8003478 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003474:	f000 f934 	bl	80036e0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003478:	4b63      	ldr	r3, [pc, #396]	; (8003608 <pvPortMalloc+0x1ac>)
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4013      	ands	r3, r2
 8003480:	2b00      	cmp	r3, #0
 8003482:	f040 80a7 	bne.w	80035d4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d02d      	beq.n	80034e8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800348c:	2208      	movs	r2, #8
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	429a      	cmp	r2, r3
 8003496:	d227      	bcs.n	80034e8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003498:	2208      	movs	r2, #8
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4413      	add	r3, r2
 800349e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f003 0307 	and.w	r3, r3, #7
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d021      	beq.n	80034ee <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f023 0307 	bic.w	r3, r3, #7
 80034b0:	3308      	adds	r3, #8
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d214      	bcs.n	80034e2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f023 0307 	bic.w	r3, r3, #7
 80034be:	3308      	adds	r3, #8
 80034c0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f003 0307 	and.w	r3, r3, #7
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d010      	beq.n	80034ee <pvPortMalloc+0x92>
        __asm volatile
 80034cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d0:	f383 8811 	msr	BASEPRI, r3
 80034d4:	f3bf 8f6f 	isb	sy
 80034d8:	f3bf 8f4f 	dsb	sy
 80034dc:	617b      	str	r3, [r7, #20]
    }
 80034de:	bf00      	nop
 80034e0:	e7fe      	b.n	80034e0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80034e2:	2300      	movs	r3, #0
 80034e4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80034e6:	e002      	b.n	80034ee <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 80034e8:	2300      	movs	r3, #0
 80034ea:	607b      	str	r3, [r7, #4]
 80034ec:	e000      	b.n	80034f0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80034ee:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d06e      	beq.n	80035d4 <pvPortMalloc+0x178>
 80034f6:	4b45      	ldr	r3, [pc, #276]	; (800360c <pvPortMalloc+0x1b0>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d869      	bhi.n	80035d4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003500:	4b43      	ldr	r3, [pc, #268]	; (8003610 <pvPortMalloc+0x1b4>)
 8003502:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003504:	4b42      	ldr	r3, [pc, #264]	; (8003610 <pvPortMalloc+0x1b4>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800350a:	e004      	b.n	8003516 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800350c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	429a      	cmp	r2, r3
 800351e:	d903      	bls.n	8003528 <pvPortMalloc+0xcc>
 8003520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d1f1      	bne.n	800350c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003528:	4b36      	ldr	r3, [pc, #216]	; (8003604 <pvPortMalloc+0x1a8>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800352e:	429a      	cmp	r2, r3
 8003530:	d050      	beq.n	80035d4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003532:	6a3b      	ldr	r3, [r7, #32]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2208      	movs	r2, #8
 8003538:	4413      	add	r3, r2
 800353a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800353c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	6a3b      	ldr	r3, [r7, #32]
 8003542:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	1ad2      	subs	r2, r2, r3
 800354c:	2308      	movs	r3, #8
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	429a      	cmp	r2, r3
 8003552:	d91f      	bls.n	8003594 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4413      	add	r3, r2
 800355a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	f003 0307 	and.w	r3, r3, #7
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00a      	beq.n	800357c <pvPortMalloc+0x120>
        __asm volatile
 8003566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800356a:	f383 8811 	msr	BASEPRI, r3
 800356e:	f3bf 8f6f 	isb	sy
 8003572:	f3bf 8f4f 	dsb	sy
 8003576:	613b      	str	r3, [r7, #16]
    }
 8003578:	bf00      	nop
 800357a:	e7fe      	b.n	800357a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357e:	685a      	ldr	r2, [r3, #4]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	1ad2      	subs	r2, r2, r3
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800358e:	69b8      	ldr	r0, [r7, #24]
 8003590:	f000 f908 	bl	80037a4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003594:	4b1d      	ldr	r3, [pc, #116]	; (800360c <pvPortMalloc+0x1b0>)
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	4a1b      	ldr	r2, [pc, #108]	; (800360c <pvPortMalloc+0x1b0>)
 80035a0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80035a2:	4b1a      	ldr	r3, [pc, #104]	; (800360c <pvPortMalloc+0x1b0>)
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	4b1b      	ldr	r3, [pc, #108]	; (8003614 <pvPortMalloc+0x1b8>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d203      	bcs.n	80035b6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80035ae:	4b17      	ldr	r3, [pc, #92]	; (800360c <pvPortMalloc+0x1b0>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a18      	ldr	r2, [pc, #96]	; (8003614 <pvPortMalloc+0x1b8>)
 80035b4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80035b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b8:	685a      	ldr	r2, [r3, #4]
 80035ba:	4b13      	ldr	r3, [pc, #76]	; (8003608 <pvPortMalloc+0x1ac>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	431a      	orrs	r2, r3
 80035c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80035c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c6:	2200      	movs	r2, #0
 80035c8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80035ca:	4b13      	ldr	r3, [pc, #76]	; (8003618 <pvPortMalloc+0x1bc>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	3301      	adds	r3, #1
 80035d0:	4a11      	ldr	r2, [pc, #68]	; (8003618 <pvPortMalloc+0x1bc>)
 80035d2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80035d4:	f7ff f888 	bl	80026e8 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	f003 0307 	and.w	r3, r3, #7
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00a      	beq.n	80035f8 <pvPortMalloc+0x19c>
        __asm volatile
 80035e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e6:	f383 8811 	msr	BASEPRI, r3
 80035ea:	f3bf 8f6f 	isb	sy
 80035ee:	f3bf 8f4f 	dsb	sy
 80035f2:	60fb      	str	r3, [r7, #12]
    }
 80035f4:	bf00      	nop
 80035f6:	e7fe      	b.n	80035f6 <pvPortMalloc+0x19a>
    return pvReturn;
 80035f8:	69fb      	ldr	r3, [r7, #28]
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3728      	adds	r7, #40	; 0x28
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	20012d4c 	.word	0x20012d4c
 8003608:	20012d60 	.word	0x20012d60
 800360c:	20012d50 	.word	0x20012d50
 8003610:	20012d44 	.word	0x20012d44
 8003614:	20012d54 	.word	0x20012d54
 8003618:	20012d58 	.word	0x20012d58

0800361c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b086      	sub	sp, #24
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d04d      	beq.n	80036ca <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800362e:	2308      	movs	r3, #8
 8003630:	425b      	negs	r3, r3
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	4413      	add	r3, r2
 8003636:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	685a      	ldr	r2, [r3, #4]
 8003640:	4b24      	ldr	r3, [pc, #144]	; (80036d4 <vPortFree+0xb8>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4013      	ands	r3, r2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d10a      	bne.n	8003660 <vPortFree+0x44>
        __asm volatile
 800364a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800364e:	f383 8811 	msr	BASEPRI, r3
 8003652:	f3bf 8f6f 	isb	sy
 8003656:	f3bf 8f4f 	dsb	sy
 800365a:	60fb      	str	r3, [r7, #12]
    }
 800365c:	bf00      	nop
 800365e:	e7fe      	b.n	800365e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d00a      	beq.n	800367e <vPortFree+0x62>
        __asm volatile
 8003668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800366c:	f383 8811 	msr	BASEPRI, r3
 8003670:	f3bf 8f6f 	isb	sy
 8003674:	f3bf 8f4f 	dsb	sy
 8003678:	60bb      	str	r3, [r7, #8]
    }
 800367a:	bf00      	nop
 800367c:	e7fe      	b.n	800367c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	685a      	ldr	r2, [r3, #4]
 8003682:	4b14      	ldr	r3, [pc, #80]	; (80036d4 <vPortFree+0xb8>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4013      	ands	r3, r2
 8003688:	2b00      	cmp	r3, #0
 800368a:	d01e      	beq.n	80036ca <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d11a      	bne.n	80036ca <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	685a      	ldr	r2, [r3, #4]
 8003698:	4b0e      	ldr	r3, [pc, #56]	; (80036d4 <vPortFree+0xb8>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	43db      	mvns	r3, r3
 800369e:	401a      	ands	r2, r3
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80036a4:	f7ff f812 	bl	80026cc <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	685a      	ldr	r2, [r3, #4]
 80036ac:	4b0a      	ldr	r3, [pc, #40]	; (80036d8 <vPortFree+0xbc>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4413      	add	r3, r2
 80036b2:	4a09      	ldr	r2, [pc, #36]	; (80036d8 <vPortFree+0xbc>)
 80036b4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80036b6:	6938      	ldr	r0, [r7, #16]
 80036b8:	f000 f874 	bl	80037a4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80036bc:	4b07      	ldr	r3, [pc, #28]	; (80036dc <vPortFree+0xc0>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	3301      	adds	r3, #1
 80036c2:	4a06      	ldr	r2, [pc, #24]	; (80036dc <vPortFree+0xc0>)
 80036c4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80036c6:	f7ff f80f 	bl	80026e8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80036ca:	bf00      	nop
 80036cc:	3718      	adds	r7, #24
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	20012d60 	.word	0x20012d60
 80036d8:	20012d50 	.word	0x20012d50
 80036dc:	20012d5c 	.word	0x20012d5c

080036e0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80036e6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80036ea:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80036ec:	4b27      	ldr	r3, [pc, #156]	; (800378c <prvHeapInit+0xac>)
 80036ee:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f003 0307 	and.w	r3, r3, #7
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00c      	beq.n	8003714 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	3307      	adds	r3, #7
 80036fe:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f023 0307 	bic.w	r3, r3, #7
 8003706:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003708:	68ba      	ldr	r2, [r7, #8]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	4a1f      	ldr	r2, [pc, #124]	; (800378c <prvHeapInit+0xac>)
 8003710:	4413      	add	r3, r2
 8003712:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003718:	4a1d      	ldr	r2, [pc, #116]	; (8003790 <prvHeapInit+0xb0>)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800371e:	4b1c      	ldr	r3, [pc, #112]	; (8003790 <prvHeapInit+0xb0>)
 8003720:	2200      	movs	r2, #0
 8003722:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	68ba      	ldr	r2, [r7, #8]
 8003728:	4413      	add	r3, r2
 800372a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800372c:	2208      	movs	r2, #8
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	1a9b      	subs	r3, r3, r2
 8003732:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f023 0307 	bic.w	r3, r3, #7
 800373a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	4a15      	ldr	r2, [pc, #84]	; (8003794 <prvHeapInit+0xb4>)
 8003740:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003742:	4b14      	ldr	r3, [pc, #80]	; (8003794 <prvHeapInit+0xb4>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2200      	movs	r2, #0
 8003748:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800374a:	4b12      	ldr	r3, [pc, #72]	; (8003794 <prvHeapInit+0xb4>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2200      	movs	r2, #0
 8003750:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	1ad2      	subs	r2, r2, r3
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003760:	4b0c      	ldr	r3, [pc, #48]	; (8003794 <prvHeapInit+0xb4>)
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	4a0a      	ldr	r2, [pc, #40]	; (8003798 <prvHeapInit+0xb8>)
 800376e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	4a09      	ldr	r2, [pc, #36]	; (800379c <prvHeapInit+0xbc>)
 8003776:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003778:	4b09      	ldr	r3, [pc, #36]	; (80037a0 <prvHeapInit+0xc0>)
 800377a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800377e:	601a      	str	r2, [r3, #0]
}
 8003780:	bf00      	nop
 8003782:	3714      	adds	r7, #20
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr
 800378c:	20000144 	.word	0x20000144
 8003790:	20012d44 	.word	0x20012d44
 8003794:	20012d4c 	.word	0x20012d4c
 8003798:	20012d54 	.word	0x20012d54
 800379c:	20012d50 	.word	0x20012d50
 80037a0:	20012d60 	.word	0x20012d60

080037a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80037a4:	b480      	push	{r7}
 80037a6:	b085      	sub	sp, #20
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80037ac:	4b28      	ldr	r3, [pc, #160]	; (8003850 <prvInsertBlockIntoFreeList+0xac>)
 80037ae:	60fb      	str	r3, [r7, #12]
 80037b0:	e002      	b.n	80037b8 <prvInsertBlockIntoFreeList+0x14>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	60fb      	str	r3, [r7, #12]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	429a      	cmp	r2, r3
 80037c0:	d8f7      	bhi.n	80037b2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	68ba      	ldr	r2, [r7, #8]
 80037cc:	4413      	add	r3, r2
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d108      	bne.n	80037e6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	685a      	ldr	r2, [r3, #4]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	441a      	add	r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	68ba      	ldr	r2, [r7, #8]
 80037f0:	441a      	add	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d118      	bne.n	800382c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	4b15      	ldr	r3, [pc, #84]	; (8003854 <prvInsertBlockIntoFreeList+0xb0>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	429a      	cmp	r2, r3
 8003804:	d00d      	beq.n	8003822 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685a      	ldr	r2, [r3, #4]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	441a      	add	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	601a      	str	r2, [r3, #0]
 8003820:	e008      	b.n	8003834 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003822:	4b0c      	ldr	r3, [pc, #48]	; (8003854 <prvInsertBlockIntoFreeList+0xb0>)
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	601a      	str	r2, [r3, #0]
 800382a:	e003      	b.n	8003834 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	429a      	cmp	r2, r3
 800383a:	d002      	beq.n	8003842 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003842:	bf00      	nop
 8003844:	3714      	adds	r7, #20
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	20012d44 	.word	0x20012d44
 8003854:	20012d4c 	.word	0x20012d4c

08003858 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800385c:	4803      	ldr	r0, [pc, #12]	; (800386c <_cbSendSystemDesc+0x14>)
 800385e:	f001 fc5d 	bl	800511c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003862:	4803      	ldr	r0, [pc, #12]	; (8003870 <_cbSendSystemDesc+0x18>)
 8003864:	f001 fc5a 	bl	800511c <SEGGER_SYSVIEW_SendSysDesc>
}
 8003868:	bf00      	nop
 800386a:	bd80      	pop	{r7, pc}
 800386c:	080058ec 	.word	0x080058ec
 8003870:	08005930 	.word	0x08005930

08003874 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003874:	b580      	push	{r7, lr}
 8003876:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003878:	4b06      	ldr	r3, [pc, #24]	; (8003894 <SEGGER_SYSVIEW_Conf+0x20>)
 800387a:	6818      	ldr	r0, [r3, #0]
 800387c:	4b05      	ldr	r3, [pc, #20]	; (8003894 <SEGGER_SYSVIEW_Conf+0x20>)
 800387e:	6819      	ldr	r1, [r3, #0]
 8003880:	4b05      	ldr	r3, [pc, #20]	; (8003898 <SEGGER_SYSVIEW_Conf+0x24>)
 8003882:	4a06      	ldr	r2, [pc, #24]	; (800389c <SEGGER_SYSVIEW_Conf+0x28>)
 8003884:	f001 f8ce 	bl	8004a24 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003888:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800388c:	f001 f90e 	bl	8004aac <SEGGER_SYSVIEW_SetRAMBase>
}
 8003890:	bf00      	nop
 8003892:	bd80      	pop	{r7, pc}
 8003894:	20000000 	.word	0x20000000
 8003898:	08003859 	.word	0x08003859
 800389c:	080059c4 	.word	0x080059c4

080038a0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80038a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80038a6:	2300      	movs	r3, #0
 80038a8:	607b      	str	r3, [r7, #4]
 80038aa:	e033      	b.n	8003914 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80038ac:	491e      	ldr	r1, [pc, #120]	; (8003928 <_cbSendTaskList+0x88>)
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	4613      	mov	r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	4413      	add	r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	440b      	add	r3, r1
 80038ba:	6818      	ldr	r0, [r3, #0]
 80038bc:	491a      	ldr	r1, [pc, #104]	; (8003928 <_cbSendTaskList+0x88>)
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	4613      	mov	r3, r2
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	4413      	add	r3, r2
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	440b      	add	r3, r1
 80038ca:	3304      	adds	r3, #4
 80038cc:	6819      	ldr	r1, [r3, #0]
 80038ce:	4c16      	ldr	r4, [pc, #88]	; (8003928 <_cbSendTaskList+0x88>)
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	4613      	mov	r3, r2
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	4413      	add	r3, r2
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	4423      	add	r3, r4
 80038dc:	3308      	adds	r3, #8
 80038de:	681c      	ldr	r4, [r3, #0]
 80038e0:	4d11      	ldr	r5, [pc, #68]	; (8003928 <_cbSendTaskList+0x88>)
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	4613      	mov	r3, r2
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	4413      	add	r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	442b      	add	r3, r5
 80038ee:	330c      	adds	r3, #12
 80038f0:	681d      	ldr	r5, [r3, #0]
 80038f2:	4e0d      	ldr	r6, [pc, #52]	; (8003928 <_cbSendTaskList+0x88>)
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	4613      	mov	r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	4413      	add	r3, r2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	4433      	add	r3, r6
 8003900:	3310      	adds	r3, #16
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	9300      	str	r3, [sp, #0]
 8003906:	462b      	mov	r3, r5
 8003908:	4622      	mov	r2, r4
 800390a:	f000 f8b5 	bl	8003a78 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	3301      	adds	r3, #1
 8003912:	607b      	str	r3, [r7, #4]
 8003914:	4b05      	ldr	r3, [pc, #20]	; (800392c <_cbSendTaskList+0x8c>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	429a      	cmp	r2, r3
 800391c:	d3c6      	bcc.n	80038ac <_cbSendTaskList+0xc>
  }
}
 800391e:	bf00      	nop
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003928:	20012d64 	.word	0x20012d64
 800392c:	20012e04 	.word	0x20012e04

08003930 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003930:	b5b0      	push	{r4, r5, r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003936:	f7fe ffe7 	bl	8002908 <xTaskGetTickCountFromISR>
 800393a:	4603      	mov	r3, r0
 800393c:	461a      	mov	r2, r3
 800393e:	f04f 0300 	mov.w	r3, #0
 8003942:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003946:	e9d7 0100 	ldrd	r0, r1, [r7]
 800394a:	4602      	mov	r2, r0
 800394c:	460b      	mov	r3, r1
 800394e:	f04f 0400 	mov.w	r4, #0
 8003952:	f04f 0500 	mov.w	r5, #0
 8003956:	015d      	lsls	r5, r3, #5
 8003958:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800395c:	0154      	lsls	r4, r2, #5
 800395e:	4622      	mov	r2, r4
 8003960:	462b      	mov	r3, r5
 8003962:	1a12      	subs	r2, r2, r0
 8003964:	eb63 0301 	sbc.w	r3, r3, r1
 8003968:	f04f 0400 	mov.w	r4, #0
 800396c:	f04f 0500 	mov.w	r5, #0
 8003970:	009d      	lsls	r5, r3, #2
 8003972:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8003976:	0094      	lsls	r4, r2, #2
 8003978:	4622      	mov	r2, r4
 800397a:	462b      	mov	r3, r5
 800397c:	1812      	adds	r2, r2, r0
 800397e:	eb41 0303 	adc.w	r3, r1, r3
 8003982:	f04f 0000 	mov.w	r0, #0
 8003986:	f04f 0100 	mov.w	r1, #0
 800398a:	00d9      	lsls	r1, r3, #3
 800398c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003990:	00d0      	lsls	r0, r2, #3
 8003992:	4602      	mov	r2, r0
 8003994:	460b      	mov	r3, r1
 8003996:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 800399a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800399e:	4610      	mov	r0, r2
 80039a0:	4619      	mov	r1, r3
 80039a2:	3708      	adds	r7, #8
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bdb0      	pop	{r4, r5, r7, pc}

080039a8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b086      	sub	sp, #24
 80039ac:	af02      	add	r7, sp, #8
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
 80039b4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80039b6:	2205      	movs	r2, #5
 80039b8:	492b      	ldr	r1, [pc, #172]	; (8003a68 <SYSVIEW_AddTask+0xc0>)
 80039ba:	68b8      	ldr	r0, [r7, #8]
 80039bc:	f001 ff4a 	bl	8005854 <memcmp>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d04b      	beq.n	8003a5e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80039c6:	4b29      	ldr	r3, [pc, #164]	; (8003a6c <SYSVIEW_AddTask+0xc4>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2b07      	cmp	r3, #7
 80039cc:	d903      	bls.n	80039d6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80039ce:	4828      	ldr	r0, [pc, #160]	; (8003a70 <SYSVIEW_AddTask+0xc8>)
 80039d0:	f001 fe92 	bl	80056f8 <SEGGER_SYSVIEW_Warn>
    return;
 80039d4:	e044      	b.n	8003a60 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80039d6:	4b25      	ldr	r3, [pc, #148]	; (8003a6c <SYSVIEW_AddTask+0xc4>)
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	4926      	ldr	r1, [pc, #152]	; (8003a74 <SYSVIEW_AddTask+0xcc>)
 80039dc:	4613      	mov	r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	4413      	add	r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	440b      	add	r3, r1
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80039ea:	4b20      	ldr	r3, [pc, #128]	; (8003a6c <SYSVIEW_AddTask+0xc4>)
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	4921      	ldr	r1, [pc, #132]	; (8003a74 <SYSVIEW_AddTask+0xcc>)
 80039f0:	4613      	mov	r3, r2
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	4413      	add	r3, r2
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	440b      	add	r3, r1
 80039fa:	3304      	adds	r3, #4
 80039fc:	68ba      	ldr	r2, [r7, #8]
 80039fe:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003a00:	4b1a      	ldr	r3, [pc, #104]	; (8003a6c <SYSVIEW_AddTask+0xc4>)
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	491b      	ldr	r1, [pc, #108]	; (8003a74 <SYSVIEW_AddTask+0xcc>)
 8003a06:	4613      	mov	r3, r2
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	4413      	add	r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	440b      	add	r3, r1
 8003a10:	3308      	adds	r3, #8
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003a16:	4b15      	ldr	r3, [pc, #84]	; (8003a6c <SYSVIEW_AddTask+0xc4>)
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	4916      	ldr	r1, [pc, #88]	; (8003a74 <SYSVIEW_AddTask+0xcc>)
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	4413      	add	r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	440b      	add	r3, r1
 8003a26:	330c      	adds	r3, #12
 8003a28:	683a      	ldr	r2, [r7, #0]
 8003a2a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003a2c:	4b0f      	ldr	r3, [pc, #60]	; (8003a6c <SYSVIEW_AddTask+0xc4>)
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	4910      	ldr	r1, [pc, #64]	; (8003a74 <SYSVIEW_AddTask+0xcc>)
 8003a32:	4613      	mov	r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	4413      	add	r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	440b      	add	r3, r1
 8003a3c:	3310      	adds	r3, #16
 8003a3e:	69ba      	ldr	r2, [r7, #24]
 8003a40:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003a42:	4b0a      	ldr	r3, [pc, #40]	; (8003a6c <SYSVIEW_AddTask+0xc4>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	3301      	adds	r3, #1
 8003a48:	4a08      	ldr	r2, [pc, #32]	; (8003a6c <SYSVIEW_AddTask+0xc4>)
 8003a4a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	9300      	str	r3, [sp, #0]
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	68b9      	ldr	r1, [r7, #8]
 8003a56:	68f8      	ldr	r0, [r7, #12]
 8003a58:	f000 f80e 	bl	8003a78 <SYSVIEW_SendTaskInfo>
 8003a5c:	e000      	b.n	8003a60 <SYSVIEW_AddTask+0xb8>
    return;
 8003a5e:	bf00      	nop

}
 8003a60:	3710      	adds	r7, #16
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	08005940 	.word	0x08005940
 8003a6c:	20012e04 	.word	0x20012e04
 8003a70:	08005948 	.word	0x08005948
 8003a74:	20012d64 	.word	0x20012d64

08003a78 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b08a      	sub	sp, #40	; 0x28
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]
 8003a84:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003a86:	f107 0314 	add.w	r3, r7, #20
 8003a8a:	2214      	movs	r2, #20
 8003a8c:	2100      	movs	r1, #0
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f001 fefc 	bl	800588c <memset>
  TaskInfo.TaskID     = TaskID;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003aa8:	f107 0314 	add.w	r3, r7, #20
 8003aac:	4618      	mov	r0, r3
 8003aae:	f001 fa3d 	bl	8004f2c <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003ab2:	bf00      	nop
 8003ab4:	3728      	adds	r7, #40	; 0x28
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
	...

08003abc <__NVIC_EnableIRQ>:
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	db0b      	blt.n	8003ae6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ace:	79fb      	ldrb	r3, [r7, #7]
 8003ad0:	f003 021f 	and.w	r2, r3, #31
 8003ad4:	4907      	ldr	r1, [pc, #28]	; (8003af4 <__NVIC_EnableIRQ+0x38>)
 8003ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ada:	095b      	lsrs	r3, r3, #5
 8003adc:	2001      	movs	r0, #1
 8003ade:	fa00 f202 	lsl.w	r2, r0, r2
 8003ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003ae6:	bf00      	nop
 8003ae8:	370c      	adds	r7, #12
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	e000e100 	.word	0xe000e100

08003af8 <__NVIC_SetPriority>:
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	4603      	mov	r3, r0
 8003b00:	6039      	str	r1, [r7, #0]
 8003b02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	db0a      	blt.n	8003b22 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	b2da      	uxtb	r2, r3
 8003b10:	490c      	ldr	r1, [pc, #48]	; (8003b44 <__NVIC_SetPriority+0x4c>)
 8003b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b16:	0112      	lsls	r2, r2, #4
 8003b18:	b2d2      	uxtb	r2, r2
 8003b1a:	440b      	add	r3, r1
 8003b1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003b20:	e00a      	b.n	8003b38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	b2da      	uxtb	r2, r3
 8003b26:	4908      	ldr	r1, [pc, #32]	; (8003b48 <__NVIC_SetPriority+0x50>)
 8003b28:	79fb      	ldrb	r3, [r7, #7]
 8003b2a:	f003 030f 	and.w	r3, r3, #15
 8003b2e:	3b04      	subs	r3, #4
 8003b30:	0112      	lsls	r2, r2, #4
 8003b32:	b2d2      	uxtb	r2, r2
 8003b34:	440b      	add	r3, r1
 8003b36:	761a      	strb	r2, [r3, #24]
}
 8003b38:	bf00      	nop
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr
 8003b44:	e000e100 	.word	0xe000e100
 8003b48:	e000ed00 	.word	0xe000ed00

08003b4c <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8003b52:	f001 fe2d 	bl	80057b0 <SEGGER_SYSVIEW_IsStarted>
 8003b56:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8003b5e:	f001 f869 	bl	8004c34 <SEGGER_SYSVIEW_Start>
  }
}
 8003b62:	bf00      	nop
 8003b64:	3708      	adds	r7, #8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
	...

08003b6c <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	4603      	mov	r3, r0
 8003b74:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8003b76:	4b0c      	ldr	r3, [pc, #48]	; (8003ba8 <_cbOnUARTRx+0x3c>)
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	2b03      	cmp	r3, #3
 8003b7c:	d806      	bhi.n	8003b8c <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8003b7e:	4b0a      	ldr	r3, [pc, #40]	; (8003ba8 <_cbOnUARTRx+0x3c>)
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	3301      	adds	r3, #1
 8003b84:	b2da      	uxtb	r2, r3
 8003b86:	4b08      	ldr	r3, [pc, #32]	; (8003ba8 <_cbOnUARTRx+0x3c>)
 8003b88:	701a      	strb	r2, [r3, #0]
    goto Done;
 8003b8a:	e009      	b.n	8003ba0 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8003b8c:	f7ff ffde 	bl	8003b4c <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8003b90:	4b05      	ldr	r3, [pc, #20]	; (8003ba8 <_cbOnUARTRx+0x3c>)
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	4618      	mov	r0, r3
 8003b96:	1dfb      	adds	r3, r7, #7
 8003b98:	2201      	movs	r2, #1
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	f000 fb9c 	bl	80042d8 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8003ba0:	bf00      	nop
}
 8003ba2:	3708      	adds	r7, #8
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	20000014 	.word	0x20000014

08003bac <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8003bb4:	4b14      	ldr	r3, [pc, #80]	; (8003c08 <_cbOnUARTTx+0x5c>)
 8003bb6:	785b      	ldrb	r3, [r3, #1]
 8003bb8:	2b03      	cmp	r3, #3
 8003bba:	d80f      	bhi.n	8003bdc <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8003bbc:	4b12      	ldr	r3, [pc, #72]	; (8003c08 <_cbOnUARTTx+0x5c>)
 8003bbe:	785b      	ldrb	r3, [r3, #1]
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	4b12      	ldr	r3, [pc, #72]	; (8003c0c <_cbOnUARTTx+0x60>)
 8003bc4:	5c9a      	ldrb	r2, [r3, r2]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8003bca:	4b0f      	ldr	r3, [pc, #60]	; (8003c08 <_cbOnUARTTx+0x5c>)
 8003bcc:	785b      	ldrb	r3, [r3, #1]
 8003bce:	3301      	adds	r3, #1
 8003bd0:	b2da      	uxtb	r2, r3
 8003bd2:	4b0d      	ldr	r3, [pc, #52]	; (8003c08 <_cbOnUARTTx+0x5c>)
 8003bd4:	705a      	strb	r2, [r3, #1]
    r = 1;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	60fb      	str	r3, [r7, #12]
    goto Done;
 8003bda:	e00f      	b.n	8003bfc <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8003bdc:	4b0a      	ldr	r3, [pc, #40]	; (8003c08 <_cbOnUARTTx+0x5c>)
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	2201      	movs	r2, #1
 8003be2:	6879      	ldr	r1, [r7, #4]
 8003be4:	4618      	mov	r0, r3
 8003be6:	f000 fa1b 	bl	8004020 <SEGGER_RTT_ReadUpBufferNoLock>
 8003bea:	4603      	mov	r3, r0
 8003bec:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	da02      	bge.n	8003bfa <_cbOnUARTTx+0x4e>
    r = 0;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	60fb      	str	r3, [r7, #12]
 8003bf8:	e000      	b.n	8003bfc <_cbOnUARTTx+0x50>
  }
Done:
 8003bfa:	bf00      	nop
  return r;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3710      	adds	r7, #16
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	20000014 	.word	0x20000014
 8003c0c:	080059cc 	.word	0x080059cc

08003c10 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8003c18:	4a04      	ldr	r2, [pc, #16]	; (8003c2c <SEGGER_UART_init+0x1c>)
 8003c1a:	4905      	ldr	r1, [pc, #20]	; (8003c30 <SEGGER_UART_init+0x20>)
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 f863 	bl	8003ce8 <HIF_UART_Init>
}
 8003c22:	bf00      	nop
 8003c24:	3708      	adds	r7, #8
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	08003b6d 	.word	0x08003b6d
 8003c30:	08003bad 	.word	0x08003bad

08003c34 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8003c3a:	4b1e      	ldr	r3, [pc, #120]	; (8003cb4 <USART2_IRQHandler+0x80>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f003 0320 	and.w	r3, r3, #32
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d011      	beq.n	8003c6e <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8003c4a:	4b1b      	ldr	r3, [pc, #108]	; (8003cb8 <USART2_IRQHandler+0x84>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f003 030b 	and.w	r3, r3, #11
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d108      	bne.n	8003c6e <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8003c5c:	4b17      	ldr	r3, [pc, #92]	; (8003cbc <USART2_IRQHandler+0x88>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d004      	beq.n	8003c6e <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8003c64:	4b15      	ldr	r3, [pc, #84]	; (8003cbc <USART2_IRQHandler+0x88>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	79fa      	ldrb	r2, [r7, #7]
 8003c6a:	4610      	mov	r0, r2
 8003c6c:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d01a      	beq.n	8003cae <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8003c78:	4b11      	ldr	r3, [pc, #68]	; (8003cc0 <USART2_IRQHandler+0x8c>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d015      	beq.n	8003cac <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8003c80:	4b0f      	ldr	r3, [pc, #60]	; (8003cc0 <USART2_IRQHandler+0x8c>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	1dfa      	adds	r2, r7, #7
 8003c86:	4610      	mov	r0, r2
 8003c88:	4798      	blx	r3
 8003c8a:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d106      	bne.n	8003ca0 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8003c92:	4b0c      	ldr	r3, [pc, #48]	; (8003cc4 <USART2_IRQHandler+0x90>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a0b      	ldr	r2, [pc, #44]	; (8003cc4 <USART2_IRQHandler+0x90>)
 8003c98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c9c:	6013      	str	r3, [r2, #0]
 8003c9e:	e006      	b.n	8003cae <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8003ca0:	4b04      	ldr	r3, [pc, #16]	; (8003cb4 <USART2_IRQHandler+0x80>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8003ca4:	79fa      	ldrb	r2, [r7, #7]
 8003ca6:	4b04      	ldr	r3, [pc, #16]	; (8003cb8 <USART2_IRQHandler+0x84>)
 8003ca8:	601a      	str	r2, [r3, #0]
 8003caa:	e000      	b.n	8003cae <USART2_IRQHandler+0x7a>
      return;
 8003cac:	bf00      	nop
    }
  }
}
 8003cae:	3710      	adds	r7, #16
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	40004400 	.word	0x40004400
 8003cb8:	40004404 	.word	0x40004404
 8003cbc:	20012e08 	.word	0x20012e08
 8003cc0:	20012e0c 	.word	0x20012e0c
 8003cc4:	4000440c 	.word	0x4000440c

08003cc8 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8003cc8:	b480      	push	{r7}
 8003cca:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8003ccc:	4b05      	ldr	r3, [pc, #20]	; (8003ce4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a04      	ldr	r2, [pc, #16]	; (8003ce4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003cd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cd6:	6013      	str	r3, [r2, #0]
}
 8003cd8:	bf00      	nop
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	4000440c 	.word	0x4000440c

08003ce8 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b086      	sub	sp, #24
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8003cf4:	4b2e      	ldr	r3, [pc, #184]	; (8003db0 <HIF_UART_Init+0xc8>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a2d      	ldr	r2, [pc, #180]	; (8003db0 <HIF_UART_Init+0xc8>)
 8003cfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cfe:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8003d00:	4b2c      	ldr	r3, [pc, #176]	; (8003db4 <HIF_UART_Init+0xcc>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a2b      	ldr	r2, [pc, #172]	; (8003db4 <HIF_UART_Init+0xcc>)
 8003d06:	f043 0301 	orr.w	r3, r3, #1
 8003d0a:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8003d0c:	4b2a      	ldr	r3, [pc, #168]	; (8003db8 <HIF_UART_Init+0xd0>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d18:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8003d20:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8003d22:	4a25      	ldr	r2, [pc, #148]	; (8003db8 <HIF_UART_Init+0xd0>)
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8003d28:	4b24      	ldr	r3, [pc, #144]	; (8003dbc <HIF_UART_Init+0xd4>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d34:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8003d3c:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8003d3e:	4a1f      	ldr	r2, [pc, #124]	; (8003dbc <HIF_UART_Init+0xd4>)
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8003d44:	4b1e      	ldr	r3, [pc, #120]	; (8003dc0 <HIF_UART_Init+0xd8>)
 8003d46:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8003d4a:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8003d4c:	4b1d      	ldr	r3, [pc, #116]	; (8003dc4 <HIF_UART_Init+0xdc>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8003d52:	4b1d      	ldr	r3, [pc, #116]	; (8003dc8 <HIF_UART_Init+0xe0>)
 8003d54:	2280      	movs	r2, #128	; 0x80
 8003d56:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	00db      	lsls	r3, r3, #3
 8003d5c:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8003d5e:	4a1b      	ldr	r2, [pc, #108]	; (8003dcc <HIF_UART_Init+0xe4>)
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d66:	3301      	adds	r3, #1
 8003d68:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	085b      	lsrs	r3, r3, #1
 8003d6e:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d76:	d302      	bcc.n	8003d7e <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8003d78:	f640 73ff 	movw	r3, #4095	; 0xfff
 8003d7c:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d004      	beq.n	8003d8e <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	011b      	lsls	r3, r3, #4
 8003d88:	4a11      	ldr	r2, [pc, #68]	; (8003dd0 <HIF_UART_Init+0xe8>)
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8003d8e:	4a11      	ldr	r2, [pc, #68]	; (8003dd4 <HIF_UART_Init+0xec>)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8003d94:	4a10      	ldr	r2, [pc, #64]	; (8003dd8 <HIF_UART_Init+0xf0>)
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8003d9a:	2106      	movs	r1, #6
 8003d9c:	2026      	movs	r0, #38	; 0x26
 8003d9e:	f7ff feab 	bl	8003af8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8003da2:	2026      	movs	r0, #38	; 0x26
 8003da4:	f7ff fe8a 	bl	8003abc <__NVIC_EnableIRQ>
}
 8003da8:	bf00      	nop
 8003daa:	3718      	adds	r7, #24
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	40023840 	.word	0x40023840
 8003db4:	40023830 	.word	0x40023830
 8003db8:	40020020 	.word	0x40020020
 8003dbc:	40020000 	.word	0x40020000
 8003dc0:	4000440c 	.word	0x4000440c
 8003dc4:	40004410 	.word	0x40004410
 8003dc8:	40004414 	.word	0x40004414
 8003dcc:	0501bd00 	.word	0x0501bd00
 8003dd0:	40004408 	.word	0x40004408
 8003dd4:	20012e08 	.word	0x20012e08
 8003dd8:	20012e0c 	.word	0x20012e0c

08003ddc <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003de2:	4b26      	ldr	r3, [pc, #152]	; (8003e7c <_DoInit+0xa0>)
 8003de4:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8003de6:	22a8      	movs	r2, #168	; 0xa8
 8003de8:	2100      	movs	r1, #0
 8003dea:	6838      	ldr	r0, [r7, #0]
 8003dec:	f001 fd4e 	bl	800588c <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	2203      	movs	r2, #3
 8003df4:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	2203      	movs	r2, #3
 8003dfa:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	4a20      	ldr	r2, [pc, #128]	; (8003e80 <_DoInit+0xa4>)
 8003e00:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	4a1f      	ldr	r2, [pc, #124]	; (8003e84 <_DoInit+0xa8>)
 8003e06:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e0e:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	2200      	movs	r2, #0
 8003e14:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	4a16      	ldr	r2, [pc, #88]	; (8003e80 <_DoInit+0xa4>)
 8003e26:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	4a17      	ldr	r2, [pc, #92]	; (8003e88 <_DoInit+0xac>)
 8003e2c:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	2210      	movs	r2, #16
 8003e32:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	2200      	movs	r2, #0
 8003e38:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	2200      	movs	r2, #0
 8003e44:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003e46:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	607b      	str	r3, [r7, #4]
 8003e4e:	e00c      	b.n	8003e6a <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f1c3 030f 	rsb	r3, r3, #15
 8003e56:	4a0d      	ldr	r2, [pc, #52]	; (8003e8c <_DoInit+0xb0>)
 8003e58:	5cd1      	ldrb	r1, [r2, r3]
 8003e5a:	683a      	ldr	r2, [r7, #0]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4413      	add	r3, r2
 8003e60:	460a      	mov	r2, r1
 8003e62:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	3301      	adds	r3, #1
 8003e68:	607b      	str	r3, [r7, #4]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2b0f      	cmp	r3, #15
 8003e6e:	d9ef      	bls.n	8003e50 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003e70:	f3bf 8f5f 	dmb	sy
}
 8003e74:	bf00      	nop
 8003e76:	3708      	adds	r7, #8
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	20014388 	.word	0x20014388
 8003e80:	08005998 	.word	0x08005998
 8003e84:	20012e10 	.word	0x20012e10
 8003e88:	20013210 	.word	0x20013210
 8003e8c:	080059d0 	.word	0x080059d0

08003e90 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b08a      	sub	sp, #40	; 0x28
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8003eac:	69ba      	ldr	r2, [r7, #24]
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d905      	bls.n	8003ec0 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8003eb4:	69ba      	ldr	r2, [r7, #24]
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	627b      	str	r3, [r7, #36]	; 0x24
 8003ebe:	e007      	b.n	8003ed0 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	689a      	ldr	r2, [r3, #8]
 8003ec4:	69b9      	ldr	r1, [r7, #24]
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	1acb      	subs	r3, r1, r3
 8003eca:	4413      	add	r3, r2
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	689a      	ldr	r2, [r3, #8]
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eda:	4293      	cmp	r3, r2
 8003edc:	bf28      	it	cs
 8003ede:	4613      	movcs	r3, r2
 8003ee0:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8003ee2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	bf28      	it	cs
 8003eea:	4613      	movcs	r3, r2
 8003eec:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	685a      	ldr	r2, [r3, #4]
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8003ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003efa:	68b9      	ldr	r1, [r7, #8]
 8003efc:	6978      	ldr	r0, [r7, #20]
 8003efe:	f001 fcb7 	bl	8005870 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8003f02:	6a3a      	ldr	r2, [r7, #32]
 8003f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f06:	4413      	add	r3, r2
 8003f08:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8003f0a:	68ba      	ldr	r2, [r7, #8]
 8003f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0e:	4413      	add	r3, r2
 8003f10:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8003f1a:	69fa      	ldr	r2, [r7, #28]
 8003f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1e:	4413      	add	r3, r2
 8003f20:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	69fa      	ldr	r2, [r7, #28]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d101      	bne.n	8003f30 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003f30:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	69fa      	ldr	r2, [r7, #28]
 8003f38:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d1b2      	bne.n	8003ea6 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8003f40:	6a3b      	ldr	r3, [r7, #32]
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3728      	adds	r7, #40	; 0x28
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}

08003f4a <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b088      	sub	sp, #32
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	60f8      	str	r0, [r7, #12]
 8003f52:	60b9      	str	r1, [r7, #8]
 8003f54:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	689a      	ldr	r2, [r3, #8]
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8003f66:	69ba      	ldr	r2, [r7, #24]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d911      	bls.n	8003f92 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	4413      	add	r3, r2
 8003f76:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	68b9      	ldr	r1, [r7, #8]
 8003f7c:	6938      	ldr	r0, [r7, #16]
 8003f7e:	f001 fc77 	bl	8005870 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003f82:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8003f86:	69fa      	ldr	r2, [r7, #28]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	441a      	add	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8003f90:	e01f      	b.n	8003fd2 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	685a      	ldr	r2, [r3, #4]
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8003fa0:	697a      	ldr	r2, [r7, #20]
 8003fa2:	68b9      	ldr	r1, [r7, #8]
 8003fa4:	6938      	ldr	r0, [r7, #16]
 8003fa6:	f001 fc63 	bl	8005870 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8003fb8:	68ba      	ldr	r2, [r7, #8]
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	697a      	ldr	r2, [r7, #20]
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	6938      	ldr	r0, [r7, #16]
 8003fc4:	f001 fc54 	bl	8005870 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003fc8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	697a      	ldr	r2, [r7, #20]
 8003fd0:	60da      	str	r2, [r3, #12]
}
 8003fd2:	bf00      	nop
 8003fd4:	3720      	adds	r7, #32
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003fda:	b480      	push	{r7}
 8003fdc:	b087      	sub	sp, #28
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d808      	bhi.n	8004008 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	689a      	ldr	r2, [r3, #8]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	1ad2      	subs	r2, r2, r3
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	4413      	add	r3, r2
 8004002:	3b01      	subs	r3, #1
 8004004:	617b      	str	r3, [r7, #20]
 8004006:	e004      	b.n	8004012 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004008:	693a      	ldr	r2, [r7, #16]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	3b01      	subs	r3, #1
 8004010:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004012:	697b      	ldr	r3, [r7, #20]
}
 8004014:	4618      	mov	r0, r3
 8004016:	371c      	adds	r7, #28
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004020:	b580      	push	{r7, lr}
 8004022:	b08c      	sub	sp, #48	; 0x30
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 800402c:	4b3e      	ldr	r3, [pc, #248]	; (8004128 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 800402e:	623b      	str	r3, [r7, #32]
 8004030:	6a3b      	ldr	r3, [r7, #32]
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	b2db      	uxtb	r3, r3
 8004036:	2b00      	cmp	r3, #0
 8004038:	d101      	bne.n	800403e <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 800403a:	f7ff fecf 	bl	8003ddc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	1c5a      	adds	r2, r3, #1
 8004042:	4613      	mov	r3, r2
 8004044:	005b      	lsls	r3, r3, #1
 8004046:	4413      	add	r3, r2
 8004048:	00db      	lsls	r3, r3, #3
 800404a:	4a37      	ldr	r2, [pc, #220]	; (8004128 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 800404c:	4413      	add	r3, r2
 800404e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004060:	2300      	movs	r3, #0
 8004062:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004064:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	429a      	cmp	r2, r3
 800406a:	d92b      	bls.n	80040c4 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	689a      	ldr	r2, [r3, #8]
 8004070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004076:	697a      	ldr	r2, [r7, #20]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4293      	cmp	r3, r2
 800407c:	bf28      	it	cs
 800407e:	4613      	movcs	r3, r2
 8004080:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	685a      	ldr	r2, [r3, #4]
 8004086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004088:	4413      	add	r3, r2
 800408a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800408c:	697a      	ldr	r2, [r7, #20]
 800408e:	6939      	ldr	r1, [r7, #16]
 8004090:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004092:	f001 fbed 	bl	8005870 <memcpy>
    NumBytesRead += NumBytesRem;
 8004096:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	4413      	add	r3, r2
 800409c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800409e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	4413      	add	r3, r2
 80040a4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80040ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	4413      	add	r3, r2
 80040b4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040bc:	429a      	cmp	r2, r3
 80040be:	d101      	bne.n	80040c4 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 80040c0:	2300      	movs	r3, #0
 80040c2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80040c4:	69ba      	ldr	r2, [r7, #24]
 80040c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4293      	cmp	r3, r2
 80040d2:	bf28      	it	cs
 80040d4:	4613      	movcs	r3, r2
 80040d6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d019      	beq.n	8004112 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	685a      	ldr	r2, [r3, #4]
 80040e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e4:	4413      	add	r3, r2
 80040e6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80040e8:	697a      	ldr	r2, [r7, #20]
 80040ea:	6939      	ldr	r1, [r7, #16]
 80040ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80040ee:	f001 fbbf 	bl	8005870 <memcpy>
    NumBytesRead += NumBytesRem;
 80040f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	4413      	add	r3, r2
 80040f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80040fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	4413      	add	r3, r2
 8004100:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800410a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	4413      	add	r3, r2
 8004110:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8004112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004114:	2b00      	cmp	r3, #0
 8004116:	d002      	beq.n	800411e <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800411c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800411e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004120:	4618      	mov	r0, r3
 8004122:	3730      	adds	r7, #48	; 0x30
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	20014388 	.word	0x20014388

0800412c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800412c:	b580      	push	{r7, lr}
 800412e:	b08c      	sub	sp, #48	; 0x30
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004138:	4b3e      	ldr	r3, [pc, #248]	; (8004234 <SEGGER_RTT_ReadNoLock+0x108>)
 800413a:	623b      	str	r3, [r7, #32]
 800413c:	6a3b      	ldr	r3, [r7, #32]
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b00      	cmp	r3, #0
 8004144:	d101      	bne.n	800414a <SEGGER_RTT_ReadNoLock+0x1e>
 8004146:	f7ff fe49 	bl	8003ddc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	4613      	mov	r3, r2
 800414e:	005b      	lsls	r3, r3, #1
 8004150:	4413      	add	r3, r2
 8004152:	00db      	lsls	r3, r3, #3
 8004154:	3360      	adds	r3, #96	; 0x60
 8004156:	4a37      	ldr	r2, [pc, #220]	; (8004234 <SEGGER_RTT_ReadNoLock+0x108>)
 8004158:	4413      	add	r3, r2
 800415a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	691b      	ldr	r3, [r3, #16]
 8004164:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800416c:	2300      	movs	r3, #0
 800416e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004170:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	429a      	cmp	r2, r3
 8004176:	d92b      	bls.n	80041d0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	689a      	ldr	r2, [r3, #8]
 800417c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004182:	697a      	ldr	r2, [r7, #20]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4293      	cmp	r3, r2
 8004188:	bf28      	it	cs
 800418a:	4613      	movcs	r3, r2
 800418c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	685a      	ldr	r2, [r3, #4]
 8004192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004194:	4413      	add	r3, r2
 8004196:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004198:	697a      	ldr	r2, [r7, #20]
 800419a:	6939      	ldr	r1, [r7, #16]
 800419c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800419e:	f001 fb67 	bl	8005870 <memcpy>
    NumBytesRead += NumBytesRem;
 80041a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	4413      	add	r3, r2
 80041a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80041aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	4413      	add	r3, r2
 80041b0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80041ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	4413      	add	r3, r2
 80041c0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d101      	bne.n	80041d0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80041cc:	2300      	movs	r3, #0
 80041ce:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80041d0:	69ba      	ldr	r2, [r7, #24]
 80041d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80041d8:	697a      	ldr	r2, [r7, #20]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4293      	cmp	r3, r2
 80041de:	bf28      	it	cs
 80041e0:	4613      	movcs	r3, r2
 80041e2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d019      	beq.n	800421e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	685a      	ldr	r2, [r3, #4]
 80041ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f0:	4413      	add	r3, r2
 80041f2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80041f4:	697a      	ldr	r2, [r7, #20]
 80041f6:	6939      	ldr	r1, [r7, #16]
 80041f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80041fa:	f001 fb39 	bl	8005870 <memcpy>
    NumBytesRead += NumBytesRem;
 80041fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	4413      	add	r3, r2
 8004204:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	4413      	add	r3, r2
 800420c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004216:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	4413      	add	r3, r2
 800421c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800421e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004220:	2b00      	cmp	r3, #0
 8004222:	d002      	beq.n	800422a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004228:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800422a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800422c:	4618      	mov	r0, r3
 800422e:	3730      	adds	r7, #48	; 0x30
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	20014388 	.word	0x20014388

08004238 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004238:	b580      	push	{r7, lr}
 800423a:	b088      	sub	sp, #32
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	4613      	mov	r3, r2
 800424c:	005b      	lsls	r3, r3, #1
 800424e:	4413      	add	r3, r2
 8004250:	00db      	lsls	r3, r3, #3
 8004252:	3360      	adds	r3, #96	; 0x60
 8004254:	4a1f      	ldr	r2, [pc, #124]	; (80042d4 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8004256:	4413      	add	r3, r2
 8004258:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	2b02      	cmp	r3, #2
 8004260:	d029      	beq.n	80042b6 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8004262:	2b02      	cmp	r3, #2
 8004264:	d82e      	bhi.n	80042c4 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8004266:	2b00      	cmp	r3, #0
 8004268:	d002      	beq.n	8004270 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 800426a:	2b01      	cmp	r3, #1
 800426c:	d013      	beq.n	8004296 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 800426e:	e029      	b.n	80042c4 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004270:	6978      	ldr	r0, [r7, #20]
 8004272:	f7ff feb2 	bl	8003fda <_GetAvailWriteSpace>
 8004276:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8004278:	693a      	ldr	r2, [r7, #16]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	429a      	cmp	r2, r3
 800427e:	d202      	bcs.n	8004286 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8004280:	2300      	movs	r3, #0
 8004282:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8004284:	e021      	b.n	80042ca <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	69b9      	ldr	r1, [r7, #24]
 800428e:	6978      	ldr	r0, [r7, #20]
 8004290:	f7ff fe5b 	bl	8003f4a <_WriteNoCheck>
    break;
 8004294:	e019      	b.n	80042ca <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004296:	6978      	ldr	r0, [r7, #20]
 8004298:	f7ff fe9f 	bl	8003fda <_GetAvailWriteSpace>
 800429c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	4293      	cmp	r3, r2
 80042a4:	bf28      	it	cs
 80042a6:	4613      	movcs	r3, r2
 80042a8:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80042aa:	69fa      	ldr	r2, [r7, #28]
 80042ac:	69b9      	ldr	r1, [r7, #24]
 80042ae:	6978      	ldr	r0, [r7, #20]
 80042b0:	f7ff fe4b 	bl	8003f4a <_WriteNoCheck>
    break;
 80042b4:	e009      	b.n	80042ca <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	69b9      	ldr	r1, [r7, #24]
 80042ba:	6978      	ldr	r0, [r7, #20]
 80042bc:	f7ff fde8 	bl	8003e90 <_WriteBlocking>
 80042c0:	61f8      	str	r0, [r7, #28]
    break;
 80042c2:	e002      	b.n	80042ca <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 80042c4:	2300      	movs	r3, #0
 80042c6:	61fb      	str	r3, [r7, #28]
    break;
 80042c8:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80042ca:	69fb      	ldr	r3, [r7, #28]
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3720      	adds	r7, #32
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	20014388 	.word	0x20014388

080042d8 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80042d8:	b580      	push	{r7, lr}
 80042da:	b088      	sub	sp, #32
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80042e4:	4b0e      	ldr	r3, [pc, #56]	; (8004320 <SEGGER_RTT_WriteDownBuffer+0x48>)
 80042e6:	61fb      	str	r3, [r7, #28]
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <SEGGER_RTT_WriteDownBuffer+0x1e>
 80042f2:	f7ff fd73 	bl	8003ddc <_DoInit>
  SEGGER_RTT_LOCK();
 80042f6:	f3ef 8311 	mrs	r3, BASEPRI
 80042fa:	f04f 0120 	mov.w	r1, #32
 80042fe:	f381 8811 	msr	BASEPRI, r1
 8004302:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	68b9      	ldr	r1, [r7, #8]
 8004308:	68f8      	ldr	r0, [r7, #12]
 800430a:	f7ff ff95 	bl	8004238 <SEGGER_RTT_WriteDownBufferNoLock>
 800430e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8004316:	697b      	ldr	r3, [r7, #20]
}
 8004318:	4618      	mov	r0, r3
 800431a:	3720      	adds	r7, #32
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	20014388 	.word	0x20014388

08004324 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004324:	b580      	push	{r7, lr}
 8004326:	b088      	sub	sp, #32
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	607a      	str	r2, [r7, #4]
 8004330:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004332:	4b3d      	ldr	r3, [pc, #244]	; (8004428 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004334:	61bb      	str	r3, [r7, #24]
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	b2db      	uxtb	r3, r3
 800433c:	2b00      	cmp	r3, #0
 800433e:	d101      	bne.n	8004344 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004340:	f7ff fd4c 	bl	8003ddc <_DoInit>
  SEGGER_RTT_LOCK();
 8004344:	f3ef 8311 	mrs	r3, BASEPRI
 8004348:	f04f 0120 	mov.w	r1, #32
 800434c:	f381 8811 	msr	BASEPRI, r1
 8004350:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004352:	4b35      	ldr	r3, [pc, #212]	; (8004428 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004354:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004356:	2300      	movs	r3, #0
 8004358:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800435a:	6939      	ldr	r1, [r7, #16]
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	1c5a      	adds	r2, r3, #1
 8004360:	4613      	mov	r3, r2
 8004362:	005b      	lsls	r3, r3, #1
 8004364:	4413      	add	r3, r2
 8004366:	00db      	lsls	r3, r3, #3
 8004368:	440b      	add	r3, r1
 800436a:	3304      	adds	r3, #4
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d008      	beq.n	8004384 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	3301      	adds	r3, #1
 8004376:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	69fa      	ldr	r2, [r7, #28]
 800437e:	429a      	cmp	r2, r3
 8004380:	dbeb      	blt.n	800435a <SEGGER_RTT_AllocUpBuffer+0x36>
 8004382:	e000      	b.n	8004386 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004384:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	69fa      	ldr	r2, [r7, #28]
 800438c:	429a      	cmp	r2, r3
 800438e:	da3f      	bge.n	8004410 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004390:	6939      	ldr	r1, [r7, #16]
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	1c5a      	adds	r2, r3, #1
 8004396:	4613      	mov	r3, r2
 8004398:	005b      	lsls	r3, r3, #1
 800439a:	4413      	add	r3, r2
 800439c:	00db      	lsls	r3, r3, #3
 800439e:	440b      	add	r3, r1
 80043a0:	68fa      	ldr	r2, [r7, #12]
 80043a2:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80043a4:	6939      	ldr	r1, [r7, #16]
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	1c5a      	adds	r2, r3, #1
 80043aa:	4613      	mov	r3, r2
 80043ac:	005b      	lsls	r3, r3, #1
 80043ae:	4413      	add	r3, r2
 80043b0:	00db      	lsls	r3, r3, #3
 80043b2:	440b      	add	r3, r1
 80043b4:	3304      	adds	r3, #4
 80043b6:	68ba      	ldr	r2, [r7, #8]
 80043b8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80043ba:	6939      	ldr	r1, [r7, #16]
 80043bc:	69fa      	ldr	r2, [r7, #28]
 80043be:	4613      	mov	r3, r2
 80043c0:	005b      	lsls	r3, r3, #1
 80043c2:	4413      	add	r3, r2
 80043c4:	00db      	lsls	r3, r3, #3
 80043c6:	440b      	add	r3, r1
 80043c8:	3320      	adds	r3, #32
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80043ce:	6939      	ldr	r1, [r7, #16]
 80043d0:	69fa      	ldr	r2, [r7, #28]
 80043d2:	4613      	mov	r3, r2
 80043d4:	005b      	lsls	r3, r3, #1
 80043d6:	4413      	add	r3, r2
 80043d8:	00db      	lsls	r3, r3, #3
 80043da:	440b      	add	r3, r1
 80043dc:	3328      	adds	r3, #40	; 0x28
 80043de:	2200      	movs	r2, #0
 80043e0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80043e2:	6939      	ldr	r1, [r7, #16]
 80043e4:	69fa      	ldr	r2, [r7, #28]
 80043e6:	4613      	mov	r3, r2
 80043e8:	005b      	lsls	r3, r3, #1
 80043ea:	4413      	add	r3, r2
 80043ec:	00db      	lsls	r3, r3, #3
 80043ee:	440b      	add	r3, r1
 80043f0:	3324      	adds	r3, #36	; 0x24
 80043f2:	2200      	movs	r2, #0
 80043f4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80043f6:	6939      	ldr	r1, [r7, #16]
 80043f8:	69fa      	ldr	r2, [r7, #28]
 80043fa:	4613      	mov	r3, r2
 80043fc:	005b      	lsls	r3, r3, #1
 80043fe:	4413      	add	r3, r2
 8004400:	00db      	lsls	r3, r3, #3
 8004402:	440b      	add	r3, r1
 8004404:	332c      	adds	r3, #44	; 0x2c
 8004406:	683a      	ldr	r2, [r7, #0]
 8004408:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800440a:	f3bf 8f5f 	dmb	sy
 800440e:	e002      	b.n	8004416 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004410:	f04f 33ff 	mov.w	r3, #4294967295
 8004414:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800441c:	69fb      	ldr	r3, [r7, #28]
}
 800441e:	4618      	mov	r0, r3
 8004420:	3720      	adds	r7, #32
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	20014388 	.word	0x20014388

0800442c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800442c:	b580      	push	{r7, lr}
 800442e:	b08a      	sub	sp, #40	; 0x28
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
 8004438:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800443a:	4b21      	ldr	r3, [pc, #132]	; (80044c0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800443c:	623b      	str	r3, [r7, #32]
 800443e:	6a3b      	ldr	r3, [r7, #32]
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	b2db      	uxtb	r3, r3
 8004444:	2b00      	cmp	r3, #0
 8004446:	d101      	bne.n	800444c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004448:	f7ff fcc8 	bl	8003ddc <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800444c:	4b1c      	ldr	r3, [pc, #112]	; (80044c0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800444e:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2b02      	cmp	r3, #2
 8004454:	d82c      	bhi.n	80044b0 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8004456:	f3ef 8311 	mrs	r3, BASEPRI
 800445a:	f04f 0120 	mov.w	r1, #32
 800445e:	f381 8811 	msr	BASEPRI, r1
 8004462:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8004464:	68fa      	ldr	r2, [r7, #12]
 8004466:	4613      	mov	r3, r2
 8004468:	005b      	lsls	r3, r3, #1
 800446a:	4413      	add	r3, r2
 800446c:	00db      	lsls	r3, r3, #3
 800446e:	3360      	adds	r3, #96	; 0x60
 8004470:	69fa      	ldr	r2, [r7, #28]
 8004472:	4413      	add	r3, r2
 8004474:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d00e      	beq.n	800449a <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	68ba      	ldr	r2, [r7, #8]
 8004480:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	683a      	ldr	r2, [r7, #0]
 800448c:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	2200      	movs	r2, #0
 8004492:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	2200      	movs	r2, #0
 8004498:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800449e:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80044a0:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80044aa:	2300      	movs	r3, #0
 80044ac:	627b      	str	r3, [r7, #36]	; 0x24
 80044ae:	e002      	b.n	80044b6 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80044b0:	f04f 33ff 	mov.w	r3, #4294967295
 80044b4:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 80044b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3728      	adds	r7, #40	; 0x28
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	20014388 	.word	0x20014388

080044c4 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80044c4:	b480      	push	{r7}
 80044c6:	b087      	sub	sp, #28
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80044d0:	2300      	movs	r3, #0
 80044d2:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00f      	beq.n	80044fa <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 80044da:	e002      	b.n	80044e2 <_EncodeStr+0x1e>
      Len++;
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	3301      	adds	r3, #1
 80044e0:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 80044e2:	68ba      	ldr	r2, [r7, #8]
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	4413      	add	r3, r2
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d1f6      	bne.n	80044dc <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 80044ee:	693a      	ldr	r2, [r7, #16]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d901      	bls.n	80044fa <_EncodeStr+0x36>
      Len = Limit;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	2bfe      	cmp	r3, #254	; 0xfe
 80044fe:	d806      	bhi.n	800450e <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	1c5a      	adds	r2, r3, #1
 8004504:	60fa      	str	r2, [r7, #12]
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	b2d2      	uxtb	r2, r2
 800450a:	701a      	strb	r2, [r3, #0]
 800450c:	e011      	b.n	8004532 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	1c5a      	adds	r2, r3, #1
 8004512:	60fa      	str	r2, [r7, #12]
 8004514:	22ff      	movs	r2, #255	; 0xff
 8004516:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	1c5a      	adds	r2, r3, #1
 800451c:	60fa      	str	r2, [r7, #12]
 800451e:	693a      	ldr	r2, [r7, #16]
 8004520:	b2d2      	uxtb	r2, r2
 8004522:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	0a19      	lsrs	r1, r3, #8
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	1c5a      	adds	r2, r3, #1
 800452c:	60fa      	str	r2, [r7, #12]
 800452e:	b2ca      	uxtb	r2, r1
 8004530:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8004532:	2300      	movs	r3, #0
 8004534:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004536:	e00a      	b.n	800454e <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8004538:	68ba      	ldr	r2, [r7, #8]
 800453a:	1c53      	adds	r3, r2, #1
 800453c:	60bb      	str	r3, [r7, #8]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	1c59      	adds	r1, r3, #1
 8004542:	60f9      	str	r1, [r7, #12]
 8004544:	7812      	ldrb	r2, [r2, #0]
 8004546:	701a      	strb	r2, [r3, #0]
    n++;
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	3301      	adds	r3, #1
 800454c:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800454e:	697a      	ldr	r2, [r7, #20]
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	429a      	cmp	r2, r3
 8004554:	d3f0      	bcc.n	8004538 <_EncodeStr+0x74>
  }
  return pPayload;
 8004556:	68fb      	ldr	r3, [r7, #12]
}
 8004558:	4618      	mov	r0, r3
 800455a:	371c      	adds	r7, #28
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	3307      	adds	r3, #7
}
 8004570:	4618      	mov	r0, r3
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004582:	4b35      	ldr	r3, [pc, #212]	; (8004658 <_HandleIncomingPacket+0xdc>)
 8004584:	7e1b      	ldrb	r3, [r3, #24]
 8004586:	4618      	mov	r0, r3
 8004588:	1cfb      	adds	r3, r7, #3
 800458a:	2201      	movs	r2, #1
 800458c:	4619      	mov	r1, r3
 800458e:	f7ff fdcd 	bl	800412c <SEGGER_RTT_ReadNoLock>
 8004592:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d052      	beq.n	8004640 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 800459a:	78fb      	ldrb	r3, [r7, #3]
 800459c:	2b80      	cmp	r3, #128	; 0x80
 800459e:	d031      	beq.n	8004604 <_HandleIncomingPacket+0x88>
 80045a0:	2b80      	cmp	r3, #128	; 0x80
 80045a2:	dc40      	bgt.n	8004626 <_HandleIncomingPacket+0xaa>
 80045a4:	2b07      	cmp	r3, #7
 80045a6:	dc15      	bgt.n	80045d4 <_HandleIncomingPacket+0x58>
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	dd3c      	ble.n	8004626 <_HandleIncomingPacket+0xaa>
 80045ac:	3b01      	subs	r3, #1
 80045ae:	2b06      	cmp	r3, #6
 80045b0:	d839      	bhi.n	8004626 <_HandleIncomingPacket+0xaa>
 80045b2:	a201      	add	r2, pc, #4	; (adr r2, 80045b8 <_HandleIncomingPacket+0x3c>)
 80045b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b8:	080045db 	.word	0x080045db
 80045bc:	080045e1 	.word	0x080045e1
 80045c0:	080045e7 	.word	0x080045e7
 80045c4:	080045ed 	.word	0x080045ed
 80045c8:	080045f3 	.word	0x080045f3
 80045cc:	080045f9 	.word	0x080045f9
 80045d0:	080045ff 	.word	0x080045ff
 80045d4:	2b7f      	cmp	r3, #127	; 0x7f
 80045d6:	d035      	beq.n	8004644 <_HandleIncomingPacket+0xc8>
 80045d8:	e025      	b.n	8004626 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80045da:	f000 fb2b 	bl	8004c34 <SEGGER_SYSVIEW_Start>
      break;
 80045de:	e036      	b.n	800464e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80045e0:	f000 fbe4 	bl	8004dac <SEGGER_SYSVIEW_Stop>
      break;
 80045e4:	e033      	b.n	800464e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80045e6:	f000 fdbd 	bl	8005164 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80045ea:	e030      	b.n	800464e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80045ec:	f000 fd82 	bl	80050f4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80045f0:	e02d      	b.n	800464e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80045f2:	f000 fc01 	bl	8004df8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80045f6:	e02a      	b.n	800464e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80045f8:	f001 f840 	bl	800567c <SEGGER_SYSVIEW_SendNumModules>
      break;
 80045fc:	e027      	b.n	800464e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80045fe:	f001 f81f 	bl	8005640 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004602:	e024      	b.n	800464e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004604:	4b14      	ldr	r3, [pc, #80]	; (8004658 <_HandleIncomingPacket+0xdc>)
 8004606:	7e1b      	ldrb	r3, [r3, #24]
 8004608:	4618      	mov	r0, r3
 800460a:	1cfb      	adds	r3, r7, #3
 800460c:	2201      	movs	r2, #1
 800460e:	4619      	mov	r1, r3
 8004610:	f7ff fd8c 	bl	800412c <SEGGER_RTT_ReadNoLock>
 8004614:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d015      	beq.n	8004648 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800461c:	78fb      	ldrb	r3, [r7, #3]
 800461e:	4618      	mov	r0, r3
 8004620:	f000 ff8e 	bl	8005540 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004624:	e010      	b.n	8004648 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004626:	78fb      	ldrb	r3, [r7, #3]
 8004628:	b25b      	sxtb	r3, r3
 800462a:	2b00      	cmp	r3, #0
 800462c:	da0e      	bge.n	800464c <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800462e:	4b0a      	ldr	r3, [pc, #40]	; (8004658 <_HandleIncomingPacket+0xdc>)
 8004630:	7e1b      	ldrb	r3, [r3, #24]
 8004632:	4618      	mov	r0, r3
 8004634:	1cfb      	adds	r3, r7, #3
 8004636:	2201      	movs	r2, #1
 8004638:	4619      	mov	r1, r3
 800463a:	f7ff fd77 	bl	800412c <SEGGER_RTT_ReadNoLock>
      }
      break;
 800463e:	e005      	b.n	800464c <_HandleIncomingPacket+0xd0>
    }
  }
 8004640:	bf00      	nop
 8004642:	e004      	b.n	800464e <_HandleIncomingPacket+0xd2>
      break;
 8004644:	bf00      	nop
 8004646:	e002      	b.n	800464e <_HandleIncomingPacket+0xd2>
      break;
 8004648:	bf00      	nop
 800464a:	e000      	b.n	800464e <_HandleIncomingPacket+0xd2>
      break;
 800464c:	bf00      	nop
}
 800464e:	bf00      	nop
 8004650:	3708      	adds	r7, #8
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	20014228 	.word	0x20014228

0800465c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800465c:	b580      	push	{r7, lr}
 800465e:	b08c      	sub	sp, #48	; 0x30
 8004660:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004662:	2301      	movs	r3, #1
 8004664:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004666:	1d3b      	adds	r3, r7, #4
 8004668:	3301      	adds	r3, #1
 800466a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004670:	4b32      	ldr	r3, [pc, #200]	; (800473c <_TrySendOverflowPacket+0xe0>)
 8004672:	695b      	ldr	r3, [r3, #20]
 8004674:	62bb      	str	r3, [r7, #40]	; 0x28
 8004676:	e00b      	b.n	8004690 <_TrySendOverflowPacket+0x34>
 8004678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800467a:	b2da      	uxtb	r2, r3
 800467c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800467e:	1c59      	adds	r1, r3, #1
 8004680:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004682:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004686:	b2d2      	uxtb	r2, r2
 8004688:	701a      	strb	r2, [r3, #0]
 800468a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800468c:	09db      	lsrs	r3, r3, #7
 800468e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004692:	2b7f      	cmp	r3, #127	; 0x7f
 8004694:	d8f0      	bhi.n	8004678 <_TrySendOverflowPacket+0x1c>
 8004696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004698:	1c5a      	adds	r2, r3, #1
 800469a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800469c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800469e:	b2d2      	uxtb	r2, r2
 80046a0:	701a      	strb	r2, [r3, #0]
 80046a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a4:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80046a6:	4b26      	ldr	r3, [pc, #152]	; (8004740 <_TrySendOverflowPacket+0xe4>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80046ac:	4b23      	ldr	r3, [pc, #140]	; (800473c <_TrySendOverflowPacket+0xe0>)
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	69ba      	ldr	r2, [r7, #24]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	627b      	str	r3, [r7, #36]	; 0x24
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	623b      	str	r3, [r7, #32]
 80046be:	e00b      	b.n	80046d8 <_TrySendOverflowPacket+0x7c>
 80046c0:	6a3b      	ldr	r3, [r7, #32]
 80046c2:	b2da      	uxtb	r2, r3
 80046c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c6:	1c59      	adds	r1, r3, #1
 80046c8:	6279      	str	r1, [r7, #36]	; 0x24
 80046ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046ce:	b2d2      	uxtb	r2, r2
 80046d0:	701a      	strb	r2, [r3, #0]
 80046d2:	6a3b      	ldr	r3, [r7, #32]
 80046d4:	09db      	lsrs	r3, r3, #7
 80046d6:	623b      	str	r3, [r7, #32]
 80046d8:	6a3b      	ldr	r3, [r7, #32]
 80046da:	2b7f      	cmp	r3, #127	; 0x7f
 80046dc:	d8f0      	bhi.n	80046c0 <_TrySendOverflowPacket+0x64>
 80046de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e0:	1c5a      	adds	r2, r3, #1
 80046e2:	627a      	str	r2, [r7, #36]	; 0x24
 80046e4:	6a3a      	ldr	r2, [r7, #32]
 80046e6:	b2d2      	uxtb	r2, r2
 80046e8:	701a      	strb	r2, [r3, #0]
 80046ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ec:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 80046ee:	4b13      	ldr	r3, [pc, #76]	; (800473c <_TrySendOverflowPacket+0xe0>)
 80046f0:	785b      	ldrb	r3, [r3, #1]
 80046f2:	4618      	mov	r0, r3
 80046f4:	1d3b      	adds	r3, r7, #4
 80046f6:	69fa      	ldr	r2, [r7, #28]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	461a      	mov	r2, r3
 80046fc:	1d3b      	adds	r3, r7, #4
 80046fe:	4619      	mov	r1, r3
 8004700:	f7fb fd66 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004704:	4603      	mov	r3, r0
 8004706:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8004708:	f7ff fade 	bl	8003cc8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d009      	beq.n	8004726 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004712:	4a0a      	ldr	r2, [pc, #40]	; (800473c <_TrySendOverflowPacket+0xe0>)
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004718:	4b08      	ldr	r3, [pc, #32]	; (800473c <_TrySendOverflowPacket+0xe0>)
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	3b01      	subs	r3, #1
 800471e:	b2da      	uxtb	r2, r3
 8004720:	4b06      	ldr	r3, [pc, #24]	; (800473c <_TrySendOverflowPacket+0xe0>)
 8004722:	701a      	strb	r2, [r3, #0]
 8004724:	e004      	b.n	8004730 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004726:	4b05      	ldr	r3, [pc, #20]	; (800473c <_TrySendOverflowPacket+0xe0>)
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	3301      	adds	r3, #1
 800472c:	4a03      	ldr	r2, [pc, #12]	; (800473c <_TrySendOverflowPacket+0xe0>)
 800472e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004730:	693b      	ldr	r3, [r7, #16]
}
 8004732:	4618      	mov	r0, r3
 8004734:	3730      	adds	r7, #48	; 0x30
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	20014228 	.word	0x20014228
 8004740:	e0001004 	.word	0xe0001004

08004744 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004744:	b580      	push	{r7, lr}
 8004746:	b08a      	sub	sp, #40	; 0x28
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004750:	4b9b      	ldr	r3, [pc, #620]	; (80049c0 <_SendPacket+0x27c>)
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d010      	beq.n	800477a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004758:	4b99      	ldr	r3, [pc, #612]	; (80049c0 <_SendPacket+0x27c>)
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	2b00      	cmp	r3, #0
 800475e:	f000 812b 	beq.w	80049b8 <_SendPacket+0x274>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004762:	4b97      	ldr	r3, [pc, #604]	; (80049c0 <_SendPacket+0x27c>)
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	2b02      	cmp	r3, #2
 8004768:	d109      	bne.n	800477e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800476a:	f7ff ff77 	bl	800465c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800476e:	4b94      	ldr	r3, [pc, #592]	; (80049c0 <_SendPacket+0x27c>)
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	2b01      	cmp	r3, #1
 8004774:	f040 8122 	bne.w	80049bc <_SendPacket+0x278>
      goto SendDone;
    }
  }
Send:
 8004778:	e001      	b.n	800477e <_SendPacket+0x3a>
    goto Send;
 800477a:	bf00      	nop
 800477c:	e000      	b.n	8004780 <_SendPacket+0x3c>
Send:
 800477e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2b1f      	cmp	r3, #31
 8004784:	d809      	bhi.n	800479a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004786:	4b8e      	ldr	r3, [pc, #568]	; (80049c0 <_SendPacket+0x27c>)
 8004788:	69da      	ldr	r2, [r3, #28]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	fa22 f303 	lsr.w	r3, r2, r3
 8004790:	f003 0301 	and.w	r3, r3, #1
 8004794:	2b00      	cmp	r3, #0
 8004796:	f040 8117 	bne.w	80049c8 <_SendPacket+0x284>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2b17      	cmp	r3, #23
 800479e:	d807      	bhi.n	80047b0 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	3b01      	subs	r3, #1
 80047a4:	60fb      	str	r3, [r7, #12]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	b2da      	uxtb	r2, r3
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	701a      	strb	r2, [r3, #0]
 80047ae:	e0c4      	b.n	800493a <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80047b0:	68ba      	ldr	r2, [r7, #8]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	2b7f      	cmp	r3, #127	; 0x7f
 80047bc:	d912      	bls.n	80047e4 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	09da      	lsrs	r2, r3, #7
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	3b01      	subs	r3, #1
 80047c6:	60fb      	str	r3, [r7, #12]
 80047c8:	b2d2      	uxtb	r2, r2
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	3a01      	subs	r2, #1
 80047d6:	60fa      	str	r2, [r7, #12]
 80047d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80047dc:	b2da      	uxtb	r2, r3
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	701a      	strb	r2, [r3, #0]
 80047e2:	e006      	b.n	80047f2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	3b01      	subs	r3, #1
 80047e8:	60fb      	str	r3, [r7, #12]
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	b2da      	uxtb	r2, r3
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2b7e      	cmp	r3, #126	; 0x7e
 80047f6:	d807      	bhi.n	8004808 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	3b01      	subs	r3, #1
 80047fc:	60fb      	str	r3, [r7, #12]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	b2da      	uxtb	r2, r3
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	701a      	strb	r2, [r3, #0]
 8004806:	e098      	b.n	800493a <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800480e:	d212      	bcs.n	8004836 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	09da      	lsrs	r2, r3, #7
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	3b01      	subs	r3, #1
 8004818:	60fb      	str	r3, [r7, #12]
 800481a:	b2d2      	uxtb	r2, r2
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	b2db      	uxtb	r3, r3
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	3a01      	subs	r2, #1
 8004828:	60fa      	str	r2, [r7, #12]
 800482a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800482e:	b2da      	uxtb	r2, r3
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	701a      	strb	r2, [r3, #0]
 8004834:	e081      	b.n	800493a <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800483c:	d21d      	bcs.n	800487a <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	0b9a      	lsrs	r2, r3, #14
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	3b01      	subs	r3, #1
 8004846:	60fb      	str	r3, [r7, #12]
 8004848:	b2d2      	uxtb	r2, r2
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	09db      	lsrs	r3, r3, #7
 8004852:	b2db      	uxtb	r3, r3
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	3a01      	subs	r2, #1
 8004858:	60fa      	str	r2, [r7, #12]
 800485a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800485e:	b2da      	uxtb	r2, r3
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	b2db      	uxtb	r3, r3
 8004868:	68fa      	ldr	r2, [r7, #12]
 800486a:	3a01      	subs	r2, #1
 800486c:	60fa      	str	r2, [r7, #12]
 800486e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004872:	b2da      	uxtb	r2, r3
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	701a      	strb	r2, [r3, #0]
 8004878:	e05f      	b.n	800493a <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004880:	d228      	bcs.n	80048d4 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	0d5a      	lsrs	r2, r3, #21
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	3b01      	subs	r3, #1
 800488a:	60fb      	str	r3, [r7, #12]
 800488c:	b2d2      	uxtb	r2, r2
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	0b9b      	lsrs	r3, r3, #14
 8004896:	b2db      	uxtb	r3, r3
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	3a01      	subs	r2, #1
 800489c:	60fa      	str	r2, [r7, #12]
 800489e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80048a2:	b2da      	uxtb	r2, r3
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	09db      	lsrs	r3, r3, #7
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	3a01      	subs	r2, #1
 80048b2:	60fa      	str	r2, [r7, #12]
 80048b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80048b8:	b2da      	uxtb	r2, r3
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	3a01      	subs	r2, #1
 80048c6:	60fa      	str	r2, [r7, #12]
 80048c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80048cc:	b2da      	uxtb	r2, r3
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	701a      	strb	r2, [r3, #0]
 80048d2:	e032      	b.n	800493a <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	0f1a      	lsrs	r2, r3, #28
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	3b01      	subs	r3, #1
 80048dc:	60fb      	str	r3, [r7, #12]
 80048de:	b2d2      	uxtb	r2, r2
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	0d5b      	lsrs	r3, r3, #21
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	3a01      	subs	r2, #1
 80048ee:	60fa      	str	r2, [r7, #12]
 80048f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80048f4:	b2da      	uxtb	r2, r3
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	0b9b      	lsrs	r3, r3, #14
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	3a01      	subs	r2, #1
 8004904:	60fa      	str	r2, [r7, #12]
 8004906:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800490a:	b2da      	uxtb	r2, r3
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	09db      	lsrs	r3, r3, #7
 8004914:	b2db      	uxtb	r3, r3
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	3a01      	subs	r2, #1
 800491a:	60fa      	str	r2, [r7, #12]
 800491c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004920:	b2da      	uxtb	r2, r3
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	b2db      	uxtb	r3, r3
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	3a01      	subs	r2, #1
 800492e:	60fa      	str	r2, [r7, #12]
 8004930:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004934:	b2da      	uxtb	r2, r3
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800493a:	4b22      	ldr	r3, [pc, #136]	; (80049c4 <_SendPacket+0x280>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004940:	4b1f      	ldr	r3, [pc, #124]	; (80049c0 <_SendPacket+0x27c>)
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	69ba      	ldr	r2, [r7, #24]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	627b      	str	r3, [r7, #36]	; 0x24
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	623b      	str	r3, [r7, #32]
 8004952:	e00b      	b.n	800496c <_SendPacket+0x228>
 8004954:	6a3b      	ldr	r3, [r7, #32]
 8004956:	b2da      	uxtb	r2, r3
 8004958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495a:	1c59      	adds	r1, r3, #1
 800495c:	6279      	str	r1, [r7, #36]	; 0x24
 800495e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004962:	b2d2      	uxtb	r2, r2
 8004964:	701a      	strb	r2, [r3, #0]
 8004966:	6a3b      	ldr	r3, [r7, #32]
 8004968:	09db      	lsrs	r3, r3, #7
 800496a:	623b      	str	r3, [r7, #32]
 800496c:	6a3b      	ldr	r3, [r7, #32]
 800496e:	2b7f      	cmp	r3, #127	; 0x7f
 8004970:	d8f0      	bhi.n	8004954 <_SendPacket+0x210>
 8004972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004974:	1c5a      	adds	r2, r3, #1
 8004976:	627a      	str	r2, [r7, #36]	; 0x24
 8004978:	6a3a      	ldr	r2, [r7, #32]
 800497a:	b2d2      	uxtb	r2, r2
 800497c:	701a      	strb	r2, [r3, #0]
 800497e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004980:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8004982:	4b0f      	ldr	r3, [pc, #60]	; (80049c0 <_SendPacket+0x27c>)
 8004984:	785b      	ldrb	r3, [r3, #1]
 8004986:	4618      	mov	r0, r3
 8004988:	68ba      	ldr	r2, [r7, #8]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	461a      	mov	r2, r3
 8004990:	68f9      	ldr	r1, [r7, #12]
 8004992:	f7fb fc1d 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004996:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8004998:	f7ff f996 	bl	8003cc8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d003      	beq.n	80049aa <_SendPacket+0x266>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80049a2:	4a07      	ldr	r2, [pc, #28]	; (80049c0 <_SendPacket+0x27c>)
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	60d3      	str	r3, [r2, #12]
 80049a8:	e00f      	b.n	80049ca <_SendPacket+0x286>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80049aa:	4b05      	ldr	r3, [pc, #20]	; (80049c0 <_SendPacket+0x27c>)
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	3301      	adds	r3, #1
 80049b0:	b2da      	uxtb	r2, r3
 80049b2:	4b03      	ldr	r3, [pc, #12]	; (80049c0 <_SendPacket+0x27c>)
 80049b4:	701a      	strb	r2, [r3, #0]
 80049b6:	e008      	b.n	80049ca <_SendPacket+0x286>
    goto SendDone;
 80049b8:	bf00      	nop
 80049ba:	e006      	b.n	80049ca <_SendPacket+0x286>
      goto SendDone;
 80049bc:	bf00      	nop
 80049be:	e004      	b.n	80049ca <_SendPacket+0x286>
 80049c0:	20014228 	.word	0x20014228
 80049c4:	e0001004 	.word	0xe0001004
      goto SendDone;
 80049c8:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80049ca:	4b14      	ldr	r3, [pc, #80]	; (8004a1c <_SendPacket+0x2d8>)
 80049cc:	7e1b      	ldrb	r3, [r3, #24]
 80049ce:	4619      	mov	r1, r3
 80049d0:	4a13      	ldr	r2, [pc, #76]	; (8004a20 <_SendPacket+0x2dc>)
 80049d2:	460b      	mov	r3, r1
 80049d4:	005b      	lsls	r3, r3, #1
 80049d6:	440b      	add	r3, r1
 80049d8:	00db      	lsls	r3, r3, #3
 80049da:	4413      	add	r3, r2
 80049dc:	336c      	adds	r3, #108	; 0x6c
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	4b0e      	ldr	r3, [pc, #56]	; (8004a1c <_SendPacket+0x2d8>)
 80049e2:	7e1b      	ldrb	r3, [r3, #24]
 80049e4:	4618      	mov	r0, r3
 80049e6:	490e      	ldr	r1, [pc, #56]	; (8004a20 <_SendPacket+0x2dc>)
 80049e8:	4603      	mov	r3, r0
 80049ea:	005b      	lsls	r3, r3, #1
 80049ec:	4403      	add	r3, r0
 80049ee:	00db      	lsls	r3, r3, #3
 80049f0:	440b      	add	r3, r1
 80049f2:	3370      	adds	r3, #112	; 0x70
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d00b      	beq.n	8004a12 <_SendPacket+0x2ce>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80049fa:	4b08      	ldr	r3, [pc, #32]	; (8004a1c <_SendPacket+0x2d8>)
 80049fc:	789b      	ldrb	r3, [r3, #2]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d107      	bne.n	8004a12 <_SendPacket+0x2ce>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004a02:	4b06      	ldr	r3, [pc, #24]	; (8004a1c <_SendPacket+0x2d8>)
 8004a04:	2201      	movs	r2, #1
 8004a06:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004a08:	f7ff fdb8 	bl	800457c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004a0c:	4b03      	ldr	r3, [pc, #12]	; (8004a1c <_SendPacket+0x2d8>)
 8004a0e:	2200      	movs	r2, #0
 8004a10:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004a12:	bf00      	nop
 8004a14:	3728      	adds	r7, #40	; 0x28
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	20014228 	.word	0x20014228
 8004a20:	20014388 	.word	0x20014388

08004a24 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b086      	sub	sp, #24
 8004a28:	af02      	add	r7, sp, #8
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]
 8004a30:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004a32:	2300      	movs	r3, #0
 8004a34:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004a38:	4917      	ldr	r1, [pc, #92]	; (8004a98 <SEGGER_SYSVIEW_Init+0x74>)
 8004a3a:	4818      	ldr	r0, [pc, #96]	; (8004a9c <SEGGER_SYSVIEW_Init+0x78>)
 8004a3c:	f7ff fc72 	bl	8004324 <SEGGER_RTT_AllocUpBuffer>
 8004a40:	4603      	mov	r3, r0
 8004a42:	b2da      	uxtb	r2, r3
 8004a44:	4b16      	ldr	r3, [pc, #88]	; (8004aa0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004a46:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004a48:	4b15      	ldr	r3, [pc, #84]	; (8004aa0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004a4a:	785a      	ldrb	r2, [r3, #1]
 8004a4c:	4b14      	ldr	r3, [pc, #80]	; (8004aa0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004a4e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004a50:	4b13      	ldr	r3, [pc, #76]	; (8004aa0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004a52:	7e1b      	ldrb	r3, [r3, #24]
 8004a54:	4618      	mov	r0, r3
 8004a56:	2300      	movs	r3, #0
 8004a58:	9300      	str	r3, [sp, #0]
 8004a5a:	2308      	movs	r3, #8
 8004a5c:	4a11      	ldr	r2, [pc, #68]	; (8004aa4 <SEGGER_SYSVIEW_Init+0x80>)
 8004a5e:	490f      	ldr	r1, [pc, #60]	; (8004a9c <SEGGER_SYSVIEW_Init+0x78>)
 8004a60:	f7ff fce4 	bl	800442c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004a64:	4b0e      	ldr	r3, [pc, #56]	; (8004aa0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004a66:	2200      	movs	r2, #0
 8004a68:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004a6a:	4b0f      	ldr	r3, [pc, #60]	; (8004aa8 <SEGGER_SYSVIEW_Init+0x84>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a0c      	ldr	r2, [pc, #48]	; (8004aa0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004a70:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004a72:	4a0b      	ldr	r2, [pc, #44]	; (8004aa0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004a78:	4a09      	ldr	r2, [pc, #36]	; (8004aa0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004a7e:	4a08      	ldr	r2, [pc, #32]	; (8004aa0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004a84:	4a06      	ldr	r2, [pc, #24]	; (8004aa0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004a8a:	4b05      	ldr	r3, [pc, #20]	; (8004aa0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004a90:	bf00      	nop
 8004a92:	3710      	adds	r7, #16
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	20013220 	.word	0x20013220
 8004a9c:	080059a4 	.word	0x080059a4
 8004aa0:	20014228 	.word	0x20014228
 8004aa4:	20014220 	.word	0x20014220
 8004aa8:	e0001004 	.word	0xe0001004

08004aac <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004ab4:	4a04      	ldr	r2, [pc, #16]	; (8004ac8 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6113      	str	r3, [r2, #16]
}
 8004aba:	bf00      	nop
 8004abc:	370c      	adds	r7, #12
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	20014228 	.word	0x20014228

08004acc <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004ad4:	f3ef 8311 	mrs	r3, BASEPRI
 8004ad8:	f04f 0120 	mov.w	r1, #32
 8004adc:	f381 8811 	msr	BASEPRI, r1
 8004ae0:	60fb      	str	r3, [r7, #12]
 8004ae2:	4808      	ldr	r0, [pc, #32]	; (8004b04 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004ae4:	f7ff fd3e 	bl	8004564 <_PreparePacket>
 8004ae8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	68b9      	ldr	r1, [r7, #8]
 8004aee:	68b8      	ldr	r0, [r7, #8]
 8004af0:	f7ff fe28 	bl	8004744 <_SendPacket>
  RECORD_END();
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f383 8811 	msr	BASEPRI, r3
}
 8004afa:	bf00      	nop
 8004afc:	3710      	adds	r7, #16
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	20014258 	.word	0x20014258

08004b08 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b088      	sub	sp, #32
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004b12:	f3ef 8311 	mrs	r3, BASEPRI
 8004b16:	f04f 0120 	mov.w	r1, #32
 8004b1a:	f381 8811 	msr	BASEPRI, r1
 8004b1e:	617b      	str	r3, [r7, #20]
 8004b20:	4816      	ldr	r0, [pc, #88]	; (8004b7c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004b22:	f7ff fd1f 	bl	8004564 <_PreparePacket>
 8004b26:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	61fb      	str	r3, [r7, #28]
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	61bb      	str	r3, [r7, #24]
 8004b34:	e00b      	b.n	8004b4e <SEGGER_SYSVIEW_RecordU32+0x46>
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	b2da      	uxtb	r2, r3
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	1c59      	adds	r1, r3, #1
 8004b3e:	61f9      	str	r1, [r7, #28]
 8004b40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b44:	b2d2      	uxtb	r2, r2
 8004b46:	701a      	strb	r2, [r3, #0]
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	09db      	lsrs	r3, r3, #7
 8004b4c:	61bb      	str	r3, [r7, #24]
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	2b7f      	cmp	r3, #127	; 0x7f
 8004b52:	d8f0      	bhi.n	8004b36 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	1c5a      	adds	r2, r3, #1
 8004b58:	61fa      	str	r2, [r7, #28]
 8004b5a:	69ba      	ldr	r2, [r7, #24]
 8004b5c:	b2d2      	uxtb	r2, r2
 8004b5e:	701a      	strb	r2, [r3, #0]
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	68f9      	ldr	r1, [r7, #12]
 8004b68:	6938      	ldr	r0, [r7, #16]
 8004b6a:	f7ff fdeb 	bl	8004744 <_SendPacket>
  RECORD_END();
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	f383 8811 	msr	BASEPRI, r3
}
 8004b74:	bf00      	nop
 8004b76:	3720      	adds	r7, #32
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	20014258 	.word	0x20014258

08004b80 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b08c      	sub	sp, #48	; 0x30
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004b8c:	f3ef 8311 	mrs	r3, BASEPRI
 8004b90:	f04f 0120 	mov.w	r1, #32
 8004b94:	f381 8811 	msr	BASEPRI, r1
 8004b98:	61fb      	str	r3, [r7, #28]
 8004b9a:	4825      	ldr	r0, [pc, #148]	; (8004c30 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004b9c:	f7ff fce2 	bl	8004564 <_PreparePacket>
 8004ba0:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bae:	e00b      	b.n	8004bc8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb2:	b2da      	uxtb	r2, r3
 8004bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb6:	1c59      	adds	r1, r3, #1
 8004bb8:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004bba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004bbe:	b2d2      	uxtb	r2, r2
 8004bc0:	701a      	strb	r2, [r3, #0]
 8004bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc4:	09db      	lsrs	r3, r3, #7
 8004bc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bca:	2b7f      	cmp	r3, #127	; 0x7f
 8004bcc:	d8f0      	bhi.n	8004bb0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd0:	1c5a      	adds	r2, r3, #1
 8004bd2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004bd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bd6:	b2d2      	uxtb	r2, r2
 8004bd8:	701a      	strb	r2, [r3, #0]
 8004bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bdc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	627b      	str	r3, [r7, #36]	; 0x24
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	623b      	str	r3, [r7, #32]
 8004be6:	e00b      	b.n	8004c00 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004be8:	6a3b      	ldr	r3, [r7, #32]
 8004bea:	b2da      	uxtb	r2, r3
 8004bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bee:	1c59      	adds	r1, r3, #1
 8004bf0:	6279      	str	r1, [r7, #36]	; 0x24
 8004bf2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004bf6:	b2d2      	uxtb	r2, r2
 8004bf8:	701a      	strb	r2, [r3, #0]
 8004bfa:	6a3b      	ldr	r3, [r7, #32]
 8004bfc:	09db      	lsrs	r3, r3, #7
 8004bfe:	623b      	str	r3, [r7, #32]
 8004c00:	6a3b      	ldr	r3, [r7, #32]
 8004c02:	2b7f      	cmp	r3, #127	; 0x7f
 8004c04:	d8f0      	bhi.n	8004be8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c08:	1c5a      	adds	r2, r3, #1
 8004c0a:	627a      	str	r2, [r7, #36]	; 0x24
 8004c0c:	6a3a      	ldr	r2, [r7, #32]
 8004c0e:	b2d2      	uxtb	r2, r2
 8004c10:	701a      	strb	r2, [r3, #0]
 8004c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c14:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	6979      	ldr	r1, [r7, #20]
 8004c1a:	69b8      	ldr	r0, [r7, #24]
 8004c1c:	f7ff fd92 	bl	8004744 <_SendPacket>
  RECORD_END();
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	f383 8811 	msr	BASEPRI, r3
}
 8004c26:	bf00      	nop
 8004c28:	3730      	adds	r7, #48	; 0x30
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	20014258 	.word	0x20014258

08004c34 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b08c      	sub	sp, #48	; 0x30
 8004c38:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004c3a:	4b59      	ldr	r3, [pc, #356]	; (8004da0 <SEGGER_SYSVIEW_Start+0x16c>)
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004c40:	f3ef 8311 	mrs	r3, BASEPRI
 8004c44:	f04f 0120 	mov.w	r1, #32
 8004c48:	f381 8811 	msr	BASEPRI, r1
 8004c4c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004c4e:	4b54      	ldr	r3, [pc, #336]	; (8004da0 <SEGGER_SYSVIEW_Start+0x16c>)
 8004c50:	785b      	ldrb	r3, [r3, #1]
 8004c52:	220a      	movs	r2, #10
 8004c54:	4953      	ldr	r1, [pc, #332]	; (8004da4 <SEGGER_SYSVIEW_Start+0x170>)
 8004c56:	4618      	mov	r0, r3
 8004c58:	f7fb faba 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8004c62:	f7ff f831 	bl	8003cc8 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004c66:	200a      	movs	r0, #10
 8004c68:	f7ff ff30 	bl	8004acc <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004c6c:	f3ef 8311 	mrs	r3, BASEPRI
 8004c70:	f04f 0120 	mov.w	r1, #32
 8004c74:	f381 8811 	msr	BASEPRI, r1
 8004c78:	60bb      	str	r3, [r7, #8]
 8004c7a:	484b      	ldr	r0, [pc, #300]	; (8004da8 <SEGGER_SYSVIEW_Start+0x174>)
 8004c7c:	f7ff fc72 	bl	8004564 <_PreparePacket>
 8004c80:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c8a:	4b45      	ldr	r3, [pc, #276]	; (8004da0 <SEGGER_SYSVIEW_Start+0x16c>)
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c90:	e00b      	b.n	8004caa <SEGGER_SYSVIEW_Start+0x76>
 8004c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c94:	b2da      	uxtb	r2, r3
 8004c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c98:	1c59      	adds	r1, r3, #1
 8004c9a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004c9c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ca0:	b2d2      	uxtb	r2, r2
 8004ca2:	701a      	strb	r2, [r3, #0]
 8004ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca6:	09db      	lsrs	r3, r3, #7
 8004ca8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cac:	2b7f      	cmp	r3, #127	; 0x7f
 8004cae:	d8f0      	bhi.n	8004c92 <SEGGER_SYSVIEW_Start+0x5e>
 8004cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb2:	1c5a      	adds	r2, r3, #1
 8004cb4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004cb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cb8:	b2d2      	uxtb	r2, r2
 8004cba:	701a      	strb	r2, [r3, #0]
 8004cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cbe:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	627b      	str	r3, [r7, #36]	; 0x24
 8004cc4:	4b36      	ldr	r3, [pc, #216]	; (8004da0 <SEGGER_SYSVIEW_Start+0x16c>)
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	623b      	str	r3, [r7, #32]
 8004cca:	e00b      	b.n	8004ce4 <SEGGER_SYSVIEW_Start+0xb0>
 8004ccc:	6a3b      	ldr	r3, [r7, #32]
 8004cce:	b2da      	uxtb	r2, r3
 8004cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd2:	1c59      	adds	r1, r3, #1
 8004cd4:	6279      	str	r1, [r7, #36]	; 0x24
 8004cd6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cda:	b2d2      	uxtb	r2, r2
 8004cdc:	701a      	strb	r2, [r3, #0]
 8004cde:	6a3b      	ldr	r3, [r7, #32]
 8004ce0:	09db      	lsrs	r3, r3, #7
 8004ce2:	623b      	str	r3, [r7, #32]
 8004ce4:	6a3b      	ldr	r3, [r7, #32]
 8004ce6:	2b7f      	cmp	r3, #127	; 0x7f
 8004ce8:	d8f0      	bhi.n	8004ccc <SEGGER_SYSVIEW_Start+0x98>
 8004cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cec:	1c5a      	adds	r2, r3, #1
 8004cee:	627a      	str	r2, [r7, #36]	; 0x24
 8004cf0:	6a3a      	ldr	r2, [r7, #32]
 8004cf2:	b2d2      	uxtb	r2, r2
 8004cf4:	701a      	strb	r2, [r3, #0]
 8004cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	61fb      	str	r3, [r7, #28]
 8004cfe:	4b28      	ldr	r3, [pc, #160]	; (8004da0 <SEGGER_SYSVIEW_Start+0x16c>)
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	61bb      	str	r3, [r7, #24]
 8004d04:	e00b      	b.n	8004d1e <SEGGER_SYSVIEW_Start+0xea>
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	b2da      	uxtb	r2, r3
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	1c59      	adds	r1, r3, #1
 8004d0e:	61f9      	str	r1, [r7, #28]
 8004d10:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d14:	b2d2      	uxtb	r2, r2
 8004d16:	701a      	strb	r2, [r3, #0]
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	09db      	lsrs	r3, r3, #7
 8004d1c:	61bb      	str	r3, [r7, #24]
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	2b7f      	cmp	r3, #127	; 0x7f
 8004d22:	d8f0      	bhi.n	8004d06 <SEGGER_SYSVIEW_Start+0xd2>
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	1c5a      	adds	r2, r3, #1
 8004d28:	61fa      	str	r2, [r7, #28]
 8004d2a:	69ba      	ldr	r2, [r7, #24]
 8004d2c:	b2d2      	uxtb	r2, r2
 8004d2e:	701a      	strb	r2, [r3, #0]
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	617b      	str	r3, [r7, #20]
 8004d38:	2300      	movs	r3, #0
 8004d3a:	613b      	str	r3, [r7, #16]
 8004d3c:	e00b      	b.n	8004d56 <SEGGER_SYSVIEW_Start+0x122>
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	b2da      	uxtb	r2, r3
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	1c59      	adds	r1, r3, #1
 8004d46:	6179      	str	r1, [r7, #20]
 8004d48:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d4c:	b2d2      	uxtb	r2, r2
 8004d4e:	701a      	strb	r2, [r3, #0]
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	09db      	lsrs	r3, r3, #7
 8004d54:	613b      	str	r3, [r7, #16]
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	2b7f      	cmp	r3, #127	; 0x7f
 8004d5a:	d8f0      	bhi.n	8004d3e <SEGGER_SYSVIEW_Start+0x10a>
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	1c5a      	adds	r2, r3, #1
 8004d60:	617a      	str	r2, [r7, #20]
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	b2d2      	uxtb	r2, r2
 8004d66:	701a      	strb	r2, [r3, #0]
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004d6c:	2218      	movs	r2, #24
 8004d6e:	6839      	ldr	r1, [r7, #0]
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f7ff fce7 	bl	8004744 <_SendPacket>
      RECORD_END();
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004d7c:	4b08      	ldr	r3, [pc, #32]	; (8004da0 <SEGGER_SYSVIEW_Start+0x16c>)
 8004d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d002      	beq.n	8004d8a <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004d84:	4b06      	ldr	r3, [pc, #24]	; (8004da0 <SEGGER_SYSVIEW_Start+0x16c>)
 8004d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d88:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004d8a:	f000 f9eb 	bl	8005164 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004d8e:	f000 f9b1 	bl	80050f4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004d92:	f000 fc73 	bl	800567c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004d96:	bf00      	nop
 8004d98:	3730      	adds	r7, #48	; 0x30
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	20014228 	.word	0x20014228
 8004da4:	080059e4 	.word	0x080059e4
 8004da8:	20014258 	.word	0x20014258

08004dac <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004db2:	f3ef 8311 	mrs	r3, BASEPRI
 8004db6:	f04f 0120 	mov.w	r1, #32
 8004dba:	f381 8811 	msr	BASEPRI, r1
 8004dbe:	607b      	str	r3, [r7, #4]
 8004dc0:	480b      	ldr	r0, [pc, #44]	; (8004df0 <SEGGER_SYSVIEW_Stop+0x44>)
 8004dc2:	f7ff fbcf 	bl	8004564 <_PreparePacket>
 8004dc6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004dc8:	4b0a      	ldr	r3, [pc, #40]	; (8004df4 <SEGGER_SYSVIEW_Stop+0x48>)
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d007      	beq.n	8004de0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004dd0:	220b      	movs	r2, #11
 8004dd2:	6839      	ldr	r1, [r7, #0]
 8004dd4:	6838      	ldr	r0, [r7, #0]
 8004dd6:	f7ff fcb5 	bl	8004744 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8004dda:	4b06      	ldr	r3, [pc, #24]	; (8004df4 <SEGGER_SYSVIEW_Stop+0x48>)
 8004ddc:	2200      	movs	r2, #0
 8004dde:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f383 8811 	msr	BASEPRI, r3
}
 8004de6:	bf00      	nop
 8004de8:	3708      	adds	r7, #8
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	20014258 	.word	0x20014258
 8004df4:	20014228 	.word	0x20014228

08004df8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b08c      	sub	sp, #48	; 0x30
 8004dfc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004dfe:	f3ef 8311 	mrs	r3, BASEPRI
 8004e02:	f04f 0120 	mov.w	r1, #32
 8004e06:	f381 8811 	msr	BASEPRI, r1
 8004e0a:	60fb      	str	r3, [r7, #12]
 8004e0c:	4845      	ldr	r0, [pc, #276]	; (8004f24 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8004e0e:	f7ff fba9 	bl	8004564 <_PreparePacket>
 8004e12:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e1c:	4b42      	ldr	r3, [pc, #264]	; (8004f28 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e22:	e00b      	b.n	8004e3c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e26:	b2da      	uxtb	r2, r3
 8004e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e2a:	1c59      	adds	r1, r3, #1
 8004e2c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004e2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e32:	b2d2      	uxtb	r2, r2
 8004e34:	701a      	strb	r2, [r3, #0]
 8004e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e38:	09db      	lsrs	r3, r3, #7
 8004e3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e3e:	2b7f      	cmp	r3, #127	; 0x7f
 8004e40:	d8f0      	bhi.n	8004e24 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e44:	1c5a      	adds	r2, r3, #1
 8004e46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e4a:	b2d2      	uxtb	r2, r2
 8004e4c:	701a      	strb	r2, [r3, #0]
 8004e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e50:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	627b      	str	r3, [r7, #36]	; 0x24
 8004e56:	4b34      	ldr	r3, [pc, #208]	; (8004f28 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	623b      	str	r3, [r7, #32]
 8004e5c:	e00b      	b.n	8004e76 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004e5e:	6a3b      	ldr	r3, [r7, #32]
 8004e60:	b2da      	uxtb	r2, r3
 8004e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e64:	1c59      	adds	r1, r3, #1
 8004e66:	6279      	str	r1, [r7, #36]	; 0x24
 8004e68:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e6c:	b2d2      	uxtb	r2, r2
 8004e6e:	701a      	strb	r2, [r3, #0]
 8004e70:	6a3b      	ldr	r3, [r7, #32]
 8004e72:	09db      	lsrs	r3, r3, #7
 8004e74:	623b      	str	r3, [r7, #32]
 8004e76:	6a3b      	ldr	r3, [r7, #32]
 8004e78:	2b7f      	cmp	r3, #127	; 0x7f
 8004e7a:	d8f0      	bhi.n	8004e5e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7e:	1c5a      	adds	r2, r3, #1
 8004e80:	627a      	str	r2, [r7, #36]	; 0x24
 8004e82:	6a3a      	ldr	r2, [r7, #32]
 8004e84:	b2d2      	uxtb	r2, r2
 8004e86:	701a      	strb	r2, [r3, #0]
 8004e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	61fb      	str	r3, [r7, #28]
 8004e90:	4b25      	ldr	r3, [pc, #148]	; (8004f28 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	61bb      	str	r3, [r7, #24]
 8004e96:	e00b      	b.n	8004eb0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	b2da      	uxtb	r2, r3
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	1c59      	adds	r1, r3, #1
 8004ea0:	61f9      	str	r1, [r7, #28]
 8004ea2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ea6:	b2d2      	uxtb	r2, r2
 8004ea8:	701a      	strb	r2, [r3, #0]
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	09db      	lsrs	r3, r3, #7
 8004eae:	61bb      	str	r3, [r7, #24]
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	2b7f      	cmp	r3, #127	; 0x7f
 8004eb4:	d8f0      	bhi.n	8004e98 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	1c5a      	adds	r2, r3, #1
 8004eba:	61fa      	str	r2, [r7, #28]
 8004ebc:	69ba      	ldr	r2, [r7, #24]
 8004ebe:	b2d2      	uxtb	r2, r2
 8004ec0:	701a      	strb	r2, [r3, #0]
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	617b      	str	r3, [r7, #20]
 8004eca:	2300      	movs	r3, #0
 8004ecc:	613b      	str	r3, [r7, #16]
 8004ece:	e00b      	b.n	8004ee8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	b2da      	uxtb	r2, r3
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	1c59      	adds	r1, r3, #1
 8004ed8:	6179      	str	r1, [r7, #20]
 8004eda:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ede:	b2d2      	uxtb	r2, r2
 8004ee0:	701a      	strb	r2, [r3, #0]
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	09db      	lsrs	r3, r3, #7
 8004ee6:	613b      	str	r3, [r7, #16]
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	2b7f      	cmp	r3, #127	; 0x7f
 8004eec:	d8f0      	bhi.n	8004ed0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	1c5a      	adds	r2, r3, #1
 8004ef2:	617a      	str	r2, [r7, #20]
 8004ef4:	693a      	ldr	r2, [r7, #16]
 8004ef6:	b2d2      	uxtb	r2, r2
 8004ef8:	701a      	strb	r2, [r3, #0]
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004efe:	2218      	movs	r2, #24
 8004f00:	6879      	ldr	r1, [r7, #4]
 8004f02:	68b8      	ldr	r0, [r7, #8]
 8004f04:	f7ff fc1e 	bl	8004744 <_SendPacket>
  RECORD_END();
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004f0e:	4b06      	ldr	r3, [pc, #24]	; (8004f28 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d002      	beq.n	8004f1c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8004f16:	4b04      	ldr	r3, [pc, #16]	; (8004f28 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1a:	4798      	blx	r3
  }
}
 8004f1c:	bf00      	nop
 8004f1e:	3730      	adds	r7, #48	; 0x30
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	20014258 	.word	0x20014258
 8004f28:	20014228 	.word	0x20014228

08004f2c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b092      	sub	sp, #72	; 0x48
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004f34:	f3ef 8311 	mrs	r3, BASEPRI
 8004f38:	f04f 0120 	mov.w	r1, #32
 8004f3c:	f381 8811 	msr	BASEPRI, r1
 8004f40:	617b      	str	r3, [r7, #20]
 8004f42:	486a      	ldr	r0, [pc, #424]	; (80050ec <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004f44:	f7ff fb0e 	bl	8004564 <_PreparePacket>
 8004f48:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	647b      	str	r3, [r7, #68]	; 0x44
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	4b66      	ldr	r3, [pc, #408]	; (80050f0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	1ad3      	subs	r3, r2, r3
 8004f5c:	643b      	str	r3, [r7, #64]	; 0x40
 8004f5e:	e00b      	b.n	8004f78 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8004f60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f62:	b2da      	uxtb	r2, r3
 8004f64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f66:	1c59      	adds	r1, r3, #1
 8004f68:	6479      	str	r1, [r7, #68]	; 0x44
 8004f6a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f6e:	b2d2      	uxtb	r2, r2
 8004f70:	701a      	strb	r2, [r3, #0]
 8004f72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f74:	09db      	lsrs	r3, r3, #7
 8004f76:	643b      	str	r3, [r7, #64]	; 0x40
 8004f78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f7a:	2b7f      	cmp	r3, #127	; 0x7f
 8004f7c:	d8f0      	bhi.n	8004f60 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8004f7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f80:	1c5a      	adds	r2, r3, #1
 8004f82:	647a      	str	r2, [r7, #68]	; 0x44
 8004f84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f86:	b2d2      	uxtb	r2, r2
 8004f88:	701a      	strb	r2, [r3, #0]
 8004f8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f8c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f98:	e00b      	b.n	8004fb2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8004f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f9c:	b2da      	uxtb	r2, r3
 8004f9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fa0:	1c59      	adds	r1, r3, #1
 8004fa2:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004fa4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fa8:	b2d2      	uxtb	r2, r2
 8004faa:	701a      	strb	r2, [r3, #0]
 8004fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fae:	09db      	lsrs	r3, r3, #7
 8004fb0:	63bb      	str	r3, [r7, #56]	; 0x38
 8004fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb4:	2b7f      	cmp	r3, #127	; 0x7f
 8004fb6:	d8f0      	bhi.n	8004f9a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8004fb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fba:	1c5a      	adds	r2, r3, #1
 8004fbc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004fbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004fc0:	b2d2      	uxtb	r2, r2
 8004fc2:	701a      	strb	r2, [r3, #0]
 8004fc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fc6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	2220      	movs	r2, #32
 8004fce:	4619      	mov	r1, r3
 8004fd0:	68f8      	ldr	r0, [r7, #12]
 8004fd2:	f7ff fa77 	bl	80044c4 <_EncodeStr>
 8004fd6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004fd8:	2209      	movs	r2, #9
 8004fda:	68f9      	ldr	r1, [r7, #12]
 8004fdc:	6938      	ldr	r0, [r7, #16]
 8004fde:	f7ff fbb1 	bl	8004744 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	637b      	str	r3, [r7, #52]	; 0x34
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	4b40      	ldr	r3, [pc, #256]	; (80050f0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	633b      	str	r3, [r7, #48]	; 0x30
 8004ff6:	e00b      	b.n	8005010 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8004ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffa:	b2da      	uxtb	r2, r3
 8004ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ffe:	1c59      	adds	r1, r3, #1
 8005000:	6379      	str	r1, [r7, #52]	; 0x34
 8005002:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005006:	b2d2      	uxtb	r2, r2
 8005008:	701a      	strb	r2, [r3, #0]
 800500a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800500c:	09db      	lsrs	r3, r3, #7
 800500e:	633b      	str	r3, [r7, #48]	; 0x30
 8005010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005012:	2b7f      	cmp	r3, #127	; 0x7f
 8005014:	d8f0      	bhi.n	8004ff8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005018:	1c5a      	adds	r2, r3, #1
 800501a:	637a      	str	r2, [r7, #52]	; 0x34
 800501c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800501e:	b2d2      	uxtb	r2, r2
 8005020:	701a      	strb	r2, [r3, #0]
 8005022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005024:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	62fb      	str	r3, [r7, #44]	; 0x2c
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005030:	e00b      	b.n	800504a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005034:	b2da      	uxtb	r2, r3
 8005036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005038:	1c59      	adds	r1, r3, #1
 800503a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800503c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005040:	b2d2      	uxtb	r2, r2
 8005042:	701a      	strb	r2, [r3, #0]
 8005044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005046:	09db      	lsrs	r3, r3, #7
 8005048:	62bb      	str	r3, [r7, #40]	; 0x28
 800504a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800504c:	2b7f      	cmp	r3, #127	; 0x7f
 800504e:	d8f0      	bhi.n	8005032 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005052:	1c5a      	adds	r2, r3, #1
 8005054:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005056:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005058:	b2d2      	uxtb	r2, r2
 800505a:	701a      	strb	r2, [r3, #0]
 800505c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800505e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	627b      	str	r3, [r7, #36]	; 0x24
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	691b      	ldr	r3, [r3, #16]
 8005068:	623b      	str	r3, [r7, #32]
 800506a:	e00b      	b.n	8005084 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800506c:	6a3b      	ldr	r3, [r7, #32]
 800506e:	b2da      	uxtb	r2, r3
 8005070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005072:	1c59      	adds	r1, r3, #1
 8005074:	6279      	str	r1, [r7, #36]	; 0x24
 8005076:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800507a:	b2d2      	uxtb	r2, r2
 800507c:	701a      	strb	r2, [r3, #0]
 800507e:	6a3b      	ldr	r3, [r7, #32]
 8005080:	09db      	lsrs	r3, r3, #7
 8005082:	623b      	str	r3, [r7, #32]
 8005084:	6a3b      	ldr	r3, [r7, #32]
 8005086:	2b7f      	cmp	r3, #127	; 0x7f
 8005088:	d8f0      	bhi.n	800506c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800508a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508c:	1c5a      	adds	r2, r3, #1
 800508e:	627a      	str	r2, [r7, #36]	; 0x24
 8005090:	6a3a      	ldr	r2, [r7, #32]
 8005092:	b2d2      	uxtb	r2, r2
 8005094:	701a      	strb	r2, [r3, #0]
 8005096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005098:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	61fb      	str	r3, [r7, #28]
 800509e:	2300      	movs	r3, #0
 80050a0:	61bb      	str	r3, [r7, #24]
 80050a2:	e00b      	b.n	80050bc <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	b2da      	uxtb	r2, r3
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	1c59      	adds	r1, r3, #1
 80050ac:	61f9      	str	r1, [r7, #28]
 80050ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050b2:	b2d2      	uxtb	r2, r2
 80050b4:	701a      	strb	r2, [r3, #0]
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	09db      	lsrs	r3, r3, #7
 80050ba:	61bb      	str	r3, [r7, #24]
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	2b7f      	cmp	r3, #127	; 0x7f
 80050c0:	d8f0      	bhi.n	80050a4 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	1c5a      	adds	r2, r3, #1
 80050c6:	61fa      	str	r2, [r7, #28]
 80050c8:	69ba      	ldr	r2, [r7, #24]
 80050ca:	b2d2      	uxtb	r2, r2
 80050cc:	701a      	strb	r2, [r3, #0]
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80050d2:	2215      	movs	r2, #21
 80050d4:	68f9      	ldr	r1, [r7, #12]
 80050d6:	6938      	ldr	r0, [r7, #16]
 80050d8:	f7ff fb34 	bl	8004744 <_SendPacket>
  RECORD_END();
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	f383 8811 	msr	BASEPRI, r3
}
 80050e2:	bf00      	nop
 80050e4:	3748      	adds	r7, #72	; 0x48
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	20014258 	.word	0x20014258
 80050f0:	20014228 	.word	0x20014228

080050f4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80050f4:	b580      	push	{r7, lr}
 80050f6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80050f8:	4b07      	ldr	r3, [pc, #28]	; (8005118 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80050fa:	6a1b      	ldr	r3, [r3, #32]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d008      	beq.n	8005112 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005100:	4b05      	ldr	r3, [pc, #20]	; (8005118 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005102:	6a1b      	ldr	r3, [r3, #32]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d003      	beq.n	8005112 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800510a:	4b03      	ldr	r3, [pc, #12]	; (8005118 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800510c:	6a1b      	ldr	r3, [r3, #32]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	4798      	blx	r3
  }
}
 8005112:	bf00      	nop
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	20014228 	.word	0x20014228

0800511c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800511c:	b580      	push	{r7, lr}
 800511e:	b086      	sub	sp, #24
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005124:	f3ef 8311 	mrs	r3, BASEPRI
 8005128:	f04f 0120 	mov.w	r1, #32
 800512c:	f381 8811 	msr	BASEPRI, r1
 8005130:	617b      	str	r3, [r7, #20]
 8005132:	480b      	ldr	r0, [pc, #44]	; (8005160 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005134:	f7ff fa16 	bl	8004564 <_PreparePacket>
 8005138:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800513a:	2280      	movs	r2, #128	; 0x80
 800513c:	6879      	ldr	r1, [r7, #4]
 800513e:	6938      	ldr	r0, [r7, #16]
 8005140:	f7ff f9c0 	bl	80044c4 <_EncodeStr>
 8005144:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005146:	220e      	movs	r2, #14
 8005148:	68f9      	ldr	r1, [r7, #12]
 800514a:	6938      	ldr	r0, [r7, #16]
 800514c:	f7ff fafa 	bl	8004744 <_SendPacket>
  RECORD_END();
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	f383 8811 	msr	BASEPRI, r3
}
 8005156:	bf00      	nop
 8005158:	3718      	adds	r7, #24
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	20014258 	.word	0x20014258

08005164 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005164:	b590      	push	{r4, r7, lr}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800516a:	4b15      	ldr	r3, [pc, #84]	; (80051c0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800516c:	6a1b      	ldr	r3, [r3, #32]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d01a      	beq.n	80051a8 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005172:	4b13      	ldr	r3, [pc, #76]	; (80051c0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005174:	6a1b      	ldr	r3, [r3, #32]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d015      	beq.n	80051a8 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800517c:	4b10      	ldr	r3, [pc, #64]	; (80051c0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800517e:	6a1b      	ldr	r3, [r3, #32]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4798      	blx	r3
 8005184:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005188:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800518a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800518e:	f04f 0200 	mov.w	r2, #0
 8005192:	f04f 0300 	mov.w	r3, #0
 8005196:	000a      	movs	r2, r1
 8005198:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800519a:	4613      	mov	r3, r2
 800519c:	461a      	mov	r2, r3
 800519e:	4621      	mov	r1, r4
 80051a0:	200d      	movs	r0, #13
 80051a2:	f7ff fced 	bl	8004b80 <SEGGER_SYSVIEW_RecordU32x2>
 80051a6:	e006      	b.n	80051b6 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80051a8:	4b06      	ldr	r3, [pc, #24]	; (80051c4 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4619      	mov	r1, r3
 80051ae:	200c      	movs	r0, #12
 80051b0:	f7ff fcaa 	bl	8004b08 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80051b4:	bf00      	nop
 80051b6:	bf00      	nop
 80051b8:	370c      	adds	r7, #12
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd90      	pop	{r4, r7, pc}
 80051be:	bf00      	nop
 80051c0:	20014228 	.word	0x20014228
 80051c4:	e0001004 	.word	0xe0001004

080051c8 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b086      	sub	sp, #24
 80051cc:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80051ce:	f3ef 8311 	mrs	r3, BASEPRI
 80051d2:	f04f 0120 	mov.w	r1, #32
 80051d6:	f381 8811 	msr	BASEPRI, r1
 80051da:	60fb      	str	r3, [r7, #12]
 80051dc:	4819      	ldr	r0, [pc, #100]	; (8005244 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80051de:	f7ff f9c1 	bl	8004564 <_PreparePacket>
 80051e2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80051e8:	4b17      	ldr	r3, [pc, #92]	; (8005248 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051f0:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	617b      	str	r3, [r7, #20]
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	613b      	str	r3, [r7, #16]
 80051fa:	e00b      	b.n	8005214 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	b2da      	uxtb	r2, r3
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	1c59      	adds	r1, r3, #1
 8005204:	6179      	str	r1, [r7, #20]
 8005206:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800520a:	b2d2      	uxtb	r2, r2
 800520c:	701a      	strb	r2, [r3, #0]
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	09db      	lsrs	r3, r3, #7
 8005212:	613b      	str	r3, [r7, #16]
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	2b7f      	cmp	r3, #127	; 0x7f
 8005218:	d8f0      	bhi.n	80051fc <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	1c5a      	adds	r2, r3, #1
 800521e:	617a      	str	r2, [r7, #20]
 8005220:	693a      	ldr	r2, [r7, #16]
 8005222:	b2d2      	uxtb	r2, r2
 8005224:	701a      	strb	r2, [r3, #0]
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800522a:	2202      	movs	r2, #2
 800522c:	6879      	ldr	r1, [r7, #4]
 800522e:	68b8      	ldr	r0, [r7, #8]
 8005230:	f7ff fa88 	bl	8004744 <_SendPacket>
  RECORD_END();
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f383 8811 	msr	BASEPRI, r3
}
 800523a:	bf00      	nop
 800523c:	3718      	adds	r7, #24
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	20014258 	.word	0x20014258
 8005248:	e000ed04 	.word	0xe000ed04

0800524c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005252:	f3ef 8311 	mrs	r3, BASEPRI
 8005256:	f04f 0120 	mov.w	r1, #32
 800525a:	f381 8811 	msr	BASEPRI, r1
 800525e:	607b      	str	r3, [r7, #4]
 8005260:	4807      	ldr	r0, [pc, #28]	; (8005280 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005262:	f7ff f97f 	bl	8004564 <_PreparePacket>
 8005266:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005268:	2203      	movs	r2, #3
 800526a:	6839      	ldr	r1, [r7, #0]
 800526c:	6838      	ldr	r0, [r7, #0]
 800526e:	f7ff fa69 	bl	8004744 <_SendPacket>
  RECORD_END();
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f383 8811 	msr	BASEPRI, r3
}
 8005278:	bf00      	nop
 800527a:	3708      	adds	r7, #8
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}
 8005280:	20014258 	.word	0x20014258

08005284 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005284:	b580      	push	{r7, lr}
 8005286:	b082      	sub	sp, #8
 8005288:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800528a:	f3ef 8311 	mrs	r3, BASEPRI
 800528e:	f04f 0120 	mov.w	r1, #32
 8005292:	f381 8811 	msr	BASEPRI, r1
 8005296:	607b      	str	r3, [r7, #4]
 8005298:	4807      	ldr	r0, [pc, #28]	; (80052b8 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800529a:	f7ff f963 	bl	8004564 <_PreparePacket>
 800529e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80052a0:	2212      	movs	r2, #18
 80052a2:	6839      	ldr	r1, [r7, #0]
 80052a4:	6838      	ldr	r0, [r7, #0]
 80052a6:	f7ff fa4d 	bl	8004744 <_SendPacket>
  RECORD_END();
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f383 8811 	msr	BASEPRI, r3
}
 80052b0:	bf00      	nop
 80052b2:	3708      	adds	r7, #8
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	20014258 	.word	0x20014258

080052bc <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80052bc:	b580      	push	{r7, lr}
 80052be:	b082      	sub	sp, #8
 80052c0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80052c2:	f3ef 8311 	mrs	r3, BASEPRI
 80052c6:	f04f 0120 	mov.w	r1, #32
 80052ca:	f381 8811 	msr	BASEPRI, r1
 80052ce:	607b      	str	r3, [r7, #4]
 80052d0:	4807      	ldr	r0, [pc, #28]	; (80052f0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80052d2:	f7ff f947 	bl	8004564 <_PreparePacket>
 80052d6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80052d8:	2211      	movs	r2, #17
 80052da:	6839      	ldr	r1, [r7, #0]
 80052dc:	6838      	ldr	r0, [r7, #0]
 80052de:	f7ff fa31 	bl	8004744 <_SendPacket>
  RECORD_END();
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f383 8811 	msr	BASEPRI, r3
}
 80052e8:	bf00      	nop
 80052ea:	3708      	adds	r7, #8
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	20014258 	.word	0x20014258

080052f4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b088      	sub	sp, #32
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80052fc:	f3ef 8311 	mrs	r3, BASEPRI
 8005300:	f04f 0120 	mov.w	r1, #32
 8005304:	f381 8811 	msr	BASEPRI, r1
 8005308:	617b      	str	r3, [r7, #20]
 800530a:	4819      	ldr	r0, [pc, #100]	; (8005370 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800530c:	f7ff f92a 	bl	8004564 <_PreparePacket>
 8005310:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005316:	4b17      	ldr	r3, [pc, #92]	; (8005374 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	61fb      	str	r3, [r7, #28]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	61bb      	str	r3, [r7, #24]
 8005328:	e00b      	b.n	8005342 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	b2da      	uxtb	r2, r3
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	1c59      	adds	r1, r3, #1
 8005332:	61f9      	str	r1, [r7, #28]
 8005334:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005338:	b2d2      	uxtb	r2, r2
 800533a:	701a      	strb	r2, [r3, #0]
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	09db      	lsrs	r3, r3, #7
 8005340:	61bb      	str	r3, [r7, #24]
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	2b7f      	cmp	r3, #127	; 0x7f
 8005346:	d8f0      	bhi.n	800532a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005348:	69fb      	ldr	r3, [r7, #28]
 800534a:	1c5a      	adds	r2, r3, #1
 800534c:	61fa      	str	r2, [r7, #28]
 800534e:	69ba      	ldr	r2, [r7, #24]
 8005350:	b2d2      	uxtb	r2, r2
 8005352:	701a      	strb	r2, [r3, #0]
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005358:	2208      	movs	r2, #8
 800535a:	68f9      	ldr	r1, [r7, #12]
 800535c:	6938      	ldr	r0, [r7, #16]
 800535e:	f7ff f9f1 	bl	8004744 <_SendPacket>
  RECORD_END();
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	f383 8811 	msr	BASEPRI, r3
}
 8005368:	bf00      	nop
 800536a:	3720      	adds	r7, #32
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}
 8005370:	20014258 	.word	0x20014258
 8005374:	20014228 	.word	0x20014228

08005378 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005378:	b580      	push	{r7, lr}
 800537a:	b088      	sub	sp, #32
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005380:	f3ef 8311 	mrs	r3, BASEPRI
 8005384:	f04f 0120 	mov.w	r1, #32
 8005388:	f381 8811 	msr	BASEPRI, r1
 800538c:	617b      	str	r3, [r7, #20]
 800538e:	4819      	ldr	r0, [pc, #100]	; (80053f4 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005390:	f7ff f8e8 	bl	8004564 <_PreparePacket>
 8005394:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800539a:	4b17      	ldr	r3, [pc, #92]	; (80053f8 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	61fb      	str	r3, [r7, #28]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	61bb      	str	r3, [r7, #24]
 80053ac:	e00b      	b.n	80053c6 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	b2da      	uxtb	r2, r3
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	1c59      	adds	r1, r3, #1
 80053b6:	61f9      	str	r1, [r7, #28]
 80053b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053bc:	b2d2      	uxtb	r2, r2
 80053be:	701a      	strb	r2, [r3, #0]
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	09db      	lsrs	r3, r3, #7
 80053c4:	61bb      	str	r3, [r7, #24]
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	2b7f      	cmp	r3, #127	; 0x7f
 80053ca:	d8f0      	bhi.n	80053ae <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	1c5a      	adds	r2, r3, #1
 80053d0:	61fa      	str	r2, [r7, #28]
 80053d2:	69ba      	ldr	r2, [r7, #24]
 80053d4:	b2d2      	uxtb	r2, r2
 80053d6:	701a      	strb	r2, [r3, #0]
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80053dc:	2204      	movs	r2, #4
 80053de:	68f9      	ldr	r1, [r7, #12]
 80053e0:	6938      	ldr	r0, [r7, #16]
 80053e2:	f7ff f9af 	bl	8004744 <_SendPacket>
  RECORD_END();
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	f383 8811 	msr	BASEPRI, r3
}
 80053ec:	bf00      	nop
 80053ee:	3720      	adds	r7, #32
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	20014258 	.word	0x20014258
 80053f8:	20014228 	.word	0x20014228

080053fc <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b088      	sub	sp, #32
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005404:	f3ef 8311 	mrs	r3, BASEPRI
 8005408:	f04f 0120 	mov.w	r1, #32
 800540c:	f381 8811 	msr	BASEPRI, r1
 8005410:	617b      	str	r3, [r7, #20]
 8005412:	4819      	ldr	r0, [pc, #100]	; (8005478 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005414:	f7ff f8a6 	bl	8004564 <_PreparePacket>
 8005418:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800541e:	4b17      	ldr	r3, [pc, #92]	; (800547c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	61fb      	str	r3, [r7, #28]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	61bb      	str	r3, [r7, #24]
 8005430:	e00b      	b.n	800544a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	b2da      	uxtb	r2, r3
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	1c59      	adds	r1, r3, #1
 800543a:	61f9      	str	r1, [r7, #28]
 800543c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005440:	b2d2      	uxtb	r2, r2
 8005442:	701a      	strb	r2, [r3, #0]
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	09db      	lsrs	r3, r3, #7
 8005448:	61bb      	str	r3, [r7, #24]
 800544a:	69bb      	ldr	r3, [r7, #24]
 800544c:	2b7f      	cmp	r3, #127	; 0x7f
 800544e:	d8f0      	bhi.n	8005432 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	1c5a      	adds	r2, r3, #1
 8005454:	61fa      	str	r2, [r7, #28]
 8005456:	69ba      	ldr	r2, [r7, #24]
 8005458:	b2d2      	uxtb	r2, r2
 800545a:	701a      	strb	r2, [r3, #0]
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005460:	2206      	movs	r2, #6
 8005462:	68f9      	ldr	r1, [r7, #12]
 8005464:	6938      	ldr	r0, [r7, #16]
 8005466:	f7ff f96d 	bl	8004744 <_SendPacket>
  RECORD_END();
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	f383 8811 	msr	BASEPRI, r3
}
 8005470:	bf00      	nop
 8005472:	3720      	adds	r7, #32
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}
 8005478:	20014258 	.word	0x20014258
 800547c:	20014228 	.word	0x20014228

08005480 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8005480:	b580      	push	{r7, lr}
 8005482:	b08a      	sub	sp, #40	; 0x28
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800548a:	f3ef 8311 	mrs	r3, BASEPRI
 800548e:	f04f 0120 	mov.w	r1, #32
 8005492:	f381 8811 	msr	BASEPRI, r1
 8005496:	617b      	str	r3, [r7, #20]
 8005498:	4827      	ldr	r0, [pc, #156]	; (8005538 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800549a:	f7ff f863 	bl	8004564 <_PreparePacket>
 800549e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80054a4:	4b25      	ldr	r3, [pc, #148]	; (800553c <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80054a6:	691b      	ldr	r3, [r3, #16]
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	627b      	str	r3, [r7, #36]	; 0x24
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	623b      	str	r3, [r7, #32]
 80054b6:	e00b      	b.n	80054d0 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80054b8:	6a3b      	ldr	r3, [r7, #32]
 80054ba:	b2da      	uxtb	r2, r3
 80054bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054be:	1c59      	adds	r1, r3, #1
 80054c0:	6279      	str	r1, [r7, #36]	; 0x24
 80054c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054c6:	b2d2      	uxtb	r2, r2
 80054c8:	701a      	strb	r2, [r3, #0]
 80054ca:	6a3b      	ldr	r3, [r7, #32]
 80054cc:	09db      	lsrs	r3, r3, #7
 80054ce:	623b      	str	r3, [r7, #32]
 80054d0:	6a3b      	ldr	r3, [r7, #32]
 80054d2:	2b7f      	cmp	r3, #127	; 0x7f
 80054d4:	d8f0      	bhi.n	80054b8 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80054d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d8:	1c5a      	adds	r2, r3, #1
 80054da:	627a      	str	r2, [r7, #36]	; 0x24
 80054dc:	6a3a      	ldr	r2, [r7, #32]
 80054de:	b2d2      	uxtb	r2, r2
 80054e0:	701a      	strb	r2, [r3, #0]
 80054e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	61fb      	str	r3, [r7, #28]
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	61bb      	str	r3, [r7, #24]
 80054ee:	e00b      	b.n	8005508 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	b2da      	uxtb	r2, r3
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	1c59      	adds	r1, r3, #1
 80054f8:	61f9      	str	r1, [r7, #28]
 80054fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054fe:	b2d2      	uxtb	r2, r2
 8005500:	701a      	strb	r2, [r3, #0]
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	09db      	lsrs	r3, r3, #7
 8005506:	61bb      	str	r3, [r7, #24]
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	2b7f      	cmp	r3, #127	; 0x7f
 800550c:	d8f0      	bhi.n	80054f0 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	1c5a      	adds	r2, r3, #1
 8005512:	61fa      	str	r2, [r7, #28]
 8005514:	69ba      	ldr	r2, [r7, #24]
 8005516:	b2d2      	uxtb	r2, r2
 8005518:	701a      	strb	r2, [r3, #0]
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800551e:	2207      	movs	r2, #7
 8005520:	68f9      	ldr	r1, [r7, #12]
 8005522:	6938      	ldr	r0, [r7, #16]
 8005524:	f7ff f90e 	bl	8004744 <_SendPacket>
  RECORD_END();
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	f383 8811 	msr	BASEPRI, r3
}
 800552e:	bf00      	nop
 8005530:	3728      	adds	r7, #40	; 0x28
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	20014258 	.word	0x20014258
 800553c:	20014228 	.word	0x20014228

08005540 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005540:	b580      	push	{r7, lr}
 8005542:	b08c      	sub	sp, #48	; 0x30
 8005544:	af00      	add	r7, sp, #0
 8005546:	4603      	mov	r3, r0
 8005548:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800554a:	4b3b      	ldr	r3, [pc, #236]	; (8005638 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d06d      	beq.n	800562e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8005552:	4b39      	ldr	r3, [pc, #228]	; (8005638 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005558:	2300      	movs	r3, #0
 800555a:	62bb      	str	r3, [r7, #40]	; 0x28
 800555c:	e008      	b.n	8005570 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800555e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8005564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005566:	2b00      	cmp	r3, #0
 8005568:	d007      	beq.n	800557a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800556a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556c:	3301      	adds	r3, #1
 800556e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005570:	79fb      	ldrb	r3, [r7, #7]
 8005572:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005574:	429a      	cmp	r2, r3
 8005576:	d3f2      	bcc.n	800555e <SEGGER_SYSVIEW_SendModule+0x1e>
 8005578:	e000      	b.n	800557c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800557a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800557c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800557e:	2b00      	cmp	r3, #0
 8005580:	d055      	beq.n	800562e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005582:	f3ef 8311 	mrs	r3, BASEPRI
 8005586:	f04f 0120 	mov.w	r1, #32
 800558a:	f381 8811 	msr	BASEPRI, r1
 800558e:	617b      	str	r3, [r7, #20]
 8005590:	482a      	ldr	r0, [pc, #168]	; (800563c <SEGGER_SYSVIEW_SendModule+0xfc>)
 8005592:	f7fe ffe7 	bl	8004564 <_PreparePacket>
 8005596:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	627b      	str	r3, [r7, #36]	; 0x24
 80055a0:	79fb      	ldrb	r3, [r7, #7]
 80055a2:	623b      	str	r3, [r7, #32]
 80055a4:	e00b      	b.n	80055be <SEGGER_SYSVIEW_SendModule+0x7e>
 80055a6:	6a3b      	ldr	r3, [r7, #32]
 80055a8:	b2da      	uxtb	r2, r3
 80055aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ac:	1c59      	adds	r1, r3, #1
 80055ae:	6279      	str	r1, [r7, #36]	; 0x24
 80055b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055b4:	b2d2      	uxtb	r2, r2
 80055b6:	701a      	strb	r2, [r3, #0]
 80055b8:	6a3b      	ldr	r3, [r7, #32]
 80055ba:	09db      	lsrs	r3, r3, #7
 80055bc:	623b      	str	r3, [r7, #32]
 80055be:	6a3b      	ldr	r3, [r7, #32]
 80055c0:	2b7f      	cmp	r3, #127	; 0x7f
 80055c2:	d8f0      	bhi.n	80055a6 <SEGGER_SYSVIEW_SendModule+0x66>
 80055c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c6:	1c5a      	adds	r2, r3, #1
 80055c8:	627a      	str	r2, [r7, #36]	; 0x24
 80055ca:	6a3a      	ldr	r2, [r7, #32]
 80055cc:	b2d2      	uxtb	r2, r2
 80055ce:	701a      	strb	r2, [r3, #0]
 80055d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	61fb      	str	r3, [r7, #28]
 80055d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	61bb      	str	r3, [r7, #24]
 80055de:	e00b      	b.n	80055f8 <SEGGER_SYSVIEW_SendModule+0xb8>
 80055e0:	69bb      	ldr	r3, [r7, #24]
 80055e2:	b2da      	uxtb	r2, r3
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	1c59      	adds	r1, r3, #1
 80055e8:	61f9      	str	r1, [r7, #28]
 80055ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055ee:	b2d2      	uxtb	r2, r2
 80055f0:	701a      	strb	r2, [r3, #0]
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	09db      	lsrs	r3, r3, #7
 80055f6:	61bb      	str	r3, [r7, #24]
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	2b7f      	cmp	r3, #127	; 0x7f
 80055fc:	d8f0      	bhi.n	80055e0 <SEGGER_SYSVIEW_SendModule+0xa0>
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	1c5a      	adds	r2, r3, #1
 8005602:	61fa      	str	r2, [r7, #28]
 8005604:	69ba      	ldr	r2, [r7, #24]
 8005606:	b2d2      	uxtb	r2, r2
 8005608:	701a      	strb	r2, [r3, #0]
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800560e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2280      	movs	r2, #128	; 0x80
 8005614:	4619      	mov	r1, r3
 8005616:	68f8      	ldr	r0, [r7, #12]
 8005618:	f7fe ff54 	bl	80044c4 <_EncodeStr>
 800561c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800561e:	2216      	movs	r2, #22
 8005620:	68f9      	ldr	r1, [r7, #12]
 8005622:	6938      	ldr	r0, [r7, #16]
 8005624:	f7ff f88e 	bl	8004744 <_SendPacket>
      RECORD_END();
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800562e:	bf00      	nop
 8005630:	3730      	adds	r7, #48	; 0x30
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	20014250 	.word	0x20014250
 800563c:	20014258 	.word	0x20014258

08005640 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005640:	b580      	push	{r7, lr}
 8005642:	b082      	sub	sp, #8
 8005644:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005646:	4b0c      	ldr	r3, [pc, #48]	; (8005678 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00f      	beq.n	800566e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800564e:	4b0a      	ldr	r3, [pc, #40]	; (8005678 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d002      	beq.n	8005662 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d1f2      	bne.n	8005654 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800566e:	bf00      	nop
 8005670:	3708      	adds	r7, #8
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	20014250 	.word	0x20014250

0800567c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800567c:	b580      	push	{r7, lr}
 800567e:	b086      	sub	sp, #24
 8005680:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005682:	f3ef 8311 	mrs	r3, BASEPRI
 8005686:	f04f 0120 	mov.w	r1, #32
 800568a:	f381 8811 	msr	BASEPRI, r1
 800568e:	60fb      	str	r3, [r7, #12]
 8005690:	4817      	ldr	r0, [pc, #92]	; (80056f0 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005692:	f7fe ff67 	bl	8004564 <_PreparePacket>
 8005696:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	617b      	str	r3, [r7, #20]
 80056a0:	4b14      	ldr	r3, [pc, #80]	; (80056f4 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	613b      	str	r3, [r7, #16]
 80056a6:	e00b      	b.n	80056c0 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	b2da      	uxtb	r2, r3
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	1c59      	adds	r1, r3, #1
 80056b0:	6179      	str	r1, [r7, #20]
 80056b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056b6:	b2d2      	uxtb	r2, r2
 80056b8:	701a      	strb	r2, [r3, #0]
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	09db      	lsrs	r3, r3, #7
 80056be:	613b      	str	r3, [r7, #16]
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	2b7f      	cmp	r3, #127	; 0x7f
 80056c4:	d8f0      	bhi.n	80056a8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	1c5a      	adds	r2, r3, #1
 80056ca:	617a      	str	r2, [r7, #20]
 80056cc:	693a      	ldr	r2, [r7, #16]
 80056ce:	b2d2      	uxtb	r2, r2
 80056d0:	701a      	strb	r2, [r3, #0]
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80056d6:	221b      	movs	r2, #27
 80056d8:	6879      	ldr	r1, [r7, #4]
 80056da:	68b8      	ldr	r0, [r7, #8]
 80056dc:	f7ff f832 	bl	8004744 <_SendPacket>
  RECORD_END();
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f383 8811 	msr	BASEPRI, r3
}
 80056e6:	bf00      	nop
 80056e8:	3718      	adds	r7, #24
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	20014258 	.word	0x20014258
 80056f4:	20014254 	.word	0x20014254

080056f8 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b08a      	sub	sp, #40	; 0x28
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005700:	f3ef 8311 	mrs	r3, BASEPRI
 8005704:	f04f 0120 	mov.w	r1, #32
 8005708:	f381 8811 	msr	BASEPRI, r1
 800570c:	617b      	str	r3, [r7, #20]
 800570e:	4827      	ldr	r0, [pc, #156]	; (80057ac <SEGGER_SYSVIEW_Warn+0xb4>)
 8005710:	f7fe ff28 	bl	8004564 <_PreparePacket>
 8005714:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005716:	2280      	movs	r2, #128	; 0x80
 8005718:	6879      	ldr	r1, [r7, #4]
 800571a:	6938      	ldr	r0, [r7, #16]
 800571c:	f7fe fed2 	bl	80044c4 <_EncodeStr>
 8005720:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	627b      	str	r3, [r7, #36]	; 0x24
 8005726:	2301      	movs	r3, #1
 8005728:	623b      	str	r3, [r7, #32]
 800572a:	e00b      	b.n	8005744 <SEGGER_SYSVIEW_Warn+0x4c>
 800572c:	6a3b      	ldr	r3, [r7, #32]
 800572e:	b2da      	uxtb	r2, r3
 8005730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005732:	1c59      	adds	r1, r3, #1
 8005734:	6279      	str	r1, [r7, #36]	; 0x24
 8005736:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800573a:	b2d2      	uxtb	r2, r2
 800573c:	701a      	strb	r2, [r3, #0]
 800573e:	6a3b      	ldr	r3, [r7, #32]
 8005740:	09db      	lsrs	r3, r3, #7
 8005742:	623b      	str	r3, [r7, #32]
 8005744:	6a3b      	ldr	r3, [r7, #32]
 8005746:	2b7f      	cmp	r3, #127	; 0x7f
 8005748:	d8f0      	bhi.n	800572c <SEGGER_SYSVIEW_Warn+0x34>
 800574a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574c:	1c5a      	adds	r2, r3, #1
 800574e:	627a      	str	r2, [r7, #36]	; 0x24
 8005750:	6a3a      	ldr	r2, [r7, #32]
 8005752:	b2d2      	uxtb	r2, r2
 8005754:	701a      	strb	r2, [r3, #0]
 8005756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005758:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	61fb      	str	r3, [r7, #28]
 800575e:	2300      	movs	r3, #0
 8005760:	61bb      	str	r3, [r7, #24]
 8005762:	e00b      	b.n	800577c <SEGGER_SYSVIEW_Warn+0x84>
 8005764:	69bb      	ldr	r3, [r7, #24]
 8005766:	b2da      	uxtb	r2, r3
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	1c59      	adds	r1, r3, #1
 800576c:	61f9      	str	r1, [r7, #28]
 800576e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005772:	b2d2      	uxtb	r2, r2
 8005774:	701a      	strb	r2, [r3, #0]
 8005776:	69bb      	ldr	r3, [r7, #24]
 8005778:	09db      	lsrs	r3, r3, #7
 800577a:	61bb      	str	r3, [r7, #24]
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	2b7f      	cmp	r3, #127	; 0x7f
 8005780:	d8f0      	bhi.n	8005764 <SEGGER_SYSVIEW_Warn+0x6c>
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	1c5a      	adds	r2, r3, #1
 8005786:	61fa      	str	r2, [r7, #28]
 8005788:	69ba      	ldr	r2, [r7, #24]
 800578a:	b2d2      	uxtb	r2, r2
 800578c:	701a      	strb	r2, [r3, #0]
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005792:	221a      	movs	r2, #26
 8005794:	68f9      	ldr	r1, [r7, #12]
 8005796:	6938      	ldr	r0, [r7, #16]
 8005798:	f7fe ffd4 	bl	8004744 <_SendPacket>
  RECORD_END();
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	f383 8811 	msr	BASEPRI, r3
}
 80057a2:	bf00      	nop
 80057a4:	3728      	adds	r7, #40	; 0x28
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	20014258 	.word	0x20014258

080057b0 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 80057b0:	b580      	push	{r7, lr}
 80057b2:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80057b4:	4b13      	ldr	r3, [pc, #76]	; (8005804 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80057b6:	7e1b      	ldrb	r3, [r3, #24]
 80057b8:	4619      	mov	r1, r3
 80057ba:	4a13      	ldr	r2, [pc, #76]	; (8005808 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80057bc:	460b      	mov	r3, r1
 80057be:	005b      	lsls	r3, r3, #1
 80057c0:	440b      	add	r3, r1
 80057c2:	00db      	lsls	r3, r3, #3
 80057c4:	4413      	add	r3, r2
 80057c6:	336c      	adds	r3, #108	; 0x6c
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	4b0e      	ldr	r3, [pc, #56]	; (8005804 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80057cc:	7e1b      	ldrb	r3, [r3, #24]
 80057ce:	4618      	mov	r0, r3
 80057d0:	490d      	ldr	r1, [pc, #52]	; (8005808 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80057d2:	4603      	mov	r3, r0
 80057d4:	005b      	lsls	r3, r3, #1
 80057d6:	4403      	add	r3, r0
 80057d8:	00db      	lsls	r3, r3, #3
 80057da:	440b      	add	r3, r1
 80057dc:	3370      	adds	r3, #112	; 0x70
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d00b      	beq.n	80057fc <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80057e4:	4b07      	ldr	r3, [pc, #28]	; (8005804 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80057e6:	789b      	ldrb	r3, [r3, #2]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d107      	bne.n	80057fc <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80057ec:	4b05      	ldr	r3, [pc, #20]	; (8005804 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80057ee:	2201      	movs	r2, #1
 80057f0:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80057f2:	f7fe fec3 	bl	800457c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80057f6:	4b03      	ldr	r3, [pc, #12]	; (8005804 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80057f8:	2200      	movs	r2, #0
 80057fa:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 80057fc:	4b01      	ldr	r3, [pc, #4]	; (8005804 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80057fe:	781b      	ldrb	r3, [r3, #0]
}
 8005800:	4618      	mov	r0, r3
 8005802:	bd80      	pop	{r7, pc}
 8005804:	20014228 	.word	0x20014228
 8005808:	20014388 	.word	0x20014388

0800580c <__libc_init_array>:
 800580c:	b570      	push	{r4, r5, r6, lr}
 800580e:	4d0d      	ldr	r5, [pc, #52]	; (8005844 <__libc_init_array+0x38>)
 8005810:	4c0d      	ldr	r4, [pc, #52]	; (8005848 <__libc_init_array+0x3c>)
 8005812:	1b64      	subs	r4, r4, r5
 8005814:	10a4      	asrs	r4, r4, #2
 8005816:	2600      	movs	r6, #0
 8005818:	42a6      	cmp	r6, r4
 800581a:	d109      	bne.n	8005830 <__libc_init_array+0x24>
 800581c:	4d0b      	ldr	r5, [pc, #44]	; (800584c <__libc_init_array+0x40>)
 800581e:	4c0c      	ldr	r4, [pc, #48]	; (8005850 <__libc_init_array+0x44>)
 8005820:	f000 f83c 	bl	800589c <_init>
 8005824:	1b64      	subs	r4, r4, r5
 8005826:	10a4      	asrs	r4, r4, #2
 8005828:	2600      	movs	r6, #0
 800582a:	42a6      	cmp	r6, r4
 800582c:	d105      	bne.n	800583a <__libc_init_array+0x2e>
 800582e:	bd70      	pop	{r4, r5, r6, pc}
 8005830:	f855 3b04 	ldr.w	r3, [r5], #4
 8005834:	4798      	blx	r3
 8005836:	3601      	adds	r6, #1
 8005838:	e7ee      	b.n	8005818 <__libc_init_array+0xc>
 800583a:	f855 3b04 	ldr.w	r3, [r5], #4
 800583e:	4798      	blx	r3
 8005840:	3601      	adds	r6, #1
 8005842:	e7f2      	b.n	800582a <__libc_init_array+0x1e>
 8005844:	080059f8 	.word	0x080059f8
 8005848:	080059f8 	.word	0x080059f8
 800584c:	080059f8 	.word	0x080059f8
 8005850:	080059fc 	.word	0x080059fc

08005854 <memcmp>:
 8005854:	b530      	push	{r4, r5, lr}
 8005856:	3901      	subs	r1, #1
 8005858:	2400      	movs	r4, #0
 800585a:	42a2      	cmp	r2, r4
 800585c:	d101      	bne.n	8005862 <memcmp+0xe>
 800585e:	2000      	movs	r0, #0
 8005860:	e005      	b.n	800586e <memcmp+0x1a>
 8005862:	5d03      	ldrb	r3, [r0, r4]
 8005864:	3401      	adds	r4, #1
 8005866:	5d0d      	ldrb	r5, [r1, r4]
 8005868:	42ab      	cmp	r3, r5
 800586a:	d0f6      	beq.n	800585a <memcmp+0x6>
 800586c:	1b58      	subs	r0, r3, r5
 800586e:	bd30      	pop	{r4, r5, pc}

08005870 <memcpy>:
 8005870:	440a      	add	r2, r1
 8005872:	4291      	cmp	r1, r2
 8005874:	f100 33ff 	add.w	r3, r0, #4294967295
 8005878:	d100      	bne.n	800587c <memcpy+0xc>
 800587a:	4770      	bx	lr
 800587c:	b510      	push	{r4, lr}
 800587e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005882:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005886:	4291      	cmp	r1, r2
 8005888:	d1f9      	bne.n	800587e <memcpy+0xe>
 800588a:	bd10      	pop	{r4, pc}

0800588c <memset>:
 800588c:	4402      	add	r2, r0
 800588e:	4603      	mov	r3, r0
 8005890:	4293      	cmp	r3, r2
 8005892:	d100      	bne.n	8005896 <memset+0xa>
 8005894:	4770      	bx	lr
 8005896:	f803 1b01 	strb.w	r1, [r3], #1
 800589a:	e7f9      	b.n	8005890 <memset+0x4>

0800589c <_init>:
 800589c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800589e:	bf00      	nop
 80058a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058a2:	bc08      	pop	{r3}
 80058a4:	469e      	mov	lr, r3
 80058a6:	4770      	bx	lr

080058a8 <_fini>:
 80058a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058aa:	bf00      	nop
 80058ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ae:	bc08      	pop	{r3}
 80058b0:	469e      	mov	lr, r3
 80058b2:	4770      	bx	lr
