
003LED_Block_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005644  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  080057d4  080057d4  000157d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005910  08005910  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08005910  08005910  00015910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005918  08005918  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005918  08005918  00015918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800591c  0800591c  0001591c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08005920  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          00014414  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20014430  20014430  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016ce6  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002dcc  00000000  00000000  00036d32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001130  00000000  00000000  00039b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fc8  00000000  00000000  0003ac30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023844  00000000  00000000  0003bbf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000134d6  00000000  00000000  0005f43c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d711c  00000000  00000000  00072912  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00149a2e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004758  00000000  00000000  00149a84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080057bc 	.word	0x080057bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	080057bc 	.word	0x080057bc

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20014388 	.word	0x20014388

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b96e 	b.w	8000558 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	468c      	mov	ip, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	f040 8083 	bne.w	80003aa <__udivmoddi4+0x116>
 80002a4:	428a      	cmp	r2, r1
 80002a6:	4617      	mov	r7, r2
 80002a8:	d947      	bls.n	800033a <__udivmoddi4+0xa6>
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	b142      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002b0:	f1c2 0020 	rsb	r0, r2, #32
 80002b4:	fa24 f000 	lsr.w	r0, r4, r0
 80002b8:	4091      	lsls	r1, r2
 80002ba:	4097      	lsls	r7, r2
 80002bc:	ea40 0c01 	orr.w	ip, r0, r1
 80002c0:	4094      	lsls	r4, r2
 80002c2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002c6:	0c23      	lsrs	r3, r4, #16
 80002c8:	fbbc f6f8 	udiv	r6, ip, r8
 80002cc:	fa1f fe87 	uxth.w	lr, r7
 80002d0:	fb08 c116 	mls	r1, r8, r6, ip
 80002d4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002d8:	fb06 f10e 	mul.w	r1, r6, lr
 80002dc:	4299      	cmp	r1, r3
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x60>
 80002e0:	18fb      	adds	r3, r7, r3
 80002e2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002e6:	f080 8119 	bcs.w	800051c <__udivmoddi4+0x288>
 80002ea:	4299      	cmp	r1, r3
 80002ec:	f240 8116 	bls.w	800051c <__udivmoddi4+0x288>
 80002f0:	3e02      	subs	r6, #2
 80002f2:	443b      	add	r3, r7
 80002f4:	1a5b      	subs	r3, r3, r1
 80002f6:	b2a4      	uxth	r4, r4
 80002f8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002fc:	fb08 3310 	mls	r3, r8, r0, r3
 8000300:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000304:	fb00 fe0e 	mul.w	lr, r0, lr
 8000308:	45a6      	cmp	lr, r4
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x8c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	f080 8105 	bcs.w	8000520 <__udivmoddi4+0x28c>
 8000316:	45a6      	cmp	lr, r4
 8000318:	f240 8102 	bls.w	8000520 <__udivmoddi4+0x28c>
 800031c:	3802      	subs	r0, #2
 800031e:	443c      	add	r4, r7
 8000320:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000324:	eba4 040e 	sub.w	r4, r4, lr
 8000328:	2600      	movs	r6, #0
 800032a:	b11d      	cbz	r5, 8000334 <__udivmoddi4+0xa0>
 800032c:	40d4      	lsrs	r4, r2
 800032e:	2300      	movs	r3, #0
 8000330:	e9c5 4300 	strd	r4, r3, [r5]
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	b902      	cbnz	r2, 800033e <__udivmoddi4+0xaa>
 800033c:	deff      	udf	#255	; 0xff
 800033e:	fab2 f282 	clz	r2, r2
 8000342:	2a00      	cmp	r2, #0
 8000344:	d150      	bne.n	80003e8 <__udivmoddi4+0x154>
 8000346:	1bcb      	subs	r3, r1, r7
 8000348:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800034c:	fa1f f887 	uxth.w	r8, r7
 8000350:	2601      	movs	r6, #1
 8000352:	fbb3 fcfe 	udiv	ip, r3, lr
 8000356:	0c21      	lsrs	r1, r4, #16
 8000358:	fb0e 331c 	mls	r3, lr, ip, r3
 800035c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000360:	fb08 f30c 	mul.w	r3, r8, ip
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xe4>
 8000368:	1879      	adds	r1, r7, r1
 800036a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0xe2>
 8000370:	428b      	cmp	r3, r1
 8000372:	f200 80e9 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 8000376:	4684      	mov	ip, r0
 8000378:	1ac9      	subs	r1, r1, r3
 800037a:	b2a3      	uxth	r3, r4
 800037c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000380:	fb0e 1110 	mls	r1, lr, r0, r1
 8000384:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000388:	fb08 f800 	mul.w	r8, r8, r0
 800038c:	45a0      	cmp	r8, r4
 800038e:	d907      	bls.n	80003a0 <__udivmoddi4+0x10c>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 33ff 	add.w	r3, r0, #4294967295
 8000396:	d202      	bcs.n	800039e <__udivmoddi4+0x10a>
 8000398:	45a0      	cmp	r8, r4
 800039a:	f200 80d9 	bhi.w	8000550 <__udivmoddi4+0x2bc>
 800039e:	4618      	mov	r0, r3
 80003a0:	eba4 0408 	sub.w	r4, r4, r8
 80003a4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a8:	e7bf      	b.n	800032a <__udivmoddi4+0x96>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0x12e>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80b1 	beq.w	8000516 <__udivmoddi4+0x282>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x1cc>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0x140>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80b8 	bhi.w	8000544 <__udivmoddi4+0x2b0>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0103 	sbc.w	r1, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	468c      	mov	ip, r1
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0a8      	beq.n	8000334 <__udivmoddi4+0xa0>
 80003e2:	e9c5 4c00 	strd	r4, ip, [r5]
 80003e6:	e7a5      	b.n	8000334 <__udivmoddi4+0xa0>
 80003e8:	f1c2 0320 	rsb	r3, r2, #32
 80003ec:	fa20 f603 	lsr.w	r6, r0, r3
 80003f0:	4097      	lsls	r7, r2
 80003f2:	fa01 f002 	lsl.w	r0, r1, r2
 80003f6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fa:	40d9      	lsrs	r1, r3
 80003fc:	4330      	orrs	r0, r6
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	fbb1 f6fe 	udiv	r6, r1, lr
 8000404:	fa1f f887 	uxth.w	r8, r7
 8000408:	fb0e 1116 	mls	r1, lr, r6, r1
 800040c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000410:	fb06 f108 	mul.w	r1, r6, r8
 8000414:	4299      	cmp	r1, r3
 8000416:	fa04 f402 	lsl.w	r4, r4, r2
 800041a:	d909      	bls.n	8000430 <__udivmoddi4+0x19c>
 800041c:	18fb      	adds	r3, r7, r3
 800041e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000422:	f080 808d 	bcs.w	8000540 <__udivmoddi4+0x2ac>
 8000426:	4299      	cmp	r1, r3
 8000428:	f240 808a 	bls.w	8000540 <__udivmoddi4+0x2ac>
 800042c:	3e02      	subs	r6, #2
 800042e:	443b      	add	r3, r7
 8000430:	1a5b      	subs	r3, r3, r1
 8000432:	b281      	uxth	r1, r0
 8000434:	fbb3 f0fe 	udiv	r0, r3, lr
 8000438:	fb0e 3310 	mls	r3, lr, r0, r3
 800043c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000440:	fb00 f308 	mul.w	r3, r0, r8
 8000444:	428b      	cmp	r3, r1
 8000446:	d907      	bls.n	8000458 <__udivmoddi4+0x1c4>
 8000448:	1879      	adds	r1, r7, r1
 800044a:	f100 3cff 	add.w	ip, r0, #4294967295
 800044e:	d273      	bcs.n	8000538 <__udivmoddi4+0x2a4>
 8000450:	428b      	cmp	r3, r1
 8000452:	d971      	bls.n	8000538 <__udivmoddi4+0x2a4>
 8000454:	3802      	subs	r0, #2
 8000456:	4439      	add	r1, r7
 8000458:	1acb      	subs	r3, r1, r3
 800045a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800045e:	e778      	b.n	8000352 <__udivmoddi4+0xbe>
 8000460:	f1c6 0c20 	rsb	ip, r6, #32
 8000464:	fa03 f406 	lsl.w	r4, r3, r6
 8000468:	fa22 f30c 	lsr.w	r3, r2, ip
 800046c:	431c      	orrs	r4, r3
 800046e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800047a:	fa21 f10c 	lsr.w	r1, r1, ip
 800047e:	431f      	orrs	r7, r3
 8000480:	0c3b      	lsrs	r3, r7, #16
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fa1f f884 	uxth.w	r8, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000492:	fb09 fa08 	mul.w	sl, r9, r8
 8000496:	458a      	cmp	sl, r1
 8000498:	fa02 f206 	lsl.w	r2, r2, r6
 800049c:	fa00 f306 	lsl.w	r3, r0, r6
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x220>
 80004a2:	1861      	adds	r1, r4, r1
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	d248      	bcs.n	800053c <__udivmoddi4+0x2a8>
 80004aa:	458a      	cmp	sl, r1
 80004ac:	d946      	bls.n	800053c <__udivmoddi4+0x2a8>
 80004ae:	f1a9 0902 	sub.w	r9, r9, #2
 80004b2:	4421      	add	r1, r4
 80004b4:	eba1 010a 	sub.w	r1, r1, sl
 80004b8:	b2bf      	uxth	r7, r7
 80004ba:	fbb1 f0fe 	udiv	r0, r1, lr
 80004be:	fb0e 1110 	mls	r1, lr, r0, r1
 80004c2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004c6:	fb00 f808 	mul.w	r8, r0, r8
 80004ca:	45b8      	cmp	r8, r7
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x24a>
 80004ce:	19e7      	adds	r7, r4, r7
 80004d0:	f100 31ff 	add.w	r1, r0, #4294967295
 80004d4:	d22e      	bcs.n	8000534 <__udivmoddi4+0x2a0>
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d92c      	bls.n	8000534 <__udivmoddi4+0x2a0>
 80004da:	3802      	subs	r0, #2
 80004dc:	4427      	add	r7, r4
 80004de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e2:	eba7 0708 	sub.w	r7, r7, r8
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	454f      	cmp	r7, r9
 80004ec:	46c6      	mov	lr, r8
 80004ee:	4649      	mov	r1, r9
 80004f0:	d31a      	bcc.n	8000528 <__udivmoddi4+0x294>
 80004f2:	d017      	beq.n	8000524 <__udivmoddi4+0x290>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x27a>
 80004f6:	ebb3 020e 	subs.w	r2, r3, lr
 80004fa:	eb67 0701 	sbc.w	r7, r7, r1
 80004fe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000502:	40f2      	lsrs	r2, r6
 8000504:	ea4c 0202 	orr.w	r2, ip, r2
 8000508:	40f7      	lsrs	r7, r6
 800050a:	e9c5 2700 	strd	r2, r7, [r5]
 800050e:	2600      	movs	r6, #0
 8000510:	4631      	mov	r1, r6
 8000512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000516:	462e      	mov	r6, r5
 8000518:	4628      	mov	r0, r5
 800051a:	e70b      	b.n	8000334 <__udivmoddi4+0xa0>
 800051c:	4606      	mov	r6, r0
 800051e:	e6e9      	b.n	80002f4 <__udivmoddi4+0x60>
 8000520:	4618      	mov	r0, r3
 8000522:	e6fd      	b.n	8000320 <__udivmoddi4+0x8c>
 8000524:	4543      	cmp	r3, r8
 8000526:	d2e5      	bcs.n	80004f4 <__udivmoddi4+0x260>
 8000528:	ebb8 0e02 	subs.w	lr, r8, r2
 800052c:	eb69 0104 	sbc.w	r1, r9, r4
 8000530:	3801      	subs	r0, #1
 8000532:	e7df      	b.n	80004f4 <__udivmoddi4+0x260>
 8000534:	4608      	mov	r0, r1
 8000536:	e7d2      	b.n	80004de <__udivmoddi4+0x24a>
 8000538:	4660      	mov	r0, ip
 800053a:	e78d      	b.n	8000458 <__udivmoddi4+0x1c4>
 800053c:	4681      	mov	r9, r0
 800053e:	e7b9      	b.n	80004b4 <__udivmoddi4+0x220>
 8000540:	4666      	mov	r6, ip
 8000542:	e775      	b.n	8000430 <__udivmoddi4+0x19c>
 8000544:	4630      	mov	r0, r6
 8000546:	e74a      	b.n	80003de <__udivmoddi4+0x14a>
 8000548:	f1ac 0c02 	sub.w	ip, ip, #2
 800054c:	4439      	add	r1, r7
 800054e:	e713      	b.n	8000378 <__udivmoddi4+0xe4>
 8000550:	3802      	subs	r0, #2
 8000552:	443c      	add	r4, r7
 8000554:	e724      	b.n	80003a0 <__udivmoddi4+0x10c>
 8000556:	bf00      	nop

08000558 <__aeabi_idiv0>:
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop

0800055c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b08a      	sub	sp, #40	; 0x28
 8000560:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000562:	f000 fb5f 	bl	8000c24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000566:	f000 f86f 	bl	8000648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056a:	f000 f8d7 	bl	800071c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  // Enable the CYCCNT counter
  DWT_CTRL |= (1 << 0);
 800056e:	4b2e      	ldr	r3, [pc, #184]	; (8000628 <main+0xcc>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4a2d      	ldr	r2, [pc, #180]	; (8000628 <main+0xcc>)
 8000574:	f043 0301 	orr.w	r3, r3, #1
 8000578:	6013      	str	r3, [r2, #0]

  SEGGER_UART_init(500000);
 800057a:	482c      	ldr	r0, [pc, #176]	; (800062c <main+0xd0>)
 800057c:	f003 fad8 	bl	8003b30 <SEGGER_UART_init>

  SEGGER_SYSVIEW_Conf();
 8000580:	f003 f908 	bl	8003794 <SEGGER_SYSVIEW_Conf>

  SEGGER_SYSVIEW_Start();
 8000584:	f004 fae6 	bl	8004b54 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(led_green_handler, "led_green_task", 200, NULL, 2, &task1_handle);
 8000588:	f107 030c 	add.w	r3, r7, #12
 800058c:	9301      	str	r3, [sp, #4]
 800058e:	2302      	movs	r3, #2
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	2300      	movs	r3, #0
 8000594:	22c8      	movs	r2, #200	; 0xc8
 8000596:	4926      	ldr	r1, [pc, #152]	; (8000630 <main+0xd4>)
 8000598:	4826      	ldr	r0, [pc, #152]	; (8000634 <main+0xd8>)
 800059a:	f001 fe07 	bl	80021ac <xTaskCreate>
 800059e:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 80005a0:	69fb      	ldr	r3, [r7, #28]
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	d00a      	beq.n	80005bc <main+0x60>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005aa:	f383 8811 	msr	BASEPRI, r3
 80005ae:	f3bf 8f6f 	isb	sy
 80005b2:	f3bf 8f4f 	dsb	sy
 80005b6:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005b8:	bf00      	nop
 80005ba:	e7fe      	b.n	80005ba <main+0x5e>

  status = xTaskCreate(led_orange_handler, "led_orange_task", 200, NULL, 2, &task2_handle);
 80005bc:	f107 0308 	add.w	r3, r7, #8
 80005c0:	9301      	str	r3, [sp, #4]
 80005c2:	2302      	movs	r3, #2
 80005c4:	9300      	str	r3, [sp, #0]
 80005c6:	2300      	movs	r3, #0
 80005c8:	22c8      	movs	r2, #200	; 0xc8
 80005ca:	491b      	ldr	r1, [pc, #108]	; (8000638 <main+0xdc>)
 80005cc:	481b      	ldr	r0, [pc, #108]	; (800063c <main+0xe0>)
 80005ce:	f001 fded 	bl	80021ac <xTaskCreate>
 80005d2:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 80005d4:	69fb      	ldr	r3, [r7, #28]
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d00a      	beq.n	80005f0 <main+0x94>
        __asm volatile
 80005da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005de:	f383 8811 	msr	BASEPRI, r3
 80005e2:	f3bf 8f6f 	isb	sy
 80005e6:	f3bf 8f4f 	dsb	sy
 80005ea:	617b      	str	r3, [r7, #20]
    }
 80005ec:	bf00      	nop
 80005ee:	e7fe      	b.n	80005ee <main+0x92>

  status = xTaskCreate(led_red_handler, "led_red_task", 200, NULL, 2, &task3_handle);
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	9301      	str	r3, [sp, #4]
 80005f4:	2302      	movs	r3, #2
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	2300      	movs	r3, #0
 80005fa:	22c8      	movs	r2, #200	; 0xc8
 80005fc:	4910      	ldr	r1, [pc, #64]	; (8000640 <main+0xe4>)
 80005fe:	4811      	ldr	r0, [pc, #68]	; (8000644 <main+0xe8>)
 8000600:	f001 fdd4 	bl	80021ac <xTaskCreate>
 8000604:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 8000606:	69fb      	ldr	r3, [r7, #28]
 8000608:	2b01      	cmp	r3, #1
 800060a:	d00a      	beq.n	8000622 <main+0xc6>
        __asm volatile
 800060c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000610:	f383 8811 	msr	BASEPRI, r3
 8000614:	f3bf 8f6f 	isb	sy
 8000618:	f3bf 8f4f 	dsb	sy
 800061c:	613b      	str	r3, [r7, #16]
    }
 800061e:	bf00      	nop
 8000620:	e7fe      	b.n	8000620 <main+0xc4>

  // start the freeRTOS schedular
  vTaskStartScheduler();
 8000622:	f001 ff95 	bl	8002550 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000626:	e7fe      	b.n	8000626 <main+0xca>
 8000628:	e0001000 	.word	0xe0001000
 800062c:	0007a120 	.word	0x0007a120
 8000630:	080057d4 	.word	0x080057d4
 8000634:	080009d9 	.word	0x080009d9
 8000638:	080057e4 	.word	0x080057e4
 800063c:	080009f9 	.word	0x080009f9
 8000640:	080057f4 	.word	0x080057f4
 8000644:	08000a19 	.word	0x08000a19

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b094      	sub	sp, #80	; 0x50
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 0320 	add.w	r3, r7, #32
 8000652:	2230      	movs	r2, #48	; 0x30
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f005 f8a8 	bl	80057ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	f107 030c 	add.w	r3, r7, #12
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800066c:	2300      	movs	r3, #0
 800066e:	60bb      	str	r3, [r7, #8]
 8000670:	4b28      	ldr	r3, [pc, #160]	; (8000714 <SystemClock_Config+0xcc>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000674:	4a27      	ldr	r2, [pc, #156]	; (8000714 <SystemClock_Config+0xcc>)
 8000676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800067a:	6413      	str	r3, [r2, #64]	; 0x40
 800067c:	4b25      	ldr	r3, [pc, #148]	; (8000714 <SystemClock_Config+0xcc>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000684:	60bb      	str	r3, [r7, #8]
 8000686:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000688:	2300      	movs	r3, #0
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	4b22      	ldr	r3, [pc, #136]	; (8000718 <SystemClock_Config+0xd0>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a21      	ldr	r2, [pc, #132]	; (8000718 <SystemClock_Config+0xd0>)
 8000692:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000696:	6013      	str	r3, [r2, #0]
 8000698:	4b1f      	ldr	r3, [pc, #124]	; (8000718 <SystemClock_Config+0xd0>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a4:	2302      	movs	r3, #2
 80006a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a8:	2301      	movs	r3, #1
 80006aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ac:	2310      	movs	r3, #16
 80006ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b0:	2302      	movs	r3, #2
 80006b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b4:	2300      	movs	r3, #0
 80006b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006b8:	2308      	movs	r3, #8
 80006ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80006bc:	2332      	movs	r3, #50	; 0x32
 80006be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006c0:	2304      	movs	r3, #4
 80006c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006c4:	2307      	movs	r3, #7
 80006c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c8:	f107 0320 	add.w	r3, r7, #32
 80006cc:	4618      	mov	r0, r3
 80006ce:	f000 fd9d 	bl	800120c <HAL_RCC_OscConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006d8:	f000 f9c0 	bl	8000a5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006dc:	230f      	movs	r3, #15
 80006de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e0:	2302      	movs	r3, #2
 80006e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006f4:	f107 030c 	add.w	r3, r7, #12
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f000 fffe 	bl	80016fc <HAL_RCC_ClockConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000706:	f000 f9a9 	bl	8000a5c <Error_Handler>
  }
}
 800070a:	bf00      	nop
 800070c:	3750      	adds	r7, #80	; 0x50
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40023800 	.word	0x40023800
 8000718:	40007000 	.word	0x40007000

0800071c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08c      	sub	sp, #48	; 0x30
 8000720:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000722:	f107 031c 	add.w	r3, r7, #28
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	61bb      	str	r3, [r7, #24]
 8000736:	4ba2      	ldr	r3, [pc, #648]	; (80009c0 <MX_GPIO_Init+0x2a4>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4aa1      	ldr	r2, [pc, #644]	; (80009c0 <MX_GPIO_Init+0x2a4>)
 800073c:	f043 0310 	orr.w	r3, r3, #16
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b9f      	ldr	r3, [pc, #636]	; (80009c0 <MX_GPIO_Init+0x2a4>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0310 	and.w	r3, r3, #16
 800074a:	61bb      	str	r3, [r7, #24]
 800074c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	617b      	str	r3, [r7, #20]
 8000752:	4b9b      	ldr	r3, [pc, #620]	; (80009c0 <MX_GPIO_Init+0x2a4>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a9a      	ldr	r2, [pc, #616]	; (80009c0 <MX_GPIO_Init+0x2a4>)
 8000758:	f043 0304 	orr.w	r3, r3, #4
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b98      	ldr	r3, [pc, #608]	; (80009c0 <MX_GPIO_Init+0x2a4>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0304 	and.w	r3, r3, #4
 8000766:	617b      	str	r3, [r7, #20]
 8000768:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]
 800076e:	4b94      	ldr	r3, [pc, #592]	; (80009c0 <MX_GPIO_Init+0x2a4>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a93      	ldr	r2, [pc, #588]	; (80009c0 <MX_GPIO_Init+0x2a4>)
 8000774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b91      	ldr	r3, [pc, #580]	; (80009c0 <MX_GPIO_Init+0x2a4>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000782:	613b      	str	r3, [r7, #16]
 8000784:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	60fb      	str	r3, [r7, #12]
 800078a:	4b8d      	ldr	r3, [pc, #564]	; (80009c0 <MX_GPIO_Init+0x2a4>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a8c      	ldr	r2, [pc, #560]	; (80009c0 <MX_GPIO_Init+0x2a4>)
 8000790:	f043 0301 	orr.w	r3, r3, #1
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b8a      	ldr	r3, [pc, #552]	; (80009c0 <MX_GPIO_Init+0x2a4>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	60bb      	str	r3, [r7, #8]
 80007a6:	4b86      	ldr	r3, [pc, #536]	; (80009c0 <MX_GPIO_Init+0x2a4>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a85      	ldr	r2, [pc, #532]	; (80009c0 <MX_GPIO_Init+0x2a4>)
 80007ac:	f043 0302 	orr.w	r3, r3, #2
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b83      	ldr	r3, [pc, #524]	; (80009c0 <MX_GPIO_Init+0x2a4>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0302 	and.w	r3, r3, #2
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	4b7f      	ldr	r3, [pc, #508]	; (80009c0 <MX_GPIO_Init+0x2a4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a7e      	ldr	r2, [pc, #504]	; (80009c0 <MX_GPIO_Init+0x2a4>)
 80007c8:	f043 0308 	orr.w	r3, r3, #8
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b7c      	ldr	r3, [pc, #496]	; (80009c0 <MX_GPIO_Init+0x2a4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0308 	and.w	r3, r3, #8
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	2108      	movs	r1, #8
 80007de:	4879      	ldr	r0, [pc, #484]	; (80009c4 <MX_GPIO_Init+0x2a8>)
 80007e0:	f000 fce0 	bl	80011a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007e4:	2201      	movs	r2, #1
 80007e6:	2101      	movs	r1, #1
 80007e8:	4877      	ldr	r0, [pc, #476]	; (80009c8 <MX_GPIO_Init+0x2ac>)
 80007ea:	f000 fcdb 	bl	80011a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007ee:	2200      	movs	r2, #0
 80007f0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007f4:	4875      	ldr	r0, [pc, #468]	; (80009cc <MX_GPIO_Init+0x2b0>)
 80007f6:	f000 fcd5 	bl	80011a4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007fa:	2308      	movs	r3, #8
 80007fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fe:	2301      	movs	r3, #1
 8000800:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000806:	2300      	movs	r3, #0
 8000808:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800080a:	f107 031c 	add.w	r3, r7, #28
 800080e:	4619      	mov	r1, r3
 8000810:	486c      	ldr	r0, [pc, #432]	; (80009c4 <MX_GPIO_Init+0x2a8>)
 8000812:	f000 fb2b 	bl	8000e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000816:	2301      	movs	r3, #1
 8000818:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081a:	2301      	movs	r3, #1
 800081c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000822:	2300      	movs	r3, #0
 8000824:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000826:	f107 031c 	add.w	r3, r7, #28
 800082a:	4619      	mov	r1, r3
 800082c:	4866      	ldr	r0, [pc, #408]	; (80009c8 <MX_GPIO_Init+0x2ac>)
 800082e:	f000 fb1d 	bl	8000e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000832:	2308      	movs	r3, #8
 8000834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000836:	2302      	movs	r3, #2
 8000838:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083e:	2300      	movs	r3, #0
 8000840:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000842:	2305      	movs	r3, #5
 8000844:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000846:	f107 031c 	add.w	r3, r7, #28
 800084a:	4619      	mov	r1, r3
 800084c:	485e      	ldr	r0, [pc, #376]	; (80009c8 <MX_GPIO_Init+0x2ac>)
 800084e:	f000 fb0d 	bl	8000e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000852:	2301      	movs	r3, #1
 8000854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000856:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800085a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000860:	f107 031c 	add.w	r3, r7, #28
 8000864:	4619      	mov	r1, r3
 8000866:	485a      	ldr	r0, [pc, #360]	; (80009d0 <MX_GPIO_Init+0x2b4>)
 8000868:	f000 fb00 	bl	8000e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800086c:	2310      	movs	r3, #16
 800086e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000870:	2302      	movs	r3, #2
 8000872:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000878:	2300      	movs	r3, #0
 800087a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800087c:	2306      	movs	r3, #6
 800087e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000880:	f107 031c 	add.w	r3, r7, #28
 8000884:	4619      	mov	r1, r3
 8000886:	4852      	ldr	r0, [pc, #328]	; (80009d0 <MX_GPIO_Init+0x2b4>)
 8000888:	f000 faf0 	bl	8000e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800088c:	23e0      	movs	r3, #224	; 0xe0
 800088e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000890:	2302      	movs	r3, #2
 8000892:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000898:	2300      	movs	r3, #0
 800089a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800089c:	2305      	movs	r3, #5
 800089e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a0:	f107 031c 	add.w	r3, r7, #28
 80008a4:	4619      	mov	r1, r3
 80008a6:	484a      	ldr	r0, [pc, #296]	; (80009d0 <MX_GPIO_Init+0x2b4>)
 80008a8:	f000 fae0 	bl	8000e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008ac:	2304      	movs	r3, #4
 80008ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b0:	2300      	movs	r3, #0
 80008b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008b8:	f107 031c 	add.w	r3, r7, #28
 80008bc:	4619      	mov	r1, r3
 80008be:	4845      	ldr	r0, [pc, #276]	; (80009d4 <MX_GPIO_Init+0x2b8>)
 80008c0:	f000 fad4 	bl	8000e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ca:	2302      	movs	r3, #2
 80008cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008d6:	2305      	movs	r3, #5
 80008d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	4619      	mov	r1, r3
 80008e0:	483c      	ldr	r0, [pc, #240]	; (80009d4 <MX_GPIO_Init+0x2b8>)
 80008e2:	f000 fac3 	bl	8000e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008e6:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008ea:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ec:	2301      	movs	r3, #1
 80008ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2300      	movs	r3, #0
 80008f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008f8:	f107 031c 	add.w	r3, r7, #28
 80008fc:	4619      	mov	r1, r3
 80008fe:	4833      	ldr	r0, [pc, #204]	; (80009cc <MX_GPIO_Init+0x2b0>)
 8000900:	f000 fab4 	bl	8000e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000904:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090a:	2302      	movs	r3, #2
 800090c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000912:	2300      	movs	r3, #0
 8000914:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000916:	2306      	movs	r3, #6
 8000918:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	4619      	mov	r1, r3
 8000920:	4829      	ldr	r0, [pc, #164]	; (80009c8 <MX_GPIO_Init+0x2ac>)
 8000922:	f000 faa3 	bl	8000e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000926:	f44f 7300 	mov.w	r3, #512	; 0x200
 800092a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800092c:	2300      	movs	r3, #0
 800092e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000934:	f107 031c 	add.w	r3, r7, #28
 8000938:	4619      	mov	r1, r3
 800093a:	4825      	ldr	r0, [pc, #148]	; (80009d0 <MX_GPIO_Init+0x2b4>)
 800093c:	f000 fa96 	bl	8000e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000940:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000946:	2302      	movs	r3, #2
 8000948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2300      	movs	r3, #0
 8000950:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000952:	230a      	movs	r3, #10
 8000954:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000956:	f107 031c 	add.w	r3, r7, #28
 800095a:	4619      	mov	r1, r3
 800095c:	481c      	ldr	r0, [pc, #112]	; (80009d0 <MX_GPIO_Init+0x2b4>)
 800095e:	f000 fa85 	bl	8000e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000962:	2320      	movs	r3, #32
 8000964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000966:	2300      	movs	r3, #0
 8000968:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	4619      	mov	r1, r3
 8000974:	4815      	ldr	r0, [pc, #84]	; (80009cc <MX_GPIO_Init+0x2b0>)
 8000976:	f000 fa79 	bl	8000e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800097a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800097e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000980:	2312      	movs	r3, #18
 8000982:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000988:	2300      	movs	r3, #0
 800098a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800098c:	2304      	movs	r3, #4
 800098e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000990:	f107 031c 	add.w	r3, r7, #28
 8000994:	4619      	mov	r1, r3
 8000996:	480f      	ldr	r0, [pc, #60]	; (80009d4 <MX_GPIO_Init+0x2b8>)
 8000998:	f000 fa68 	bl	8000e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800099c:	2302      	movs	r3, #2
 800099e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009a0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	4804      	ldr	r0, [pc, #16]	; (80009c4 <MX_GPIO_Init+0x2a8>)
 80009b2:	f000 fa5b 	bl	8000e6c <HAL_GPIO_Init>

}
 80009b6:	bf00      	nop
 80009b8:	3730      	adds	r7, #48	; 0x30
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40023800 	.word	0x40023800
 80009c4:	40021000 	.word	0x40021000
 80009c8:	40020800 	.word	0x40020800
 80009cc:	40020c00 	.word	0x40020c00
 80009d0:	40020000 	.word	0x40020000
 80009d4:	40020400 	.word	0x40020400

080009d8 <led_green_handler>:

/* USER CODE BEGIN 4 */
static void led_green_handler(void *parameters)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
	while(1)
	{
		//SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 80009e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009e4:	4803      	ldr	r0, [pc, #12]	; (80009f4 <led_green_handler+0x1c>)
 80009e6:	f000 fbf6 	bl	80011d6 <HAL_GPIO_TogglePin>
		vTaskDelay(pdMS_TO_TICKS(1000));
 80009ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009ee:	f001 fd77 	bl	80024e0 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 80009f2:	e7f5      	b.n	80009e0 <led_green_handler+0x8>
 80009f4:	40020c00 	.word	0x40020c00

080009f8 <led_orange_handler>:
	}
}

static void led_orange_handler(void *parameters)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
	while(1)
	{
		//SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
		HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN);
 8000a00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a04:	4803      	ldr	r0, [pc, #12]	; (8000a14 <led_orange_handler+0x1c>)
 8000a06:	f000 fbe6 	bl	80011d6 <HAL_GPIO_TogglePin>
		vTaskDelay(pdMS_TO_TICKS(800));
 8000a0a:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000a0e:	f001 fd67 	bl	80024e0 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN);
 8000a12:	e7f5      	b.n	8000a00 <led_orange_handler+0x8>
 8000a14:	40020c00 	.word	0x40020c00

08000a18 <led_red_handler>:
	}
}

static void led_red_handler(void *parameters)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		//SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000a20:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a24:	4803      	ldr	r0, [pc, #12]	; (8000a34 <led_red_handler+0x1c>)
 8000a26:	f000 fbd6 	bl	80011d6 <HAL_GPIO_TogglePin>
		vTaskDelay(pdMS_TO_TICKS(400));
 8000a2a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000a2e:	f001 fd57 	bl	80024e0 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000a32:	e7f5      	b.n	8000a20 <led_red_handler+0x8>
 8000a34:	40020c00 	.word	0x40020c00

08000a38 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a04      	ldr	r2, [pc, #16]	; (8000a58 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d101      	bne.n	8000a4e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a4a:	f000 f90d 	bl	8000c68 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40001000 	.word	0x40001000

08000a5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a60:	b672      	cpsid	i
}
 8000a62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <Error_Handler+0x8>
	...

08000a68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	607b      	str	r3, [r7, #4]
 8000a72:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <HAL_MspInit+0x4c>)
 8000a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a76:	4a0f      	ldr	r2, [pc, #60]	; (8000ab4 <HAL_MspInit+0x4c>)
 8000a78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a7e:	4b0d      	ldr	r3, [pc, #52]	; (8000ab4 <HAL_MspInit+0x4c>)
 8000a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	603b      	str	r3, [r7, #0]
 8000a8e:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <HAL_MspInit+0x4c>)
 8000a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a92:	4a08      	ldr	r2, [pc, #32]	; (8000ab4 <HAL_MspInit+0x4c>)
 8000a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a98:	6413      	str	r3, [r2, #64]	; 0x40
 8000a9a:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <HAL_MspInit+0x4c>)
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa2:	603b      	str	r3, [r7, #0]
 8000aa4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 8000aa6:	f002 fabf 	bl	8003028 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40023800 	.word	0x40023800

08000ab8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08c      	sub	sp, #48	; 0x30
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	6879      	ldr	r1, [r7, #4]
 8000acc:	2036      	movs	r0, #54	; 0x36
 8000ace:	f000 f9a3 	bl	8000e18 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ad2:	2036      	movs	r0, #54	; 0x36
 8000ad4:	f000 f9bc 	bl	8000e50 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	4b1f      	ldr	r3, [pc, #124]	; (8000b5c <HAL_InitTick+0xa4>)
 8000ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae0:	4a1e      	ldr	r2, [pc, #120]	; (8000b5c <HAL_InitTick+0xa4>)
 8000ae2:	f043 0310 	orr.w	r3, r3, #16
 8000ae6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae8:	4b1c      	ldr	r3, [pc, #112]	; (8000b5c <HAL_InitTick+0xa4>)
 8000aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aec:	f003 0310 	and.w	r3, r3, #16
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000af4:	f107 0210 	add.w	r2, r7, #16
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	4611      	mov	r1, r2
 8000afe:	4618      	mov	r0, r3
 8000b00:	f000 ffe4 	bl	8001acc <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000b04:	f000 ffce 	bl	8001aa4 <HAL_RCC_GetPCLK1Freq>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b10:	4a13      	ldr	r2, [pc, #76]	; (8000b60 <HAL_InitTick+0xa8>)
 8000b12:	fba2 2303 	umull	r2, r3, r2, r3
 8000b16:	0c9b      	lsrs	r3, r3, #18
 8000b18:	3b01      	subs	r3, #1
 8000b1a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b1c:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <HAL_InitTick+0xac>)
 8000b1e:	4a12      	ldr	r2, [pc, #72]	; (8000b68 <HAL_InitTick+0xb0>)
 8000b20:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b22:	4b10      	ldr	r3, [pc, #64]	; (8000b64 <HAL_InitTick+0xac>)
 8000b24:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b28:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b2a:	4a0e      	ldr	r2, [pc, #56]	; (8000b64 <HAL_InitTick+0xac>)
 8000b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b2e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b30:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <HAL_InitTick+0xac>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b36:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <HAL_InitTick+0xac>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000b3c:	4809      	ldr	r0, [pc, #36]	; (8000b64 <HAL_InitTick+0xac>)
 8000b3e:	f000 fff7 	bl	8001b30 <HAL_TIM_Base_Init>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d104      	bne.n	8000b52 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000b48:	4806      	ldr	r0, [pc, #24]	; (8000b64 <HAL_InitTick+0xac>)
 8000b4a:	f001 f84b 	bl	8001be4 <HAL_TIM_Base_Start_IT>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	e000      	b.n	8000b54 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b52:	2301      	movs	r3, #1
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3730      	adds	r7, #48	; 0x30
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	431bde83 	.word	0x431bde83
 8000b64:	2001433c 	.word	0x2001433c
 8000b68:	40001000 	.word	0x40001000

08000b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <NMI_Handler+0x4>

08000b72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b76:	e7fe      	b.n	8000b76 <HardFault_Handler+0x4>

08000b78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <MemManage_Handler+0x4>

08000b7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b82:	e7fe      	b.n	8000b82 <BusFault_Handler+0x4>

08000b84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <UsageFault_Handler+0x4>

08000b8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b9c:	4802      	ldr	r0, [pc, #8]	; (8000ba8 <TIM6_DAC_IRQHandler+0x10>)
 8000b9e:	f001 f891 	bl	8001cc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	2001433c 	.word	0x2001433c

08000bac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <SystemInit+0x20>)
 8000bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bb6:	4a05      	ldr	r2, [pc, #20]	; (8000bcc <SystemInit+0x20>)
 8000bb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000bd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bd4:	480d      	ldr	r0, [pc, #52]	; (8000c0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bd6:	490e      	ldr	r1, [pc, #56]	; (8000c10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bd8:	4a0e      	ldr	r2, [pc, #56]	; (8000c14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bdc:	e002      	b.n	8000be4 <LoopCopyDataInit>

08000bde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000be2:	3304      	adds	r3, #4

08000be4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000be6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be8:	d3f9      	bcc.n	8000bde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bea:	4a0b      	ldr	r2, [pc, #44]	; (8000c18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bec:	4c0b      	ldr	r4, [pc, #44]	; (8000c1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf0:	e001      	b.n	8000bf6 <LoopFillZerobss>

08000bf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf4:	3204      	adds	r2, #4

08000bf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf8:	d3fb      	bcc.n	8000bf2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000bfa:	f7ff ffd7 	bl	8000bac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bfe:	f004 fd95 	bl	800572c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c02:	f7ff fcab 	bl	800055c <main>
  bx  lr    
 8000c06:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c10:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000c14:	08005920 	.word	0x08005920
  ldr r2, =_sbss
 8000c18:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000c1c:	20014430 	.word	0x20014430

08000c20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c20:	e7fe      	b.n	8000c20 <ADC_IRQHandler>
	...

08000c24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c28:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <HAL_Init+0x40>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a0d      	ldr	r2, [pc, #52]	; (8000c64 <HAL_Init+0x40>)
 8000c2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c34:	4b0b      	ldr	r3, [pc, #44]	; (8000c64 <HAL_Init+0x40>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a0a      	ldr	r2, [pc, #40]	; (8000c64 <HAL_Init+0x40>)
 8000c3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c40:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <HAL_Init+0x40>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a07      	ldr	r2, [pc, #28]	; (8000c64 <HAL_Init+0x40>)
 8000c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c4c:	2003      	movs	r0, #3
 8000c4e:	f000 f8d8 	bl	8000e02 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c52:	200f      	movs	r0, #15
 8000c54:	f7ff ff30 	bl	8000ab8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c58:	f7ff ff06 	bl	8000a68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40023c00 	.word	0x40023c00

08000c68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <HAL_IncTick+0x20>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	461a      	mov	r2, r3
 8000c72:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <HAL_IncTick+0x24>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4413      	add	r3, r2
 8000c78:	4a04      	ldr	r2, [pc, #16]	; (8000c8c <HAL_IncTick+0x24>)
 8000c7a:	6013      	str	r3, [r2, #0]
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	20000008 	.word	0x20000008
 8000c8c:	20014384 	.word	0x20014384

08000c90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  return uwTick;
 8000c94:	4b03      	ldr	r3, [pc, #12]	; (8000ca4 <HAL_GetTick+0x14>)
 8000c96:	681b      	ldr	r3, [r3, #0]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	20014384 	.word	0x20014384

08000ca8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f003 0307 	and.w	r3, r3, #7
 8000cb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cb8:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__NVIC_SetPriorityGrouping+0x44>)
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cbe:	68ba      	ldr	r2, [r7, #8]
 8000cc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cda:	4a04      	ldr	r2, [pc, #16]	; (8000cec <__NVIC_SetPriorityGrouping+0x44>)
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	60d3      	str	r3, [r2, #12]
}
 8000ce0:	bf00      	nop
 8000ce2:	3714      	adds	r7, #20
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cf4:	4b04      	ldr	r3, [pc, #16]	; (8000d08 <__NVIC_GetPriorityGrouping+0x18>)
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	0a1b      	lsrs	r3, r3, #8
 8000cfa:	f003 0307 	and.w	r3, r3, #7
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	db0b      	blt.n	8000d36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	f003 021f 	and.w	r2, r3, #31
 8000d24:	4907      	ldr	r1, [pc, #28]	; (8000d44 <__NVIC_EnableIRQ+0x38>)
 8000d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2a:	095b      	lsrs	r3, r3, #5
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d36:	bf00      	nop
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	e000e100 	.word	0xe000e100

08000d48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	6039      	str	r1, [r7, #0]
 8000d52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	db0a      	blt.n	8000d72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	b2da      	uxtb	r2, r3
 8000d60:	490c      	ldr	r1, [pc, #48]	; (8000d94 <__NVIC_SetPriority+0x4c>)
 8000d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d66:	0112      	lsls	r2, r2, #4
 8000d68:	b2d2      	uxtb	r2, r2
 8000d6a:	440b      	add	r3, r1
 8000d6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d70:	e00a      	b.n	8000d88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	b2da      	uxtb	r2, r3
 8000d76:	4908      	ldr	r1, [pc, #32]	; (8000d98 <__NVIC_SetPriority+0x50>)
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	f003 030f 	and.w	r3, r3, #15
 8000d7e:	3b04      	subs	r3, #4
 8000d80:	0112      	lsls	r2, r2, #4
 8000d82:	b2d2      	uxtb	r2, r2
 8000d84:	440b      	add	r3, r1
 8000d86:	761a      	strb	r2, [r3, #24]
}
 8000d88:	bf00      	nop
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	e000e100 	.word	0xe000e100
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b089      	sub	sp, #36	; 0x24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	60f8      	str	r0, [r7, #12]
 8000da4:	60b9      	str	r1, [r7, #8]
 8000da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	f003 0307 	and.w	r3, r3, #7
 8000dae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	f1c3 0307 	rsb	r3, r3, #7
 8000db6:	2b04      	cmp	r3, #4
 8000db8:	bf28      	it	cs
 8000dba:	2304      	movcs	r3, #4
 8000dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	3304      	adds	r3, #4
 8000dc2:	2b06      	cmp	r3, #6
 8000dc4:	d902      	bls.n	8000dcc <NVIC_EncodePriority+0x30>
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	3b03      	subs	r3, #3
 8000dca:	e000      	b.n	8000dce <NVIC_EncodePriority+0x32>
 8000dcc:	2300      	movs	r3, #0
 8000dce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd4:	69bb      	ldr	r3, [r7, #24]
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	43da      	mvns	r2, r3
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	401a      	ands	r2, r3
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000de4:	f04f 31ff 	mov.w	r1, #4294967295
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	fa01 f303 	lsl.w	r3, r1, r3
 8000dee:	43d9      	mvns	r1, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df4:	4313      	orrs	r3, r2
         );
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3724      	adds	r7, #36	; 0x24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b082      	sub	sp, #8
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f7ff ff4c 	bl	8000ca8 <__NVIC_SetPriorityGrouping>
}
 8000e10:	bf00      	nop
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
 8000e24:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e2a:	f7ff ff61 	bl	8000cf0 <__NVIC_GetPriorityGrouping>
 8000e2e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e30:	687a      	ldr	r2, [r7, #4]
 8000e32:	68b9      	ldr	r1, [r7, #8]
 8000e34:	6978      	ldr	r0, [r7, #20]
 8000e36:	f7ff ffb1 	bl	8000d9c <NVIC_EncodePriority>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e40:	4611      	mov	r1, r2
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff ff80 	bl	8000d48 <__NVIC_SetPriority>
}
 8000e48:	bf00      	nop
 8000e4a:	3718      	adds	r7, #24
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff ff54 	bl	8000d0c <__NVIC_EnableIRQ>
}
 8000e64:	bf00      	nop
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b089      	sub	sp, #36	; 0x24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e76:	2300      	movs	r3, #0
 8000e78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e82:	2300      	movs	r3, #0
 8000e84:	61fb      	str	r3, [r7, #28]
 8000e86:	e16b      	b.n	8001160 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e88:	2201      	movs	r2, #1
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	697a      	ldr	r2, [r7, #20]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	f040 815a 	bne.w	800115a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f003 0303 	and.w	r3, r3, #3
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d005      	beq.n	8000ebe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d130      	bne.n	8000f20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	2203      	movs	r2, #3
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	68da      	ldr	r2, [r3, #12]
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	43db      	mvns	r3, r3
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	4013      	ands	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	091b      	lsrs	r3, r3, #4
 8000f0a:	f003 0201 	and.w	r2, r3, #1
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f003 0303 	and.w	r3, r3, #3
 8000f28:	2b03      	cmp	r3, #3
 8000f2a:	d017      	beq.n	8000f5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	2203      	movs	r2, #3
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	4013      	ands	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	689a      	ldr	r2, [r3, #8]
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f003 0303 	and.w	r3, r3, #3
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d123      	bne.n	8000fb0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	08da      	lsrs	r2, r3, #3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	3208      	adds	r2, #8
 8000f70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	f003 0307 	and.w	r3, r3, #7
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	220f      	movs	r2, #15
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	43db      	mvns	r3, r3
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	691a      	ldr	r2, [r3, #16]
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	f003 0307 	and.w	r3, r3, #7
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	08da      	lsrs	r2, r3, #3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	3208      	adds	r2, #8
 8000faa:	69b9      	ldr	r1, [r7, #24]
 8000fac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	2203      	movs	r2, #3
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f003 0203 	and.w	r2, r3, #3
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	f000 80b4 	beq.w	800115a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	4b60      	ldr	r3, [pc, #384]	; (8001178 <HAL_GPIO_Init+0x30c>)
 8000ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffa:	4a5f      	ldr	r2, [pc, #380]	; (8001178 <HAL_GPIO_Init+0x30c>)
 8000ffc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001000:	6453      	str	r3, [r2, #68]	; 0x44
 8001002:	4b5d      	ldr	r3, [pc, #372]	; (8001178 <HAL_GPIO_Init+0x30c>)
 8001004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001006:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800100e:	4a5b      	ldr	r2, [pc, #364]	; (800117c <HAL_GPIO_Init+0x310>)
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	089b      	lsrs	r3, r3, #2
 8001014:	3302      	adds	r3, #2
 8001016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800101a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	f003 0303 	and.w	r3, r3, #3
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	220f      	movs	r2, #15
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	43db      	mvns	r3, r3
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	4013      	ands	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a52      	ldr	r2, [pc, #328]	; (8001180 <HAL_GPIO_Init+0x314>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d02b      	beq.n	8001092 <HAL_GPIO_Init+0x226>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a51      	ldr	r2, [pc, #324]	; (8001184 <HAL_GPIO_Init+0x318>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d025      	beq.n	800108e <HAL_GPIO_Init+0x222>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a50      	ldr	r2, [pc, #320]	; (8001188 <HAL_GPIO_Init+0x31c>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d01f      	beq.n	800108a <HAL_GPIO_Init+0x21e>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a4f      	ldr	r2, [pc, #316]	; (800118c <HAL_GPIO_Init+0x320>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d019      	beq.n	8001086 <HAL_GPIO_Init+0x21a>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a4e      	ldr	r2, [pc, #312]	; (8001190 <HAL_GPIO_Init+0x324>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d013      	beq.n	8001082 <HAL_GPIO_Init+0x216>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a4d      	ldr	r2, [pc, #308]	; (8001194 <HAL_GPIO_Init+0x328>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d00d      	beq.n	800107e <HAL_GPIO_Init+0x212>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a4c      	ldr	r2, [pc, #304]	; (8001198 <HAL_GPIO_Init+0x32c>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d007      	beq.n	800107a <HAL_GPIO_Init+0x20e>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a4b      	ldr	r2, [pc, #300]	; (800119c <HAL_GPIO_Init+0x330>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d101      	bne.n	8001076 <HAL_GPIO_Init+0x20a>
 8001072:	2307      	movs	r3, #7
 8001074:	e00e      	b.n	8001094 <HAL_GPIO_Init+0x228>
 8001076:	2308      	movs	r3, #8
 8001078:	e00c      	b.n	8001094 <HAL_GPIO_Init+0x228>
 800107a:	2306      	movs	r3, #6
 800107c:	e00a      	b.n	8001094 <HAL_GPIO_Init+0x228>
 800107e:	2305      	movs	r3, #5
 8001080:	e008      	b.n	8001094 <HAL_GPIO_Init+0x228>
 8001082:	2304      	movs	r3, #4
 8001084:	e006      	b.n	8001094 <HAL_GPIO_Init+0x228>
 8001086:	2303      	movs	r3, #3
 8001088:	e004      	b.n	8001094 <HAL_GPIO_Init+0x228>
 800108a:	2302      	movs	r3, #2
 800108c:	e002      	b.n	8001094 <HAL_GPIO_Init+0x228>
 800108e:	2301      	movs	r3, #1
 8001090:	e000      	b.n	8001094 <HAL_GPIO_Init+0x228>
 8001092:	2300      	movs	r3, #0
 8001094:	69fa      	ldr	r2, [r7, #28]
 8001096:	f002 0203 	and.w	r2, r2, #3
 800109a:	0092      	lsls	r2, r2, #2
 800109c:	4093      	lsls	r3, r2
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010a4:	4935      	ldr	r1, [pc, #212]	; (800117c <HAL_GPIO_Init+0x310>)
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	089b      	lsrs	r3, r3, #2
 80010aa:	3302      	adds	r3, #2
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010b2:	4b3b      	ldr	r3, [pc, #236]	; (80011a0 <HAL_GPIO_Init+0x334>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	43db      	mvns	r3, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4013      	ands	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010d6:	4a32      	ldr	r2, [pc, #200]	; (80011a0 <HAL_GPIO_Init+0x334>)
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010dc:	4b30      	ldr	r3, [pc, #192]	; (80011a0 <HAL_GPIO_Init+0x334>)
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	43db      	mvns	r3, r3
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4013      	ands	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d003      	beq.n	8001100 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001100:	4a27      	ldr	r2, [pc, #156]	; (80011a0 <HAL_GPIO_Init+0x334>)
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001106:	4b26      	ldr	r3, [pc, #152]	; (80011a0 <HAL_GPIO_Init+0x334>)
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	43db      	mvns	r3, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4013      	ands	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d003      	beq.n	800112a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	4313      	orrs	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800112a:	4a1d      	ldr	r2, [pc, #116]	; (80011a0 <HAL_GPIO_Init+0x334>)
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001130:	4b1b      	ldr	r3, [pc, #108]	; (80011a0 <HAL_GPIO_Init+0x334>)
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	43db      	mvns	r3, r3
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4013      	ands	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d003      	beq.n	8001154 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	4313      	orrs	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001154:	4a12      	ldr	r2, [pc, #72]	; (80011a0 <HAL_GPIO_Init+0x334>)
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	3301      	adds	r3, #1
 800115e:	61fb      	str	r3, [r7, #28]
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	2b0f      	cmp	r3, #15
 8001164:	f67f ae90 	bls.w	8000e88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001168:	bf00      	nop
 800116a:	bf00      	nop
 800116c:	3724      	adds	r7, #36	; 0x24
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	40023800 	.word	0x40023800
 800117c:	40013800 	.word	0x40013800
 8001180:	40020000 	.word	0x40020000
 8001184:	40020400 	.word	0x40020400
 8001188:	40020800 	.word	0x40020800
 800118c:	40020c00 	.word	0x40020c00
 8001190:	40021000 	.word	0x40021000
 8001194:	40021400 	.word	0x40021400
 8001198:	40021800 	.word	0x40021800
 800119c:	40021c00 	.word	0x40021c00
 80011a0:	40013c00 	.word	0x40013c00

080011a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	460b      	mov	r3, r1
 80011ae:	807b      	strh	r3, [r7, #2]
 80011b0:	4613      	mov	r3, r2
 80011b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011b4:	787b      	ldrb	r3, [r7, #1]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d003      	beq.n	80011c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011ba:	887a      	ldrh	r2, [r7, #2]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011c0:	e003      	b.n	80011ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011c2:	887b      	ldrh	r3, [r7, #2]
 80011c4:	041a      	lsls	r2, r3, #16
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	619a      	str	r2, [r3, #24]
}
 80011ca:	bf00      	nop
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011d6:	b480      	push	{r7}
 80011d8:	b085      	sub	sp, #20
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
 80011de:	460b      	mov	r3, r1
 80011e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	695b      	ldr	r3, [r3, #20]
 80011e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011e8:	887a      	ldrh	r2, [r7, #2]
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	4013      	ands	r3, r2
 80011ee:	041a      	lsls	r2, r3, #16
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	43d9      	mvns	r1, r3
 80011f4:	887b      	ldrh	r3, [r7, #2]
 80011f6:	400b      	ands	r3, r1
 80011f8:	431a      	orrs	r2, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	619a      	str	r2, [r3, #24]
}
 80011fe:	bf00      	nop
 8001200:	3714      	adds	r7, #20
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
	...

0800120c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d101      	bne.n	800121e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e264      	b.n	80016e8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	2b00      	cmp	r3, #0
 8001228:	d075      	beq.n	8001316 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800122a:	4ba3      	ldr	r3, [pc, #652]	; (80014b8 <HAL_RCC_OscConfig+0x2ac>)
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	f003 030c 	and.w	r3, r3, #12
 8001232:	2b04      	cmp	r3, #4
 8001234:	d00c      	beq.n	8001250 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001236:	4ba0      	ldr	r3, [pc, #640]	; (80014b8 <HAL_RCC_OscConfig+0x2ac>)
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800123e:	2b08      	cmp	r3, #8
 8001240:	d112      	bne.n	8001268 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001242:	4b9d      	ldr	r3, [pc, #628]	; (80014b8 <HAL_RCC_OscConfig+0x2ac>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800124a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800124e:	d10b      	bne.n	8001268 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001250:	4b99      	ldr	r3, [pc, #612]	; (80014b8 <HAL_RCC_OscConfig+0x2ac>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d05b      	beq.n	8001314 <HAL_RCC_OscConfig+0x108>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d157      	bne.n	8001314 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	e23f      	b.n	80016e8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001270:	d106      	bne.n	8001280 <HAL_RCC_OscConfig+0x74>
 8001272:	4b91      	ldr	r3, [pc, #580]	; (80014b8 <HAL_RCC_OscConfig+0x2ac>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a90      	ldr	r2, [pc, #576]	; (80014b8 <HAL_RCC_OscConfig+0x2ac>)
 8001278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800127c:	6013      	str	r3, [r2, #0]
 800127e:	e01d      	b.n	80012bc <HAL_RCC_OscConfig+0xb0>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001288:	d10c      	bne.n	80012a4 <HAL_RCC_OscConfig+0x98>
 800128a:	4b8b      	ldr	r3, [pc, #556]	; (80014b8 <HAL_RCC_OscConfig+0x2ac>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a8a      	ldr	r2, [pc, #552]	; (80014b8 <HAL_RCC_OscConfig+0x2ac>)
 8001290:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001294:	6013      	str	r3, [r2, #0]
 8001296:	4b88      	ldr	r3, [pc, #544]	; (80014b8 <HAL_RCC_OscConfig+0x2ac>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a87      	ldr	r2, [pc, #540]	; (80014b8 <HAL_RCC_OscConfig+0x2ac>)
 800129c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a0:	6013      	str	r3, [r2, #0]
 80012a2:	e00b      	b.n	80012bc <HAL_RCC_OscConfig+0xb0>
 80012a4:	4b84      	ldr	r3, [pc, #528]	; (80014b8 <HAL_RCC_OscConfig+0x2ac>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a83      	ldr	r2, [pc, #524]	; (80014b8 <HAL_RCC_OscConfig+0x2ac>)
 80012aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012ae:	6013      	str	r3, [r2, #0]
 80012b0:	4b81      	ldr	r3, [pc, #516]	; (80014b8 <HAL_RCC_OscConfig+0x2ac>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a80      	ldr	r2, [pc, #512]	; (80014b8 <HAL_RCC_OscConfig+0x2ac>)
 80012b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d013      	beq.n	80012ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c4:	f7ff fce4 	bl	8000c90 <HAL_GetTick>
 80012c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ca:	e008      	b.n	80012de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012cc:	f7ff fce0 	bl	8000c90 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b64      	cmp	r3, #100	; 0x64
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e204      	b.n	80016e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012de:	4b76      	ldr	r3, [pc, #472]	; (80014b8 <HAL_RCC_OscConfig+0x2ac>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d0f0      	beq.n	80012cc <HAL_RCC_OscConfig+0xc0>
 80012ea:	e014      	b.n	8001316 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ec:	f7ff fcd0 	bl	8000c90 <HAL_GetTick>
 80012f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012f2:	e008      	b.n	8001306 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012f4:	f7ff fccc 	bl	8000c90 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b64      	cmp	r3, #100	; 0x64
 8001300:	d901      	bls.n	8001306 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e1f0      	b.n	80016e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001306:	4b6c      	ldr	r3, [pc, #432]	; (80014b8 <HAL_RCC_OscConfig+0x2ac>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d1f0      	bne.n	80012f4 <HAL_RCC_OscConfig+0xe8>
 8001312:	e000      	b.n	8001316 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001314:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d063      	beq.n	80013ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001322:	4b65      	ldr	r3, [pc, #404]	; (80014b8 <HAL_RCC_OscConfig+0x2ac>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f003 030c 	and.w	r3, r3, #12
 800132a:	2b00      	cmp	r3, #0
 800132c:	d00b      	beq.n	8001346 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800132e:	4b62      	ldr	r3, [pc, #392]	; (80014b8 <HAL_RCC_OscConfig+0x2ac>)
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001336:	2b08      	cmp	r3, #8
 8001338:	d11c      	bne.n	8001374 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800133a:	4b5f      	ldr	r3, [pc, #380]	; (80014b8 <HAL_RCC_OscConfig+0x2ac>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d116      	bne.n	8001374 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001346:	4b5c      	ldr	r3, [pc, #368]	; (80014b8 <HAL_RCC_OscConfig+0x2ac>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	2b00      	cmp	r3, #0
 8001350:	d005      	beq.n	800135e <HAL_RCC_OscConfig+0x152>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d001      	beq.n	800135e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e1c4      	b.n	80016e8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800135e:	4b56      	ldr	r3, [pc, #344]	; (80014b8 <HAL_RCC_OscConfig+0x2ac>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	691b      	ldr	r3, [r3, #16]
 800136a:	00db      	lsls	r3, r3, #3
 800136c:	4952      	ldr	r1, [pc, #328]	; (80014b8 <HAL_RCC_OscConfig+0x2ac>)
 800136e:	4313      	orrs	r3, r2
 8001370:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001372:	e03a      	b.n	80013ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d020      	beq.n	80013be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800137c:	4b4f      	ldr	r3, [pc, #316]	; (80014bc <HAL_RCC_OscConfig+0x2b0>)
 800137e:	2201      	movs	r2, #1
 8001380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001382:	f7ff fc85 	bl	8000c90 <HAL_GetTick>
 8001386:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001388:	e008      	b.n	800139c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800138a:	f7ff fc81 	bl	8000c90 <HAL_GetTick>
 800138e:	4602      	mov	r2, r0
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	2b02      	cmp	r3, #2
 8001396:	d901      	bls.n	800139c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001398:	2303      	movs	r3, #3
 800139a:	e1a5      	b.n	80016e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800139c:	4b46      	ldr	r3, [pc, #280]	; (80014b8 <HAL_RCC_OscConfig+0x2ac>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 0302 	and.w	r3, r3, #2
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d0f0      	beq.n	800138a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a8:	4b43      	ldr	r3, [pc, #268]	; (80014b8 <HAL_RCC_OscConfig+0x2ac>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	691b      	ldr	r3, [r3, #16]
 80013b4:	00db      	lsls	r3, r3, #3
 80013b6:	4940      	ldr	r1, [pc, #256]	; (80014b8 <HAL_RCC_OscConfig+0x2ac>)
 80013b8:	4313      	orrs	r3, r2
 80013ba:	600b      	str	r3, [r1, #0]
 80013bc:	e015      	b.n	80013ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013be:	4b3f      	ldr	r3, [pc, #252]	; (80014bc <HAL_RCC_OscConfig+0x2b0>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c4:	f7ff fc64 	bl	8000c90 <HAL_GetTick>
 80013c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ca:	e008      	b.n	80013de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013cc:	f7ff fc60 	bl	8000c90 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d901      	bls.n	80013de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e184      	b.n	80016e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013de:	4b36      	ldr	r3, [pc, #216]	; (80014b8 <HAL_RCC_OscConfig+0x2ac>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d1f0      	bne.n	80013cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0308 	and.w	r3, r3, #8
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d030      	beq.n	8001458 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	695b      	ldr	r3, [r3, #20]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d016      	beq.n	800142c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013fe:	4b30      	ldr	r3, [pc, #192]	; (80014c0 <HAL_RCC_OscConfig+0x2b4>)
 8001400:	2201      	movs	r2, #1
 8001402:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001404:	f7ff fc44 	bl	8000c90 <HAL_GetTick>
 8001408:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800140c:	f7ff fc40 	bl	8000c90 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e164      	b.n	80016e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800141e:	4b26      	ldr	r3, [pc, #152]	; (80014b8 <HAL_RCC_OscConfig+0x2ac>)
 8001420:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	2b00      	cmp	r3, #0
 8001428:	d0f0      	beq.n	800140c <HAL_RCC_OscConfig+0x200>
 800142a:	e015      	b.n	8001458 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800142c:	4b24      	ldr	r3, [pc, #144]	; (80014c0 <HAL_RCC_OscConfig+0x2b4>)
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001432:	f7ff fc2d 	bl	8000c90 <HAL_GetTick>
 8001436:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001438:	e008      	b.n	800144c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800143a:	f7ff fc29 	bl	8000c90 <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d901      	bls.n	800144c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e14d      	b.n	80016e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800144c:	4b1a      	ldr	r3, [pc, #104]	; (80014b8 <HAL_RCC_OscConfig+0x2ac>)
 800144e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001450:	f003 0302 	and.w	r3, r3, #2
 8001454:	2b00      	cmp	r3, #0
 8001456:	d1f0      	bne.n	800143a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 0304 	and.w	r3, r3, #4
 8001460:	2b00      	cmp	r3, #0
 8001462:	f000 80a0 	beq.w	80015a6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001466:	2300      	movs	r3, #0
 8001468:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800146a:	4b13      	ldr	r3, [pc, #76]	; (80014b8 <HAL_RCC_OscConfig+0x2ac>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d10f      	bne.n	8001496 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	60bb      	str	r3, [r7, #8]
 800147a:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <HAL_RCC_OscConfig+0x2ac>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	4a0e      	ldr	r2, [pc, #56]	; (80014b8 <HAL_RCC_OscConfig+0x2ac>)
 8001480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001484:	6413      	str	r3, [r2, #64]	; 0x40
 8001486:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <HAL_RCC_OscConfig+0x2ac>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148e:	60bb      	str	r3, [r7, #8]
 8001490:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001492:	2301      	movs	r3, #1
 8001494:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001496:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <HAL_RCC_OscConfig+0x2b8>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d121      	bne.n	80014e6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014a2:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <HAL_RCC_OscConfig+0x2b8>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a07      	ldr	r2, [pc, #28]	; (80014c4 <HAL_RCC_OscConfig+0x2b8>)
 80014a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014ae:	f7ff fbef 	bl	8000c90 <HAL_GetTick>
 80014b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014b4:	e011      	b.n	80014da <HAL_RCC_OscConfig+0x2ce>
 80014b6:	bf00      	nop
 80014b8:	40023800 	.word	0x40023800
 80014bc:	42470000 	.word	0x42470000
 80014c0:	42470e80 	.word	0x42470e80
 80014c4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014c8:	f7ff fbe2 	bl	8000c90 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e106      	b.n	80016e8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014da:	4b85      	ldr	r3, [pc, #532]	; (80016f0 <HAL_RCC_OscConfig+0x4e4>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d0f0      	beq.n	80014c8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d106      	bne.n	80014fc <HAL_RCC_OscConfig+0x2f0>
 80014ee:	4b81      	ldr	r3, [pc, #516]	; (80016f4 <HAL_RCC_OscConfig+0x4e8>)
 80014f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f2:	4a80      	ldr	r2, [pc, #512]	; (80016f4 <HAL_RCC_OscConfig+0x4e8>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6713      	str	r3, [r2, #112]	; 0x70
 80014fa:	e01c      	b.n	8001536 <HAL_RCC_OscConfig+0x32a>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	2b05      	cmp	r3, #5
 8001502:	d10c      	bne.n	800151e <HAL_RCC_OscConfig+0x312>
 8001504:	4b7b      	ldr	r3, [pc, #492]	; (80016f4 <HAL_RCC_OscConfig+0x4e8>)
 8001506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001508:	4a7a      	ldr	r2, [pc, #488]	; (80016f4 <HAL_RCC_OscConfig+0x4e8>)
 800150a:	f043 0304 	orr.w	r3, r3, #4
 800150e:	6713      	str	r3, [r2, #112]	; 0x70
 8001510:	4b78      	ldr	r3, [pc, #480]	; (80016f4 <HAL_RCC_OscConfig+0x4e8>)
 8001512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001514:	4a77      	ldr	r2, [pc, #476]	; (80016f4 <HAL_RCC_OscConfig+0x4e8>)
 8001516:	f043 0301 	orr.w	r3, r3, #1
 800151a:	6713      	str	r3, [r2, #112]	; 0x70
 800151c:	e00b      	b.n	8001536 <HAL_RCC_OscConfig+0x32a>
 800151e:	4b75      	ldr	r3, [pc, #468]	; (80016f4 <HAL_RCC_OscConfig+0x4e8>)
 8001520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001522:	4a74      	ldr	r2, [pc, #464]	; (80016f4 <HAL_RCC_OscConfig+0x4e8>)
 8001524:	f023 0301 	bic.w	r3, r3, #1
 8001528:	6713      	str	r3, [r2, #112]	; 0x70
 800152a:	4b72      	ldr	r3, [pc, #456]	; (80016f4 <HAL_RCC_OscConfig+0x4e8>)
 800152c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800152e:	4a71      	ldr	r2, [pc, #452]	; (80016f4 <HAL_RCC_OscConfig+0x4e8>)
 8001530:	f023 0304 	bic.w	r3, r3, #4
 8001534:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d015      	beq.n	800156a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800153e:	f7ff fba7 	bl	8000c90 <HAL_GetTick>
 8001542:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001544:	e00a      	b.n	800155c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001546:	f7ff fba3 	bl	8000c90 <HAL_GetTick>
 800154a:	4602      	mov	r2, r0
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	f241 3288 	movw	r2, #5000	; 0x1388
 8001554:	4293      	cmp	r3, r2
 8001556:	d901      	bls.n	800155c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e0c5      	b.n	80016e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800155c:	4b65      	ldr	r3, [pc, #404]	; (80016f4 <HAL_RCC_OscConfig+0x4e8>)
 800155e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001560:	f003 0302 	and.w	r3, r3, #2
 8001564:	2b00      	cmp	r3, #0
 8001566:	d0ee      	beq.n	8001546 <HAL_RCC_OscConfig+0x33a>
 8001568:	e014      	b.n	8001594 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800156a:	f7ff fb91 	bl	8000c90 <HAL_GetTick>
 800156e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001570:	e00a      	b.n	8001588 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001572:	f7ff fb8d 	bl	8000c90 <HAL_GetTick>
 8001576:	4602      	mov	r2, r0
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001580:	4293      	cmp	r3, r2
 8001582:	d901      	bls.n	8001588 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e0af      	b.n	80016e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001588:	4b5a      	ldr	r3, [pc, #360]	; (80016f4 <HAL_RCC_OscConfig+0x4e8>)
 800158a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800158c:	f003 0302 	and.w	r3, r3, #2
 8001590:	2b00      	cmp	r3, #0
 8001592:	d1ee      	bne.n	8001572 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001594:	7dfb      	ldrb	r3, [r7, #23]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d105      	bne.n	80015a6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800159a:	4b56      	ldr	r3, [pc, #344]	; (80016f4 <HAL_RCC_OscConfig+0x4e8>)
 800159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159e:	4a55      	ldr	r2, [pc, #340]	; (80016f4 <HAL_RCC_OscConfig+0x4e8>)
 80015a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	f000 809b 	beq.w	80016e6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015b0:	4b50      	ldr	r3, [pc, #320]	; (80016f4 <HAL_RCC_OscConfig+0x4e8>)
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	f003 030c 	and.w	r3, r3, #12
 80015b8:	2b08      	cmp	r3, #8
 80015ba:	d05c      	beq.n	8001676 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d141      	bne.n	8001648 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015c4:	4b4c      	ldr	r3, [pc, #304]	; (80016f8 <HAL_RCC_OscConfig+0x4ec>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ca:	f7ff fb61 	bl	8000c90 <HAL_GetTick>
 80015ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015d0:	e008      	b.n	80015e4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015d2:	f7ff fb5d 	bl	8000c90 <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d901      	bls.n	80015e4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e081      	b.n	80016e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015e4:	4b43      	ldr	r3, [pc, #268]	; (80016f4 <HAL_RCC_OscConfig+0x4e8>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d1f0      	bne.n	80015d2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	69da      	ldr	r2, [r3, #28]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a1b      	ldr	r3, [r3, #32]
 80015f8:	431a      	orrs	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fe:	019b      	lsls	r3, r3, #6
 8001600:	431a      	orrs	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001606:	085b      	lsrs	r3, r3, #1
 8001608:	3b01      	subs	r3, #1
 800160a:	041b      	lsls	r3, r3, #16
 800160c:	431a      	orrs	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001612:	061b      	lsls	r3, r3, #24
 8001614:	4937      	ldr	r1, [pc, #220]	; (80016f4 <HAL_RCC_OscConfig+0x4e8>)
 8001616:	4313      	orrs	r3, r2
 8001618:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800161a:	4b37      	ldr	r3, [pc, #220]	; (80016f8 <HAL_RCC_OscConfig+0x4ec>)
 800161c:	2201      	movs	r2, #1
 800161e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001620:	f7ff fb36 	bl	8000c90 <HAL_GetTick>
 8001624:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001626:	e008      	b.n	800163a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001628:	f7ff fb32 	bl	8000c90 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b02      	cmp	r3, #2
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e056      	b.n	80016e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800163a:	4b2e      	ldr	r3, [pc, #184]	; (80016f4 <HAL_RCC_OscConfig+0x4e8>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d0f0      	beq.n	8001628 <HAL_RCC_OscConfig+0x41c>
 8001646:	e04e      	b.n	80016e6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001648:	4b2b      	ldr	r3, [pc, #172]	; (80016f8 <HAL_RCC_OscConfig+0x4ec>)
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164e:	f7ff fb1f 	bl	8000c90 <HAL_GetTick>
 8001652:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001654:	e008      	b.n	8001668 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001656:	f7ff fb1b 	bl	8000c90 <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	2b02      	cmp	r3, #2
 8001662:	d901      	bls.n	8001668 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e03f      	b.n	80016e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001668:	4b22      	ldr	r3, [pc, #136]	; (80016f4 <HAL_RCC_OscConfig+0x4e8>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d1f0      	bne.n	8001656 <HAL_RCC_OscConfig+0x44a>
 8001674:	e037      	b.n	80016e6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d101      	bne.n	8001682 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e032      	b.n	80016e8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001682:	4b1c      	ldr	r3, [pc, #112]	; (80016f4 <HAL_RCC_OscConfig+0x4e8>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d028      	beq.n	80016e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800169a:	429a      	cmp	r2, r3
 800169c:	d121      	bne.n	80016e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d11a      	bne.n	80016e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016ac:	68fa      	ldr	r2, [r7, #12]
 80016ae:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016b2:	4013      	ands	r3, r2
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016b8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d111      	bne.n	80016e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c8:	085b      	lsrs	r3, r3, #1
 80016ca:	3b01      	subs	r3, #1
 80016cc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d107      	bne.n	80016e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016dc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016de:	429a      	cmp	r2, r3
 80016e0:	d001      	beq.n	80016e6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e000      	b.n	80016e8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80016e6:	2300      	movs	r3, #0
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3718      	adds	r7, #24
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40007000 	.word	0x40007000
 80016f4:	40023800 	.word	0x40023800
 80016f8:	42470060 	.word	0x42470060

080016fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d101      	bne.n	8001710 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e0cc      	b.n	80018aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001710:	4b68      	ldr	r3, [pc, #416]	; (80018b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0307 	and.w	r3, r3, #7
 8001718:	683a      	ldr	r2, [r7, #0]
 800171a:	429a      	cmp	r2, r3
 800171c:	d90c      	bls.n	8001738 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800171e:	4b65      	ldr	r3, [pc, #404]	; (80018b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001720:	683a      	ldr	r2, [r7, #0]
 8001722:	b2d2      	uxtb	r2, r2
 8001724:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001726:	4b63      	ldr	r3, [pc, #396]	; (80018b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0307 	and.w	r3, r3, #7
 800172e:	683a      	ldr	r2, [r7, #0]
 8001730:	429a      	cmp	r2, r3
 8001732:	d001      	beq.n	8001738 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e0b8      	b.n	80018aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0302 	and.w	r3, r3, #2
 8001740:	2b00      	cmp	r3, #0
 8001742:	d020      	beq.n	8001786 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0304 	and.w	r3, r3, #4
 800174c:	2b00      	cmp	r3, #0
 800174e:	d005      	beq.n	800175c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001750:	4b59      	ldr	r3, [pc, #356]	; (80018b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	4a58      	ldr	r2, [pc, #352]	; (80018b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001756:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800175a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0308 	and.w	r3, r3, #8
 8001764:	2b00      	cmp	r3, #0
 8001766:	d005      	beq.n	8001774 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001768:	4b53      	ldr	r3, [pc, #332]	; (80018b8 <HAL_RCC_ClockConfig+0x1bc>)
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	4a52      	ldr	r2, [pc, #328]	; (80018b8 <HAL_RCC_ClockConfig+0x1bc>)
 800176e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001772:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001774:	4b50      	ldr	r3, [pc, #320]	; (80018b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	494d      	ldr	r1, [pc, #308]	; (80018b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001782:	4313      	orrs	r3, r2
 8001784:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	2b00      	cmp	r3, #0
 8001790:	d044      	beq.n	800181c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d107      	bne.n	80017aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800179a:	4b47      	ldr	r3, [pc, #284]	; (80018b8 <HAL_RCC_ClockConfig+0x1bc>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d119      	bne.n	80017da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e07f      	b.n	80018aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d003      	beq.n	80017ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017b6:	2b03      	cmp	r3, #3
 80017b8:	d107      	bne.n	80017ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ba:	4b3f      	ldr	r3, [pc, #252]	; (80018b8 <HAL_RCC_ClockConfig+0x1bc>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d109      	bne.n	80017da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e06f      	b.n	80018aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ca:	4b3b      	ldr	r3, [pc, #236]	; (80018b8 <HAL_RCC_ClockConfig+0x1bc>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d101      	bne.n	80017da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e067      	b.n	80018aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017da:	4b37      	ldr	r3, [pc, #220]	; (80018b8 <HAL_RCC_ClockConfig+0x1bc>)
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f023 0203 	bic.w	r2, r3, #3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	4934      	ldr	r1, [pc, #208]	; (80018b8 <HAL_RCC_ClockConfig+0x1bc>)
 80017e8:	4313      	orrs	r3, r2
 80017ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017ec:	f7ff fa50 	bl	8000c90 <HAL_GetTick>
 80017f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017f2:	e00a      	b.n	800180a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017f4:	f7ff fa4c 	bl	8000c90 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001802:	4293      	cmp	r3, r2
 8001804:	d901      	bls.n	800180a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e04f      	b.n	80018aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800180a:	4b2b      	ldr	r3, [pc, #172]	; (80018b8 <HAL_RCC_ClockConfig+0x1bc>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f003 020c 	and.w	r2, r3, #12
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	429a      	cmp	r2, r3
 800181a:	d1eb      	bne.n	80017f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800181c:	4b25      	ldr	r3, [pc, #148]	; (80018b4 <HAL_RCC_ClockConfig+0x1b8>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0307 	and.w	r3, r3, #7
 8001824:	683a      	ldr	r2, [r7, #0]
 8001826:	429a      	cmp	r2, r3
 8001828:	d20c      	bcs.n	8001844 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800182a:	4b22      	ldr	r3, [pc, #136]	; (80018b4 <HAL_RCC_ClockConfig+0x1b8>)
 800182c:	683a      	ldr	r2, [r7, #0]
 800182e:	b2d2      	uxtb	r2, r2
 8001830:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001832:	4b20      	ldr	r3, [pc, #128]	; (80018b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0307 	and.w	r3, r3, #7
 800183a:	683a      	ldr	r2, [r7, #0]
 800183c:	429a      	cmp	r2, r3
 800183e:	d001      	beq.n	8001844 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e032      	b.n	80018aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0304 	and.w	r3, r3, #4
 800184c:	2b00      	cmp	r3, #0
 800184e:	d008      	beq.n	8001862 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001850:	4b19      	ldr	r3, [pc, #100]	; (80018b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	4916      	ldr	r1, [pc, #88]	; (80018b8 <HAL_RCC_ClockConfig+0x1bc>)
 800185e:	4313      	orrs	r3, r2
 8001860:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0308 	and.w	r3, r3, #8
 800186a:	2b00      	cmp	r3, #0
 800186c:	d009      	beq.n	8001882 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800186e:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	691b      	ldr	r3, [r3, #16]
 800187a:	00db      	lsls	r3, r3, #3
 800187c:	490e      	ldr	r1, [pc, #56]	; (80018b8 <HAL_RCC_ClockConfig+0x1bc>)
 800187e:	4313      	orrs	r3, r2
 8001880:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001882:	f000 f821 	bl	80018c8 <HAL_RCC_GetSysClockFreq>
 8001886:	4602      	mov	r2, r0
 8001888:	4b0b      	ldr	r3, [pc, #44]	; (80018b8 <HAL_RCC_ClockConfig+0x1bc>)
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	091b      	lsrs	r3, r3, #4
 800188e:	f003 030f 	and.w	r3, r3, #15
 8001892:	490a      	ldr	r1, [pc, #40]	; (80018bc <HAL_RCC_ClockConfig+0x1c0>)
 8001894:	5ccb      	ldrb	r3, [r1, r3]
 8001896:	fa22 f303 	lsr.w	r3, r2, r3
 800189a:	4a09      	ldr	r2, [pc, #36]	; (80018c0 <HAL_RCC_ClockConfig+0x1c4>)
 800189c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800189e:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <HAL_RCC_ClockConfig+0x1c8>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff f908 	bl	8000ab8 <HAL_InitTick>

  return HAL_OK;
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40023c00 	.word	0x40023c00
 80018b8:	40023800 	.word	0x40023800
 80018bc:	080058cc 	.word	0x080058cc
 80018c0:	20000000 	.word	0x20000000
 80018c4:	20000004 	.word	0x20000004

080018c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018cc:	b084      	sub	sp, #16
 80018ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018d0:	2300      	movs	r3, #0
 80018d2:	607b      	str	r3, [r7, #4]
 80018d4:	2300      	movs	r3, #0
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	2300      	movs	r3, #0
 80018da:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80018dc:	2300      	movs	r3, #0
 80018de:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018e0:	4b67      	ldr	r3, [pc, #412]	; (8001a80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f003 030c 	and.w	r3, r3, #12
 80018e8:	2b08      	cmp	r3, #8
 80018ea:	d00d      	beq.n	8001908 <HAL_RCC_GetSysClockFreq+0x40>
 80018ec:	2b08      	cmp	r3, #8
 80018ee:	f200 80bd 	bhi.w	8001a6c <HAL_RCC_GetSysClockFreq+0x1a4>
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d002      	beq.n	80018fc <HAL_RCC_GetSysClockFreq+0x34>
 80018f6:	2b04      	cmp	r3, #4
 80018f8:	d003      	beq.n	8001902 <HAL_RCC_GetSysClockFreq+0x3a>
 80018fa:	e0b7      	b.n	8001a6c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018fc:	4b61      	ldr	r3, [pc, #388]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80018fe:	60bb      	str	r3, [r7, #8]
       break;
 8001900:	e0b7      	b.n	8001a72 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001902:	4b61      	ldr	r3, [pc, #388]	; (8001a88 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001904:	60bb      	str	r3, [r7, #8]
      break;
 8001906:	e0b4      	b.n	8001a72 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001908:	4b5d      	ldr	r3, [pc, #372]	; (8001a80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001910:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001912:	4b5b      	ldr	r3, [pc, #364]	; (8001a80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d04d      	beq.n	80019ba <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800191e:	4b58      	ldr	r3, [pc, #352]	; (8001a80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	099b      	lsrs	r3, r3, #6
 8001924:	461a      	mov	r2, r3
 8001926:	f04f 0300 	mov.w	r3, #0
 800192a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800192e:	f04f 0100 	mov.w	r1, #0
 8001932:	ea02 0800 	and.w	r8, r2, r0
 8001936:	ea03 0901 	and.w	r9, r3, r1
 800193a:	4640      	mov	r0, r8
 800193c:	4649      	mov	r1, r9
 800193e:	f04f 0200 	mov.w	r2, #0
 8001942:	f04f 0300 	mov.w	r3, #0
 8001946:	014b      	lsls	r3, r1, #5
 8001948:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800194c:	0142      	lsls	r2, r0, #5
 800194e:	4610      	mov	r0, r2
 8001950:	4619      	mov	r1, r3
 8001952:	ebb0 0008 	subs.w	r0, r0, r8
 8001956:	eb61 0109 	sbc.w	r1, r1, r9
 800195a:	f04f 0200 	mov.w	r2, #0
 800195e:	f04f 0300 	mov.w	r3, #0
 8001962:	018b      	lsls	r3, r1, #6
 8001964:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001968:	0182      	lsls	r2, r0, #6
 800196a:	1a12      	subs	r2, r2, r0
 800196c:	eb63 0301 	sbc.w	r3, r3, r1
 8001970:	f04f 0000 	mov.w	r0, #0
 8001974:	f04f 0100 	mov.w	r1, #0
 8001978:	00d9      	lsls	r1, r3, #3
 800197a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800197e:	00d0      	lsls	r0, r2, #3
 8001980:	4602      	mov	r2, r0
 8001982:	460b      	mov	r3, r1
 8001984:	eb12 0208 	adds.w	r2, r2, r8
 8001988:	eb43 0309 	adc.w	r3, r3, r9
 800198c:	f04f 0000 	mov.w	r0, #0
 8001990:	f04f 0100 	mov.w	r1, #0
 8001994:	0259      	lsls	r1, r3, #9
 8001996:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800199a:	0250      	lsls	r0, r2, #9
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	4610      	mov	r0, r2
 80019a2:	4619      	mov	r1, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	461a      	mov	r2, r3
 80019a8:	f04f 0300 	mov.w	r3, #0
 80019ac:	f7fe fc5a 	bl	8000264 <__aeabi_uldivmod>
 80019b0:	4602      	mov	r2, r0
 80019b2:	460b      	mov	r3, r1
 80019b4:	4613      	mov	r3, r2
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	e04a      	b.n	8001a50 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019ba:	4b31      	ldr	r3, [pc, #196]	; (8001a80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	099b      	lsrs	r3, r3, #6
 80019c0:	461a      	mov	r2, r3
 80019c2:	f04f 0300 	mov.w	r3, #0
 80019c6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80019ca:	f04f 0100 	mov.w	r1, #0
 80019ce:	ea02 0400 	and.w	r4, r2, r0
 80019d2:	ea03 0501 	and.w	r5, r3, r1
 80019d6:	4620      	mov	r0, r4
 80019d8:	4629      	mov	r1, r5
 80019da:	f04f 0200 	mov.w	r2, #0
 80019de:	f04f 0300 	mov.w	r3, #0
 80019e2:	014b      	lsls	r3, r1, #5
 80019e4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80019e8:	0142      	lsls	r2, r0, #5
 80019ea:	4610      	mov	r0, r2
 80019ec:	4619      	mov	r1, r3
 80019ee:	1b00      	subs	r0, r0, r4
 80019f0:	eb61 0105 	sbc.w	r1, r1, r5
 80019f4:	f04f 0200 	mov.w	r2, #0
 80019f8:	f04f 0300 	mov.w	r3, #0
 80019fc:	018b      	lsls	r3, r1, #6
 80019fe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a02:	0182      	lsls	r2, r0, #6
 8001a04:	1a12      	subs	r2, r2, r0
 8001a06:	eb63 0301 	sbc.w	r3, r3, r1
 8001a0a:	f04f 0000 	mov.w	r0, #0
 8001a0e:	f04f 0100 	mov.w	r1, #0
 8001a12:	00d9      	lsls	r1, r3, #3
 8001a14:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a18:	00d0      	lsls	r0, r2, #3
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	1912      	adds	r2, r2, r4
 8001a20:	eb45 0303 	adc.w	r3, r5, r3
 8001a24:	f04f 0000 	mov.w	r0, #0
 8001a28:	f04f 0100 	mov.w	r1, #0
 8001a2c:	0299      	lsls	r1, r3, #10
 8001a2e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001a32:	0290      	lsls	r0, r2, #10
 8001a34:	4602      	mov	r2, r0
 8001a36:	460b      	mov	r3, r1
 8001a38:	4610      	mov	r0, r2
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	461a      	mov	r2, r3
 8001a40:	f04f 0300 	mov.w	r3, #0
 8001a44:	f7fe fc0e 	bl	8000264 <__aeabi_uldivmod>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a50:	4b0b      	ldr	r3, [pc, #44]	; (8001a80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	0c1b      	lsrs	r3, r3, #16
 8001a56:	f003 0303 	and.w	r3, r3, #3
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001a60:	68fa      	ldr	r2, [r7, #12]
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a68:	60bb      	str	r3, [r7, #8]
      break;
 8001a6a:	e002      	b.n	8001a72 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a6c:	4b05      	ldr	r3, [pc, #20]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001a6e:	60bb      	str	r3, [r7, #8]
      break;
 8001a70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a72:	68bb      	ldr	r3, [r7, #8]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3710      	adds	r7, #16
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a7e:	bf00      	nop
 8001a80:	40023800 	.word	0x40023800
 8001a84:	00f42400 	.word	0x00f42400
 8001a88:	007a1200 	.word	0x007a1200

08001a8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a90:	4b03      	ldr	r3, [pc, #12]	; (8001aa0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a92:	681b      	ldr	r3, [r3, #0]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	20000000 	.word	0x20000000

08001aa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001aa8:	f7ff fff0 	bl	8001a8c <HAL_RCC_GetHCLKFreq>
 8001aac:	4602      	mov	r2, r0
 8001aae:	4b05      	ldr	r3, [pc, #20]	; (8001ac4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	0a9b      	lsrs	r3, r3, #10
 8001ab4:	f003 0307 	and.w	r3, r3, #7
 8001ab8:	4903      	ldr	r1, [pc, #12]	; (8001ac8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001aba:	5ccb      	ldrb	r3, [r1, r3]
 8001abc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	080058dc 	.word	0x080058dc

08001acc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	220f      	movs	r2, #15
 8001ada:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001adc:	4b12      	ldr	r3, [pc, #72]	; (8001b28 <HAL_RCC_GetClockConfig+0x5c>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f003 0203 	and.w	r2, r3, #3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ae8:	4b0f      	ldr	r3, [pc, #60]	; (8001b28 <HAL_RCC_GetClockConfig+0x5c>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001af4:	4b0c      	ldr	r3, [pc, #48]	; (8001b28 <HAL_RCC_GetClockConfig+0x5c>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b00:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <HAL_RCC_GetClockConfig+0x5c>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	08db      	lsrs	r3, r3, #3
 8001b06:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b0e:	4b07      	ldr	r3, [pc, #28]	; (8001b2c <HAL_RCC_GetClockConfig+0x60>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0207 	and.w	r2, r3, #7
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	601a      	str	r2, [r3, #0]
}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	40023c00 	.word	0x40023c00

08001b30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e041      	b.n	8001bc6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d106      	bne.n	8001b5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f000 f839 	bl	8001bce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2202      	movs	r2, #2
 8001b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3304      	adds	r3, #4
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4610      	mov	r0, r2
 8001b70:	f000 f9d8 	bl	8001f24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b083      	sub	sp, #12
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
	...

08001be4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d001      	beq.n	8001bfc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e04e      	b.n	8001c9a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2202      	movs	r2, #2
 8001c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	68da      	ldr	r2, [r3, #12]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f042 0201 	orr.w	r2, r2, #1
 8001c12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a23      	ldr	r2, [pc, #140]	; (8001ca8 <HAL_TIM_Base_Start_IT+0xc4>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d022      	beq.n	8001c64 <HAL_TIM_Base_Start_IT+0x80>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c26:	d01d      	beq.n	8001c64 <HAL_TIM_Base_Start_IT+0x80>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a1f      	ldr	r2, [pc, #124]	; (8001cac <HAL_TIM_Base_Start_IT+0xc8>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d018      	beq.n	8001c64 <HAL_TIM_Base_Start_IT+0x80>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a1e      	ldr	r2, [pc, #120]	; (8001cb0 <HAL_TIM_Base_Start_IT+0xcc>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d013      	beq.n	8001c64 <HAL_TIM_Base_Start_IT+0x80>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a1c      	ldr	r2, [pc, #112]	; (8001cb4 <HAL_TIM_Base_Start_IT+0xd0>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d00e      	beq.n	8001c64 <HAL_TIM_Base_Start_IT+0x80>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a1b      	ldr	r2, [pc, #108]	; (8001cb8 <HAL_TIM_Base_Start_IT+0xd4>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d009      	beq.n	8001c64 <HAL_TIM_Base_Start_IT+0x80>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a19      	ldr	r2, [pc, #100]	; (8001cbc <HAL_TIM_Base_Start_IT+0xd8>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d004      	beq.n	8001c64 <HAL_TIM_Base_Start_IT+0x80>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a18      	ldr	r2, [pc, #96]	; (8001cc0 <HAL_TIM_Base_Start_IT+0xdc>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d111      	bne.n	8001c88 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2b06      	cmp	r3, #6
 8001c74:	d010      	beq.n	8001c98 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f042 0201 	orr.w	r2, r2, #1
 8001c84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c86:	e007      	b.n	8001c98 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f042 0201 	orr.w	r2, r2, #1
 8001c96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3714      	adds	r7, #20
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	40010000 	.word	0x40010000
 8001cac:	40000400 	.word	0x40000400
 8001cb0:	40000800 	.word	0x40000800
 8001cb4:	40000c00 	.word	0x40000c00
 8001cb8:	40010400 	.word	0x40010400
 8001cbc:	40014000 	.word	0x40014000
 8001cc0:	40001800 	.word	0x40001800

08001cc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d122      	bne.n	8001d20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	f003 0302 	and.w	r3, r3, #2
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d11b      	bne.n	8001d20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f06f 0202 	mvn.w	r2, #2
 8001cf0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	f003 0303 	and.w	r3, r3, #3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d003      	beq.n	8001d0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 f8ee 	bl	8001ee8 <HAL_TIM_IC_CaptureCallback>
 8001d0c:	e005      	b.n	8001d1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 f8e0 	bl	8001ed4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f000 f8f1 	bl	8001efc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	f003 0304 	and.w	r3, r3, #4
 8001d2a:	2b04      	cmp	r3, #4
 8001d2c:	d122      	bne.n	8001d74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	f003 0304 	and.w	r3, r3, #4
 8001d38:	2b04      	cmp	r3, #4
 8001d3a:	d11b      	bne.n	8001d74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f06f 0204 	mvn.w	r2, #4
 8001d44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2202      	movs	r2, #2
 8001d4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d003      	beq.n	8001d62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 f8c4 	bl	8001ee8 <HAL_TIM_IC_CaptureCallback>
 8001d60:	e005      	b.n	8001d6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 f8b6 	bl	8001ed4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f000 f8c7 	bl	8001efc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	f003 0308 	and.w	r3, r3, #8
 8001d7e:	2b08      	cmp	r3, #8
 8001d80:	d122      	bne.n	8001dc8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	f003 0308 	and.w	r3, r3, #8
 8001d8c:	2b08      	cmp	r3, #8
 8001d8e:	d11b      	bne.n	8001dc8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f06f 0208 	mvn.w	r2, #8
 8001d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2204      	movs	r2, #4
 8001d9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	69db      	ldr	r3, [r3, #28]
 8001da6:	f003 0303 	and.w	r3, r3, #3
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d003      	beq.n	8001db6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 f89a 	bl	8001ee8 <HAL_TIM_IC_CaptureCallback>
 8001db4:	e005      	b.n	8001dc2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 f88c 	bl	8001ed4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f000 f89d 	bl	8001efc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	f003 0310 	and.w	r3, r3, #16
 8001dd2:	2b10      	cmp	r3, #16
 8001dd4:	d122      	bne.n	8001e1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	f003 0310 	and.w	r3, r3, #16
 8001de0:	2b10      	cmp	r3, #16
 8001de2:	d11b      	bne.n	8001e1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f06f 0210 	mvn.w	r2, #16
 8001dec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2208      	movs	r2, #8
 8001df2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	69db      	ldr	r3, [r3, #28]
 8001dfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 f870 	bl	8001ee8 <HAL_TIM_IC_CaptureCallback>
 8001e08:	e005      	b.n	8001e16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 f862 	bl	8001ed4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f000 f873 	bl	8001efc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d10e      	bne.n	8001e48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d107      	bne.n	8001e48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f06f 0201 	mvn.w	r2, #1
 8001e40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7fe fdf8 	bl	8000a38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e52:	2b80      	cmp	r3, #128	; 0x80
 8001e54:	d10e      	bne.n	8001e74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e60:	2b80      	cmp	r3, #128	; 0x80
 8001e62:	d107      	bne.n	8001e74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 f902 	bl	8002078 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e7e:	2b40      	cmp	r3, #64	; 0x40
 8001e80:	d10e      	bne.n	8001ea0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e8c:	2b40      	cmp	r3, #64	; 0x40
 8001e8e:	d107      	bne.n	8001ea0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 f838 	bl	8001f10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	f003 0320 	and.w	r3, r3, #32
 8001eaa:	2b20      	cmp	r3, #32
 8001eac:	d10e      	bne.n	8001ecc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	f003 0320 	and.w	r3, r3, #32
 8001eb8:	2b20      	cmp	r3, #32
 8001eba:	d107      	bne.n	8001ecc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f06f 0220 	mvn.w	r2, #32
 8001ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 f8cc 	bl	8002064 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ecc:	bf00      	nop
 8001ece:	3708      	adds	r7, #8
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ef0:	bf00      	nop
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4a40      	ldr	r2, [pc, #256]	; (8002038 <TIM_Base_SetConfig+0x114>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d013      	beq.n	8001f64 <TIM_Base_SetConfig+0x40>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f42:	d00f      	beq.n	8001f64 <TIM_Base_SetConfig+0x40>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4a3d      	ldr	r2, [pc, #244]	; (800203c <TIM_Base_SetConfig+0x118>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d00b      	beq.n	8001f64 <TIM_Base_SetConfig+0x40>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4a3c      	ldr	r2, [pc, #240]	; (8002040 <TIM_Base_SetConfig+0x11c>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d007      	beq.n	8001f64 <TIM_Base_SetConfig+0x40>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a3b      	ldr	r2, [pc, #236]	; (8002044 <TIM_Base_SetConfig+0x120>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d003      	beq.n	8001f64 <TIM_Base_SetConfig+0x40>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4a3a      	ldr	r2, [pc, #232]	; (8002048 <TIM_Base_SetConfig+0x124>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d108      	bne.n	8001f76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a2f      	ldr	r2, [pc, #188]	; (8002038 <TIM_Base_SetConfig+0x114>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d02b      	beq.n	8001fd6 <TIM_Base_SetConfig+0xb2>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f84:	d027      	beq.n	8001fd6 <TIM_Base_SetConfig+0xb2>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a2c      	ldr	r2, [pc, #176]	; (800203c <TIM_Base_SetConfig+0x118>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d023      	beq.n	8001fd6 <TIM_Base_SetConfig+0xb2>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a2b      	ldr	r2, [pc, #172]	; (8002040 <TIM_Base_SetConfig+0x11c>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d01f      	beq.n	8001fd6 <TIM_Base_SetConfig+0xb2>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a2a      	ldr	r2, [pc, #168]	; (8002044 <TIM_Base_SetConfig+0x120>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d01b      	beq.n	8001fd6 <TIM_Base_SetConfig+0xb2>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a29      	ldr	r2, [pc, #164]	; (8002048 <TIM_Base_SetConfig+0x124>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d017      	beq.n	8001fd6 <TIM_Base_SetConfig+0xb2>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a28      	ldr	r2, [pc, #160]	; (800204c <TIM_Base_SetConfig+0x128>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d013      	beq.n	8001fd6 <TIM_Base_SetConfig+0xb2>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a27      	ldr	r2, [pc, #156]	; (8002050 <TIM_Base_SetConfig+0x12c>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d00f      	beq.n	8001fd6 <TIM_Base_SetConfig+0xb2>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a26      	ldr	r2, [pc, #152]	; (8002054 <TIM_Base_SetConfig+0x130>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d00b      	beq.n	8001fd6 <TIM_Base_SetConfig+0xb2>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a25      	ldr	r2, [pc, #148]	; (8002058 <TIM_Base_SetConfig+0x134>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d007      	beq.n	8001fd6 <TIM_Base_SetConfig+0xb2>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a24      	ldr	r2, [pc, #144]	; (800205c <TIM_Base_SetConfig+0x138>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d003      	beq.n	8001fd6 <TIM_Base_SetConfig+0xb2>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a23      	ldr	r2, [pc, #140]	; (8002060 <TIM_Base_SetConfig+0x13c>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d108      	bne.n	8001fe8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	68fa      	ldr	r2, [r7, #12]
 8001ffa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a0a      	ldr	r2, [pc, #40]	; (8002038 <TIM_Base_SetConfig+0x114>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d003      	beq.n	800201c <TIM_Base_SetConfig+0xf8>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a0c      	ldr	r2, [pc, #48]	; (8002048 <TIM_Base_SetConfig+0x124>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d103      	bne.n	8002024 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	691a      	ldr	r2, [r3, #16]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	615a      	str	r2, [r3, #20]
}
 800202a:	bf00      	nop
 800202c:	3714      	adds	r7, #20
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	40010000 	.word	0x40010000
 800203c:	40000400 	.word	0x40000400
 8002040:	40000800 	.word	0x40000800
 8002044:	40000c00 	.word	0x40000c00
 8002048:	40010400 	.word	0x40010400
 800204c:	40014000 	.word	0x40014000
 8002050:	40014400 	.word	0x40014400
 8002054:	40014800 	.word	0x40014800
 8002058:	40001800 	.word	0x40001800
 800205c:	40001c00 	.word	0x40001c00
 8002060:	40002000 	.word	0x40002000

08002064 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f103 0208 	add.w	r2, r3, #8
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f04f 32ff 	mov.w	r2, #4294967295
 80020a4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f103 0208 	add.w	r2, r3, #8
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f103 0208 	add.w	r2, r3, #8
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80020da:	bf00      	nop
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80020e6:	b480      	push	{r7}
 80020e8:	b085      	sub	sp, #20
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
 80020ee:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020fc:	d103      	bne.n	8002106 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	e00c      	b.n	8002120 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	3308      	adds	r3, #8
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	e002      	b.n	8002114 <vListInsert+0x2e>
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68ba      	ldr	r2, [r7, #8]
 800211c:	429a      	cmp	r2, r3
 800211e:	d2f6      	bcs.n	800210e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	685a      	ldr	r2, [r3, #4]
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	1c5a      	adds	r2, r3, #1
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	601a      	str	r2, [r3, #0]
}
 800214c:	bf00      	nop
 800214e:	3714      	adds	r7, #20
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	6892      	ldr	r2, [r2, #8]
 800216e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	6852      	ldr	r2, [r2, #4]
 8002178:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	429a      	cmp	r2, r3
 8002182:	d103      	bne.n	800218c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	1e5a      	subs	r2, r3, #1
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3714      	adds	r7, #20
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b08c      	sub	sp, #48	; 0x30
 80021b0:	af04      	add	r7, sp, #16
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	603b      	str	r3, [r7, #0]
 80021b8:	4613      	mov	r3, r2
 80021ba:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80021bc:	88fb      	ldrh	r3, [r7, #6]
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4618      	mov	r0, r3
 80021c2:	f001 f8db 	bl	800337c <pvPortMalloc>
 80021c6:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00e      	beq.n	80021ec <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80021ce:	2058      	movs	r0, #88	; 0x58
 80021d0:	f001 f8d4 	bl	800337c <pvPortMalloc>
 80021d4:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d003      	beq.n	80021e4 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	697a      	ldr	r2, [r7, #20]
 80021e0:	631a      	str	r2, [r3, #48]	; 0x30
 80021e2:	e005      	b.n	80021f0 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 80021e4:	6978      	ldr	r0, [r7, #20]
 80021e6:	f001 f9a9 	bl	800353c <vPortFree>
 80021ea:	e001      	b.n	80021f0 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80021ec:	2300      	movs	r3, #0
 80021ee:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d013      	beq.n	800221e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80021f6:	88fa      	ldrh	r2, [r7, #6]
 80021f8:	2300      	movs	r3, #0
 80021fa:	9303      	str	r3, [sp, #12]
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	9302      	str	r3, [sp, #8]
 8002200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002202:	9301      	str	r3, [sp, #4]
 8002204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002206:	9300      	str	r3, [sp, #0]
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	68b9      	ldr	r1, [r7, #8]
 800220c:	68f8      	ldr	r0, [r7, #12]
 800220e:	f000 f80e 	bl	800222e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002212:	69f8      	ldr	r0, [r7, #28]
 8002214:	f000 f8b0 	bl	8002378 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002218:	2301      	movs	r3, #1
 800221a:	61bb      	str	r3, [r7, #24]
 800221c:	e002      	b.n	8002224 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800221e:	f04f 33ff 	mov.w	r3, #4294967295
 8002222:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002224:	69bb      	ldr	r3, [r7, #24]
    }
 8002226:	4618      	mov	r0, r3
 8002228:	3720      	adds	r7, #32
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b088      	sub	sp, #32
 8002232:	af00      	add	r7, sp, #0
 8002234:	60f8      	str	r0, [r7, #12]
 8002236:	60b9      	str	r1, [r7, #8]
 8002238:	607a      	str	r2, [r7, #4]
 800223a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800223c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800223e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	461a      	mov	r2, r3
 8002246:	21a5      	movs	r1, #165	; 0xa5
 8002248:	f003 fab0 	bl	80057ac <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800224c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800224e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002256:	3b01      	subs	r3, #1
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	4413      	add	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	f023 0307 	bic.w	r3, r3, #7
 8002264:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	f003 0307 	and.w	r3, r3, #7
 800226c:	2b00      	cmp	r3, #0
 800226e:	d00a      	beq.n	8002286 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002274:	f383 8811 	msr	BASEPRI, r3
 8002278:	f3bf 8f6f 	isb	sy
 800227c:	f3bf 8f4f 	dsb	sy
 8002280:	617b      	str	r3, [r7, #20]
    }
 8002282:	bf00      	nop
 8002284:	e7fe      	b.n	8002284 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d01f      	beq.n	80022cc <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800228c:	2300      	movs	r3, #0
 800228e:	61fb      	str	r3, [r7, #28]
 8002290:	e012      	b.n	80022b8 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002292:	68ba      	ldr	r2, [r7, #8]
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	4413      	add	r3, r2
 8002298:	7819      	ldrb	r1, [r3, #0]
 800229a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	4413      	add	r3, r2
 80022a0:	3334      	adds	r3, #52	; 0x34
 80022a2:	460a      	mov	r2, r1
 80022a4:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80022a6:	68ba      	ldr	r2, [r7, #8]
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	4413      	add	r3, r2
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d006      	beq.n	80022c0 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	3301      	adds	r3, #1
 80022b6:	61fb      	str	r3, [r7, #28]
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	2b09      	cmp	r3, #9
 80022bc:	d9e9      	bls.n	8002292 <prvInitialiseNewTask+0x64>
 80022be:	e000      	b.n	80022c2 <prvInitialiseNewTask+0x94>
            {
                break;
 80022c0:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80022c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80022ca:	e003      	b.n	80022d4 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80022cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80022d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d6:	2b04      	cmp	r3, #4
 80022d8:	d90a      	bls.n	80022f0 <prvInitialiseNewTask+0xc2>
        __asm volatile
 80022da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022de:	f383 8811 	msr	BASEPRI, r3
 80022e2:	f3bf 8f6f 	isb	sy
 80022e6:	f3bf 8f4f 	dsb	sy
 80022ea:	613b      	str	r3, [r7, #16]
    }
 80022ec:	bf00      	nop
 80022ee:	e7fe      	b.n	80022ee <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80022f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022f2:	2b04      	cmp	r3, #4
 80022f4:	d901      	bls.n	80022fa <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80022f6:	2304      	movs	r3, #4
 80022f8:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80022fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022fe:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002302:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002304:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002308:	2200      	movs	r2, #0
 800230a:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800230c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800230e:	3304      	adds	r3, #4
 8002310:	4618      	mov	r0, r3
 8002312:	f7ff fedb 	bl	80020cc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002318:	3318      	adds	r3, #24
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff fed6 	bl	80020cc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002322:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002324:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002328:	f1c3 0205 	rsb	r2, r3, #5
 800232c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800232e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002332:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002334:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002338:	3350      	adds	r3, #80	; 0x50
 800233a:	2204      	movs	r2, #4
 800233c:	2100      	movs	r1, #0
 800233e:	4618      	mov	r0, r3
 8002340:	f003 fa34 	bl	80057ac <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002346:	3354      	adds	r3, #84	; 0x54
 8002348:	2201      	movs	r2, #1
 800234a:	2100      	movs	r1, #0
 800234c:	4618      	mov	r0, r3
 800234e:	f003 fa2d 	bl	80057ac <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002352:	683a      	ldr	r2, [r7, #0]
 8002354:	68f9      	ldr	r1, [r7, #12]
 8002356:	69b8      	ldr	r0, [r7, #24]
 8002358:	f000 fd38 	bl	8002dcc <pxPortInitialiseStack>
 800235c:	4602      	mov	r2, r0
 800235e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002360:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002364:	2b00      	cmp	r3, #0
 8002366:	d002      	beq.n	800236e <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800236a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800236c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800236e:	bf00      	nop
 8002370:	3720      	adds	r7, #32
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
	...

08002378 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002378:	b5b0      	push	{r4, r5, r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af02      	add	r7, sp, #8
 800237e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002380:	f000 fed0 	bl	8003124 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002384:	4b4f      	ldr	r3, [pc, #316]	; (80024c4 <prvAddNewTaskToReadyList+0x14c>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	3301      	adds	r3, #1
 800238a:	4a4e      	ldr	r2, [pc, #312]	; (80024c4 <prvAddNewTaskToReadyList+0x14c>)
 800238c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800238e:	4b4e      	ldr	r3, [pc, #312]	; (80024c8 <prvAddNewTaskToReadyList+0x150>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d109      	bne.n	80023aa <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002396:	4a4c      	ldr	r2, [pc, #304]	; (80024c8 <prvAddNewTaskToReadyList+0x150>)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800239c:	4b49      	ldr	r3, [pc, #292]	; (80024c4 <prvAddNewTaskToReadyList+0x14c>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d110      	bne.n	80023c6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80023a4:	f000 fbec 	bl	8002b80 <prvInitialiseTaskLists>
 80023a8:	e00d      	b.n	80023c6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80023aa:	4b48      	ldr	r3, [pc, #288]	; (80024cc <prvAddNewTaskToReadyList+0x154>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d109      	bne.n	80023c6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80023b2:	4b45      	ldr	r3, [pc, #276]	; (80024c8 <prvAddNewTaskToReadyList+0x150>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023bc:	429a      	cmp	r2, r3
 80023be:	d802      	bhi.n	80023c6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80023c0:	4a41      	ldr	r2, [pc, #260]	; (80024c8 <prvAddNewTaskToReadyList+0x150>)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80023c6:	4b42      	ldr	r3, [pc, #264]	; (80024d0 <prvAddNewTaskToReadyList+0x158>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	3301      	adds	r3, #1
 80023cc:	4a40      	ldr	r2, [pc, #256]	; (80024d0 <prvAddNewTaskToReadyList+0x158>)
 80023ce:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80023d0:	4b3f      	ldr	r3, [pc, #252]	; (80024d0 <prvAddNewTaskToReadyList+0x158>)
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d016      	beq.n	800240c <prvAddNewTaskToReadyList+0x94>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f002 ff17 	bl	8005214 <SEGGER_SYSVIEW_OnTaskCreate>
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	461d      	mov	r5, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	461c      	mov	r4, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	1ae3      	subs	r3, r4, r3
 8002404:	9300      	str	r3, [sp, #0]
 8002406:	462b      	mov	r3, r5
 8002408:	f001 fa5e 	bl	80038c8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4618      	mov	r0, r3
 8002410:	f002 ff84 	bl	800531c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002418:	2201      	movs	r2, #1
 800241a:	409a      	lsls	r2, r3
 800241c:	4b2d      	ldr	r3, [pc, #180]	; (80024d4 <prvAddNewTaskToReadyList+0x15c>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4313      	orrs	r3, r2
 8002422:	4a2c      	ldr	r2, [pc, #176]	; (80024d4 <prvAddNewTaskToReadyList+0x15c>)
 8002424:	6013      	str	r3, [r2, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800242a:	492b      	ldr	r1, [pc, #172]	; (80024d8 <prvAddNewTaskToReadyList+0x160>)
 800242c:	4613      	mov	r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	4413      	add	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	440b      	add	r3, r1
 8002436:	3304      	adds	r3, #4
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	609a      	str	r2, [r3, #8]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	689a      	ldr	r2, [r3, #8]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	60da      	str	r2, [r3, #12]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	3204      	adds	r2, #4
 8002452:	605a      	str	r2, [r3, #4]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	1d1a      	adds	r2, r3, #4
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	609a      	str	r2, [r3, #8]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002460:	4613      	mov	r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	4413      	add	r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	4a1b      	ldr	r2, [pc, #108]	; (80024d8 <prvAddNewTaskToReadyList+0x160>)
 800246a:	441a      	add	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	615a      	str	r2, [r3, #20]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002474:	4918      	ldr	r1, [pc, #96]	; (80024d8 <prvAddNewTaskToReadyList+0x160>)
 8002476:	4613      	mov	r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	4413      	add	r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	440b      	add	r3, r1
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	1c59      	adds	r1, r3, #1
 8002484:	4814      	ldr	r0, [pc, #80]	; (80024d8 <prvAddNewTaskToReadyList+0x160>)
 8002486:	4613      	mov	r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	4413      	add	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4403      	add	r3, r0
 8002490:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002492:	f000 fe77 	bl	8003184 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002496:	4b0d      	ldr	r3, [pc, #52]	; (80024cc <prvAddNewTaskToReadyList+0x154>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d00e      	beq.n	80024bc <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800249e:	4b0a      	ldr	r3, [pc, #40]	; (80024c8 <prvAddNewTaskToReadyList+0x150>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d207      	bcs.n	80024bc <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80024ac:	4b0b      	ldr	r3, [pc, #44]	; (80024dc <prvAddNewTaskToReadyList+0x164>)
 80024ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	f3bf 8f4f 	dsb	sy
 80024b8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80024bc:	bf00      	nop
 80024be:	3710      	adds	r7, #16
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bdb0      	pop	{r4, r5, r7, pc}
 80024c4:	20000110 	.word	0x20000110
 80024c8:	20000038 	.word	0x20000038
 80024cc:	2000011c 	.word	0x2000011c
 80024d0:	2000012c 	.word	0x2000012c
 80024d4:	20000118 	.word	0x20000118
 80024d8:	2000003c 	.word	0x2000003c
 80024dc:	e000ed04 	.word	0xe000ed04

080024e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80024e8:	2300      	movs	r3, #0
 80024ea:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d01b      	beq.n	800252a <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80024f2:	4b15      	ldr	r3, [pc, #84]	; (8002548 <vTaskDelay+0x68>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00a      	beq.n	8002510 <vTaskDelay+0x30>
        __asm volatile
 80024fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024fe:	f383 8811 	msr	BASEPRI, r3
 8002502:	f3bf 8f6f 	isb	sy
 8002506:	f3bf 8f4f 	dsb	sy
 800250a:	60bb      	str	r3, [r7, #8]
    }
 800250c:	bf00      	nop
 800250e:	e7fe      	b.n	800250e <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002510:	f000 f87a 	bl	8002608 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8002514:	6879      	ldr	r1, [r7, #4]
 8002516:	2023      	movs	r0, #35	; 0x23
 8002518:	f002 fa86 	bl	8004a28 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800251c:	2100      	movs	r1, #0
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 fbc8 	bl	8002cb4 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002524:	f000 f87e 	bl	8002624 <xTaskResumeAll>
 8002528:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d107      	bne.n	8002540 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8002530:	4b06      	ldr	r3, [pc, #24]	; (800254c <vTaskDelay+0x6c>)
 8002532:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	f3bf 8f4f 	dsb	sy
 800253c:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002540:	bf00      	nop
 8002542:	3710      	adds	r7, #16
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	20000138 	.word	0x20000138
 800254c:	e000ed04 	.word	0xe000ed04

08002550 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002556:	4b24      	ldr	r3, [pc, #144]	; (80025e8 <vTaskStartScheduler+0x98>)
 8002558:	9301      	str	r3, [sp, #4]
 800255a:	2300      	movs	r3, #0
 800255c:	9300      	str	r3, [sp, #0]
 800255e:	2300      	movs	r3, #0
 8002560:	2282      	movs	r2, #130	; 0x82
 8002562:	4922      	ldr	r1, [pc, #136]	; (80025ec <vTaskStartScheduler+0x9c>)
 8002564:	4822      	ldr	r0, [pc, #136]	; (80025f0 <vTaskStartScheduler+0xa0>)
 8002566:	f7ff fe21 	bl	80021ac <xTaskCreate>
 800256a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d124      	bne.n	80025bc <vTaskStartScheduler+0x6c>
        __asm volatile
 8002572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002576:	f383 8811 	msr	BASEPRI, r3
 800257a:	f3bf 8f6f 	isb	sy
 800257e:	f3bf 8f4f 	dsb	sy
 8002582:	60bb      	str	r3, [r7, #8]
    }
 8002584:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002586:	4b1b      	ldr	r3, [pc, #108]	; (80025f4 <vTaskStartScheduler+0xa4>)
 8002588:	f04f 32ff 	mov.w	r2, #4294967295
 800258c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800258e:	4b1a      	ldr	r3, [pc, #104]	; (80025f8 <vTaskStartScheduler+0xa8>)
 8002590:	2201      	movs	r2, #1
 8002592:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002594:	4b19      	ldr	r3, [pc, #100]	; (80025fc <vTaskStartScheduler+0xac>)
 8002596:	2200      	movs	r2, #0
 8002598:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800259a:	4b19      	ldr	r3, [pc, #100]	; (8002600 <vTaskStartScheduler+0xb0>)
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	4b12      	ldr	r3, [pc, #72]	; (80025e8 <vTaskStartScheduler+0x98>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d102      	bne.n	80025ac <vTaskStartScheduler+0x5c>
 80025a6:	f002 fe19 	bl	80051dc <SEGGER_SYSVIEW_OnIdle>
 80025aa:	e004      	b.n	80025b6 <vTaskStartScheduler+0x66>
 80025ac:	4b14      	ldr	r3, [pc, #80]	; (8002600 <vTaskStartScheduler+0xb0>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f002 fe71 	bl	8005298 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80025b6:	f000 fc95 	bl	8002ee4 <xPortStartScheduler>
 80025ba:	e00e      	b.n	80025da <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c2:	d10a      	bne.n	80025da <vTaskStartScheduler+0x8a>
        __asm volatile
 80025c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025c8:	f383 8811 	msr	BASEPRI, r3
 80025cc:	f3bf 8f6f 	isb	sy
 80025d0:	f3bf 8f4f 	dsb	sy
 80025d4:	607b      	str	r3, [r7, #4]
    }
 80025d6:	bf00      	nop
 80025d8:	e7fe      	b.n	80025d8 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80025da:	4b0a      	ldr	r3, [pc, #40]	; (8002604 <vTaskStartScheduler+0xb4>)
 80025dc:	681b      	ldr	r3, [r3, #0]
}
 80025de:	bf00      	nop
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	20000134 	.word	0x20000134
 80025ec:	08005804 	.word	0x08005804
 80025f0:	08002b51 	.word	0x08002b51
 80025f4:	20000130 	.word	0x20000130
 80025f8:	2000011c 	.word	0x2000011c
 80025fc:	20000114 	.word	0x20000114
 8002600:	20000038 	.word	0x20000038
 8002604:	2000000c 	.word	0x2000000c

08002608 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800260c:	4b04      	ldr	r3, [pc, #16]	; (8002620 <vTaskSuspendAll+0x18>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	3301      	adds	r3, #1
 8002612:	4a03      	ldr	r2, [pc, #12]	; (8002620 <vTaskSuspendAll+0x18>)
 8002614:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002616:	bf00      	nop
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr
 8002620:	20000138 	.word	0x20000138

08002624 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b088      	sub	sp, #32
 8002628:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800262a:	2300      	movs	r3, #0
 800262c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800262e:	2300      	movs	r3, #0
 8002630:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002632:	4b73      	ldr	r3, [pc, #460]	; (8002800 <xTaskResumeAll+0x1dc>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d10a      	bne.n	8002650 <xTaskResumeAll+0x2c>
        __asm volatile
 800263a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800263e:	f383 8811 	msr	BASEPRI, r3
 8002642:	f3bf 8f6f 	isb	sy
 8002646:	f3bf 8f4f 	dsb	sy
 800264a:	607b      	str	r3, [r7, #4]
    }
 800264c:	bf00      	nop
 800264e:	e7fe      	b.n	800264e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002650:	f000 fd68 	bl	8003124 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002654:	4b6a      	ldr	r3, [pc, #424]	; (8002800 <xTaskResumeAll+0x1dc>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	3b01      	subs	r3, #1
 800265a:	4a69      	ldr	r2, [pc, #420]	; (8002800 <xTaskResumeAll+0x1dc>)
 800265c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800265e:	4b68      	ldr	r3, [pc, #416]	; (8002800 <xTaskResumeAll+0x1dc>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2b00      	cmp	r3, #0
 8002664:	f040 80c4 	bne.w	80027f0 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002668:	4b66      	ldr	r3, [pc, #408]	; (8002804 <xTaskResumeAll+0x1e0>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2b00      	cmp	r3, #0
 800266e:	f000 80bf 	beq.w	80027f0 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002672:	e08e      	b.n	8002792 <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002674:	4b64      	ldr	r3, [pc, #400]	; (8002808 <xTaskResumeAll+0x1e4>)
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002680:	613b      	str	r3, [r7, #16]
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	69db      	ldr	r3, [r3, #28]
 8002686:	69fa      	ldr	r2, [r7, #28]
 8002688:	6a12      	ldr	r2, [r2, #32]
 800268a:	609a      	str	r2, [r3, #8]
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	6a1b      	ldr	r3, [r3, #32]
 8002690:	69fa      	ldr	r2, [r7, #28]
 8002692:	69d2      	ldr	r2, [r2, #28]
 8002694:	605a      	str	r2, [r3, #4]
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	3318      	adds	r3, #24
 800269e:	429a      	cmp	r2, r3
 80026a0:	d103      	bne.n	80026aa <xTaskResumeAll+0x86>
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	6a1a      	ldr	r2, [r3, #32]
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	605a      	str	r2, [r3, #4]
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	2200      	movs	r2, #0
 80026ae:	629a      	str	r2, [r3, #40]	; 0x28
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	1e5a      	subs	r2, r3, #1
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	69fa      	ldr	r2, [r7, #28]
 80026c6:	68d2      	ldr	r2, [r2, #12]
 80026c8:	609a      	str	r2, [r3, #8]
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	69fa      	ldr	r2, [r7, #28]
 80026d0:	6892      	ldr	r2, [r2, #8]
 80026d2:	605a      	str	r2, [r3, #4]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	685a      	ldr	r2, [r3, #4]
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	3304      	adds	r3, #4
 80026dc:	429a      	cmp	r2, r3
 80026de:	d103      	bne.n	80026e8 <xTaskResumeAll+0xc4>
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	68da      	ldr	r2, [r3, #12]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	605a      	str	r2, [r3, #4]
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	2200      	movs	r2, #0
 80026ec:	615a      	str	r2, [r3, #20]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	1e5a      	subs	r2, r3, #1
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f002 fe0e 	bl	800531c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002704:	2201      	movs	r2, #1
 8002706:	409a      	lsls	r2, r3
 8002708:	4b40      	ldr	r3, [pc, #256]	; (800280c <xTaskResumeAll+0x1e8>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4313      	orrs	r3, r2
 800270e:	4a3f      	ldr	r2, [pc, #252]	; (800280c <xTaskResumeAll+0x1e8>)
 8002710:	6013      	str	r3, [r2, #0]
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002716:	493e      	ldr	r1, [pc, #248]	; (8002810 <xTaskResumeAll+0x1ec>)
 8002718:	4613      	mov	r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	4413      	add	r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	440b      	add	r3, r1
 8002722:	3304      	adds	r3, #4
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	60bb      	str	r3, [r7, #8]
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	68ba      	ldr	r2, [r7, #8]
 800272c:	609a      	str	r2, [r3, #8]
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	689a      	ldr	r2, [r3, #8]
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	60da      	str	r2, [r3, #12]
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	69fa      	ldr	r2, [r7, #28]
 800273c:	3204      	adds	r2, #4
 800273e:	605a      	str	r2, [r3, #4]
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	1d1a      	adds	r2, r3, #4
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	609a      	str	r2, [r3, #8]
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800274c:	4613      	mov	r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	4413      	add	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	4a2e      	ldr	r2, [pc, #184]	; (8002810 <xTaskResumeAll+0x1ec>)
 8002756:	441a      	add	r2, r3
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	615a      	str	r2, [r3, #20]
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002760:	492b      	ldr	r1, [pc, #172]	; (8002810 <xTaskResumeAll+0x1ec>)
 8002762:	4613      	mov	r3, r2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	4413      	add	r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	440b      	add	r3, r1
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	1c59      	adds	r1, r3, #1
 8002770:	4827      	ldr	r0, [pc, #156]	; (8002810 <xTaskResumeAll+0x1ec>)
 8002772:	4613      	mov	r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	4413      	add	r3, r2
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	4403      	add	r3, r0
 800277c:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002782:	4b24      	ldr	r3, [pc, #144]	; (8002814 <xTaskResumeAll+0x1f0>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002788:	429a      	cmp	r2, r3
 800278a:	d302      	bcc.n	8002792 <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 800278c:	4b22      	ldr	r3, [pc, #136]	; (8002818 <xTaskResumeAll+0x1f4>)
 800278e:	2201      	movs	r2, #1
 8002790:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002792:	4b1d      	ldr	r3, [pc, #116]	; (8002808 <xTaskResumeAll+0x1e4>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2b00      	cmp	r3, #0
 8002798:	f47f af6c 	bne.w	8002674 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80027a2:	f000 fa6b 	bl	8002c7c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80027a6:	4b1d      	ldr	r3, [pc, #116]	; (800281c <xTaskResumeAll+0x1f8>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d010      	beq.n	80027d4 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80027b2:	f000 f849 	bl	8002848 <xTaskIncrementTick>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d002      	beq.n	80027c2 <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 80027bc:	4b16      	ldr	r3, [pc, #88]	; (8002818 <xTaskResumeAll+0x1f4>)
 80027be:	2201      	movs	r2, #1
 80027c0:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	3b01      	subs	r3, #1
 80027c6:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1f1      	bne.n	80027b2 <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 80027ce:	4b13      	ldr	r3, [pc, #76]	; (800281c <xTaskResumeAll+0x1f8>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80027d4:	4b10      	ldr	r3, [pc, #64]	; (8002818 <xTaskResumeAll+0x1f4>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d009      	beq.n	80027f0 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80027dc:	2301      	movs	r3, #1
 80027de:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80027e0:	4b0f      	ldr	r3, [pc, #60]	; (8002820 <xTaskResumeAll+0x1fc>)
 80027e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	f3bf 8f4f 	dsb	sy
 80027ec:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80027f0:	f000 fcc8 	bl	8003184 <vPortExitCritical>

    return xAlreadyYielded;
 80027f4:	69bb      	ldr	r3, [r7, #24]
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3720      	adds	r7, #32
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	20000138 	.word	0x20000138
 8002804:	20000110 	.word	0x20000110
 8002808:	200000d0 	.word	0x200000d0
 800280c:	20000118 	.word	0x20000118
 8002810:	2000003c 	.word	0x2000003c
 8002814:	20000038 	.word	0x20000038
 8002818:	20000124 	.word	0x20000124
 800281c:	20000120 	.word	0x20000120
 8002820:	e000ed04 	.word	0xe000ed04

08002824 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800282a:	f000 fd67 	bl	80032fc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800282e:	2300      	movs	r3, #0
 8002830:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002832:	4b04      	ldr	r3, [pc, #16]	; (8002844 <xTaskGetTickCountFromISR+0x20>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002838:	683b      	ldr	r3, [r7, #0]
}
 800283a:	4618      	mov	r0, r3
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	20000114 	.word	0x20000114

08002848 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b08a      	sub	sp, #40	; 0x28
 800284c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800284e:	2300      	movs	r3, #0
 8002850:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002852:	4b7f      	ldr	r3, [pc, #508]	; (8002a50 <xTaskIncrementTick+0x208>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2b00      	cmp	r3, #0
 8002858:	f040 80f0 	bne.w	8002a3c <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800285c:	4b7d      	ldr	r3, [pc, #500]	; (8002a54 <xTaskIncrementTick+0x20c>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	3301      	adds	r3, #1
 8002862:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002864:	4a7b      	ldr	r2, [pc, #492]	; (8002a54 <xTaskIncrementTick+0x20c>)
 8002866:	6a3b      	ldr	r3, [r7, #32]
 8002868:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800286a:	6a3b      	ldr	r3, [r7, #32]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d120      	bne.n	80028b2 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002870:	4b79      	ldr	r3, [pc, #484]	; (8002a58 <xTaskIncrementTick+0x210>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00a      	beq.n	8002890 <xTaskIncrementTick+0x48>
        __asm volatile
 800287a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800287e:	f383 8811 	msr	BASEPRI, r3
 8002882:	f3bf 8f6f 	isb	sy
 8002886:	f3bf 8f4f 	dsb	sy
 800288a:	607b      	str	r3, [r7, #4]
    }
 800288c:	bf00      	nop
 800288e:	e7fe      	b.n	800288e <xTaskIncrementTick+0x46>
 8002890:	4b71      	ldr	r3, [pc, #452]	; (8002a58 <xTaskIncrementTick+0x210>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	61fb      	str	r3, [r7, #28]
 8002896:	4b71      	ldr	r3, [pc, #452]	; (8002a5c <xTaskIncrementTick+0x214>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a6f      	ldr	r2, [pc, #444]	; (8002a58 <xTaskIncrementTick+0x210>)
 800289c:	6013      	str	r3, [r2, #0]
 800289e:	4a6f      	ldr	r2, [pc, #444]	; (8002a5c <xTaskIncrementTick+0x214>)
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	6013      	str	r3, [r2, #0]
 80028a4:	4b6e      	ldr	r3, [pc, #440]	; (8002a60 <xTaskIncrementTick+0x218>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	3301      	adds	r3, #1
 80028aa:	4a6d      	ldr	r2, [pc, #436]	; (8002a60 <xTaskIncrementTick+0x218>)
 80028ac:	6013      	str	r3, [r2, #0]
 80028ae:	f000 f9e5 	bl	8002c7c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80028b2:	4b6c      	ldr	r3, [pc, #432]	; (8002a64 <xTaskIncrementTick+0x21c>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	6a3a      	ldr	r2, [r7, #32]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	f0c0 80aa 	bcc.w	8002a12 <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80028be:	4b66      	ldr	r3, [pc, #408]	; (8002a58 <xTaskIncrementTick+0x210>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d104      	bne.n	80028d2 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028c8:	4b66      	ldr	r3, [pc, #408]	; (8002a64 <xTaskIncrementTick+0x21c>)
 80028ca:	f04f 32ff 	mov.w	r2, #4294967295
 80028ce:	601a      	str	r2, [r3, #0]
                    break;
 80028d0:	e09f      	b.n	8002a12 <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80028d2:	4b61      	ldr	r3, [pc, #388]	; (8002a58 <xTaskIncrementTick+0x210>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80028e2:	6a3a      	ldr	r2, [r7, #32]
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d203      	bcs.n	80028f2 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80028ea:	4a5e      	ldr	r2, [pc, #376]	; (8002a64 <xTaskIncrementTick+0x21c>)
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80028f0:	e08f      	b.n	8002a12 <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	695b      	ldr	r3, [r3, #20]
 80028f6:	613b      	str	r3, [r7, #16]
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	68d2      	ldr	r2, [r2, #12]
 8002900:	609a      	str	r2, [r3, #8]
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	6892      	ldr	r2, [r2, #8]
 800290a:	605a      	str	r2, [r3, #4]
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	3304      	adds	r3, #4
 8002914:	429a      	cmp	r2, r3
 8002916:	d103      	bne.n	8002920 <xTaskIncrementTick+0xd8>
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	68da      	ldr	r2, [r3, #12]
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	605a      	str	r2, [r3, #4]
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	2200      	movs	r2, #0
 8002924:	615a      	str	r2, [r3, #20]
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	1e5a      	subs	r2, r3, #1
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002934:	2b00      	cmp	r3, #0
 8002936:	d01e      	beq.n	8002976 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800293c:	60fb      	str	r3, [r7, #12]
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	69db      	ldr	r3, [r3, #28]
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	6a12      	ldr	r2, [r2, #32]
 8002946:	609a      	str	r2, [r3, #8]
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	6a1b      	ldr	r3, [r3, #32]
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	69d2      	ldr	r2, [r2, #28]
 8002950:	605a      	str	r2, [r3, #4]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	685a      	ldr	r2, [r3, #4]
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	3318      	adds	r3, #24
 800295a:	429a      	cmp	r2, r3
 800295c:	d103      	bne.n	8002966 <xTaskIncrementTick+0x11e>
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	6a1a      	ldr	r2, [r3, #32]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	605a      	str	r2, [r3, #4]
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	2200      	movs	r2, #0
 800296a:	629a      	str	r2, [r3, #40]	; 0x28
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	1e5a      	subs	r2, r3, #1
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	4618      	mov	r0, r3
 800297a:	f002 fccf 	bl	800531c <SEGGER_SYSVIEW_OnTaskStartReady>
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002982:	2201      	movs	r2, #1
 8002984:	409a      	lsls	r2, r3
 8002986:	4b38      	ldr	r3, [pc, #224]	; (8002a68 <xTaskIncrementTick+0x220>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4313      	orrs	r3, r2
 800298c:	4a36      	ldr	r2, [pc, #216]	; (8002a68 <xTaskIncrementTick+0x220>)
 800298e:	6013      	str	r3, [r2, #0]
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002994:	4935      	ldr	r1, [pc, #212]	; (8002a6c <xTaskIncrementTick+0x224>)
 8002996:	4613      	mov	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	4413      	add	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	440b      	add	r3, r1
 80029a0:	3304      	adds	r3, #4
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	60bb      	str	r3, [r7, #8]
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	68ba      	ldr	r2, [r7, #8]
 80029aa:	609a      	str	r2, [r3, #8]
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	689a      	ldr	r2, [r3, #8]
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	60da      	str	r2, [r3, #12]
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	3204      	adds	r2, #4
 80029bc:	605a      	str	r2, [r3, #4]
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	1d1a      	adds	r2, r3, #4
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	609a      	str	r2, [r3, #8]
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029ca:	4613      	mov	r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	4413      	add	r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	4a26      	ldr	r2, [pc, #152]	; (8002a6c <xTaskIncrementTick+0x224>)
 80029d4:	441a      	add	r2, r3
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	615a      	str	r2, [r3, #20]
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029de:	4923      	ldr	r1, [pc, #140]	; (8002a6c <xTaskIncrementTick+0x224>)
 80029e0:	4613      	mov	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	4413      	add	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	440b      	add	r3, r1
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	1c59      	adds	r1, r3, #1
 80029ee:	481f      	ldr	r0, [pc, #124]	; (8002a6c <xTaskIncrementTick+0x224>)
 80029f0:	4613      	mov	r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	4413      	add	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	4403      	add	r3, r0
 80029fa:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a00:	4b1b      	ldr	r3, [pc, #108]	; (8002a70 <xTaskIncrementTick+0x228>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a06:	429a      	cmp	r2, r3
 8002a08:	f4ff af59 	bcc.w	80028be <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a10:	e755      	b.n	80028be <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002a12:	4b17      	ldr	r3, [pc, #92]	; (8002a70 <xTaskIncrementTick+0x228>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a18:	4914      	ldr	r1, [pc, #80]	; (8002a6c <xTaskIncrementTick+0x224>)
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	4413      	add	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	440b      	add	r3, r1
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d901      	bls.n	8002a2e <xTaskIncrementTick+0x1e6>
                {
                    xSwitchRequired = pdTRUE;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002a2e:	4b11      	ldr	r3, [pc, #68]	; (8002a74 <xTaskIncrementTick+0x22c>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d007      	beq.n	8002a46 <xTaskIncrementTick+0x1fe>
                {
                    xSwitchRequired = pdTRUE;
 8002a36:	2301      	movs	r3, #1
 8002a38:	627b      	str	r3, [r7, #36]	; 0x24
 8002a3a:	e004      	b.n	8002a46 <xTaskIncrementTick+0x1fe>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002a3c:	4b0e      	ldr	r3, [pc, #56]	; (8002a78 <xTaskIncrementTick+0x230>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	3301      	adds	r3, #1
 8002a42:	4a0d      	ldr	r2, [pc, #52]	; (8002a78 <xTaskIncrementTick+0x230>)
 8002a44:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3728      	adds	r7, #40	; 0x28
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	20000138 	.word	0x20000138
 8002a54:	20000114 	.word	0x20000114
 8002a58:	200000c8 	.word	0x200000c8
 8002a5c:	200000cc 	.word	0x200000cc
 8002a60:	20000128 	.word	0x20000128
 8002a64:	20000130 	.word	0x20000130
 8002a68:	20000118 	.word	0x20000118
 8002a6c:	2000003c 	.word	0x2000003c
 8002a70:	20000038 	.word	0x20000038
 8002a74:	20000124 	.word	0x20000124
 8002a78:	20000120 	.word	0x20000120

08002a7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002a82:	4b2d      	ldr	r3, [pc, #180]	; (8002b38 <vTaskSwitchContext+0xbc>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d003      	beq.n	8002a92 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002a8a:	4b2c      	ldr	r3, [pc, #176]	; (8002b3c <vTaskSwitchContext+0xc0>)
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002a90:	e04d      	b.n	8002b2e <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002a92:	4b2a      	ldr	r3, [pc, #168]	; (8002b3c <vTaskSwitchContext+0xc0>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a98:	4b29      	ldr	r3, [pc, #164]	; (8002b40 <vTaskSwitchContext+0xc4>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	fab3 f383 	clz	r3, r3
 8002aa4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002aa6:	7afb      	ldrb	r3, [r7, #11]
 8002aa8:	f1c3 031f 	rsb	r3, r3, #31
 8002aac:	617b      	str	r3, [r7, #20]
 8002aae:	4925      	ldr	r1, [pc, #148]	; (8002b44 <vTaskSwitchContext+0xc8>)
 8002ab0:	697a      	ldr	r2, [r7, #20]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	4413      	add	r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	440b      	add	r3, r1
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d10a      	bne.n	8002ad8 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ac6:	f383 8811 	msr	BASEPRI, r3
 8002aca:	f3bf 8f6f 	isb	sy
 8002ace:	f3bf 8f4f 	dsb	sy
 8002ad2:	607b      	str	r3, [r7, #4]
    }
 8002ad4:	bf00      	nop
 8002ad6:	e7fe      	b.n	8002ad6 <vTaskSwitchContext+0x5a>
 8002ad8:	697a      	ldr	r2, [r7, #20]
 8002ada:	4613      	mov	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	4413      	add	r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	4a18      	ldr	r2, [pc, #96]	; (8002b44 <vTaskSwitchContext+0xc8>)
 8002ae4:	4413      	add	r3, r2
 8002ae6:	613b      	str	r3, [r7, #16]
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	685a      	ldr	r2, [r3, #4]
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	605a      	str	r2, [r3, #4]
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	685a      	ldr	r2, [r3, #4]
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	3308      	adds	r3, #8
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d104      	bne.n	8002b08 <vTaskSwitchContext+0x8c>
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	685a      	ldr	r2, [r3, #4]
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	605a      	str	r2, [r3, #4]
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	4a0e      	ldr	r2, [pc, #56]	; (8002b48 <vTaskSwitchContext+0xcc>)
 8002b10:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002b12:	4b0d      	ldr	r3, [pc, #52]	; (8002b48 <vTaskSwitchContext+0xcc>)
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	4b0d      	ldr	r3, [pc, #52]	; (8002b4c <vTaskSwitchContext+0xd0>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d102      	bne.n	8002b24 <vTaskSwitchContext+0xa8>
 8002b1e:	f002 fb5d 	bl	80051dc <SEGGER_SYSVIEW_OnIdle>
}
 8002b22:	e004      	b.n	8002b2e <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002b24:	4b08      	ldr	r3, [pc, #32]	; (8002b48 <vTaskSwitchContext+0xcc>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f002 fbb5 	bl	8005298 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002b2e:	bf00      	nop
 8002b30:	3718      	adds	r7, #24
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	20000138 	.word	0x20000138
 8002b3c:	20000124 	.word	0x20000124
 8002b40:	20000118 	.word	0x20000118
 8002b44:	2000003c 	.word	0x2000003c
 8002b48:	20000038 	.word	0x20000038
 8002b4c:	20000134 	.word	0x20000134

08002b50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002b58:	f000 f852 	bl	8002c00 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002b5c:	4b06      	ldr	r3, [pc, #24]	; (8002b78 <prvIdleTask+0x28>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d9f9      	bls.n	8002b58 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002b64:	4b05      	ldr	r3, [pc, #20]	; (8002b7c <prvIdleTask+0x2c>)
 8002b66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b6a:	601a      	str	r2, [r3, #0]
 8002b6c:	f3bf 8f4f 	dsb	sy
 8002b70:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002b74:	e7f0      	b.n	8002b58 <prvIdleTask+0x8>
 8002b76:	bf00      	nop
 8002b78:	2000003c 	.word	0x2000003c
 8002b7c:	e000ed04 	.word	0xe000ed04

08002b80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002b86:	2300      	movs	r3, #0
 8002b88:	607b      	str	r3, [r7, #4]
 8002b8a:	e00c      	b.n	8002ba6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	4413      	add	r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	4a12      	ldr	r2, [pc, #72]	; (8002be0 <prvInitialiseTaskLists+0x60>)
 8002b98:	4413      	add	r3, r2
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7ff fa76 	bl	800208c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	607b      	str	r3, [r7, #4]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2b04      	cmp	r3, #4
 8002baa:	d9ef      	bls.n	8002b8c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002bac:	480d      	ldr	r0, [pc, #52]	; (8002be4 <prvInitialiseTaskLists+0x64>)
 8002bae:	f7ff fa6d 	bl	800208c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002bb2:	480d      	ldr	r0, [pc, #52]	; (8002be8 <prvInitialiseTaskLists+0x68>)
 8002bb4:	f7ff fa6a 	bl	800208c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002bb8:	480c      	ldr	r0, [pc, #48]	; (8002bec <prvInitialiseTaskLists+0x6c>)
 8002bba:	f7ff fa67 	bl	800208c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002bbe:	480c      	ldr	r0, [pc, #48]	; (8002bf0 <prvInitialiseTaskLists+0x70>)
 8002bc0:	f7ff fa64 	bl	800208c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002bc4:	480b      	ldr	r0, [pc, #44]	; (8002bf4 <prvInitialiseTaskLists+0x74>)
 8002bc6:	f7ff fa61 	bl	800208c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002bca:	4b0b      	ldr	r3, [pc, #44]	; (8002bf8 <prvInitialiseTaskLists+0x78>)
 8002bcc:	4a05      	ldr	r2, [pc, #20]	; (8002be4 <prvInitialiseTaskLists+0x64>)
 8002bce:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002bd0:	4b0a      	ldr	r3, [pc, #40]	; (8002bfc <prvInitialiseTaskLists+0x7c>)
 8002bd2:	4a05      	ldr	r2, [pc, #20]	; (8002be8 <prvInitialiseTaskLists+0x68>)
 8002bd4:	601a      	str	r2, [r3, #0]
}
 8002bd6:	bf00      	nop
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	2000003c 	.word	0x2000003c
 8002be4:	200000a0 	.word	0x200000a0
 8002be8:	200000b4 	.word	0x200000b4
 8002bec:	200000d0 	.word	0x200000d0
 8002bf0:	200000e4 	.word	0x200000e4
 8002bf4:	200000fc 	.word	0x200000fc
 8002bf8:	200000c8 	.word	0x200000c8
 8002bfc:	200000cc 	.word	0x200000cc

08002c00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002c06:	e019      	b.n	8002c3c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002c08:	f000 fa8c 	bl	8003124 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c0c:	4b10      	ldr	r3, [pc, #64]	; (8002c50 <prvCheckTasksWaitingTermination+0x50>)
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	3304      	adds	r3, #4
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7ff fa9d 	bl	8002158 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002c1e:	4b0d      	ldr	r3, [pc, #52]	; (8002c54 <prvCheckTasksWaitingTermination+0x54>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	3b01      	subs	r3, #1
 8002c24:	4a0b      	ldr	r2, [pc, #44]	; (8002c54 <prvCheckTasksWaitingTermination+0x54>)
 8002c26:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002c28:	4b0b      	ldr	r3, [pc, #44]	; (8002c58 <prvCheckTasksWaitingTermination+0x58>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	4a0a      	ldr	r2, [pc, #40]	; (8002c58 <prvCheckTasksWaitingTermination+0x58>)
 8002c30:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002c32:	f000 faa7 	bl	8003184 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 f810 	bl	8002c5c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002c3c:	4b06      	ldr	r3, [pc, #24]	; (8002c58 <prvCheckTasksWaitingTermination+0x58>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1e1      	bne.n	8002c08 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002c44:	bf00      	nop
 8002c46:	bf00      	nop
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	200000e4 	.word	0x200000e4
 8002c54:	20000110 	.word	0x20000110
 8002c58:	200000f8 	.word	0x200000f8

08002c5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f000 fc67 	bl	800353c <vPortFree>
                vPortFree( pxTCB );
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 fc64 	bl	800353c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002c74:	bf00      	nop
 8002c76:	3708      	adds	r7, #8
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c80:	4b0a      	ldr	r3, [pc, #40]	; (8002cac <prvResetNextTaskUnblockTime+0x30>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d104      	bne.n	8002c94 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002c8a:	4b09      	ldr	r3, [pc, #36]	; (8002cb0 <prvResetNextTaskUnblockTime+0x34>)
 8002c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c90:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002c92:	e005      	b.n	8002ca0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002c94:	4b05      	ldr	r3, [pc, #20]	; (8002cac <prvResetNextTaskUnblockTime+0x30>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a04      	ldr	r2, [pc, #16]	; (8002cb0 <prvResetNextTaskUnblockTime+0x34>)
 8002c9e:	6013      	str	r3, [r2, #0]
}
 8002ca0:	bf00      	nop
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	200000c8 	.word	0x200000c8
 8002cb0:	20000130 	.word	0x20000130

08002cb4 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002cbe:	4b3c      	ldr	r3, [pc, #240]	; (8002db0 <prvAddCurrentTaskToDelayedList+0xfc>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002cc4:	4b3b      	ldr	r3, [pc, #236]	; (8002db4 <prvAddCurrentTaskToDelayedList+0x100>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	3304      	adds	r3, #4
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7ff fa44 	bl	8002158 <uxListRemove>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d10b      	bne.n	8002cee <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002cd6:	4b37      	ldr	r3, [pc, #220]	; (8002db4 <prvAddCurrentTaskToDelayedList+0x100>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cdc:	2201      	movs	r2, #1
 8002cde:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce2:	43da      	mvns	r2, r3
 8002ce4:	4b34      	ldr	r3, [pc, #208]	; (8002db8 <prvAddCurrentTaskToDelayedList+0x104>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	4a33      	ldr	r2, [pc, #204]	; (8002db8 <prvAddCurrentTaskToDelayedList+0x104>)
 8002cec:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf4:	d124      	bne.n	8002d40 <prvAddCurrentTaskToDelayedList+0x8c>
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d021      	beq.n	8002d40 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002cfc:	4b2f      	ldr	r3, [pc, #188]	; (8002dbc <prvAddCurrentTaskToDelayedList+0x108>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	613b      	str	r3, [r7, #16]
 8002d02:	4b2c      	ldr	r3, [pc, #176]	; (8002db4 <prvAddCurrentTaskToDelayedList+0x100>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	609a      	str	r2, [r3, #8]
 8002d0a:	4b2a      	ldr	r3, [pc, #168]	; (8002db4 <prvAddCurrentTaskToDelayedList+0x100>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	6892      	ldr	r2, [r2, #8]
 8002d12:	60da      	str	r2, [r3, #12]
 8002d14:	4b27      	ldr	r3, [pc, #156]	; (8002db4 <prvAddCurrentTaskToDelayedList+0x100>)
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	3204      	adds	r2, #4
 8002d1e:	605a      	str	r2, [r3, #4]
 8002d20:	4b24      	ldr	r3, [pc, #144]	; (8002db4 <prvAddCurrentTaskToDelayedList+0x100>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	1d1a      	adds	r2, r3, #4
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	609a      	str	r2, [r3, #8]
 8002d2a:	4b22      	ldr	r3, [pc, #136]	; (8002db4 <prvAddCurrentTaskToDelayedList+0x100>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a23      	ldr	r2, [pc, #140]	; (8002dbc <prvAddCurrentTaskToDelayedList+0x108>)
 8002d30:	615a      	str	r2, [r3, #20]
 8002d32:	4b22      	ldr	r3, [pc, #136]	; (8002dbc <prvAddCurrentTaskToDelayedList+0x108>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	3301      	adds	r3, #1
 8002d38:	4a20      	ldr	r2, [pc, #128]	; (8002dbc <prvAddCurrentTaskToDelayedList+0x108>)
 8002d3a:	6013      	str	r3, [r2, #0]
 8002d3c:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002d3e:	e032      	b.n	8002da6 <prvAddCurrentTaskToDelayedList+0xf2>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8002d40:	697a      	ldr	r2, [r7, #20]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4413      	add	r3, r2
 8002d46:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002d48:	4b1a      	ldr	r3, [pc, #104]	; (8002db4 <prvAddCurrentTaskToDelayedList+0x100>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8002d50:	68fa      	ldr	r2, [r7, #12]
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d20f      	bcs.n	8002d78 <prvAddCurrentTaskToDelayedList+0xc4>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8002d58:	4b16      	ldr	r3, [pc, #88]	; (8002db4 <prvAddCurrentTaskToDelayedList+0x100>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2104      	movs	r1, #4
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f002 fb1e 	bl	80053a0 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002d64:	4b16      	ldr	r3, [pc, #88]	; (8002dc0 <prvAddCurrentTaskToDelayedList+0x10c>)
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	4b12      	ldr	r3, [pc, #72]	; (8002db4 <prvAddCurrentTaskToDelayedList+0x100>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	3304      	adds	r3, #4
 8002d6e:	4619      	mov	r1, r3
 8002d70:	4610      	mov	r0, r2
 8002d72:	f7ff f9b8 	bl	80020e6 <vListInsert>
}
 8002d76:	e016      	b.n	8002da6 <prvAddCurrentTaskToDelayedList+0xf2>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8002d78:	4b0e      	ldr	r3, [pc, #56]	; (8002db4 <prvAddCurrentTaskToDelayedList+0x100>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2104      	movs	r1, #4
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f002 fb0e 	bl	80053a0 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002d84:	4b0f      	ldr	r3, [pc, #60]	; (8002dc4 <prvAddCurrentTaskToDelayedList+0x110>)
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	4b0a      	ldr	r3, [pc, #40]	; (8002db4 <prvAddCurrentTaskToDelayedList+0x100>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	3304      	adds	r3, #4
 8002d8e:	4619      	mov	r1, r3
 8002d90:	4610      	mov	r0, r2
 8002d92:	f7ff f9a8 	bl	80020e6 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8002d96:	4b0c      	ldr	r3, [pc, #48]	; (8002dc8 <prvAddCurrentTaskToDelayedList+0x114>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d202      	bcs.n	8002da6 <prvAddCurrentTaskToDelayedList+0xf2>
                        xNextTaskUnblockTime = xTimeToWake;
 8002da0:	4a09      	ldr	r2, [pc, #36]	; (8002dc8 <prvAddCurrentTaskToDelayedList+0x114>)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6013      	str	r3, [r2, #0]
}
 8002da6:	bf00      	nop
 8002da8:	3718      	adds	r7, #24
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	20000114 	.word	0x20000114
 8002db4:	20000038 	.word	0x20000038
 8002db8:	20000118 	.word	0x20000118
 8002dbc:	200000fc 	.word	0x200000fc
 8002dc0:	200000cc 	.word	0x200000cc
 8002dc4:	200000c8 	.word	0x200000c8
 8002dc8:	20000130 	.word	0x20000130

08002dcc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	3b04      	subs	r3, #4
 8002ddc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002de4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	3b04      	subs	r3, #4
 8002dea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	f023 0201 	bic.w	r2, r3, #1
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	3b04      	subs	r3, #4
 8002dfa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002dfc:	4a0c      	ldr	r2, [pc, #48]	; (8002e30 <pxPortInitialiseStack+0x64>)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	3b14      	subs	r3, #20
 8002e06:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	3b04      	subs	r3, #4
 8002e12:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f06f 0202 	mvn.w	r2, #2
 8002e1a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	3b20      	subs	r3, #32
 8002e20:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002e22:	68fb      	ldr	r3, [r7, #12]
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3714      	adds	r7, #20
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr
 8002e30:	08002e35 	.word	0x08002e35

08002e34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002e3e:	4b12      	ldr	r3, [pc, #72]	; (8002e88 <prvTaskExitError+0x54>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e46:	d00a      	beq.n	8002e5e <prvTaskExitError+0x2a>
        __asm volatile
 8002e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e4c:	f383 8811 	msr	BASEPRI, r3
 8002e50:	f3bf 8f6f 	isb	sy
 8002e54:	f3bf 8f4f 	dsb	sy
 8002e58:	60fb      	str	r3, [r7, #12]
    }
 8002e5a:	bf00      	nop
 8002e5c:	e7fe      	b.n	8002e5c <prvTaskExitError+0x28>
        __asm volatile
 8002e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e62:	f383 8811 	msr	BASEPRI, r3
 8002e66:	f3bf 8f6f 	isb	sy
 8002e6a:	f3bf 8f4f 	dsb	sy
 8002e6e:	60bb      	str	r3, [r7, #8]
    }
 8002e70:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002e72:	bf00      	nop
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d0fc      	beq.n	8002e74 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002e7a:	bf00      	nop
 8002e7c:	bf00      	nop
 8002e7e:	3714      	adds	r7, #20
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr
 8002e88:	20000010 	.word	0x20000010
 8002e8c:	00000000 	.word	0x00000000

08002e90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002e90:	4b07      	ldr	r3, [pc, #28]	; (8002eb0 <pxCurrentTCBConst2>)
 8002e92:	6819      	ldr	r1, [r3, #0]
 8002e94:	6808      	ldr	r0, [r1, #0]
 8002e96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e9a:	f380 8809 	msr	PSP, r0
 8002e9e:	f3bf 8f6f 	isb	sy
 8002ea2:	f04f 0000 	mov.w	r0, #0
 8002ea6:	f380 8811 	msr	BASEPRI, r0
 8002eaa:	4770      	bx	lr
 8002eac:	f3af 8000 	nop.w

08002eb0 <pxCurrentTCBConst2>:
 8002eb0:	20000038 	.word	0x20000038
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002eb4:	bf00      	nop
 8002eb6:	bf00      	nop

08002eb8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002eb8:	4808      	ldr	r0, [pc, #32]	; (8002edc <prvPortStartFirstTask+0x24>)
 8002eba:	6800      	ldr	r0, [r0, #0]
 8002ebc:	6800      	ldr	r0, [r0, #0]
 8002ebe:	f380 8808 	msr	MSP, r0
 8002ec2:	f04f 0000 	mov.w	r0, #0
 8002ec6:	f380 8814 	msr	CONTROL, r0
 8002eca:	b662      	cpsie	i
 8002ecc:	b661      	cpsie	f
 8002ece:	f3bf 8f4f 	dsb	sy
 8002ed2:	f3bf 8f6f 	isb	sy
 8002ed6:	df00      	svc	0
 8002ed8:	bf00      	nop
 8002eda:	0000      	.short	0x0000
 8002edc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002ee0:	bf00      	nop
 8002ee2:	bf00      	nop

08002ee4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002eea:	4b46      	ldr	r3, [pc, #280]	; (8003004 <xPortStartScheduler+0x120>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a46      	ldr	r2, [pc, #280]	; (8003008 <xPortStartScheduler+0x124>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d10a      	bne.n	8002f0a <xPortStartScheduler+0x26>
        __asm volatile
 8002ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ef8:	f383 8811 	msr	BASEPRI, r3
 8002efc:	f3bf 8f6f 	isb	sy
 8002f00:	f3bf 8f4f 	dsb	sy
 8002f04:	613b      	str	r3, [r7, #16]
    }
 8002f06:	bf00      	nop
 8002f08:	e7fe      	b.n	8002f08 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002f0a:	4b3e      	ldr	r3, [pc, #248]	; (8003004 <xPortStartScheduler+0x120>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a3f      	ldr	r2, [pc, #252]	; (800300c <xPortStartScheduler+0x128>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d10a      	bne.n	8002f2a <xPortStartScheduler+0x46>
        __asm volatile
 8002f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f18:	f383 8811 	msr	BASEPRI, r3
 8002f1c:	f3bf 8f6f 	isb	sy
 8002f20:	f3bf 8f4f 	dsb	sy
 8002f24:	60fb      	str	r3, [r7, #12]
    }
 8002f26:	bf00      	nop
 8002f28:	e7fe      	b.n	8002f28 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002f2a:	4b39      	ldr	r3, [pc, #228]	; (8003010 <xPortStartScheduler+0x12c>)
 8002f2c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	22ff      	movs	r2, #255	; 0xff
 8002f3a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002f44:	78fb      	ldrb	r3, [r7, #3]
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002f4c:	b2da      	uxtb	r2, r3
 8002f4e:	4b31      	ldr	r3, [pc, #196]	; (8003014 <xPortStartScheduler+0x130>)
 8002f50:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002f52:	4b31      	ldr	r3, [pc, #196]	; (8003018 <xPortStartScheduler+0x134>)
 8002f54:	2207      	movs	r2, #7
 8002f56:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002f58:	e009      	b.n	8002f6e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002f5a:	4b2f      	ldr	r3, [pc, #188]	; (8003018 <xPortStartScheduler+0x134>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	4a2d      	ldr	r2, [pc, #180]	; (8003018 <xPortStartScheduler+0x134>)
 8002f62:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002f64:	78fb      	ldrb	r3, [r7, #3]
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	005b      	lsls	r3, r3, #1
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002f6e:	78fb      	ldrb	r3, [r7, #3]
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f76:	2b80      	cmp	r3, #128	; 0x80
 8002f78:	d0ef      	beq.n	8002f5a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002f7a:	4b27      	ldr	r3, [pc, #156]	; (8003018 <xPortStartScheduler+0x134>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f1c3 0307 	rsb	r3, r3, #7
 8002f82:	2b04      	cmp	r3, #4
 8002f84:	d00a      	beq.n	8002f9c <xPortStartScheduler+0xb8>
        __asm volatile
 8002f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f8a:	f383 8811 	msr	BASEPRI, r3
 8002f8e:	f3bf 8f6f 	isb	sy
 8002f92:	f3bf 8f4f 	dsb	sy
 8002f96:	60bb      	str	r3, [r7, #8]
    }
 8002f98:	bf00      	nop
 8002f9a:	e7fe      	b.n	8002f9a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002f9c:	4b1e      	ldr	r3, [pc, #120]	; (8003018 <xPortStartScheduler+0x134>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	021b      	lsls	r3, r3, #8
 8002fa2:	4a1d      	ldr	r2, [pc, #116]	; (8003018 <xPortStartScheduler+0x134>)
 8002fa4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002fa6:	4b1c      	ldr	r3, [pc, #112]	; (8003018 <xPortStartScheduler+0x134>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002fae:	4a1a      	ldr	r2, [pc, #104]	; (8003018 <xPortStartScheduler+0x134>)
 8002fb0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	b2da      	uxtb	r2, r3
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002fba:	4b18      	ldr	r3, [pc, #96]	; (800301c <xPortStartScheduler+0x138>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a17      	ldr	r2, [pc, #92]	; (800301c <xPortStartScheduler+0x138>)
 8002fc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fc4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002fc6:	4b15      	ldr	r3, [pc, #84]	; (800301c <xPortStartScheduler+0x138>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a14      	ldr	r2, [pc, #80]	; (800301c <xPortStartScheduler+0x138>)
 8002fcc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002fd0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002fd2:	f000 f963 	bl	800329c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002fd6:	4b12      	ldr	r3, [pc, #72]	; (8003020 <xPortStartScheduler+0x13c>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002fdc:	f000 f982 	bl	80032e4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002fe0:	4b10      	ldr	r3, [pc, #64]	; (8003024 <xPortStartScheduler+0x140>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a0f      	ldr	r2, [pc, #60]	; (8003024 <xPortStartScheduler+0x140>)
 8002fe6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002fea:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002fec:	f7ff ff64 	bl	8002eb8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002ff0:	f7ff fd44 	bl	8002a7c <vTaskSwitchContext>
    prvTaskExitError();
 8002ff4:	f7ff ff1e 	bl	8002e34 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3718      	adds	r7, #24
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	e000ed00 	.word	0xe000ed00
 8003008:	410fc271 	.word	0x410fc271
 800300c:	410fc270 	.word	0x410fc270
 8003010:	e000e400 	.word	0xe000e400
 8003014:	2000013c 	.word	0x2000013c
 8003018:	20000140 	.word	0x20000140
 800301c:	e000ed20 	.word	0xe000ed20
 8003020:	20000010 	.word	0x20000010
 8003024:	e000ef34 	.word	0xe000ef34

08003028 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8003028:	b480      	push	{r7}
 800302a:	b087      	sub	sp, #28
 800302c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800302e:	4b37      	ldr	r3, [pc, #220]	; (800310c <vInitPrioGroupValue+0xe4>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a37      	ldr	r2, [pc, #220]	; (8003110 <vInitPrioGroupValue+0xe8>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d10a      	bne.n	800304e <vInitPrioGroupValue+0x26>
        __asm volatile
 8003038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800303c:	f383 8811 	msr	BASEPRI, r3
 8003040:	f3bf 8f6f 	isb	sy
 8003044:	f3bf 8f4f 	dsb	sy
 8003048:	613b      	str	r3, [r7, #16]
    }
 800304a:	bf00      	nop
 800304c:	e7fe      	b.n	800304c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800304e:	4b2f      	ldr	r3, [pc, #188]	; (800310c <vInitPrioGroupValue+0xe4>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a30      	ldr	r2, [pc, #192]	; (8003114 <vInitPrioGroupValue+0xec>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d10a      	bne.n	800306e <vInitPrioGroupValue+0x46>
        __asm volatile
 8003058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800305c:	f383 8811 	msr	BASEPRI, r3
 8003060:	f3bf 8f6f 	isb	sy
 8003064:	f3bf 8f4f 	dsb	sy
 8003068:	60fb      	str	r3, [r7, #12]
    }
 800306a:	bf00      	nop
 800306c:	e7fe      	b.n	800306c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800306e:	4b2a      	ldr	r3, [pc, #168]	; (8003118 <vInitPrioGroupValue+0xf0>)
 8003070:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	b2db      	uxtb	r3, r3
 8003078:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	22ff      	movs	r2, #255	; 0xff
 800307e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	b2db      	uxtb	r3, r3
 8003086:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003088:	78fb      	ldrb	r3, [r7, #3]
 800308a:	b2db      	uxtb	r3, r3
 800308c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003090:	b2da      	uxtb	r2, r3
 8003092:	4b22      	ldr	r3, [pc, #136]	; (800311c <vInitPrioGroupValue+0xf4>)
 8003094:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003096:	4b22      	ldr	r3, [pc, #136]	; (8003120 <vInitPrioGroupValue+0xf8>)
 8003098:	2207      	movs	r2, #7
 800309a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800309c:	e009      	b.n	80030b2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800309e:	4b20      	ldr	r3, [pc, #128]	; (8003120 <vInitPrioGroupValue+0xf8>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	3b01      	subs	r3, #1
 80030a4:	4a1e      	ldr	r2, [pc, #120]	; (8003120 <vInitPrioGroupValue+0xf8>)
 80030a6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80030a8:	78fb      	ldrb	r3, [r7, #3]
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80030b2:	78fb      	ldrb	r3, [r7, #3]
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ba:	2b80      	cmp	r3, #128	; 0x80
 80030bc:	d0ef      	beq.n	800309e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80030be:	4b18      	ldr	r3, [pc, #96]	; (8003120 <vInitPrioGroupValue+0xf8>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f1c3 0307 	rsb	r3, r3, #7
 80030c6:	2b04      	cmp	r3, #4
 80030c8:	d00a      	beq.n	80030e0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 80030ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ce:	f383 8811 	msr	BASEPRI, r3
 80030d2:	f3bf 8f6f 	isb	sy
 80030d6:	f3bf 8f4f 	dsb	sy
 80030da:	60bb      	str	r3, [r7, #8]
    }
 80030dc:	bf00      	nop
 80030de:	e7fe      	b.n	80030de <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80030e0:	4b0f      	ldr	r3, [pc, #60]	; (8003120 <vInitPrioGroupValue+0xf8>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	021b      	lsls	r3, r3, #8
 80030e6:	4a0e      	ldr	r2, [pc, #56]	; (8003120 <vInitPrioGroupValue+0xf8>)
 80030e8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80030ea:	4b0d      	ldr	r3, [pc, #52]	; (8003120 <vInitPrioGroupValue+0xf8>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80030f2:	4a0b      	ldr	r2, [pc, #44]	; (8003120 <vInitPrioGroupValue+0xf8>)
 80030f4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	b2da      	uxtb	r2, r3
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80030fe:	bf00      	nop
 8003100:	371c      	adds	r7, #28
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	e000ed00 	.word	0xe000ed00
 8003110:	410fc271 	.word	0x410fc271
 8003114:	410fc270 	.word	0x410fc270
 8003118:	e000e400 	.word	0xe000e400
 800311c:	2000013c 	.word	0x2000013c
 8003120:	20000140 	.word	0x20000140

08003124 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
        __asm volatile
 800312a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800312e:	f383 8811 	msr	BASEPRI, r3
 8003132:	f3bf 8f6f 	isb	sy
 8003136:	f3bf 8f4f 	dsb	sy
 800313a:	607b      	str	r3, [r7, #4]
    }
 800313c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800313e:	4b0f      	ldr	r3, [pc, #60]	; (800317c <vPortEnterCritical+0x58>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	3301      	adds	r3, #1
 8003144:	4a0d      	ldr	r2, [pc, #52]	; (800317c <vPortEnterCritical+0x58>)
 8003146:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003148:	4b0c      	ldr	r3, [pc, #48]	; (800317c <vPortEnterCritical+0x58>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d10f      	bne.n	8003170 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003150:	4b0b      	ldr	r3, [pc, #44]	; (8003180 <vPortEnterCritical+0x5c>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00a      	beq.n	8003170 <vPortEnterCritical+0x4c>
        __asm volatile
 800315a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800315e:	f383 8811 	msr	BASEPRI, r3
 8003162:	f3bf 8f6f 	isb	sy
 8003166:	f3bf 8f4f 	dsb	sy
 800316a:	603b      	str	r3, [r7, #0]
    }
 800316c:	bf00      	nop
 800316e:	e7fe      	b.n	800316e <vPortEnterCritical+0x4a>
    }
}
 8003170:	bf00      	nop
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr
 800317c:	20000010 	.word	0x20000010
 8003180:	e000ed04 	.word	0xe000ed04

08003184 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800318a:	4b12      	ldr	r3, [pc, #72]	; (80031d4 <vPortExitCritical+0x50>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10a      	bne.n	80031a8 <vPortExitCritical+0x24>
        __asm volatile
 8003192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003196:	f383 8811 	msr	BASEPRI, r3
 800319a:	f3bf 8f6f 	isb	sy
 800319e:	f3bf 8f4f 	dsb	sy
 80031a2:	607b      	str	r3, [r7, #4]
    }
 80031a4:	bf00      	nop
 80031a6:	e7fe      	b.n	80031a6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80031a8:	4b0a      	ldr	r3, [pc, #40]	; (80031d4 <vPortExitCritical+0x50>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	3b01      	subs	r3, #1
 80031ae:	4a09      	ldr	r2, [pc, #36]	; (80031d4 <vPortExitCritical+0x50>)
 80031b0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80031b2:	4b08      	ldr	r3, [pc, #32]	; (80031d4 <vPortExitCritical+0x50>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d105      	bne.n	80031c6 <vPortExitCritical+0x42>
 80031ba:	2300      	movs	r3, #0
 80031bc:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80031c4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80031c6:	bf00      	nop
 80031c8:	370c      	adds	r7, #12
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	20000010 	.word	0x20000010
	...

080031e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80031e0:	f3ef 8009 	mrs	r0, PSP
 80031e4:	f3bf 8f6f 	isb	sy
 80031e8:	4b15      	ldr	r3, [pc, #84]	; (8003240 <pxCurrentTCBConst>)
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	f01e 0f10 	tst.w	lr, #16
 80031f0:	bf08      	it	eq
 80031f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80031f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031fa:	6010      	str	r0, [r2, #0]
 80031fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003200:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003204:	f380 8811 	msr	BASEPRI, r0
 8003208:	f3bf 8f4f 	dsb	sy
 800320c:	f3bf 8f6f 	isb	sy
 8003210:	f7ff fc34 	bl	8002a7c <vTaskSwitchContext>
 8003214:	f04f 0000 	mov.w	r0, #0
 8003218:	f380 8811 	msr	BASEPRI, r0
 800321c:	bc09      	pop	{r0, r3}
 800321e:	6819      	ldr	r1, [r3, #0]
 8003220:	6808      	ldr	r0, [r1, #0]
 8003222:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003226:	f01e 0f10 	tst.w	lr, #16
 800322a:	bf08      	it	eq
 800322c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003230:	f380 8809 	msr	PSP, r0
 8003234:	f3bf 8f6f 	isb	sy
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	f3af 8000 	nop.w

08003240 <pxCurrentTCBConst>:
 8003240:	20000038 	.word	0x20000038
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003244:	bf00      	nop
 8003246:	bf00      	nop

08003248 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
        __asm volatile
 800324e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003252:	f383 8811 	msr	BASEPRI, r3
 8003256:	f3bf 8f6f 	isb	sy
 800325a:	f3bf 8f4f 	dsb	sy
 800325e:	607b      	str	r3, [r7, #4]
    }
 8003260:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003262:	f001 ff41 	bl	80050e8 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003266:	f7ff faef 	bl	8002848 <xTaskIncrementTick>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d006      	beq.n	800327e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003270:	f001 ff98 	bl	80051a4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003274:	4b08      	ldr	r3, [pc, #32]	; (8003298 <SysTick_Handler+0x50>)
 8003276:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800327a:	601a      	str	r2, [r3, #0]
 800327c:	e001      	b.n	8003282 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800327e:	f001 ff75 	bl	800516c <SEGGER_SYSVIEW_RecordExitISR>
 8003282:	2300      	movs	r3, #0
 8003284:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	f383 8811 	msr	BASEPRI, r3
    }
 800328c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800328e:	bf00      	nop
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	e000ed04 	.word	0xe000ed04

0800329c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800329c:	b480      	push	{r7}
 800329e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80032a0:	4b0b      	ldr	r3, [pc, #44]	; (80032d0 <vPortSetupTimerInterrupt+0x34>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80032a6:	4b0b      	ldr	r3, [pc, #44]	; (80032d4 <vPortSetupTimerInterrupt+0x38>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80032ac:	4b0a      	ldr	r3, [pc, #40]	; (80032d8 <vPortSetupTimerInterrupt+0x3c>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a0a      	ldr	r2, [pc, #40]	; (80032dc <vPortSetupTimerInterrupt+0x40>)
 80032b2:	fba2 2303 	umull	r2, r3, r2, r3
 80032b6:	099b      	lsrs	r3, r3, #6
 80032b8:	4a09      	ldr	r2, [pc, #36]	; (80032e0 <vPortSetupTimerInterrupt+0x44>)
 80032ba:	3b01      	subs	r3, #1
 80032bc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80032be:	4b04      	ldr	r3, [pc, #16]	; (80032d0 <vPortSetupTimerInterrupt+0x34>)
 80032c0:	2207      	movs	r2, #7
 80032c2:	601a      	str	r2, [r3, #0]
}
 80032c4:	bf00      	nop
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	e000e010 	.word	0xe000e010
 80032d4:	e000e018 	.word	0xe000e018
 80032d8:	20000000 	.word	0x20000000
 80032dc:	10624dd3 	.word	0x10624dd3
 80032e0:	e000e014 	.word	0xe000e014

080032e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80032e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80032f4 <vPortEnableVFP+0x10>
 80032e8:	6801      	ldr	r1, [r0, #0]
 80032ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80032ee:	6001      	str	r1, [r0, #0]
 80032f0:	4770      	bx	lr
 80032f2:	0000      	.short	0x0000
 80032f4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80032f8:	bf00      	nop
 80032fa:	bf00      	nop

080032fc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003302:	f3ef 8305 	mrs	r3, IPSR
 8003306:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2b0f      	cmp	r3, #15
 800330c:	d914      	bls.n	8003338 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800330e:	4a17      	ldr	r2, [pc, #92]	; (800336c <vPortValidateInterruptPriority+0x70>)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	4413      	add	r3, r2
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003318:	4b15      	ldr	r3, [pc, #84]	; (8003370 <vPortValidateInterruptPriority+0x74>)
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	7afa      	ldrb	r2, [r7, #11]
 800331e:	429a      	cmp	r2, r3
 8003320:	d20a      	bcs.n	8003338 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003326:	f383 8811 	msr	BASEPRI, r3
 800332a:	f3bf 8f6f 	isb	sy
 800332e:	f3bf 8f4f 	dsb	sy
 8003332:	607b      	str	r3, [r7, #4]
    }
 8003334:	bf00      	nop
 8003336:	e7fe      	b.n	8003336 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003338:	4b0e      	ldr	r3, [pc, #56]	; (8003374 <vPortValidateInterruptPriority+0x78>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003340:	4b0d      	ldr	r3, [pc, #52]	; (8003378 <vPortValidateInterruptPriority+0x7c>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	429a      	cmp	r2, r3
 8003346:	d90a      	bls.n	800335e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800334c:	f383 8811 	msr	BASEPRI, r3
 8003350:	f3bf 8f6f 	isb	sy
 8003354:	f3bf 8f4f 	dsb	sy
 8003358:	603b      	str	r3, [r7, #0]
    }
 800335a:	bf00      	nop
 800335c:	e7fe      	b.n	800335c <vPortValidateInterruptPriority+0x60>
    }
 800335e:	bf00      	nop
 8003360:	3714      	adds	r7, #20
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	e000e3f0 	.word	0xe000e3f0
 8003370:	2000013c 	.word	0x2000013c
 8003374:	e000ed0c 	.word	0xe000ed0c
 8003378:	20000140 	.word	0x20000140

0800337c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b08a      	sub	sp, #40	; 0x28
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003384:	2300      	movs	r3, #0
 8003386:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003388:	f7ff f93e 	bl	8002608 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800338c:	4b65      	ldr	r3, [pc, #404]	; (8003524 <pvPortMalloc+0x1a8>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d101      	bne.n	8003398 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003394:	f000 f934 	bl	8003600 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003398:	4b63      	ldr	r3, [pc, #396]	; (8003528 <pvPortMalloc+0x1ac>)
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4013      	ands	r3, r2
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f040 80a7 	bne.w	80034f4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d02d      	beq.n	8003408 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80033ac:	2208      	movs	r2, #8
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d227      	bcs.n	8003408 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80033b8:	2208      	movs	r2, #8
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4413      	add	r3, r2
 80033be:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f003 0307 	and.w	r3, r3, #7
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d021      	beq.n	800340e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f023 0307 	bic.w	r3, r3, #7
 80033d0:	3308      	adds	r3, #8
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d214      	bcs.n	8003402 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f023 0307 	bic.w	r3, r3, #7
 80033de:	3308      	adds	r3, #8
 80033e0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f003 0307 	and.w	r3, r3, #7
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d010      	beq.n	800340e <pvPortMalloc+0x92>
        __asm volatile
 80033ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f0:	f383 8811 	msr	BASEPRI, r3
 80033f4:	f3bf 8f6f 	isb	sy
 80033f8:	f3bf 8f4f 	dsb	sy
 80033fc:	617b      	str	r3, [r7, #20]
    }
 80033fe:	bf00      	nop
 8003400:	e7fe      	b.n	8003400 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003402:	2300      	movs	r3, #0
 8003404:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003406:	e002      	b.n	800340e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8003408:	2300      	movs	r3, #0
 800340a:	607b      	str	r3, [r7, #4]
 800340c:	e000      	b.n	8003410 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800340e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d06e      	beq.n	80034f4 <pvPortMalloc+0x178>
 8003416:	4b45      	ldr	r3, [pc, #276]	; (800352c <pvPortMalloc+0x1b0>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	429a      	cmp	r2, r3
 800341e:	d869      	bhi.n	80034f4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003420:	4b43      	ldr	r3, [pc, #268]	; (8003530 <pvPortMalloc+0x1b4>)
 8003422:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003424:	4b42      	ldr	r3, [pc, #264]	; (8003530 <pvPortMalloc+0x1b4>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800342a:	e004      	b.n	8003436 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800342c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	429a      	cmp	r2, r3
 800343e:	d903      	bls.n	8003448 <pvPortMalloc+0xcc>
 8003440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1f1      	bne.n	800342c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003448:	4b36      	ldr	r3, [pc, #216]	; (8003524 <pvPortMalloc+0x1a8>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800344e:	429a      	cmp	r2, r3
 8003450:	d050      	beq.n	80034f4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003452:	6a3b      	ldr	r3, [r7, #32]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2208      	movs	r2, #8
 8003458:	4413      	add	r3, r2
 800345a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800345c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	6a3b      	ldr	r3, [r7, #32]
 8003462:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003466:	685a      	ldr	r2, [r3, #4]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	1ad2      	subs	r2, r2, r3
 800346c:	2308      	movs	r3, #8
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	429a      	cmp	r2, r3
 8003472:	d91f      	bls.n	80034b4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4413      	add	r3, r2
 800347a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	f003 0307 	and.w	r3, r3, #7
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00a      	beq.n	800349c <pvPortMalloc+0x120>
        __asm volatile
 8003486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800348a:	f383 8811 	msr	BASEPRI, r3
 800348e:	f3bf 8f6f 	isb	sy
 8003492:	f3bf 8f4f 	dsb	sy
 8003496:	613b      	str	r3, [r7, #16]
    }
 8003498:	bf00      	nop
 800349a:	e7fe      	b.n	800349a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800349c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349e:	685a      	ldr	r2, [r3, #4]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	1ad2      	subs	r2, r2, r3
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80034a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80034ae:	69b8      	ldr	r0, [r7, #24]
 80034b0:	f000 f908 	bl	80036c4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80034b4:	4b1d      	ldr	r3, [pc, #116]	; (800352c <pvPortMalloc+0x1b0>)
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	4a1b      	ldr	r2, [pc, #108]	; (800352c <pvPortMalloc+0x1b0>)
 80034c0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80034c2:	4b1a      	ldr	r3, [pc, #104]	; (800352c <pvPortMalloc+0x1b0>)
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	4b1b      	ldr	r3, [pc, #108]	; (8003534 <pvPortMalloc+0x1b8>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d203      	bcs.n	80034d6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80034ce:	4b17      	ldr	r3, [pc, #92]	; (800352c <pvPortMalloc+0x1b0>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a18      	ldr	r2, [pc, #96]	; (8003534 <pvPortMalloc+0x1b8>)
 80034d4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80034d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d8:	685a      	ldr	r2, [r3, #4]
 80034da:	4b13      	ldr	r3, [pc, #76]	; (8003528 <pvPortMalloc+0x1ac>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	431a      	orrs	r2, r3
 80034e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80034e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e6:	2200      	movs	r2, #0
 80034e8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80034ea:	4b13      	ldr	r3, [pc, #76]	; (8003538 <pvPortMalloc+0x1bc>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	3301      	adds	r3, #1
 80034f0:	4a11      	ldr	r2, [pc, #68]	; (8003538 <pvPortMalloc+0x1bc>)
 80034f2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80034f4:	f7ff f896 	bl	8002624 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	f003 0307 	and.w	r3, r3, #7
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00a      	beq.n	8003518 <pvPortMalloc+0x19c>
        __asm volatile
 8003502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003506:	f383 8811 	msr	BASEPRI, r3
 800350a:	f3bf 8f6f 	isb	sy
 800350e:	f3bf 8f4f 	dsb	sy
 8003512:	60fb      	str	r3, [r7, #12]
    }
 8003514:	bf00      	nop
 8003516:	e7fe      	b.n	8003516 <pvPortMalloc+0x19a>
    return pvReturn;
 8003518:	69fb      	ldr	r3, [r7, #28]
}
 800351a:	4618      	mov	r0, r3
 800351c:	3728      	adds	r7, #40	; 0x28
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	20012d4c 	.word	0x20012d4c
 8003528:	20012d60 	.word	0x20012d60
 800352c:	20012d50 	.word	0x20012d50
 8003530:	20012d44 	.word	0x20012d44
 8003534:	20012d54 	.word	0x20012d54
 8003538:	20012d58 	.word	0x20012d58

0800353c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d04d      	beq.n	80035ea <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800354e:	2308      	movs	r3, #8
 8003550:	425b      	negs	r3, r3
 8003552:	697a      	ldr	r2, [r7, #20]
 8003554:	4413      	add	r3, r2
 8003556:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	685a      	ldr	r2, [r3, #4]
 8003560:	4b24      	ldr	r3, [pc, #144]	; (80035f4 <vPortFree+0xb8>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4013      	ands	r3, r2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d10a      	bne.n	8003580 <vPortFree+0x44>
        __asm volatile
 800356a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800356e:	f383 8811 	msr	BASEPRI, r3
 8003572:	f3bf 8f6f 	isb	sy
 8003576:	f3bf 8f4f 	dsb	sy
 800357a:	60fb      	str	r3, [r7, #12]
    }
 800357c:	bf00      	nop
 800357e:	e7fe      	b.n	800357e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00a      	beq.n	800359e <vPortFree+0x62>
        __asm volatile
 8003588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800358c:	f383 8811 	msr	BASEPRI, r3
 8003590:	f3bf 8f6f 	isb	sy
 8003594:	f3bf 8f4f 	dsb	sy
 8003598:	60bb      	str	r3, [r7, #8]
    }
 800359a:	bf00      	nop
 800359c:	e7fe      	b.n	800359c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	685a      	ldr	r2, [r3, #4]
 80035a2:	4b14      	ldr	r3, [pc, #80]	; (80035f4 <vPortFree+0xb8>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4013      	ands	r3, r2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d01e      	beq.n	80035ea <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d11a      	bne.n	80035ea <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	685a      	ldr	r2, [r3, #4]
 80035b8:	4b0e      	ldr	r3, [pc, #56]	; (80035f4 <vPortFree+0xb8>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	43db      	mvns	r3, r3
 80035be:	401a      	ands	r2, r3
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80035c4:	f7ff f820 	bl	8002608 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	685a      	ldr	r2, [r3, #4]
 80035cc:	4b0a      	ldr	r3, [pc, #40]	; (80035f8 <vPortFree+0xbc>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4413      	add	r3, r2
 80035d2:	4a09      	ldr	r2, [pc, #36]	; (80035f8 <vPortFree+0xbc>)
 80035d4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80035d6:	6938      	ldr	r0, [r7, #16]
 80035d8:	f000 f874 	bl	80036c4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80035dc:	4b07      	ldr	r3, [pc, #28]	; (80035fc <vPortFree+0xc0>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	3301      	adds	r3, #1
 80035e2:	4a06      	ldr	r2, [pc, #24]	; (80035fc <vPortFree+0xc0>)
 80035e4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80035e6:	f7ff f81d 	bl	8002624 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80035ea:	bf00      	nop
 80035ec:	3718      	adds	r7, #24
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	20012d60 	.word	0x20012d60
 80035f8:	20012d50 	.word	0x20012d50
 80035fc:	20012d5c 	.word	0x20012d5c

08003600 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003606:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800360a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800360c:	4b27      	ldr	r3, [pc, #156]	; (80036ac <prvHeapInit+0xac>)
 800360e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f003 0307 	and.w	r3, r3, #7
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00c      	beq.n	8003634 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	3307      	adds	r3, #7
 800361e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f023 0307 	bic.w	r3, r3, #7
 8003626:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003628:	68ba      	ldr	r2, [r7, #8]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	4a1f      	ldr	r2, [pc, #124]	; (80036ac <prvHeapInit+0xac>)
 8003630:	4413      	add	r3, r2
 8003632:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003638:	4a1d      	ldr	r2, [pc, #116]	; (80036b0 <prvHeapInit+0xb0>)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800363e:	4b1c      	ldr	r3, [pc, #112]	; (80036b0 <prvHeapInit+0xb0>)
 8003640:	2200      	movs	r2, #0
 8003642:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	68ba      	ldr	r2, [r7, #8]
 8003648:	4413      	add	r3, r2
 800364a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800364c:	2208      	movs	r2, #8
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	1a9b      	subs	r3, r3, r2
 8003652:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f023 0307 	bic.w	r3, r3, #7
 800365a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	4a15      	ldr	r2, [pc, #84]	; (80036b4 <prvHeapInit+0xb4>)
 8003660:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003662:	4b14      	ldr	r3, [pc, #80]	; (80036b4 <prvHeapInit+0xb4>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2200      	movs	r2, #0
 8003668:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800366a:	4b12      	ldr	r3, [pc, #72]	; (80036b4 <prvHeapInit+0xb4>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2200      	movs	r2, #0
 8003670:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	1ad2      	subs	r2, r2, r3
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003680:	4b0c      	ldr	r3, [pc, #48]	; (80036b4 <prvHeapInit+0xb4>)
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	4a0a      	ldr	r2, [pc, #40]	; (80036b8 <prvHeapInit+0xb8>)
 800368e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	4a09      	ldr	r2, [pc, #36]	; (80036bc <prvHeapInit+0xbc>)
 8003696:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003698:	4b09      	ldr	r3, [pc, #36]	; (80036c0 <prvHeapInit+0xc0>)
 800369a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800369e:	601a      	str	r2, [r3, #0]
}
 80036a0:	bf00      	nop
 80036a2:	3714      	adds	r7, #20
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr
 80036ac:	20000144 	.word	0x20000144
 80036b0:	20012d44 	.word	0x20012d44
 80036b4:	20012d4c 	.word	0x20012d4c
 80036b8:	20012d54 	.word	0x20012d54
 80036bc:	20012d50 	.word	0x20012d50
 80036c0:	20012d60 	.word	0x20012d60

080036c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80036c4:	b480      	push	{r7}
 80036c6:	b085      	sub	sp, #20
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80036cc:	4b28      	ldr	r3, [pc, #160]	; (8003770 <prvInsertBlockIntoFreeList+0xac>)
 80036ce:	60fb      	str	r3, [r7, #12]
 80036d0:	e002      	b.n	80036d8 <prvInsertBlockIntoFreeList+0x14>
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	60fb      	str	r3, [r7, #12]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d8f7      	bhi.n	80036d2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	68ba      	ldr	r2, [r7, #8]
 80036ec:	4413      	add	r3, r2
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d108      	bne.n	8003706 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	685a      	ldr	r2, [r3, #4]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	441a      	add	r2, r3
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	68ba      	ldr	r2, [r7, #8]
 8003710:	441a      	add	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	429a      	cmp	r2, r3
 8003718:	d118      	bne.n	800374c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	4b15      	ldr	r3, [pc, #84]	; (8003774 <prvInsertBlockIntoFreeList+0xb0>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	429a      	cmp	r2, r3
 8003724:	d00d      	beq.n	8003742 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685a      	ldr	r2, [r3, #4]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	441a      	add	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	601a      	str	r2, [r3, #0]
 8003740:	e008      	b.n	8003754 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003742:	4b0c      	ldr	r3, [pc, #48]	; (8003774 <prvInsertBlockIntoFreeList+0xb0>)
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	601a      	str	r2, [r3, #0]
 800374a:	e003      	b.n	8003754 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	429a      	cmp	r2, r3
 800375a:	d002      	beq.n	8003762 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003762:	bf00      	nop
 8003764:	3714      	adds	r7, #20
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	20012d44 	.word	0x20012d44
 8003774:	20012d4c 	.word	0x20012d4c

08003778 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003778:	b580      	push	{r7, lr}
 800377a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800377c:	4803      	ldr	r0, [pc, #12]	; (800378c <_cbSendSystemDesc+0x14>)
 800377e:	f001 fc5d 	bl	800503c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003782:	4803      	ldr	r0, [pc, #12]	; (8003790 <_cbSendSystemDesc+0x18>)
 8003784:	f001 fc5a 	bl	800503c <SEGGER_SYSVIEW_SendSysDesc>
}
 8003788:	bf00      	nop
 800378a:	bd80      	pop	{r7, pc}
 800378c:	0800580c 	.word	0x0800580c
 8003790:	08005850 	.word	0x08005850

08003794 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003794:	b580      	push	{r7, lr}
 8003796:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003798:	4b06      	ldr	r3, [pc, #24]	; (80037b4 <SEGGER_SYSVIEW_Conf+0x20>)
 800379a:	6818      	ldr	r0, [r3, #0]
 800379c:	4b05      	ldr	r3, [pc, #20]	; (80037b4 <SEGGER_SYSVIEW_Conf+0x20>)
 800379e:	6819      	ldr	r1, [r3, #0]
 80037a0:	4b05      	ldr	r3, [pc, #20]	; (80037b8 <SEGGER_SYSVIEW_Conf+0x24>)
 80037a2:	4a06      	ldr	r2, [pc, #24]	; (80037bc <SEGGER_SYSVIEW_Conf+0x28>)
 80037a4:	f001 f8ce 	bl	8004944 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80037a8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80037ac:	f001 f90e 	bl	80049cc <SEGGER_SYSVIEW_SetRAMBase>
}
 80037b0:	bf00      	nop
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	20000000 	.word	0x20000000
 80037b8:	08003779 	.word	0x08003779
 80037bc:	080058e4 	.word	0x080058e4

080037c0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80037c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037c2:	b085      	sub	sp, #20
 80037c4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80037c6:	2300      	movs	r3, #0
 80037c8:	607b      	str	r3, [r7, #4]
 80037ca:	e033      	b.n	8003834 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80037cc:	491e      	ldr	r1, [pc, #120]	; (8003848 <_cbSendTaskList+0x88>)
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	4613      	mov	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	4413      	add	r3, r2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	440b      	add	r3, r1
 80037da:	6818      	ldr	r0, [r3, #0]
 80037dc:	491a      	ldr	r1, [pc, #104]	; (8003848 <_cbSendTaskList+0x88>)
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	4613      	mov	r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	4413      	add	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	440b      	add	r3, r1
 80037ea:	3304      	adds	r3, #4
 80037ec:	6819      	ldr	r1, [r3, #0]
 80037ee:	4c16      	ldr	r4, [pc, #88]	; (8003848 <_cbSendTaskList+0x88>)
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	4613      	mov	r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	4413      	add	r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	4423      	add	r3, r4
 80037fc:	3308      	adds	r3, #8
 80037fe:	681c      	ldr	r4, [r3, #0]
 8003800:	4d11      	ldr	r5, [pc, #68]	; (8003848 <_cbSendTaskList+0x88>)
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	4613      	mov	r3, r2
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	4413      	add	r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	442b      	add	r3, r5
 800380e:	330c      	adds	r3, #12
 8003810:	681d      	ldr	r5, [r3, #0]
 8003812:	4e0d      	ldr	r6, [pc, #52]	; (8003848 <_cbSendTaskList+0x88>)
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	4613      	mov	r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	4413      	add	r3, r2
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	4433      	add	r3, r6
 8003820:	3310      	adds	r3, #16
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	9300      	str	r3, [sp, #0]
 8003826:	462b      	mov	r3, r5
 8003828:	4622      	mov	r2, r4
 800382a:	f000 f8b5 	bl	8003998 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	3301      	adds	r3, #1
 8003832:	607b      	str	r3, [r7, #4]
 8003834:	4b05      	ldr	r3, [pc, #20]	; (800384c <_cbSendTaskList+0x8c>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	429a      	cmp	r2, r3
 800383c:	d3c6      	bcc.n	80037cc <_cbSendTaskList+0xc>
  }
}
 800383e:	bf00      	nop
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003848:	20012d64 	.word	0x20012d64
 800384c:	20012e04 	.word	0x20012e04

08003850 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003850:	b5b0      	push	{r4, r5, r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003856:	f7fe ffe5 	bl	8002824 <xTaskGetTickCountFromISR>
 800385a:	4603      	mov	r3, r0
 800385c:	461a      	mov	r2, r3
 800385e:	f04f 0300 	mov.w	r3, #0
 8003862:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003866:	e9d7 0100 	ldrd	r0, r1, [r7]
 800386a:	4602      	mov	r2, r0
 800386c:	460b      	mov	r3, r1
 800386e:	f04f 0400 	mov.w	r4, #0
 8003872:	f04f 0500 	mov.w	r5, #0
 8003876:	015d      	lsls	r5, r3, #5
 8003878:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800387c:	0154      	lsls	r4, r2, #5
 800387e:	4622      	mov	r2, r4
 8003880:	462b      	mov	r3, r5
 8003882:	1a12      	subs	r2, r2, r0
 8003884:	eb63 0301 	sbc.w	r3, r3, r1
 8003888:	f04f 0400 	mov.w	r4, #0
 800388c:	f04f 0500 	mov.w	r5, #0
 8003890:	009d      	lsls	r5, r3, #2
 8003892:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8003896:	0094      	lsls	r4, r2, #2
 8003898:	4622      	mov	r2, r4
 800389a:	462b      	mov	r3, r5
 800389c:	1812      	adds	r2, r2, r0
 800389e:	eb41 0303 	adc.w	r3, r1, r3
 80038a2:	f04f 0000 	mov.w	r0, #0
 80038a6:	f04f 0100 	mov.w	r1, #0
 80038aa:	00d9      	lsls	r1, r3, #3
 80038ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80038b0:	00d0      	lsls	r0, r2, #3
 80038b2:	4602      	mov	r2, r0
 80038b4:	460b      	mov	r3, r1
 80038b6:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 80038ba:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80038be:	4610      	mov	r0, r2
 80038c0:	4619      	mov	r1, r3
 80038c2:	3708      	adds	r7, #8
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bdb0      	pop	{r4, r5, r7, pc}

080038c8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b086      	sub	sp, #24
 80038cc:	af02      	add	r7, sp, #8
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	607a      	str	r2, [r7, #4]
 80038d4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80038d6:	2205      	movs	r2, #5
 80038d8:	492b      	ldr	r1, [pc, #172]	; (8003988 <SYSVIEW_AddTask+0xc0>)
 80038da:	68b8      	ldr	r0, [r7, #8]
 80038dc:	f001 ff4a 	bl	8005774 <memcmp>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d04b      	beq.n	800397e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80038e6:	4b29      	ldr	r3, [pc, #164]	; (800398c <SYSVIEW_AddTask+0xc4>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2b07      	cmp	r3, #7
 80038ec:	d903      	bls.n	80038f6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80038ee:	4828      	ldr	r0, [pc, #160]	; (8003990 <SYSVIEW_AddTask+0xc8>)
 80038f0:	f001 fe92 	bl	8005618 <SEGGER_SYSVIEW_Warn>
    return;
 80038f4:	e044      	b.n	8003980 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80038f6:	4b25      	ldr	r3, [pc, #148]	; (800398c <SYSVIEW_AddTask+0xc4>)
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	4926      	ldr	r1, [pc, #152]	; (8003994 <SYSVIEW_AddTask+0xcc>)
 80038fc:	4613      	mov	r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	4413      	add	r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	440b      	add	r3, r1
 8003906:	68fa      	ldr	r2, [r7, #12]
 8003908:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800390a:	4b20      	ldr	r3, [pc, #128]	; (800398c <SYSVIEW_AddTask+0xc4>)
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	4921      	ldr	r1, [pc, #132]	; (8003994 <SYSVIEW_AddTask+0xcc>)
 8003910:	4613      	mov	r3, r2
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	4413      	add	r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	440b      	add	r3, r1
 800391a:	3304      	adds	r3, #4
 800391c:	68ba      	ldr	r2, [r7, #8]
 800391e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003920:	4b1a      	ldr	r3, [pc, #104]	; (800398c <SYSVIEW_AddTask+0xc4>)
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	491b      	ldr	r1, [pc, #108]	; (8003994 <SYSVIEW_AddTask+0xcc>)
 8003926:	4613      	mov	r3, r2
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	4413      	add	r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	440b      	add	r3, r1
 8003930:	3308      	adds	r3, #8
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003936:	4b15      	ldr	r3, [pc, #84]	; (800398c <SYSVIEW_AddTask+0xc4>)
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	4916      	ldr	r1, [pc, #88]	; (8003994 <SYSVIEW_AddTask+0xcc>)
 800393c:	4613      	mov	r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	4413      	add	r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	440b      	add	r3, r1
 8003946:	330c      	adds	r3, #12
 8003948:	683a      	ldr	r2, [r7, #0]
 800394a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800394c:	4b0f      	ldr	r3, [pc, #60]	; (800398c <SYSVIEW_AddTask+0xc4>)
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	4910      	ldr	r1, [pc, #64]	; (8003994 <SYSVIEW_AddTask+0xcc>)
 8003952:	4613      	mov	r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	4413      	add	r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	440b      	add	r3, r1
 800395c:	3310      	adds	r3, #16
 800395e:	69ba      	ldr	r2, [r7, #24]
 8003960:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003962:	4b0a      	ldr	r3, [pc, #40]	; (800398c <SYSVIEW_AddTask+0xc4>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	3301      	adds	r3, #1
 8003968:	4a08      	ldr	r2, [pc, #32]	; (800398c <SYSVIEW_AddTask+0xc4>)
 800396a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	9300      	str	r3, [sp, #0]
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	68b9      	ldr	r1, [r7, #8]
 8003976:	68f8      	ldr	r0, [r7, #12]
 8003978:	f000 f80e 	bl	8003998 <SYSVIEW_SendTaskInfo>
 800397c:	e000      	b.n	8003980 <SYSVIEW_AddTask+0xb8>
    return;
 800397e:	bf00      	nop

}
 8003980:	3710      	adds	r7, #16
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	08005860 	.word	0x08005860
 800398c:	20012e04 	.word	0x20012e04
 8003990:	08005868 	.word	0x08005868
 8003994:	20012d64 	.word	0x20012d64

08003998 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003998:	b580      	push	{r7, lr}
 800399a:	b08a      	sub	sp, #40	; 0x28
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
 80039a4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80039a6:	f107 0314 	add.w	r3, r7, #20
 80039aa:	2214      	movs	r2, #20
 80039ac:	2100      	movs	r1, #0
 80039ae:	4618      	mov	r0, r3
 80039b0:	f001 fefc 	bl	80057ac <memset>
  TaskInfo.TaskID     = TaskID;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80039c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80039c8:	f107 0314 	add.w	r3, r7, #20
 80039cc:	4618      	mov	r0, r3
 80039ce:	f001 fa3d 	bl	8004e4c <SEGGER_SYSVIEW_SendTaskInfo>
}
 80039d2:	bf00      	nop
 80039d4:	3728      	adds	r7, #40	; 0x28
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
	...

080039dc <__NVIC_EnableIRQ>:
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	4603      	mov	r3, r0
 80039e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	db0b      	blt.n	8003a06 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039ee:	79fb      	ldrb	r3, [r7, #7]
 80039f0:	f003 021f 	and.w	r2, r3, #31
 80039f4:	4907      	ldr	r1, [pc, #28]	; (8003a14 <__NVIC_EnableIRQ+0x38>)
 80039f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039fa:	095b      	lsrs	r3, r3, #5
 80039fc:	2001      	movs	r0, #1
 80039fe:	fa00 f202 	lsl.w	r2, r0, r2
 8003a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003a06:	bf00      	nop
 8003a08:	370c      	adds	r7, #12
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	e000e100 	.word	0xe000e100

08003a18 <__NVIC_SetPriority>:
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	4603      	mov	r3, r0
 8003a20:	6039      	str	r1, [r7, #0]
 8003a22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	db0a      	blt.n	8003a42 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	b2da      	uxtb	r2, r3
 8003a30:	490c      	ldr	r1, [pc, #48]	; (8003a64 <__NVIC_SetPriority+0x4c>)
 8003a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a36:	0112      	lsls	r2, r2, #4
 8003a38:	b2d2      	uxtb	r2, r2
 8003a3a:	440b      	add	r3, r1
 8003a3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003a40:	e00a      	b.n	8003a58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	b2da      	uxtb	r2, r3
 8003a46:	4908      	ldr	r1, [pc, #32]	; (8003a68 <__NVIC_SetPriority+0x50>)
 8003a48:	79fb      	ldrb	r3, [r7, #7]
 8003a4a:	f003 030f 	and.w	r3, r3, #15
 8003a4e:	3b04      	subs	r3, #4
 8003a50:	0112      	lsls	r2, r2, #4
 8003a52:	b2d2      	uxtb	r2, r2
 8003a54:	440b      	add	r3, r1
 8003a56:	761a      	strb	r2, [r3, #24]
}
 8003a58:	bf00      	nop
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr
 8003a64:	e000e100 	.word	0xe000e100
 8003a68:	e000ed00 	.word	0xe000ed00

08003a6c <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8003a72:	f001 fe2d 	bl	80056d0 <SEGGER_SYSVIEW_IsStarted>
 8003a76:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8003a7e:	f001 f869 	bl	8004b54 <SEGGER_SYSVIEW_Start>
  }
}
 8003a82:	bf00      	nop
 8003a84:	3708      	adds	r7, #8
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
	...

08003a8c <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	4603      	mov	r3, r0
 8003a94:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8003a96:	4b0c      	ldr	r3, [pc, #48]	; (8003ac8 <_cbOnUARTRx+0x3c>)
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	2b03      	cmp	r3, #3
 8003a9c:	d806      	bhi.n	8003aac <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8003a9e:	4b0a      	ldr	r3, [pc, #40]	; (8003ac8 <_cbOnUARTRx+0x3c>)
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	b2da      	uxtb	r2, r3
 8003aa6:	4b08      	ldr	r3, [pc, #32]	; (8003ac8 <_cbOnUARTRx+0x3c>)
 8003aa8:	701a      	strb	r2, [r3, #0]
    goto Done;
 8003aaa:	e009      	b.n	8003ac0 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8003aac:	f7ff ffde 	bl	8003a6c <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8003ab0:	4b05      	ldr	r3, [pc, #20]	; (8003ac8 <_cbOnUARTRx+0x3c>)
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	1dfb      	adds	r3, r7, #7
 8003ab8:	2201      	movs	r2, #1
 8003aba:	4619      	mov	r1, r3
 8003abc:	f000 fb9c 	bl	80041f8 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8003ac0:	bf00      	nop
}
 8003ac2:	3708      	adds	r7, #8
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	20000014 	.word	0x20000014

08003acc <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8003ad4:	4b14      	ldr	r3, [pc, #80]	; (8003b28 <_cbOnUARTTx+0x5c>)
 8003ad6:	785b      	ldrb	r3, [r3, #1]
 8003ad8:	2b03      	cmp	r3, #3
 8003ada:	d80f      	bhi.n	8003afc <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8003adc:	4b12      	ldr	r3, [pc, #72]	; (8003b28 <_cbOnUARTTx+0x5c>)
 8003ade:	785b      	ldrb	r3, [r3, #1]
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	4b12      	ldr	r3, [pc, #72]	; (8003b2c <_cbOnUARTTx+0x60>)
 8003ae4:	5c9a      	ldrb	r2, [r3, r2]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8003aea:	4b0f      	ldr	r3, [pc, #60]	; (8003b28 <_cbOnUARTTx+0x5c>)
 8003aec:	785b      	ldrb	r3, [r3, #1]
 8003aee:	3301      	adds	r3, #1
 8003af0:	b2da      	uxtb	r2, r3
 8003af2:	4b0d      	ldr	r3, [pc, #52]	; (8003b28 <_cbOnUARTTx+0x5c>)
 8003af4:	705a      	strb	r2, [r3, #1]
    r = 1;
 8003af6:	2301      	movs	r3, #1
 8003af8:	60fb      	str	r3, [r7, #12]
    goto Done;
 8003afa:	e00f      	b.n	8003b1c <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8003afc:	4b0a      	ldr	r3, [pc, #40]	; (8003b28 <_cbOnUARTTx+0x5c>)
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	2201      	movs	r2, #1
 8003b02:	6879      	ldr	r1, [r7, #4]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f000 fa1b 	bl	8003f40 <SEGGER_RTT_ReadUpBufferNoLock>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	da02      	bge.n	8003b1a <_cbOnUARTTx+0x4e>
    r = 0;
 8003b14:	2300      	movs	r3, #0
 8003b16:	60fb      	str	r3, [r7, #12]
 8003b18:	e000      	b.n	8003b1c <_cbOnUARTTx+0x50>
  }
Done:
 8003b1a:	bf00      	nop
  return r;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3710      	adds	r7, #16
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	20000014 	.word	0x20000014
 8003b2c:	080058ec 	.word	0x080058ec

08003b30 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8003b38:	4a04      	ldr	r2, [pc, #16]	; (8003b4c <SEGGER_UART_init+0x1c>)
 8003b3a:	4905      	ldr	r1, [pc, #20]	; (8003b50 <SEGGER_UART_init+0x20>)
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f000 f863 	bl	8003c08 <HIF_UART_Init>
}
 8003b42:	bf00      	nop
 8003b44:	3708      	adds	r7, #8
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	08003a8d 	.word	0x08003a8d
 8003b50:	08003acd 	.word	0x08003acd

08003b54 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8003b5a:	4b1e      	ldr	r3, [pc, #120]	; (8003bd4 <USART2_IRQHandler+0x80>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f003 0320 	and.w	r3, r3, #32
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d011      	beq.n	8003b8e <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8003b6a:	4b1b      	ldr	r3, [pc, #108]	; (8003bd8 <USART2_IRQHandler+0x84>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f003 030b 	and.w	r3, r3, #11
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d108      	bne.n	8003b8e <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8003b7c:	4b17      	ldr	r3, [pc, #92]	; (8003bdc <USART2_IRQHandler+0x88>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d004      	beq.n	8003b8e <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8003b84:	4b15      	ldr	r3, [pc, #84]	; (8003bdc <USART2_IRQHandler+0x88>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	79fa      	ldrb	r2, [r7, #7]
 8003b8a:	4610      	mov	r0, r2
 8003b8c:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d01a      	beq.n	8003bce <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8003b98:	4b11      	ldr	r3, [pc, #68]	; (8003be0 <USART2_IRQHandler+0x8c>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d015      	beq.n	8003bcc <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8003ba0:	4b0f      	ldr	r3, [pc, #60]	; (8003be0 <USART2_IRQHandler+0x8c>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	1dfa      	adds	r2, r7, #7
 8003ba6:	4610      	mov	r0, r2
 8003ba8:	4798      	blx	r3
 8003baa:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d106      	bne.n	8003bc0 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8003bb2:	4b0c      	ldr	r3, [pc, #48]	; (8003be4 <USART2_IRQHandler+0x90>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a0b      	ldr	r2, [pc, #44]	; (8003be4 <USART2_IRQHandler+0x90>)
 8003bb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bbc:	6013      	str	r3, [r2, #0]
 8003bbe:	e006      	b.n	8003bce <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8003bc0:	4b04      	ldr	r3, [pc, #16]	; (8003bd4 <USART2_IRQHandler+0x80>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8003bc4:	79fa      	ldrb	r2, [r7, #7]
 8003bc6:	4b04      	ldr	r3, [pc, #16]	; (8003bd8 <USART2_IRQHandler+0x84>)
 8003bc8:	601a      	str	r2, [r3, #0]
 8003bca:	e000      	b.n	8003bce <USART2_IRQHandler+0x7a>
      return;
 8003bcc:	bf00      	nop
    }
  }
}
 8003bce:	3710      	adds	r7, #16
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	40004400 	.word	0x40004400
 8003bd8:	40004404 	.word	0x40004404
 8003bdc:	20012e08 	.word	0x20012e08
 8003be0:	20012e0c 	.word	0x20012e0c
 8003be4:	4000440c 	.word	0x4000440c

08003be8 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8003bec:	4b05      	ldr	r3, [pc, #20]	; (8003c04 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a04      	ldr	r2, [pc, #16]	; (8003c04 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003bf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bf6:	6013      	str	r3, [r2, #0]
}
 8003bf8:	bf00      	nop
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	4000440c 	.word	0x4000440c

08003c08 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b086      	sub	sp, #24
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8003c14:	4b2e      	ldr	r3, [pc, #184]	; (8003cd0 <HIF_UART_Init+0xc8>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a2d      	ldr	r2, [pc, #180]	; (8003cd0 <HIF_UART_Init+0xc8>)
 8003c1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c1e:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8003c20:	4b2c      	ldr	r3, [pc, #176]	; (8003cd4 <HIF_UART_Init+0xcc>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a2b      	ldr	r2, [pc, #172]	; (8003cd4 <HIF_UART_Init+0xcc>)
 8003c26:	f043 0301 	orr.w	r3, r3, #1
 8003c2a:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8003c2c:	4b2a      	ldr	r3, [pc, #168]	; (8003cd8 <HIF_UART_Init+0xd0>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c38:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8003c40:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8003c42:	4a25      	ldr	r2, [pc, #148]	; (8003cd8 <HIF_UART_Init+0xd0>)
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8003c48:	4b24      	ldr	r3, [pc, #144]	; (8003cdc <HIF_UART_Init+0xd4>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c54:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8003c5c:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8003c5e:	4a1f      	ldr	r2, [pc, #124]	; (8003cdc <HIF_UART_Init+0xd4>)
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8003c64:	4b1e      	ldr	r3, [pc, #120]	; (8003ce0 <HIF_UART_Init+0xd8>)
 8003c66:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8003c6a:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8003c6c:	4b1d      	ldr	r3, [pc, #116]	; (8003ce4 <HIF_UART_Init+0xdc>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8003c72:	4b1d      	ldr	r3, [pc, #116]	; (8003ce8 <HIF_UART_Init+0xe0>)
 8003c74:	2280      	movs	r2, #128	; 0x80
 8003c76:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8003c7e:	4a1b      	ldr	r2, [pc, #108]	; (8003cec <HIF_UART_Init+0xe4>)
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c86:	3301      	adds	r3, #1
 8003c88:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	085b      	lsrs	r3, r3, #1
 8003c8e:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c96:	d302      	bcc.n	8003c9e <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8003c98:	f640 73ff 	movw	r3, #4095	; 0xfff
 8003c9c:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d004      	beq.n	8003cae <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	011b      	lsls	r3, r3, #4
 8003ca8:	4a11      	ldr	r2, [pc, #68]	; (8003cf0 <HIF_UART_Init+0xe8>)
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8003cae:	4a11      	ldr	r2, [pc, #68]	; (8003cf4 <HIF_UART_Init+0xec>)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8003cb4:	4a10      	ldr	r2, [pc, #64]	; (8003cf8 <HIF_UART_Init+0xf0>)
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8003cba:	2106      	movs	r1, #6
 8003cbc:	2026      	movs	r0, #38	; 0x26
 8003cbe:	f7ff feab 	bl	8003a18 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8003cc2:	2026      	movs	r0, #38	; 0x26
 8003cc4:	f7ff fe8a 	bl	80039dc <__NVIC_EnableIRQ>
}
 8003cc8:	bf00      	nop
 8003cca:	3718      	adds	r7, #24
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	40023840 	.word	0x40023840
 8003cd4:	40023830 	.word	0x40023830
 8003cd8:	40020020 	.word	0x40020020
 8003cdc:	40020000 	.word	0x40020000
 8003ce0:	4000440c 	.word	0x4000440c
 8003ce4:	40004410 	.word	0x40004410
 8003ce8:	40004414 	.word	0x40004414
 8003cec:	0501bd00 	.word	0x0501bd00
 8003cf0:	40004408 	.word	0x40004408
 8003cf4:	20012e08 	.word	0x20012e08
 8003cf8:	20012e0c 	.word	0x20012e0c

08003cfc <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003d02:	4b26      	ldr	r3, [pc, #152]	; (8003d9c <_DoInit+0xa0>)
 8003d04:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8003d06:	22a8      	movs	r2, #168	; 0xa8
 8003d08:	2100      	movs	r1, #0
 8003d0a:	6838      	ldr	r0, [r7, #0]
 8003d0c:	f001 fd4e 	bl	80057ac <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	2203      	movs	r2, #3
 8003d14:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	2203      	movs	r2, #3
 8003d1a:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	4a20      	ldr	r2, [pc, #128]	; (8003da0 <_DoInit+0xa4>)
 8003d20:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	4a1f      	ldr	r2, [pc, #124]	; (8003da4 <_DoInit+0xa8>)
 8003d26:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d2e:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	2200      	movs	r2, #0
 8003d34:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	4a16      	ldr	r2, [pc, #88]	; (8003da0 <_DoInit+0xa4>)
 8003d46:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	4a17      	ldr	r2, [pc, #92]	; (8003da8 <_DoInit+0xac>)
 8003d4c:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	2210      	movs	r2, #16
 8003d52:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	2200      	movs	r2, #0
 8003d58:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	2200      	movs	r2, #0
 8003d64:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003d66:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	607b      	str	r3, [r7, #4]
 8003d6e:	e00c      	b.n	8003d8a <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f1c3 030f 	rsb	r3, r3, #15
 8003d76:	4a0d      	ldr	r2, [pc, #52]	; (8003dac <_DoInit+0xb0>)
 8003d78:	5cd1      	ldrb	r1, [r2, r3]
 8003d7a:	683a      	ldr	r2, [r7, #0]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4413      	add	r3, r2
 8003d80:	460a      	mov	r2, r1
 8003d82:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	3301      	adds	r3, #1
 8003d88:	607b      	str	r3, [r7, #4]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2b0f      	cmp	r3, #15
 8003d8e:	d9ef      	bls.n	8003d70 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003d90:	f3bf 8f5f 	dmb	sy
}
 8003d94:	bf00      	nop
 8003d96:	3708      	adds	r7, #8
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	20014388 	.word	0x20014388
 8003da0:	080058b8 	.word	0x080058b8
 8003da4:	20012e10 	.word	0x20012e10
 8003da8:	20013210 	.word	0x20013210
 8003dac:	080058f0 	.word	0x080058f0

08003db0 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b08a      	sub	sp, #40	; 0x28
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d905      	bls.n	8003de0 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8003dd4:	69ba      	ldr	r2, [r7, #24]
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	627b      	str	r3, [r7, #36]	; 0x24
 8003dde:	e007      	b.n	8003df0 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	689a      	ldr	r2, [r3, #8]
 8003de4:	69b9      	ldr	r1, [r7, #24]
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	1acb      	subs	r3, r1, r3
 8003dea:	4413      	add	r3, r2
 8003dec:	3b01      	subs	r3, #1
 8003dee:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	689a      	ldr	r2, [r3, #8]
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	bf28      	it	cs
 8003dfe:	4613      	movcs	r3, r2
 8003e00:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8003e02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4293      	cmp	r3, r2
 8003e08:	bf28      	it	cs
 8003e0a:	4613      	movcs	r3, r2
 8003e0c:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	685a      	ldr	r2, [r3, #4]
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	4413      	add	r3, r2
 8003e16:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8003e18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e1a:	68b9      	ldr	r1, [r7, #8]
 8003e1c:	6978      	ldr	r0, [r7, #20]
 8003e1e:	f001 fcb7 	bl	8005790 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8003e22:	6a3a      	ldr	r2, [r7, #32]
 8003e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e26:	4413      	add	r3, r2
 8003e28:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8003e2a:	68ba      	ldr	r2, [r7, #8]
 8003e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2e:	4413      	add	r3, r2
 8003e30:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8003e3a:	69fa      	ldr	r2, [r7, #28]
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3e:	4413      	add	r3, r2
 8003e40:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	69fa      	ldr	r2, [r7, #28]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d101      	bne.n	8003e50 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003e50:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	69fa      	ldr	r2, [r7, #28]
 8003e58:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d1b2      	bne.n	8003dc6 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8003e60:	6a3b      	ldr	r3, [r7, #32]
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3728      	adds	r7, #40	; 0x28
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b088      	sub	sp, #32
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	60f8      	str	r0, [r7, #12]
 8003e72:	60b9      	str	r1, [r7, #8]
 8003e74:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	689a      	ldr	r2, [r3, #8]
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8003e86:	69ba      	ldr	r2, [r7, #24]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d911      	bls.n	8003eb2 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	685a      	ldr	r2, [r3, #4]
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	4413      	add	r3, r2
 8003e96:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	68b9      	ldr	r1, [r7, #8]
 8003e9c:	6938      	ldr	r0, [r7, #16]
 8003e9e:	f001 fc77 	bl	8005790 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003ea2:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8003ea6:	69fa      	ldr	r2, [r7, #28]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	441a      	add	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8003eb0:	e01f      	b.n	8003ef2 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	685a      	ldr	r2, [r3, #4]
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8003ec0:	697a      	ldr	r2, [r7, #20]
 8003ec2:	68b9      	ldr	r1, [r7, #8]
 8003ec4:	6938      	ldr	r0, [r7, #16]
 8003ec6:	f001 fc63 	bl	8005790 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	4413      	add	r3, r2
 8003ede:	697a      	ldr	r2, [r7, #20]
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	6938      	ldr	r0, [r7, #16]
 8003ee4:	f001 fc54 	bl	8005790 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003ee8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	697a      	ldr	r2, [r7, #20]
 8003ef0:	60da      	str	r2, [r3, #12]
}
 8003ef2:	bf00      	nop
 8003ef4:	3720      	adds	r7, #32
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003efa:	b480      	push	{r7}
 8003efc:	b087      	sub	sp, #28
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d808      	bhi.n	8003f28 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	689a      	ldr	r2, [r3, #8]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	1ad2      	subs	r2, r2, r3
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	4413      	add	r3, r2
 8003f22:	3b01      	subs	r3, #1
 8003f24:	617b      	str	r3, [r7, #20]
 8003f26:	e004      	b.n	8003f32 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003f28:	693a      	ldr	r2, [r7, #16]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003f32:	697b      	ldr	r3, [r7, #20]
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	371c      	adds	r7, #28
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b08c      	sub	sp, #48	; 0x30
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8003f4c:	4b3e      	ldr	r3, [pc, #248]	; (8004048 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003f4e:	623b      	str	r3, [r7, #32]
 8003f50:	6a3b      	ldr	r3, [r7, #32]
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8003f5a:	f7ff fecf 	bl	8003cfc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	1c5a      	adds	r2, r3, #1
 8003f62:	4613      	mov	r3, r2
 8003f64:	005b      	lsls	r3, r3, #1
 8003f66:	4413      	add	r3, r2
 8003f68:	00db      	lsls	r3, r3, #3
 8003f6a:	4a37      	ldr	r2, [pc, #220]	; (8004048 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003f6c:	4413      	add	r3, r2
 8003f6e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003f80:	2300      	movs	r3, #0
 8003f82:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003f84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d92b      	bls.n	8003fe4 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	689a      	ldr	r2, [r3, #8]
 8003f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	bf28      	it	cs
 8003f9e:	4613      	movcs	r3, r2
 8003fa0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	685a      	ldr	r2, [r3, #4]
 8003fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa8:	4413      	add	r3, r2
 8003faa:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003fac:	697a      	ldr	r2, [r7, #20]
 8003fae:	6939      	ldr	r1, [r7, #16]
 8003fb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003fb2:	f001 fbed 	bl	8005790 <memcpy>
    NumBytesRead += NumBytesRem;
 8003fb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	4413      	add	r3, r2
 8003fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003fbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003fce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d101      	bne.n	8003fe4 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003fe4:	69ba      	ldr	r2, [r7, #24]
 8003fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003fec:	697a      	ldr	r2, [r7, #20]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	bf28      	it	cs
 8003ff4:	4613      	movcs	r3, r2
 8003ff6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d019      	beq.n	8004032 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	685a      	ldr	r2, [r3, #4]
 8004002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004004:	4413      	add	r3, r2
 8004006:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004008:	697a      	ldr	r2, [r7, #20]
 800400a:	6939      	ldr	r1, [r7, #16]
 800400c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800400e:	f001 fbbf 	bl	8005790 <memcpy>
    NumBytesRead += NumBytesRem;
 8004012:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	4413      	add	r3, r2
 8004018:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800401a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	4413      	add	r3, r2
 8004020:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800402a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	4413      	add	r3, r2
 8004030:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8004032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004034:	2b00      	cmp	r3, #0
 8004036:	d002      	beq.n	800403e <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800403c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800403e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004040:	4618      	mov	r0, r3
 8004042:	3730      	adds	r7, #48	; 0x30
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	20014388 	.word	0x20014388

0800404c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800404c:	b580      	push	{r7, lr}
 800404e:	b08c      	sub	sp, #48	; 0x30
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004058:	4b3e      	ldr	r3, [pc, #248]	; (8004154 <SEGGER_RTT_ReadNoLock+0x108>)
 800405a:	623b      	str	r3, [r7, #32]
 800405c:	6a3b      	ldr	r3, [r7, #32]
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	b2db      	uxtb	r3, r3
 8004062:	2b00      	cmp	r3, #0
 8004064:	d101      	bne.n	800406a <SEGGER_RTT_ReadNoLock+0x1e>
 8004066:	f7ff fe49 	bl	8003cfc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	4613      	mov	r3, r2
 800406e:	005b      	lsls	r3, r3, #1
 8004070:	4413      	add	r3, r2
 8004072:	00db      	lsls	r3, r3, #3
 8004074:	3360      	adds	r3, #96	; 0x60
 8004076:	4a37      	ldr	r2, [pc, #220]	; (8004154 <SEGGER_RTT_ReadNoLock+0x108>)
 8004078:	4413      	add	r3, r2
 800407a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800408c:	2300      	movs	r3, #0
 800408e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004090:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	429a      	cmp	r2, r3
 8004096:	d92b      	bls.n	80040f0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	689a      	ldr	r2, [r3, #8]
 800409c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80040a2:	697a      	ldr	r2, [r7, #20]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4293      	cmp	r3, r2
 80040a8:	bf28      	it	cs
 80040aa:	4613      	movcs	r3, r2
 80040ac:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	685a      	ldr	r2, [r3, #4]
 80040b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b4:	4413      	add	r3, r2
 80040b6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	6939      	ldr	r1, [r7, #16]
 80040bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80040be:	f001 fb67 	bl	8005790 <memcpy>
    NumBytesRead += NumBytesRem;
 80040c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	4413      	add	r3, r2
 80040c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80040ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	4413      	add	r3, r2
 80040d0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80040da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	4413      	add	r3, r2
 80040e0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d101      	bne.n	80040f0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80040ec:	2300      	movs	r3, #0
 80040ee:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80040f0:	69ba      	ldr	r2, [r7, #24]
 80040f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4293      	cmp	r3, r2
 80040fe:	bf28      	it	cs
 8004100:	4613      	movcs	r3, r2
 8004102:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d019      	beq.n	800413e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	685a      	ldr	r2, [r3, #4]
 800410e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004110:	4413      	add	r3, r2
 8004112:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004114:	697a      	ldr	r2, [r7, #20]
 8004116:	6939      	ldr	r1, [r7, #16]
 8004118:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800411a:	f001 fb39 	bl	8005790 <memcpy>
    NumBytesRead += NumBytesRem;
 800411e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	4413      	add	r3, r2
 8004124:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	4413      	add	r3, r2
 800412c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004136:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	4413      	add	r3, r2
 800413c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800413e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004140:	2b00      	cmp	r3, #0
 8004142:	d002      	beq.n	800414a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004148:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800414a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800414c:	4618      	mov	r0, r3
 800414e:	3730      	adds	r7, #48	; 0x30
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	20014388 	.word	0x20014388

08004158 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004158:	b580      	push	{r7, lr}
 800415a:	b088      	sub	sp, #32
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	4613      	mov	r3, r2
 800416c:	005b      	lsls	r3, r3, #1
 800416e:	4413      	add	r3, r2
 8004170:	00db      	lsls	r3, r3, #3
 8004172:	3360      	adds	r3, #96	; 0x60
 8004174:	4a1f      	ldr	r2, [pc, #124]	; (80041f4 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8004176:	4413      	add	r3, r2
 8004178:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	2b02      	cmp	r3, #2
 8004180:	d029      	beq.n	80041d6 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8004182:	2b02      	cmp	r3, #2
 8004184:	d82e      	bhi.n	80041e4 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8004186:	2b00      	cmp	r3, #0
 8004188:	d002      	beq.n	8004190 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 800418a:	2b01      	cmp	r3, #1
 800418c:	d013      	beq.n	80041b6 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 800418e:	e029      	b.n	80041e4 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004190:	6978      	ldr	r0, [r7, #20]
 8004192:	f7ff feb2 	bl	8003efa <_GetAvailWriteSpace>
 8004196:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	429a      	cmp	r2, r3
 800419e:	d202      	bcs.n	80041a6 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 80041a0:	2300      	movs	r3, #0
 80041a2:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80041a4:	e021      	b.n	80041ea <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	69b9      	ldr	r1, [r7, #24]
 80041ae:	6978      	ldr	r0, [r7, #20]
 80041b0:	f7ff fe5b 	bl	8003e6a <_WriteNoCheck>
    break;
 80041b4:	e019      	b.n	80041ea <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80041b6:	6978      	ldr	r0, [r7, #20]
 80041b8:	f7ff fe9f 	bl	8003efa <_GetAvailWriteSpace>
 80041bc:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	4293      	cmp	r3, r2
 80041c4:	bf28      	it	cs
 80041c6:	4613      	movcs	r3, r2
 80041c8:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80041ca:	69fa      	ldr	r2, [r7, #28]
 80041cc:	69b9      	ldr	r1, [r7, #24]
 80041ce:	6978      	ldr	r0, [r7, #20]
 80041d0:	f7ff fe4b 	bl	8003e6a <_WriteNoCheck>
    break;
 80041d4:	e009      	b.n	80041ea <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	69b9      	ldr	r1, [r7, #24]
 80041da:	6978      	ldr	r0, [r7, #20]
 80041dc:	f7ff fde8 	bl	8003db0 <_WriteBlocking>
 80041e0:	61f8      	str	r0, [r7, #28]
    break;
 80041e2:	e002      	b.n	80041ea <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 80041e4:	2300      	movs	r3, #0
 80041e6:	61fb      	str	r3, [r7, #28]
    break;
 80041e8:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80041ea:	69fb      	ldr	r3, [r7, #28]
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3720      	adds	r7, #32
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	20014388 	.word	0x20014388

080041f8 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b088      	sub	sp, #32
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8004204:	4b0e      	ldr	r3, [pc, #56]	; (8004240 <SEGGER_RTT_WriteDownBuffer+0x48>)
 8004206:	61fb      	str	r3, [r7, #28]
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	b2db      	uxtb	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d101      	bne.n	8004216 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8004212:	f7ff fd73 	bl	8003cfc <_DoInit>
  SEGGER_RTT_LOCK();
 8004216:	f3ef 8311 	mrs	r3, BASEPRI
 800421a:	f04f 0120 	mov.w	r1, #32
 800421e:	f381 8811 	msr	BASEPRI, r1
 8004222:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	68b9      	ldr	r1, [r7, #8]
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	f7ff ff95 	bl	8004158 <SEGGER_RTT_WriteDownBufferNoLock>
 800422e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8004236:	697b      	ldr	r3, [r7, #20]
}
 8004238:	4618      	mov	r0, r3
 800423a:	3720      	adds	r7, #32
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}
 8004240:	20014388 	.word	0x20014388

08004244 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004244:	b580      	push	{r7, lr}
 8004246:	b088      	sub	sp, #32
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
 8004250:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004252:	4b3d      	ldr	r3, [pc, #244]	; (8004348 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004254:	61bb      	str	r3, [r7, #24]
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	b2db      	uxtb	r3, r3
 800425c:	2b00      	cmp	r3, #0
 800425e:	d101      	bne.n	8004264 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004260:	f7ff fd4c 	bl	8003cfc <_DoInit>
  SEGGER_RTT_LOCK();
 8004264:	f3ef 8311 	mrs	r3, BASEPRI
 8004268:	f04f 0120 	mov.w	r1, #32
 800426c:	f381 8811 	msr	BASEPRI, r1
 8004270:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004272:	4b35      	ldr	r3, [pc, #212]	; (8004348 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004274:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004276:	2300      	movs	r3, #0
 8004278:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800427a:	6939      	ldr	r1, [r7, #16]
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	1c5a      	adds	r2, r3, #1
 8004280:	4613      	mov	r3, r2
 8004282:	005b      	lsls	r3, r3, #1
 8004284:	4413      	add	r3, r2
 8004286:	00db      	lsls	r3, r3, #3
 8004288:	440b      	add	r3, r1
 800428a:	3304      	adds	r3, #4
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d008      	beq.n	80042a4 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	3301      	adds	r3, #1
 8004296:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	691b      	ldr	r3, [r3, #16]
 800429c:	69fa      	ldr	r2, [r7, #28]
 800429e:	429a      	cmp	r2, r3
 80042a0:	dbeb      	blt.n	800427a <SEGGER_RTT_AllocUpBuffer+0x36>
 80042a2:	e000      	b.n	80042a6 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80042a4:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	69fa      	ldr	r2, [r7, #28]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	da3f      	bge.n	8004330 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80042b0:	6939      	ldr	r1, [r7, #16]
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	1c5a      	adds	r2, r3, #1
 80042b6:	4613      	mov	r3, r2
 80042b8:	005b      	lsls	r3, r3, #1
 80042ba:	4413      	add	r3, r2
 80042bc:	00db      	lsls	r3, r3, #3
 80042be:	440b      	add	r3, r1
 80042c0:	68fa      	ldr	r2, [r7, #12]
 80042c2:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80042c4:	6939      	ldr	r1, [r7, #16]
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	1c5a      	adds	r2, r3, #1
 80042ca:	4613      	mov	r3, r2
 80042cc:	005b      	lsls	r3, r3, #1
 80042ce:	4413      	add	r3, r2
 80042d0:	00db      	lsls	r3, r3, #3
 80042d2:	440b      	add	r3, r1
 80042d4:	3304      	adds	r3, #4
 80042d6:	68ba      	ldr	r2, [r7, #8]
 80042d8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80042da:	6939      	ldr	r1, [r7, #16]
 80042dc:	69fa      	ldr	r2, [r7, #28]
 80042de:	4613      	mov	r3, r2
 80042e0:	005b      	lsls	r3, r3, #1
 80042e2:	4413      	add	r3, r2
 80042e4:	00db      	lsls	r3, r3, #3
 80042e6:	440b      	add	r3, r1
 80042e8:	3320      	adds	r3, #32
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80042ee:	6939      	ldr	r1, [r7, #16]
 80042f0:	69fa      	ldr	r2, [r7, #28]
 80042f2:	4613      	mov	r3, r2
 80042f4:	005b      	lsls	r3, r3, #1
 80042f6:	4413      	add	r3, r2
 80042f8:	00db      	lsls	r3, r3, #3
 80042fa:	440b      	add	r3, r1
 80042fc:	3328      	adds	r3, #40	; 0x28
 80042fe:	2200      	movs	r2, #0
 8004300:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004302:	6939      	ldr	r1, [r7, #16]
 8004304:	69fa      	ldr	r2, [r7, #28]
 8004306:	4613      	mov	r3, r2
 8004308:	005b      	lsls	r3, r3, #1
 800430a:	4413      	add	r3, r2
 800430c:	00db      	lsls	r3, r3, #3
 800430e:	440b      	add	r3, r1
 8004310:	3324      	adds	r3, #36	; 0x24
 8004312:	2200      	movs	r2, #0
 8004314:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004316:	6939      	ldr	r1, [r7, #16]
 8004318:	69fa      	ldr	r2, [r7, #28]
 800431a:	4613      	mov	r3, r2
 800431c:	005b      	lsls	r3, r3, #1
 800431e:	4413      	add	r3, r2
 8004320:	00db      	lsls	r3, r3, #3
 8004322:	440b      	add	r3, r1
 8004324:	332c      	adds	r3, #44	; 0x2c
 8004326:	683a      	ldr	r2, [r7, #0]
 8004328:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800432a:	f3bf 8f5f 	dmb	sy
 800432e:	e002      	b.n	8004336 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004330:	f04f 33ff 	mov.w	r3, #4294967295
 8004334:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800433c:	69fb      	ldr	r3, [r7, #28]
}
 800433e:	4618      	mov	r0, r3
 8004340:	3720      	adds	r7, #32
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	20014388 	.word	0x20014388

0800434c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800434c:	b580      	push	{r7, lr}
 800434e:	b08a      	sub	sp, #40	; 0x28
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]
 8004358:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800435a:	4b21      	ldr	r3, [pc, #132]	; (80043e0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800435c:	623b      	str	r3, [r7, #32]
 800435e:	6a3b      	ldr	r3, [r7, #32]
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	b2db      	uxtb	r3, r3
 8004364:	2b00      	cmp	r3, #0
 8004366:	d101      	bne.n	800436c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004368:	f7ff fcc8 	bl	8003cfc <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800436c:	4b1c      	ldr	r3, [pc, #112]	; (80043e0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800436e:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2b02      	cmp	r3, #2
 8004374:	d82c      	bhi.n	80043d0 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8004376:	f3ef 8311 	mrs	r3, BASEPRI
 800437a:	f04f 0120 	mov.w	r1, #32
 800437e:	f381 8811 	msr	BASEPRI, r1
 8004382:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	4613      	mov	r3, r2
 8004388:	005b      	lsls	r3, r3, #1
 800438a:	4413      	add	r3, r2
 800438c:	00db      	lsls	r3, r3, #3
 800438e:	3360      	adds	r3, #96	; 0x60
 8004390:	69fa      	ldr	r2, [r7, #28]
 8004392:	4413      	add	r3, r2
 8004394:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d00e      	beq.n	80043ba <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	68ba      	ldr	r2, [r7, #8]
 80043a0:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	683a      	ldr	r2, [r7, #0]
 80043ac:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	2200      	movs	r2, #0
 80043b2:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	2200      	movs	r2, #0
 80043b8:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043be:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80043c0:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80043ca:	2300      	movs	r3, #0
 80043cc:	627b      	str	r3, [r7, #36]	; 0x24
 80043ce:	e002      	b.n	80043d6 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80043d0:	f04f 33ff 	mov.w	r3, #4294967295
 80043d4:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 80043d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3728      	adds	r7, #40	; 0x28
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	20014388 	.word	0x20014388

080043e4 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80043e4:	b480      	push	{r7}
 80043e6:	b087      	sub	sp, #28
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80043f0:	2300      	movs	r3, #0
 80043f2:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00f      	beq.n	800441a <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 80043fa:	e002      	b.n	8004402 <_EncodeStr+0x1e>
      Len++;
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	3301      	adds	r3, #1
 8004400:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8004402:	68ba      	ldr	r2, [r7, #8]
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	4413      	add	r3, r2
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1f6      	bne.n	80043fc <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 800440e:	693a      	ldr	r2, [r7, #16]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	429a      	cmp	r2, r3
 8004414:	d901      	bls.n	800441a <_EncodeStr+0x36>
      Len = Limit;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	2bfe      	cmp	r3, #254	; 0xfe
 800441e:	d806      	bhi.n	800442e <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	1c5a      	adds	r2, r3, #1
 8004424:	60fa      	str	r2, [r7, #12]
 8004426:	693a      	ldr	r2, [r7, #16]
 8004428:	b2d2      	uxtb	r2, r2
 800442a:	701a      	strb	r2, [r3, #0]
 800442c:	e011      	b.n	8004452 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	1c5a      	adds	r2, r3, #1
 8004432:	60fa      	str	r2, [r7, #12]
 8004434:	22ff      	movs	r2, #255	; 0xff
 8004436:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	1c5a      	adds	r2, r3, #1
 800443c:	60fa      	str	r2, [r7, #12]
 800443e:	693a      	ldr	r2, [r7, #16]
 8004440:	b2d2      	uxtb	r2, r2
 8004442:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	0a19      	lsrs	r1, r3, #8
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	1c5a      	adds	r2, r3, #1
 800444c:	60fa      	str	r2, [r7, #12]
 800444e:	b2ca      	uxtb	r2, r1
 8004450:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8004452:	2300      	movs	r3, #0
 8004454:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004456:	e00a      	b.n	800446e <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8004458:	68ba      	ldr	r2, [r7, #8]
 800445a:	1c53      	adds	r3, r2, #1
 800445c:	60bb      	str	r3, [r7, #8]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	1c59      	adds	r1, r3, #1
 8004462:	60f9      	str	r1, [r7, #12]
 8004464:	7812      	ldrb	r2, [r2, #0]
 8004466:	701a      	strb	r2, [r3, #0]
    n++;
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	3301      	adds	r3, #1
 800446c:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800446e:	697a      	ldr	r2, [r7, #20]
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	429a      	cmp	r2, r3
 8004474:	d3f0      	bcc.n	8004458 <_EncodeStr+0x74>
  }
  return pPayload;
 8004476:	68fb      	ldr	r3, [r7, #12]
}
 8004478:	4618      	mov	r0, r3
 800447a:	371c      	adds	r7, #28
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	3307      	adds	r3, #7
}
 8004490:	4618      	mov	r0, r3
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80044a2:	4b35      	ldr	r3, [pc, #212]	; (8004578 <_HandleIncomingPacket+0xdc>)
 80044a4:	7e1b      	ldrb	r3, [r3, #24]
 80044a6:	4618      	mov	r0, r3
 80044a8:	1cfb      	adds	r3, r7, #3
 80044aa:	2201      	movs	r2, #1
 80044ac:	4619      	mov	r1, r3
 80044ae:	f7ff fdcd 	bl	800404c <SEGGER_RTT_ReadNoLock>
 80044b2:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d052      	beq.n	8004560 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 80044ba:	78fb      	ldrb	r3, [r7, #3]
 80044bc:	2b80      	cmp	r3, #128	; 0x80
 80044be:	d031      	beq.n	8004524 <_HandleIncomingPacket+0x88>
 80044c0:	2b80      	cmp	r3, #128	; 0x80
 80044c2:	dc40      	bgt.n	8004546 <_HandleIncomingPacket+0xaa>
 80044c4:	2b07      	cmp	r3, #7
 80044c6:	dc15      	bgt.n	80044f4 <_HandleIncomingPacket+0x58>
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	dd3c      	ble.n	8004546 <_HandleIncomingPacket+0xaa>
 80044cc:	3b01      	subs	r3, #1
 80044ce:	2b06      	cmp	r3, #6
 80044d0:	d839      	bhi.n	8004546 <_HandleIncomingPacket+0xaa>
 80044d2:	a201      	add	r2, pc, #4	; (adr r2, 80044d8 <_HandleIncomingPacket+0x3c>)
 80044d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d8:	080044fb 	.word	0x080044fb
 80044dc:	08004501 	.word	0x08004501
 80044e0:	08004507 	.word	0x08004507
 80044e4:	0800450d 	.word	0x0800450d
 80044e8:	08004513 	.word	0x08004513
 80044ec:	08004519 	.word	0x08004519
 80044f0:	0800451f 	.word	0x0800451f
 80044f4:	2b7f      	cmp	r3, #127	; 0x7f
 80044f6:	d035      	beq.n	8004564 <_HandleIncomingPacket+0xc8>
 80044f8:	e025      	b.n	8004546 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80044fa:	f000 fb2b 	bl	8004b54 <SEGGER_SYSVIEW_Start>
      break;
 80044fe:	e036      	b.n	800456e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004500:	f000 fbe4 	bl	8004ccc <SEGGER_SYSVIEW_Stop>
      break;
 8004504:	e033      	b.n	800456e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004506:	f000 fdbd 	bl	8005084 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800450a:	e030      	b.n	800456e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800450c:	f000 fd82 	bl	8005014 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004510:	e02d      	b.n	800456e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004512:	f000 fc01 	bl	8004d18 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004516:	e02a      	b.n	800456e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004518:	f001 f840 	bl	800559c <SEGGER_SYSVIEW_SendNumModules>
      break;
 800451c:	e027      	b.n	800456e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800451e:	f001 f81f 	bl	8005560 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004522:	e024      	b.n	800456e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004524:	4b14      	ldr	r3, [pc, #80]	; (8004578 <_HandleIncomingPacket+0xdc>)
 8004526:	7e1b      	ldrb	r3, [r3, #24]
 8004528:	4618      	mov	r0, r3
 800452a:	1cfb      	adds	r3, r7, #3
 800452c:	2201      	movs	r2, #1
 800452e:	4619      	mov	r1, r3
 8004530:	f7ff fd8c 	bl	800404c <SEGGER_RTT_ReadNoLock>
 8004534:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d015      	beq.n	8004568 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800453c:	78fb      	ldrb	r3, [r7, #3]
 800453e:	4618      	mov	r0, r3
 8004540:	f000 ff8e 	bl	8005460 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004544:	e010      	b.n	8004568 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004546:	78fb      	ldrb	r3, [r7, #3]
 8004548:	b25b      	sxtb	r3, r3
 800454a:	2b00      	cmp	r3, #0
 800454c:	da0e      	bge.n	800456c <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800454e:	4b0a      	ldr	r3, [pc, #40]	; (8004578 <_HandleIncomingPacket+0xdc>)
 8004550:	7e1b      	ldrb	r3, [r3, #24]
 8004552:	4618      	mov	r0, r3
 8004554:	1cfb      	adds	r3, r7, #3
 8004556:	2201      	movs	r2, #1
 8004558:	4619      	mov	r1, r3
 800455a:	f7ff fd77 	bl	800404c <SEGGER_RTT_ReadNoLock>
      }
      break;
 800455e:	e005      	b.n	800456c <_HandleIncomingPacket+0xd0>
    }
  }
 8004560:	bf00      	nop
 8004562:	e004      	b.n	800456e <_HandleIncomingPacket+0xd2>
      break;
 8004564:	bf00      	nop
 8004566:	e002      	b.n	800456e <_HandleIncomingPacket+0xd2>
      break;
 8004568:	bf00      	nop
 800456a:	e000      	b.n	800456e <_HandleIncomingPacket+0xd2>
      break;
 800456c:	bf00      	nop
}
 800456e:	bf00      	nop
 8004570:	3708      	adds	r7, #8
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	20014228 	.word	0x20014228

0800457c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800457c:	b580      	push	{r7, lr}
 800457e:	b08c      	sub	sp, #48	; 0x30
 8004580:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004582:	2301      	movs	r3, #1
 8004584:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004586:	1d3b      	adds	r3, r7, #4
 8004588:	3301      	adds	r3, #1
 800458a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004590:	4b32      	ldr	r3, [pc, #200]	; (800465c <_TrySendOverflowPacket+0xe0>)
 8004592:	695b      	ldr	r3, [r3, #20]
 8004594:	62bb      	str	r3, [r7, #40]	; 0x28
 8004596:	e00b      	b.n	80045b0 <_TrySendOverflowPacket+0x34>
 8004598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800459a:	b2da      	uxtb	r2, r3
 800459c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800459e:	1c59      	adds	r1, r3, #1
 80045a0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80045a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80045a6:	b2d2      	uxtb	r2, r2
 80045a8:	701a      	strb	r2, [r3, #0]
 80045aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ac:	09db      	lsrs	r3, r3, #7
 80045ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80045b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b2:	2b7f      	cmp	r3, #127	; 0x7f
 80045b4:	d8f0      	bhi.n	8004598 <_TrySendOverflowPacket+0x1c>
 80045b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b8:	1c5a      	adds	r2, r3, #1
 80045ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045be:	b2d2      	uxtb	r2, r2
 80045c0:	701a      	strb	r2, [r3, #0]
 80045c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c4:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80045c6:	4b26      	ldr	r3, [pc, #152]	; (8004660 <_TrySendOverflowPacket+0xe4>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80045cc:	4b23      	ldr	r3, [pc, #140]	; (800465c <_TrySendOverflowPacket+0xe0>)
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	69ba      	ldr	r2, [r7, #24]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	627b      	str	r3, [r7, #36]	; 0x24
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	623b      	str	r3, [r7, #32]
 80045de:	e00b      	b.n	80045f8 <_TrySendOverflowPacket+0x7c>
 80045e0:	6a3b      	ldr	r3, [r7, #32]
 80045e2:	b2da      	uxtb	r2, r3
 80045e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e6:	1c59      	adds	r1, r3, #1
 80045e8:	6279      	str	r1, [r7, #36]	; 0x24
 80045ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80045ee:	b2d2      	uxtb	r2, r2
 80045f0:	701a      	strb	r2, [r3, #0]
 80045f2:	6a3b      	ldr	r3, [r7, #32]
 80045f4:	09db      	lsrs	r3, r3, #7
 80045f6:	623b      	str	r3, [r7, #32]
 80045f8:	6a3b      	ldr	r3, [r7, #32]
 80045fa:	2b7f      	cmp	r3, #127	; 0x7f
 80045fc:	d8f0      	bhi.n	80045e0 <_TrySendOverflowPacket+0x64>
 80045fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004600:	1c5a      	adds	r2, r3, #1
 8004602:	627a      	str	r2, [r7, #36]	; 0x24
 8004604:	6a3a      	ldr	r2, [r7, #32]
 8004606:	b2d2      	uxtb	r2, r2
 8004608:	701a      	strb	r2, [r3, #0]
 800460a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800460e:	4b13      	ldr	r3, [pc, #76]	; (800465c <_TrySendOverflowPacket+0xe0>)
 8004610:	785b      	ldrb	r3, [r3, #1]
 8004612:	4618      	mov	r0, r3
 8004614:	1d3b      	adds	r3, r7, #4
 8004616:	69fa      	ldr	r2, [r7, #28]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	461a      	mov	r2, r3
 800461c:	1d3b      	adds	r3, r7, #4
 800461e:	4619      	mov	r1, r3
 8004620:	f7fb fdd6 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004624:	4603      	mov	r3, r0
 8004626:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8004628:	f7ff fade 	bl	8003be8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d009      	beq.n	8004646 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004632:	4a0a      	ldr	r2, [pc, #40]	; (800465c <_TrySendOverflowPacket+0xe0>)
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004638:	4b08      	ldr	r3, [pc, #32]	; (800465c <_TrySendOverflowPacket+0xe0>)
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	3b01      	subs	r3, #1
 800463e:	b2da      	uxtb	r2, r3
 8004640:	4b06      	ldr	r3, [pc, #24]	; (800465c <_TrySendOverflowPacket+0xe0>)
 8004642:	701a      	strb	r2, [r3, #0]
 8004644:	e004      	b.n	8004650 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004646:	4b05      	ldr	r3, [pc, #20]	; (800465c <_TrySendOverflowPacket+0xe0>)
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	3301      	adds	r3, #1
 800464c:	4a03      	ldr	r2, [pc, #12]	; (800465c <_TrySendOverflowPacket+0xe0>)
 800464e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004650:	693b      	ldr	r3, [r7, #16]
}
 8004652:	4618      	mov	r0, r3
 8004654:	3730      	adds	r7, #48	; 0x30
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	20014228 	.word	0x20014228
 8004660:	e0001004 	.word	0xe0001004

08004664 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004664:	b580      	push	{r7, lr}
 8004666:	b08a      	sub	sp, #40	; 0x28
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004670:	4b9b      	ldr	r3, [pc, #620]	; (80048e0 <_SendPacket+0x27c>)
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d010      	beq.n	800469a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004678:	4b99      	ldr	r3, [pc, #612]	; (80048e0 <_SendPacket+0x27c>)
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	2b00      	cmp	r3, #0
 800467e:	f000 812b 	beq.w	80048d8 <_SendPacket+0x274>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004682:	4b97      	ldr	r3, [pc, #604]	; (80048e0 <_SendPacket+0x27c>)
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	2b02      	cmp	r3, #2
 8004688:	d109      	bne.n	800469e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800468a:	f7ff ff77 	bl	800457c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800468e:	4b94      	ldr	r3, [pc, #592]	; (80048e0 <_SendPacket+0x27c>)
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	2b01      	cmp	r3, #1
 8004694:	f040 8122 	bne.w	80048dc <_SendPacket+0x278>
      goto SendDone;
    }
  }
Send:
 8004698:	e001      	b.n	800469e <_SendPacket+0x3a>
    goto Send;
 800469a:	bf00      	nop
 800469c:	e000      	b.n	80046a0 <_SendPacket+0x3c>
Send:
 800469e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2b1f      	cmp	r3, #31
 80046a4:	d809      	bhi.n	80046ba <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80046a6:	4b8e      	ldr	r3, [pc, #568]	; (80048e0 <_SendPacket+0x27c>)
 80046a8:	69da      	ldr	r2, [r3, #28]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	fa22 f303 	lsr.w	r3, r2, r3
 80046b0:	f003 0301 	and.w	r3, r3, #1
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	f040 8117 	bne.w	80048e8 <_SendPacket+0x284>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2b17      	cmp	r3, #23
 80046be:	d807      	bhi.n	80046d0 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	3b01      	subs	r3, #1
 80046c4:	60fb      	str	r3, [r7, #12]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	b2da      	uxtb	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	701a      	strb	r2, [r3, #0]
 80046ce:	e0c4      	b.n	800485a <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80046d0:	68ba      	ldr	r2, [r7, #8]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	2b7f      	cmp	r3, #127	; 0x7f
 80046dc:	d912      	bls.n	8004704 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	09da      	lsrs	r2, r3, #7
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	3b01      	subs	r3, #1
 80046e6:	60fb      	str	r3, [r7, #12]
 80046e8:	b2d2      	uxtb	r2, r2
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	3a01      	subs	r2, #1
 80046f6:	60fa      	str	r2, [r7, #12]
 80046f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80046fc:	b2da      	uxtb	r2, r3
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	701a      	strb	r2, [r3, #0]
 8004702:	e006      	b.n	8004712 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	3b01      	subs	r3, #1
 8004708:	60fb      	str	r3, [r7, #12]
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	b2da      	uxtb	r2, r3
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2b7e      	cmp	r3, #126	; 0x7e
 8004716:	d807      	bhi.n	8004728 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	3b01      	subs	r3, #1
 800471c:	60fb      	str	r3, [r7, #12]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	b2da      	uxtb	r2, r3
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	701a      	strb	r2, [r3, #0]
 8004726:	e098      	b.n	800485a <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800472e:	d212      	bcs.n	8004756 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	09da      	lsrs	r2, r3, #7
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	3b01      	subs	r3, #1
 8004738:	60fb      	str	r3, [r7, #12]
 800473a:	b2d2      	uxtb	r2, r2
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	b2db      	uxtb	r3, r3
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	3a01      	subs	r2, #1
 8004748:	60fa      	str	r2, [r7, #12]
 800474a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800474e:	b2da      	uxtb	r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	701a      	strb	r2, [r3, #0]
 8004754:	e081      	b.n	800485a <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800475c:	d21d      	bcs.n	800479a <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	0b9a      	lsrs	r2, r3, #14
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	3b01      	subs	r3, #1
 8004766:	60fb      	str	r3, [r7, #12]
 8004768:	b2d2      	uxtb	r2, r2
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	09db      	lsrs	r3, r3, #7
 8004772:	b2db      	uxtb	r3, r3
 8004774:	68fa      	ldr	r2, [r7, #12]
 8004776:	3a01      	subs	r2, #1
 8004778:	60fa      	str	r2, [r7, #12]
 800477a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800477e:	b2da      	uxtb	r2, r3
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	b2db      	uxtb	r3, r3
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	3a01      	subs	r2, #1
 800478c:	60fa      	str	r2, [r7, #12]
 800478e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004792:	b2da      	uxtb	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	701a      	strb	r2, [r3, #0]
 8004798:	e05f      	b.n	800485a <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047a0:	d228      	bcs.n	80047f4 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	0d5a      	lsrs	r2, r3, #21
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	3b01      	subs	r3, #1
 80047aa:	60fb      	str	r3, [r7, #12]
 80047ac:	b2d2      	uxtb	r2, r2
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	0b9b      	lsrs	r3, r3, #14
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	3a01      	subs	r2, #1
 80047bc:	60fa      	str	r2, [r7, #12]
 80047be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80047c2:	b2da      	uxtb	r2, r3
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	09db      	lsrs	r3, r3, #7
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	3a01      	subs	r2, #1
 80047d2:	60fa      	str	r2, [r7, #12]
 80047d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80047d8:	b2da      	uxtb	r2, r3
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	3a01      	subs	r2, #1
 80047e6:	60fa      	str	r2, [r7, #12]
 80047e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80047ec:	b2da      	uxtb	r2, r3
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	701a      	strb	r2, [r3, #0]
 80047f2:	e032      	b.n	800485a <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	0f1a      	lsrs	r2, r3, #28
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	3b01      	subs	r3, #1
 80047fc:	60fb      	str	r3, [r7, #12]
 80047fe:	b2d2      	uxtb	r2, r2
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	0d5b      	lsrs	r3, r3, #21
 8004808:	b2db      	uxtb	r3, r3
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	3a01      	subs	r2, #1
 800480e:	60fa      	str	r2, [r7, #12]
 8004810:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004814:	b2da      	uxtb	r2, r3
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	0b9b      	lsrs	r3, r3, #14
 800481e:	b2db      	uxtb	r3, r3
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	3a01      	subs	r2, #1
 8004824:	60fa      	str	r2, [r7, #12]
 8004826:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800482a:	b2da      	uxtb	r2, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	09db      	lsrs	r3, r3, #7
 8004834:	b2db      	uxtb	r3, r3
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	3a01      	subs	r2, #1
 800483a:	60fa      	str	r2, [r7, #12]
 800483c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004840:	b2da      	uxtb	r2, r3
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	b2db      	uxtb	r3, r3
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	3a01      	subs	r2, #1
 800484e:	60fa      	str	r2, [r7, #12]
 8004850:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004854:	b2da      	uxtb	r2, r3
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800485a:	4b22      	ldr	r3, [pc, #136]	; (80048e4 <_SendPacket+0x280>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004860:	4b1f      	ldr	r3, [pc, #124]	; (80048e0 <_SendPacket+0x27c>)
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	69ba      	ldr	r2, [r7, #24]
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	627b      	str	r3, [r7, #36]	; 0x24
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	623b      	str	r3, [r7, #32]
 8004872:	e00b      	b.n	800488c <_SendPacket+0x228>
 8004874:	6a3b      	ldr	r3, [r7, #32]
 8004876:	b2da      	uxtb	r2, r3
 8004878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487a:	1c59      	adds	r1, r3, #1
 800487c:	6279      	str	r1, [r7, #36]	; 0x24
 800487e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004882:	b2d2      	uxtb	r2, r2
 8004884:	701a      	strb	r2, [r3, #0]
 8004886:	6a3b      	ldr	r3, [r7, #32]
 8004888:	09db      	lsrs	r3, r3, #7
 800488a:	623b      	str	r3, [r7, #32]
 800488c:	6a3b      	ldr	r3, [r7, #32]
 800488e:	2b7f      	cmp	r3, #127	; 0x7f
 8004890:	d8f0      	bhi.n	8004874 <_SendPacket+0x210>
 8004892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004894:	1c5a      	adds	r2, r3, #1
 8004896:	627a      	str	r2, [r7, #36]	; 0x24
 8004898:	6a3a      	ldr	r2, [r7, #32]
 800489a:	b2d2      	uxtb	r2, r2
 800489c:	701a      	strb	r2, [r3, #0]
 800489e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a0:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80048a2:	4b0f      	ldr	r3, [pc, #60]	; (80048e0 <_SendPacket+0x27c>)
 80048a4:	785b      	ldrb	r3, [r3, #1]
 80048a6:	4618      	mov	r0, r3
 80048a8:	68ba      	ldr	r2, [r7, #8]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	461a      	mov	r2, r3
 80048b0:	68f9      	ldr	r1, [r7, #12]
 80048b2:	f7fb fc8d 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80048b6:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 80048b8:	f7ff f996 	bl	8003be8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d003      	beq.n	80048ca <_SendPacket+0x266>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80048c2:	4a07      	ldr	r2, [pc, #28]	; (80048e0 <_SendPacket+0x27c>)
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	60d3      	str	r3, [r2, #12]
 80048c8:	e00f      	b.n	80048ea <_SendPacket+0x286>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80048ca:	4b05      	ldr	r3, [pc, #20]	; (80048e0 <_SendPacket+0x27c>)
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	3301      	adds	r3, #1
 80048d0:	b2da      	uxtb	r2, r3
 80048d2:	4b03      	ldr	r3, [pc, #12]	; (80048e0 <_SendPacket+0x27c>)
 80048d4:	701a      	strb	r2, [r3, #0]
 80048d6:	e008      	b.n	80048ea <_SendPacket+0x286>
    goto SendDone;
 80048d8:	bf00      	nop
 80048da:	e006      	b.n	80048ea <_SendPacket+0x286>
      goto SendDone;
 80048dc:	bf00      	nop
 80048de:	e004      	b.n	80048ea <_SendPacket+0x286>
 80048e0:	20014228 	.word	0x20014228
 80048e4:	e0001004 	.word	0xe0001004
      goto SendDone;
 80048e8:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80048ea:	4b14      	ldr	r3, [pc, #80]	; (800493c <_SendPacket+0x2d8>)
 80048ec:	7e1b      	ldrb	r3, [r3, #24]
 80048ee:	4619      	mov	r1, r3
 80048f0:	4a13      	ldr	r2, [pc, #76]	; (8004940 <_SendPacket+0x2dc>)
 80048f2:	460b      	mov	r3, r1
 80048f4:	005b      	lsls	r3, r3, #1
 80048f6:	440b      	add	r3, r1
 80048f8:	00db      	lsls	r3, r3, #3
 80048fa:	4413      	add	r3, r2
 80048fc:	336c      	adds	r3, #108	; 0x6c
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	4b0e      	ldr	r3, [pc, #56]	; (800493c <_SendPacket+0x2d8>)
 8004902:	7e1b      	ldrb	r3, [r3, #24]
 8004904:	4618      	mov	r0, r3
 8004906:	490e      	ldr	r1, [pc, #56]	; (8004940 <_SendPacket+0x2dc>)
 8004908:	4603      	mov	r3, r0
 800490a:	005b      	lsls	r3, r3, #1
 800490c:	4403      	add	r3, r0
 800490e:	00db      	lsls	r3, r3, #3
 8004910:	440b      	add	r3, r1
 8004912:	3370      	adds	r3, #112	; 0x70
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	429a      	cmp	r2, r3
 8004918:	d00b      	beq.n	8004932 <_SendPacket+0x2ce>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800491a:	4b08      	ldr	r3, [pc, #32]	; (800493c <_SendPacket+0x2d8>)
 800491c:	789b      	ldrb	r3, [r3, #2]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d107      	bne.n	8004932 <_SendPacket+0x2ce>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004922:	4b06      	ldr	r3, [pc, #24]	; (800493c <_SendPacket+0x2d8>)
 8004924:	2201      	movs	r2, #1
 8004926:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004928:	f7ff fdb8 	bl	800449c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800492c:	4b03      	ldr	r3, [pc, #12]	; (800493c <_SendPacket+0x2d8>)
 800492e:	2200      	movs	r2, #0
 8004930:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004932:	bf00      	nop
 8004934:	3728      	adds	r7, #40	; 0x28
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	20014228 	.word	0x20014228
 8004940:	20014388 	.word	0x20014388

08004944 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004944:	b580      	push	{r7, lr}
 8004946:	b086      	sub	sp, #24
 8004948:	af02      	add	r7, sp, #8
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	607a      	str	r2, [r7, #4]
 8004950:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004952:	2300      	movs	r3, #0
 8004954:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004958:	4917      	ldr	r1, [pc, #92]	; (80049b8 <SEGGER_SYSVIEW_Init+0x74>)
 800495a:	4818      	ldr	r0, [pc, #96]	; (80049bc <SEGGER_SYSVIEW_Init+0x78>)
 800495c:	f7ff fc72 	bl	8004244 <SEGGER_RTT_AllocUpBuffer>
 8004960:	4603      	mov	r3, r0
 8004962:	b2da      	uxtb	r2, r3
 8004964:	4b16      	ldr	r3, [pc, #88]	; (80049c0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004966:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004968:	4b15      	ldr	r3, [pc, #84]	; (80049c0 <SEGGER_SYSVIEW_Init+0x7c>)
 800496a:	785a      	ldrb	r2, [r3, #1]
 800496c:	4b14      	ldr	r3, [pc, #80]	; (80049c0 <SEGGER_SYSVIEW_Init+0x7c>)
 800496e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004970:	4b13      	ldr	r3, [pc, #76]	; (80049c0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004972:	7e1b      	ldrb	r3, [r3, #24]
 8004974:	4618      	mov	r0, r3
 8004976:	2300      	movs	r3, #0
 8004978:	9300      	str	r3, [sp, #0]
 800497a:	2308      	movs	r3, #8
 800497c:	4a11      	ldr	r2, [pc, #68]	; (80049c4 <SEGGER_SYSVIEW_Init+0x80>)
 800497e:	490f      	ldr	r1, [pc, #60]	; (80049bc <SEGGER_SYSVIEW_Init+0x78>)
 8004980:	f7ff fce4 	bl	800434c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004984:	4b0e      	ldr	r3, [pc, #56]	; (80049c0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004986:	2200      	movs	r2, #0
 8004988:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800498a:	4b0f      	ldr	r3, [pc, #60]	; (80049c8 <SEGGER_SYSVIEW_Init+0x84>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a0c      	ldr	r2, [pc, #48]	; (80049c0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004990:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004992:	4a0b      	ldr	r2, [pc, #44]	; (80049c0 <SEGGER_SYSVIEW_Init+0x7c>)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004998:	4a09      	ldr	r2, [pc, #36]	; (80049c0 <SEGGER_SYSVIEW_Init+0x7c>)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800499e:	4a08      	ldr	r2, [pc, #32]	; (80049c0 <SEGGER_SYSVIEW_Init+0x7c>)
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80049a4:	4a06      	ldr	r2, [pc, #24]	; (80049c0 <SEGGER_SYSVIEW_Init+0x7c>)
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80049aa:	4b05      	ldr	r3, [pc, #20]	; (80049c0 <SEGGER_SYSVIEW_Init+0x7c>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80049b0:	bf00      	nop
 80049b2:	3710      	adds	r7, #16
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	20013220 	.word	0x20013220
 80049bc:	080058c4 	.word	0x080058c4
 80049c0:	20014228 	.word	0x20014228
 80049c4:	20014220 	.word	0x20014220
 80049c8:	e0001004 	.word	0xe0001004

080049cc <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80049d4:	4a04      	ldr	r2, [pc, #16]	; (80049e8 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6113      	str	r3, [r2, #16]
}
 80049da:	bf00      	nop
 80049dc:	370c      	adds	r7, #12
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	20014228 	.word	0x20014228

080049ec <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80049f4:	f3ef 8311 	mrs	r3, BASEPRI
 80049f8:	f04f 0120 	mov.w	r1, #32
 80049fc:	f381 8811 	msr	BASEPRI, r1
 8004a00:	60fb      	str	r3, [r7, #12]
 8004a02:	4808      	ldr	r0, [pc, #32]	; (8004a24 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004a04:	f7ff fd3e 	bl	8004484 <_PreparePacket>
 8004a08:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	68b9      	ldr	r1, [r7, #8]
 8004a0e:	68b8      	ldr	r0, [r7, #8]
 8004a10:	f7ff fe28 	bl	8004664 <_SendPacket>
  RECORD_END();
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f383 8811 	msr	BASEPRI, r3
}
 8004a1a:	bf00      	nop
 8004a1c:	3710      	adds	r7, #16
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	20014258 	.word	0x20014258

08004a28 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b088      	sub	sp, #32
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004a32:	f3ef 8311 	mrs	r3, BASEPRI
 8004a36:	f04f 0120 	mov.w	r1, #32
 8004a3a:	f381 8811 	msr	BASEPRI, r1
 8004a3e:	617b      	str	r3, [r7, #20]
 8004a40:	4816      	ldr	r0, [pc, #88]	; (8004a9c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004a42:	f7ff fd1f 	bl	8004484 <_PreparePacket>
 8004a46:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	61fb      	str	r3, [r7, #28]
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	61bb      	str	r3, [r7, #24]
 8004a54:	e00b      	b.n	8004a6e <SEGGER_SYSVIEW_RecordU32+0x46>
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	b2da      	uxtb	r2, r3
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	1c59      	adds	r1, r3, #1
 8004a5e:	61f9      	str	r1, [r7, #28]
 8004a60:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a64:	b2d2      	uxtb	r2, r2
 8004a66:	701a      	strb	r2, [r3, #0]
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	09db      	lsrs	r3, r3, #7
 8004a6c:	61bb      	str	r3, [r7, #24]
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	2b7f      	cmp	r3, #127	; 0x7f
 8004a72:	d8f0      	bhi.n	8004a56 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	1c5a      	adds	r2, r3, #1
 8004a78:	61fa      	str	r2, [r7, #28]
 8004a7a:	69ba      	ldr	r2, [r7, #24]
 8004a7c:	b2d2      	uxtb	r2, r2
 8004a7e:	701a      	strb	r2, [r3, #0]
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	68f9      	ldr	r1, [r7, #12]
 8004a88:	6938      	ldr	r0, [r7, #16]
 8004a8a:	f7ff fdeb 	bl	8004664 <_SendPacket>
  RECORD_END();
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	f383 8811 	msr	BASEPRI, r3
}
 8004a94:	bf00      	nop
 8004a96:	3720      	adds	r7, #32
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	20014258 	.word	0x20014258

08004aa0 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b08c      	sub	sp, #48	; 0x30
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004aac:	f3ef 8311 	mrs	r3, BASEPRI
 8004ab0:	f04f 0120 	mov.w	r1, #32
 8004ab4:	f381 8811 	msr	BASEPRI, r1
 8004ab8:	61fb      	str	r3, [r7, #28]
 8004aba:	4825      	ldr	r0, [pc, #148]	; (8004b50 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004abc:	f7ff fce2 	bl	8004484 <_PreparePacket>
 8004ac0:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ace:	e00b      	b.n	8004ae8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad2:	b2da      	uxtb	r2, r3
 8004ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad6:	1c59      	adds	r1, r3, #1
 8004ad8:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004ada:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ade:	b2d2      	uxtb	r2, r2
 8004ae0:	701a      	strb	r2, [r3, #0]
 8004ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae4:	09db      	lsrs	r3, r3, #7
 8004ae6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aea:	2b7f      	cmp	r3, #127	; 0x7f
 8004aec:	d8f0      	bhi.n	8004ad0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af0:	1c5a      	adds	r2, r3, #1
 8004af2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004af4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004af6:	b2d2      	uxtb	r2, r2
 8004af8:	701a      	strb	r2, [r3, #0]
 8004afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004afc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	627b      	str	r3, [r7, #36]	; 0x24
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	623b      	str	r3, [r7, #32]
 8004b06:	e00b      	b.n	8004b20 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004b08:	6a3b      	ldr	r3, [r7, #32]
 8004b0a:	b2da      	uxtb	r2, r3
 8004b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0e:	1c59      	adds	r1, r3, #1
 8004b10:	6279      	str	r1, [r7, #36]	; 0x24
 8004b12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b16:	b2d2      	uxtb	r2, r2
 8004b18:	701a      	strb	r2, [r3, #0]
 8004b1a:	6a3b      	ldr	r3, [r7, #32]
 8004b1c:	09db      	lsrs	r3, r3, #7
 8004b1e:	623b      	str	r3, [r7, #32]
 8004b20:	6a3b      	ldr	r3, [r7, #32]
 8004b22:	2b7f      	cmp	r3, #127	; 0x7f
 8004b24:	d8f0      	bhi.n	8004b08 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b28:	1c5a      	adds	r2, r3, #1
 8004b2a:	627a      	str	r2, [r7, #36]	; 0x24
 8004b2c:	6a3a      	ldr	r2, [r7, #32]
 8004b2e:	b2d2      	uxtb	r2, r2
 8004b30:	701a      	strb	r2, [r3, #0]
 8004b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b34:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004b36:	68fa      	ldr	r2, [r7, #12]
 8004b38:	6979      	ldr	r1, [r7, #20]
 8004b3a:	69b8      	ldr	r0, [r7, #24]
 8004b3c:	f7ff fd92 	bl	8004664 <_SendPacket>
  RECORD_END();
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	f383 8811 	msr	BASEPRI, r3
}
 8004b46:	bf00      	nop
 8004b48:	3730      	adds	r7, #48	; 0x30
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	20014258 	.word	0x20014258

08004b54 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b08c      	sub	sp, #48	; 0x30
 8004b58:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004b5a:	4b59      	ldr	r3, [pc, #356]	; (8004cc0 <SEGGER_SYSVIEW_Start+0x16c>)
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004b60:	f3ef 8311 	mrs	r3, BASEPRI
 8004b64:	f04f 0120 	mov.w	r1, #32
 8004b68:	f381 8811 	msr	BASEPRI, r1
 8004b6c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004b6e:	4b54      	ldr	r3, [pc, #336]	; (8004cc0 <SEGGER_SYSVIEW_Start+0x16c>)
 8004b70:	785b      	ldrb	r3, [r3, #1]
 8004b72:	220a      	movs	r2, #10
 8004b74:	4953      	ldr	r1, [pc, #332]	; (8004cc4 <SEGGER_SYSVIEW_Start+0x170>)
 8004b76:	4618      	mov	r0, r3
 8004b78:	f7fb fb2a 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8004b82:	f7ff f831 	bl	8003be8 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004b86:	200a      	movs	r0, #10
 8004b88:	f7ff ff30 	bl	80049ec <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004b8c:	f3ef 8311 	mrs	r3, BASEPRI
 8004b90:	f04f 0120 	mov.w	r1, #32
 8004b94:	f381 8811 	msr	BASEPRI, r1
 8004b98:	60bb      	str	r3, [r7, #8]
 8004b9a:	484b      	ldr	r0, [pc, #300]	; (8004cc8 <SEGGER_SYSVIEW_Start+0x174>)
 8004b9c:	f7ff fc72 	bl	8004484 <_PreparePacket>
 8004ba0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004baa:	4b45      	ldr	r3, [pc, #276]	; (8004cc0 <SEGGER_SYSVIEW_Start+0x16c>)
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bb0:	e00b      	b.n	8004bca <SEGGER_SYSVIEW_Start+0x76>
 8004bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb4:	b2da      	uxtb	r2, r3
 8004bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb8:	1c59      	adds	r1, r3, #1
 8004bba:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004bbc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004bc0:	b2d2      	uxtb	r2, r2
 8004bc2:	701a      	strb	r2, [r3, #0]
 8004bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc6:	09db      	lsrs	r3, r3, #7
 8004bc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bcc:	2b7f      	cmp	r3, #127	; 0x7f
 8004bce:	d8f0      	bhi.n	8004bb2 <SEGGER_SYSVIEW_Start+0x5e>
 8004bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd2:	1c5a      	adds	r2, r3, #1
 8004bd4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004bd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bd8:	b2d2      	uxtb	r2, r2
 8004bda:	701a      	strb	r2, [r3, #0]
 8004bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bde:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	627b      	str	r3, [r7, #36]	; 0x24
 8004be4:	4b36      	ldr	r3, [pc, #216]	; (8004cc0 <SEGGER_SYSVIEW_Start+0x16c>)
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	623b      	str	r3, [r7, #32]
 8004bea:	e00b      	b.n	8004c04 <SEGGER_SYSVIEW_Start+0xb0>
 8004bec:	6a3b      	ldr	r3, [r7, #32]
 8004bee:	b2da      	uxtb	r2, r3
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf2:	1c59      	adds	r1, r3, #1
 8004bf4:	6279      	str	r1, [r7, #36]	; 0x24
 8004bf6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004bfa:	b2d2      	uxtb	r2, r2
 8004bfc:	701a      	strb	r2, [r3, #0]
 8004bfe:	6a3b      	ldr	r3, [r7, #32]
 8004c00:	09db      	lsrs	r3, r3, #7
 8004c02:	623b      	str	r3, [r7, #32]
 8004c04:	6a3b      	ldr	r3, [r7, #32]
 8004c06:	2b7f      	cmp	r3, #127	; 0x7f
 8004c08:	d8f0      	bhi.n	8004bec <SEGGER_SYSVIEW_Start+0x98>
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0c:	1c5a      	adds	r2, r3, #1
 8004c0e:	627a      	str	r2, [r7, #36]	; 0x24
 8004c10:	6a3a      	ldr	r2, [r7, #32]
 8004c12:	b2d2      	uxtb	r2, r2
 8004c14:	701a      	strb	r2, [r3, #0]
 8004c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c18:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	61fb      	str	r3, [r7, #28]
 8004c1e:	4b28      	ldr	r3, [pc, #160]	; (8004cc0 <SEGGER_SYSVIEW_Start+0x16c>)
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	61bb      	str	r3, [r7, #24]
 8004c24:	e00b      	b.n	8004c3e <SEGGER_SYSVIEW_Start+0xea>
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	b2da      	uxtb	r2, r3
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	1c59      	adds	r1, r3, #1
 8004c2e:	61f9      	str	r1, [r7, #28]
 8004c30:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c34:	b2d2      	uxtb	r2, r2
 8004c36:	701a      	strb	r2, [r3, #0]
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	09db      	lsrs	r3, r3, #7
 8004c3c:	61bb      	str	r3, [r7, #24]
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	2b7f      	cmp	r3, #127	; 0x7f
 8004c42:	d8f0      	bhi.n	8004c26 <SEGGER_SYSVIEW_Start+0xd2>
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	1c5a      	adds	r2, r3, #1
 8004c48:	61fa      	str	r2, [r7, #28]
 8004c4a:	69ba      	ldr	r2, [r7, #24]
 8004c4c:	b2d2      	uxtb	r2, r2
 8004c4e:	701a      	strb	r2, [r3, #0]
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	617b      	str	r3, [r7, #20]
 8004c58:	2300      	movs	r3, #0
 8004c5a:	613b      	str	r3, [r7, #16]
 8004c5c:	e00b      	b.n	8004c76 <SEGGER_SYSVIEW_Start+0x122>
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	b2da      	uxtb	r2, r3
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	1c59      	adds	r1, r3, #1
 8004c66:	6179      	str	r1, [r7, #20]
 8004c68:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c6c:	b2d2      	uxtb	r2, r2
 8004c6e:	701a      	strb	r2, [r3, #0]
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	09db      	lsrs	r3, r3, #7
 8004c74:	613b      	str	r3, [r7, #16]
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	2b7f      	cmp	r3, #127	; 0x7f
 8004c7a:	d8f0      	bhi.n	8004c5e <SEGGER_SYSVIEW_Start+0x10a>
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	1c5a      	adds	r2, r3, #1
 8004c80:	617a      	str	r2, [r7, #20]
 8004c82:	693a      	ldr	r2, [r7, #16]
 8004c84:	b2d2      	uxtb	r2, r2
 8004c86:	701a      	strb	r2, [r3, #0]
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004c8c:	2218      	movs	r2, #24
 8004c8e:	6839      	ldr	r1, [r7, #0]
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f7ff fce7 	bl	8004664 <_SendPacket>
      RECORD_END();
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004c9c:	4b08      	ldr	r3, [pc, #32]	; (8004cc0 <SEGGER_SYSVIEW_Start+0x16c>)
 8004c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d002      	beq.n	8004caa <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004ca4:	4b06      	ldr	r3, [pc, #24]	; (8004cc0 <SEGGER_SYSVIEW_Start+0x16c>)
 8004ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004caa:	f000 f9eb 	bl	8005084 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004cae:	f000 f9b1 	bl	8005014 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004cb2:	f000 fc73 	bl	800559c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004cb6:	bf00      	nop
 8004cb8:	3730      	adds	r7, #48	; 0x30
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	20014228 	.word	0x20014228
 8004cc4:	08005904 	.word	0x08005904
 8004cc8:	20014258 	.word	0x20014258

08004ccc <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b082      	sub	sp, #8
 8004cd0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004cd2:	f3ef 8311 	mrs	r3, BASEPRI
 8004cd6:	f04f 0120 	mov.w	r1, #32
 8004cda:	f381 8811 	msr	BASEPRI, r1
 8004cde:	607b      	str	r3, [r7, #4]
 8004ce0:	480b      	ldr	r0, [pc, #44]	; (8004d10 <SEGGER_SYSVIEW_Stop+0x44>)
 8004ce2:	f7ff fbcf 	bl	8004484 <_PreparePacket>
 8004ce6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004ce8:	4b0a      	ldr	r3, [pc, #40]	; (8004d14 <SEGGER_SYSVIEW_Stop+0x48>)
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d007      	beq.n	8004d00 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004cf0:	220b      	movs	r2, #11
 8004cf2:	6839      	ldr	r1, [r7, #0]
 8004cf4:	6838      	ldr	r0, [r7, #0]
 8004cf6:	f7ff fcb5 	bl	8004664 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8004cfa:	4b06      	ldr	r3, [pc, #24]	; (8004d14 <SEGGER_SYSVIEW_Stop+0x48>)
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f383 8811 	msr	BASEPRI, r3
}
 8004d06:	bf00      	nop
 8004d08:	3708      	adds	r7, #8
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	20014258 	.word	0x20014258
 8004d14:	20014228 	.word	0x20014228

08004d18 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b08c      	sub	sp, #48	; 0x30
 8004d1c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004d1e:	f3ef 8311 	mrs	r3, BASEPRI
 8004d22:	f04f 0120 	mov.w	r1, #32
 8004d26:	f381 8811 	msr	BASEPRI, r1
 8004d2a:	60fb      	str	r3, [r7, #12]
 8004d2c:	4845      	ldr	r0, [pc, #276]	; (8004e44 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8004d2e:	f7ff fba9 	bl	8004484 <_PreparePacket>
 8004d32:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d3c:	4b42      	ldr	r3, [pc, #264]	; (8004e48 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d42:	e00b      	b.n	8004d5c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d46:	b2da      	uxtb	r2, r3
 8004d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d4a:	1c59      	adds	r1, r3, #1
 8004d4c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004d4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d52:	b2d2      	uxtb	r2, r2
 8004d54:	701a      	strb	r2, [r3, #0]
 8004d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d58:	09db      	lsrs	r3, r3, #7
 8004d5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d5e:	2b7f      	cmp	r3, #127	; 0x7f
 8004d60:	d8f0      	bhi.n	8004d44 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d64:	1c5a      	adds	r2, r3, #1
 8004d66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d6a:	b2d2      	uxtb	r2, r2
 8004d6c:	701a      	strb	r2, [r3, #0]
 8004d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d70:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	627b      	str	r3, [r7, #36]	; 0x24
 8004d76:	4b34      	ldr	r3, [pc, #208]	; (8004e48 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	623b      	str	r3, [r7, #32]
 8004d7c:	e00b      	b.n	8004d96 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004d7e:	6a3b      	ldr	r3, [r7, #32]
 8004d80:	b2da      	uxtb	r2, r3
 8004d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d84:	1c59      	adds	r1, r3, #1
 8004d86:	6279      	str	r1, [r7, #36]	; 0x24
 8004d88:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d8c:	b2d2      	uxtb	r2, r2
 8004d8e:	701a      	strb	r2, [r3, #0]
 8004d90:	6a3b      	ldr	r3, [r7, #32]
 8004d92:	09db      	lsrs	r3, r3, #7
 8004d94:	623b      	str	r3, [r7, #32]
 8004d96:	6a3b      	ldr	r3, [r7, #32]
 8004d98:	2b7f      	cmp	r3, #127	; 0x7f
 8004d9a:	d8f0      	bhi.n	8004d7e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9e:	1c5a      	adds	r2, r3, #1
 8004da0:	627a      	str	r2, [r7, #36]	; 0x24
 8004da2:	6a3a      	ldr	r2, [r7, #32]
 8004da4:	b2d2      	uxtb	r2, r2
 8004da6:	701a      	strb	r2, [r3, #0]
 8004da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004daa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	61fb      	str	r3, [r7, #28]
 8004db0:	4b25      	ldr	r3, [pc, #148]	; (8004e48 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	61bb      	str	r3, [r7, #24]
 8004db6:	e00b      	b.n	8004dd0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	b2da      	uxtb	r2, r3
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	1c59      	adds	r1, r3, #1
 8004dc0:	61f9      	str	r1, [r7, #28]
 8004dc2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004dc6:	b2d2      	uxtb	r2, r2
 8004dc8:	701a      	strb	r2, [r3, #0]
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	09db      	lsrs	r3, r3, #7
 8004dce:	61bb      	str	r3, [r7, #24]
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	2b7f      	cmp	r3, #127	; 0x7f
 8004dd4:	d8f0      	bhi.n	8004db8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	1c5a      	adds	r2, r3, #1
 8004dda:	61fa      	str	r2, [r7, #28]
 8004ddc:	69ba      	ldr	r2, [r7, #24]
 8004dde:	b2d2      	uxtb	r2, r2
 8004de0:	701a      	strb	r2, [r3, #0]
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	617b      	str	r3, [r7, #20]
 8004dea:	2300      	movs	r3, #0
 8004dec:	613b      	str	r3, [r7, #16]
 8004dee:	e00b      	b.n	8004e08 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	b2da      	uxtb	r2, r3
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	1c59      	adds	r1, r3, #1
 8004df8:	6179      	str	r1, [r7, #20]
 8004dfa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004dfe:	b2d2      	uxtb	r2, r2
 8004e00:	701a      	strb	r2, [r3, #0]
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	09db      	lsrs	r3, r3, #7
 8004e06:	613b      	str	r3, [r7, #16]
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	2b7f      	cmp	r3, #127	; 0x7f
 8004e0c:	d8f0      	bhi.n	8004df0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	1c5a      	adds	r2, r3, #1
 8004e12:	617a      	str	r2, [r7, #20]
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	b2d2      	uxtb	r2, r2
 8004e18:	701a      	strb	r2, [r3, #0]
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004e1e:	2218      	movs	r2, #24
 8004e20:	6879      	ldr	r1, [r7, #4]
 8004e22:	68b8      	ldr	r0, [r7, #8]
 8004e24:	f7ff fc1e 	bl	8004664 <_SendPacket>
  RECORD_END();
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004e2e:	4b06      	ldr	r3, [pc, #24]	; (8004e48 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d002      	beq.n	8004e3c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8004e36:	4b04      	ldr	r3, [pc, #16]	; (8004e48 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3a:	4798      	blx	r3
  }
}
 8004e3c:	bf00      	nop
 8004e3e:	3730      	adds	r7, #48	; 0x30
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	20014258 	.word	0x20014258
 8004e48:	20014228 	.word	0x20014228

08004e4c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b092      	sub	sp, #72	; 0x48
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004e54:	f3ef 8311 	mrs	r3, BASEPRI
 8004e58:	f04f 0120 	mov.w	r1, #32
 8004e5c:	f381 8811 	msr	BASEPRI, r1
 8004e60:	617b      	str	r3, [r7, #20]
 8004e62:	486a      	ldr	r0, [pc, #424]	; (800500c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004e64:	f7ff fb0e 	bl	8004484 <_PreparePacket>
 8004e68:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	647b      	str	r3, [r7, #68]	; 0x44
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	4b66      	ldr	r3, [pc, #408]	; (8005010 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	643b      	str	r3, [r7, #64]	; 0x40
 8004e7e:	e00b      	b.n	8004e98 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8004e80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e82:	b2da      	uxtb	r2, r3
 8004e84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e86:	1c59      	adds	r1, r3, #1
 8004e88:	6479      	str	r1, [r7, #68]	; 0x44
 8004e8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e8e:	b2d2      	uxtb	r2, r2
 8004e90:	701a      	strb	r2, [r3, #0]
 8004e92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e94:	09db      	lsrs	r3, r3, #7
 8004e96:	643b      	str	r3, [r7, #64]	; 0x40
 8004e98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e9a:	2b7f      	cmp	r3, #127	; 0x7f
 8004e9c:	d8f0      	bhi.n	8004e80 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8004e9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ea0:	1c5a      	adds	r2, r3, #1
 8004ea2:	647a      	str	r2, [r7, #68]	; 0x44
 8004ea4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ea6:	b2d2      	uxtb	r2, r2
 8004ea8:	701a      	strb	r2, [r3, #0]
 8004eaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eac:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004eb8:	e00b      	b.n	8004ed2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8004eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ebc:	b2da      	uxtb	r2, r3
 8004ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ec0:	1c59      	adds	r1, r3, #1
 8004ec2:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004ec4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ec8:	b2d2      	uxtb	r2, r2
 8004eca:	701a      	strb	r2, [r3, #0]
 8004ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ece:	09db      	lsrs	r3, r3, #7
 8004ed0:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed4:	2b7f      	cmp	r3, #127	; 0x7f
 8004ed6:	d8f0      	bhi.n	8004eba <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8004ed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eda:	1c5a      	adds	r2, r3, #1
 8004edc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004ede:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ee0:	b2d2      	uxtb	r2, r2
 8004ee2:	701a      	strb	r2, [r3, #0]
 8004ee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ee6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	2220      	movs	r2, #32
 8004eee:	4619      	mov	r1, r3
 8004ef0:	68f8      	ldr	r0, [r7, #12]
 8004ef2:	f7ff fa77 	bl	80043e4 <_EncodeStr>
 8004ef6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004ef8:	2209      	movs	r2, #9
 8004efa:	68f9      	ldr	r1, [r7, #12]
 8004efc:	6938      	ldr	r0, [r7, #16]
 8004efe:	f7ff fbb1 	bl	8004664 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	637b      	str	r3, [r7, #52]	; 0x34
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	4b40      	ldr	r3, [pc, #256]	; (8005010 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	633b      	str	r3, [r7, #48]	; 0x30
 8004f16:	e00b      	b.n	8004f30 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8004f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f1a:	b2da      	uxtb	r2, r3
 8004f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f1e:	1c59      	adds	r1, r3, #1
 8004f20:	6379      	str	r1, [r7, #52]	; 0x34
 8004f22:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f26:	b2d2      	uxtb	r2, r2
 8004f28:	701a      	strb	r2, [r3, #0]
 8004f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f2c:	09db      	lsrs	r3, r3, #7
 8004f2e:	633b      	str	r3, [r7, #48]	; 0x30
 8004f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f32:	2b7f      	cmp	r3, #127	; 0x7f
 8004f34:	d8f0      	bhi.n	8004f18 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8004f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f38:	1c5a      	adds	r2, r3, #1
 8004f3a:	637a      	str	r2, [r7, #52]	; 0x34
 8004f3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f3e:	b2d2      	uxtb	r2, r2
 8004f40:	701a      	strb	r2, [r3, #0]
 8004f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f44:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f50:	e00b      	b.n	8004f6a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8004f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f54:	b2da      	uxtb	r2, r3
 8004f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f58:	1c59      	adds	r1, r3, #1
 8004f5a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004f5c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f60:	b2d2      	uxtb	r2, r2
 8004f62:	701a      	strb	r2, [r3, #0]
 8004f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f66:	09db      	lsrs	r3, r3, #7
 8004f68:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f6c:	2b7f      	cmp	r3, #127	; 0x7f
 8004f6e:	d8f0      	bhi.n	8004f52 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8004f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f72:	1c5a      	adds	r2, r3, #1
 8004f74:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f78:	b2d2      	uxtb	r2, r2
 8004f7a:	701a      	strb	r2, [r3, #0]
 8004f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f7e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	627b      	str	r3, [r7, #36]	; 0x24
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	691b      	ldr	r3, [r3, #16]
 8004f88:	623b      	str	r3, [r7, #32]
 8004f8a:	e00b      	b.n	8004fa4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004f8c:	6a3b      	ldr	r3, [r7, #32]
 8004f8e:	b2da      	uxtb	r2, r3
 8004f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f92:	1c59      	adds	r1, r3, #1
 8004f94:	6279      	str	r1, [r7, #36]	; 0x24
 8004f96:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f9a:	b2d2      	uxtb	r2, r2
 8004f9c:	701a      	strb	r2, [r3, #0]
 8004f9e:	6a3b      	ldr	r3, [r7, #32]
 8004fa0:	09db      	lsrs	r3, r3, #7
 8004fa2:	623b      	str	r3, [r7, #32]
 8004fa4:	6a3b      	ldr	r3, [r7, #32]
 8004fa6:	2b7f      	cmp	r3, #127	; 0x7f
 8004fa8:	d8f0      	bhi.n	8004f8c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8004faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fac:	1c5a      	adds	r2, r3, #1
 8004fae:	627a      	str	r2, [r7, #36]	; 0x24
 8004fb0:	6a3a      	ldr	r2, [r7, #32]
 8004fb2:	b2d2      	uxtb	r2, r2
 8004fb4:	701a      	strb	r2, [r3, #0]
 8004fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	61fb      	str	r3, [r7, #28]
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	61bb      	str	r3, [r7, #24]
 8004fc2:	e00b      	b.n	8004fdc <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	b2da      	uxtb	r2, r3
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	1c59      	adds	r1, r3, #1
 8004fcc:	61f9      	str	r1, [r7, #28]
 8004fce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fd2:	b2d2      	uxtb	r2, r2
 8004fd4:	701a      	strb	r2, [r3, #0]
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	09db      	lsrs	r3, r3, #7
 8004fda:	61bb      	str	r3, [r7, #24]
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	2b7f      	cmp	r3, #127	; 0x7f
 8004fe0:	d8f0      	bhi.n	8004fc4 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	1c5a      	adds	r2, r3, #1
 8004fe6:	61fa      	str	r2, [r7, #28]
 8004fe8:	69ba      	ldr	r2, [r7, #24]
 8004fea:	b2d2      	uxtb	r2, r2
 8004fec:	701a      	strb	r2, [r3, #0]
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004ff2:	2215      	movs	r2, #21
 8004ff4:	68f9      	ldr	r1, [r7, #12]
 8004ff6:	6938      	ldr	r0, [r7, #16]
 8004ff8:	f7ff fb34 	bl	8004664 <_SendPacket>
  RECORD_END();
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	f383 8811 	msr	BASEPRI, r3
}
 8005002:	bf00      	nop
 8005004:	3748      	adds	r7, #72	; 0x48
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	20014258 	.word	0x20014258
 8005010:	20014228 	.word	0x20014228

08005014 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005014:	b580      	push	{r7, lr}
 8005016:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005018:	4b07      	ldr	r3, [pc, #28]	; (8005038 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800501a:	6a1b      	ldr	r3, [r3, #32]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d008      	beq.n	8005032 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005020:	4b05      	ldr	r3, [pc, #20]	; (8005038 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005022:	6a1b      	ldr	r3, [r3, #32]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d003      	beq.n	8005032 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800502a:	4b03      	ldr	r3, [pc, #12]	; (8005038 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800502c:	6a1b      	ldr	r3, [r3, #32]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	4798      	blx	r3
  }
}
 8005032:	bf00      	nop
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	20014228 	.word	0x20014228

0800503c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800503c:	b580      	push	{r7, lr}
 800503e:	b086      	sub	sp, #24
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005044:	f3ef 8311 	mrs	r3, BASEPRI
 8005048:	f04f 0120 	mov.w	r1, #32
 800504c:	f381 8811 	msr	BASEPRI, r1
 8005050:	617b      	str	r3, [r7, #20]
 8005052:	480b      	ldr	r0, [pc, #44]	; (8005080 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005054:	f7ff fa16 	bl	8004484 <_PreparePacket>
 8005058:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800505a:	2280      	movs	r2, #128	; 0x80
 800505c:	6879      	ldr	r1, [r7, #4]
 800505e:	6938      	ldr	r0, [r7, #16]
 8005060:	f7ff f9c0 	bl	80043e4 <_EncodeStr>
 8005064:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005066:	220e      	movs	r2, #14
 8005068:	68f9      	ldr	r1, [r7, #12]
 800506a:	6938      	ldr	r0, [r7, #16]
 800506c:	f7ff fafa 	bl	8004664 <_SendPacket>
  RECORD_END();
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	f383 8811 	msr	BASEPRI, r3
}
 8005076:	bf00      	nop
 8005078:	3718      	adds	r7, #24
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	20014258 	.word	0x20014258

08005084 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005084:	b590      	push	{r4, r7, lr}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800508a:	4b15      	ldr	r3, [pc, #84]	; (80050e0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800508c:	6a1b      	ldr	r3, [r3, #32]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d01a      	beq.n	80050c8 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005092:	4b13      	ldr	r3, [pc, #76]	; (80050e0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d015      	beq.n	80050c8 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800509c:	4b10      	ldr	r3, [pc, #64]	; (80050e0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800509e:	6a1b      	ldr	r3, [r3, #32]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4798      	blx	r3
 80050a4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80050a8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80050aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80050ae:	f04f 0200 	mov.w	r2, #0
 80050b2:	f04f 0300 	mov.w	r3, #0
 80050b6:	000a      	movs	r2, r1
 80050b8:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80050ba:	4613      	mov	r3, r2
 80050bc:	461a      	mov	r2, r3
 80050be:	4621      	mov	r1, r4
 80050c0:	200d      	movs	r0, #13
 80050c2:	f7ff fced 	bl	8004aa0 <SEGGER_SYSVIEW_RecordU32x2>
 80050c6:	e006      	b.n	80050d6 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80050c8:	4b06      	ldr	r3, [pc, #24]	; (80050e4 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4619      	mov	r1, r3
 80050ce:	200c      	movs	r0, #12
 80050d0:	f7ff fcaa 	bl	8004a28 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80050d4:	bf00      	nop
 80050d6:	bf00      	nop
 80050d8:	370c      	adds	r7, #12
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd90      	pop	{r4, r7, pc}
 80050de:	bf00      	nop
 80050e0:	20014228 	.word	0x20014228
 80050e4:	e0001004 	.word	0xe0001004

080050e8 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b086      	sub	sp, #24
 80050ec:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80050ee:	f3ef 8311 	mrs	r3, BASEPRI
 80050f2:	f04f 0120 	mov.w	r1, #32
 80050f6:	f381 8811 	msr	BASEPRI, r1
 80050fa:	60fb      	str	r3, [r7, #12]
 80050fc:	4819      	ldr	r0, [pc, #100]	; (8005164 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80050fe:	f7ff f9c1 	bl	8004484 <_PreparePacket>
 8005102:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005108:	4b17      	ldr	r3, [pc, #92]	; (8005168 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005110:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	617b      	str	r3, [r7, #20]
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	613b      	str	r3, [r7, #16]
 800511a:	e00b      	b.n	8005134 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	b2da      	uxtb	r2, r3
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	1c59      	adds	r1, r3, #1
 8005124:	6179      	str	r1, [r7, #20]
 8005126:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800512a:	b2d2      	uxtb	r2, r2
 800512c:	701a      	strb	r2, [r3, #0]
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	09db      	lsrs	r3, r3, #7
 8005132:	613b      	str	r3, [r7, #16]
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	2b7f      	cmp	r3, #127	; 0x7f
 8005138:	d8f0      	bhi.n	800511c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	1c5a      	adds	r2, r3, #1
 800513e:	617a      	str	r2, [r7, #20]
 8005140:	693a      	ldr	r2, [r7, #16]
 8005142:	b2d2      	uxtb	r2, r2
 8005144:	701a      	strb	r2, [r3, #0]
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800514a:	2202      	movs	r2, #2
 800514c:	6879      	ldr	r1, [r7, #4]
 800514e:	68b8      	ldr	r0, [r7, #8]
 8005150:	f7ff fa88 	bl	8004664 <_SendPacket>
  RECORD_END();
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f383 8811 	msr	BASEPRI, r3
}
 800515a:	bf00      	nop
 800515c:	3718      	adds	r7, #24
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	20014258 	.word	0x20014258
 8005168:	e000ed04 	.word	0xe000ed04

0800516c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005172:	f3ef 8311 	mrs	r3, BASEPRI
 8005176:	f04f 0120 	mov.w	r1, #32
 800517a:	f381 8811 	msr	BASEPRI, r1
 800517e:	607b      	str	r3, [r7, #4]
 8005180:	4807      	ldr	r0, [pc, #28]	; (80051a0 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005182:	f7ff f97f 	bl	8004484 <_PreparePacket>
 8005186:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005188:	2203      	movs	r2, #3
 800518a:	6839      	ldr	r1, [r7, #0]
 800518c:	6838      	ldr	r0, [r7, #0]
 800518e:	f7ff fa69 	bl	8004664 <_SendPacket>
  RECORD_END();
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f383 8811 	msr	BASEPRI, r3
}
 8005198:	bf00      	nop
 800519a:	3708      	adds	r7, #8
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	20014258 	.word	0x20014258

080051a4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b082      	sub	sp, #8
 80051a8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80051aa:	f3ef 8311 	mrs	r3, BASEPRI
 80051ae:	f04f 0120 	mov.w	r1, #32
 80051b2:	f381 8811 	msr	BASEPRI, r1
 80051b6:	607b      	str	r3, [r7, #4]
 80051b8:	4807      	ldr	r0, [pc, #28]	; (80051d8 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80051ba:	f7ff f963 	bl	8004484 <_PreparePacket>
 80051be:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80051c0:	2212      	movs	r2, #18
 80051c2:	6839      	ldr	r1, [r7, #0]
 80051c4:	6838      	ldr	r0, [r7, #0]
 80051c6:	f7ff fa4d 	bl	8004664 <_SendPacket>
  RECORD_END();
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f383 8811 	msr	BASEPRI, r3
}
 80051d0:	bf00      	nop
 80051d2:	3708      	adds	r7, #8
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	20014258 	.word	0x20014258

080051dc <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80051e2:	f3ef 8311 	mrs	r3, BASEPRI
 80051e6:	f04f 0120 	mov.w	r1, #32
 80051ea:	f381 8811 	msr	BASEPRI, r1
 80051ee:	607b      	str	r3, [r7, #4]
 80051f0:	4807      	ldr	r0, [pc, #28]	; (8005210 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80051f2:	f7ff f947 	bl	8004484 <_PreparePacket>
 80051f6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80051f8:	2211      	movs	r2, #17
 80051fa:	6839      	ldr	r1, [r7, #0]
 80051fc:	6838      	ldr	r0, [r7, #0]
 80051fe:	f7ff fa31 	bl	8004664 <_SendPacket>
  RECORD_END();
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f383 8811 	msr	BASEPRI, r3
}
 8005208:	bf00      	nop
 800520a:	3708      	adds	r7, #8
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}
 8005210:	20014258 	.word	0x20014258

08005214 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005214:	b580      	push	{r7, lr}
 8005216:	b088      	sub	sp, #32
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800521c:	f3ef 8311 	mrs	r3, BASEPRI
 8005220:	f04f 0120 	mov.w	r1, #32
 8005224:	f381 8811 	msr	BASEPRI, r1
 8005228:	617b      	str	r3, [r7, #20]
 800522a:	4819      	ldr	r0, [pc, #100]	; (8005290 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800522c:	f7ff f92a 	bl	8004484 <_PreparePacket>
 8005230:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005236:	4b17      	ldr	r3, [pc, #92]	; (8005294 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	61fb      	str	r3, [r7, #28]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	61bb      	str	r3, [r7, #24]
 8005248:	e00b      	b.n	8005262 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	b2da      	uxtb	r2, r3
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	1c59      	adds	r1, r3, #1
 8005252:	61f9      	str	r1, [r7, #28]
 8005254:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005258:	b2d2      	uxtb	r2, r2
 800525a:	701a      	strb	r2, [r3, #0]
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	09db      	lsrs	r3, r3, #7
 8005260:	61bb      	str	r3, [r7, #24]
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	2b7f      	cmp	r3, #127	; 0x7f
 8005266:	d8f0      	bhi.n	800524a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	1c5a      	adds	r2, r3, #1
 800526c:	61fa      	str	r2, [r7, #28]
 800526e:	69ba      	ldr	r2, [r7, #24]
 8005270:	b2d2      	uxtb	r2, r2
 8005272:	701a      	strb	r2, [r3, #0]
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005278:	2208      	movs	r2, #8
 800527a:	68f9      	ldr	r1, [r7, #12]
 800527c:	6938      	ldr	r0, [r7, #16]
 800527e:	f7ff f9f1 	bl	8004664 <_SendPacket>
  RECORD_END();
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	f383 8811 	msr	BASEPRI, r3
}
 8005288:	bf00      	nop
 800528a:	3720      	adds	r7, #32
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}
 8005290:	20014258 	.word	0x20014258
 8005294:	20014228 	.word	0x20014228

08005298 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005298:	b580      	push	{r7, lr}
 800529a:	b088      	sub	sp, #32
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80052a0:	f3ef 8311 	mrs	r3, BASEPRI
 80052a4:	f04f 0120 	mov.w	r1, #32
 80052a8:	f381 8811 	msr	BASEPRI, r1
 80052ac:	617b      	str	r3, [r7, #20]
 80052ae:	4819      	ldr	r0, [pc, #100]	; (8005314 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80052b0:	f7ff f8e8 	bl	8004484 <_PreparePacket>
 80052b4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80052ba:	4b17      	ldr	r3, [pc, #92]	; (8005318 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	61fb      	str	r3, [r7, #28]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	61bb      	str	r3, [r7, #24]
 80052cc:	e00b      	b.n	80052e6 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	b2da      	uxtb	r2, r3
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	1c59      	adds	r1, r3, #1
 80052d6:	61f9      	str	r1, [r7, #28]
 80052d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052dc:	b2d2      	uxtb	r2, r2
 80052de:	701a      	strb	r2, [r3, #0]
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	09db      	lsrs	r3, r3, #7
 80052e4:	61bb      	str	r3, [r7, #24]
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	2b7f      	cmp	r3, #127	; 0x7f
 80052ea:	d8f0      	bhi.n	80052ce <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	1c5a      	adds	r2, r3, #1
 80052f0:	61fa      	str	r2, [r7, #28]
 80052f2:	69ba      	ldr	r2, [r7, #24]
 80052f4:	b2d2      	uxtb	r2, r2
 80052f6:	701a      	strb	r2, [r3, #0]
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80052fc:	2204      	movs	r2, #4
 80052fe:	68f9      	ldr	r1, [r7, #12]
 8005300:	6938      	ldr	r0, [r7, #16]
 8005302:	f7ff f9af 	bl	8004664 <_SendPacket>
  RECORD_END();
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	f383 8811 	msr	BASEPRI, r3
}
 800530c:	bf00      	nop
 800530e:	3720      	adds	r7, #32
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	20014258 	.word	0x20014258
 8005318:	20014228 	.word	0x20014228

0800531c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800531c:	b580      	push	{r7, lr}
 800531e:	b088      	sub	sp, #32
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005324:	f3ef 8311 	mrs	r3, BASEPRI
 8005328:	f04f 0120 	mov.w	r1, #32
 800532c:	f381 8811 	msr	BASEPRI, r1
 8005330:	617b      	str	r3, [r7, #20]
 8005332:	4819      	ldr	r0, [pc, #100]	; (8005398 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005334:	f7ff f8a6 	bl	8004484 <_PreparePacket>
 8005338:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800533e:	4b17      	ldr	r3, [pc, #92]	; (800539c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	61fb      	str	r3, [r7, #28]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	61bb      	str	r3, [r7, #24]
 8005350:	e00b      	b.n	800536a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	b2da      	uxtb	r2, r3
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	1c59      	adds	r1, r3, #1
 800535a:	61f9      	str	r1, [r7, #28]
 800535c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005360:	b2d2      	uxtb	r2, r2
 8005362:	701a      	strb	r2, [r3, #0]
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	09db      	lsrs	r3, r3, #7
 8005368:	61bb      	str	r3, [r7, #24]
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	2b7f      	cmp	r3, #127	; 0x7f
 800536e:	d8f0      	bhi.n	8005352 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	1c5a      	adds	r2, r3, #1
 8005374:	61fa      	str	r2, [r7, #28]
 8005376:	69ba      	ldr	r2, [r7, #24]
 8005378:	b2d2      	uxtb	r2, r2
 800537a:	701a      	strb	r2, [r3, #0]
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005380:	2206      	movs	r2, #6
 8005382:	68f9      	ldr	r1, [r7, #12]
 8005384:	6938      	ldr	r0, [r7, #16]
 8005386:	f7ff f96d 	bl	8004664 <_SendPacket>
  RECORD_END();
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	f383 8811 	msr	BASEPRI, r3
}
 8005390:	bf00      	nop
 8005392:	3720      	adds	r7, #32
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}
 8005398:	20014258 	.word	0x20014258
 800539c:	20014228 	.word	0x20014228

080053a0 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b08a      	sub	sp, #40	; 0x28
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80053aa:	f3ef 8311 	mrs	r3, BASEPRI
 80053ae:	f04f 0120 	mov.w	r1, #32
 80053b2:	f381 8811 	msr	BASEPRI, r1
 80053b6:	617b      	str	r3, [r7, #20]
 80053b8:	4827      	ldr	r0, [pc, #156]	; (8005458 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80053ba:	f7ff f863 	bl	8004484 <_PreparePacket>
 80053be:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80053c4:	4b25      	ldr	r3, [pc, #148]	; (800545c <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80053c6:	691b      	ldr	r3, [r3, #16]
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	627b      	str	r3, [r7, #36]	; 0x24
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	623b      	str	r3, [r7, #32]
 80053d6:	e00b      	b.n	80053f0 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80053d8:	6a3b      	ldr	r3, [r7, #32]
 80053da:	b2da      	uxtb	r2, r3
 80053dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053de:	1c59      	adds	r1, r3, #1
 80053e0:	6279      	str	r1, [r7, #36]	; 0x24
 80053e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053e6:	b2d2      	uxtb	r2, r2
 80053e8:	701a      	strb	r2, [r3, #0]
 80053ea:	6a3b      	ldr	r3, [r7, #32]
 80053ec:	09db      	lsrs	r3, r3, #7
 80053ee:	623b      	str	r3, [r7, #32]
 80053f0:	6a3b      	ldr	r3, [r7, #32]
 80053f2:	2b7f      	cmp	r3, #127	; 0x7f
 80053f4:	d8f0      	bhi.n	80053d8 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80053f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f8:	1c5a      	adds	r2, r3, #1
 80053fa:	627a      	str	r2, [r7, #36]	; 0x24
 80053fc:	6a3a      	ldr	r2, [r7, #32]
 80053fe:	b2d2      	uxtb	r2, r2
 8005400:	701a      	strb	r2, [r3, #0]
 8005402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005404:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	61fb      	str	r3, [r7, #28]
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	61bb      	str	r3, [r7, #24]
 800540e:	e00b      	b.n	8005428 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	b2da      	uxtb	r2, r3
 8005414:	69fb      	ldr	r3, [r7, #28]
 8005416:	1c59      	adds	r1, r3, #1
 8005418:	61f9      	str	r1, [r7, #28]
 800541a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800541e:	b2d2      	uxtb	r2, r2
 8005420:	701a      	strb	r2, [r3, #0]
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	09db      	lsrs	r3, r3, #7
 8005426:	61bb      	str	r3, [r7, #24]
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	2b7f      	cmp	r3, #127	; 0x7f
 800542c:	d8f0      	bhi.n	8005410 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	1c5a      	adds	r2, r3, #1
 8005432:	61fa      	str	r2, [r7, #28]
 8005434:	69ba      	ldr	r2, [r7, #24]
 8005436:	b2d2      	uxtb	r2, r2
 8005438:	701a      	strb	r2, [r3, #0]
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800543e:	2207      	movs	r2, #7
 8005440:	68f9      	ldr	r1, [r7, #12]
 8005442:	6938      	ldr	r0, [r7, #16]
 8005444:	f7ff f90e 	bl	8004664 <_SendPacket>
  RECORD_END();
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	f383 8811 	msr	BASEPRI, r3
}
 800544e:	bf00      	nop
 8005450:	3728      	adds	r7, #40	; 0x28
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	20014258 	.word	0x20014258
 800545c:	20014228 	.word	0x20014228

08005460 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005460:	b580      	push	{r7, lr}
 8005462:	b08c      	sub	sp, #48	; 0x30
 8005464:	af00      	add	r7, sp, #0
 8005466:	4603      	mov	r3, r0
 8005468:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800546a:	4b3b      	ldr	r3, [pc, #236]	; (8005558 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d06d      	beq.n	800554e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8005472:	4b39      	ldr	r3, [pc, #228]	; (8005558 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005478:	2300      	movs	r3, #0
 800547a:	62bb      	str	r3, [r7, #40]	; 0x28
 800547c:	e008      	b.n	8005490 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800547e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8005484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005486:	2b00      	cmp	r3, #0
 8005488:	d007      	beq.n	800549a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800548a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800548c:	3301      	adds	r3, #1
 800548e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005490:	79fb      	ldrb	r3, [r7, #7]
 8005492:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005494:	429a      	cmp	r2, r3
 8005496:	d3f2      	bcc.n	800547e <SEGGER_SYSVIEW_SendModule+0x1e>
 8005498:	e000      	b.n	800549c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800549a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800549c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d055      	beq.n	800554e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80054a2:	f3ef 8311 	mrs	r3, BASEPRI
 80054a6:	f04f 0120 	mov.w	r1, #32
 80054aa:	f381 8811 	msr	BASEPRI, r1
 80054ae:	617b      	str	r3, [r7, #20]
 80054b0:	482a      	ldr	r0, [pc, #168]	; (800555c <SEGGER_SYSVIEW_SendModule+0xfc>)
 80054b2:	f7fe ffe7 	bl	8004484 <_PreparePacket>
 80054b6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	627b      	str	r3, [r7, #36]	; 0x24
 80054c0:	79fb      	ldrb	r3, [r7, #7]
 80054c2:	623b      	str	r3, [r7, #32]
 80054c4:	e00b      	b.n	80054de <SEGGER_SYSVIEW_SendModule+0x7e>
 80054c6:	6a3b      	ldr	r3, [r7, #32]
 80054c8:	b2da      	uxtb	r2, r3
 80054ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054cc:	1c59      	adds	r1, r3, #1
 80054ce:	6279      	str	r1, [r7, #36]	; 0x24
 80054d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054d4:	b2d2      	uxtb	r2, r2
 80054d6:	701a      	strb	r2, [r3, #0]
 80054d8:	6a3b      	ldr	r3, [r7, #32]
 80054da:	09db      	lsrs	r3, r3, #7
 80054dc:	623b      	str	r3, [r7, #32]
 80054de:	6a3b      	ldr	r3, [r7, #32]
 80054e0:	2b7f      	cmp	r3, #127	; 0x7f
 80054e2:	d8f0      	bhi.n	80054c6 <SEGGER_SYSVIEW_SendModule+0x66>
 80054e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e6:	1c5a      	adds	r2, r3, #1
 80054e8:	627a      	str	r2, [r7, #36]	; 0x24
 80054ea:	6a3a      	ldr	r2, [r7, #32]
 80054ec:	b2d2      	uxtb	r2, r2
 80054ee:	701a      	strb	r2, [r3, #0]
 80054f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	61fb      	str	r3, [r7, #28]
 80054f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	61bb      	str	r3, [r7, #24]
 80054fe:	e00b      	b.n	8005518 <SEGGER_SYSVIEW_SendModule+0xb8>
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	b2da      	uxtb	r2, r3
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	1c59      	adds	r1, r3, #1
 8005508:	61f9      	str	r1, [r7, #28]
 800550a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800550e:	b2d2      	uxtb	r2, r2
 8005510:	701a      	strb	r2, [r3, #0]
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	09db      	lsrs	r3, r3, #7
 8005516:	61bb      	str	r3, [r7, #24]
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	2b7f      	cmp	r3, #127	; 0x7f
 800551c:	d8f0      	bhi.n	8005500 <SEGGER_SYSVIEW_SendModule+0xa0>
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	1c5a      	adds	r2, r3, #1
 8005522:	61fa      	str	r2, [r7, #28]
 8005524:	69ba      	ldr	r2, [r7, #24]
 8005526:	b2d2      	uxtb	r2, r2
 8005528:	701a      	strb	r2, [r3, #0]
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800552e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2280      	movs	r2, #128	; 0x80
 8005534:	4619      	mov	r1, r3
 8005536:	68f8      	ldr	r0, [r7, #12]
 8005538:	f7fe ff54 	bl	80043e4 <_EncodeStr>
 800553c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800553e:	2216      	movs	r2, #22
 8005540:	68f9      	ldr	r1, [r7, #12]
 8005542:	6938      	ldr	r0, [r7, #16]
 8005544:	f7ff f88e 	bl	8004664 <_SendPacket>
      RECORD_END();
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800554e:	bf00      	nop
 8005550:	3730      	adds	r7, #48	; 0x30
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	20014250 	.word	0x20014250
 800555c:	20014258 	.word	0x20014258

08005560 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005560:	b580      	push	{r7, lr}
 8005562:	b082      	sub	sp, #8
 8005564:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005566:	4b0c      	ldr	r3, [pc, #48]	; (8005598 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00f      	beq.n	800558e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800556e:	4b0a      	ldr	r3, [pc, #40]	; (8005598 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d002      	beq.n	8005582 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d1f2      	bne.n	8005574 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800558e:	bf00      	nop
 8005590:	3708      	adds	r7, #8
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	20014250 	.word	0x20014250

0800559c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800559c:	b580      	push	{r7, lr}
 800559e:	b086      	sub	sp, #24
 80055a0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80055a2:	f3ef 8311 	mrs	r3, BASEPRI
 80055a6:	f04f 0120 	mov.w	r1, #32
 80055aa:	f381 8811 	msr	BASEPRI, r1
 80055ae:	60fb      	str	r3, [r7, #12]
 80055b0:	4817      	ldr	r0, [pc, #92]	; (8005610 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80055b2:	f7fe ff67 	bl	8004484 <_PreparePacket>
 80055b6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	617b      	str	r3, [r7, #20]
 80055c0:	4b14      	ldr	r3, [pc, #80]	; (8005614 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	613b      	str	r3, [r7, #16]
 80055c6:	e00b      	b.n	80055e0 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	b2da      	uxtb	r2, r3
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	1c59      	adds	r1, r3, #1
 80055d0:	6179      	str	r1, [r7, #20]
 80055d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055d6:	b2d2      	uxtb	r2, r2
 80055d8:	701a      	strb	r2, [r3, #0]
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	09db      	lsrs	r3, r3, #7
 80055de:	613b      	str	r3, [r7, #16]
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	2b7f      	cmp	r3, #127	; 0x7f
 80055e4:	d8f0      	bhi.n	80055c8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	1c5a      	adds	r2, r3, #1
 80055ea:	617a      	str	r2, [r7, #20]
 80055ec:	693a      	ldr	r2, [r7, #16]
 80055ee:	b2d2      	uxtb	r2, r2
 80055f0:	701a      	strb	r2, [r3, #0]
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80055f6:	221b      	movs	r2, #27
 80055f8:	6879      	ldr	r1, [r7, #4]
 80055fa:	68b8      	ldr	r0, [r7, #8]
 80055fc:	f7ff f832 	bl	8004664 <_SendPacket>
  RECORD_END();
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f383 8811 	msr	BASEPRI, r3
}
 8005606:	bf00      	nop
 8005608:	3718      	adds	r7, #24
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop
 8005610:	20014258 	.word	0x20014258
 8005614:	20014254 	.word	0x20014254

08005618 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005618:	b580      	push	{r7, lr}
 800561a:	b08a      	sub	sp, #40	; 0x28
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005620:	f3ef 8311 	mrs	r3, BASEPRI
 8005624:	f04f 0120 	mov.w	r1, #32
 8005628:	f381 8811 	msr	BASEPRI, r1
 800562c:	617b      	str	r3, [r7, #20]
 800562e:	4827      	ldr	r0, [pc, #156]	; (80056cc <SEGGER_SYSVIEW_Warn+0xb4>)
 8005630:	f7fe ff28 	bl	8004484 <_PreparePacket>
 8005634:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005636:	2280      	movs	r2, #128	; 0x80
 8005638:	6879      	ldr	r1, [r7, #4]
 800563a:	6938      	ldr	r0, [r7, #16]
 800563c:	f7fe fed2 	bl	80043e4 <_EncodeStr>
 8005640:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	627b      	str	r3, [r7, #36]	; 0x24
 8005646:	2301      	movs	r3, #1
 8005648:	623b      	str	r3, [r7, #32]
 800564a:	e00b      	b.n	8005664 <SEGGER_SYSVIEW_Warn+0x4c>
 800564c:	6a3b      	ldr	r3, [r7, #32]
 800564e:	b2da      	uxtb	r2, r3
 8005650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005652:	1c59      	adds	r1, r3, #1
 8005654:	6279      	str	r1, [r7, #36]	; 0x24
 8005656:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800565a:	b2d2      	uxtb	r2, r2
 800565c:	701a      	strb	r2, [r3, #0]
 800565e:	6a3b      	ldr	r3, [r7, #32]
 8005660:	09db      	lsrs	r3, r3, #7
 8005662:	623b      	str	r3, [r7, #32]
 8005664:	6a3b      	ldr	r3, [r7, #32]
 8005666:	2b7f      	cmp	r3, #127	; 0x7f
 8005668:	d8f0      	bhi.n	800564c <SEGGER_SYSVIEW_Warn+0x34>
 800566a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566c:	1c5a      	adds	r2, r3, #1
 800566e:	627a      	str	r2, [r7, #36]	; 0x24
 8005670:	6a3a      	ldr	r2, [r7, #32]
 8005672:	b2d2      	uxtb	r2, r2
 8005674:	701a      	strb	r2, [r3, #0]
 8005676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005678:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	61fb      	str	r3, [r7, #28]
 800567e:	2300      	movs	r3, #0
 8005680:	61bb      	str	r3, [r7, #24]
 8005682:	e00b      	b.n	800569c <SEGGER_SYSVIEW_Warn+0x84>
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	b2da      	uxtb	r2, r3
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	1c59      	adds	r1, r3, #1
 800568c:	61f9      	str	r1, [r7, #28]
 800568e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005692:	b2d2      	uxtb	r2, r2
 8005694:	701a      	strb	r2, [r3, #0]
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	09db      	lsrs	r3, r3, #7
 800569a:	61bb      	str	r3, [r7, #24]
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	2b7f      	cmp	r3, #127	; 0x7f
 80056a0:	d8f0      	bhi.n	8005684 <SEGGER_SYSVIEW_Warn+0x6c>
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	1c5a      	adds	r2, r3, #1
 80056a6:	61fa      	str	r2, [r7, #28]
 80056a8:	69ba      	ldr	r2, [r7, #24]
 80056aa:	b2d2      	uxtb	r2, r2
 80056ac:	701a      	strb	r2, [r3, #0]
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80056b2:	221a      	movs	r2, #26
 80056b4:	68f9      	ldr	r1, [r7, #12]
 80056b6:	6938      	ldr	r0, [r7, #16]
 80056b8:	f7fe ffd4 	bl	8004664 <_SendPacket>
  RECORD_END();
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	f383 8811 	msr	BASEPRI, r3
}
 80056c2:	bf00      	nop
 80056c4:	3728      	adds	r7, #40	; 0x28
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	20014258 	.word	0x20014258

080056d0 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 80056d0:	b580      	push	{r7, lr}
 80056d2:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80056d4:	4b13      	ldr	r3, [pc, #76]	; (8005724 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80056d6:	7e1b      	ldrb	r3, [r3, #24]
 80056d8:	4619      	mov	r1, r3
 80056da:	4a13      	ldr	r2, [pc, #76]	; (8005728 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80056dc:	460b      	mov	r3, r1
 80056de:	005b      	lsls	r3, r3, #1
 80056e0:	440b      	add	r3, r1
 80056e2:	00db      	lsls	r3, r3, #3
 80056e4:	4413      	add	r3, r2
 80056e6:	336c      	adds	r3, #108	; 0x6c
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	4b0e      	ldr	r3, [pc, #56]	; (8005724 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80056ec:	7e1b      	ldrb	r3, [r3, #24]
 80056ee:	4618      	mov	r0, r3
 80056f0:	490d      	ldr	r1, [pc, #52]	; (8005728 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80056f2:	4603      	mov	r3, r0
 80056f4:	005b      	lsls	r3, r3, #1
 80056f6:	4403      	add	r3, r0
 80056f8:	00db      	lsls	r3, r3, #3
 80056fa:	440b      	add	r3, r1
 80056fc:	3370      	adds	r3, #112	; 0x70
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	429a      	cmp	r2, r3
 8005702:	d00b      	beq.n	800571c <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005704:	4b07      	ldr	r3, [pc, #28]	; (8005724 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005706:	789b      	ldrb	r3, [r3, #2]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d107      	bne.n	800571c <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800570c:	4b05      	ldr	r3, [pc, #20]	; (8005724 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800570e:	2201      	movs	r2, #1
 8005710:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005712:	f7fe fec3 	bl	800449c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005716:	4b03      	ldr	r3, [pc, #12]	; (8005724 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005718:	2200      	movs	r2, #0
 800571a:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 800571c:	4b01      	ldr	r3, [pc, #4]	; (8005724 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800571e:	781b      	ldrb	r3, [r3, #0]
}
 8005720:	4618      	mov	r0, r3
 8005722:	bd80      	pop	{r7, pc}
 8005724:	20014228 	.word	0x20014228
 8005728:	20014388 	.word	0x20014388

0800572c <__libc_init_array>:
 800572c:	b570      	push	{r4, r5, r6, lr}
 800572e:	4d0d      	ldr	r5, [pc, #52]	; (8005764 <__libc_init_array+0x38>)
 8005730:	4c0d      	ldr	r4, [pc, #52]	; (8005768 <__libc_init_array+0x3c>)
 8005732:	1b64      	subs	r4, r4, r5
 8005734:	10a4      	asrs	r4, r4, #2
 8005736:	2600      	movs	r6, #0
 8005738:	42a6      	cmp	r6, r4
 800573a:	d109      	bne.n	8005750 <__libc_init_array+0x24>
 800573c:	4d0b      	ldr	r5, [pc, #44]	; (800576c <__libc_init_array+0x40>)
 800573e:	4c0c      	ldr	r4, [pc, #48]	; (8005770 <__libc_init_array+0x44>)
 8005740:	f000 f83c 	bl	80057bc <_init>
 8005744:	1b64      	subs	r4, r4, r5
 8005746:	10a4      	asrs	r4, r4, #2
 8005748:	2600      	movs	r6, #0
 800574a:	42a6      	cmp	r6, r4
 800574c:	d105      	bne.n	800575a <__libc_init_array+0x2e>
 800574e:	bd70      	pop	{r4, r5, r6, pc}
 8005750:	f855 3b04 	ldr.w	r3, [r5], #4
 8005754:	4798      	blx	r3
 8005756:	3601      	adds	r6, #1
 8005758:	e7ee      	b.n	8005738 <__libc_init_array+0xc>
 800575a:	f855 3b04 	ldr.w	r3, [r5], #4
 800575e:	4798      	blx	r3
 8005760:	3601      	adds	r6, #1
 8005762:	e7f2      	b.n	800574a <__libc_init_array+0x1e>
 8005764:	08005918 	.word	0x08005918
 8005768:	08005918 	.word	0x08005918
 800576c:	08005918 	.word	0x08005918
 8005770:	0800591c 	.word	0x0800591c

08005774 <memcmp>:
 8005774:	b530      	push	{r4, r5, lr}
 8005776:	3901      	subs	r1, #1
 8005778:	2400      	movs	r4, #0
 800577a:	42a2      	cmp	r2, r4
 800577c:	d101      	bne.n	8005782 <memcmp+0xe>
 800577e:	2000      	movs	r0, #0
 8005780:	e005      	b.n	800578e <memcmp+0x1a>
 8005782:	5d03      	ldrb	r3, [r0, r4]
 8005784:	3401      	adds	r4, #1
 8005786:	5d0d      	ldrb	r5, [r1, r4]
 8005788:	42ab      	cmp	r3, r5
 800578a:	d0f6      	beq.n	800577a <memcmp+0x6>
 800578c:	1b58      	subs	r0, r3, r5
 800578e:	bd30      	pop	{r4, r5, pc}

08005790 <memcpy>:
 8005790:	440a      	add	r2, r1
 8005792:	4291      	cmp	r1, r2
 8005794:	f100 33ff 	add.w	r3, r0, #4294967295
 8005798:	d100      	bne.n	800579c <memcpy+0xc>
 800579a:	4770      	bx	lr
 800579c:	b510      	push	{r4, lr}
 800579e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057a6:	4291      	cmp	r1, r2
 80057a8:	d1f9      	bne.n	800579e <memcpy+0xe>
 80057aa:	bd10      	pop	{r4, pc}

080057ac <memset>:
 80057ac:	4402      	add	r2, r0
 80057ae:	4603      	mov	r3, r0
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d100      	bne.n	80057b6 <memset+0xa>
 80057b4:	4770      	bx	lr
 80057b6:	f803 1b01 	strb.w	r1, [r3], #1
 80057ba:	e7f9      	b.n	80057b0 <memset+0x4>

080057bc <_init>:
 80057bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057be:	bf00      	nop
 80057c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057c2:	bc08      	pop	{r3}
 80057c4:	469e      	mov	lr, r3
 80057c6:	4770      	bx	lr

080057c8 <_fini>:
 80057c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ca:	bf00      	nop
 80057cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057ce:	bc08      	pop	{r3}
 80057d0:	469e      	mov	lr, r3
 80057d2:	4770      	bx	lr
