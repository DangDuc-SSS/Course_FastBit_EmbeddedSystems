
001Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b40  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08003cd0  08003cd0  00013cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d94  08003d94  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08003d94  08003d94  00013d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d9c  08003d9c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d9c  08003d9c  00013d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003da0  08003da0  00013da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08003da4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00012db0  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20012e28  20012e28  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fb75  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000243d  00000000  00000000  0002fc1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d18  00000000  00000000  00032060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c10  00000000  00000000  00032d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000229e1  00000000  00000000  00033988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e5ec  00000000  00000000  00056369  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1b02  00000000  00000000  00064955  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00136457  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003c2c  00000000  00000000  001364ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003cb8 	.word	0x08003cb8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08003cb8 	.word	0x08003cb8

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b088      	sub	sp, #32
 80004cc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ce:	f000 fbbf 	bl	8000c50 <HAL_Init>

  /* USER CODE BEGIN Init */


  status = xTaskCreate(task1_handler, "Task-1", 200, "Hello World from Task-1", 2, &task1_handle);
 80004d2:	f107 0308 	add.w	r3, r7, #8
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	2302      	movs	r3, #2
 80004da:	9300      	str	r3, [sp, #0]
 80004dc:	4b1a      	ldr	r3, [pc, #104]	; (8000548 <main+0x80>)
 80004de:	22c8      	movs	r2, #200	; 0xc8
 80004e0:	491a      	ldr	r1, [pc, #104]	; (800054c <main+0x84>)
 80004e2:	481b      	ldr	r0, [pc, #108]	; (8000550 <main+0x88>)
 80004e4:	f001 fe25 	bl	8002132 <xTaskCreate>
 80004e8:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80004ea:	697b      	ldr	r3, [r7, #20]
 80004ec:	2b01      	cmp	r3, #1
 80004ee:	d00a      	beq.n	8000506 <main+0x3e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80004f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80004f4:	f383 8811 	msr	BASEPRI, r3
 80004f8:	f3bf 8f6f 	isb	sy
 80004fc:	f3bf 8f4f 	dsb	sy
 8000500:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000502:	bf00      	nop
 8000504:	e7fe      	b.n	8000504 <main+0x3c>

  status = xTaskCreate(task2_handler, "Task-2", 200, "Hello World from Task-2", 2, &task2_handle);
 8000506:	1d3b      	adds	r3, r7, #4
 8000508:	9301      	str	r3, [sp, #4]
 800050a:	2302      	movs	r3, #2
 800050c:	9300      	str	r3, [sp, #0]
 800050e:	4b11      	ldr	r3, [pc, #68]	; (8000554 <main+0x8c>)
 8000510:	22c8      	movs	r2, #200	; 0xc8
 8000512:	4911      	ldr	r1, [pc, #68]	; (8000558 <main+0x90>)
 8000514:	4811      	ldr	r0, [pc, #68]	; (800055c <main+0x94>)
 8000516:	f001 fe0c 	bl	8002132 <xTaskCreate>
 800051a:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 800051c:	697b      	ldr	r3, [r7, #20]
 800051e:	2b01      	cmp	r3, #1
 8000520:	d00a      	beq.n	8000538 <main+0x70>
        __asm volatile
 8000522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000526:	f383 8811 	msr	BASEPRI, r3
 800052a:	f3bf 8f6f 	isb	sy
 800052e:	f3bf 8f4f 	dsb	sy
 8000532:	60fb      	str	r3, [r7, #12]
    }
 8000534:	bf00      	nop
 8000536:	e7fe      	b.n	8000536 <main+0x6e>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000538:	f000 f812 	bl	8000560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053c:	f000 f87a 	bl	8000634 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  // start the freeRTOS schedular
  vTaskStartScheduler();
 8000540:	f001 ff64 	bl	800240c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000544:	e7fe      	b.n	8000544 <main+0x7c>
 8000546:	bf00      	nop
 8000548:	08003cd0 	.word	0x08003cd0
 800054c:	08003ce8 	.word	0x08003ce8
 8000550:	080008f1 	.word	0x080008f1
 8000554:	08003cf0 	.word	0x08003cf0
 8000558:	08003d08 	.word	0x08003d08
 800055c:	08000915 	.word	0x08000915

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b094      	sub	sp, #80	; 0x50
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 0320 	add.w	r3, r7, #32
 800056a:	2230      	movs	r2, #48	; 0x30
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f002 fec6 	bl	8003300 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	f107 030c 	add.w	r3, r7, #12
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000584:	2300      	movs	r3, #0
 8000586:	60bb      	str	r3, [r7, #8]
 8000588:	4b28      	ldr	r3, [pc, #160]	; (800062c <SystemClock_Config+0xcc>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058c:	4a27      	ldr	r2, [pc, #156]	; (800062c <SystemClock_Config+0xcc>)
 800058e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000592:	6413      	str	r3, [r2, #64]	; 0x40
 8000594:	4b25      	ldr	r3, [pc, #148]	; (800062c <SystemClock_Config+0xcc>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a0:	2300      	movs	r3, #0
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	4b22      	ldr	r3, [pc, #136]	; (8000630 <SystemClock_Config+0xd0>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a21      	ldr	r2, [pc, #132]	; (8000630 <SystemClock_Config+0xd0>)
 80005aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ae:	6013      	str	r3, [r2, #0]
 80005b0:	4b1f      	ldr	r3, [pc, #124]	; (8000630 <SystemClock_Config+0xd0>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005bc:	2302      	movs	r3, #2
 80005be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c0:	2301      	movs	r3, #1
 80005c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c4:	2310      	movs	r3, #16
 80005c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c8:	2302      	movs	r3, #2
 80005ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005cc:	2300      	movs	r3, #0
 80005ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005d0:	2308      	movs	r3, #8
 80005d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80005d4:	2332      	movs	r3, #50	; 0x32
 80005d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005d8:	2304      	movs	r3, #4
 80005da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005dc:	2307      	movs	r3, #7
 80005de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e0:	f107 0320 	add.w	r3, r7, #32
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 fe0d 	bl	8001204 <HAL_RCC_OscConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005f0:	f000 f9b4 	bl	800095c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f4:	230f      	movs	r3, #15
 80005f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f8:	2302      	movs	r3, #2
 80005fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000600:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000604:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000606:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800060a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f001 f86e 	bl	80016f4 <HAL_RCC_ClockConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800061e:	f000 f99d 	bl	800095c <Error_Handler>
  }
}
 8000622:	bf00      	nop
 8000624:	3750      	adds	r7, #80	; 0x50
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40023800 	.word	0x40023800
 8000630:	40007000 	.word	0x40007000

08000634 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b08c      	sub	sp, #48	; 0x30
 8000638:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063a:	f107 031c 	add.w	r3, r7, #28
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	605a      	str	r2, [r3, #4]
 8000644:	609a      	str	r2, [r3, #8]
 8000646:	60da      	str	r2, [r3, #12]
 8000648:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	61bb      	str	r3, [r7, #24]
 800064e:	4ba2      	ldr	r3, [pc, #648]	; (80008d8 <MX_GPIO_Init+0x2a4>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	4aa1      	ldr	r2, [pc, #644]	; (80008d8 <MX_GPIO_Init+0x2a4>)
 8000654:	f043 0310 	orr.w	r3, r3, #16
 8000658:	6313      	str	r3, [r2, #48]	; 0x30
 800065a:	4b9f      	ldr	r3, [pc, #636]	; (80008d8 <MX_GPIO_Init+0x2a4>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	f003 0310 	and.w	r3, r3, #16
 8000662:	61bb      	str	r3, [r7, #24]
 8000664:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	617b      	str	r3, [r7, #20]
 800066a:	4b9b      	ldr	r3, [pc, #620]	; (80008d8 <MX_GPIO_Init+0x2a4>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	4a9a      	ldr	r2, [pc, #616]	; (80008d8 <MX_GPIO_Init+0x2a4>)
 8000670:	f043 0304 	orr.w	r3, r3, #4
 8000674:	6313      	str	r3, [r2, #48]	; 0x30
 8000676:	4b98      	ldr	r3, [pc, #608]	; (80008d8 <MX_GPIO_Init+0x2a4>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	f003 0304 	and.w	r3, r3, #4
 800067e:	617b      	str	r3, [r7, #20]
 8000680:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	613b      	str	r3, [r7, #16]
 8000686:	4b94      	ldr	r3, [pc, #592]	; (80008d8 <MX_GPIO_Init+0x2a4>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	4a93      	ldr	r2, [pc, #588]	; (80008d8 <MX_GPIO_Init+0x2a4>)
 800068c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000690:	6313      	str	r3, [r2, #48]	; 0x30
 8000692:	4b91      	ldr	r3, [pc, #580]	; (80008d8 <MX_GPIO_Init+0x2a4>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800069a:	613b      	str	r3, [r7, #16]
 800069c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	60fb      	str	r3, [r7, #12]
 80006a2:	4b8d      	ldr	r3, [pc, #564]	; (80008d8 <MX_GPIO_Init+0x2a4>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	4a8c      	ldr	r2, [pc, #560]	; (80008d8 <MX_GPIO_Init+0x2a4>)
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	6313      	str	r3, [r2, #48]	; 0x30
 80006ae:	4b8a      	ldr	r3, [pc, #552]	; (80008d8 <MX_GPIO_Init+0x2a4>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	f003 0301 	and.w	r3, r3, #1
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	60bb      	str	r3, [r7, #8]
 80006be:	4b86      	ldr	r3, [pc, #536]	; (80008d8 <MX_GPIO_Init+0x2a4>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a85      	ldr	r2, [pc, #532]	; (80008d8 <MX_GPIO_Init+0x2a4>)
 80006c4:	f043 0302 	orr.w	r3, r3, #2
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b83      	ldr	r3, [pc, #524]	; (80008d8 <MX_GPIO_Init+0x2a4>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0302 	and.w	r3, r3, #2
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	4b7f      	ldr	r3, [pc, #508]	; (80008d8 <MX_GPIO_Init+0x2a4>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a7e      	ldr	r2, [pc, #504]	; (80008d8 <MX_GPIO_Init+0x2a4>)
 80006e0:	f043 0308 	orr.w	r3, r3, #8
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b7c      	ldr	r3, [pc, #496]	; (80008d8 <MX_GPIO_Init+0x2a4>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0308 	and.w	r3, r3, #8
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80006f2:	2200      	movs	r2, #0
 80006f4:	2108      	movs	r1, #8
 80006f6:	4879      	ldr	r0, [pc, #484]	; (80008dc <MX_GPIO_Init+0x2a8>)
 80006f8:	f000 fd6a 	bl	80011d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80006fc:	2201      	movs	r2, #1
 80006fe:	2101      	movs	r1, #1
 8000700:	4877      	ldr	r0, [pc, #476]	; (80008e0 <MX_GPIO_Init+0x2ac>)
 8000702:	f000 fd65 	bl	80011d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000706:	2200      	movs	r2, #0
 8000708:	f24f 0110 	movw	r1, #61456	; 0xf010
 800070c:	4875      	ldr	r0, [pc, #468]	; (80008e4 <MX_GPIO_Init+0x2b0>)
 800070e:	f000 fd5f 	bl	80011d0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000712:	2308      	movs	r3, #8
 8000714:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000716:	2301      	movs	r3, #1
 8000718:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	2300      	movs	r3, #0
 800071c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071e:	2300      	movs	r3, #0
 8000720:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000722:	f107 031c 	add.w	r3, r7, #28
 8000726:	4619      	mov	r1, r3
 8000728:	486c      	ldr	r0, [pc, #432]	; (80008dc <MX_GPIO_Init+0x2a8>)
 800072a:	f000 fbb5 	bl	8000e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800072e:	2301      	movs	r3, #1
 8000730:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000732:	2301      	movs	r3, #1
 8000734:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	2300      	movs	r3, #0
 8000738:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073a:	2300      	movs	r3, #0
 800073c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800073e:	f107 031c 	add.w	r3, r7, #28
 8000742:	4619      	mov	r1, r3
 8000744:	4866      	ldr	r0, [pc, #408]	; (80008e0 <MX_GPIO_Init+0x2ac>)
 8000746:	f000 fba7 	bl	8000e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800074a:	2308      	movs	r3, #8
 800074c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800074e:	2302      	movs	r3, #2
 8000750:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	2300      	movs	r3, #0
 8000754:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000756:	2300      	movs	r3, #0
 8000758:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800075a:	2305      	movs	r3, #5
 800075c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800075e:	f107 031c 	add.w	r3, r7, #28
 8000762:	4619      	mov	r1, r3
 8000764:	485e      	ldr	r0, [pc, #376]	; (80008e0 <MX_GPIO_Init+0x2ac>)
 8000766:	f000 fb97 	bl	8000e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800076a:	2301      	movs	r3, #1
 800076c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800076e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000772:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	2300      	movs	r3, #0
 8000776:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000778:	f107 031c 	add.w	r3, r7, #28
 800077c:	4619      	mov	r1, r3
 800077e:	485a      	ldr	r0, [pc, #360]	; (80008e8 <MX_GPIO_Init+0x2b4>)
 8000780:	f000 fb8a 	bl	8000e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000784:	2310      	movs	r3, #16
 8000786:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000788:	2302      	movs	r3, #2
 800078a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000790:	2300      	movs	r3, #0
 8000792:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000794:	2306      	movs	r3, #6
 8000796:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000798:	f107 031c 	add.w	r3, r7, #28
 800079c:	4619      	mov	r1, r3
 800079e:	4852      	ldr	r0, [pc, #328]	; (80008e8 <MX_GPIO_Init+0x2b4>)
 80007a0:	f000 fb7a 	bl	8000e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80007a4:	23e0      	movs	r3, #224	; 0xe0
 80007a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a8:	2302      	movs	r3, #2
 80007aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b0:	2300      	movs	r3, #0
 80007b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007b4:	2305      	movs	r3, #5
 80007b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b8:	f107 031c 	add.w	r3, r7, #28
 80007bc:	4619      	mov	r1, r3
 80007be:	484a      	ldr	r0, [pc, #296]	; (80008e8 <MX_GPIO_Init+0x2b4>)
 80007c0:	f000 fb6a 	bl	8000e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80007c4:	2304      	movs	r3, #4
 80007c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c8:	2300      	movs	r3, #0
 80007ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80007d0:	f107 031c 	add.w	r3, r7, #28
 80007d4:	4619      	mov	r1, r3
 80007d6:	4845      	ldr	r0, [pc, #276]	; (80008ec <MX_GPIO_Init+0x2b8>)
 80007d8:	f000 fb5e 	bl	8000e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80007dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e2:	2302      	movs	r3, #2
 80007e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ea:	2300      	movs	r3, #0
 80007ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007ee:	2305      	movs	r3, #5
 80007f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80007f2:	f107 031c 	add.w	r3, r7, #28
 80007f6:	4619      	mov	r1, r3
 80007f8:	483c      	ldr	r0, [pc, #240]	; (80008ec <MX_GPIO_Init+0x2b8>)
 80007fa:	f000 fb4d 	bl	8000e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007fe:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000802:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000804:	2301      	movs	r3, #1
 8000806:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080c:	2300      	movs	r3, #0
 800080e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000810:	f107 031c 	add.w	r3, r7, #28
 8000814:	4619      	mov	r1, r3
 8000816:	4833      	ldr	r0, [pc, #204]	; (80008e4 <MX_GPIO_Init+0x2b0>)
 8000818:	f000 fb3e 	bl	8000e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800081c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000822:	2302      	movs	r3, #2
 8000824:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	2300      	movs	r3, #0
 800082c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800082e:	2306      	movs	r3, #6
 8000830:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000832:	f107 031c 	add.w	r3, r7, #28
 8000836:	4619      	mov	r1, r3
 8000838:	4829      	ldr	r0, [pc, #164]	; (80008e0 <MX_GPIO_Init+0x2ac>)
 800083a:	f000 fb2d 	bl	8000e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800083e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000842:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000844:	2300      	movs	r3, #0
 8000846:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800084c:	f107 031c 	add.w	r3, r7, #28
 8000850:	4619      	mov	r1, r3
 8000852:	4825      	ldr	r0, [pc, #148]	; (80008e8 <MX_GPIO_Init+0x2b4>)
 8000854:	f000 fb20 	bl	8000e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000858:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800085c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085e:	2302      	movs	r3, #2
 8000860:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000866:	2300      	movs	r3, #0
 8000868:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800086a:	230a      	movs	r3, #10
 800086c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086e:	f107 031c 	add.w	r3, r7, #28
 8000872:	4619      	mov	r1, r3
 8000874:	481c      	ldr	r0, [pc, #112]	; (80008e8 <MX_GPIO_Init+0x2b4>)
 8000876:	f000 fb0f 	bl	8000e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800087a:	2320      	movs	r3, #32
 800087c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800087e:	2300      	movs	r3, #0
 8000880:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000886:	f107 031c 	add.w	r3, r7, #28
 800088a:	4619      	mov	r1, r3
 800088c:	4815      	ldr	r0, [pc, #84]	; (80008e4 <MX_GPIO_Init+0x2b0>)
 800088e:	f000 fb03 	bl	8000e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000892:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000898:	2312      	movs	r3, #18
 800089a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a0:	2300      	movs	r3, #0
 80008a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008a4:	2304      	movs	r3, #4
 80008a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a8:	f107 031c 	add.w	r3, r7, #28
 80008ac:	4619      	mov	r1, r3
 80008ae:	480f      	ldr	r0, [pc, #60]	; (80008ec <MX_GPIO_Init+0x2b8>)
 80008b0:	f000 faf2 	bl	8000e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80008b4:	2302      	movs	r3, #2
 80008b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008b8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	4619      	mov	r1, r3
 80008c8:	4804      	ldr	r0, [pc, #16]	; (80008dc <MX_GPIO_Init+0x2a8>)
 80008ca:	f000 fae5 	bl	8000e98 <HAL_GPIO_Init>

}
 80008ce:	bf00      	nop
 80008d0:	3730      	adds	r7, #48	; 0x30
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40021000 	.word	0x40021000
 80008e0:	40020800 	.word	0x40020800
 80008e4:	40020c00 	.word	0x40020c00
 80008e8:	40020000 	.word	0x40020000
 80008ec:	40020400 	.word	0x40020400

080008f0 <task1_handler>:

/* USER CODE BEGIN 4 */

static void task1_handler(void *parameters)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		printf("%s\n", (char*)parameters);
 80008f8:	6878      	ldr	r0, [r7, #4]
 80008fa:	f002 fd77 	bl	80033ec <puts>
		taskYIELD();
 80008fe:	4b04      	ldr	r3, [pc, #16]	; (8000910 <task1_handler+0x20>)
 8000900:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	f3bf 8f4f 	dsb	sy
 800090a:	f3bf 8f6f 	isb	sy
		printf("%s\n", (char*)parameters);
 800090e:	e7f3      	b.n	80008f8 <task1_handler+0x8>
 8000910:	e000ed04 	.word	0xe000ed04

08000914 <task2_handler>:
	}
}

static void task2_handler(void *parameters)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		printf("%s\n", (char*)parameters);
 800091c:	6878      	ldr	r0, [r7, #4]
 800091e:	f002 fd65 	bl	80033ec <puts>
		taskYIELD();
 8000922:	4b04      	ldr	r3, [pc, #16]	; (8000934 <task2_handler+0x20>)
 8000924:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	f3bf 8f4f 	dsb	sy
 800092e:	f3bf 8f6f 	isb	sy
		printf("%s\n", (char*)parameters);
 8000932:	e7f3      	b.n	800091c <task2_handler+0x8>
 8000934:	e000ed04 	.word	0xe000ed04

08000938 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a04      	ldr	r2, [pc, #16]	; (8000958 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d101      	bne.n	800094e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800094a:	f000 f9a3 	bl	8000c94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40001000 	.word	0x40001000

0800095c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000960:	b672      	cpsid	i
}
 8000962:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000964:	e7fe      	b.n	8000964 <Error_Handler+0x8>
	...

08000968 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	607b      	str	r3, [r7, #4]
 8000972:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <HAL_MspInit+0x4c>)
 8000974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000976:	4a0f      	ldr	r2, [pc, #60]	; (80009b4 <HAL_MspInit+0x4c>)
 8000978:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800097c:	6453      	str	r3, [r2, #68]	; 0x44
 800097e:	4b0d      	ldr	r3, [pc, #52]	; (80009b4 <HAL_MspInit+0x4c>)
 8000980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000982:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	603b      	str	r3, [r7, #0]
 800098e:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <HAL_MspInit+0x4c>)
 8000990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000992:	4a08      	ldr	r2, [pc, #32]	; (80009b4 <HAL_MspInit+0x4c>)
 8000994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000998:	6413      	str	r3, [r2, #64]	; 0x40
 800099a:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <HAL_MspInit+0x4c>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a2:	603b      	str	r3, [r7, #0]
 80009a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a6:	bf00      	nop
 80009a8:	370c      	adds	r7, #12
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	40023800 	.word	0x40023800

080009b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08c      	sub	sp, #48	; 0x30
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009c0:	2300      	movs	r3, #0
 80009c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80009c8:	2200      	movs	r2, #0
 80009ca:	6879      	ldr	r1, [r7, #4]
 80009cc:	2036      	movs	r0, #54	; 0x36
 80009ce:	f000 fa39 	bl	8000e44 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80009d2:	2036      	movs	r0, #54	; 0x36
 80009d4:	f000 fa52 	bl	8000e7c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009d8:	2300      	movs	r3, #0
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	4b1f      	ldr	r3, [pc, #124]	; (8000a5c <HAL_InitTick+0xa4>)
 80009de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e0:	4a1e      	ldr	r2, [pc, #120]	; (8000a5c <HAL_InitTick+0xa4>)
 80009e2:	f043 0310 	orr.w	r3, r3, #16
 80009e6:	6413      	str	r3, [r2, #64]	; 0x40
 80009e8:	4b1c      	ldr	r3, [pc, #112]	; (8000a5c <HAL_InitTick+0xa4>)
 80009ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ec:	f003 0310 	and.w	r3, r3, #16
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009f4:	f107 0210 	add.w	r2, r7, #16
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	4611      	mov	r1, r2
 80009fe:	4618      	mov	r0, r3
 8000a00:	f001 f860 	bl	8001ac4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000a04:	f001 f84a 	bl	8001a9c <HAL_RCC_GetPCLK1Freq>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	005b      	lsls	r3, r3, #1
 8000a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a10:	4a13      	ldr	r2, [pc, #76]	; (8000a60 <HAL_InitTick+0xa8>)
 8000a12:	fba2 2303 	umull	r2, r3, r2, r3
 8000a16:	0c9b      	lsrs	r3, r3, #18
 8000a18:	3b01      	subs	r3, #1
 8000a1a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a1c:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <HAL_InitTick+0xac>)
 8000a1e:	4a12      	ldr	r2, [pc, #72]	; (8000a68 <HAL_InitTick+0xb0>)
 8000a20:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a22:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <HAL_InitTick+0xac>)
 8000a24:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a28:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a2a:	4a0e      	ldr	r2, [pc, #56]	; (8000a64 <HAL_InitTick+0xac>)
 8000a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a2e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a30:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <HAL_InitTick+0xac>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a36:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <HAL_InitTick+0xac>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000a3c:	4809      	ldr	r0, [pc, #36]	; (8000a64 <HAL_InitTick+0xac>)
 8000a3e:	f001 f873 	bl	8001b28 <HAL_TIM_Base_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d104      	bne.n	8000a52 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000a48:	4806      	ldr	r0, [pc, #24]	; (8000a64 <HAL_InitTick+0xac>)
 8000a4a:	f001 f8c7 	bl	8001bdc <HAL_TIM_Base_Start_IT>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	e000      	b.n	8000a54 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a52:	2301      	movs	r3, #1
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	3730      	adds	r7, #48	; 0x30
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40023800 	.word	0x40023800
 8000a60:	431bde83 	.word	0x431bde83
 8000a64:	20012dcc 	.word	0x20012dcc
 8000a68:	40001000 	.word	0x40001000

08000a6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <NMI_Handler+0x4>

08000a72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a76:	e7fe      	b.n	8000a76 <HardFault_Handler+0x4>

08000a78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <MemManage_Handler+0x4>

08000a7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a82:	e7fe      	b.n	8000a82 <BusFault_Handler+0x4>

08000a84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <UsageFault_Handler+0x4>

08000a8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a9c:	4802      	ldr	r0, [pc, #8]	; (8000aa8 <TIM6_DAC_IRQHandler+0x10>)
 8000a9e:	f001 f90d 	bl	8001cbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20012dcc 	.word	0x20012dcc

08000aac <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000ab6:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <ITM_SendChar+0x48>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4a0e      	ldr	r2, [pc, #56]	; (8000af4 <ITM_SendChar+0x48>)
 8000abc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ac0:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000ac2:	4b0d      	ldr	r3, [pc, #52]	; (8000af8 <ITM_SendChar+0x4c>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4a0c      	ldr	r2, [pc, #48]	; (8000af8 <ITM_SendChar+0x4c>)
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000ace:	bf00      	nop
 8000ad0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d0f8      	beq.n	8000ad0 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000ade:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	6013      	str	r3, [r2, #0]
}
 8000ae6:	bf00      	nop
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	e000edfc 	.word	0xe000edfc
 8000af8:	e0000e00 	.word	0xe0000e00

08000afc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b086      	sub	sp, #24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	60b9      	str	r1, [r7, #8]
 8000b06:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]
 8000b0c:	e00a      	b.n	8000b24 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b0e:	f3af 8000 	nop.w
 8000b12:	4601      	mov	r1, r0
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	1c5a      	adds	r2, r3, #1
 8000b18:	60ba      	str	r2, [r7, #8]
 8000b1a:	b2ca      	uxtb	r2, r1
 8000b1c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	3301      	adds	r3, #1
 8000b22:	617b      	str	r3, [r7, #20]
 8000b24:	697a      	ldr	r2, [r7, #20]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	dbf0      	blt.n	8000b0e <_read+0x12>
	}

return len;
 8000b2c:	687b      	ldr	r3, [r7, #4]
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3718      	adds	r7, #24
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b086      	sub	sp, #24
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	60f8      	str	r0, [r7, #12]
 8000b3e:	60b9      	str	r1, [r7, #8]
 8000b40:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b42:	2300      	movs	r3, #0
 8000b44:	617b      	str	r3, [r7, #20]
 8000b46:	e009      	b.n	8000b5c <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	1c5a      	adds	r2, r3, #1
 8000b4c:	60ba      	str	r2, [r7, #8]
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff ffab 	bl	8000aac <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	617b      	str	r3, [r7, #20]
 8000b5c:	697a      	ldr	r2, [r7, #20]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	dbf1      	blt.n	8000b48 <_write+0x12>
	}
	return len;
 8000b64:	687b      	ldr	r3, [r7, #4]
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3718      	adds	r7, #24
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <_close>:

int _close(int file)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	b083      	sub	sp, #12
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
	return -1;
 8000b76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b86:	b480      	push	{r7}
 8000b88:	b083      	sub	sp, #12
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
 8000b8e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b96:	605a      	str	r2, [r3, #4]
	return 0;
 8000b98:	2300      	movs	r3, #0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <_isatty>:

int _isatty(int file)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	b083      	sub	sp, #12
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
	return 1;
 8000bae:	2301      	movs	r3, #1
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	60b9      	str	r1, [r7, #8]
 8000bc6:	607a      	str	r2, [r7, #4]
	return 0;
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3714      	adds	r7, #20
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
	...

08000bd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bdc:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <SystemInit+0x20>)
 8000bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000be2:	4a05      	ldr	r2, [pc, #20]	; (8000bf8 <SystemInit+0x20>)
 8000be4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000be8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000bfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c00:	480d      	ldr	r0, [pc, #52]	; (8000c38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c02:	490e      	ldr	r1, [pc, #56]	; (8000c3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c04:	4a0e      	ldr	r2, [pc, #56]	; (8000c40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c08:	e002      	b.n	8000c10 <LoopCopyDataInit>

08000c0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c0e:	3304      	adds	r3, #4

08000c10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c14:	d3f9      	bcc.n	8000c0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c16:	4a0b      	ldr	r2, [pc, #44]	; (8000c44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c18:	4c0b      	ldr	r4, [pc, #44]	; (8000c48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c1c:	e001      	b.n	8000c22 <LoopFillZerobss>

08000c1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c20:	3204      	adds	r2, #4

08000c22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c24:	d3fb      	bcc.n	8000c1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c26:	f7ff ffd7 	bl	8000bd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c2a:	f002 fb45 	bl	80032b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c2e:	f7ff fc4b 	bl	80004c8 <main>
  bx  lr    
 8000c32:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c3c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000c40:	08003da4 	.word	0x08003da4
  ldr r2, =_sbss
 8000c44:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000c48:	20012e28 	.word	0x20012e28

08000c4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c4c:	e7fe      	b.n	8000c4c <ADC_IRQHandler>
	...

08000c50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c54:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <HAL_Init+0x40>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a0d      	ldr	r2, [pc, #52]	; (8000c90 <HAL_Init+0x40>)
 8000c5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c60:	4b0b      	ldr	r3, [pc, #44]	; (8000c90 <HAL_Init+0x40>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a0a      	ldr	r2, [pc, #40]	; (8000c90 <HAL_Init+0x40>)
 8000c66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c6c:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <HAL_Init+0x40>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a07      	ldr	r2, [pc, #28]	; (8000c90 <HAL_Init+0x40>)
 8000c72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c78:	2003      	movs	r0, #3
 8000c7a:	f000 f8d8 	bl	8000e2e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c7e:	2000      	movs	r0, #0
 8000c80:	f7ff fe9a 	bl	80009b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c84:	f7ff fe70 	bl	8000968 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c88:	2300      	movs	r3, #0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40023c00 	.word	0x40023c00

08000c94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c98:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <HAL_IncTick+0x20>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <HAL_IncTick+0x24>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	4a04      	ldr	r2, [pc, #16]	; (8000cb8 <HAL_IncTick+0x24>)
 8000ca6:	6013      	str	r3, [r2, #0]
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	20000008 	.word	0x20000008
 8000cb8:	20012e14 	.word	0x20012e14

08000cbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc0:	4b03      	ldr	r3, [pc, #12]	; (8000cd0 <HAL_GetTick+0x14>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	20012e14 	.word	0x20012e14

08000cd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	f003 0307 	and.w	r3, r3, #7
 8000ce2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce4:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cea:	68ba      	ldr	r2, [r7, #8]
 8000cec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d06:	4a04      	ldr	r2, [pc, #16]	; (8000d18 <__NVIC_SetPriorityGrouping+0x44>)
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	60d3      	str	r3, [r2, #12]
}
 8000d0c:	bf00      	nop
 8000d0e:	3714      	adds	r7, #20
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d20:	4b04      	ldr	r3, [pc, #16]	; (8000d34 <__NVIC_GetPriorityGrouping+0x18>)
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	0a1b      	lsrs	r3, r3, #8
 8000d26:	f003 0307 	and.w	r3, r3, #7
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	db0b      	blt.n	8000d62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	f003 021f 	and.w	r2, r3, #31
 8000d50:	4907      	ldr	r1, [pc, #28]	; (8000d70 <__NVIC_EnableIRQ+0x38>)
 8000d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d56:	095b      	lsrs	r3, r3, #5
 8000d58:	2001      	movs	r0, #1
 8000d5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d62:	bf00      	nop
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	e000e100 	.word	0xe000e100

08000d74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	6039      	str	r1, [r7, #0]
 8000d7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	db0a      	blt.n	8000d9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	b2da      	uxtb	r2, r3
 8000d8c:	490c      	ldr	r1, [pc, #48]	; (8000dc0 <__NVIC_SetPriority+0x4c>)
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	0112      	lsls	r2, r2, #4
 8000d94:	b2d2      	uxtb	r2, r2
 8000d96:	440b      	add	r3, r1
 8000d98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d9c:	e00a      	b.n	8000db4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	4908      	ldr	r1, [pc, #32]	; (8000dc4 <__NVIC_SetPriority+0x50>)
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	f003 030f 	and.w	r3, r3, #15
 8000daa:	3b04      	subs	r3, #4
 8000dac:	0112      	lsls	r2, r2, #4
 8000dae:	b2d2      	uxtb	r2, r2
 8000db0:	440b      	add	r3, r1
 8000db2:	761a      	strb	r2, [r3, #24]
}
 8000db4:	bf00      	nop
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	e000e100 	.word	0xe000e100
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b089      	sub	sp, #36	; 0x24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	f003 0307 	and.w	r3, r3, #7
 8000dda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	f1c3 0307 	rsb	r3, r3, #7
 8000de2:	2b04      	cmp	r3, #4
 8000de4:	bf28      	it	cs
 8000de6:	2304      	movcs	r3, #4
 8000de8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	3304      	adds	r3, #4
 8000dee:	2b06      	cmp	r3, #6
 8000df0:	d902      	bls.n	8000df8 <NVIC_EncodePriority+0x30>
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	3b03      	subs	r3, #3
 8000df6:	e000      	b.n	8000dfa <NVIC_EncodePriority+0x32>
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	43da      	mvns	r2, r3
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	401a      	ands	r2, r3
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e10:	f04f 31ff 	mov.w	r1, #4294967295
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1a:	43d9      	mvns	r1, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e20:	4313      	orrs	r3, r2
         );
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3724      	adds	r7, #36	; 0x24
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr

08000e2e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b082      	sub	sp, #8
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f7ff ff4c 	bl	8000cd4 <__NVIC_SetPriorityGrouping>
}
 8000e3c:	bf00      	nop
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
 8000e50:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e52:	2300      	movs	r3, #0
 8000e54:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e56:	f7ff ff61 	bl	8000d1c <__NVIC_GetPriorityGrouping>
 8000e5a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	68b9      	ldr	r1, [r7, #8]
 8000e60:	6978      	ldr	r0, [r7, #20]
 8000e62:	f7ff ffb1 	bl	8000dc8 <NVIC_EncodePriority>
 8000e66:	4602      	mov	r2, r0
 8000e68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e6c:	4611      	mov	r1, r2
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff ff80 	bl	8000d74 <__NVIC_SetPriority>
}
 8000e74:	bf00      	nop
 8000e76:	3718      	adds	r7, #24
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff ff54 	bl	8000d38 <__NVIC_EnableIRQ>
}
 8000e90:	bf00      	nop
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b089      	sub	sp, #36	; 0x24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61fb      	str	r3, [r7, #28]
 8000eb2:	e16b      	b.n	800118c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	697a      	ldr	r2, [r7, #20]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	f040 815a 	bne.w	8001186 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f003 0303 	and.w	r3, r3, #3
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d005      	beq.n	8000eea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d130      	bne.n	8000f4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	2203      	movs	r2, #3
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43db      	mvns	r3, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4013      	ands	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	68da      	ldr	r2, [r3, #12]
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f20:	2201      	movs	r2, #1
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	091b      	lsrs	r3, r3, #4
 8000f36:	f003 0201 	and.w	r2, r3, #1
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f003 0303 	and.w	r3, r3, #3
 8000f54:	2b03      	cmp	r3, #3
 8000f56:	d017      	beq.n	8000f88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	2203      	movs	r2, #3
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	689a      	ldr	r2, [r3, #8]
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f003 0303 	and.w	r3, r3, #3
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d123      	bne.n	8000fdc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	08da      	lsrs	r2, r3, #3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3208      	adds	r2, #8
 8000f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	f003 0307 	and.w	r3, r3, #7
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	220f      	movs	r2, #15
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	691a      	ldr	r2, [r3, #16]
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	08da      	lsrs	r2, r3, #3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	3208      	adds	r2, #8
 8000fd6:	69b9      	ldr	r1, [r7, #24]
 8000fd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	2203      	movs	r2, #3
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f003 0203 	and.w	r2, r3, #3
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4313      	orrs	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001018:	2b00      	cmp	r3, #0
 800101a:	f000 80b4 	beq.w	8001186 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	4b60      	ldr	r3, [pc, #384]	; (80011a4 <HAL_GPIO_Init+0x30c>)
 8001024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001026:	4a5f      	ldr	r2, [pc, #380]	; (80011a4 <HAL_GPIO_Init+0x30c>)
 8001028:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800102c:	6453      	str	r3, [r2, #68]	; 0x44
 800102e:	4b5d      	ldr	r3, [pc, #372]	; (80011a4 <HAL_GPIO_Init+0x30c>)
 8001030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001032:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800103a:	4a5b      	ldr	r2, [pc, #364]	; (80011a8 <HAL_GPIO_Init+0x310>)
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	089b      	lsrs	r3, r3, #2
 8001040:	3302      	adds	r3, #2
 8001042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001046:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	f003 0303 	and.w	r3, r3, #3
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	220f      	movs	r2, #15
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43db      	mvns	r3, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4013      	ands	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a52      	ldr	r2, [pc, #328]	; (80011ac <HAL_GPIO_Init+0x314>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d02b      	beq.n	80010be <HAL_GPIO_Init+0x226>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a51      	ldr	r2, [pc, #324]	; (80011b0 <HAL_GPIO_Init+0x318>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d025      	beq.n	80010ba <HAL_GPIO_Init+0x222>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a50      	ldr	r2, [pc, #320]	; (80011b4 <HAL_GPIO_Init+0x31c>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d01f      	beq.n	80010b6 <HAL_GPIO_Init+0x21e>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a4f      	ldr	r2, [pc, #316]	; (80011b8 <HAL_GPIO_Init+0x320>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d019      	beq.n	80010b2 <HAL_GPIO_Init+0x21a>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a4e      	ldr	r2, [pc, #312]	; (80011bc <HAL_GPIO_Init+0x324>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d013      	beq.n	80010ae <HAL_GPIO_Init+0x216>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a4d      	ldr	r2, [pc, #308]	; (80011c0 <HAL_GPIO_Init+0x328>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d00d      	beq.n	80010aa <HAL_GPIO_Init+0x212>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a4c      	ldr	r2, [pc, #304]	; (80011c4 <HAL_GPIO_Init+0x32c>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d007      	beq.n	80010a6 <HAL_GPIO_Init+0x20e>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a4b      	ldr	r2, [pc, #300]	; (80011c8 <HAL_GPIO_Init+0x330>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d101      	bne.n	80010a2 <HAL_GPIO_Init+0x20a>
 800109e:	2307      	movs	r3, #7
 80010a0:	e00e      	b.n	80010c0 <HAL_GPIO_Init+0x228>
 80010a2:	2308      	movs	r3, #8
 80010a4:	e00c      	b.n	80010c0 <HAL_GPIO_Init+0x228>
 80010a6:	2306      	movs	r3, #6
 80010a8:	e00a      	b.n	80010c0 <HAL_GPIO_Init+0x228>
 80010aa:	2305      	movs	r3, #5
 80010ac:	e008      	b.n	80010c0 <HAL_GPIO_Init+0x228>
 80010ae:	2304      	movs	r3, #4
 80010b0:	e006      	b.n	80010c0 <HAL_GPIO_Init+0x228>
 80010b2:	2303      	movs	r3, #3
 80010b4:	e004      	b.n	80010c0 <HAL_GPIO_Init+0x228>
 80010b6:	2302      	movs	r3, #2
 80010b8:	e002      	b.n	80010c0 <HAL_GPIO_Init+0x228>
 80010ba:	2301      	movs	r3, #1
 80010bc:	e000      	b.n	80010c0 <HAL_GPIO_Init+0x228>
 80010be:	2300      	movs	r3, #0
 80010c0:	69fa      	ldr	r2, [r7, #28]
 80010c2:	f002 0203 	and.w	r2, r2, #3
 80010c6:	0092      	lsls	r2, r2, #2
 80010c8:	4093      	lsls	r3, r2
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010d0:	4935      	ldr	r1, [pc, #212]	; (80011a8 <HAL_GPIO_Init+0x310>)
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	089b      	lsrs	r3, r3, #2
 80010d6:	3302      	adds	r3, #2
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010de:	4b3b      	ldr	r3, [pc, #236]	; (80011cc <HAL_GPIO_Init+0x334>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	43db      	mvns	r3, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4013      	ands	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d003      	beq.n	8001102 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	4313      	orrs	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001102:	4a32      	ldr	r2, [pc, #200]	; (80011cc <HAL_GPIO_Init+0x334>)
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001108:	4b30      	ldr	r3, [pc, #192]	; (80011cc <HAL_GPIO_Init+0x334>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	43db      	mvns	r3, r3
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4013      	ands	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001120:	2b00      	cmp	r3, #0
 8001122:	d003      	beq.n	800112c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	4313      	orrs	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800112c:	4a27      	ldr	r2, [pc, #156]	; (80011cc <HAL_GPIO_Init+0x334>)
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001132:	4b26      	ldr	r3, [pc, #152]	; (80011cc <HAL_GPIO_Init+0x334>)
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	43db      	mvns	r3, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4013      	ands	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d003      	beq.n	8001156 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	4313      	orrs	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001156:	4a1d      	ldr	r2, [pc, #116]	; (80011cc <HAL_GPIO_Init+0x334>)
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800115c:	4b1b      	ldr	r3, [pc, #108]	; (80011cc <HAL_GPIO_Init+0x334>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	43db      	mvns	r3, r3
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4013      	ands	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d003      	beq.n	8001180 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	4313      	orrs	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001180:	4a12      	ldr	r2, [pc, #72]	; (80011cc <HAL_GPIO_Init+0x334>)
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	3301      	adds	r3, #1
 800118a:	61fb      	str	r3, [r7, #28]
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	2b0f      	cmp	r3, #15
 8001190:	f67f ae90 	bls.w	8000eb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001194:	bf00      	nop
 8001196:	bf00      	nop
 8001198:	3724      	adds	r7, #36	; 0x24
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40013800 	.word	0x40013800
 80011ac:	40020000 	.word	0x40020000
 80011b0:	40020400 	.word	0x40020400
 80011b4:	40020800 	.word	0x40020800
 80011b8:	40020c00 	.word	0x40020c00
 80011bc:	40021000 	.word	0x40021000
 80011c0:	40021400 	.word	0x40021400
 80011c4:	40021800 	.word	0x40021800
 80011c8:	40021c00 	.word	0x40021c00
 80011cc:	40013c00 	.word	0x40013c00

080011d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	460b      	mov	r3, r1
 80011da:	807b      	strh	r3, [r7, #2]
 80011dc:	4613      	mov	r3, r2
 80011de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011e0:	787b      	ldrb	r3, [r7, #1]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d003      	beq.n	80011ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011e6:	887a      	ldrh	r2, [r7, #2]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011ec:	e003      	b.n	80011f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011ee:	887b      	ldrh	r3, [r7, #2]
 80011f0:	041a      	lsls	r2, r3, #16
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	619a      	str	r2, [r3, #24]
}
 80011f6:	bf00      	nop
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
	...

08001204 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d101      	bne.n	8001216 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e264      	b.n	80016e0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	2b00      	cmp	r3, #0
 8001220:	d075      	beq.n	800130e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001222:	4ba3      	ldr	r3, [pc, #652]	; (80014b0 <HAL_RCC_OscConfig+0x2ac>)
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	f003 030c 	and.w	r3, r3, #12
 800122a:	2b04      	cmp	r3, #4
 800122c:	d00c      	beq.n	8001248 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800122e:	4ba0      	ldr	r3, [pc, #640]	; (80014b0 <HAL_RCC_OscConfig+0x2ac>)
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001236:	2b08      	cmp	r3, #8
 8001238:	d112      	bne.n	8001260 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800123a:	4b9d      	ldr	r3, [pc, #628]	; (80014b0 <HAL_RCC_OscConfig+0x2ac>)
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001242:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001246:	d10b      	bne.n	8001260 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001248:	4b99      	ldr	r3, [pc, #612]	; (80014b0 <HAL_RCC_OscConfig+0x2ac>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001250:	2b00      	cmp	r3, #0
 8001252:	d05b      	beq.n	800130c <HAL_RCC_OscConfig+0x108>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d157      	bne.n	800130c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	e23f      	b.n	80016e0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001268:	d106      	bne.n	8001278 <HAL_RCC_OscConfig+0x74>
 800126a:	4b91      	ldr	r3, [pc, #580]	; (80014b0 <HAL_RCC_OscConfig+0x2ac>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a90      	ldr	r2, [pc, #576]	; (80014b0 <HAL_RCC_OscConfig+0x2ac>)
 8001270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001274:	6013      	str	r3, [r2, #0]
 8001276:	e01d      	b.n	80012b4 <HAL_RCC_OscConfig+0xb0>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001280:	d10c      	bne.n	800129c <HAL_RCC_OscConfig+0x98>
 8001282:	4b8b      	ldr	r3, [pc, #556]	; (80014b0 <HAL_RCC_OscConfig+0x2ac>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a8a      	ldr	r2, [pc, #552]	; (80014b0 <HAL_RCC_OscConfig+0x2ac>)
 8001288:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800128c:	6013      	str	r3, [r2, #0]
 800128e:	4b88      	ldr	r3, [pc, #544]	; (80014b0 <HAL_RCC_OscConfig+0x2ac>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a87      	ldr	r2, [pc, #540]	; (80014b0 <HAL_RCC_OscConfig+0x2ac>)
 8001294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001298:	6013      	str	r3, [r2, #0]
 800129a:	e00b      	b.n	80012b4 <HAL_RCC_OscConfig+0xb0>
 800129c:	4b84      	ldr	r3, [pc, #528]	; (80014b0 <HAL_RCC_OscConfig+0x2ac>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a83      	ldr	r2, [pc, #524]	; (80014b0 <HAL_RCC_OscConfig+0x2ac>)
 80012a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012a6:	6013      	str	r3, [r2, #0]
 80012a8:	4b81      	ldr	r3, [pc, #516]	; (80014b0 <HAL_RCC_OscConfig+0x2ac>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a80      	ldr	r2, [pc, #512]	; (80014b0 <HAL_RCC_OscConfig+0x2ac>)
 80012ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d013      	beq.n	80012e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012bc:	f7ff fcfe 	bl	8000cbc <HAL_GetTick>
 80012c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012c2:	e008      	b.n	80012d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012c4:	f7ff fcfa 	bl	8000cbc <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b64      	cmp	r3, #100	; 0x64
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e204      	b.n	80016e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012d6:	4b76      	ldr	r3, [pc, #472]	; (80014b0 <HAL_RCC_OscConfig+0x2ac>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d0f0      	beq.n	80012c4 <HAL_RCC_OscConfig+0xc0>
 80012e2:	e014      	b.n	800130e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e4:	f7ff fcea 	bl	8000cbc <HAL_GetTick>
 80012e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ea:	e008      	b.n	80012fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012ec:	f7ff fce6 	bl	8000cbc <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b64      	cmp	r3, #100	; 0x64
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e1f0      	b.n	80016e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012fe:	4b6c      	ldr	r3, [pc, #432]	; (80014b0 <HAL_RCC_OscConfig+0x2ac>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d1f0      	bne.n	80012ec <HAL_RCC_OscConfig+0xe8>
 800130a:	e000      	b.n	800130e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800130c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	2b00      	cmp	r3, #0
 8001318:	d063      	beq.n	80013e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800131a:	4b65      	ldr	r3, [pc, #404]	; (80014b0 <HAL_RCC_OscConfig+0x2ac>)
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	f003 030c 	and.w	r3, r3, #12
 8001322:	2b00      	cmp	r3, #0
 8001324:	d00b      	beq.n	800133e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001326:	4b62      	ldr	r3, [pc, #392]	; (80014b0 <HAL_RCC_OscConfig+0x2ac>)
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800132e:	2b08      	cmp	r3, #8
 8001330:	d11c      	bne.n	800136c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001332:	4b5f      	ldr	r3, [pc, #380]	; (80014b0 <HAL_RCC_OscConfig+0x2ac>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d116      	bne.n	800136c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800133e:	4b5c      	ldr	r3, [pc, #368]	; (80014b0 <HAL_RCC_OscConfig+0x2ac>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	2b00      	cmp	r3, #0
 8001348:	d005      	beq.n	8001356 <HAL_RCC_OscConfig+0x152>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	68db      	ldr	r3, [r3, #12]
 800134e:	2b01      	cmp	r3, #1
 8001350:	d001      	beq.n	8001356 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e1c4      	b.n	80016e0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001356:	4b56      	ldr	r3, [pc, #344]	; (80014b0 <HAL_RCC_OscConfig+0x2ac>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	691b      	ldr	r3, [r3, #16]
 8001362:	00db      	lsls	r3, r3, #3
 8001364:	4952      	ldr	r1, [pc, #328]	; (80014b0 <HAL_RCC_OscConfig+0x2ac>)
 8001366:	4313      	orrs	r3, r2
 8001368:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800136a:	e03a      	b.n	80013e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d020      	beq.n	80013b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001374:	4b4f      	ldr	r3, [pc, #316]	; (80014b4 <HAL_RCC_OscConfig+0x2b0>)
 8001376:	2201      	movs	r2, #1
 8001378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800137a:	f7ff fc9f 	bl	8000cbc <HAL_GetTick>
 800137e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001380:	e008      	b.n	8001394 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001382:	f7ff fc9b 	bl	8000cbc <HAL_GetTick>
 8001386:	4602      	mov	r2, r0
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	2b02      	cmp	r3, #2
 800138e:	d901      	bls.n	8001394 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001390:	2303      	movs	r3, #3
 8001392:	e1a5      	b.n	80016e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001394:	4b46      	ldr	r3, [pc, #280]	; (80014b0 <HAL_RCC_OscConfig+0x2ac>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 0302 	and.w	r3, r3, #2
 800139c:	2b00      	cmp	r3, #0
 800139e:	d0f0      	beq.n	8001382 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a0:	4b43      	ldr	r3, [pc, #268]	; (80014b0 <HAL_RCC_OscConfig+0x2ac>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	691b      	ldr	r3, [r3, #16]
 80013ac:	00db      	lsls	r3, r3, #3
 80013ae:	4940      	ldr	r1, [pc, #256]	; (80014b0 <HAL_RCC_OscConfig+0x2ac>)
 80013b0:	4313      	orrs	r3, r2
 80013b2:	600b      	str	r3, [r1, #0]
 80013b4:	e015      	b.n	80013e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013b6:	4b3f      	ldr	r3, [pc, #252]	; (80014b4 <HAL_RCC_OscConfig+0x2b0>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013bc:	f7ff fc7e 	bl	8000cbc <HAL_GetTick>
 80013c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013c2:	e008      	b.n	80013d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013c4:	f7ff fc7a 	bl	8000cbc <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e184      	b.n	80016e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013d6:	4b36      	ldr	r3, [pc, #216]	; (80014b0 <HAL_RCC_OscConfig+0x2ac>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d1f0      	bne.n	80013c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0308 	and.w	r3, r3, #8
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d030      	beq.n	8001450 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	695b      	ldr	r3, [r3, #20]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d016      	beq.n	8001424 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013f6:	4b30      	ldr	r3, [pc, #192]	; (80014b8 <HAL_RCC_OscConfig+0x2b4>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013fc:	f7ff fc5e 	bl	8000cbc <HAL_GetTick>
 8001400:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001402:	e008      	b.n	8001416 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001404:	f7ff fc5a 	bl	8000cbc <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b02      	cmp	r3, #2
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e164      	b.n	80016e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001416:	4b26      	ldr	r3, [pc, #152]	; (80014b0 <HAL_RCC_OscConfig+0x2ac>)
 8001418:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800141a:	f003 0302 	and.w	r3, r3, #2
 800141e:	2b00      	cmp	r3, #0
 8001420:	d0f0      	beq.n	8001404 <HAL_RCC_OscConfig+0x200>
 8001422:	e015      	b.n	8001450 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001424:	4b24      	ldr	r3, [pc, #144]	; (80014b8 <HAL_RCC_OscConfig+0x2b4>)
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800142a:	f7ff fc47 	bl	8000cbc <HAL_GetTick>
 800142e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001430:	e008      	b.n	8001444 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001432:	f7ff fc43 	bl	8000cbc <HAL_GetTick>
 8001436:	4602      	mov	r2, r0
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	2b02      	cmp	r3, #2
 800143e:	d901      	bls.n	8001444 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e14d      	b.n	80016e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001444:	4b1a      	ldr	r3, [pc, #104]	; (80014b0 <HAL_RCC_OscConfig+0x2ac>)
 8001446:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001448:	f003 0302 	and.w	r3, r3, #2
 800144c:	2b00      	cmp	r3, #0
 800144e:	d1f0      	bne.n	8001432 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0304 	and.w	r3, r3, #4
 8001458:	2b00      	cmp	r3, #0
 800145a:	f000 80a0 	beq.w	800159e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800145e:	2300      	movs	r3, #0
 8001460:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001462:	4b13      	ldr	r3, [pc, #76]	; (80014b0 <HAL_RCC_OscConfig+0x2ac>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d10f      	bne.n	800148e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	60bb      	str	r3, [r7, #8]
 8001472:	4b0f      	ldr	r3, [pc, #60]	; (80014b0 <HAL_RCC_OscConfig+0x2ac>)
 8001474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001476:	4a0e      	ldr	r2, [pc, #56]	; (80014b0 <HAL_RCC_OscConfig+0x2ac>)
 8001478:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800147c:	6413      	str	r3, [r2, #64]	; 0x40
 800147e:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <HAL_RCC_OscConfig+0x2ac>)
 8001480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001486:	60bb      	str	r3, [r7, #8]
 8001488:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800148a:	2301      	movs	r3, #1
 800148c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800148e:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <HAL_RCC_OscConfig+0x2b8>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001496:	2b00      	cmp	r3, #0
 8001498:	d121      	bne.n	80014de <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800149a:	4b08      	ldr	r3, [pc, #32]	; (80014bc <HAL_RCC_OscConfig+0x2b8>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a07      	ldr	r2, [pc, #28]	; (80014bc <HAL_RCC_OscConfig+0x2b8>)
 80014a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014a6:	f7ff fc09 	bl	8000cbc <HAL_GetTick>
 80014aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ac:	e011      	b.n	80014d2 <HAL_RCC_OscConfig+0x2ce>
 80014ae:	bf00      	nop
 80014b0:	40023800 	.word	0x40023800
 80014b4:	42470000 	.word	0x42470000
 80014b8:	42470e80 	.word	0x42470e80
 80014bc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014c0:	f7ff fbfc 	bl	8000cbc <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e106      	b.n	80016e0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d2:	4b85      	ldr	r3, [pc, #532]	; (80016e8 <HAL_RCC_OscConfig+0x4e4>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d0f0      	beq.n	80014c0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d106      	bne.n	80014f4 <HAL_RCC_OscConfig+0x2f0>
 80014e6:	4b81      	ldr	r3, [pc, #516]	; (80016ec <HAL_RCC_OscConfig+0x4e8>)
 80014e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ea:	4a80      	ldr	r2, [pc, #512]	; (80016ec <HAL_RCC_OscConfig+0x4e8>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	6713      	str	r3, [r2, #112]	; 0x70
 80014f2:	e01c      	b.n	800152e <HAL_RCC_OscConfig+0x32a>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	2b05      	cmp	r3, #5
 80014fa:	d10c      	bne.n	8001516 <HAL_RCC_OscConfig+0x312>
 80014fc:	4b7b      	ldr	r3, [pc, #492]	; (80016ec <HAL_RCC_OscConfig+0x4e8>)
 80014fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001500:	4a7a      	ldr	r2, [pc, #488]	; (80016ec <HAL_RCC_OscConfig+0x4e8>)
 8001502:	f043 0304 	orr.w	r3, r3, #4
 8001506:	6713      	str	r3, [r2, #112]	; 0x70
 8001508:	4b78      	ldr	r3, [pc, #480]	; (80016ec <HAL_RCC_OscConfig+0x4e8>)
 800150a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800150c:	4a77      	ldr	r2, [pc, #476]	; (80016ec <HAL_RCC_OscConfig+0x4e8>)
 800150e:	f043 0301 	orr.w	r3, r3, #1
 8001512:	6713      	str	r3, [r2, #112]	; 0x70
 8001514:	e00b      	b.n	800152e <HAL_RCC_OscConfig+0x32a>
 8001516:	4b75      	ldr	r3, [pc, #468]	; (80016ec <HAL_RCC_OscConfig+0x4e8>)
 8001518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800151a:	4a74      	ldr	r2, [pc, #464]	; (80016ec <HAL_RCC_OscConfig+0x4e8>)
 800151c:	f023 0301 	bic.w	r3, r3, #1
 8001520:	6713      	str	r3, [r2, #112]	; 0x70
 8001522:	4b72      	ldr	r3, [pc, #456]	; (80016ec <HAL_RCC_OscConfig+0x4e8>)
 8001524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001526:	4a71      	ldr	r2, [pc, #452]	; (80016ec <HAL_RCC_OscConfig+0x4e8>)
 8001528:	f023 0304 	bic.w	r3, r3, #4
 800152c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d015      	beq.n	8001562 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001536:	f7ff fbc1 	bl	8000cbc <HAL_GetTick>
 800153a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800153c:	e00a      	b.n	8001554 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800153e:	f7ff fbbd 	bl	8000cbc <HAL_GetTick>
 8001542:	4602      	mov	r2, r0
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	f241 3288 	movw	r2, #5000	; 0x1388
 800154c:	4293      	cmp	r3, r2
 800154e:	d901      	bls.n	8001554 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	e0c5      	b.n	80016e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001554:	4b65      	ldr	r3, [pc, #404]	; (80016ec <HAL_RCC_OscConfig+0x4e8>)
 8001556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001558:	f003 0302 	and.w	r3, r3, #2
 800155c:	2b00      	cmp	r3, #0
 800155e:	d0ee      	beq.n	800153e <HAL_RCC_OscConfig+0x33a>
 8001560:	e014      	b.n	800158c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001562:	f7ff fbab 	bl	8000cbc <HAL_GetTick>
 8001566:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001568:	e00a      	b.n	8001580 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800156a:	f7ff fba7 	bl	8000cbc <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	f241 3288 	movw	r2, #5000	; 0x1388
 8001578:	4293      	cmp	r3, r2
 800157a:	d901      	bls.n	8001580 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e0af      	b.n	80016e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001580:	4b5a      	ldr	r3, [pc, #360]	; (80016ec <HAL_RCC_OscConfig+0x4e8>)
 8001582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001584:	f003 0302 	and.w	r3, r3, #2
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1ee      	bne.n	800156a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800158c:	7dfb      	ldrb	r3, [r7, #23]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d105      	bne.n	800159e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001592:	4b56      	ldr	r3, [pc, #344]	; (80016ec <HAL_RCC_OscConfig+0x4e8>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	4a55      	ldr	r2, [pc, #340]	; (80016ec <HAL_RCC_OscConfig+0x4e8>)
 8001598:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800159c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	699b      	ldr	r3, [r3, #24]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 809b 	beq.w	80016de <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015a8:	4b50      	ldr	r3, [pc, #320]	; (80016ec <HAL_RCC_OscConfig+0x4e8>)
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	f003 030c 	and.w	r3, r3, #12
 80015b0:	2b08      	cmp	r3, #8
 80015b2:	d05c      	beq.n	800166e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d141      	bne.n	8001640 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015bc:	4b4c      	ldr	r3, [pc, #304]	; (80016f0 <HAL_RCC_OscConfig+0x4ec>)
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c2:	f7ff fb7b 	bl	8000cbc <HAL_GetTick>
 80015c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015c8:	e008      	b.n	80015dc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015ca:	f7ff fb77 	bl	8000cbc <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e081      	b.n	80016e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015dc:	4b43      	ldr	r3, [pc, #268]	; (80016ec <HAL_RCC_OscConfig+0x4e8>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d1f0      	bne.n	80015ca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	69da      	ldr	r2, [r3, #28]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a1b      	ldr	r3, [r3, #32]
 80015f0:	431a      	orrs	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f6:	019b      	lsls	r3, r3, #6
 80015f8:	431a      	orrs	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fe:	085b      	lsrs	r3, r3, #1
 8001600:	3b01      	subs	r3, #1
 8001602:	041b      	lsls	r3, r3, #16
 8001604:	431a      	orrs	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800160a:	061b      	lsls	r3, r3, #24
 800160c:	4937      	ldr	r1, [pc, #220]	; (80016ec <HAL_RCC_OscConfig+0x4e8>)
 800160e:	4313      	orrs	r3, r2
 8001610:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001612:	4b37      	ldr	r3, [pc, #220]	; (80016f0 <HAL_RCC_OscConfig+0x4ec>)
 8001614:	2201      	movs	r2, #1
 8001616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001618:	f7ff fb50 	bl	8000cbc <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001620:	f7ff fb4c 	bl	8000cbc <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e056      	b.n	80016e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001632:	4b2e      	ldr	r3, [pc, #184]	; (80016ec <HAL_RCC_OscConfig+0x4e8>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d0f0      	beq.n	8001620 <HAL_RCC_OscConfig+0x41c>
 800163e:	e04e      	b.n	80016de <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001640:	4b2b      	ldr	r3, [pc, #172]	; (80016f0 <HAL_RCC_OscConfig+0x4ec>)
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001646:	f7ff fb39 	bl	8000cbc <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800164c:	e008      	b.n	8001660 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800164e:	f7ff fb35 	bl	8000cbc <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e03f      	b.n	80016e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001660:	4b22      	ldr	r3, [pc, #136]	; (80016ec <HAL_RCC_OscConfig+0x4e8>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d1f0      	bne.n	800164e <HAL_RCC_OscConfig+0x44a>
 800166c:	e037      	b.n	80016de <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	699b      	ldr	r3, [r3, #24]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d101      	bne.n	800167a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e032      	b.n	80016e0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800167a:	4b1c      	ldr	r3, [pc, #112]	; (80016ec <HAL_RCC_OscConfig+0x4e8>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d028      	beq.n	80016da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001692:	429a      	cmp	r2, r3
 8001694:	d121      	bne.n	80016da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d11a      	bne.n	80016da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016a4:	68fa      	ldr	r2, [r7, #12]
 80016a6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016aa:	4013      	ands	r3, r2
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016b0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d111      	bne.n	80016da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c0:	085b      	lsrs	r3, r3, #1
 80016c2:	3b01      	subs	r3, #1
 80016c4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d107      	bne.n	80016da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d001      	beq.n	80016de <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e000      	b.n	80016e0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80016de:	2300      	movs	r3, #0
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3718      	adds	r7, #24
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40007000 	.word	0x40007000
 80016ec:	40023800 	.word	0x40023800
 80016f0:	42470060 	.word	0x42470060

080016f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d101      	bne.n	8001708 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e0cc      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001708:	4b68      	ldr	r3, [pc, #416]	; (80018ac <HAL_RCC_ClockConfig+0x1b8>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0307 	and.w	r3, r3, #7
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	429a      	cmp	r2, r3
 8001714:	d90c      	bls.n	8001730 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001716:	4b65      	ldr	r3, [pc, #404]	; (80018ac <HAL_RCC_ClockConfig+0x1b8>)
 8001718:	683a      	ldr	r2, [r7, #0]
 800171a:	b2d2      	uxtb	r2, r2
 800171c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800171e:	4b63      	ldr	r3, [pc, #396]	; (80018ac <HAL_RCC_ClockConfig+0x1b8>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	683a      	ldr	r2, [r7, #0]
 8001728:	429a      	cmp	r2, r3
 800172a:	d001      	beq.n	8001730 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e0b8      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0302 	and.w	r3, r3, #2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d020      	beq.n	800177e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0304 	and.w	r3, r3, #4
 8001744:	2b00      	cmp	r3, #0
 8001746:	d005      	beq.n	8001754 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001748:	4b59      	ldr	r3, [pc, #356]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	4a58      	ldr	r2, [pc, #352]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 800174e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001752:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0308 	and.w	r3, r3, #8
 800175c:	2b00      	cmp	r3, #0
 800175e:	d005      	beq.n	800176c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001760:	4b53      	ldr	r3, [pc, #332]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	4a52      	ldr	r2, [pc, #328]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001766:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800176a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800176c:	4b50      	ldr	r3, [pc, #320]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	494d      	ldr	r1, [pc, #308]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 800177a:	4313      	orrs	r3, r2
 800177c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	2b00      	cmp	r3, #0
 8001788:	d044      	beq.n	8001814 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d107      	bne.n	80017a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001792:	4b47      	ldr	r3, [pc, #284]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d119      	bne.n	80017d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e07f      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d003      	beq.n	80017b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ae:	2b03      	cmp	r3, #3
 80017b0:	d107      	bne.n	80017c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017b2:	4b3f      	ldr	r3, [pc, #252]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d109      	bne.n	80017d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e06f      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c2:	4b3b      	ldr	r3, [pc, #236]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d101      	bne.n	80017d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e067      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017d2:	4b37      	ldr	r3, [pc, #220]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f023 0203 	bic.w	r2, r3, #3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	4934      	ldr	r1, [pc, #208]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 80017e0:	4313      	orrs	r3, r2
 80017e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017e4:	f7ff fa6a 	bl	8000cbc <HAL_GetTick>
 80017e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ea:	e00a      	b.n	8001802 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017ec:	f7ff fa66 	bl	8000cbc <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e04f      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001802:	4b2b      	ldr	r3, [pc, #172]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f003 020c 	and.w	r2, r3, #12
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	429a      	cmp	r2, r3
 8001812:	d1eb      	bne.n	80017ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001814:	4b25      	ldr	r3, [pc, #148]	; (80018ac <HAL_RCC_ClockConfig+0x1b8>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0307 	and.w	r3, r3, #7
 800181c:	683a      	ldr	r2, [r7, #0]
 800181e:	429a      	cmp	r2, r3
 8001820:	d20c      	bcs.n	800183c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001822:	4b22      	ldr	r3, [pc, #136]	; (80018ac <HAL_RCC_ClockConfig+0x1b8>)
 8001824:	683a      	ldr	r2, [r7, #0]
 8001826:	b2d2      	uxtb	r2, r2
 8001828:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800182a:	4b20      	ldr	r3, [pc, #128]	; (80018ac <HAL_RCC_ClockConfig+0x1b8>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	683a      	ldr	r2, [r7, #0]
 8001834:	429a      	cmp	r2, r3
 8001836:	d001      	beq.n	800183c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e032      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0304 	and.w	r3, r3, #4
 8001844:	2b00      	cmp	r3, #0
 8001846:	d008      	beq.n	800185a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001848:	4b19      	ldr	r3, [pc, #100]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	4916      	ldr	r1, [pc, #88]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001856:	4313      	orrs	r3, r2
 8001858:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0308 	and.w	r3, r3, #8
 8001862:	2b00      	cmp	r3, #0
 8001864:	d009      	beq.n	800187a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001866:	4b12      	ldr	r3, [pc, #72]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	691b      	ldr	r3, [r3, #16]
 8001872:	00db      	lsls	r3, r3, #3
 8001874:	490e      	ldr	r1, [pc, #56]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001876:	4313      	orrs	r3, r2
 8001878:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800187a:	f000 f821 	bl	80018c0 <HAL_RCC_GetSysClockFreq>
 800187e:	4602      	mov	r2, r0
 8001880:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	091b      	lsrs	r3, r3, #4
 8001886:	f003 030f 	and.w	r3, r3, #15
 800188a:	490a      	ldr	r1, [pc, #40]	; (80018b4 <HAL_RCC_ClockConfig+0x1c0>)
 800188c:	5ccb      	ldrb	r3, [r1, r3]
 800188e:	fa22 f303 	lsr.w	r3, r2, r3
 8001892:	4a09      	ldr	r2, [pc, #36]	; (80018b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001894:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001896:	4b09      	ldr	r3, [pc, #36]	; (80018bc <HAL_RCC_ClockConfig+0x1c8>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff f88c 	bl	80009b8 <HAL_InitTick>

  return HAL_OK;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40023c00 	.word	0x40023c00
 80018b0:	40023800 	.word	0x40023800
 80018b4:	08003d18 	.word	0x08003d18
 80018b8:	20000000 	.word	0x20000000
 80018bc:	20000004 	.word	0x20000004

080018c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018c4:	b084      	sub	sp, #16
 80018c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018c8:	2300      	movs	r3, #0
 80018ca:	607b      	str	r3, [r7, #4]
 80018cc:	2300      	movs	r3, #0
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	2300      	movs	r3, #0
 80018d2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80018d4:	2300      	movs	r3, #0
 80018d6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018d8:	4b67      	ldr	r3, [pc, #412]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f003 030c 	and.w	r3, r3, #12
 80018e0:	2b08      	cmp	r3, #8
 80018e2:	d00d      	beq.n	8001900 <HAL_RCC_GetSysClockFreq+0x40>
 80018e4:	2b08      	cmp	r3, #8
 80018e6:	f200 80bd 	bhi.w	8001a64 <HAL_RCC_GetSysClockFreq+0x1a4>
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d002      	beq.n	80018f4 <HAL_RCC_GetSysClockFreq+0x34>
 80018ee:	2b04      	cmp	r3, #4
 80018f0:	d003      	beq.n	80018fa <HAL_RCC_GetSysClockFreq+0x3a>
 80018f2:	e0b7      	b.n	8001a64 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018f4:	4b61      	ldr	r3, [pc, #388]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80018f6:	60bb      	str	r3, [r7, #8]
       break;
 80018f8:	e0b7      	b.n	8001a6a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018fa:	4b61      	ldr	r3, [pc, #388]	; (8001a80 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80018fc:	60bb      	str	r3, [r7, #8]
      break;
 80018fe:	e0b4      	b.n	8001a6a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001900:	4b5d      	ldr	r3, [pc, #372]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001908:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800190a:	4b5b      	ldr	r3, [pc, #364]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d04d      	beq.n	80019b2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001916:	4b58      	ldr	r3, [pc, #352]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	099b      	lsrs	r3, r3, #6
 800191c:	461a      	mov	r2, r3
 800191e:	f04f 0300 	mov.w	r3, #0
 8001922:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001926:	f04f 0100 	mov.w	r1, #0
 800192a:	ea02 0800 	and.w	r8, r2, r0
 800192e:	ea03 0901 	and.w	r9, r3, r1
 8001932:	4640      	mov	r0, r8
 8001934:	4649      	mov	r1, r9
 8001936:	f04f 0200 	mov.w	r2, #0
 800193a:	f04f 0300 	mov.w	r3, #0
 800193e:	014b      	lsls	r3, r1, #5
 8001940:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001944:	0142      	lsls	r2, r0, #5
 8001946:	4610      	mov	r0, r2
 8001948:	4619      	mov	r1, r3
 800194a:	ebb0 0008 	subs.w	r0, r0, r8
 800194e:	eb61 0109 	sbc.w	r1, r1, r9
 8001952:	f04f 0200 	mov.w	r2, #0
 8001956:	f04f 0300 	mov.w	r3, #0
 800195a:	018b      	lsls	r3, r1, #6
 800195c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001960:	0182      	lsls	r2, r0, #6
 8001962:	1a12      	subs	r2, r2, r0
 8001964:	eb63 0301 	sbc.w	r3, r3, r1
 8001968:	f04f 0000 	mov.w	r0, #0
 800196c:	f04f 0100 	mov.w	r1, #0
 8001970:	00d9      	lsls	r1, r3, #3
 8001972:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001976:	00d0      	lsls	r0, r2, #3
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	eb12 0208 	adds.w	r2, r2, r8
 8001980:	eb43 0309 	adc.w	r3, r3, r9
 8001984:	f04f 0000 	mov.w	r0, #0
 8001988:	f04f 0100 	mov.w	r1, #0
 800198c:	0259      	lsls	r1, r3, #9
 800198e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001992:	0250      	lsls	r0, r2, #9
 8001994:	4602      	mov	r2, r0
 8001996:	460b      	mov	r3, r1
 8001998:	4610      	mov	r0, r2
 800199a:	4619      	mov	r1, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	461a      	mov	r2, r3
 80019a0:	f04f 0300 	mov.w	r3, #0
 80019a4:	f7fe fc14 	bl	80001d0 <__aeabi_uldivmod>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	4613      	mov	r3, r2
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	e04a      	b.n	8001a48 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019b2:	4b31      	ldr	r3, [pc, #196]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	099b      	lsrs	r3, r3, #6
 80019b8:	461a      	mov	r2, r3
 80019ba:	f04f 0300 	mov.w	r3, #0
 80019be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80019c2:	f04f 0100 	mov.w	r1, #0
 80019c6:	ea02 0400 	and.w	r4, r2, r0
 80019ca:	ea03 0501 	and.w	r5, r3, r1
 80019ce:	4620      	mov	r0, r4
 80019d0:	4629      	mov	r1, r5
 80019d2:	f04f 0200 	mov.w	r2, #0
 80019d6:	f04f 0300 	mov.w	r3, #0
 80019da:	014b      	lsls	r3, r1, #5
 80019dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80019e0:	0142      	lsls	r2, r0, #5
 80019e2:	4610      	mov	r0, r2
 80019e4:	4619      	mov	r1, r3
 80019e6:	1b00      	subs	r0, r0, r4
 80019e8:	eb61 0105 	sbc.w	r1, r1, r5
 80019ec:	f04f 0200 	mov.w	r2, #0
 80019f0:	f04f 0300 	mov.w	r3, #0
 80019f4:	018b      	lsls	r3, r1, #6
 80019f6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80019fa:	0182      	lsls	r2, r0, #6
 80019fc:	1a12      	subs	r2, r2, r0
 80019fe:	eb63 0301 	sbc.w	r3, r3, r1
 8001a02:	f04f 0000 	mov.w	r0, #0
 8001a06:	f04f 0100 	mov.w	r1, #0
 8001a0a:	00d9      	lsls	r1, r3, #3
 8001a0c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a10:	00d0      	lsls	r0, r2, #3
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	1912      	adds	r2, r2, r4
 8001a18:	eb45 0303 	adc.w	r3, r5, r3
 8001a1c:	f04f 0000 	mov.w	r0, #0
 8001a20:	f04f 0100 	mov.w	r1, #0
 8001a24:	0299      	lsls	r1, r3, #10
 8001a26:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001a2a:	0290      	lsls	r0, r2, #10
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	460b      	mov	r3, r1
 8001a30:	4610      	mov	r0, r2
 8001a32:	4619      	mov	r1, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	461a      	mov	r2, r3
 8001a38:	f04f 0300 	mov.w	r3, #0
 8001a3c:	f7fe fbc8 	bl	80001d0 <__aeabi_uldivmod>
 8001a40:	4602      	mov	r2, r0
 8001a42:	460b      	mov	r3, r1
 8001a44:	4613      	mov	r3, r2
 8001a46:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a48:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	0c1b      	lsrs	r3, r3, #16
 8001a4e:	f003 0303 	and.w	r3, r3, #3
 8001a52:	3301      	adds	r3, #1
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001a58:	68fa      	ldr	r2, [r7, #12]
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a60:	60bb      	str	r3, [r7, #8]
      break;
 8001a62:	e002      	b.n	8001a6a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a64:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001a66:	60bb      	str	r3, [r7, #8]
      break;
 8001a68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a6a:	68bb      	ldr	r3, [r7, #8]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a76:	bf00      	nop
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	00f42400 	.word	0x00f42400
 8001a80:	007a1200 	.word	0x007a1200

08001a84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a88:	4b03      	ldr	r3, [pc, #12]	; (8001a98 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	20000000 	.word	0x20000000

08001a9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001aa0:	f7ff fff0 	bl	8001a84 <HAL_RCC_GetHCLKFreq>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	4b05      	ldr	r3, [pc, #20]	; (8001abc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	0a9b      	lsrs	r3, r3, #10
 8001aac:	f003 0307 	and.w	r3, r3, #7
 8001ab0:	4903      	ldr	r1, [pc, #12]	; (8001ac0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ab2:	5ccb      	ldrb	r3, [r1, r3]
 8001ab4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	08003d28 	.word	0x08003d28

08001ac4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	220f      	movs	r2, #15
 8001ad2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ad4:	4b12      	ldr	r3, [pc, #72]	; (8001b20 <HAL_RCC_GetClockConfig+0x5c>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f003 0203 	and.w	r2, r3, #3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ae0:	4b0f      	ldr	r3, [pc, #60]	; (8001b20 <HAL_RCC_GetClockConfig+0x5c>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001aec:	4b0c      	ldr	r3, [pc, #48]	; (8001b20 <HAL_RCC_GetClockConfig+0x5c>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001af8:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <HAL_RCC_GetClockConfig+0x5c>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	08db      	lsrs	r3, r3, #3
 8001afe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b06:	4b07      	ldr	r3, [pc, #28]	; (8001b24 <HAL_RCC_GetClockConfig+0x60>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0207 	and.w	r2, r3, #7
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	601a      	str	r2, [r3, #0]
}
 8001b12:	bf00      	nop
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	40023800 	.word	0x40023800
 8001b24:	40023c00 	.word	0x40023c00

08001b28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d101      	bne.n	8001b3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e041      	b.n	8001bbe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d106      	bne.n	8001b54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f000 f839 	bl	8001bc6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2202      	movs	r2, #2
 8001b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	3304      	adds	r3, #4
 8001b64:	4619      	mov	r1, r3
 8001b66:	4610      	mov	r0, r2
 8001b68:	f000 f9d8 	bl	8001f1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	b083      	sub	sp, #12
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
	...

08001bdc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d001      	beq.n	8001bf4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e04e      	b.n	8001c92 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2202      	movs	r2, #2
 8001bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	68da      	ldr	r2, [r3, #12]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f042 0201 	orr.w	r2, r2, #1
 8001c0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a23      	ldr	r2, [pc, #140]	; (8001ca0 <HAL_TIM_Base_Start_IT+0xc4>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d022      	beq.n	8001c5c <HAL_TIM_Base_Start_IT+0x80>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c1e:	d01d      	beq.n	8001c5c <HAL_TIM_Base_Start_IT+0x80>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a1f      	ldr	r2, [pc, #124]	; (8001ca4 <HAL_TIM_Base_Start_IT+0xc8>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d018      	beq.n	8001c5c <HAL_TIM_Base_Start_IT+0x80>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a1e      	ldr	r2, [pc, #120]	; (8001ca8 <HAL_TIM_Base_Start_IT+0xcc>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d013      	beq.n	8001c5c <HAL_TIM_Base_Start_IT+0x80>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a1c      	ldr	r2, [pc, #112]	; (8001cac <HAL_TIM_Base_Start_IT+0xd0>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d00e      	beq.n	8001c5c <HAL_TIM_Base_Start_IT+0x80>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a1b      	ldr	r2, [pc, #108]	; (8001cb0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d009      	beq.n	8001c5c <HAL_TIM_Base_Start_IT+0x80>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a19      	ldr	r2, [pc, #100]	; (8001cb4 <HAL_TIM_Base_Start_IT+0xd8>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d004      	beq.n	8001c5c <HAL_TIM_Base_Start_IT+0x80>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a18      	ldr	r2, [pc, #96]	; (8001cb8 <HAL_TIM_Base_Start_IT+0xdc>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d111      	bne.n	8001c80 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2b06      	cmp	r3, #6
 8001c6c:	d010      	beq.n	8001c90 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f042 0201 	orr.w	r2, r2, #1
 8001c7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c7e:	e007      	b.n	8001c90 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f042 0201 	orr.w	r2, r2, #1
 8001c8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3714      	adds	r7, #20
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	40010000 	.word	0x40010000
 8001ca4:	40000400 	.word	0x40000400
 8001ca8:	40000800 	.word	0x40000800
 8001cac:	40000c00 	.word	0x40000c00
 8001cb0:	40010400 	.word	0x40010400
 8001cb4:	40014000 	.word	0x40014000
 8001cb8:	40001800 	.word	0x40001800

08001cbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d122      	bne.n	8001d18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d11b      	bne.n	8001d18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f06f 0202 	mvn.w	r2, #2
 8001ce8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2201      	movs	r2, #1
 8001cee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	f003 0303 	and.w	r3, r3, #3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 f8ee 	bl	8001ee0 <HAL_TIM_IC_CaptureCallback>
 8001d04:	e005      	b.n	8001d12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 f8e0 	bl	8001ecc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 f8f1 	bl	8001ef4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	f003 0304 	and.w	r3, r3, #4
 8001d22:	2b04      	cmp	r3, #4
 8001d24:	d122      	bne.n	8001d6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	f003 0304 	and.w	r3, r3, #4
 8001d30:	2b04      	cmp	r3, #4
 8001d32:	d11b      	bne.n	8001d6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f06f 0204 	mvn.w	r2, #4
 8001d3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2202      	movs	r2, #2
 8001d42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	699b      	ldr	r3, [r3, #24]
 8001d4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d003      	beq.n	8001d5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 f8c4 	bl	8001ee0 <HAL_TIM_IC_CaptureCallback>
 8001d58:	e005      	b.n	8001d66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 f8b6 	bl	8001ecc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f000 f8c7 	bl	8001ef4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	f003 0308 	and.w	r3, r3, #8
 8001d76:	2b08      	cmp	r3, #8
 8001d78:	d122      	bne.n	8001dc0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	f003 0308 	and.w	r3, r3, #8
 8001d84:	2b08      	cmp	r3, #8
 8001d86:	d11b      	bne.n	8001dc0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f06f 0208 	mvn.w	r2, #8
 8001d90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2204      	movs	r2, #4
 8001d96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	69db      	ldr	r3, [r3, #28]
 8001d9e:	f003 0303 	and.w	r3, r3, #3
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 f89a 	bl	8001ee0 <HAL_TIM_IC_CaptureCallback>
 8001dac:	e005      	b.n	8001dba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 f88c 	bl	8001ecc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f000 f89d 	bl	8001ef4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	f003 0310 	and.w	r3, r3, #16
 8001dca:	2b10      	cmp	r3, #16
 8001dcc:	d122      	bne.n	8001e14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	f003 0310 	and.w	r3, r3, #16
 8001dd8:	2b10      	cmp	r3, #16
 8001dda:	d11b      	bne.n	8001e14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f06f 0210 	mvn.w	r2, #16
 8001de4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2208      	movs	r2, #8
 8001dea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	69db      	ldr	r3, [r3, #28]
 8001df2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f000 f870 	bl	8001ee0 <HAL_TIM_IC_CaptureCallback>
 8001e00:	e005      	b.n	8001e0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 f862 	bl	8001ecc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f000 f873 	bl	8001ef4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	691b      	ldr	r3, [r3, #16]
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d10e      	bne.n	8001e40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	f003 0301 	and.w	r3, r3, #1
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d107      	bne.n	8001e40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f06f 0201 	mvn.w	r2, #1
 8001e38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f7fe fd7c 	bl	8000938 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e4a:	2b80      	cmp	r3, #128	; 0x80
 8001e4c:	d10e      	bne.n	8001e6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e58:	2b80      	cmp	r3, #128	; 0x80
 8001e5a:	d107      	bne.n	8001e6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 f902 	bl	8002070 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e76:	2b40      	cmp	r3, #64	; 0x40
 8001e78:	d10e      	bne.n	8001e98 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e84:	2b40      	cmp	r3, #64	; 0x40
 8001e86:	d107      	bne.n	8001e98 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 f838 	bl	8001f08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	f003 0320 	and.w	r3, r3, #32
 8001ea2:	2b20      	cmp	r3, #32
 8001ea4:	d10e      	bne.n	8001ec4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	f003 0320 	and.w	r3, r3, #32
 8001eb0:	2b20      	cmp	r3, #32
 8001eb2:	d107      	bne.n	8001ec4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f06f 0220 	mvn.w	r2, #32
 8001ebc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 f8cc 	bl	800205c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ec4:	bf00      	nop
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a40      	ldr	r2, [pc, #256]	; (8002030 <TIM_Base_SetConfig+0x114>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d013      	beq.n	8001f5c <TIM_Base_SetConfig+0x40>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f3a:	d00f      	beq.n	8001f5c <TIM_Base_SetConfig+0x40>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4a3d      	ldr	r2, [pc, #244]	; (8002034 <TIM_Base_SetConfig+0x118>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d00b      	beq.n	8001f5c <TIM_Base_SetConfig+0x40>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4a3c      	ldr	r2, [pc, #240]	; (8002038 <TIM_Base_SetConfig+0x11c>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d007      	beq.n	8001f5c <TIM_Base_SetConfig+0x40>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4a3b      	ldr	r2, [pc, #236]	; (800203c <TIM_Base_SetConfig+0x120>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d003      	beq.n	8001f5c <TIM_Base_SetConfig+0x40>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a3a      	ldr	r2, [pc, #232]	; (8002040 <TIM_Base_SetConfig+0x124>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d108      	bne.n	8001f6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a2f      	ldr	r2, [pc, #188]	; (8002030 <TIM_Base_SetConfig+0x114>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d02b      	beq.n	8001fce <TIM_Base_SetConfig+0xb2>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f7c:	d027      	beq.n	8001fce <TIM_Base_SetConfig+0xb2>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a2c      	ldr	r2, [pc, #176]	; (8002034 <TIM_Base_SetConfig+0x118>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d023      	beq.n	8001fce <TIM_Base_SetConfig+0xb2>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a2b      	ldr	r2, [pc, #172]	; (8002038 <TIM_Base_SetConfig+0x11c>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d01f      	beq.n	8001fce <TIM_Base_SetConfig+0xb2>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a2a      	ldr	r2, [pc, #168]	; (800203c <TIM_Base_SetConfig+0x120>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d01b      	beq.n	8001fce <TIM_Base_SetConfig+0xb2>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a29      	ldr	r2, [pc, #164]	; (8002040 <TIM_Base_SetConfig+0x124>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d017      	beq.n	8001fce <TIM_Base_SetConfig+0xb2>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a28      	ldr	r2, [pc, #160]	; (8002044 <TIM_Base_SetConfig+0x128>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d013      	beq.n	8001fce <TIM_Base_SetConfig+0xb2>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a27      	ldr	r2, [pc, #156]	; (8002048 <TIM_Base_SetConfig+0x12c>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d00f      	beq.n	8001fce <TIM_Base_SetConfig+0xb2>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a26      	ldr	r2, [pc, #152]	; (800204c <TIM_Base_SetConfig+0x130>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d00b      	beq.n	8001fce <TIM_Base_SetConfig+0xb2>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a25      	ldr	r2, [pc, #148]	; (8002050 <TIM_Base_SetConfig+0x134>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d007      	beq.n	8001fce <TIM_Base_SetConfig+0xb2>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a24      	ldr	r2, [pc, #144]	; (8002054 <TIM_Base_SetConfig+0x138>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d003      	beq.n	8001fce <TIM_Base_SetConfig+0xb2>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a23      	ldr	r2, [pc, #140]	; (8002058 <TIM_Base_SetConfig+0x13c>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d108      	bne.n	8001fe0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	68fa      	ldr	r2, [r7, #12]
 8001ff2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	689a      	ldr	r2, [r3, #8]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a0a      	ldr	r2, [pc, #40]	; (8002030 <TIM_Base_SetConfig+0x114>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d003      	beq.n	8002014 <TIM_Base_SetConfig+0xf8>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a0c      	ldr	r2, [pc, #48]	; (8002040 <TIM_Base_SetConfig+0x124>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d103      	bne.n	800201c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	691a      	ldr	r2, [r3, #16]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	615a      	str	r2, [r3, #20]
}
 8002022:	bf00      	nop
 8002024:	3714      	adds	r7, #20
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	40010000 	.word	0x40010000
 8002034:	40000400 	.word	0x40000400
 8002038:	40000800 	.word	0x40000800
 800203c:	40000c00 	.word	0x40000c00
 8002040:	40010400 	.word	0x40010400
 8002044:	40014000 	.word	0x40014000
 8002048:	40014400 	.word	0x40014400
 800204c:	40014800 	.word	0x40014800
 8002050:	40001800 	.word	0x40001800
 8002054:	40001c00 	.word	0x40001c00
 8002058:	40002000 	.word	0x40002000

0800205c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f103 0208 	add.w	r2, r3, #8
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f04f 32ff 	mov.w	r2, #4294967295
 800209c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f103 0208 	add.w	r2, r3, #8
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f103 0208 	add.w	r2, r3, #8
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80020d2:	bf00      	nop
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr

080020de <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80020de:	b480      	push	{r7}
 80020e0:	b085      	sub	sp, #20
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	6892      	ldr	r2, [r2, #8]
 80020f4:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	6852      	ldr	r2, [r2, #4]
 80020fe:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	429a      	cmp	r2, r3
 8002108:	d103      	bne.n	8002112 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	689a      	ldr	r2, [r3, #8]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	1e5a      	subs	r2, r3, #1
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
}
 8002126:	4618      	mov	r0, r3
 8002128:	3714      	adds	r7, #20
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr

08002132 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002132:	b580      	push	{r7, lr}
 8002134:	b08c      	sub	sp, #48	; 0x30
 8002136:	af04      	add	r7, sp, #16
 8002138:	60f8      	str	r0, [r7, #12]
 800213a:	60b9      	str	r1, [r7, #8]
 800213c:	603b      	str	r3, [r7, #0]
 800213e:	4613      	mov	r3, r2
 8002140:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002142:	88fb      	ldrh	r3, [r7, #6]
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4618      	mov	r0, r3
 8002148:	f000 feb8 	bl	8002ebc <pvPortMalloc>
 800214c:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d00e      	beq.n	8002172 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002154:	2058      	movs	r0, #88	; 0x58
 8002156:	f000 feb1 	bl	8002ebc <pvPortMalloc>
 800215a:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d003      	beq.n	800216a <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	697a      	ldr	r2, [r7, #20]
 8002166:	631a      	str	r2, [r3, #48]	; 0x30
 8002168:	e005      	b.n	8002176 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 800216a:	6978      	ldr	r0, [r7, #20]
 800216c:	f000 ff86 	bl	800307c <vPortFree>
 8002170:	e001      	b.n	8002176 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002172:	2300      	movs	r3, #0
 8002174:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d013      	beq.n	80021a4 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800217c:	88fa      	ldrh	r2, [r7, #6]
 800217e:	2300      	movs	r3, #0
 8002180:	9303      	str	r3, [sp, #12]
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	9302      	str	r3, [sp, #8]
 8002186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002188:	9301      	str	r3, [sp, #4]
 800218a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800218c:	9300      	str	r3, [sp, #0]
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	68b9      	ldr	r1, [r7, #8]
 8002192:	68f8      	ldr	r0, [r7, #12]
 8002194:	f000 f80e 	bl	80021b4 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002198:	69f8      	ldr	r0, [r7, #28]
 800219a:	f000 f8af 	bl	80022fc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800219e:	2301      	movs	r3, #1
 80021a0:	61bb      	str	r3, [r7, #24]
 80021a2:	e002      	b.n	80021aa <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80021a4:	f04f 33ff 	mov.w	r3, #4294967295
 80021a8:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80021aa:	69bb      	ldr	r3, [r7, #24]
    }
 80021ac:	4618      	mov	r0, r3
 80021ae:	3720      	adds	r7, #32
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b088      	sub	sp, #32
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
 80021c0:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80021c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021c4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	461a      	mov	r2, r3
 80021cc:	21a5      	movs	r1, #165	; 0xa5
 80021ce:	f001 f897 	bl	8003300 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80021d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80021dc:	3b01      	subs	r3, #1
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	4413      	add	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	f023 0307 	bic.w	r3, r3, #7
 80021ea:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	f003 0307 	and.w	r3, r3, #7
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d00a      	beq.n	800220c <prvInitialiseNewTask+0x58>
        __asm volatile
 80021f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021fa:	f383 8811 	msr	BASEPRI, r3
 80021fe:	f3bf 8f6f 	isb	sy
 8002202:	f3bf 8f4f 	dsb	sy
 8002206:	617b      	str	r3, [r7, #20]
    }
 8002208:	bf00      	nop
 800220a:	e7fe      	b.n	800220a <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d01f      	beq.n	8002252 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002212:	2300      	movs	r3, #0
 8002214:	61fb      	str	r3, [r7, #28]
 8002216:	e012      	b.n	800223e <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002218:	68ba      	ldr	r2, [r7, #8]
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	4413      	add	r3, r2
 800221e:	7819      	ldrb	r1, [r3, #0]
 8002220:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	4413      	add	r3, r2
 8002226:	3334      	adds	r3, #52	; 0x34
 8002228:	460a      	mov	r2, r1
 800222a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800222c:	68ba      	ldr	r2, [r7, #8]
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	4413      	add	r3, r2
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d006      	beq.n	8002246 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	3301      	adds	r3, #1
 800223c:	61fb      	str	r3, [r7, #28]
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	2b09      	cmp	r3, #9
 8002242:	d9e9      	bls.n	8002218 <prvInitialiseNewTask+0x64>
 8002244:	e000      	b.n	8002248 <prvInitialiseNewTask+0x94>
            {
                break;
 8002246:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800224a:	2200      	movs	r2, #0
 800224c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002250:	e003      	b.n	800225a <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002254:	2200      	movs	r2, #0
 8002256:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800225a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800225c:	2b04      	cmp	r3, #4
 800225e:	d90a      	bls.n	8002276 <prvInitialiseNewTask+0xc2>
        __asm volatile
 8002260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002264:	f383 8811 	msr	BASEPRI, r3
 8002268:	f3bf 8f6f 	isb	sy
 800226c:	f3bf 8f4f 	dsb	sy
 8002270:	613b      	str	r3, [r7, #16]
    }
 8002272:	bf00      	nop
 8002274:	e7fe      	b.n	8002274 <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002278:	2b04      	cmp	r3, #4
 800227a:	d901      	bls.n	8002280 <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800227c:	2304      	movs	r3, #4
 800227e:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002282:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002284:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002288:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800228a:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800228c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800228e:	2200      	movs	r2, #0
 8002290:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002294:	3304      	adds	r3, #4
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff ff14 	bl	80020c4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800229c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800229e:	3318      	adds	r3, #24
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff ff0f 	bl	80020c4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80022a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022aa:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ae:	f1c3 0205 	rsb	r2, r3, #5
 80022b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b4:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80022b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022ba:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80022bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022be:	3350      	adds	r3, #80	; 0x50
 80022c0:	2204      	movs	r2, #4
 80022c2:	2100      	movs	r1, #0
 80022c4:	4618      	mov	r0, r3
 80022c6:	f001 f81b 	bl	8003300 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80022ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022cc:	3354      	adds	r3, #84	; 0x54
 80022ce:	2201      	movs	r2, #1
 80022d0:	2100      	movs	r1, #0
 80022d2:	4618      	mov	r0, r3
 80022d4:	f001 f814 	bl	8003300 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	68f9      	ldr	r1, [r7, #12]
 80022dc:	69b8      	ldr	r0, [r7, #24]
 80022de:	f000 fbd9 	bl	8002a94 <pxPortInitialiseStack>
 80022e2:	4602      	mov	r2, r0
 80022e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022e6:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80022e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d002      	beq.n	80022f4 <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80022ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022f2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80022f4:	bf00      	nop
 80022f6:	3720      	adds	r7, #32
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002304:	f000 fcf8 	bl	8002cf8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002308:	4b3a      	ldr	r3, [pc, #232]	; (80023f4 <prvAddNewTaskToReadyList+0xf8>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	3301      	adds	r3, #1
 800230e:	4a39      	ldr	r2, [pc, #228]	; (80023f4 <prvAddNewTaskToReadyList+0xf8>)
 8002310:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002312:	4b39      	ldr	r3, [pc, #228]	; (80023f8 <prvAddNewTaskToReadyList+0xfc>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d109      	bne.n	800232e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800231a:	4a37      	ldr	r2, [pc, #220]	; (80023f8 <prvAddNewTaskToReadyList+0xfc>)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002320:	4b34      	ldr	r3, [pc, #208]	; (80023f4 <prvAddNewTaskToReadyList+0xf8>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2b01      	cmp	r3, #1
 8002326:	d110      	bne.n	800234a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002328:	f000 fb1a 	bl	8002960 <prvInitialiseTaskLists>
 800232c:	e00d      	b.n	800234a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800232e:	4b33      	ldr	r3, [pc, #204]	; (80023fc <prvAddNewTaskToReadyList+0x100>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d109      	bne.n	800234a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002336:	4b30      	ldr	r3, [pc, #192]	; (80023f8 <prvAddNewTaskToReadyList+0xfc>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002340:	429a      	cmp	r2, r3
 8002342:	d802      	bhi.n	800234a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002344:	4a2c      	ldr	r2, [pc, #176]	; (80023f8 <prvAddNewTaskToReadyList+0xfc>)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800234a:	4b2d      	ldr	r3, [pc, #180]	; (8002400 <prvAddNewTaskToReadyList+0x104>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	3301      	adds	r3, #1
 8002350:	4a2b      	ldr	r2, [pc, #172]	; (8002400 <prvAddNewTaskToReadyList+0x104>)
 8002352:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002354:	4b2a      	ldr	r3, [pc, #168]	; (8002400 <prvAddNewTaskToReadyList+0x104>)
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002360:	2201      	movs	r2, #1
 8002362:	409a      	lsls	r2, r3
 8002364:	4b27      	ldr	r3, [pc, #156]	; (8002404 <prvAddNewTaskToReadyList+0x108>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4313      	orrs	r3, r2
 800236a:	4a26      	ldr	r2, [pc, #152]	; (8002404 <prvAddNewTaskToReadyList+0x108>)
 800236c:	6013      	str	r3, [r2, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002372:	4925      	ldr	r1, [pc, #148]	; (8002408 <prvAddNewTaskToReadyList+0x10c>)
 8002374:	4613      	mov	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	4413      	add	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	440b      	add	r3, r1
 800237e:	3304      	adds	r3, #4
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	609a      	str	r2, [r3, #8]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	689a      	ldr	r2, [r3, #8]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	60da      	str	r2, [r3, #12]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	3204      	adds	r2, #4
 800239a:	605a      	str	r2, [r3, #4]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	1d1a      	adds	r2, r3, #4
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	609a      	str	r2, [r3, #8]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023a8:	4613      	mov	r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	4413      	add	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4a15      	ldr	r2, [pc, #84]	; (8002408 <prvAddNewTaskToReadyList+0x10c>)
 80023b2:	441a      	add	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	615a      	str	r2, [r3, #20]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023bc:	4912      	ldr	r1, [pc, #72]	; (8002408 <prvAddNewTaskToReadyList+0x10c>)
 80023be:	4613      	mov	r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	4413      	add	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	440b      	add	r3, r1
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	1c59      	adds	r1, r3, #1
 80023cc:	480e      	ldr	r0, [pc, #56]	; (8002408 <prvAddNewTaskToReadyList+0x10c>)
 80023ce:	4613      	mov	r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	4413      	add	r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	4403      	add	r3, r0
 80023d8:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80023da:	f000 fcbd 	bl	8002d58 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80023de:	4b07      	ldr	r3, [pc, #28]	; (80023fc <prvAddNewTaskToReadyList+0x100>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <prvAddNewTaskToReadyList+0xee>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80023e6:	4b04      	ldr	r3, [pc, #16]	; (80023f8 <prvAddNewTaskToReadyList+0xfc>)
 80023e8:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80023ea:	bf00      	nop
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	2000016c 	.word	0x2000016c
 80023f8:	20000094 	.word	0x20000094
 80023fc:	20000178 	.word	0x20000178
 8002400:	20000188 	.word	0x20000188
 8002404:	20000174 	.word	0x20000174
 8002408:	20000098 	.word	0x20000098

0800240c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002412:	4b1d      	ldr	r3, [pc, #116]	; (8002488 <vTaskStartScheduler+0x7c>)
 8002414:	9301      	str	r3, [sp, #4]
 8002416:	2300      	movs	r3, #0
 8002418:	9300      	str	r3, [sp, #0]
 800241a:	2300      	movs	r3, #0
 800241c:	2282      	movs	r2, #130	; 0x82
 800241e:	491b      	ldr	r1, [pc, #108]	; (800248c <vTaskStartScheduler+0x80>)
 8002420:	481b      	ldr	r0, [pc, #108]	; (8002490 <vTaskStartScheduler+0x84>)
 8002422:	f7ff fe86 	bl	8002132 <xTaskCreate>
 8002426:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d116      	bne.n	800245c <vTaskStartScheduler+0x50>
        __asm volatile
 800242e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002432:	f383 8811 	msr	BASEPRI, r3
 8002436:	f3bf 8f6f 	isb	sy
 800243a:	f3bf 8f4f 	dsb	sy
 800243e:	60bb      	str	r3, [r7, #8]
    }
 8002440:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002442:	4b14      	ldr	r3, [pc, #80]	; (8002494 <vTaskStartScheduler+0x88>)
 8002444:	f04f 32ff 	mov.w	r2, #4294967295
 8002448:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800244a:	4b13      	ldr	r3, [pc, #76]	; (8002498 <vTaskStartScheduler+0x8c>)
 800244c:	2201      	movs	r2, #1
 800244e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002450:	4b12      	ldr	r3, [pc, #72]	; (800249c <vTaskStartScheduler+0x90>)
 8002452:	2200      	movs	r2, #0
 8002454:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002456:	f000 fbad 	bl	8002bb4 <xPortStartScheduler>
 800245a:	e00e      	b.n	800247a <vTaskStartScheduler+0x6e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002462:	d10a      	bne.n	800247a <vTaskStartScheduler+0x6e>
        __asm volatile
 8002464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002468:	f383 8811 	msr	BASEPRI, r3
 800246c:	f3bf 8f6f 	isb	sy
 8002470:	f3bf 8f4f 	dsb	sy
 8002474:	607b      	str	r3, [r7, #4]
    }
 8002476:	bf00      	nop
 8002478:	e7fe      	b.n	8002478 <vTaskStartScheduler+0x6c>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800247a:	4b09      	ldr	r3, [pc, #36]	; (80024a0 <vTaskStartScheduler+0x94>)
 800247c:	681b      	ldr	r3, [r3, #0]
}
 800247e:	bf00      	nop
 8002480:	3710      	adds	r7, #16
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	20000190 	.word	0x20000190
 800248c:	08003d10 	.word	0x08003d10
 8002490:	0800293d 	.word	0x0800293d
 8002494:	2000018c 	.word	0x2000018c
 8002498:	20000178 	.word	0x20000178
 800249c:	20000170 	.word	0x20000170
 80024a0:	2000000c 	.word	0x2000000c

080024a4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80024a8:	4b04      	ldr	r3, [pc, #16]	; (80024bc <vTaskSuspendAll+0x18>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	3301      	adds	r3, #1
 80024ae:	4a03      	ldr	r2, [pc, #12]	; (80024bc <vTaskSuspendAll+0x18>)
 80024b0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80024b2:	bf00      	nop
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr
 80024bc:	20000194 	.word	0x20000194

080024c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b088      	sub	sp, #32
 80024c4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80024c6:	2300      	movs	r3, #0
 80024c8:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80024ca:	2300      	movs	r3, #0
 80024cc:	617b      	str	r3, [r7, #20]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80024ce:	4b6b      	ldr	r3, [pc, #428]	; (800267c <xTaskResumeAll+0x1bc>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d10a      	bne.n	80024ec <xTaskResumeAll+0x2c>
        __asm volatile
 80024d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024da:	f383 8811 	msr	BASEPRI, r3
 80024de:	f3bf 8f6f 	isb	sy
 80024e2:	f3bf 8f4f 	dsb	sy
 80024e6:	607b      	str	r3, [r7, #4]
    }
 80024e8:	bf00      	nop
 80024ea:	e7fe      	b.n	80024ea <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80024ec:	f000 fc04 	bl	8002cf8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80024f0:	4b62      	ldr	r3, [pc, #392]	; (800267c <xTaskResumeAll+0x1bc>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	3b01      	subs	r3, #1
 80024f6:	4a61      	ldr	r2, [pc, #388]	; (800267c <xTaskResumeAll+0x1bc>)
 80024f8:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80024fa:	4b60      	ldr	r3, [pc, #384]	; (800267c <xTaskResumeAll+0x1bc>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f040 80b4 	bne.w	800266c <xTaskResumeAll+0x1ac>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002504:	4b5e      	ldr	r3, [pc, #376]	; (8002680 <xTaskResumeAll+0x1c0>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2b00      	cmp	r3, #0
 800250a:	f000 80af 	beq.w	800266c <xTaskResumeAll+0x1ac>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800250e:	e08a      	b.n	8002626 <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002510:	4b5c      	ldr	r3, [pc, #368]	; (8002684 <xTaskResumeAll+0x1c4>)
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800251c:	613b      	str	r3, [r7, #16]
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	69fa      	ldr	r2, [r7, #28]
 8002524:	6a12      	ldr	r2, [r2, #32]
 8002526:	609a      	str	r2, [r3, #8]
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	6a1b      	ldr	r3, [r3, #32]
 800252c:	69fa      	ldr	r2, [r7, #28]
 800252e:	69d2      	ldr	r2, [r2, #28]
 8002530:	605a      	str	r2, [r3, #4]
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	685a      	ldr	r2, [r3, #4]
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	3318      	adds	r3, #24
 800253a:	429a      	cmp	r2, r3
 800253c:	d103      	bne.n	8002546 <xTaskResumeAll+0x86>
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	6a1a      	ldr	r2, [r3, #32]
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	605a      	str	r2, [r3, #4]
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	2200      	movs	r2, #0
 800254a:	629a      	str	r2, [r3, #40]	; 0x28
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	1e5a      	subs	r2, r3, #1
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	69fa      	ldr	r2, [r7, #28]
 8002562:	68d2      	ldr	r2, [r2, #12]
 8002564:	609a      	str	r2, [r3, #8]
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	69fa      	ldr	r2, [r7, #28]
 800256c:	6892      	ldr	r2, [r2, #8]
 800256e:	605a      	str	r2, [r3, #4]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	685a      	ldr	r2, [r3, #4]
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	3304      	adds	r3, #4
 8002578:	429a      	cmp	r2, r3
 800257a:	d103      	bne.n	8002584 <xTaskResumeAll+0xc4>
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	68da      	ldr	r2, [r3, #12]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	605a      	str	r2, [r3, #4]
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	2200      	movs	r2, #0
 8002588:	615a      	str	r2, [r3, #20]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	1e5a      	subs	r2, r3, #1
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002598:	2201      	movs	r2, #1
 800259a:	409a      	lsls	r2, r3
 800259c:	4b3a      	ldr	r3, [pc, #232]	; (8002688 <xTaskResumeAll+0x1c8>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	4a39      	ldr	r2, [pc, #228]	; (8002688 <xTaskResumeAll+0x1c8>)
 80025a4:	6013      	str	r3, [r2, #0]
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025aa:	4938      	ldr	r1, [pc, #224]	; (800268c <xTaskResumeAll+0x1cc>)
 80025ac:	4613      	mov	r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	4413      	add	r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	440b      	add	r3, r1
 80025b6:	3304      	adds	r3, #4
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	60bb      	str	r3, [r7, #8]
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	68ba      	ldr	r2, [r7, #8]
 80025c0:	609a      	str	r2, [r3, #8]
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	689a      	ldr	r2, [r3, #8]
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	60da      	str	r2, [r3, #12]
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	69fa      	ldr	r2, [r7, #28]
 80025d0:	3204      	adds	r2, #4
 80025d2:	605a      	str	r2, [r3, #4]
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	1d1a      	adds	r2, r3, #4
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	609a      	str	r2, [r3, #8]
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025e0:	4613      	mov	r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	4413      	add	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4a28      	ldr	r2, [pc, #160]	; (800268c <xTaskResumeAll+0x1cc>)
 80025ea:	441a      	add	r2, r3
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	615a      	str	r2, [r3, #20]
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025f4:	4925      	ldr	r1, [pc, #148]	; (800268c <xTaskResumeAll+0x1cc>)
 80025f6:	4613      	mov	r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	4413      	add	r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	440b      	add	r3, r1
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	1c59      	adds	r1, r3, #1
 8002604:	4821      	ldr	r0, [pc, #132]	; (800268c <xTaskResumeAll+0x1cc>)
 8002606:	4613      	mov	r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	4413      	add	r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	4403      	add	r3, r0
 8002610:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002616:	4b1e      	ldr	r3, [pc, #120]	; (8002690 <xTaskResumeAll+0x1d0>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261c:	429a      	cmp	r2, r3
 800261e:	d302      	bcc.n	8002626 <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8002620:	4b1c      	ldr	r3, [pc, #112]	; (8002694 <xTaskResumeAll+0x1d4>)
 8002622:	2201      	movs	r2, #1
 8002624:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002626:	4b17      	ldr	r3, [pc, #92]	; (8002684 <xTaskResumeAll+0x1c4>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2b00      	cmp	r3, #0
 800262c:	f47f af70 	bne.w	8002510 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002636:	f000 fa11 	bl	8002a5c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800263a:	4b17      	ldr	r3, [pc, #92]	; (8002698 <xTaskResumeAll+0x1d8>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	61bb      	str	r3, [r7, #24]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d010      	beq.n	8002668 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002646:	f000 f829 	bl	800269c <xTaskIncrementTick>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d002      	beq.n	8002656 <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8002650:	4b10      	ldr	r3, [pc, #64]	; (8002694 <xTaskResumeAll+0x1d4>)
 8002652:	2201      	movs	r2, #1
 8002654:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	3b01      	subs	r3, #1
 800265a:	61bb      	str	r3, [r7, #24]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1f1      	bne.n	8002646 <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8002662:	4b0d      	ldr	r3, [pc, #52]	; (8002698 <xTaskResumeAll+0x1d8>)
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002668:	4b0a      	ldr	r3, [pc, #40]	; (8002694 <xTaskResumeAll+0x1d4>)
 800266a:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800266c:	f000 fb74 	bl	8002d58 <vPortExitCritical>

    return xAlreadyYielded;
 8002670:	697b      	ldr	r3, [r7, #20]
}
 8002672:	4618      	mov	r0, r3
 8002674:	3720      	adds	r7, #32
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	20000194 	.word	0x20000194
 8002680:	2000016c 	.word	0x2000016c
 8002684:	2000012c 	.word	0x2000012c
 8002688:	20000174 	.word	0x20000174
 800268c:	20000098 	.word	0x20000098
 8002690:	20000094 	.word	0x20000094
 8002694:	20000180 	.word	0x20000180
 8002698:	2000017c 	.word	0x2000017c

0800269c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b08a      	sub	sp, #40	; 0x28
 80026a0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80026a2:	2300      	movs	r3, #0
 80026a4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80026a6:	4b6e      	ldr	r3, [pc, #440]	; (8002860 <xTaskIncrementTick+0x1c4>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f040 80cd 	bne.w	800284a <xTaskIncrementTick+0x1ae>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80026b0:	4b6c      	ldr	r3, [pc, #432]	; (8002864 <xTaskIncrementTick+0x1c8>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	3301      	adds	r3, #1
 80026b6:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80026b8:	4a6a      	ldr	r2, [pc, #424]	; (8002864 <xTaskIncrementTick+0x1c8>)
 80026ba:	6a3b      	ldr	r3, [r7, #32]
 80026bc:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80026be:	6a3b      	ldr	r3, [r7, #32]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d120      	bne.n	8002706 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80026c4:	4b68      	ldr	r3, [pc, #416]	; (8002868 <xTaskIncrementTick+0x1cc>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00a      	beq.n	80026e4 <xTaskIncrementTick+0x48>
        __asm volatile
 80026ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026d2:	f383 8811 	msr	BASEPRI, r3
 80026d6:	f3bf 8f6f 	isb	sy
 80026da:	f3bf 8f4f 	dsb	sy
 80026de:	607b      	str	r3, [r7, #4]
    }
 80026e0:	bf00      	nop
 80026e2:	e7fe      	b.n	80026e2 <xTaskIncrementTick+0x46>
 80026e4:	4b60      	ldr	r3, [pc, #384]	; (8002868 <xTaskIncrementTick+0x1cc>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	61fb      	str	r3, [r7, #28]
 80026ea:	4b60      	ldr	r3, [pc, #384]	; (800286c <xTaskIncrementTick+0x1d0>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a5e      	ldr	r2, [pc, #376]	; (8002868 <xTaskIncrementTick+0x1cc>)
 80026f0:	6013      	str	r3, [r2, #0]
 80026f2:	4a5e      	ldr	r2, [pc, #376]	; (800286c <xTaskIncrementTick+0x1d0>)
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	6013      	str	r3, [r2, #0]
 80026f8:	4b5d      	ldr	r3, [pc, #372]	; (8002870 <xTaskIncrementTick+0x1d4>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	3301      	adds	r3, #1
 80026fe:	4a5c      	ldr	r2, [pc, #368]	; (8002870 <xTaskIncrementTick+0x1d4>)
 8002700:	6013      	str	r3, [r2, #0]
 8002702:	f000 f9ab 	bl	8002a5c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002706:	4b5b      	ldr	r3, [pc, #364]	; (8002874 <xTaskIncrementTick+0x1d8>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	6a3a      	ldr	r2, [r7, #32]
 800270c:	429a      	cmp	r2, r3
 800270e:	f0c0 80a1 	bcc.w	8002854 <xTaskIncrementTick+0x1b8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002712:	4b55      	ldr	r3, [pc, #340]	; (8002868 <xTaskIncrementTick+0x1cc>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d104      	bne.n	8002726 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800271c:	4b55      	ldr	r3, [pc, #340]	; (8002874 <xTaskIncrementTick+0x1d8>)
 800271e:	f04f 32ff 	mov.w	r2, #4294967295
 8002722:	601a      	str	r2, [r3, #0]
                    break;
 8002724:	e096      	b.n	8002854 <xTaskIncrementTick+0x1b8>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002726:	4b50      	ldr	r3, [pc, #320]	; (8002868 <xTaskIncrementTick+0x1cc>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002736:	6a3a      	ldr	r2, [r7, #32]
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	429a      	cmp	r2, r3
 800273c:	d203      	bcs.n	8002746 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800273e:	4a4d      	ldr	r2, [pc, #308]	; (8002874 <xTaskIncrementTick+0x1d8>)
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002744:	e086      	b.n	8002854 <xTaskIncrementTick+0x1b8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	695b      	ldr	r3, [r3, #20]
 800274a:	613b      	str	r3, [r7, #16]
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	68d2      	ldr	r2, [r2, #12]
 8002754:	609a      	str	r2, [r3, #8]
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	6892      	ldr	r2, [r2, #8]
 800275e:	605a      	str	r2, [r3, #4]
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	3304      	adds	r3, #4
 8002768:	429a      	cmp	r2, r3
 800276a:	d103      	bne.n	8002774 <xTaskIncrementTick+0xd8>
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	68da      	ldr	r2, [r3, #12]
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	605a      	str	r2, [r3, #4]
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	2200      	movs	r2, #0
 8002778:	615a      	str	r2, [r3, #20]
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	1e5a      	subs	r2, r3, #1
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002788:	2b00      	cmp	r3, #0
 800278a:	d01e      	beq.n	80027ca <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002790:	60fb      	str	r3, [r7, #12]
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	6a12      	ldr	r2, [r2, #32]
 800279a:	609a      	str	r2, [r3, #8]
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	6a1b      	ldr	r3, [r3, #32]
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	69d2      	ldr	r2, [r2, #28]
 80027a4:	605a      	str	r2, [r3, #4]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	685a      	ldr	r2, [r3, #4]
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	3318      	adds	r3, #24
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d103      	bne.n	80027ba <xTaskIncrementTick+0x11e>
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	6a1a      	ldr	r2, [r3, #32]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	605a      	str	r2, [r3, #4]
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	2200      	movs	r2, #0
 80027be:	629a      	str	r2, [r3, #40]	; 0x28
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	1e5a      	subs	r2, r3, #1
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ce:	2201      	movs	r2, #1
 80027d0:	409a      	lsls	r2, r3
 80027d2:	4b29      	ldr	r3, [pc, #164]	; (8002878 <xTaskIncrementTick+0x1dc>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	4a27      	ldr	r2, [pc, #156]	; (8002878 <xTaskIncrementTick+0x1dc>)
 80027da:	6013      	str	r3, [r2, #0]
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027e0:	4926      	ldr	r1, [pc, #152]	; (800287c <xTaskIncrementTick+0x1e0>)
 80027e2:	4613      	mov	r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	4413      	add	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	440b      	add	r3, r1
 80027ec:	3304      	adds	r3, #4
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	60bb      	str	r3, [r7, #8]
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	68ba      	ldr	r2, [r7, #8]
 80027f6:	609a      	str	r2, [r3, #8]
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	60da      	str	r2, [r3, #12]
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	3204      	adds	r2, #4
 8002808:	605a      	str	r2, [r3, #4]
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	1d1a      	adds	r2, r3, #4
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	609a      	str	r2, [r3, #8]
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002816:	4613      	mov	r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	4413      	add	r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	4a17      	ldr	r2, [pc, #92]	; (800287c <xTaskIncrementTick+0x1e0>)
 8002820:	441a      	add	r2, r3
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	615a      	str	r2, [r3, #20]
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800282a:	4914      	ldr	r1, [pc, #80]	; (800287c <xTaskIncrementTick+0x1e0>)
 800282c:	4613      	mov	r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	4413      	add	r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	440b      	add	r3, r1
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	1c59      	adds	r1, r3, #1
 800283a:	4810      	ldr	r0, [pc, #64]	; (800287c <xTaskIncrementTick+0x1e0>)
 800283c:	4613      	mov	r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	4413      	add	r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	4403      	add	r3, r0
 8002846:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002848:	e763      	b.n	8002712 <xTaskIncrementTick+0x76>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800284a:	4b0d      	ldr	r3, [pc, #52]	; (8002880 <xTaskIncrementTick+0x1e4>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	3301      	adds	r3, #1
 8002850:	4a0b      	ldr	r2, [pc, #44]	; (8002880 <xTaskIncrementTick+0x1e4>)
 8002852:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002856:	4618      	mov	r0, r3
 8002858:	3728      	adds	r7, #40	; 0x28
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	20000194 	.word	0x20000194
 8002864:	20000170 	.word	0x20000170
 8002868:	20000124 	.word	0x20000124
 800286c:	20000128 	.word	0x20000128
 8002870:	20000184 	.word	0x20000184
 8002874:	2000018c 	.word	0x2000018c
 8002878:	20000174 	.word	0x20000174
 800287c:	20000098 	.word	0x20000098
 8002880:	2000017c 	.word	0x2000017c

08002884 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002884:	b480      	push	{r7}
 8002886:	b087      	sub	sp, #28
 8002888:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800288a:	4b27      	ldr	r3, [pc, #156]	; (8002928 <vTaskSwitchContext+0xa4>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d003      	beq.n	800289a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002892:	4b26      	ldr	r3, [pc, #152]	; (800292c <vTaskSwitchContext+0xa8>)
 8002894:	2201      	movs	r2, #1
 8002896:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002898:	e03f      	b.n	800291a <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 800289a:	4b24      	ldr	r3, [pc, #144]	; (800292c <vTaskSwitchContext+0xa8>)
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80028a0:	4b23      	ldr	r3, [pc, #140]	; (8002930 <vTaskSwitchContext+0xac>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	fab3 f383 	clz	r3, r3
 80028ac:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80028ae:	7afb      	ldrb	r3, [r7, #11]
 80028b0:	f1c3 031f 	rsb	r3, r3, #31
 80028b4:	617b      	str	r3, [r7, #20]
 80028b6:	491f      	ldr	r1, [pc, #124]	; (8002934 <vTaskSwitchContext+0xb0>)
 80028b8:	697a      	ldr	r2, [r7, #20]
 80028ba:	4613      	mov	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	4413      	add	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	440b      	add	r3, r1
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d10a      	bne.n	80028e0 <vTaskSwitchContext+0x5c>
        __asm volatile
 80028ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ce:	f383 8811 	msr	BASEPRI, r3
 80028d2:	f3bf 8f6f 	isb	sy
 80028d6:	f3bf 8f4f 	dsb	sy
 80028da:	607b      	str	r3, [r7, #4]
    }
 80028dc:	bf00      	nop
 80028de:	e7fe      	b.n	80028de <vTaskSwitchContext+0x5a>
 80028e0:	697a      	ldr	r2, [r7, #20]
 80028e2:	4613      	mov	r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4413      	add	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	4a12      	ldr	r2, [pc, #72]	; (8002934 <vTaskSwitchContext+0xb0>)
 80028ec:	4413      	add	r3, r2
 80028ee:	613b      	str	r3, [r7, #16]
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	685a      	ldr	r2, [r3, #4]
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	605a      	str	r2, [r3, #4]
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	685a      	ldr	r2, [r3, #4]
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	3308      	adds	r3, #8
 8002902:	429a      	cmp	r2, r3
 8002904:	d104      	bne.n	8002910 <vTaskSwitchContext+0x8c>
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	685a      	ldr	r2, [r3, #4]
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	605a      	str	r2, [r3, #4]
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	4a08      	ldr	r2, [pc, #32]	; (8002938 <vTaskSwitchContext+0xb4>)
 8002918:	6013      	str	r3, [r2, #0]
}
 800291a:	bf00      	nop
 800291c:	371c      	adds	r7, #28
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	20000194 	.word	0x20000194
 800292c:	20000180 	.word	0x20000180
 8002930:	20000174 	.word	0x20000174
 8002934:	20000098 	.word	0x20000098
 8002938:	20000094 	.word	0x20000094

0800293c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002944:	f000 f84c 	bl	80029e0 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 8002948:	4b04      	ldr	r3, [pc, #16]	; (800295c <prvIdleTask+0x20>)
 800294a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	f3bf 8f4f 	dsb	sy
 8002954:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002958:	e7f4      	b.n	8002944 <prvIdleTask+0x8>
 800295a:	bf00      	nop
 800295c:	e000ed04 	.word	0xe000ed04

08002960 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002966:	2300      	movs	r3, #0
 8002968:	607b      	str	r3, [r7, #4]
 800296a:	e00c      	b.n	8002986 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	4613      	mov	r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	4413      	add	r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	4a12      	ldr	r2, [pc, #72]	; (80029c0 <prvInitialiseTaskLists+0x60>)
 8002978:	4413      	add	r3, r2
 800297a:	4618      	mov	r0, r3
 800297c:	f7ff fb82 	bl	8002084 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	3301      	adds	r3, #1
 8002984:	607b      	str	r3, [r7, #4]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2b04      	cmp	r3, #4
 800298a:	d9ef      	bls.n	800296c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800298c:	480d      	ldr	r0, [pc, #52]	; (80029c4 <prvInitialiseTaskLists+0x64>)
 800298e:	f7ff fb79 	bl	8002084 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002992:	480d      	ldr	r0, [pc, #52]	; (80029c8 <prvInitialiseTaskLists+0x68>)
 8002994:	f7ff fb76 	bl	8002084 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002998:	480c      	ldr	r0, [pc, #48]	; (80029cc <prvInitialiseTaskLists+0x6c>)
 800299a:	f7ff fb73 	bl	8002084 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800299e:	480c      	ldr	r0, [pc, #48]	; (80029d0 <prvInitialiseTaskLists+0x70>)
 80029a0:	f7ff fb70 	bl	8002084 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80029a4:	480b      	ldr	r0, [pc, #44]	; (80029d4 <prvInitialiseTaskLists+0x74>)
 80029a6:	f7ff fb6d 	bl	8002084 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80029aa:	4b0b      	ldr	r3, [pc, #44]	; (80029d8 <prvInitialiseTaskLists+0x78>)
 80029ac:	4a05      	ldr	r2, [pc, #20]	; (80029c4 <prvInitialiseTaskLists+0x64>)
 80029ae:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80029b0:	4b0a      	ldr	r3, [pc, #40]	; (80029dc <prvInitialiseTaskLists+0x7c>)
 80029b2:	4a05      	ldr	r2, [pc, #20]	; (80029c8 <prvInitialiseTaskLists+0x68>)
 80029b4:	601a      	str	r2, [r3, #0]
}
 80029b6:	bf00      	nop
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	20000098 	.word	0x20000098
 80029c4:	200000fc 	.word	0x200000fc
 80029c8:	20000110 	.word	0x20000110
 80029cc:	2000012c 	.word	0x2000012c
 80029d0:	20000140 	.word	0x20000140
 80029d4:	20000158 	.word	0x20000158
 80029d8:	20000124 	.word	0x20000124
 80029dc:	20000128 	.word	0x20000128

080029e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80029e6:	e019      	b.n	8002a1c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80029e8:	f000 f986 	bl	8002cf8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80029ec:	4b10      	ldr	r3, [pc, #64]	; (8002a30 <prvCheckTasksWaitingTermination+0x50>)
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	3304      	adds	r3, #4
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff fb70 	bl	80020de <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80029fe:	4b0d      	ldr	r3, [pc, #52]	; (8002a34 <prvCheckTasksWaitingTermination+0x54>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	3b01      	subs	r3, #1
 8002a04:	4a0b      	ldr	r2, [pc, #44]	; (8002a34 <prvCheckTasksWaitingTermination+0x54>)
 8002a06:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002a08:	4b0b      	ldr	r3, [pc, #44]	; (8002a38 <prvCheckTasksWaitingTermination+0x58>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	3b01      	subs	r3, #1
 8002a0e:	4a0a      	ldr	r2, [pc, #40]	; (8002a38 <prvCheckTasksWaitingTermination+0x58>)
 8002a10:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002a12:	f000 f9a1 	bl	8002d58 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 f810 	bl	8002a3c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002a1c:	4b06      	ldr	r3, [pc, #24]	; (8002a38 <prvCheckTasksWaitingTermination+0x58>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d1e1      	bne.n	80029e8 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002a24:	bf00      	nop
 8002a26:	bf00      	nop
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	20000140 	.word	0x20000140
 8002a34:	2000016c 	.word	0x2000016c
 8002a38:	20000154 	.word	0x20000154

08002a3c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f000 fb17 	bl	800307c <vPortFree>
                vPortFree( pxTCB );
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 fb14 	bl	800307c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002a54:	bf00      	nop
 8002a56:	3708      	adds	r7, #8
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a60:	4b0a      	ldr	r3, [pc, #40]	; (8002a8c <prvResetNextTaskUnblockTime+0x30>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d104      	bne.n	8002a74 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002a6a:	4b09      	ldr	r3, [pc, #36]	; (8002a90 <prvResetNextTaskUnblockTime+0x34>)
 8002a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a70:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002a72:	e005      	b.n	8002a80 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002a74:	4b05      	ldr	r3, [pc, #20]	; (8002a8c <prvResetNextTaskUnblockTime+0x30>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a04      	ldr	r2, [pc, #16]	; (8002a90 <prvResetNextTaskUnblockTime+0x34>)
 8002a7e:	6013      	str	r3, [r2, #0]
}
 8002a80:	bf00      	nop
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	20000124 	.word	0x20000124
 8002a90:	2000018c 	.word	0x2000018c

08002a94 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	3b04      	subs	r3, #4
 8002aa4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002aac:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	3b04      	subs	r3, #4
 8002ab2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	f023 0201 	bic.w	r2, r3, #1
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	3b04      	subs	r3, #4
 8002ac2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002ac4:	4a0c      	ldr	r2, [pc, #48]	; (8002af8 <pxPortInitialiseStack+0x64>)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	3b14      	subs	r3, #20
 8002ace:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	3b04      	subs	r3, #4
 8002ada:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f06f 0202 	mvn.w	r2, #2
 8002ae2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	3b20      	subs	r3, #32
 8002ae8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002aea:	68fb      	ldr	r3, [r7, #12]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3714      	adds	r7, #20
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr
 8002af8:	08002afd 	.word	0x08002afd

08002afc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002b02:	2300      	movs	r3, #0
 8002b04:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002b06:	4b12      	ldr	r3, [pc, #72]	; (8002b50 <prvTaskExitError+0x54>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b0e:	d00a      	beq.n	8002b26 <prvTaskExitError+0x2a>
        __asm volatile
 8002b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b14:	f383 8811 	msr	BASEPRI, r3
 8002b18:	f3bf 8f6f 	isb	sy
 8002b1c:	f3bf 8f4f 	dsb	sy
 8002b20:	60fb      	str	r3, [r7, #12]
    }
 8002b22:	bf00      	nop
 8002b24:	e7fe      	b.n	8002b24 <prvTaskExitError+0x28>
        __asm volatile
 8002b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b2a:	f383 8811 	msr	BASEPRI, r3
 8002b2e:	f3bf 8f6f 	isb	sy
 8002b32:	f3bf 8f4f 	dsb	sy
 8002b36:	60bb      	str	r3, [r7, #8]
    }
 8002b38:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002b3a:	bf00      	nop
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d0fc      	beq.n	8002b3c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002b42:	bf00      	nop
 8002b44:	bf00      	nop
 8002b46:	3714      	adds	r7, #20
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr
 8002b50:	20000010 	.word	0x20000010
	...

08002b60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002b60:	4b07      	ldr	r3, [pc, #28]	; (8002b80 <pxCurrentTCBConst2>)
 8002b62:	6819      	ldr	r1, [r3, #0]
 8002b64:	6808      	ldr	r0, [r1, #0]
 8002b66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b6a:	f380 8809 	msr	PSP, r0
 8002b6e:	f3bf 8f6f 	isb	sy
 8002b72:	f04f 0000 	mov.w	r0, #0
 8002b76:	f380 8811 	msr	BASEPRI, r0
 8002b7a:	4770      	bx	lr
 8002b7c:	f3af 8000 	nop.w

08002b80 <pxCurrentTCBConst2>:
 8002b80:	20000094 	.word	0x20000094
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002b84:	bf00      	nop
 8002b86:	bf00      	nop

08002b88 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002b88:	4808      	ldr	r0, [pc, #32]	; (8002bac <prvPortStartFirstTask+0x24>)
 8002b8a:	6800      	ldr	r0, [r0, #0]
 8002b8c:	6800      	ldr	r0, [r0, #0]
 8002b8e:	f380 8808 	msr	MSP, r0
 8002b92:	f04f 0000 	mov.w	r0, #0
 8002b96:	f380 8814 	msr	CONTROL, r0
 8002b9a:	b662      	cpsie	i
 8002b9c:	b661      	cpsie	f
 8002b9e:	f3bf 8f4f 	dsb	sy
 8002ba2:	f3bf 8f6f 	isb	sy
 8002ba6:	df00      	svc	0
 8002ba8:	bf00      	nop
 8002baa:	0000      	.short	0x0000
 8002bac:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002bb0:	bf00      	nop
 8002bb2:	bf00      	nop

08002bb4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002bba:	4b46      	ldr	r3, [pc, #280]	; (8002cd4 <xPortStartScheduler+0x120>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a46      	ldr	r2, [pc, #280]	; (8002cd8 <xPortStartScheduler+0x124>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d10a      	bne.n	8002bda <xPortStartScheduler+0x26>
        __asm volatile
 8002bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc8:	f383 8811 	msr	BASEPRI, r3
 8002bcc:	f3bf 8f6f 	isb	sy
 8002bd0:	f3bf 8f4f 	dsb	sy
 8002bd4:	613b      	str	r3, [r7, #16]
    }
 8002bd6:	bf00      	nop
 8002bd8:	e7fe      	b.n	8002bd8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002bda:	4b3e      	ldr	r3, [pc, #248]	; (8002cd4 <xPortStartScheduler+0x120>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a3f      	ldr	r2, [pc, #252]	; (8002cdc <xPortStartScheduler+0x128>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d10a      	bne.n	8002bfa <xPortStartScheduler+0x46>
        __asm volatile
 8002be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be8:	f383 8811 	msr	BASEPRI, r3
 8002bec:	f3bf 8f6f 	isb	sy
 8002bf0:	f3bf 8f4f 	dsb	sy
 8002bf4:	60fb      	str	r3, [r7, #12]
    }
 8002bf6:	bf00      	nop
 8002bf8:	e7fe      	b.n	8002bf8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002bfa:	4b39      	ldr	r3, [pc, #228]	; (8002ce0 <xPortStartScheduler+0x12c>)
 8002bfc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	22ff      	movs	r2, #255	; 0xff
 8002c0a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002c14:	78fb      	ldrb	r3, [r7, #3]
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002c1c:	b2da      	uxtb	r2, r3
 8002c1e:	4b31      	ldr	r3, [pc, #196]	; (8002ce4 <xPortStartScheduler+0x130>)
 8002c20:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002c22:	4b31      	ldr	r3, [pc, #196]	; (8002ce8 <xPortStartScheduler+0x134>)
 8002c24:	2207      	movs	r2, #7
 8002c26:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002c28:	e009      	b.n	8002c3e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002c2a:	4b2f      	ldr	r3, [pc, #188]	; (8002ce8 <xPortStartScheduler+0x134>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	4a2d      	ldr	r2, [pc, #180]	; (8002ce8 <xPortStartScheduler+0x134>)
 8002c32:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002c34:	78fb      	ldrb	r3, [r7, #3]
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002c3e:	78fb      	ldrb	r3, [r7, #3]
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c46:	2b80      	cmp	r3, #128	; 0x80
 8002c48:	d0ef      	beq.n	8002c2a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002c4a:	4b27      	ldr	r3, [pc, #156]	; (8002ce8 <xPortStartScheduler+0x134>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f1c3 0307 	rsb	r3, r3, #7
 8002c52:	2b04      	cmp	r3, #4
 8002c54:	d00a      	beq.n	8002c6c <xPortStartScheduler+0xb8>
        __asm volatile
 8002c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c5a:	f383 8811 	msr	BASEPRI, r3
 8002c5e:	f3bf 8f6f 	isb	sy
 8002c62:	f3bf 8f4f 	dsb	sy
 8002c66:	60bb      	str	r3, [r7, #8]
    }
 8002c68:	bf00      	nop
 8002c6a:	e7fe      	b.n	8002c6a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002c6c:	4b1e      	ldr	r3, [pc, #120]	; (8002ce8 <xPortStartScheduler+0x134>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	021b      	lsls	r3, r3, #8
 8002c72:	4a1d      	ldr	r2, [pc, #116]	; (8002ce8 <xPortStartScheduler+0x134>)
 8002c74:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002c76:	4b1c      	ldr	r3, [pc, #112]	; (8002ce8 <xPortStartScheduler+0x134>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c7e:	4a1a      	ldr	r2, [pc, #104]	; (8002ce8 <xPortStartScheduler+0x134>)
 8002c80:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	b2da      	uxtb	r2, r3
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002c8a:	4b18      	ldr	r3, [pc, #96]	; (8002cec <xPortStartScheduler+0x138>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a17      	ldr	r2, [pc, #92]	; (8002cec <xPortStartScheduler+0x138>)
 8002c90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c94:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002c96:	4b15      	ldr	r3, [pc, #84]	; (8002cec <xPortStartScheduler+0x138>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a14      	ldr	r2, [pc, #80]	; (8002cec <xPortStartScheduler+0x138>)
 8002c9c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002ca0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002ca2:	f000 f8db 	bl	8002e5c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002ca6:	4b12      	ldr	r3, [pc, #72]	; (8002cf0 <xPortStartScheduler+0x13c>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002cac:	f000 f8fa 	bl	8002ea4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002cb0:	4b10      	ldr	r3, [pc, #64]	; (8002cf4 <xPortStartScheduler+0x140>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a0f      	ldr	r2, [pc, #60]	; (8002cf4 <xPortStartScheduler+0x140>)
 8002cb6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002cba:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002cbc:	f7ff ff64 	bl	8002b88 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002cc0:	f7ff fde0 	bl	8002884 <vTaskSwitchContext>
    prvTaskExitError();
 8002cc4:	f7ff ff1a 	bl	8002afc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3718      	adds	r7, #24
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	e000ed00 	.word	0xe000ed00
 8002cd8:	410fc271 	.word	0x410fc271
 8002cdc:	410fc270 	.word	0x410fc270
 8002ce0:	e000e400 	.word	0xe000e400
 8002ce4:	20000198 	.word	0x20000198
 8002ce8:	2000019c 	.word	0x2000019c
 8002cec:	e000ed20 	.word	0xe000ed20
 8002cf0:	20000010 	.word	0x20000010
 8002cf4:	e000ef34 	.word	0xe000ef34

08002cf8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
        __asm volatile
 8002cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d02:	f383 8811 	msr	BASEPRI, r3
 8002d06:	f3bf 8f6f 	isb	sy
 8002d0a:	f3bf 8f4f 	dsb	sy
 8002d0e:	607b      	str	r3, [r7, #4]
    }
 8002d10:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002d12:	4b0f      	ldr	r3, [pc, #60]	; (8002d50 <vPortEnterCritical+0x58>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	3301      	adds	r3, #1
 8002d18:	4a0d      	ldr	r2, [pc, #52]	; (8002d50 <vPortEnterCritical+0x58>)
 8002d1a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002d1c:	4b0c      	ldr	r3, [pc, #48]	; (8002d50 <vPortEnterCritical+0x58>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d10f      	bne.n	8002d44 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002d24:	4b0b      	ldr	r3, [pc, #44]	; (8002d54 <vPortEnterCritical+0x5c>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d00a      	beq.n	8002d44 <vPortEnterCritical+0x4c>
        __asm volatile
 8002d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d32:	f383 8811 	msr	BASEPRI, r3
 8002d36:	f3bf 8f6f 	isb	sy
 8002d3a:	f3bf 8f4f 	dsb	sy
 8002d3e:	603b      	str	r3, [r7, #0]
    }
 8002d40:	bf00      	nop
 8002d42:	e7fe      	b.n	8002d42 <vPortEnterCritical+0x4a>
    }
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr
 8002d50:	20000010 	.word	0x20000010
 8002d54:	e000ed04 	.word	0xe000ed04

08002d58 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002d5e:	4b12      	ldr	r3, [pc, #72]	; (8002da8 <vPortExitCritical+0x50>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d10a      	bne.n	8002d7c <vPortExitCritical+0x24>
        __asm volatile
 8002d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d6a:	f383 8811 	msr	BASEPRI, r3
 8002d6e:	f3bf 8f6f 	isb	sy
 8002d72:	f3bf 8f4f 	dsb	sy
 8002d76:	607b      	str	r3, [r7, #4]
    }
 8002d78:	bf00      	nop
 8002d7a:	e7fe      	b.n	8002d7a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002d7c:	4b0a      	ldr	r3, [pc, #40]	; (8002da8 <vPortExitCritical+0x50>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	3b01      	subs	r3, #1
 8002d82:	4a09      	ldr	r2, [pc, #36]	; (8002da8 <vPortExitCritical+0x50>)
 8002d84:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002d86:	4b08      	ldr	r3, [pc, #32]	; (8002da8 <vPortExitCritical+0x50>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d105      	bne.n	8002d9a <vPortExitCritical+0x42>
 8002d8e:	2300      	movs	r3, #0
 8002d90:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002d98:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002d9a:	bf00      	nop
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	20000010 	.word	0x20000010
 8002dac:	00000000 	.word	0x00000000

08002db0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002db0:	f3ef 8009 	mrs	r0, PSP
 8002db4:	f3bf 8f6f 	isb	sy
 8002db8:	4b15      	ldr	r3, [pc, #84]	; (8002e10 <pxCurrentTCBConst>)
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	f01e 0f10 	tst.w	lr, #16
 8002dc0:	bf08      	it	eq
 8002dc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002dc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dca:	6010      	str	r0, [r2, #0]
 8002dcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002dd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002dd4:	f380 8811 	msr	BASEPRI, r0
 8002dd8:	f3bf 8f4f 	dsb	sy
 8002ddc:	f3bf 8f6f 	isb	sy
 8002de0:	f7ff fd50 	bl	8002884 <vTaskSwitchContext>
 8002de4:	f04f 0000 	mov.w	r0, #0
 8002de8:	f380 8811 	msr	BASEPRI, r0
 8002dec:	bc09      	pop	{r0, r3}
 8002dee:	6819      	ldr	r1, [r3, #0]
 8002df0:	6808      	ldr	r0, [r1, #0]
 8002df2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002df6:	f01e 0f10 	tst.w	lr, #16
 8002dfa:	bf08      	it	eq
 8002dfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002e00:	f380 8809 	msr	PSP, r0
 8002e04:	f3bf 8f6f 	isb	sy
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	f3af 8000 	nop.w

08002e10 <pxCurrentTCBConst>:
 8002e10:	20000094 	.word	0x20000094
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002e14:	bf00      	nop
 8002e16:	bf00      	nop

08002e18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
        __asm volatile
 8002e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e22:	f383 8811 	msr	BASEPRI, r3
 8002e26:	f3bf 8f6f 	isb	sy
 8002e2a:	f3bf 8f4f 	dsb	sy
 8002e2e:	607b      	str	r3, [r7, #4]
    }
 8002e30:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002e32:	f7ff fc33 	bl	800269c <xTaskIncrementTick>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d003      	beq.n	8002e44 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002e3c:	4b06      	ldr	r3, [pc, #24]	; (8002e58 <SysTick_Handler+0x40>)
 8002e3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e42:	601a      	str	r2, [r3, #0]
 8002e44:	2300      	movs	r3, #0
 8002e46:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	f383 8811 	msr	BASEPRI, r3
    }
 8002e4e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8002e50:	bf00      	nop
 8002e52:	3708      	adds	r7, #8
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	e000ed04 	.word	0xe000ed04

08002e5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002e60:	4b0b      	ldr	r3, [pc, #44]	; (8002e90 <vPortSetupTimerInterrupt+0x34>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002e66:	4b0b      	ldr	r3, [pc, #44]	; (8002e94 <vPortSetupTimerInterrupt+0x38>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002e6c:	4b0a      	ldr	r3, [pc, #40]	; (8002e98 <vPortSetupTimerInterrupt+0x3c>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a0a      	ldr	r2, [pc, #40]	; (8002e9c <vPortSetupTimerInterrupt+0x40>)
 8002e72:	fba2 2303 	umull	r2, r3, r2, r3
 8002e76:	099b      	lsrs	r3, r3, #6
 8002e78:	4a09      	ldr	r2, [pc, #36]	; (8002ea0 <vPortSetupTimerInterrupt+0x44>)
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002e7e:	4b04      	ldr	r3, [pc, #16]	; (8002e90 <vPortSetupTimerInterrupt+0x34>)
 8002e80:	2207      	movs	r2, #7
 8002e82:	601a      	str	r2, [r3, #0]
}
 8002e84:	bf00      	nop
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	e000e010 	.word	0xe000e010
 8002e94:	e000e018 	.word	0xe000e018
 8002e98:	20000000 	.word	0x20000000
 8002e9c:	10624dd3 	.word	0x10624dd3
 8002ea0:	e000e014 	.word	0xe000e014

08002ea4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002ea4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002eb4 <vPortEnableVFP+0x10>
 8002ea8:	6801      	ldr	r1, [r0, #0]
 8002eaa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002eae:	6001      	str	r1, [r0, #0]
 8002eb0:	4770      	bx	lr
 8002eb2:	0000      	.short	0x0000
 8002eb4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002eb8:	bf00      	nop
 8002eba:	bf00      	nop

08002ebc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b08a      	sub	sp, #40	; 0x28
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8002ec8:	f7ff faec 	bl	80024a4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002ecc:	4b65      	ldr	r3, [pc, #404]	; (8003064 <pvPortMalloc+0x1a8>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d101      	bne.n	8002ed8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002ed4:	f000 f934 	bl	8003140 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002ed8:	4b63      	ldr	r3, [pc, #396]	; (8003068 <pvPortMalloc+0x1ac>)
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4013      	ands	r3, r2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f040 80a7 	bne.w	8003034 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d02d      	beq.n	8002f48 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8002eec:	2208      	movs	r2, #8
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d227      	bcs.n	8002f48 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8002ef8:	2208      	movs	r2, #8
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4413      	add	r3, r2
 8002efe:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f003 0307 	and.w	r3, r3, #7
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d021      	beq.n	8002f4e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f023 0307 	bic.w	r3, r3, #7
 8002f10:	3308      	adds	r3, #8
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d214      	bcs.n	8002f42 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f023 0307 	bic.w	r3, r3, #7
 8002f1e:	3308      	adds	r3, #8
 8002f20:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f003 0307 	and.w	r3, r3, #7
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d010      	beq.n	8002f4e <pvPortMalloc+0x92>
        __asm volatile
 8002f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f30:	f383 8811 	msr	BASEPRI, r3
 8002f34:	f3bf 8f6f 	isb	sy
 8002f38:	f3bf 8f4f 	dsb	sy
 8002f3c:	617b      	str	r3, [r7, #20]
    }
 8002f3e:	bf00      	nop
 8002f40:	e7fe      	b.n	8002f40 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8002f42:	2300      	movs	r3, #0
 8002f44:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002f46:	e002      	b.n	8002f4e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	607b      	str	r3, [r7, #4]
 8002f4c:	e000      	b.n	8002f50 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002f4e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d06e      	beq.n	8003034 <pvPortMalloc+0x178>
 8002f56:	4b45      	ldr	r3, [pc, #276]	; (800306c <pvPortMalloc+0x1b0>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d869      	bhi.n	8003034 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002f60:	4b43      	ldr	r3, [pc, #268]	; (8003070 <pvPortMalloc+0x1b4>)
 8002f62:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8002f64:	4b42      	ldr	r3, [pc, #264]	; (8003070 <pvPortMalloc+0x1b4>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002f6a:	e004      	b.n	8002f76 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8002f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d903      	bls.n	8002f88 <pvPortMalloc+0xcc>
 8002f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d1f1      	bne.n	8002f6c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002f88:	4b36      	ldr	r3, [pc, #216]	; (8003064 <pvPortMalloc+0x1a8>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d050      	beq.n	8003034 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002f92:	6a3b      	ldr	r3, [r7, #32]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2208      	movs	r2, #8
 8002f98:	4413      	add	r3, r2
 8002f9a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	6a3b      	ldr	r3, [r7, #32]
 8002fa2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa6:	685a      	ldr	r2, [r3, #4]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	1ad2      	subs	r2, r2, r3
 8002fac:	2308      	movs	r3, #8
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d91f      	bls.n	8002ff4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002fb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4413      	add	r3, r2
 8002fba:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	f003 0307 	and.w	r3, r3, #7
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d00a      	beq.n	8002fdc <pvPortMalloc+0x120>
        __asm volatile
 8002fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fca:	f383 8811 	msr	BASEPRI, r3
 8002fce:	f3bf 8f6f 	isb	sy
 8002fd2:	f3bf 8f4f 	dsb	sy
 8002fd6:	613b      	str	r3, [r7, #16]
    }
 8002fd8:	bf00      	nop
 8002fda:	e7fe      	b.n	8002fda <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fde:	685a      	ldr	r2, [r3, #4]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	1ad2      	subs	r2, r2, r3
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002fee:	69b8      	ldr	r0, [r7, #24]
 8002ff0:	f000 f908 	bl	8003204 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002ff4:	4b1d      	ldr	r3, [pc, #116]	; (800306c <pvPortMalloc+0x1b0>)
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	4a1b      	ldr	r2, [pc, #108]	; (800306c <pvPortMalloc+0x1b0>)
 8003000:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003002:	4b1a      	ldr	r3, [pc, #104]	; (800306c <pvPortMalloc+0x1b0>)
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	4b1b      	ldr	r3, [pc, #108]	; (8003074 <pvPortMalloc+0x1b8>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	429a      	cmp	r2, r3
 800300c:	d203      	bcs.n	8003016 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800300e:	4b17      	ldr	r3, [pc, #92]	; (800306c <pvPortMalloc+0x1b0>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a18      	ldr	r2, [pc, #96]	; (8003074 <pvPortMalloc+0x1b8>)
 8003014:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003018:	685a      	ldr	r2, [r3, #4]
 800301a:	4b13      	ldr	r3, [pc, #76]	; (8003068 <pvPortMalloc+0x1ac>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	431a      	orrs	r2, r3
 8003020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003022:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003026:	2200      	movs	r2, #0
 8003028:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800302a:	4b13      	ldr	r3, [pc, #76]	; (8003078 <pvPortMalloc+0x1bc>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	3301      	adds	r3, #1
 8003030:	4a11      	ldr	r2, [pc, #68]	; (8003078 <pvPortMalloc+0x1bc>)
 8003032:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003034:	f7ff fa44 	bl	80024c0 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	f003 0307 	and.w	r3, r3, #7
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00a      	beq.n	8003058 <pvPortMalloc+0x19c>
        __asm volatile
 8003042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003046:	f383 8811 	msr	BASEPRI, r3
 800304a:	f3bf 8f6f 	isb	sy
 800304e:	f3bf 8f4f 	dsb	sy
 8003052:	60fb      	str	r3, [r7, #12]
    }
 8003054:	bf00      	nop
 8003056:	e7fe      	b.n	8003056 <pvPortMalloc+0x19a>
    return pvReturn;
 8003058:	69fb      	ldr	r3, [r7, #28]
}
 800305a:	4618      	mov	r0, r3
 800305c:	3728      	adds	r7, #40	; 0x28
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	20012da8 	.word	0x20012da8
 8003068:	20012dbc 	.word	0x20012dbc
 800306c:	20012dac 	.word	0x20012dac
 8003070:	20012da0 	.word	0x20012da0
 8003074:	20012db0 	.word	0x20012db0
 8003078:	20012db4 	.word	0x20012db4

0800307c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b086      	sub	sp, #24
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d04d      	beq.n	800312a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800308e:	2308      	movs	r3, #8
 8003090:	425b      	negs	r3, r3
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	4413      	add	r3, r2
 8003096:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	685a      	ldr	r2, [r3, #4]
 80030a0:	4b24      	ldr	r3, [pc, #144]	; (8003134 <vPortFree+0xb8>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4013      	ands	r3, r2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10a      	bne.n	80030c0 <vPortFree+0x44>
        __asm volatile
 80030aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ae:	f383 8811 	msr	BASEPRI, r3
 80030b2:	f3bf 8f6f 	isb	sy
 80030b6:	f3bf 8f4f 	dsb	sy
 80030ba:	60fb      	str	r3, [r7, #12]
    }
 80030bc:	bf00      	nop
 80030be:	e7fe      	b.n	80030be <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d00a      	beq.n	80030de <vPortFree+0x62>
        __asm volatile
 80030c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030cc:	f383 8811 	msr	BASEPRI, r3
 80030d0:	f3bf 8f6f 	isb	sy
 80030d4:	f3bf 8f4f 	dsb	sy
 80030d8:	60bb      	str	r3, [r7, #8]
    }
 80030da:	bf00      	nop
 80030dc:	e7fe      	b.n	80030dc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	685a      	ldr	r2, [r3, #4]
 80030e2:	4b14      	ldr	r3, [pc, #80]	; (8003134 <vPortFree+0xb8>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4013      	ands	r3, r2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d01e      	beq.n	800312a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d11a      	bne.n	800312a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	685a      	ldr	r2, [r3, #4]
 80030f8:	4b0e      	ldr	r3, [pc, #56]	; (8003134 <vPortFree+0xb8>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	43db      	mvns	r3, r3
 80030fe:	401a      	ands	r2, r3
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003104:	f7ff f9ce 	bl	80024a4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	685a      	ldr	r2, [r3, #4]
 800310c:	4b0a      	ldr	r3, [pc, #40]	; (8003138 <vPortFree+0xbc>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4413      	add	r3, r2
 8003112:	4a09      	ldr	r2, [pc, #36]	; (8003138 <vPortFree+0xbc>)
 8003114:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003116:	6938      	ldr	r0, [r7, #16]
 8003118:	f000 f874 	bl	8003204 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800311c:	4b07      	ldr	r3, [pc, #28]	; (800313c <vPortFree+0xc0>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	3301      	adds	r3, #1
 8003122:	4a06      	ldr	r2, [pc, #24]	; (800313c <vPortFree+0xc0>)
 8003124:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003126:	f7ff f9cb 	bl	80024c0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800312a:	bf00      	nop
 800312c:	3718      	adds	r7, #24
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	20012dbc 	.word	0x20012dbc
 8003138:	20012dac 	.word	0x20012dac
 800313c:	20012db8 	.word	0x20012db8

08003140 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003140:	b480      	push	{r7}
 8003142:	b085      	sub	sp, #20
 8003144:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003146:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800314a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800314c:	4b27      	ldr	r3, [pc, #156]	; (80031ec <prvHeapInit+0xac>)
 800314e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f003 0307 	and.w	r3, r3, #7
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00c      	beq.n	8003174 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	3307      	adds	r3, #7
 800315e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f023 0307 	bic.w	r3, r3, #7
 8003166:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003168:	68ba      	ldr	r2, [r7, #8]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	4a1f      	ldr	r2, [pc, #124]	; (80031ec <prvHeapInit+0xac>)
 8003170:	4413      	add	r3, r2
 8003172:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003178:	4a1d      	ldr	r2, [pc, #116]	; (80031f0 <prvHeapInit+0xb0>)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800317e:	4b1c      	ldr	r3, [pc, #112]	; (80031f0 <prvHeapInit+0xb0>)
 8003180:	2200      	movs	r2, #0
 8003182:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	68ba      	ldr	r2, [r7, #8]
 8003188:	4413      	add	r3, r2
 800318a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800318c:	2208      	movs	r2, #8
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	1a9b      	subs	r3, r3, r2
 8003192:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f023 0307 	bic.w	r3, r3, #7
 800319a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	4a15      	ldr	r2, [pc, #84]	; (80031f4 <prvHeapInit+0xb4>)
 80031a0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80031a2:	4b14      	ldr	r3, [pc, #80]	; (80031f4 <prvHeapInit+0xb4>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2200      	movs	r2, #0
 80031a8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80031aa:	4b12      	ldr	r3, [pc, #72]	; (80031f4 <prvHeapInit+0xb4>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2200      	movs	r2, #0
 80031b0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	1ad2      	subs	r2, r2, r3
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80031c0:	4b0c      	ldr	r3, [pc, #48]	; (80031f4 <prvHeapInit+0xb4>)
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	4a0a      	ldr	r2, [pc, #40]	; (80031f8 <prvHeapInit+0xb8>)
 80031ce:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	4a09      	ldr	r2, [pc, #36]	; (80031fc <prvHeapInit+0xbc>)
 80031d6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80031d8:	4b09      	ldr	r3, [pc, #36]	; (8003200 <prvHeapInit+0xc0>)
 80031da:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80031de:	601a      	str	r2, [r3, #0]
}
 80031e0:	bf00      	nop
 80031e2:	3714      	adds	r7, #20
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr
 80031ec:	200001a0 	.word	0x200001a0
 80031f0:	20012da0 	.word	0x20012da0
 80031f4:	20012da8 	.word	0x20012da8
 80031f8:	20012db0 	.word	0x20012db0
 80031fc:	20012dac 	.word	0x20012dac
 8003200:	20012dbc 	.word	0x20012dbc

08003204 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800320c:	4b28      	ldr	r3, [pc, #160]	; (80032b0 <prvInsertBlockIntoFreeList+0xac>)
 800320e:	60fb      	str	r3, [r7, #12]
 8003210:	e002      	b.n	8003218 <prvInsertBlockIntoFreeList+0x14>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	60fb      	str	r3, [r7, #12]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	429a      	cmp	r2, r3
 8003220:	d8f7      	bhi.n	8003212 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	68ba      	ldr	r2, [r7, #8]
 800322c:	4413      	add	r3, r2
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	429a      	cmp	r2, r3
 8003232:	d108      	bne.n	8003246 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	685a      	ldr	r2, [r3, #4]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	441a      	add	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	68ba      	ldr	r2, [r7, #8]
 8003250:	441a      	add	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	429a      	cmp	r2, r3
 8003258:	d118      	bne.n	800328c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	4b15      	ldr	r3, [pc, #84]	; (80032b4 <prvInsertBlockIntoFreeList+0xb0>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	429a      	cmp	r2, r3
 8003264:	d00d      	beq.n	8003282 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685a      	ldr	r2, [r3, #4]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	441a      	add	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	601a      	str	r2, [r3, #0]
 8003280:	e008      	b.n	8003294 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003282:	4b0c      	ldr	r3, [pc, #48]	; (80032b4 <prvInsertBlockIntoFreeList+0xb0>)
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	601a      	str	r2, [r3, #0]
 800328a:	e003      	b.n	8003294 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	429a      	cmp	r2, r3
 800329a:	d002      	beq.n	80032a2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80032a2:	bf00      	nop
 80032a4:	3714      	adds	r7, #20
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	20012da0 	.word	0x20012da0
 80032b4:	20012da8 	.word	0x20012da8

080032b8 <__libc_init_array>:
 80032b8:	b570      	push	{r4, r5, r6, lr}
 80032ba:	4d0d      	ldr	r5, [pc, #52]	; (80032f0 <__libc_init_array+0x38>)
 80032bc:	4c0d      	ldr	r4, [pc, #52]	; (80032f4 <__libc_init_array+0x3c>)
 80032be:	1b64      	subs	r4, r4, r5
 80032c0:	10a4      	asrs	r4, r4, #2
 80032c2:	2600      	movs	r6, #0
 80032c4:	42a6      	cmp	r6, r4
 80032c6:	d109      	bne.n	80032dc <__libc_init_array+0x24>
 80032c8:	4d0b      	ldr	r5, [pc, #44]	; (80032f8 <__libc_init_array+0x40>)
 80032ca:	4c0c      	ldr	r4, [pc, #48]	; (80032fc <__libc_init_array+0x44>)
 80032cc:	f000 fcf4 	bl	8003cb8 <_init>
 80032d0:	1b64      	subs	r4, r4, r5
 80032d2:	10a4      	asrs	r4, r4, #2
 80032d4:	2600      	movs	r6, #0
 80032d6:	42a6      	cmp	r6, r4
 80032d8:	d105      	bne.n	80032e6 <__libc_init_array+0x2e>
 80032da:	bd70      	pop	{r4, r5, r6, pc}
 80032dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80032e0:	4798      	blx	r3
 80032e2:	3601      	adds	r6, #1
 80032e4:	e7ee      	b.n	80032c4 <__libc_init_array+0xc>
 80032e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80032ea:	4798      	blx	r3
 80032ec:	3601      	adds	r6, #1
 80032ee:	e7f2      	b.n	80032d6 <__libc_init_array+0x1e>
 80032f0:	08003d9c 	.word	0x08003d9c
 80032f4:	08003d9c 	.word	0x08003d9c
 80032f8:	08003d9c 	.word	0x08003d9c
 80032fc:	08003da0 	.word	0x08003da0

08003300 <memset>:
 8003300:	4402      	add	r2, r0
 8003302:	4603      	mov	r3, r0
 8003304:	4293      	cmp	r3, r2
 8003306:	d100      	bne.n	800330a <memset+0xa>
 8003308:	4770      	bx	lr
 800330a:	f803 1b01 	strb.w	r1, [r3], #1
 800330e:	e7f9      	b.n	8003304 <memset+0x4>

08003310 <_puts_r>:
 8003310:	b570      	push	{r4, r5, r6, lr}
 8003312:	460e      	mov	r6, r1
 8003314:	4605      	mov	r5, r0
 8003316:	b118      	cbz	r0, 8003320 <_puts_r+0x10>
 8003318:	6983      	ldr	r3, [r0, #24]
 800331a:	b90b      	cbnz	r3, 8003320 <_puts_r+0x10>
 800331c:	f000 fa48 	bl	80037b0 <__sinit>
 8003320:	69ab      	ldr	r3, [r5, #24]
 8003322:	68ac      	ldr	r4, [r5, #8]
 8003324:	b913      	cbnz	r3, 800332c <_puts_r+0x1c>
 8003326:	4628      	mov	r0, r5
 8003328:	f000 fa42 	bl	80037b0 <__sinit>
 800332c:	4b2c      	ldr	r3, [pc, #176]	; (80033e0 <_puts_r+0xd0>)
 800332e:	429c      	cmp	r4, r3
 8003330:	d120      	bne.n	8003374 <_puts_r+0x64>
 8003332:	686c      	ldr	r4, [r5, #4]
 8003334:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003336:	07db      	lsls	r3, r3, #31
 8003338:	d405      	bmi.n	8003346 <_puts_r+0x36>
 800333a:	89a3      	ldrh	r3, [r4, #12]
 800333c:	0598      	lsls	r0, r3, #22
 800333e:	d402      	bmi.n	8003346 <_puts_r+0x36>
 8003340:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003342:	f000 fad3 	bl	80038ec <__retarget_lock_acquire_recursive>
 8003346:	89a3      	ldrh	r3, [r4, #12]
 8003348:	0719      	lsls	r1, r3, #28
 800334a:	d51d      	bpl.n	8003388 <_puts_r+0x78>
 800334c:	6923      	ldr	r3, [r4, #16]
 800334e:	b1db      	cbz	r3, 8003388 <_puts_r+0x78>
 8003350:	3e01      	subs	r6, #1
 8003352:	68a3      	ldr	r3, [r4, #8]
 8003354:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003358:	3b01      	subs	r3, #1
 800335a:	60a3      	str	r3, [r4, #8]
 800335c:	bb39      	cbnz	r1, 80033ae <_puts_r+0x9e>
 800335e:	2b00      	cmp	r3, #0
 8003360:	da38      	bge.n	80033d4 <_puts_r+0xc4>
 8003362:	4622      	mov	r2, r4
 8003364:	210a      	movs	r1, #10
 8003366:	4628      	mov	r0, r5
 8003368:	f000 f848 	bl	80033fc <__swbuf_r>
 800336c:	3001      	adds	r0, #1
 800336e:	d011      	beq.n	8003394 <_puts_r+0x84>
 8003370:	250a      	movs	r5, #10
 8003372:	e011      	b.n	8003398 <_puts_r+0x88>
 8003374:	4b1b      	ldr	r3, [pc, #108]	; (80033e4 <_puts_r+0xd4>)
 8003376:	429c      	cmp	r4, r3
 8003378:	d101      	bne.n	800337e <_puts_r+0x6e>
 800337a:	68ac      	ldr	r4, [r5, #8]
 800337c:	e7da      	b.n	8003334 <_puts_r+0x24>
 800337e:	4b1a      	ldr	r3, [pc, #104]	; (80033e8 <_puts_r+0xd8>)
 8003380:	429c      	cmp	r4, r3
 8003382:	bf08      	it	eq
 8003384:	68ec      	ldreq	r4, [r5, #12]
 8003386:	e7d5      	b.n	8003334 <_puts_r+0x24>
 8003388:	4621      	mov	r1, r4
 800338a:	4628      	mov	r0, r5
 800338c:	f000 f888 	bl	80034a0 <__swsetup_r>
 8003390:	2800      	cmp	r0, #0
 8003392:	d0dd      	beq.n	8003350 <_puts_r+0x40>
 8003394:	f04f 35ff 	mov.w	r5, #4294967295
 8003398:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800339a:	07da      	lsls	r2, r3, #31
 800339c:	d405      	bmi.n	80033aa <_puts_r+0x9a>
 800339e:	89a3      	ldrh	r3, [r4, #12]
 80033a0:	059b      	lsls	r3, r3, #22
 80033a2:	d402      	bmi.n	80033aa <_puts_r+0x9a>
 80033a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80033a6:	f000 faa2 	bl	80038ee <__retarget_lock_release_recursive>
 80033aa:	4628      	mov	r0, r5
 80033ac:	bd70      	pop	{r4, r5, r6, pc}
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	da04      	bge.n	80033bc <_puts_r+0xac>
 80033b2:	69a2      	ldr	r2, [r4, #24]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	dc06      	bgt.n	80033c6 <_puts_r+0xb6>
 80033b8:	290a      	cmp	r1, #10
 80033ba:	d004      	beq.n	80033c6 <_puts_r+0xb6>
 80033bc:	6823      	ldr	r3, [r4, #0]
 80033be:	1c5a      	adds	r2, r3, #1
 80033c0:	6022      	str	r2, [r4, #0]
 80033c2:	7019      	strb	r1, [r3, #0]
 80033c4:	e7c5      	b.n	8003352 <_puts_r+0x42>
 80033c6:	4622      	mov	r2, r4
 80033c8:	4628      	mov	r0, r5
 80033ca:	f000 f817 	bl	80033fc <__swbuf_r>
 80033ce:	3001      	adds	r0, #1
 80033d0:	d1bf      	bne.n	8003352 <_puts_r+0x42>
 80033d2:	e7df      	b.n	8003394 <_puts_r+0x84>
 80033d4:	6823      	ldr	r3, [r4, #0]
 80033d6:	250a      	movs	r5, #10
 80033d8:	1c5a      	adds	r2, r3, #1
 80033da:	6022      	str	r2, [r4, #0]
 80033dc:	701d      	strb	r5, [r3, #0]
 80033de:	e7db      	b.n	8003398 <_puts_r+0x88>
 80033e0:	08003d54 	.word	0x08003d54
 80033e4:	08003d74 	.word	0x08003d74
 80033e8:	08003d34 	.word	0x08003d34

080033ec <puts>:
 80033ec:	4b02      	ldr	r3, [pc, #8]	; (80033f8 <puts+0xc>)
 80033ee:	4601      	mov	r1, r0
 80033f0:	6818      	ldr	r0, [r3, #0]
 80033f2:	f7ff bf8d 	b.w	8003310 <_puts_r>
 80033f6:	bf00      	nop
 80033f8:	20000014 	.word	0x20000014

080033fc <__swbuf_r>:
 80033fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033fe:	460e      	mov	r6, r1
 8003400:	4614      	mov	r4, r2
 8003402:	4605      	mov	r5, r0
 8003404:	b118      	cbz	r0, 800340e <__swbuf_r+0x12>
 8003406:	6983      	ldr	r3, [r0, #24]
 8003408:	b90b      	cbnz	r3, 800340e <__swbuf_r+0x12>
 800340a:	f000 f9d1 	bl	80037b0 <__sinit>
 800340e:	4b21      	ldr	r3, [pc, #132]	; (8003494 <__swbuf_r+0x98>)
 8003410:	429c      	cmp	r4, r3
 8003412:	d12b      	bne.n	800346c <__swbuf_r+0x70>
 8003414:	686c      	ldr	r4, [r5, #4]
 8003416:	69a3      	ldr	r3, [r4, #24]
 8003418:	60a3      	str	r3, [r4, #8]
 800341a:	89a3      	ldrh	r3, [r4, #12]
 800341c:	071a      	lsls	r2, r3, #28
 800341e:	d52f      	bpl.n	8003480 <__swbuf_r+0x84>
 8003420:	6923      	ldr	r3, [r4, #16]
 8003422:	b36b      	cbz	r3, 8003480 <__swbuf_r+0x84>
 8003424:	6923      	ldr	r3, [r4, #16]
 8003426:	6820      	ldr	r0, [r4, #0]
 8003428:	1ac0      	subs	r0, r0, r3
 800342a:	6963      	ldr	r3, [r4, #20]
 800342c:	b2f6      	uxtb	r6, r6
 800342e:	4283      	cmp	r3, r0
 8003430:	4637      	mov	r7, r6
 8003432:	dc04      	bgt.n	800343e <__swbuf_r+0x42>
 8003434:	4621      	mov	r1, r4
 8003436:	4628      	mov	r0, r5
 8003438:	f000 f926 	bl	8003688 <_fflush_r>
 800343c:	bb30      	cbnz	r0, 800348c <__swbuf_r+0x90>
 800343e:	68a3      	ldr	r3, [r4, #8]
 8003440:	3b01      	subs	r3, #1
 8003442:	60a3      	str	r3, [r4, #8]
 8003444:	6823      	ldr	r3, [r4, #0]
 8003446:	1c5a      	adds	r2, r3, #1
 8003448:	6022      	str	r2, [r4, #0]
 800344a:	701e      	strb	r6, [r3, #0]
 800344c:	6963      	ldr	r3, [r4, #20]
 800344e:	3001      	adds	r0, #1
 8003450:	4283      	cmp	r3, r0
 8003452:	d004      	beq.n	800345e <__swbuf_r+0x62>
 8003454:	89a3      	ldrh	r3, [r4, #12]
 8003456:	07db      	lsls	r3, r3, #31
 8003458:	d506      	bpl.n	8003468 <__swbuf_r+0x6c>
 800345a:	2e0a      	cmp	r6, #10
 800345c:	d104      	bne.n	8003468 <__swbuf_r+0x6c>
 800345e:	4621      	mov	r1, r4
 8003460:	4628      	mov	r0, r5
 8003462:	f000 f911 	bl	8003688 <_fflush_r>
 8003466:	b988      	cbnz	r0, 800348c <__swbuf_r+0x90>
 8003468:	4638      	mov	r0, r7
 800346a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800346c:	4b0a      	ldr	r3, [pc, #40]	; (8003498 <__swbuf_r+0x9c>)
 800346e:	429c      	cmp	r4, r3
 8003470:	d101      	bne.n	8003476 <__swbuf_r+0x7a>
 8003472:	68ac      	ldr	r4, [r5, #8]
 8003474:	e7cf      	b.n	8003416 <__swbuf_r+0x1a>
 8003476:	4b09      	ldr	r3, [pc, #36]	; (800349c <__swbuf_r+0xa0>)
 8003478:	429c      	cmp	r4, r3
 800347a:	bf08      	it	eq
 800347c:	68ec      	ldreq	r4, [r5, #12]
 800347e:	e7ca      	b.n	8003416 <__swbuf_r+0x1a>
 8003480:	4621      	mov	r1, r4
 8003482:	4628      	mov	r0, r5
 8003484:	f000 f80c 	bl	80034a0 <__swsetup_r>
 8003488:	2800      	cmp	r0, #0
 800348a:	d0cb      	beq.n	8003424 <__swbuf_r+0x28>
 800348c:	f04f 37ff 	mov.w	r7, #4294967295
 8003490:	e7ea      	b.n	8003468 <__swbuf_r+0x6c>
 8003492:	bf00      	nop
 8003494:	08003d54 	.word	0x08003d54
 8003498:	08003d74 	.word	0x08003d74
 800349c:	08003d34 	.word	0x08003d34

080034a0 <__swsetup_r>:
 80034a0:	4b32      	ldr	r3, [pc, #200]	; (800356c <__swsetup_r+0xcc>)
 80034a2:	b570      	push	{r4, r5, r6, lr}
 80034a4:	681d      	ldr	r5, [r3, #0]
 80034a6:	4606      	mov	r6, r0
 80034a8:	460c      	mov	r4, r1
 80034aa:	b125      	cbz	r5, 80034b6 <__swsetup_r+0x16>
 80034ac:	69ab      	ldr	r3, [r5, #24]
 80034ae:	b913      	cbnz	r3, 80034b6 <__swsetup_r+0x16>
 80034b0:	4628      	mov	r0, r5
 80034b2:	f000 f97d 	bl	80037b0 <__sinit>
 80034b6:	4b2e      	ldr	r3, [pc, #184]	; (8003570 <__swsetup_r+0xd0>)
 80034b8:	429c      	cmp	r4, r3
 80034ba:	d10f      	bne.n	80034dc <__swsetup_r+0x3c>
 80034bc:	686c      	ldr	r4, [r5, #4]
 80034be:	89a3      	ldrh	r3, [r4, #12]
 80034c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80034c4:	0719      	lsls	r1, r3, #28
 80034c6:	d42c      	bmi.n	8003522 <__swsetup_r+0x82>
 80034c8:	06dd      	lsls	r5, r3, #27
 80034ca:	d411      	bmi.n	80034f0 <__swsetup_r+0x50>
 80034cc:	2309      	movs	r3, #9
 80034ce:	6033      	str	r3, [r6, #0]
 80034d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80034d4:	81a3      	strh	r3, [r4, #12]
 80034d6:	f04f 30ff 	mov.w	r0, #4294967295
 80034da:	e03e      	b.n	800355a <__swsetup_r+0xba>
 80034dc:	4b25      	ldr	r3, [pc, #148]	; (8003574 <__swsetup_r+0xd4>)
 80034de:	429c      	cmp	r4, r3
 80034e0:	d101      	bne.n	80034e6 <__swsetup_r+0x46>
 80034e2:	68ac      	ldr	r4, [r5, #8]
 80034e4:	e7eb      	b.n	80034be <__swsetup_r+0x1e>
 80034e6:	4b24      	ldr	r3, [pc, #144]	; (8003578 <__swsetup_r+0xd8>)
 80034e8:	429c      	cmp	r4, r3
 80034ea:	bf08      	it	eq
 80034ec:	68ec      	ldreq	r4, [r5, #12]
 80034ee:	e7e6      	b.n	80034be <__swsetup_r+0x1e>
 80034f0:	0758      	lsls	r0, r3, #29
 80034f2:	d512      	bpl.n	800351a <__swsetup_r+0x7a>
 80034f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80034f6:	b141      	cbz	r1, 800350a <__swsetup_r+0x6a>
 80034f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80034fc:	4299      	cmp	r1, r3
 80034fe:	d002      	beq.n	8003506 <__swsetup_r+0x66>
 8003500:	4630      	mov	r0, r6
 8003502:	f000 fa59 	bl	80039b8 <_free_r>
 8003506:	2300      	movs	r3, #0
 8003508:	6363      	str	r3, [r4, #52]	; 0x34
 800350a:	89a3      	ldrh	r3, [r4, #12]
 800350c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003510:	81a3      	strh	r3, [r4, #12]
 8003512:	2300      	movs	r3, #0
 8003514:	6063      	str	r3, [r4, #4]
 8003516:	6923      	ldr	r3, [r4, #16]
 8003518:	6023      	str	r3, [r4, #0]
 800351a:	89a3      	ldrh	r3, [r4, #12]
 800351c:	f043 0308 	orr.w	r3, r3, #8
 8003520:	81a3      	strh	r3, [r4, #12]
 8003522:	6923      	ldr	r3, [r4, #16]
 8003524:	b94b      	cbnz	r3, 800353a <__swsetup_r+0x9a>
 8003526:	89a3      	ldrh	r3, [r4, #12]
 8003528:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800352c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003530:	d003      	beq.n	800353a <__swsetup_r+0x9a>
 8003532:	4621      	mov	r1, r4
 8003534:	4630      	mov	r0, r6
 8003536:	f000 f9ff 	bl	8003938 <__smakebuf_r>
 800353a:	89a0      	ldrh	r0, [r4, #12]
 800353c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003540:	f010 0301 	ands.w	r3, r0, #1
 8003544:	d00a      	beq.n	800355c <__swsetup_r+0xbc>
 8003546:	2300      	movs	r3, #0
 8003548:	60a3      	str	r3, [r4, #8]
 800354a:	6963      	ldr	r3, [r4, #20]
 800354c:	425b      	negs	r3, r3
 800354e:	61a3      	str	r3, [r4, #24]
 8003550:	6923      	ldr	r3, [r4, #16]
 8003552:	b943      	cbnz	r3, 8003566 <__swsetup_r+0xc6>
 8003554:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003558:	d1ba      	bne.n	80034d0 <__swsetup_r+0x30>
 800355a:	bd70      	pop	{r4, r5, r6, pc}
 800355c:	0781      	lsls	r1, r0, #30
 800355e:	bf58      	it	pl
 8003560:	6963      	ldrpl	r3, [r4, #20]
 8003562:	60a3      	str	r3, [r4, #8]
 8003564:	e7f4      	b.n	8003550 <__swsetup_r+0xb0>
 8003566:	2000      	movs	r0, #0
 8003568:	e7f7      	b.n	800355a <__swsetup_r+0xba>
 800356a:	bf00      	nop
 800356c:	20000014 	.word	0x20000014
 8003570:	08003d54 	.word	0x08003d54
 8003574:	08003d74 	.word	0x08003d74
 8003578:	08003d34 	.word	0x08003d34

0800357c <__sflush_r>:
 800357c:	898a      	ldrh	r2, [r1, #12]
 800357e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003582:	4605      	mov	r5, r0
 8003584:	0710      	lsls	r0, r2, #28
 8003586:	460c      	mov	r4, r1
 8003588:	d458      	bmi.n	800363c <__sflush_r+0xc0>
 800358a:	684b      	ldr	r3, [r1, #4]
 800358c:	2b00      	cmp	r3, #0
 800358e:	dc05      	bgt.n	800359c <__sflush_r+0x20>
 8003590:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003592:	2b00      	cmp	r3, #0
 8003594:	dc02      	bgt.n	800359c <__sflush_r+0x20>
 8003596:	2000      	movs	r0, #0
 8003598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800359c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800359e:	2e00      	cmp	r6, #0
 80035a0:	d0f9      	beq.n	8003596 <__sflush_r+0x1a>
 80035a2:	2300      	movs	r3, #0
 80035a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80035a8:	682f      	ldr	r7, [r5, #0]
 80035aa:	602b      	str	r3, [r5, #0]
 80035ac:	d032      	beq.n	8003614 <__sflush_r+0x98>
 80035ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80035b0:	89a3      	ldrh	r3, [r4, #12]
 80035b2:	075a      	lsls	r2, r3, #29
 80035b4:	d505      	bpl.n	80035c2 <__sflush_r+0x46>
 80035b6:	6863      	ldr	r3, [r4, #4]
 80035b8:	1ac0      	subs	r0, r0, r3
 80035ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80035bc:	b10b      	cbz	r3, 80035c2 <__sflush_r+0x46>
 80035be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80035c0:	1ac0      	subs	r0, r0, r3
 80035c2:	2300      	movs	r3, #0
 80035c4:	4602      	mov	r2, r0
 80035c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80035c8:	6a21      	ldr	r1, [r4, #32]
 80035ca:	4628      	mov	r0, r5
 80035cc:	47b0      	blx	r6
 80035ce:	1c43      	adds	r3, r0, #1
 80035d0:	89a3      	ldrh	r3, [r4, #12]
 80035d2:	d106      	bne.n	80035e2 <__sflush_r+0x66>
 80035d4:	6829      	ldr	r1, [r5, #0]
 80035d6:	291d      	cmp	r1, #29
 80035d8:	d82c      	bhi.n	8003634 <__sflush_r+0xb8>
 80035da:	4a2a      	ldr	r2, [pc, #168]	; (8003684 <__sflush_r+0x108>)
 80035dc:	40ca      	lsrs	r2, r1
 80035de:	07d6      	lsls	r6, r2, #31
 80035e0:	d528      	bpl.n	8003634 <__sflush_r+0xb8>
 80035e2:	2200      	movs	r2, #0
 80035e4:	6062      	str	r2, [r4, #4]
 80035e6:	04d9      	lsls	r1, r3, #19
 80035e8:	6922      	ldr	r2, [r4, #16]
 80035ea:	6022      	str	r2, [r4, #0]
 80035ec:	d504      	bpl.n	80035f8 <__sflush_r+0x7c>
 80035ee:	1c42      	adds	r2, r0, #1
 80035f0:	d101      	bne.n	80035f6 <__sflush_r+0x7a>
 80035f2:	682b      	ldr	r3, [r5, #0]
 80035f4:	b903      	cbnz	r3, 80035f8 <__sflush_r+0x7c>
 80035f6:	6560      	str	r0, [r4, #84]	; 0x54
 80035f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80035fa:	602f      	str	r7, [r5, #0]
 80035fc:	2900      	cmp	r1, #0
 80035fe:	d0ca      	beq.n	8003596 <__sflush_r+0x1a>
 8003600:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003604:	4299      	cmp	r1, r3
 8003606:	d002      	beq.n	800360e <__sflush_r+0x92>
 8003608:	4628      	mov	r0, r5
 800360a:	f000 f9d5 	bl	80039b8 <_free_r>
 800360e:	2000      	movs	r0, #0
 8003610:	6360      	str	r0, [r4, #52]	; 0x34
 8003612:	e7c1      	b.n	8003598 <__sflush_r+0x1c>
 8003614:	6a21      	ldr	r1, [r4, #32]
 8003616:	2301      	movs	r3, #1
 8003618:	4628      	mov	r0, r5
 800361a:	47b0      	blx	r6
 800361c:	1c41      	adds	r1, r0, #1
 800361e:	d1c7      	bne.n	80035b0 <__sflush_r+0x34>
 8003620:	682b      	ldr	r3, [r5, #0]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d0c4      	beq.n	80035b0 <__sflush_r+0x34>
 8003626:	2b1d      	cmp	r3, #29
 8003628:	d001      	beq.n	800362e <__sflush_r+0xb2>
 800362a:	2b16      	cmp	r3, #22
 800362c:	d101      	bne.n	8003632 <__sflush_r+0xb6>
 800362e:	602f      	str	r7, [r5, #0]
 8003630:	e7b1      	b.n	8003596 <__sflush_r+0x1a>
 8003632:	89a3      	ldrh	r3, [r4, #12]
 8003634:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003638:	81a3      	strh	r3, [r4, #12]
 800363a:	e7ad      	b.n	8003598 <__sflush_r+0x1c>
 800363c:	690f      	ldr	r7, [r1, #16]
 800363e:	2f00      	cmp	r7, #0
 8003640:	d0a9      	beq.n	8003596 <__sflush_r+0x1a>
 8003642:	0793      	lsls	r3, r2, #30
 8003644:	680e      	ldr	r6, [r1, #0]
 8003646:	bf08      	it	eq
 8003648:	694b      	ldreq	r3, [r1, #20]
 800364a:	600f      	str	r7, [r1, #0]
 800364c:	bf18      	it	ne
 800364e:	2300      	movne	r3, #0
 8003650:	eba6 0807 	sub.w	r8, r6, r7
 8003654:	608b      	str	r3, [r1, #8]
 8003656:	f1b8 0f00 	cmp.w	r8, #0
 800365a:	dd9c      	ble.n	8003596 <__sflush_r+0x1a>
 800365c:	6a21      	ldr	r1, [r4, #32]
 800365e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003660:	4643      	mov	r3, r8
 8003662:	463a      	mov	r2, r7
 8003664:	4628      	mov	r0, r5
 8003666:	47b0      	blx	r6
 8003668:	2800      	cmp	r0, #0
 800366a:	dc06      	bgt.n	800367a <__sflush_r+0xfe>
 800366c:	89a3      	ldrh	r3, [r4, #12]
 800366e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003672:	81a3      	strh	r3, [r4, #12]
 8003674:	f04f 30ff 	mov.w	r0, #4294967295
 8003678:	e78e      	b.n	8003598 <__sflush_r+0x1c>
 800367a:	4407      	add	r7, r0
 800367c:	eba8 0800 	sub.w	r8, r8, r0
 8003680:	e7e9      	b.n	8003656 <__sflush_r+0xda>
 8003682:	bf00      	nop
 8003684:	20400001 	.word	0x20400001

08003688 <_fflush_r>:
 8003688:	b538      	push	{r3, r4, r5, lr}
 800368a:	690b      	ldr	r3, [r1, #16]
 800368c:	4605      	mov	r5, r0
 800368e:	460c      	mov	r4, r1
 8003690:	b913      	cbnz	r3, 8003698 <_fflush_r+0x10>
 8003692:	2500      	movs	r5, #0
 8003694:	4628      	mov	r0, r5
 8003696:	bd38      	pop	{r3, r4, r5, pc}
 8003698:	b118      	cbz	r0, 80036a2 <_fflush_r+0x1a>
 800369a:	6983      	ldr	r3, [r0, #24]
 800369c:	b90b      	cbnz	r3, 80036a2 <_fflush_r+0x1a>
 800369e:	f000 f887 	bl	80037b0 <__sinit>
 80036a2:	4b14      	ldr	r3, [pc, #80]	; (80036f4 <_fflush_r+0x6c>)
 80036a4:	429c      	cmp	r4, r3
 80036a6:	d11b      	bne.n	80036e0 <_fflush_r+0x58>
 80036a8:	686c      	ldr	r4, [r5, #4]
 80036aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d0ef      	beq.n	8003692 <_fflush_r+0xa>
 80036b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80036b4:	07d0      	lsls	r0, r2, #31
 80036b6:	d404      	bmi.n	80036c2 <_fflush_r+0x3a>
 80036b8:	0599      	lsls	r1, r3, #22
 80036ba:	d402      	bmi.n	80036c2 <_fflush_r+0x3a>
 80036bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036be:	f000 f915 	bl	80038ec <__retarget_lock_acquire_recursive>
 80036c2:	4628      	mov	r0, r5
 80036c4:	4621      	mov	r1, r4
 80036c6:	f7ff ff59 	bl	800357c <__sflush_r>
 80036ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80036cc:	07da      	lsls	r2, r3, #31
 80036ce:	4605      	mov	r5, r0
 80036d0:	d4e0      	bmi.n	8003694 <_fflush_r+0xc>
 80036d2:	89a3      	ldrh	r3, [r4, #12]
 80036d4:	059b      	lsls	r3, r3, #22
 80036d6:	d4dd      	bmi.n	8003694 <_fflush_r+0xc>
 80036d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036da:	f000 f908 	bl	80038ee <__retarget_lock_release_recursive>
 80036de:	e7d9      	b.n	8003694 <_fflush_r+0xc>
 80036e0:	4b05      	ldr	r3, [pc, #20]	; (80036f8 <_fflush_r+0x70>)
 80036e2:	429c      	cmp	r4, r3
 80036e4:	d101      	bne.n	80036ea <_fflush_r+0x62>
 80036e6:	68ac      	ldr	r4, [r5, #8]
 80036e8:	e7df      	b.n	80036aa <_fflush_r+0x22>
 80036ea:	4b04      	ldr	r3, [pc, #16]	; (80036fc <_fflush_r+0x74>)
 80036ec:	429c      	cmp	r4, r3
 80036ee:	bf08      	it	eq
 80036f0:	68ec      	ldreq	r4, [r5, #12]
 80036f2:	e7da      	b.n	80036aa <_fflush_r+0x22>
 80036f4:	08003d54 	.word	0x08003d54
 80036f8:	08003d74 	.word	0x08003d74
 80036fc:	08003d34 	.word	0x08003d34

08003700 <std>:
 8003700:	2300      	movs	r3, #0
 8003702:	b510      	push	{r4, lr}
 8003704:	4604      	mov	r4, r0
 8003706:	e9c0 3300 	strd	r3, r3, [r0]
 800370a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800370e:	6083      	str	r3, [r0, #8]
 8003710:	8181      	strh	r1, [r0, #12]
 8003712:	6643      	str	r3, [r0, #100]	; 0x64
 8003714:	81c2      	strh	r2, [r0, #14]
 8003716:	6183      	str	r3, [r0, #24]
 8003718:	4619      	mov	r1, r3
 800371a:	2208      	movs	r2, #8
 800371c:	305c      	adds	r0, #92	; 0x5c
 800371e:	f7ff fdef 	bl	8003300 <memset>
 8003722:	4b05      	ldr	r3, [pc, #20]	; (8003738 <std+0x38>)
 8003724:	6263      	str	r3, [r4, #36]	; 0x24
 8003726:	4b05      	ldr	r3, [pc, #20]	; (800373c <std+0x3c>)
 8003728:	62a3      	str	r3, [r4, #40]	; 0x28
 800372a:	4b05      	ldr	r3, [pc, #20]	; (8003740 <std+0x40>)
 800372c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800372e:	4b05      	ldr	r3, [pc, #20]	; (8003744 <std+0x44>)
 8003730:	6224      	str	r4, [r4, #32]
 8003732:	6323      	str	r3, [r4, #48]	; 0x30
 8003734:	bd10      	pop	{r4, pc}
 8003736:	bf00      	nop
 8003738:	08003b2d 	.word	0x08003b2d
 800373c:	08003b4f 	.word	0x08003b4f
 8003740:	08003b87 	.word	0x08003b87
 8003744:	08003bab 	.word	0x08003bab

08003748 <_cleanup_r>:
 8003748:	4901      	ldr	r1, [pc, #4]	; (8003750 <_cleanup_r+0x8>)
 800374a:	f000 b8af 	b.w	80038ac <_fwalk_reent>
 800374e:	bf00      	nop
 8003750:	08003689 	.word	0x08003689

08003754 <__sfmoreglue>:
 8003754:	b570      	push	{r4, r5, r6, lr}
 8003756:	1e4a      	subs	r2, r1, #1
 8003758:	2568      	movs	r5, #104	; 0x68
 800375a:	4355      	muls	r5, r2
 800375c:	460e      	mov	r6, r1
 800375e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003762:	f000 f979 	bl	8003a58 <_malloc_r>
 8003766:	4604      	mov	r4, r0
 8003768:	b140      	cbz	r0, 800377c <__sfmoreglue+0x28>
 800376a:	2100      	movs	r1, #0
 800376c:	e9c0 1600 	strd	r1, r6, [r0]
 8003770:	300c      	adds	r0, #12
 8003772:	60a0      	str	r0, [r4, #8]
 8003774:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003778:	f7ff fdc2 	bl	8003300 <memset>
 800377c:	4620      	mov	r0, r4
 800377e:	bd70      	pop	{r4, r5, r6, pc}

08003780 <__sfp_lock_acquire>:
 8003780:	4801      	ldr	r0, [pc, #4]	; (8003788 <__sfp_lock_acquire+0x8>)
 8003782:	f000 b8b3 	b.w	80038ec <__retarget_lock_acquire_recursive>
 8003786:	bf00      	nop
 8003788:	20012e20 	.word	0x20012e20

0800378c <__sfp_lock_release>:
 800378c:	4801      	ldr	r0, [pc, #4]	; (8003794 <__sfp_lock_release+0x8>)
 800378e:	f000 b8ae 	b.w	80038ee <__retarget_lock_release_recursive>
 8003792:	bf00      	nop
 8003794:	20012e20 	.word	0x20012e20

08003798 <__sinit_lock_acquire>:
 8003798:	4801      	ldr	r0, [pc, #4]	; (80037a0 <__sinit_lock_acquire+0x8>)
 800379a:	f000 b8a7 	b.w	80038ec <__retarget_lock_acquire_recursive>
 800379e:	bf00      	nop
 80037a0:	20012e1b 	.word	0x20012e1b

080037a4 <__sinit_lock_release>:
 80037a4:	4801      	ldr	r0, [pc, #4]	; (80037ac <__sinit_lock_release+0x8>)
 80037a6:	f000 b8a2 	b.w	80038ee <__retarget_lock_release_recursive>
 80037aa:	bf00      	nop
 80037ac:	20012e1b 	.word	0x20012e1b

080037b0 <__sinit>:
 80037b0:	b510      	push	{r4, lr}
 80037b2:	4604      	mov	r4, r0
 80037b4:	f7ff fff0 	bl	8003798 <__sinit_lock_acquire>
 80037b8:	69a3      	ldr	r3, [r4, #24]
 80037ba:	b11b      	cbz	r3, 80037c4 <__sinit+0x14>
 80037bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037c0:	f7ff bff0 	b.w	80037a4 <__sinit_lock_release>
 80037c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80037c8:	6523      	str	r3, [r4, #80]	; 0x50
 80037ca:	4b13      	ldr	r3, [pc, #76]	; (8003818 <__sinit+0x68>)
 80037cc:	4a13      	ldr	r2, [pc, #76]	; (800381c <__sinit+0x6c>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	62a2      	str	r2, [r4, #40]	; 0x28
 80037d2:	42a3      	cmp	r3, r4
 80037d4:	bf04      	itt	eq
 80037d6:	2301      	moveq	r3, #1
 80037d8:	61a3      	streq	r3, [r4, #24]
 80037da:	4620      	mov	r0, r4
 80037dc:	f000 f820 	bl	8003820 <__sfp>
 80037e0:	6060      	str	r0, [r4, #4]
 80037e2:	4620      	mov	r0, r4
 80037e4:	f000 f81c 	bl	8003820 <__sfp>
 80037e8:	60a0      	str	r0, [r4, #8]
 80037ea:	4620      	mov	r0, r4
 80037ec:	f000 f818 	bl	8003820 <__sfp>
 80037f0:	2200      	movs	r2, #0
 80037f2:	60e0      	str	r0, [r4, #12]
 80037f4:	2104      	movs	r1, #4
 80037f6:	6860      	ldr	r0, [r4, #4]
 80037f8:	f7ff ff82 	bl	8003700 <std>
 80037fc:	68a0      	ldr	r0, [r4, #8]
 80037fe:	2201      	movs	r2, #1
 8003800:	2109      	movs	r1, #9
 8003802:	f7ff ff7d 	bl	8003700 <std>
 8003806:	68e0      	ldr	r0, [r4, #12]
 8003808:	2202      	movs	r2, #2
 800380a:	2112      	movs	r1, #18
 800380c:	f7ff ff78 	bl	8003700 <std>
 8003810:	2301      	movs	r3, #1
 8003812:	61a3      	str	r3, [r4, #24]
 8003814:	e7d2      	b.n	80037bc <__sinit+0xc>
 8003816:	bf00      	nop
 8003818:	08003d30 	.word	0x08003d30
 800381c:	08003749 	.word	0x08003749

08003820 <__sfp>:
 8003820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003822:	4607      	mov	r7, r0
 8003824:	f7ff ffac 	bl	8003780 <__sfp_lock_acquire>
 8003828:	4b1e      	ldr	r3, [pc, #120]	; (80038a4 <__sfp+0x84>)
 800382a:	681e      	ldr	r6, [r3, #0]
 800382c:	69b3      	ldr	r3, [r6, #24]
 800382e:	b913      	cbnz	r3, 8003836 <__sfp+0x16>
 8003830:	4630      	mov	r0, r6
 8003832:	f7ff ffbd 	bl	80037b0 <__sinit>
 8003836:	3648      	adds	r6, #72	; 0x48
 8003838:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800383c:	3b01      	subs	r3, #1
 800383e:	d503      	bpl.n	8003848 <__sfp+0x28>
 8003840:	6833      	ldr	r3, [r6, #0]
 8003842:	b30b      	cbz	r3, 8003888 <__sfp+0x68>
 8003844:	6836      	ldr	r6, [r6, #0]
 8003846:	e7f7      	b.n	8003838 <__sfp+0x18>
 8003848:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800384c:	b9d5      	cbnz	r5, 8003884 <__sfp+0x64>
 800384e:	4b16      	ldr	r3, [pc, #88]	; (80038a8 <__sfp+0x88>)
 8003850:	60e3      	str	r3, [r4, #12]
 8003852:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003856:	6665      	str	r5, [r4, #100]	; 0x64
 8003858:	f000 f847 	bl	80038ea <__retarget_lock_init_recursive>
 800385c:	f7ff ff96 	bl	800378c <__sfp_lock_release>
 8003860:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003864:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003868:	6025      	str	r5, [r4, #0]
 800386a:	61a5      	str	r5, [r4, #24]
 800386c:	2208      	movs	r2, #8
 800386e:	4629      	mov	r1, r5
 8003870:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003874:	f7ff fd44 	bl	8003300 <memset>
 8003878:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800387c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003880:	4620      	mov	r0, r4
 8003882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003884:	3468      	adds	r4, #104	; 0x68
 8003886:	e7d9      	b.n	800383c <__sfp+0x1c>
 8003888:	2104      	movs	r1, #4
 800388a:	4638      	mov	r0, r7
 800388c:	f7ff ff62 	bl	8003754 <__sfmoreglue>
 8003890:	4604      	mov	r4, r0
 8003892:	6030      	str	r0, [r6, #0]
 8003894:	2800      	cmp	r0, #0
 8003896:	d1d5      	bne.n	8003844 <__sfp+0x24>
 8003898:	f7ff ff78 	bl	800378c <__sfp_lock_release>
 800389c:	230c      	movs	r3, #12
 800389e:	603b      	str	r3, [r7, #0]
 80038a0:	e7ee      	b.n	8003880 <__sfp+0x60>
 80038a2:	bf00      	nop
 80038a4:	08003d30 	.word	0x08003d30
 80038a8:	ffff0001 	.word	0xffff0001

080038ac <_fwalk_reent>:
 80038ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80038b0:	4606      	mov	r6, r0
 80038b2:	4688      	mov	r8, r1
 80038b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80038b8:	2700      	movs	r7, #0
 80038ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80038be:	f1b9 0901 	subs.w	r9, r9, #1
 80038c2:	d505      	bpl.n	80038d0 <_fwalk_reent+0x24>
 80038c4:	6824      	ldr	r4, [r4, #0]
 80038c6:	2c00      	cmp	r4, #0
 80038c8:	d1f7      	bne.n	80038ba <_fwalk_reent+0xe>
 80038ca:	4638      	mov	r0, r7
 80038cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038d0:	89ab      	ldrh	r3, [r5, #12]
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d907      	bls.n	80038e6 <_fwalk_reent+0x3a>
 80038d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80038da:	3301      	adds	r3, #1
 80038dc:	d003      	beq.n	80038e6 <_fwalk_reent+0x3a>
 80038de:	4629      	mov	r1, r5
 80038e0:	4630      	mov	r0, r6
 80038e2:	47c0      	blx	r8
 80038e4:	4307      	orrs	r7, r0
 80038e6:	3568      	adds	r5, #104	; 0x68
 80038e8:	e7e9      	b.n	80038be <_fwalk_reent+0x12>

080038ea <__retarget_lock_init_recursive>:
 80038ea:	4770      	bx	lr

080038ec <__retarget_lock_acquire_recursive>:
 80038ec:	4770      	bx	lr

080038ee <__retarget_lock_release_recursive>:
 80038ee:	4770      	bx	lr

080038f0 <__swhatbuf_r>:
 80038f0:	b570      	push	{r4, r5, r6, lr}
 80038f2:	460e      	mov	r6, r1
 80038f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038f8:	2900      	cmp	r1, #0
 80038fa:	b096      	sub	sp, #88	; 0x58
 80038fc:	4614      	mov	r4, r2
 80038fe:	461d      	mov	r5, r3
 8003900:	da07      	bge.n	8003912 <__swhatbuf_r+0x22>
 8003902:	2300      	movs	r3, #0
 8003904:	602b      	str	r3, [r5, #0]
 8003906:	89b3      	ldrh	r3, [r6, #12]
 8003908:	061a      	lsls	r2, r3, #24
 800390a:	d410      	bmi.n	800392e <__swhatbuf_r+0x3e>
 800390c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003910:	e00e      	b.n	8003930 <__swhatbuf_r+0x40>
 8003912:	466a      	mov	r2, sp
 8003914:	f000 f970 	bl	8003bf8 <_fstat_r>
 8003918:	2800      	cmp	r0, #0
 800391a:	dbf2      	blt.n	8003902 <__swhatbuf_r+0x12>
 800391c:	9a01      	ldr	r2, [sp, #4]
 800391e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003922:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003926:	425a      	negs	r2, r3
 8003928:	415a      	adcs	r2, r3
 800392a:	602a      	str	r2, [r5, #0]
 800392c:	e7ee      	b.n	800390c <__swhatbuf_r+0x1c>
 800392e:	2340      	movs	r3, #64	; 0x40
 8003930:	2000      	movs	r0, #0
 8003932:	6023      	str	r3, [r4, #0]
 8003934:	b016      	add	sp, #88	; 0x58
 8003936:	bd70      	pop	{r4, r5, r6, pc}

08003938 <__smakebuf_r>:
 8003938:	898b      	ldrh	r3, [r1, #12]
 800393a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800393c:	079d      	lsls	r5, r3, #30
 800393e:	4606      	mov	r6, r0
 8003940:	460c      	mov	r4, r1
 8003942:	d507      	bpl.n	8003954 <__smakebuf_r+0x1c>
 8003944:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003948:	6023      	str	r3, [r4, #0]
 800394a:	6123      	str	r3, [r4, #16]
 800394c:	2301      	movs	r3, #1
 800394e:	6163      	str	r3, [r4, #20]
 8003950:	b002      	add	sp, #8
 8003952:	bd70      	pop	{r4, r5, r6, pc}
 8003954:	ab01      	add	r3, sp, #4
 8003956:	466a      	mov	r2, sp
 8003958:	f7ff ffca 	bl	80038f0 <__swhatbuf_r>
 800395c:	9900      	ldr	r1, [sp, #0]
 800395e:	4605      	mov	r5, r0
 8003960:	4630      	mov	r0, r6
 8003962:	f000 f879 	bl	8003a58 <_malloc_r>
 8003966:	b948      	cbnz	r0, 800397c <__smakebuf_r+0x44>
 8003968:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800396c:	059a      	lsls	r2, r3, #22
 800396e:	d4ef      	bmi.n	8003950 <__smakebuf_r+0x18>
 8003970:	f023 0303 	bic.w	r3, r3, #3
 8003974:	f043 0302 	orr.w	r3, r3, #2
 8003978:	81a3      	strh	r3, [r4, #12]
 800397a:	e7e3      	b.n	8003944 <__smakebuf_r+0xc>
 800397c:	4b0d      	ldr	r3, [pc, #52]	; (80039b4 <__smakebuf_r+0x7c>)
 800397e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003980:	89a3      	ldrh	r3, [r4, #12]
 8003982:	6020      	str	r0, [r4, #0]
 8003984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003988:	81a3      	strh	r3, [r4, #12]
 800398a:	9b00      	ldr	r3, [sp, #0]
 800398c:	6163      	str	r3, [r4, #20]
 800398e:	9b01      	ldr	r3, [sp, #4]
 8003990:	6120      	str	r0, [r4, #16]
 8003992:	b15b      	cbz	r3, 80039ac <__smakebuf_r+0x74>
 8003994:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003998:	4630      	mov	r0, r6
 800399a:	f000 f93f 	bl	8003c1c <_isatty_r>
 800399e:	b128      	cbz	r0, 80039ac <__smakebuf_r+0x74>
 80039a0:	89a3      	ldrh	r3, [r4, #12]
 80039a2:	f023 0303 	bic.w	r3, r3, #3
 80039a6:	f043 0301 	orr.w	r3, r3, #1
 80039aa:	81a3      	strh	r3, [r4, #12]
 80039ac:	89a0      	ldrh	r0, [r4, #12]
 80039ae:	4305      	orrs	r5, r0
 80039b0:	81a5      	strh	r5, [r4, #12]
 80039b2:	e7cd      	b.n	8003950 <__smakebuf_r+0x18>
 80039b4:	08003749 	.word	0x08003749

080039b8 <_free_r>:
 80039b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80039ba:	2900      	cmp	r1, #0
 80039bc:	d048      	beq.n	8003a50 <_free_r+0x98>
 80039be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039c2:	9001      	str	r0, [sp, #4]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	f1a1 0404 	sub.w	r4, r1, #4
 80039ca:	bfb8      	it	lt
 80039cc:	18e4      	addlt	r4, r4, r3
 80039ce:	f000 f947 	bl	8003c60 <__malloc_lock>
 80039d2:	4a20      	ldr	r2, [pc, #128]	; (8003a54 <_free_r+0x9c>)
 80039d4:	9801      	ldr	r0, [sp, #4]
 80039d6:	6813      	ldr	r3, [r2, #0]
 80039d8:	4615      	mov	r5, r2
 80039da:	b933      	cbnz	r3, 80039ea <_free_r+0x32>
 80039dc:	6063      	str	r3, [r4, #4]
 80039de:	6014      	str	r4, [r2, #0]
 80039e0:	b003      	add	sp, #12
 80039e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80039e6:	f000 b941 	b.w	8003c6c <__malloc_unlock>
 80039ea:	42a3      	cmp	r3, r4
 80039ec:	d90b      	bls.n	8003a06 <_free_r+0x4e>
 80039ee:	6821      	ldr	r1, [r4, #0]
 80039f0:	1862      	adds	r2, r4, r1
 80039f2:	4293      	cmp	r3, r2
 80039f4:	bf04      	itt	eq
 80039f6:	681a      	ldreq	r2, [r3, #0]
 80039f8:	685b      	ldreq	r3, [r3, #4]
 80039fa:	6063      	str	r3, [r4, #4]
 80039fc:	bf04      	itt	eq
 80039fe:	1852      	addeq	r2, r2, r1
 8003a00:	6022      	streq	r2, [r4, #0]
 8003a02:	602c      	str	r4, [r5, #0]
 8003a04:	e7ec      	b.n	80039e0 <_free_r+0x28>
 8003a06:	461a      	mov	r2, r3
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	b10b      	cbz	r3, 8003a10 <_free_r+0x58>
 8003a0c:	42a3      	cmp	r3, r4
 8003a0e:	d9fa      	bls.n	8003a06 <_free_r+0x4e>
 8003a10:	6811      	ldr	r1, [r2, #0]
 8003a12:	1855      	adds	r5, r2, r1
 8003a14:	42a5      	cmp	r5, r4
 8003a16:	d10b      	bne.n	8003a30 <_free_r+0x78>
 8003a18:	6824      	ldr	r4, [r4, #0]
 8003a1a:	4421      	add	r1, r4
 8003a1c:	1854      	adds	r4, r2, r1
 8003a1e:	42a3      	cmp	r3, r4
 8003a20:	6011      	str	r1, [r2, #0]
 8003a22:	d1dd      	bne.n	80039e0 <_free_r+0x28>
 8003a24:	681c      	ldr	r4, [r3, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	6053      	str	r3, [r2, #4]
 8003a2a:	4421      	add	r1, r4
 8003a2c:	6011      	str	r1, [r2, #0]
 8003a2e:	e7d7      	b.n	80039e0 <_free_r+0x28>
 8003a30:	d902      	bls.n	8003a38 <_free_r+0x80>
 8003a32:	230c      	movs	r3, #12
 8003a34:	6003      	str	r3, [r0, #0]
 8003a36:	e7d3      	b.n	80039e0 <_free_r+0x28>
 8003a38:	6825      	ldr	r5, [r4, #0]
 8003a3a:	1961      	adds	r1, r4, r5
 8003a3c:	428b      	cmp	r3, r1
 8003a3e:	bf04      	itt	eq
 8003a40:	6819      	ldreq	r1, [r3, #0]
 8003a42:	685b      	ldreq	r3, [r3, #4]
 8003a44:	6063      	str	r3, [r4, #4]
 8003a46:	bf04      	itt	eq
 8003a48:	1949      	addeq	r1, r1, r5
 8003a4a:	6021      	streq	r1, [r4, #0]
 8003a4c:	6054      	str	r4, [r2, #4]
 8003a4e:	e7c7      	b.n	80039e0 <_free_r+0x28>
 8003a50:	b003      	add	sp, #12
 8003a52:	bd30      	pop	{r4, r5, pc}
 8003a54:	20012dc0 	.word	0x20012dc0

08003a58 <_malloc_r>:
 8003a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a5a:	1ccd      	adds	r5, r1, #3
 8003a5c:	f025 0503 	bic.w	r5, r5, #3
 8003a60:	3508      	adds	r5, #8
 8003a62:	2d0c      	cmp	r5, #12
 8003a64:	bf38      	it	cc
 8003a66:	250c      	movcc	r5, #12
 8003a68:	2d00      	cmp	r5, #0
 8003a6a:	4606      	mov	r6, r0
 8003a6c:	db01      	blt.n	8003a72 <_malloc_r+0x1a>
 8003a6e:	42a9      	cmp	r1, r5
 8003a70:	d903      	bls.n	8003a7a <_malloc_r+0x22>
 8003a72:	230c      	movs	r3, #12
 8003a74:	6033      	str	r3, [r6, #0]
 8003a76:	2000      	movs	r0, #0
 8003a78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a7a:	f000 f8f1 	bl	8003c60 <__malloc_lock>
 8003a7e:	4921      	ldr	r1, [pc, #132]	; (8003b04 <_malloc_r+0xac>)
 8003a80:	680a      	ldr	r2, [r1, #0]
 8003a82:	4614      	mov	r4, r2
 8003a84:	b99c      	cbnz	r4, 8003aae <_malloc_r+0x56>
 8003a86:	4f20      	ldr	r7, [pc, #128]	; (8003b08 <_malloc_r+0xb0>)
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	b923      	cbnz	r3, 8003a96 <_malloc_r+0x3e>
 8003a8c:	4621      	mov	r1, r4
 8003a8e:	4630      	mov	r0, r6
 8003a90:	f000 f83c 	bl	8003b0c <_sbrk_r>
 8003a94:	6038      	str	r0, [r7, #0]
 8003a96:	4629      	mov	r1, r5
 8003a98:	4630      	mov	r0, r6
 8003a9a:	f000 f837 	bl	8003b0c <_sbrk_r>
 8003a9e:	1c43      	adds	r3, r0, #1
 8003aa0:	d123      	bne.n	8003aea <_malloc_r+0x92>
 8003aa2:	230c      	movs	r3, #12
 8003aa4:	6033      	str	r3, [r6, #0]
 8003aa6:	4630      	mov	r0, r6
 8003aa8:	f000 f8e0 	bl	8003c6c <__malloc_unlock>
 8003aac:	e7e3      	b.n	8003a76 <_malloc_r+0x1e>
 8003aae:	6823      	ldr	r3, [r4, #0]
 8003ab0:	1b5b      	subs	r3, r3, r5
 8003ab2:	d417      	bmi.n	8003ae4 <_malloc_r+0x8c>
 8003ab4:	2b0b      	cmp	r3, #11
 8003ab6:	d903      	bls.n	8003ac0 <_malloc_r+0x68>
 8003ab8:	6023      	str	r3, [r4, #0]
 8003aba:	441c      	add	r4, r3
 8003abc:	6025      	str	r5, [r4, #0]
 8003abe:	e004      	b.n	8003aca <_malloc_r+0x72>
 8003ac0:	6863      	ldr	r3, [r4, #4]
 8003ac2:	42a2      	cmp	r2, r4
 8003ac4:	bf0c      	ite	eq
 8003ac6:	600b      	streq	r3, [r1, #0]
 8003ac8:	6053      	strne	r3, [r2, #4]
 8003aca:	4630      	mov	r0, r6
 8003acc:	f000 f8ce 	bl	8003c6c <__malloc_unlock>
 8003ad0:	f104 000b 	add.w	r0, r4, #11
 8003ad4:	1d23      	adds	r3, r4, #4
 8003ad6:	f020 0007 	bic.w	r0, r0, #7
 8003ada:	1ac2      	subs	r2, r0, r3
 8003adc:	d0cc      	beq.n	8003a78 <_malloc_r+0x20>
 8003ade:	1a1b      	subs	r3, r3, r0
 8003ae0:	50a3      	str	r3, [r4, r2]
 8003ae2:	e7c9      	b.n	8003a78 <_malloc_r+0x20>
 8003ae4:	4622      	mov	r2, r4
 8003ae6:	6864      	ldr	r4, [r4, #4]
 8003ae8:	e7cc      	b.n	8003a84 <_malloc_r+0x2c>
 8003aea:	1cc4      	adds	r4, r0, #3
 8003aec:	f024 0403 	bic.w	r4, r4, #3
 8003af0:	42a0      	cmp	r0, r4
 8003af2:	d0e3      	beq.n	8003abc <_malloc_r+0x64>
 8003af4:	1a21      	subs	r1, r4, r0
 8003af6:	4630      	mov	r0, r6
 8003af8:	f000 f808 	bl	8003b0c <_sbrk_r>
 8003afc:	3001      	adds	r0, #1
 8003afe:	d1dd      	bne.n	8003abc <_malloc_r+0x64>
 8003b00:	e7cf      	b.n	8003aa2 <_malloc_r+0x4a>
 8003b02:	bf00      	nop
 8003b04:	20012dc0 	.word	0x20012dc0
 8003b08:	20012dc4 	.word	0x20012dc4

08003b0c <_sbrk_r>:
 8003b0c:	b538      	push	{r3, r4, r5, lr}
 8003b0e:	4d06      	ldr	r5, [pc, #24]	; (8003b28 <_sbrk_r+0x1c>)
 8003b10:	2300      	movs	r3, #0
 8003b12:	4604      	mov	r4, r0
 8003b14:	4608      	mov	r0, r1
 8003b16:	602b      	str	r3, [r5, #0]
 8003b18:	f000 f8c0 	bl	8003c9c <_sbrk>
 8003b1c:	1c43      	adds	r3, r0, #1
 8003b1e:	d102      	bne.n	8003b26 <_sbrk_r+0x1a>
 8003b20:	682b      	ldr	r3, [r5, #0]
 8003b22:	b103      	cbz	r3, 8003b26 <_sbrk_r+0x1a>
 8003b24:	6023      	str	r3, [r4, #0]
 8003b26:	bd38      	pop	{r3, r4, r5, pc}
 8003b28:	20012e24 	.word	0x20012e24

08003b2c <__sread>:
 8003b2c:	b510      	push	{r4, lr}
 8003b2e:	460c      	mov	r4, r1
 8003b30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b34:	f000 f8a0 	bl	8003c78 <_read_r>
 8003b38:	2800      	cmp	r0, #0
 8003b3a:	bfab      	itete	ge
 8003b3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003b3e:	89a3      	ldrhlt	r3, [r4, #12]
 8003b40:	181b      	addge	r3, r3, r0
 8003b42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003b46:	bfac      	ite	ge
 8003b48:	6563      	strge	r3, [r4, #84]	; 0x54
 8003b4a:	81a3      	strhlt	r3, [r4, #12]
 8003b4c:	bd10      	pop	{r4, pc}

08003b4e <__swrite>:
 8003b4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b52:	461f      	mov	r7, r3
 8003b54:	898b      	ldrh	r3, [r1, #12]
 8003b56:	05db      	lsls	r3, r3, #23
 8003b58:	4605      	mov	r5, r0
 8003b5a:	460c      	mov	r4, r1
 8003b5c:	4616      	mov	r6, r2
 8003b5e:	d505      	bpl.n	8003b6c <__swrite+0x1e>
 8003b60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b64:	2302      	movs	r3, #2
 8003b66:	2200      	movs	r2, #0
 8003b68:	f000 f868 	bl	8003c3c <_lseek_r>
 8003b6c:	89a3      	ldrh	r3, [r4, #12]
 8003b6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b76:	81a3      	strh	r3, [r4, #12]
 8003b78:	4632      	mov	r2, r6
 8003b7a:	463b      	mov	r3, r7
 8003b7c:	4628      	mov	r0, r5
 8003b7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b82:	f000 b817 	b.w	8003bb4 <_write_r>

08003b86 <__sseek>:
 8003b86:	b510      	push	{r4, lr}
 8003b88:	460c      	mov	r4, r1
 8003b8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b8e:	f000 f855 	bl	8003c3c <_lseek_r>
 8003b92:	1c43      	adds	r3, r0, #1
 8003b94:	89a3      	ldrh	r3, [r4, #12]
 8003b96:	bf15      	itete	ne
 8003b98:	6560      	strne	r0, [r4, #84]	; 0x54
 8003b9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003b9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003ba2:	81a3      	strheq	r3, [r4, #12]
 8003ba4:	bf18      	it	ne
 8003ba6:	81a3      	strhne	r3, [r4, #12]
 8003ba8:	bd10      	pop	{r4, pc}

08003baa <__sclose>:
 8003baa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bae:	f000 b813 	b.w	8003bd8 <_close_r>
	...

08003bb4 <_write_r>:
 8003bb4:	b538      	push	{r3, r4, r5, lr}
 8003bb6:	4d07      	ldr	r5, [pc, #28]	; (8003bd4 <_write_r+0x20>)
 8003bb8:	4604      	mov	r4, r0
 8003bba:	4608      	mov	r0, r1
 8003bbc:	4611      	mov	r1, r2
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	602a      	str	r2, [r5, #0]
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	f7fc ffb7 	bl	8000b36 <_write>
 8003bc8:	1c43      	adds	r3, r0, #1
 8003bca:	d102      	bne.n	8003bd2 <_write_r+0x1e>
 8003bcc:	682b      	ldr	r3, [r5, #0]
 8003bce:	b103      	cbz	r3, 8003bd2 <_write_r+0x1e>
 8003bd0:	6023      	str	r3, [r4, #0]
 8003bd2:	bd38      	pop	{r3, r4, r5, pc}
 8003bd4:	20012e24 	.word	0x20012e24

08003bd8 <_close_r>:
 8003bd8:	b538      	push	{r3, r4, r5, lr}
 8003bda:	4d06      	ldr	r5, [pc, #24]	; (8003bf4 <_close_r+0x1c>)
 8003bdc:	2300      	movs	r3, #0
 8003bde:	4604      	mov	r4, r0
 8003be0:	4608      	mov	r0, r1
 8003be2:	602b      	str	r3, [r5, #0]
 8003be4:	f7fc ffc3 	bl	8000b6e <_close>
 8003be8:	1c43      	adds	r3, r0, #1
 8003bea:	d102      	bne.n	8003bf2 <_close_r+0x1a>
 8003bec:	682b      	ldr	r3, [r5, #0]
 8003bee:	b103      	cbz	r3, 8003bf2 <_close_r+0x1a>
 8003bf0:	6023      	str	r3, [r4, #0]
 8003bf2:	bd38      	pop	{r3, r4, r5, pc}
 8003bf4:	20012e24 	.word	0x20012e24

08003bf8 <_fstat_r>:
 8003bf8:	b538      	push	{r3, r4, r5, lr}
 8003bfa:	4d07      	ldr	r5, [pc, #28]	; (8003c18 <_fstat_r+0x20>)
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	4604      	mov	r4, r0
 8003c00:	4608      	mov	r0, r1
 8003c02:	4611      	mov	r1, r2
 8003c04:	602b      	str	r3, [r5, #0]
 8003c06:	f7fc ffbe 	bl	8000b86 <_fstat>
 8003c0a:	1c43      	adds	r3, r0, #1
 8003c0c:	d102      	bne.n	8003c14 <_fstat_r+0x1c>
 8003c0e:	682b      	ldr	r3, [r5, #0]
 8003c10:	b103      	cbz	r3, 8003c14 <_fstat_r+0x1c>
 8003c12:	6023      	str	r3, [r4, #0]
 8003c14:	bd38      	pop	{r3, r4, r5, pc}
 8003c16:	bf00      	nop
 8003c18:	20012e24 	.word	0x20012e24

08003c1c <_isatty_r>:
 8003c1c:	b538      	push	{r3, r4, r5, lr}
 8003c1e:	4d06      	ldr	r5, [pc, #24]	; (8003c38 <_isatty_r+0x1c>)
 8003c20:	2300      	movs	r3, #0
 8003c22:	4604      	mov	r4, r0
 8003c24:	4608      	mov	r0, r1
 8003c26:	602b      	str	r3, [r5, #0]
 8003c28:	f7fc ffbd 	bl	8000ba6 <_isatty>
 8003c2c:	1c43      	adds	r3, r0, #1
 8003c2e:	d102      	bne.n	8003c36 <_isatty_r+0x1a>
 8003c30:	682b      	ldr	r3, [r5, #0]
 8003c32:	b103      	cbz	r3, 8003c36 <_isatty_r+0x1a>
 8003c34:	6023      	str	r3, [r4, #0]
 8003c36:	bd38      	pop	{r3, r4, r5, pc}
 8003c38:	20012e24 	.word	0x20012e24

08003c3c <_lseek_r>:
 8003c3c:	b538      	push	{r3, r4, r5, lr}
 8003c3e:	4d07      	ldr	r5, [pc, #28]	; (8003c5c <_lseek_r+0x20>)
 8003c40:	4604      	mov	r4, r0
 8003c42:	4608      	mov	r0, r1
 8003c44:	4611      	mov	r1, r2
 8003c46:	2200      	movs	r2, #0
 8003c48:	602a      	str	r2, [r5, #0]
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	f7fc ffb6 	bl	8000bbc <_lseek>
 8003c50:	1c43      	adds	r3, r0, #1
 8003c52:	d102      	bne.n	8003c5a <_lseek_r+0x1e>
 8003c54:	682b      	ldr	r3, [r5, #0]
 8003c56:	b103      	cbz	r3, 8003c5a <_lseek_r+0x1e>
 8003c58:	6023      	str	r3, [r4, #0]
 8003c5a:	bd38      	pop	{r3, r4, r5, pc}
 8003c5c:	20012e24 	.word	0x20012e24

08003c60 <__malloc_lock>:
 8003c60:	4801      	ldr	r0, [pc, #4]	; (8003c68 <__malloc_lock+0x8>)
 8003c62:	f7ff be43 	b.w	80038ec <__retarget_lock_acquire_recursive>
 8003c66:	bf00      	nop
 8003c68:	20012e1c 	.word	0x20012e1c

08003c6c <__malloc_unlock>:
 8003c6c:	4801      	ldr	r0, [pc, #4]	; (8003c74 <__malloc_unlock+0x8>)
 8003c6e:	f7ff be3e 	b.w	80038ee <__retarget_lock_release_recursive>
 8003c72:	bf00      	nop
 8003c74:	20012e1c 	.word	0x20012e1c

08003c78 <_read_r>:
 8003c78:	b538      	push	{r3, r4, r5, lr}
 8003c7a:	4d07      	ldr	r5, [pc, #28]	; (8003c98 <_read_r+0x20>)
 8003c7c:	4604      	mov	r4, r0
 8003c7e:	4608      	mov	r0, r1
 8003c80:	4611      	mov	r1, r2
 8003c82:	2200      	movs	r2, #0
 8003c84:	602a      	str	r2, [r5, #0]
 8003c86:	461a      	mov	r2, r3
 8003c88:	f7fc ff38 	bl	8000afc <_read>
 8003c8c:	1c43      	adds	r3, r0, #1
 8003c8e:	d102      	bne.n	8003c96 <_read_r+0x1e>
 8003c90:	682b      	ldr	r3, [r5, #0]
 8003c92:	b103      	cbz	r3, 8003c96 <_read_r+0x1e>
 8003c94:	6023      	str	r3, [r4, #0]
 8003c96:	bd38      	pop	{r3, r4, r5, pc}
 8003c98:	20012e24 	.word	0x20012e24

08003c9c <_sbrk>:
 8003c9c:	4b04      	ldr	r3, [pc, #16]	; (8003cb0 <_sbrk+0x14>)
 8003c9e:	6819      	ldr	r1, [r3, #0]
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	b909      	cbnz	r1, 8003ca8 <_sbrk+0xc>
 8003ca4:	4903      	ldr	r1, [pc, #12]	; (8003cb4 <_sbrk+0x18>)
 8003ca6:	6019      	str	r1, [r3, #0]
 8003ca8:	6818      	ldr	r0, [r3, #0]
 8003caa:	4402      	add	r2, r0
 8003cac:	601a      	str	r2, [r3, #0]
 8003cae:	4770      	bx	lr
 8003cb0:	20012dc8 	.word	0x20012dc8
 8003cb4:	20012e28 	.word	0x20012e28

08003cb8 <_init>:
 8003cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cba:	bf00      	nop
 8003cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cbe:	bc08      	pop	{r3}
 8003cc0:	469e      	mov	lr, r3
 8003cc2:	4770      	bx	lr

08003cc4 <_fini>:
 8003cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cc6:	bf00      	nop
 8003cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cca:	bc08      	pop	{r3}
 8003ccc:	469e      	mov	lr, r3
 8003cce:	4770      	bx	lr
